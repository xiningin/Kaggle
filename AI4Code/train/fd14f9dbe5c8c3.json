{"cell_type":{"589f89c5":"code","18ac76f6":"code","ee5edee1":"code","0ee0bd04":"code","d0e27a9c":"code","8a85aa27":"code","44a0baa2":"code","77285345":"code","eb2886ba":"code","bc0e2470":"code","6247f381":"code","e7a737c8":"code","dd3a08c7":"code","2edf164e":"code","e478eb3c":"code","c053a70a":"code","782508a1":"markdown","452464c8":"markdown","86c8f337":"markdown","6aca16a3":"markdown","844c9648":"markdown","82ccc77c":"markdown","f76edd13":"markdown","c320349f":"markdown","2e6d7b93":"markdown","ad7e0057":"markdown","207564f2":"markdown","dcb1400d":"markdown","f6171f2d":"markdown","f5189bc8":"markdown","c45fca30":"markdown","3b8365a1":"markdown","5d6fea27":"markdown","dbd3e116":"markdown","69ff1df2":"markdown","162a110c":"markdown","171e78b4":"markdown","0a8d696b":"markdown","80993a57":"markdown","cd862109":"markdown","421a02e5":"markdown","35966f8c":"markdown","d6072d9c":"markdown","1352fabb":"markdown","5c596257":"markdown","1d799a36":"markdown","1f365cfd":"markdown","80b458b6":"markdown","6ab03e03":"markdown","c5ba0373":"markdown","6a0d61d7":"markdown","1c382972":"markdown","b5e48903":"markdown"},"source":{"589f89c5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sqlite3\nimport plotly.express as px\nimport plotly\nimport math\n\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS\n\n%matplotlib inline\n","18ac76f6":"#Function used to add value labels to barplots\n\ndef add_val_labels(plot, spacing=float(0.5)):\n    for p in plot.patches:\n        if not math.isnan(p.get_width()):\n            x = p.get_width() - spacing\n            y = p.get_y() + p.get_height() - float(0.3)\n            value = round(p.get_width(), 1)\n            plot.text(x, y, value, ha=\"left\", color=\"white\", size='large')\n","ee5edee1":"# Connect to sqlite database\nconnect = sqlite3.connect(\"..\/input\/pitchfork-data\/database.sqlite\")\n\n# Load database tables to separate dataframes\ndf_artists = pd.read_sql_query(\"SELECT * FROM artists\", connect, index_col=\"reviewid\")\ndf_content = pd.read_sql_query(\"SELECT * FROM content\", connect, index_col=\"reviewid\")\ndf_genres = pd.read_sql_query(\"SELECT * FROM genres\", connect, index_col=\"reviewid\")\ndf_labels = pd.read_sql_query(\"SELECT * FROM labels\", connect, index_col=\"reviewid\")\ndf_reviews = pd.read_sql_query(\"SELECT * FROM reviews\", connect, index_col=\"reviewid\")\ndf_years = pd.read_sql_query(\"SELECT * FROM years\", connect, index_col=\"reviewid\")\n\n# Close connection\nconnect.close()","0ee0bd04":"# Some reviews have multiple \"genre\" values assigned to them, we will create an additional column for\n# all genres combined\n\ngenres_merged = df_genres.groupby(\"reviewid\")[\"genre\"].apply(lambda x: ', '.join(x.astype(str)))\n\ndf_genres_mod = df_genres[~df_genres.index.duplicated(keep=\"first\")].rename(columns={\"genre\": \"first_genre\"})\ndf_genres_mod[\"genres\"] = genres_merged\n\n# Some reviewed albums are multi-year releases - anniversary releases, remasters or old tour recordings\n# We're going to only keep the actual release years and replace NaNs with 0 values\n\ndf_years_mod = df_years[~df_years.index.duplicated(keep=\"first\")].fillna(0)\n\n# Create a dataframe containing album reviews with their genres, release years and review texts\n\ndf_reviews_main = df_reviews.copy()\ndf_reviews_main[\"genres\"] = df_genres_mod[\"genres\"]\ndf_reviews_main[\"release_year\"] = df_years_mod[\"year\"].astype(int)\ndf_reviews_main[\"content\"] = df_content\n\n# Add a column \"multi-genre\" for albums with more than one genre\n\ndf_reviews_main[\"multi-genre\"] = df_reviews_main[\"genres\"].apply(lambda x: \",\" in x)\n\n# Add a column \"multi-artist\" for albums with more than one artist\n\ndf_reviews_main[\"multi-artist\"] = df_reviews_main[\"artist\"].apply(lambda x: \",\" in x or \"various artists\" in x)\n\n# Convert column \"best_new_music\" to boolean\n\ndf_reviews_main[\"best_new_music\"] = df_reviews_main[\"best_new_music\"].astype(bool)\n\ndf_reviews_main.head()\n","d0e27a9c":"df_artists_scores = df_artists.copy()\ndf_artists_scores = df_artists_scores.join(df_reviews_main[\"score\"]).join(df_reviews_main[\"best_new_music\"])\n\n# Drop rows with artist = \"various artists\"\n\ndf_artists_scores = df_artists_scores.drop(df_artists_scores[df_artists_scores[\"artist\"] == \"various artists\"].index)\ndf_artists_scores.head()","8a85aa27":"df_labels_scores = df_labels.copy()\ndf_labels_scores = df_labels_scores.join(df_reviews_main[\"score\"]).join(df_reviews_main[\"best_new_music\"])\n\n# Drop rows with label = \"self-released\"\n\ndf_labels_scores = df_labels_scores.drop(df_labels_scores[df_labels_scores[\"label\"] == \"self-released\"].index)\ndf_labels_scores.head()","44a0baa2":"df_genres_scores = df_genres.copy()\ndf_genres_scores = df_genres_scores.join(df_reviews_main[\"score\"]).join(df_reviews_main[\"best_new_music\"])\n\n# Drop rows with genre = \"None\"\n\ndf_genres_scores = df_genres_scores.drop(df_genres_scores[df_genres_scores[\"genre\"].isnull()].index)\ndf_genres_scores.head()","77285345":"sns.set_style(\"whitegrid\")\nplt.figure(figsize=(10, 5))\nsns.histplot(data=df_reviews_main, x=\"score\", bins=20, kde=True)\nplt.xticks(range(0, 11, 1), fontsize=10)\nplt.yticks(fontsize=12)\nplt.title(\"Review score distribution\", fontsize=20)\nplt.xlabel('Score', fontsize=16)\nplt.ylabel('Count', fontsize=16)\nplt.show()\n","eb2886ba":"genres_count = df_genres_scores.groupby(\"genre\")[\"score\"].count()\n\nfig = px.pie(genres_count, values='score', names=genres_count.index, title='Reviewed albums by genre')\nfig.show()","bc0e2470":"genres_scores = df_genres_scores.groupby(\"genre\")[\"score\"].mean().sort_values(ascending=False)\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(10, 5))\nplot = sns.barplot(x=genres_scores, y=genres_scores.index, palette=\"rocket\", dodge=False)\nplt.xticks(np.arange(0.0, 11.0, 1.0), fontsize=10)\n\nplt.yticks(fontsize=12)\nplt.tight_layout()\nplt.title(\"Average scores by genre\", fontsize=20)\nplt.xlabel('Average score', fontsize=16)\nplt.ylabel('Genre', fontsize=16)\nplt.grid(which=\"minor\", linestyle='-', axis=\"x\")\n\nadd_val_labels(plot)\n\nplt.show()\n\nprint(\"The average score across all genres is \" + str(round(df_genres_scores[\"score\"].mean(),2)))","6247f381":"top_10_artists = df_artists_scores.groupby(\"artist\")[\"score\"].agg([\"mean\", \"count\"]).sort_values(by=\"mean\", ascending=False).reset_index()[0:10]\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(10, 5))\nplot = sns.barplot(x=top_10_artists[\"mean\"], y=top_10_artists[\"artist\"], palette=\"Pastel1\", hue=top_10_artists[\"count\"], dodge=False)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=12)\nplt.tight_layout()\nplt.title(\"Top 10 artists by average album score\", fontsize=20)\nplt.xlabel('Average score', fontsize=16)\nplt.ylabel('Artist', fontsize=16)\nplt.grid(which=\"minor\", linestyle='-', axis=\"x\")\nplt.legend(title=\"Reviewed albums\", loc=\"lower left\")\n\nadd_val_labels(plot, spacing=float(0.6))\n\nplt.show()\n","e7a737c8":"top_10_artists_bnm = df_artists_scores[df_artists_scores[\"best_new_music\"] == True].groupby(\"artist\")[\"best_new_music\"].agg([\"count\"]).sort_values(by=\"count\", ascending=False).reset_index()[0:10]\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(10, 5))\nplot = sns.barplot(x=top_10_artists_bnm[\"count\"], y=top_10_artists_bnm[\"artist\"], palette=\"Greens_r\", dodge=False)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=12)\nplt.tight_layout()\nplt.title(\"Top 10 artists by no. of \\\"Best new music\\\" highlights\", fontsize=20)\nplt.xlabel('\\\"Best new music\\\" count', fontsize=16)\nplt.ylabel('Artist', fontsize=16)\nplt.grid(which=\"minor\", linestyle='-', axis=\"x\")\nplt.show()","dd3a08c7":"top_10_labels_bnm = df_labels_scores[df_labels_scores[\"best_new_music\"] == True].groupby(\"label\")[\"best_new_music\"].agg([\"count\"]).sort_values(by=\"count\", ascending=False).reset_index()[0:10]\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(10, 5))\nplot = sns.barplot(x=top_10_labels_bnm[\"count\"], y=top_10_labels_bnm[\"label\"], palette=\"PuRd_r\", dodge=False)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=12)\nplt.tight_layout()\nplt.title(\"Top 10 labels by no. of \\\"Best new music\\\" highlights\", fontsize=20)\nplt.xlabel('Average score', fontsize=16)\nplt.ylabel('Label', fontsize=16)\nplt.grid(which=\"minor\", linestyle='-', axis=\"x\")\n\nadd_val_labels(plot, spacing=float(2.0))\n\nplt.show()","2edf164e":"years_reviews = df_reviews_main.groupby(\"pub_year\")[\"title\"].agg([\"count\"]).sort_values(by=\"pub_year\", ascending=True).reset_index()\nyears_reviews = years_reviews.drop(index=18)\nplt.figure(figsize=(10, 5))\nsns.barplot(x=years_reviews[\"pub_year\"], y=years_reviews[\"count\"], dodge=False)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=12)\nplt.tight_layout()\nplt.title(\"Reviews per year\", fontsize=20)\nplt.xlabel('Year', fontsize=16)\nplt.ylabel('Count', fontsize=16)\nplt.grid(which=\"minor\", linestyle='-', axis=\"x\")\nplt.show()","e478eb3c":"years_reviews[\"count_best\"] = \\\ndf_reviews_main[df_reviews_main[\"score\"] >= 9].groupby(\"pub_year\")[\"title\"].agg([\"count\"]).sort_values(by=\"pub_year\", ascending=True).reset_index()[\"count\"]\nyears_reviews[\"best_percentage\"] = years_reviews.apply(lambda x: round((int(x[\"count_best\"]) \/ int(x[\"count\"])) * 100, 2), axis=1)\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(10, 5))\nsns.barplot(x=years_reviews[\"pub_year\"], y=years_reviews[\"best_percentage\"], dodge=False)\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=12)\nplt.tight_layout()\nplt.title(\"Ratio of best albums per year\", fontsize=20)\nplt.xlabel('Year', fontsize=16)\nplt.ylabel('Reviews with score >=9 (%)', fontsize=16)\nplt.grid(which=\"minor\", linestyle='-', axis=\"x\")\nplt.show()\n","c053a70a":"def red_color_func(word=None, font_size=None, position=None, orientation=None, font_path=None, random_state=None):\n    h = int(360.0 * 252.0 \/ 255.0)\n    s = int(100.0 * 255.0 \/ 255.0)\n    l = int(100.0 * float(random_state.randint(60, 120)) \/ 255.0)\n\n    return \"hsl({}, {}%, {}%)\".format(h, s, l)\n\n\nstopwords = set(STOPWORDS)\nstopwords.update(\n    [\"album\", \"one\", \"band\", \"song\", \"sound\", \"music\", \"songs\", \"record\", \"track\", \"time\", \"even\", \"make\", \"still\", \"s\",\n     \"rock\", \"way\", \"sounds\", \"pop\", \"thing\", \"first\", \"guitar\", \"much\", \"now\", \"year\", \"years\", \"made\", \"liner\",\n     \"note\", \"come\", \"tracks\", \"know\", \"something\", \"title\", \"take\", \"shit\", \"shat\", \"though\", \"seem\", \"never\"])\n\ngood_text = \" \".join(review for review in df_reviews_main[df_reviews_main[\"best_new_music\"] == True][\"content\"])\nmask = np.asarray(Image.open(\"..\/input\/heart-icon\/heart.jpg\"))\n\nwordcloud_good = WordCloud(background_color=\"white\", max_words=500, mask=mask, stopwords=stopwords, min_word_length=4,\n                           collocation_threshold=12, color_func=red_color_func).generate(good_text)\n\nplt.figure(figsize=[10, 10])\nplt.imshow(wordcloud_good, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","782508a1":"It would seem like the best rated albums have been reviewed in 1999, so we could consider it the best year for music by that metric.\n\nOn the other hand, it's worth considering that it was also a year with the lowest amount of reviewed albums, which could indicate that the authors were mostly focusing on writing reviews for the best and most popular albums","452464c8":"<h1 style=\"color:white;background-color: #ec7063;font-family: Lucida Bright, Georgia, serif;font-size:200%;text-align:center\">Data manipulation <\/h1>\n","86c8f337":"<h1 style=\"color:white;background-color: #abb2b9 ;font-family: Lucida Bright, Georgia, serif;font-size:150%;text-align:center\">Modify dataframes <\/h1>","6aca16a3":"<h1 style=\"color: #b06c99 ;background-color: #abb2b9 ;font-family: Lucida Bright, Georgia, serif;font-size:150%;text-align:center\">Top 10 artists by average score <\/h1>\n","844c9648":"Next, we'll consider how many high scoring albums (albums with score of at least 9) were reviewed in each year in relation to the total number of reviewed albums.","82ccc77c":"<h1 style=\"color: #157e0a ;background-color: #abb2b9 ;font-family: Lucida Bright, Georgia, serif;font-size:150%;text-align:center\">Top 10 artists by no. of \"Best new music\" highlights<\/h1>\n","f76edd13":"<h1 style=\"color: #f63c3f ;background-color: #abb2b9 ;font-family: Lucida Bright, Georgia, serif;font-size:150%;text-align:center\">Wordcloud: \"Best new music\" reviews<\/h1>","c320349f":"Rock albums reviews are the most common ones on the site, while global albums are the least popular.","2e6d7b93":"<h1 style=\"color:white;background-color: #f8c471  ;font-family: Lucida Bright, Georgia, serif;font-size:200%;text-align:center\">Data analysis & visualisation <\/h1>","ad7e0057":"<h1 style=\"color:black;background-color:PINK;font-family: Lucida Bright, Georgia, serif;font-size:400%;text-align:center\">Pitchfork album reviews EDA <\/h1>\n","207564f2":"### Create main review dataframe","dcb1400d":"<h1 style=\"color: #b41b57 ;background-color: #abb2b9 ;font-family: Lucida Bright, Georgia, serif;font-size:150%;text-align:center\">Average scores by genre <\/h1>\n","f6171f2d":"<h1 style=\"color: #bc77d8  ;background-color: #abb2b9 ;font-family: Lucida Bright, Georgia, serif;font-size:150%;text-align:center\">Amount of reviews by year<\/h1>\n","f5189bc8":"### Create a dataframe assigning music genres to individual review scores","c45fca30":"Next, let's take a look at publishing labels and see which of them have published the most albums featured in the \"Best new music section\".\n\n","3b8365a1":"When it comes to publishing labels we face the same problem, so we'll create a dataframe mapping \"scores\" and \"best_new_music\" columns to each publishing label involved with the album","5d6fea27":"In this case, Kanye West is the sole leader of the ranking, being the only one with 7 albums featured in the \"Best new music\" section of the page.\n\nThis metric seems more accurate if we want to determine the best artist, because it proves that they consinstently produce great albums.","dbd3e116":"Finally, we repeat the same process for music genres","69ff1df2":"Seems like reviewers tend to most often give scores in the range of 6.5-8.5. Scores below 2 are extremely rare.\n\nThis is perhaps counter-inutitive to some people, who may assume that if a perfectly average album deserves a score of 5, then scores should be more-or-less equally distributed around this number.\n\nThe reason for this could be the tendency of Pitchfork to mostly review albums of artists, who are already considered good.","162a110c":"<h1 style=\"color:white;background-color: #abb2b9 ;font-family: Lucida Bright, Georgia, serif;font-size:150%;text-align:center\">Connect to database <\/h1>","171e78b4":"<h1 style=\"color: #d00c65 ;background-color: #abb2b9 ;font-family: Lucida Bright, Georgia, serif;font-size:150%;text-align:center\">Top 10 labels by no. of \"Best new music\" highlights<\/h1>\n","0a8d696b":"### Create a dataframe assigning publishing labels to individual review scores","80993a57":"Pitchfork assigns scores between 0.0 and 10.0 to reviewed albums. Albums can score fractional scores such as 2.3 or 8.9, so in practice there's 100 possible scores.","cd862109":"<h1 style=\"color: #dae37f ;background-color: #abb2b9 ;font-family: Lucida Bright, Georgia, serif;font-size:150%;text-align:center\">Percentage of highly rated albums per year<\/h1>","421a02e5":"Due to the fact that some albums were created by multiple artists, we need to create a dataframe mapping \"scores\" and \"best_new_music\" columns to each artist listed as one of the authors","35966f8c":"<h1 style=\"color: #1f618d;background-color: #abb2b9 ;font-family: Lucida Bright, Georgia, serif;font-size:150%;text-align:center\">Distribution of scores <\/h1>\n","d6072d9c":"### Create a dataframe assigning artists to individual review scores","1352fabb":"<h1 style=\"color:white;background-color:#7cdff3 ;font-family: Lucida Bright, Georgia, serif;font-size:200%;text-align:center\">Imports <\/h1>","5c596257":"Which words do reviewers use to describe the best music albums? Let's take a look.","1d799a36":"There is a slight preference for music genres of global, experimental, jazz and folk\/country.","1f365cfd":"So far, 2016 has been the most active year for Pitchfork.\n\nNote: We have removed reviews from the year 2017, because data for that year is incomplete and only contains a handful of reviews","80b458b6":"<h1 style=\"color:white;background-color: #3ff3ba ;font-family: Lucida Bright, Georgia, serif;font-size:200%;text-align:center\">Function definitions <\/h1>","6ab03e03":"As we can see from the above chart, only 5 out of 18831 artists have the average review score of 10, but all of them had only one of their albums reviewed.\n\nAdditionally, score differences between those top 10 artists are very small (less than 0.5 between the 1st and 10th artist).\n\nPerhaps it's more informative to rank artists based on how many \"Best new music\" highlights their albums scored.","c5ba0373":"<h1 style=\"color:white;background-color: #e37ff5 ;font-family: Lucida Bright, Georgia, serif;font-size:200%;text-align:center\">Conclusions <\/h1>\n\n### - Reviewers tend to most often give scores in the range of 6.5 - 8.5\n### - Rock is the most popular genre\n### - Global albums tend to receive slightly better scores while pop\/r&b albums slightly worse\n### - Kanye West is the most successful artist\n### - Domino is the most successful publishing label\n### - 2016 has been the most active year for the site","6a0d61d7":"Publishing label \"Domino\" is the clear winner.","1c382972":"<h1 style=\"color: #2e7de8;background-color: #abb2b9 ;font-family: Lucida Bright, Georgia, serif;font-size:150%;text-align:center\">Reviewed albums by genre <\/h1>","b5e48903":"Due to large amount of rows with duplicate indexes, we will create different dataframes depending on what we want to analyze."}}