{"cell_type":{"2e577bed":"code","393d168e":"code","bd78548d":"code","dde278b7":"code","93f0999e":"code","d6d27729":"code","e8b92f0b":"code","218cc7d4":"code","8338fed0":"code","c9152ee2":"code","80987665":"code","7bb5ba19":"code","4cf9e95b":"code","c7eea520":"code","be37e307":"code","b6d3cffc":"code","d97299ab":"code","dadadb12":"code","e709f91c":"code","b940e6c7":"code","f35d1755":"code","f5872951":"code","7660989d":"code","99662ef0":"code","5c8b6941":"code","1e2236a4":"code","1f4024d3":"code","388516ee":"code","e6654e72":"code","c3feb5a5":"code","e284843b":"code","71b21cfc":"code","295c970d":"code","1a6eb5c7":"code","487007ae":"code","7a959879":"code","88267761":"code","0d741c4a":"code","630336c8":"code","0f460aa4":"code","1aa3fb4a":"code","2565c0d5":"code","4d2dedb9":"code","fe4be9f7":"code","bb52883e":"code","79a339c8":"code","f87d4bf9":"code","6621a758":"code","60a33b82":"code","51eb2b9e":"code","fbe6eb9b":"code","870a5798":"code","a2315ece":"code","e79ca9eb":"code","2c015724":"code","cb52816d":"code","1078ad8d":"code","d490b595":"code","a41f62ce":"code","b85613a4":"code","54205866":"code","ba472f22":"code","b4fb6173":"markdown","6b1eb965":"markdown","de7f2ea8":"markdown","dab5a16d":"markdown","d1899f10":"markdown","c6c31827":"markdown","efa14277":"markdown","ec281df6":"markdown","f6a99942":"markdown","123495fb":"markdown","bcf02a83":"markdown","076fa625":"markdown","256f3290":"markdown","17fdaf73":"markdown","7eaa3637":"markdown","9b68fbd1":"markdown","679e7945":"markdown","a12b2e55":"markdown","64ae78e9":"markdown","c91c3ce7":"markdown","236fcc65":"markdown","04b9e229":"markdown","3d3cc655":"markdown","0195f67b":"markdown","41761cdd":"markdown","1ce8f2c2":"markdown","1be96428":"markdown","be81e0aa":"markdown","aef12c88":"markdown","4e37ce0a":"markdown","adff6792":"markdown","5f5dce78":"markdown"},"source":{"2e577bed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","393d168e":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np","bd78548d":"#\u4f7f\u7528pd.read_csv\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff0c\u5c06\u6570\u636e\u6587\u4ef6\u653e\u5165train_data\u4e2d\ntrain_data = pd.read_csv('..\/input\/credit-card-customers\/BankChurners.csv')\n\n#\u4f7f\u7528train_data.copy,\u590d\u5236\u7ed9train\ntrain = train_data.copy()","dde278b7":"train.head()","93f0999e":"train.drop(['CLIENTNUM'], axis = 1, inplace = True)","d6d27729":"train['Attrition_Flag'].isnull().sum()","e8b92f0b":"plt.figure(figsize=(6,6)) \nlabels = ['Existing Customer','Attrited Customer'] \nsizes = [np.sum(train['Attrition_Flag'] == 'Existing Customer'), np.sum(train['Attrition_Flag'] == 'Attrited Customer')]\ncolors = ['red','yellow'] \nexplode = (0,0.1) \npatches,text1,text2 = plt.pie(sizes,\n                      explode=explode,\n                      labels=labels,\n                      colors=colors,\n                      autopct = '%3.2f%%', \n                      shadow = False, \n                      startangle =90, \n                      pctdistance = 0.6) \nplt.axis('equal')\nplt.legend()\nplt.show()","218cc7d4":"Existing = pd.get_dummies(train['Attrition_Flag'])","8338fed0":"train.drop(['Attrition_Flag'], axis = 1, inplace = True)\ntrain = pd.concat([train, Existing], axis = 1)\ntrain['Attrition_Flag'] = train['Existing Customer']\n","c9152ee2":"train.drop(['Existing Customer'], axis = 1, inplace = True)\ntrain.drop(['Attrited Customer'], axis = 1, inplace = True)","80987665":"train['Customer_Age'].isnull().sum()","7bb5ba19":"plt.figure(figsize = (12, 5))\nsns.distplot(train['Customer_Age'])\nplt.show()","4cf9e95b":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Customer_Age'], color = 'red')\nplt.show()","c7eea520":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 0]['Customer_Age'], color = 'green')\nplt.show()","be37e307":"plt.figure(figsize = (8, 5))\nsns.countplot(x = 'Gender', hue = 'Attrition_Flag', data = train)\nplt.show()","b6d3cffc":"Gender = pd.get_dummies(train['Gender'])\n\ntrain['Gender'] = Gender['M']","d97299ab":"plt.figure(figsize = (8, 5))\nsns.countplot(x = 'Dependent_count', hue = 'Attrition_Flag', data = train)\nplt.show()","dadadb12":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Dependent_count'], color = 'red')\nplt.show()","e709f91c":"np.sum(train['Education_Level'] == 'Unknown')","b940e6c7":"plt.figure(figsize = (8, 5))\nsns.countplot(x = 'Education_Level', hue = 'Attrition_Flag', data = train)\nplt.show()","f35d1755":"train['Education_Level'] = train['Education_Level'].map({\n    'Unknown': 0,\n    'Uneducated': 1,\n    'Graduate': 2,\n    'High School': 3,\n    'College': 4,\n    'Post-Graduate': 5,\n    'Doctorate': 6,\n})\ntrain['Education_Level'] = train['Education_Level'].astype(int)","f5872951":"plt.figure(figsize = (8, 5))\nsns.countplot(x = 'Marital_Status', hue = 'Attrition_Flag', data = train)\nplt.show()","7660989d":"train['Marital_Status'] = train['Marital_Status'].map({\n    'Unknown': 0,\n    'Divorced': 1,\n    'Single': 2,\n    'Married': 3,\n})\ntrain['Marital_Status'] = train['Marital_Status'].astype(int)","99662ef0":"plt.figure(figsize = (10, 5))\nplt.hist(train['Income_Category'], color = 'orange')\nplt.show()","5c8b6941":"plt.figure(figsize = (8, 5))\nsns.countplot('Income_Category', hue = 'Attrition_Flag', data = train, order=['Unknown','Less than $40K','$40K - $60K','$60K - $80K','$80K - $120K','$120K +'])\nplt.show()","1e2236a4":"train['Income_Category'] = train['Income_Category'].map({\n    'Unknown': 0,\n    'Less than $40K': 1,\n    '$40K - $60K': 2,\n    '$60K - $80K': 3,\n    '$80K - $120K': 4,\n    '$120K +': 5,\n})\ntrain['Income_Category'] = train['Income_Category'].astype(int)","1f4024d3":"plt.figure(figsize = (8, 5))\nsns.countplot('Card_Category', hue = 'Attrition_Flag', data = train)\nplt.show()","388516ee":"train['Card_Category'] = train['Card_Category'].map({\n    'Platinum': 0,\n    'Silver': 1,\n    'Gold': 2,\n    'Blue': 3\n})\ntrain['Card_Category'] = train['Card_Category'].astype(int)","e6654e72":"plt.figure(figsize = (12, 5))\nsns.distplot(train['Months_on_book'], color = 'red')\nplt.show()","c3feb5a5":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Months_on_book'], color = 'orange')\nsns.distplot(train[train['Attrition_Flag'] == 0]['Months_on_book'], color = 'blue')\nplt.legend()\nplt.show()","e284843b":"p = plt.figure(figsize = (9, 5))\nbox_1, box_2= train[train['Attrition_Flag'] == 1]['Total_Relationship_Count'], train[train['Attrition_Flag'] == 0]['Total_Relationship_Count']\n\nlabels = 'Existing Customer','Attrited Customer'\npbox=plt.boxplot([box_1, box_2], labels = labels, boxprops = {'color':'green'},patch_artist=True)\ncolors = ['lightblue', 'lightgreen']\nfor patch, color in zip(pbox['boxes'], colors):\n    patch.set_facecolor(color)\n    \nplt.show()","71b21cfc":"p = plt.figure(figsize = (9, 5))\nbox_1, box_2= train[train['Attrition_Flag'] == 1]['Months_Inactive_12_mon'], train[train['Attrition_Flag'] == 0]['Months_Inactive_12_mon']\n\nlabels = 'Existing Customer','Attrited Customer'\npbox=plt.boxplot([box_1, box_2], labels = labels, boxprops = {'color':'green'},patch_artist=True)\ncolors = ['orange', 'blue']\nfor patch, color in zip(pbox['boxes'], colors):\n    patch.set_facecolor(color)\n    \nplt.show()","295c970d":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Months_Inactive_12_mon'], color = 'orange')\nsns.distplot(train[train['Attrition_Flag'] == 0]['Months_Inactive_12_mon'], color = 'blue')\nplt.legend()\nplt.show()","1a6eb5c7":"p = plt.figure(figsize = (9, 5))\nbox_1, box_2= train[train['Attrition_Flag'] == 1]['Credit_Limit'], train[train['Attrition_Flag'] == 0]['Credit_Limit']\n\nlabels = 'Existing Customer','Attrited Customer'\npbox=plt.boxplot([box_1, box_2], labels = labels, boxprops = {'color':'green'},patch_artist=True)\ncolors = ['lightblue', 'lightgreen']\nfor patch, color in zip(pbox['boxes'], colors):\n    patch.set_facecolor(color)\n    \nplt.show()","487007ae":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Credit_Limit'], color = 'orange')\nsns.distplot(train[train['Attrition_Flag'] == 0]['Credit_Limit'], color = 'blue')\nplt.legend()\nplt.show()","7a959879":"p = plt.figure(figsize = (9, 5))\nbox_1, box_2= train[train['Attrition_Flag'] == 1]['Total_Revolving_Bal'], train[train['Attrition_Flag'] == 0]['Total_Revolving_Bal']\n\nlabels = 'Existing Customer','Attrited Customer'\npbox=plt.boxplot([box_1, box_2], labels = labels, boxprops = {'color':'green'},patch_artist=True)\ncolors = ['lightblue', 'lightgreen']\nfor patch, color in zip(pbox['boxes'], colors):\n    patch.set_facecolor(color)\n    \nplt.show()","88267761":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Total_Revolving_Bal'], color = 'orange')\nsns.distplot(train[train['Attrition_Flag'] == 0]['Total_Revolving_Bal'], color = 'blue')\nplt.legend()\nplt.show()","0d741c4a":"p = plt.figure(figsize = (9, 5))\nbox_1, box_2= train[train['Attrition_Flag'] == 1]['Avg_Open_To_Buy'], train[train['Attrition_Flag'] == 0]['Avg_Open_To_Buy']\n\nlabels = 'Existing Customer','Attrited Customer'\npbox=plt.boxplot([box_1, box_2], labels = labels, boxprops = {'color':'green'},patch_artist=True)\ncolors = ['lightblue', 'lightgreen']\nfor patch, color in zip(pbox['boxes'], colors):\n    patch.set_facecolor(color)\n    \nplt.show()","630336c8":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Avg_Open_To_Buy'], color = 'orange')\nsns.distplot(train[train['Attrition_Flag'] == 0]['Avg_Open_To_Buy'], color = 'blue')\nplt.legend()\nplt.show()","0f460aa4":"p = plt.figure(figsize = (9, 5))\nbox_1, box_2= train[train['Attrition_Flag'] == 1]['Total_Amt_Chng_Q4_Q1'], train[train['Attrition_Flag'] == 0]['Total_Amt_Chng_Q4_Q1']\n\nlabels = 'Existing Customer','Attrited Customer'\npbox=plt.boxplot([box_1, box_2], labels = labels, boxprops = {'color':'green'},patch_artist=True)\ncolors = ['lightblue', 'lightgreen']\nfor patch, color in zip(pbox['boxes'], colors):\n    patch.set_facecolor(color)\n    \nplt.show()","1aa3fb4a":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Total_Amt_Chng_Q4_Q1'], color = 'orange')\nsns.distplot(train[train['Attrition_Flag'] == 0]['Total_Amt_Chng_Q4_Q1'], color = 'blue')\nplt.legend()\nplt.show()","2565c0d5":"p = plt.figure(figsize = (9, 5))\nbox_1, box_2= train[train['Attrition_Flag'] == 1]['Total_Trans_Amt'], train[train['Attrition_Flag'] == 0]['Total_Trans_Amt']\n\nlabels = 'Existing Customer','Attrited Customer'\npbox=plt.boxplot([box_1, box_2], labels = labels, boxprops = {'color':'green'},patch_artist=True)\ncolors = ['lightblue', 'lightgreen']\nfor patch, color in zip(pbox['boxes'], colors):\n    patch.set_facecolor(color)\n    \nplt.show()","4d2dedb9":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Total_Trans_Amt'], color = 'orange')\nsns.distplot(train[train['Attrition_Flag'] == 0]['Total_Trans_Amt'], color = 'blue')\nplt.legend()\nplt.show()","fe4be9f7":"\u5206\u6790Total_Trans_Ct\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","bb52883e":"p = plt.figure(figsize = (9, 5))\nbox_1, box_2= train[train['Attrition_Flag'] == 1]['Total_Trans_Ct'], train[train['Attrition_Flag'] == 0]['Total_Trans_Ct']\n\nlabels = 'Existing Customer','Attrited Customer'\npbox=plt.boxplot([box_1, box_2], labels = labels, boxprops = {'color':'green'},patch_artist=True)\ncolors = ['lightblue', 'lightgreen']\nfor patch, color in zip(pbox['boxes'], colors):\n    patch.set_facecolor(color)\n    \nplt.show()","79a339c8":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Total_Trans_Ct'], color = 'orange')\nsns.distplot(train[train['Attrition_Flag'] == 0]['Total_Trans_Ct'], color = 'blue')\nplt.legend()\nplt.show()","f87d4bf9":"\u5206\u6790Total_Ct_Chng_Q4_Q1\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","6621a758":"p = plt.figure(figsize = (9, 5))\nbox_1, box_2= train[train['Attrition_Flag'] == 1]['Total_Ct_Chng_Q4_Q1'], train[train['Attrition_Flag'] == 0]['Total_Ct_Chng_Q4_Q1']\n\nlabels = 'Existing Customer','Attrited Customer'\npbox=plt.boxplot([box_1, box_2], labels = labels, boxprops = {'color':'green'},patch_artist=True)\ncolors = ['lightblue', 'lightgreen']\nfor patch, color in zip(pbox['boxes'], colors):\n    patch.set_facecolor(color)\n    \nplt.show()","60a33b82":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Total_Ct_Chng_Q4_Q1'], color = 'orange')\nsns.distplot(train[train['Attrition_Flag'] == 0]['Total_Ct_Chng_Q4_Q1'], color = 'blue')\nplt.legend()\nplt.show()","51eb2b9e":"p = plt.figure(figsize = (9, 5))\nbox_1, box_2= train[train['Attrition_Flag'] == 1]['Avg_Utilization_Ratio'], train[train['Attrition_Flag'] == 0]['Avg_Utilization_Ratio']\n\nlabels = 'Existing Customer','Attrited Customer'\npbox=plt.boxplot([box_1, box_2], labels = labels, boxprops = {'color':'green'},patch_artist=True)\ncolors = ['lightblue', 'lightgreen']\nfor patch, color in zip(pbox['boxes'], colors):\n    patch.set_facecolor(color)\n    \nplt.show()","fbe6eb9b":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Avg_Utilization_Ratio'], color = 'orange')\nsns.distplot(train[train['Attrition_Flag'] == 0]['Avg_Utilization_Ratio'], color = 'blue')\nplt.legend()\nplt.show()","870a5798":"p = plt.figure(figsize = (9, 5))\nbox_1, box_2= train[train['Attrition_Flag'] == 1]['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1'], train[train['Attrition_Flag'] == 0]['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1']\n\nlabels = 'Existing Customer','Attrited Customer'\npbox=plt.boxplot([box_1, box_2], labels = labels, boxprops = {'color':'green'},patch_artist=True)\ncolors = ['lightblue', 'lightgreen']\nfor patch, color in zip(pbox['boxes'], colors):\n    patch.set_facecolor(color)\n    \nplt.show()","a2315ece":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1'], color = 'orange')\nsns.distplot(train[train['Attrition_Flag'] == 0]['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1'], color = 'blue')\nplt.legend()\nplt.show()","e79ca9eb":"p = plt.figure(figsize = (9, 5))\nbox_1, box_2= train[train['Attrition_Flag'] == 1]['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2'], train[train['Attrition_Flag'] == 0]['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2']\n\nlabels = 'Existing Customer','Attrited Customer'\npbox=plt.boxplot([box_1, box_2], labels = labels, boxprops = {'color':'green'},patch_artist=True)\ncolors = ['lightblue', 'lightgreen']\nfor patch, color in zip(pbox['boxes'], colors):\n    patch.set_facecolor(color)\n    \nplt.show()","2c015724":"plt.figure(figsize = (12, 5))\nsns.distplot(train[train['Attrition_Flag'] == 1]['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2'], color = 'orange')\nsns.distplot(train[train['Attrition_Flag'] == 0]['Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2'], color = 'blue')\nplt.legend()\nplt.show()","cb52816d":"train.head()","1078ad8d":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\npred = train['Attrition_Flag']\ntrainTmp = train.drop(['Attrition_Flag'], axis = 1, inplace = False)\ntrain2 = scaler.fit_transform(trainTmp)","d490b595":"\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.neighbors import KNeighborsClassifier\n\n\nfrom sklearn.model_selection import train_test_split\n\nLR = LogisticRegression(C=1.0, penalty='l2', tol=0.01)\nX_train, X_test, y_train, y_test = train_test_split(trainTmp, pred, test_size=0.33, random_state=42)\nLR.fit(X_train,y_train)\nLR.predict(X_test)\nLR.score(X_test,y_test)","a41f62ce":"params = LR.get_params(deep=True)\nparams","b85613a4":"weight = LR.coef_[0]\nweight","54205866":"top_three = np.argpartition(weight, -3)[-3:]\ntop_three","ba472f22":"top_three = np.argpartition(weight, 0)\ntop_three","b4fb6173":"\u5206\u6790Avg_Utilization_Ratio\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","6b1eb965":"\u5206\u6790Total_Amt_Chng_Q4_Q1\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","de7f2ea8":"\u5206\u6790Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","dab5a16d":"---------------------------------------------\n\u4f7f\u7528\u903b\u8f91\u56de\u5f52\u5bf9\u7ed3\u679c\u8fdb\u884c\u9884\u6d4b","d1899f10":"\u4f7f\u7528\u76f4\u65b9\u56fe\u663e\u793a\u6570\u636e\u548c\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","c6c31827":"\u9996\u5148\u67e5\u770b\u6709\u591a\u5c11unkown\u7684\u6570\u636e","efa14277":"\u8fd8\u5728\u4f7f\u7528\u4eba\u7684\u6982\u7387\u5bc6\u5ea6\u5206\u5e03","ec281df6":"\u5206\u6790Months_on_book","f6a99942":"\u5206\u6790Avg_Open_To_Buy\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","123495fb":"\u518d\u7528\u76f4\u65b9\u56fe\u67e5\u770b\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","bcf02a83":"\u4f7f\u7528seaborn\u753b\u51fa\u6982\u7387\u5206\u5e03\u56fe","076fa625":"\u4f7f\u7528one-hot\u65b9\u5f0f\u66ff\u6362Attrition_Flag\uff0c\u5f53Existing Customer\u4e3a1\uff0c\u5426\u5219\u4e3a0","256f3290":"\u5206\u6790Dependent_count\u5bf9\u76ee\u6807\u503c\u7684\u5173\u7cfb","17fdaf73":"Gender","7eaa3637":"\u4f7f\u7528train.head()\u67e5\u770b\u6570\u636e\u7ed3\u6784","9b68fbd1":"Months_on_book\t\nTotal_Relationship_Count \nNaive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_2\n\u4e3a\u6700\u91cd\u8981\u7684\u4e09\u4e2a\u7279\u5f81","679e7945":"\u5206\u6790Naive_Bayes_Classifier_Attrition_Flag_Card_Category_Contacts_Count_12_mon_Dependent_count_Education_Level_Months_Inactive_12_mon_1\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","a12b2e55":"\u5206\u6790 Total_Relationship_Count\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb****","64ae78e9":"\u5206\u6790\u5a5a\u59fb\u72b6\u51b5\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","c91c3ce7":"\u5206\u6790Credit_Limit\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","236fcc65":"\u5206\u6790Attrition_Flag\u662f\u5426\u65e0\u7528\u6570\u636e\uff0c\u6216\u8005\u7a7a\u6570\u636e\n\u4f7f\u7528train.isnull().sum(),\u67e5\u770b\u662f\u5426null\u7684\u6570\u636e","04b9e229":"\u5206\u6790\u5e74\u9f84\u5206\u5e03\u3002\n\u67e5\u770b\u5e74\u9f84\u503c\u662f\u5426\u6709NULL\uff0c\u6216\u8005\u65e0\u7528\u7684\u6570\u636e,\u5206\u6790\u7ed3\u679c\u4e3a\uff0c\u5e74\u9f84\u6ca1\u6709\u7a7a\u6570\u636e","3d3cc655":"\u5206\u6790Total_Revolving_Bal\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","0195f67b":"\u5220\u9664Attrited Customer\u548cExisting Customer","41761cdd":"\u5206\u6790Months_Inactive_12_mon\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","1ce8f2c2":"\u663e\u793a\u4e00\u4e0b\u6982\u7387\u5206\u5e03\u60c5\u51b5\n","1be96428":"\u5206\u6790Education_level\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","be81e0aa":"\u5206\u6790Card_Category\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","aef12c88":"\u4f7f\u7528drop\uff0c\u5220\u9664ClientNum\u5217","4e37ce0a":"\u4f7f\u7528get_get_dummies\u5bf9\u7ed3\u679c\u8fdb\u884c\u66ff\u6362\u4e3a\u6570\u5b57\u7684\u5f62\u5f0f","adff6792":"\u5206\u6790Total_Trans_Amt\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb","5f5dce78":"\u5206\u6790Income_Category\u4e0e\u76ee\u6807\u503c\u4e4b\u95f4\u7684\u5173\u7cfb,\u4f7f\u7528plt\u67e5\u770b\u5206\u5e03\u60c5\u51b5"}}