{"cell_type":{"09f1f243":"code","3dbe0c75":"code","3d875ce1":"code","aa750f57":"code","284b75fb":"code","e75dc996":"code","caf4ae58":"code","3ec91ea0":"code","16cd1640":"code","4a4a4798":"code","3c4ca009":"code","c51012ef":"code","d4b843d1":"code","4a7f6f86":"code","4662fa9a":"code","576e0776":"code","9da83da8":"code","7f5fcfd2":"code","767725b4":"code","53e41c40":"code","8ed0ad9c":"code","7969faea":"code","2e008f64":"code","ff6f9abd":"code","b1a7b4dc":"code","8c31b772":"markdown","97781af0":"markdown","d7640c8b":"markdown","e2faa11e":"markdown","ed8e7739":"markdown","1a7486c6":"markdown","4b03b189":"markdown","847382f3":"markdown","e9b0c419":"markdown","33ca63e3":"markdown","95f670cf":"markdown","c5fce182":"markdown","6c1d003d":"markdown","ff6b31bf":"markdown","e5472ceb":"markdown","b357f34f":"markdown","31a8aae1":"markdown","9fa44bc9":"markdown","739c31a0":"markdown","459ba346":"markdown","cee5b1fc":"markdown","94a940da":"markdown","bfe1dad2":"markdown","d8d64e5b":"markdown","a03a0ac8":"markdown","28ad5f0d":"markdown","3360eaa9":"markdown","1bc5a7ee":"markdown","75a90434":"markdown","3a862709":"markdown","d101bacf":"markdown"},"source":{"09f1f243":"from bokeh.plotting import figure, output_notebook, show\noutput_notebook()","3dbe0c75":"x = [1, 3, 5, 7]\ny = [2, 4, 6, 8]\nz = [3 , 7, 1, 9]","3d875ce1":"p = figure()\n\np.circle(x, y, size=10, color='pink', legend='Circle')\np.line(z, y, color='orange', legend='Line')\np.square(y, x, color='navy', size=10, legend='Square')\n\np.legend.location = 'top_left'","aa750f57":"show(p)","284b75fb":"x = [1, 2, 3, 4, 5]\ny =[6, 7, 2, 4, 5]\n\np = figure(plot_width=400, plot_height=400)\n\np.circle(x, y, size=15, line_color=\"navy\", fill_color=\"orange\", fill_alpha=0.5)\n\nshow(p)","e75dc996":"size = [10, 15, 20, 25, 30]\n\np = figure(plot_width=400, plot_height=400)\n\np.square(x, y, size=size, color=\"firebrick\", alpha=0.2)\n\nshow(p)","caf4ae58":"p = figure(plot_width=400, plot_height=400, title=\"My Line Plot\")\n\np.line(x, y, line_width=2)\np.circle(x, y, fill_color=\"white\", size=8)\n\nshow(p) ","3ec91ea0":"categories = ['A', 'B', 'C', 'D', 'E', 'F']\ncounts = [2, 4, 6, 8, 14, 7]\n\n# Setting the x_range to the list of categories above\np = figure(x_range=categories, plot_height=250, title=\"Basic Bar Chart\")\n\n# Calling the vbar method and setting the y_range values\np.vbar(x=categories, top=counts, width=0.9)\n\n# Additional Properties\np.xgrid.grid_line_color = None\np.y_range.start = 0\n\nshow(p)","16cd1640":"from bokeh.models import ColumnDataSource","4a4a4798":"from bokeh.models import FactorRange\n\nsubjects = ['Math', 'History', 'Philosophy', 'Physics', 'Chemistry', 'Economics']\nnames = ['Jane', 'Kevin', 'David']\n\ndata = {'subjectss' : subjects,\n        'Jane'   : [20, 10, 40, 30, 90, 40],\n        'Kevin'   : [50, 30, 30, 20, 40, 60],\n        'David'   : [30, 70, 40, 80, 50, 30]}\n\nx = [ (subject, name) for subject in subjects for name in names ]\ncounts = sum(zip(data['Jane'], data['Kevin'], data['David']), ()) # like an hstack\n\nsource = ColumnDataSource(data=dict(x=x, counts=counts))\n\np = figure(x_range=FactorRange(*x), plot_height=250, title=\"Student Score by Subject\")\n\np.vbar(x='x', top='counts', width=0.9, source=source)\n\np.y_range.start = 0\np.x_range.range_padding = 0.1\np.xaxis.major_label_orientation = 1\np.xgrid.grid_line_color = None\n\nshow(p)","3c4ca009":"from bokeh.models.annotations import Label\n\np = figure(plot_width=400, plot_height=400)\n\n# keep a reference to the returned GlyphRenderer\nr = p.circle([1,2,3,4,5], [2,5,8,2,7])\n\nr.glyph.size = 50\nr.glyph.fill_alpha = 0.2\nr.glyph.line_color = \"firebrick\"\nr.glyph.line_dash = [5, 1]\nr.glyph.line_width = 2\np.outline_line_width = 7\np.outline_line_alpha = 0.3\np.outline_line_color = \"navy\"\n\n\nlabel = Label(x=2, y=5, x_offset=20, y_offset=25, text=\"Second Point\", text_baseline=\"middle\")\np.add_layout(label)\n\n\nshow(p)","c51012ef":"import pandas as pd\nimport numpy as np\nimport math\nfrom math import pi","d4b843d1":"df = pd.read_csv('..\/input\/bokehintro\/Pokemon.csv')\ndf.head()","4a7f6f86":"from bokeh.models import ColumnDataSource\nfrom bokeh.models.tools import HoverTool","4662fa9a":"from bokeh.transform import factor_cmap\nfrom bokeh.palettes import Spectral5, Spectral3, inferno, viridis, Category20","576e0776":"source = ColumnDataSource(df)\ntypes = df['Type 1'].unique().tolist()\ncolor_map = factor_cmap(field_name='Type 1', palette=viridis(18), factors=types)","9da83da8":"p = figure()\n\np.circle(x='Attack', y='Speed', source=source, size=10, color=color_map)\n\np.title.text = 'Pokemon Attack vs Speed'\np.xaxis.axis_label = 'Attacking Stats'\np.yaxis.axis_label = 'Speed Stats'\n\nhover = HoverTool()\nhover.tooltips=[\n    ('Attack', '@Attack'),\n    ('Speed', '@Speed'),\n    ('Type 1', '@{Type 1}'),\n]\n\np.add_tools(hover)\n\nshow(p)","7f5fcfd2":"attribs = df.groupby('Type 1')['Attack', 'Defense', 'Speed', 'Sp. Atk', 'Sp. Def'].mean()","767725b4":"attribs","53e41c40":"source = ColumnDataSource(attribs)\ntypes = source.data['Type 1'].tolist()\np = figure(x_range=types)\n\ncolor_map = factor_cmap(field_name='Type 1', palette=inferno(18), factors=types)\n\np.vbar(x='Type 1', top='Defense', source=source, width=0.70, color=color_map)\n\np.title.text ='Defense By Type'\np.xaxis.axis_label = 'Type 1'\np.yaxis.axis_label = 'Average Defense Score'\n\np.xaxis.major_label_orientation = math.pi\/2.7\n\nshow(p)","8ed0ad9c":"q = figure(x_range=types)\nq.vbar_stack(stackers=['Attack', 'Defense', 'Speed', 'Sp. Atk', 'Sp. Def'], \n             x='Type 1', source=source, \n             legend = ['Atk', 'Def', 'Spd', 'Sp.Atk', 'Sp.Def'],\n             width=0.5, color=Spectral5)\n\nq.title.text ='Average Score for each Stat'\nq.legend.location = 'top_left'\n\nq.xaxis.axis_label = 'Type 1'\nq.xgrid.grid_line_color = None\t#remove the x grid lines\n\nq.yaxis.axis_label = 'Score'\n\nq.xaxis.major_label_orientation = math.pi\/2.7\n\nshow(q)","7969faea":"from datetime import datetime","2e008f64":"aapl = pd.read_csv('..\/input\/stocks\/AAPL.csv')\naapl = aapl.set_index('Date')\naapl = pd.DataFrame(aapl['Adj Close'])\naapl.index = pd.to_datetime(aapl.index, format='%Y-%m-%d')\n\ngoog = pd.read_csv('..\/input\/stocks\/GOOG.csv')\ngoog = goog.set_index('Date')\ngoog = pd.DataFrame(goog['Adj Close'])\ngoog.index = pd.to_datetime(goog.index, format='%Y-%m-%d')\n\nibm = pd.read_csv('..\/input\/stocks\/IBM.csv')\nibm = ibm.set_index('Date')\nibm = pd.DataFrame(ibm['Adj Close'])\nibm.index = pd.to_datetime(ibm.index, format='%Y-%m-%d')","ff6f9abd":"source = ColumnDataSource(aapl)\n_source = ColumnDataSource(goog)\nsource_ = ColumnDataSource(ibm)\n\np = figure(x_axis_type='datetime')\n\np1 = p.line(x='Date', y='Adj Close', line_width=2, source=source, legend='AAPL Stock Price')\np.add_tools(HoverTool(renderers=[p1], tooltips=[('Apple',\"@{Adj Close}\")],mode='vline'))\np2 = p.line(x='Date', y='Adj Close', line_width=2, source=_source, color=Spectral3[2], legend='GOOG Stock Price')\np.add_tools(HoverTool(renderers=[p2], tooltips=[('Google',\"@{Adj Close}\")],mode='vline'))\np3 = p.line(x='Date', y='Adj Close', line_width=2, source=source_, color='#33A02C', legend='IBM Stock Price')\np.add_tools(HoverTool(renderers=[p3], tooltips=[('IBM',\"@{Adj Close}\")],mode='vline'))\n\n\np.legend.location = 'top_left'\n\n\np.yaxis.axis_label = 'Adjusted Closing Price'\n\nshow(p)","b1a7b4dc":"from bokeh.models import BoxAnnotation\n\nbox_left = pd.to_datetime('2008-01-01')\nbox_right = pd.to_datetime('2009-01-01')\n\np.legend.click_policy='hide'\n\nbox = BoxAnnotation(left=box_left, right=box_right,\n                    line_width=1, line_color='black', line_dash='dashed',\n                    fill_alpha=0.2, fill_color='orange')\n\np.add_layout(box)\n\nshow(p)","8c31b772":"Notice above that we have used some of Bokeh's larger palettes to assign a different color to each pokemon type. You can read more about some of the available palettes on Bokeh's [palettes page](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/reference\/palettes.html). We've also used math's pi in order to rotate the x-axis labels & make them legible.","97781af0":"#### Categorical Data and Bar Charts","d7640c8b":"So below we create a variable *source* which is assigned to the *ColumnDataSource* object with our dataframe as its argumnet. We also create a list of the type of pokemons, so that we can create a color palette equal to the number of unique pokemon types for when we're graphing.","e2faa11e":"Pretty cool. We also figured we can add *hovertool* to each separate line. Now let's customise the plot a bit. What if we want to highlight a particular period in time? For example, to global financial crisis. Using Bokeh's *BoxAnnotation* library we can specify a window and set a start and an end date to bring to the attention of the reader.  \n\nWe will also add some more interactivity by setting a *click_policy* on our legend, such that one can now click on each legend entry to show\/hide that piece of data! The click_policy can also be set to mute instead of hide, which would mute the color rather than hide completely.","ed8e7739":"Bokeh differs from other visualization libraries such as those we've looked at in other guides, namely Matplotlib and Seaborn, in that it is one ideal for easily creating interactive plots, dashboards and data applications in a web browser. There are various advantages of Bokeh over these other tools, chief among them the various output options and the ability to embed visualisations in applications, along with the wide variety of visualization customisation options. The primary building blocks of Bokeh are the layers upon which a graph is built, called \"glyphs.\" These elements are added individually to a figure. These can take on many different shapes and sizes, as we'll see below. So let's get started! Don't forget to show the code in this notebook to follow along!","1a7486c6":"To implement and use Bokeh, let's first import some  of the basics that we need from the bokeh.plotting module.","4b03b189":"### Some Basic Examples","847382f3":"So we have stock data for Apple, Google and IBM stocks and have converted the data to datetime format, so that it'll integrate with Bokeh more smoothly. This is also a good example of how we can plot multiple different data sets on the same plot.\n\nIf you look at the code below you'll see that each data set is stored in a separte ColumnDataSource object. We set the *x_axis_type* to datetime, and we add three separate line glyphs, which all take separate data sets as its source.","e9b0c419":"Sometimes we want to group bars together, instead of stacking them. Bokeh can handle up to three levels of nested (hierarchical) categories, and will automatically group output according to the outermost level. To specify neted categorical coordinates, the columns of the data source should contain tuples.\n\nValues in other columns correspond to each item in x, exactly as in other cases. When plotting with these kinds of nested coordinates, we must tell Bokeh the contents and order the axis range, by explicitly passing a FactorRange to figure. In the example below, this is seen as","33ca63e3":"`import bokeh.sampledata`\n\n`bokeh.sampledata.download()`","95f670cf":"Above, we've set new parameters, namely the width and height of the plot, we've added a circle renderer, setting the size of the circles, as well as some other styling attributes.","c5fce182":"#### 2. Time Series Data - Company Stocks","6c1d003d":"First, we can create a plot using the figure method and sequentially append our glyphs to the plot by calling the appropriate method and passing in data. Finally, we must display our plot. Since we are working within the Jupyterlab environment we can show the plots inline by calling *output_notbook( )*. *figure( )* is the core object used to create plots, which handles all styling attributes, including labels, axes, grids, etc. *show( )* tells Bokeh that all of the data has been added to the plot and it is time to render it.\n\nData in Bokeh can take on different forms, but at its simplest, data is just a list of values. Let's start with a simple example.","ff6b31bf":"Along the right-hand side, the default toolbar is  displayed. The tools include drag, box zoom, wheel zoom, save, reset, and help. Using these tools, a user can pan along the plot or zoom in on interesting portions of the data. The beauty about plotting Bokeh on Kyso is that the rendered jupyter notebook is posted directly to the web, where references to BokehJS will work smoothly, meaning the notebook can be shared with anyone for data exploration and analysis.\n\nOk let's have a look at a few other examples!","e5472ceb":"This time we've added a square renderer, applied different sizes to our range of data points, and with *alpha* we can set the color transparency. ","b357f34f":"Ok, time for another data set! Let's take a quick look at examples of plotting time series data with Bokeh. For this, I've downloaded some stock data from Bokeh's sample data libray.","31a8aae1":"See below for some more styling attributes that can be applied to bokeh plots.","9fa44bc9":"With a list of categorical values (factors), we can create some bar charts!","739c31a0":"We've created three lists, x,y and z, and after intitiating the figure, we call the circle, line, and square methods, and have added styling attributes. Calling show and passing the instantiated figure will output the results. Now let\u2019s run this code!","459ba346":"Linking a Pandas DataFrame with Bokeh visualizations is relatively simple to comprehend, and is accomplished with Bokeh's object *ColumnDataSource* integration. The object\u2019s constructor accepts a Pandas DataFrame as an argument, and can then be passed to glyph methods via certain parameters as you'll see below. We can reference column names from this constructor. We import this, along with Bokeh's *Hovertool* to further highlight Bokeh's interactivity.","cee5b1fc":"Let's divide our data into groups of the pokemons' type 1. Perhaps we'd like to zero in on a particular attribute, like the average *Defense* of each pokemon Type. The *Type 1* here is our feature, or factor variable. In this section, we\u2019ll use categorical data as our x-axis values in Bokeh and create vertical bar charts.\n\nSo first we'll group our dataset by *Type 1* and get the average of each type's score.","94a940da":"### Bokeh and Pandas","bfe1dad2":"What happens when the data you're working with is of an external format and comprises of thousands of rows of data? Pandas, a widely-used data science library, is ideally suited to large-scale data manipulation and analysis, and just so happens to integrate seamlessly with Bokeh to create interactive visualizations of data.\n\nLet\u2019s take a look at our first dataframe we'll be using in this brief guide.","d8d64e5b":"##### The Bokeh ColumnDataSource","a03a0ac8":"Next, we initiate our figure object and call the circle glyph method to plot our data. The *source* variable that holds our ColumnDataSource is passed as our data source to the glyph method, along with our chosen column names. \nIt is important to note that column names can also be passed for other parameters like size, colors and legend.\n\nThe 'tooltips property of *HoverTool* takes a list of tuples, the first of which is the name to be displayed when the cursor is hovered over a partciular data point, and the second is a column name from ColumnDataSource prefaced with @. We then add it to the plot using the *add_tool( )* method.","28ad5f0d":"## Data Visualisation: An Intro to Bokeh","3360eaa9":"That's it for today! This was again just another quick-start guide ot one of python's amazing plotting libraries. There are a multitude of other customisations we could make to the above plots, as well as other plots entirely. For further reading take a look a [Bokeh's documentation](https:\/\/bokeh.pydata.org\/en\/latest\/), which provides various plotting examples and hundreds of bokeh's glyphs. \n\nIn a future blog post I will take you through a more advanced guide of creating fully-fledged web-based interactive applications and dashboards with bokeh, a capability that really sets bokeh apart from other plotting libraries.","1bc5a7ee":"Again, we'll assign the ColumnDataSource with the grouped data as our argument to our *source* variable.","75a90434":"Now we've added both a line and circles to the same data list, as well as adding a plot title.","3a862709":"#### 1. Categorical Data - Pokemon Stats","d101bacf":"To plot the average scores for each Type and for each attribute, we can use Bokeh's stacked bar chart, which is done using the *vbar_stack* glyph, and by setting the parameter *stackers* to the column names."}}