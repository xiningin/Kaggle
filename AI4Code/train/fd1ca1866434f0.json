{"cell_type":{"96ad3560":"code","9010958c":"code","2dcbd329":"code","ea7a4e6b":"code","a08cffc7":"code","8bda1e65":"code","6a8b6a4e":"code","2d4a2db5":"code","60d0d68b":"code","e5106fe3":"code","b3a80e5c":"code","1d8a7eba":"code","74d84af4":"code","0d285905":"code","cd5344d5":"code","a1b81d7f":"code","512d397a":"code","98baa19c":"code","f53c3854":"code","b838fb13":"code","2438810b":"code","0c780b3d":"code","95ff9633":"code","ddc632fc":"code","631a8455":"code","ecbae7e3":"code","79d20ab7":"code","9ec26d5b":"code","6fb8382f":"code","b3bd2313":"code","b696ee50":"code","e70833ac":"code","ea4fb5ae":"code","358eb742":"code","3df78fd9":"code","3b8b3045":"code","464d91de":"code","16ea0ab7":"code","1aee37ec":"code","3d3c5118":"code","a633dccf":"code","17d6ebd2":"code","7ce49803":"code","2b0a3e6f":"code","4da0916b":"code","f4450649":"code","0a73990a":"code","12e21ff6":"code","5825117b":"code","44d7ffd5":"code","4c67b4ae":"code","07e78e6d":"code","0aa5a24d":"code","758dfc55":"code","e89ecb32":"code","11379971":"code","d449d477":"code","ad1ea1b2":"code","c1e36616":"code","df385d40":"code","32aa6f0a":"code","c9722d68":"code","896b3685":"code","91f3e8ae":"code","bc0488fc":"code","e191cd62":"code","36ef1bd1":"code","f26bb73d":"code","781ee096":"code","9de7b7ee":"code","842cf948":"code","c8afb4c8":"code","aea41e04":"code","68d2e9da":"code","e4e69cfc":"code","a189bf53":"code","f01144d0":"code","efb8db64":"code","04dc1ff1":"code","840ef9c0":"code","4d7c4bfc":"code","b8fbfdfc":"code","45fcf920":"code","f46be6d1":"code","cf4991ee":"code","8475ecb6":"code","9959e0a2":"code","ff16c19d":"code","7cb64a70":"code","1cbf69a2":"code","2daec9e2":"code","7b93f457":"markdown","b8e79d3a":"markdown","ee6223ab":"markdown","87bb411b":"markdown","f018b187":"markdown","75f10a10":"markdown","066d64ec":"markdown","b5a54cd3":"markdown","b5f501c0":"markdown","b704de3b":"markdown","92ce1077":"markdown","4778c9c9":"markdown","a93a7580":"markdown","c24f3e2d":"markdown","0145c485":"markdown","93771c94":"markdown","f567eaeb":"markdown","6b3e010f":"markdown","c0be53d2":"markdown","30cca29d":"markdown","79ab26fc":"markdown","9dc9a747":"markdown","74557457":"markdown","ce54a6ec":"markdown","57a77a13":"markdown","6e0ecde1":"markdown","360074ed":"markdown","7d22785c":"markdown","8d2c8664":"markdown","48fe97f1":"markdown","16bf4e02":"markdown","6adc4a92":"markdown","415e25fc":"markdown","efbf6cbe":"markdown","b7469b82":"markdown","2e6815ab":"markdown","344d4ec9":"markdown","1241ca3f":"markdown","df80e771":"markdown","22286855":"markdown","7850be0f":"markdown"},"source":{"96ad3560":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n# to suppress warnings \nfrom warnings import filterwarnings\nfilterwarnings('ignore')","9010958c":"plt.rcParams['figure.figsize'] = [15,8]","2dcbd329":"df_review = pd.read_csv('..\/input\/travel-review-rating-dataset\/google_review_ratings.csv')\ndf_review.head(17)","ea7a4e6b":"# Renaming the columns for better understanding\ncolumn_names = ['User', 'churches', 'resorts', 'beaches', 'parks', 'theatres', 'museums', 'malls', 'zoo', 'restaurants', 'pubs_bars', 'local_services', 'burger_pizza_shops', 'hotels_other_lodgings', 'juice_bars', 'art_galleries', 'dance_clubs', 'swimming_pools', 'gyms', 'bakeries', 'beauty_spas', 'cafes', 'view_points', 'monuments', 'gardens','Unnamed: 25']\ndf_review.columns = column_names","a08cffc7":"df_review.head(17)","8bda1e65":"# checking the dimensions of the data \ndf_review.shape","6a8b6a4e":"# checking for the datatypes \ndf_review.dtypes","2d4a2db5":"df_review['local_services'].value_counts()","60d0d68b":"df_review['local_services'][df_review['local_services'].index == 2712]","e5106fe3":"df_review['local_services'][df_review['local_services'] == '2\\t2.']","b3a80e5c":"df_review['local_services'] = df_review['local_services'].replace('2\\t2.',2)","1d8a7eba":"df_review['local_services'] = pd.to_numeric(df_review['local_services'])","74d84af4":"df_review.dtypes","0d285905":"df_review.describe(include='all')","cd5344d5":"#checking for duplicates in dataset\ndf_review[df_review.duplicated()]","a1b81d7f":"# Checking for missing values","512d397a":"Total = df_review.isnull().sum().sort_values(ascending=False)          \n\nPercent = (df_review.isnull().sum()*100\/df_review.isnull().count()).sort_values(ascending=False)   \n\nmissing_data = pd.concat([Total, Percent], axis = 1, keys = ['Total', 'Percentage of Missing Values'])    \nmissing_data","98baa19c":"# Missing value treatment","f53c3854":"# Removing insificicant variable\ndf_review.drop('Unnamed: 25',axis=1,inplace=True)\ndf_review.head()","b838fb13":"df_review['gardens'].mean()","2438810b":"df_review['gardens'].replace(np.nan,df_review['gardens'].mean(),inplace=True)","0c780b3d":"df_review['burger_pizza_shops'].mean()","95ff9633":"df_review['burger_pizza_shops'].replace(np.nan,df_review['burger_pizza_shops'].mean(),inplace=True)","ddc632fc":"Total = df_review.isnull().sum().sort_values(ascending=False)          \n\nPercent = (df_review.isnull().sum()*100\/df_review.isnull().count()).sort_values(ascending=False)   \n\nmissing_data = pd.concat([Total, Percent], axis = 1, keys = ['Total', 'Percentage of Missing Values'])    \nmissing_data","631a8455":"df = df_review.copy()","ecbae7e3":"df_review = df_review.drop(['User'],1)","79d20ab7":"# Checking for outliers and treating them ","9ec26d5b":"fig, ax = plt.subplots(nrows = 8, ncols = 3, figsize=(15, 6))\n\nplt.tight_layout()\n\nfor variable, subplot in zip(df_review.columns, ax.flatten()):\n    \n \n    sns.boxplot(df_review[variable], ax = subplot)\n\n# display the plot\nplt.show()","6fb8382f":"Q1 = df_review[['churches','resorts','beaches','burger_pizza_shops','hotels_other_lodgings','dance_clubs','swimming_pools','gyms','bakeries','beauty_spas','cafes','view_points','monuments','gardens']].quantile(0.25)\n\nQ3 = df_review[['churches','resorts','beaches','burger_pizza_shops','hotels_other_lodgings','dance_clubs','swimming_pools','gyms','bakeries','beauty_spas','cafes','view_points','monuments','gardens']].quantile(0.75)\n\nIQR = Q3-Q1\n\nIQR","b3bd2313":"df_iqr = df_review[~((df_review < (Q1 - 1.5 * IQR)) | (df_review > (Q3 + 1.5 * IQR))).any(axis=1)]\ndf_iqr.shape","b696ee50":"df_popularity_table = pd.DataFrame(df_review.mean(),columns=['Average Rating'])\ndf_popularity_table['TotalRatingCount'] = df_review.astype(bool).sum(axis=0).values","e70833ac":"bar = df_popularity_table.sort_values(by=['TotalRatingCount'],ascending=True)","ea4fb5ae":"df_popularity_table","358eb742":"# Barplot based on total number of rating\nplt.figure(figsize=(15,8))\nsns.barplot(bar.index,bar.TotalRatingCount,color= 'blue',orient='v')\nplt.xlabel('Number of Rating')\nplt.xticks(rotation=90)\nplt.show()","3df78fd9":"bar = df_popularity_table.sort_values(by=['Average Rating'],ascending=True)","3b8b3045":"# Barplot based on average rating\nplt.figure(figsize=(15,8))\nplt.barh(bar.index, bar['Average Rating'])\nplt.xlabel('Average Rating')","464d91de":"# Overall Rating Distribution\ndf_transform = pd.melt(df_review,value_vars=['churches', 'resorts', 'beaches', 'parks', 'theatres', 'museums', 'malls', 'zoo', 'restaurants', 'pubs_bars', 'local_services', 'burger_pizza_shops', 'hotels_other_lodgings', 'juice_bars', 'art_galleries', 'dance_clubs', 'swimming_pools', 'gyms', 'bakeries', 'beauty_spas', 'cafes', 'view_points', 'monuments', 'gardens'])\n\nfig = plt.figure(figsize = (15,7))\ng = sns.violinplot(x='variable',y='value',data=df_transform,palette = 'Set3')\ng.set_xticklabels(g.get_xticklabels(),rotation=90);\ng.set_title(f'Overall Rating Distribution',y=1.05,fontsize=20)\ng.set_xlabel(\"\")\ng.set_ylabel(\"Rating\",labelpad = 20)\nfig.tight_layout(pad = 0.5)","16ea0ab7":"# Scaling the data using Standard scaler","1aee37ec":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\ndf_scaled = ss.fit_transform(df_review)\ndf_scaled = pd.DataFrame(df_scaled,columns=df_review.columns)\ndf_scaled.shape","3d3c5118":"df_scaled.head()","a633dccf":"from scipy.cluster.hierarchy import linkage,dendrogram,cut_tree","17d6ebd2":"fig, axes = plt.subplots(2, 3,  figsize=(25,10))\n\nmergings = linkage(df_scaled,method='complete',metric='euclidean')\ndendrogram(mergings,truncate_mode='lastp',ax=axes[0,0])\naxes[0,0].set_title('Complete')\n\nmergings = linkage(df_scaled,method='average',metric='euclidean')\ndendrogram(mergings,truncate_mode='lastp',ax=axes[0,1])\naxes[0,1].set_title('Average')\n\nmergings = linkage(df_scaled,method='centroid',metric='euclidean')\ndendrogram(mergings,truncate_mode='lastp',ax=axes[0,2])\naxes[0,2].set_title('Centroid')\n\nmergings = linkage(df_scaled,method='single',metric='euclidean')\ndendrogram(mergings,truncate_mode='lastp',ax=axes[1,0])\naxes[1,0].set_title('Single')\n\nmergings = linkage(df_scaled,method='ward',metric='euclidean')\ndendrogram(mergings,truncate_mode='lastp',ax=axes[1,1])\naxes[1,1].set_title('Ward')\n\nmergings = linkage(df_scaled,method='weighted',metric='euclidean')\ndendrogram(mergings,truncate_mode='lastp',ax=axes[1,2])\naxes[1,2].set_title('Weighted')\n\nplt.show()","7ce49803":"mergings = linkage(df_scaled,method='ward',metric='euclidean')\nclustercut = pd.Series(cut_tree(mergings,n_clusters=5).reshape(-1,))\nclustercut.value_counts()","2b0a3e6f":"# Grouping Category \n\ndf_category_reviews = pd.DataFrame(columns = ['Entertainment', 'Food_Service', 'Accommodation', 'Historical_Place', 'Scenic_Beauty', 'Additional_Services','Cluster'])\ndf_category_reviews['Entertainment'] = (df_review['theatres']+df_review['dance_clubs']+df_review['malls'])\/15\ndf_category_reviews['Food_Service'] = (df_review['restaurants']+df_review['pubs_bars']+df_review['burger_pizza_shops']+df_review['juice_bars']+df_review['bakeries']+df_review['cafes'])\/30\ndf_category_reviews['Accommodation'] = (df_review['hotels_other_lodgings']+df_review['resorts'])\/10\ndf_category_reviews['Historical_Place'] = (df_review['churches']+df_review['museums']+ df_review['art_galleries']+df_review['monuments'])\/20\ndf_category_reviews['Scenic_Beauty'] = (df_review['beaches']+df_review['parks']+ df_review['zoo']+df_review['view_points']+df_review['gardens'])\/25\ndf_category_reviews['Additional_Services'] = (df_review['local_services']+df_review['swimming_pools']+ df_review['gyms']+df_review['beauty_spas'])\/20\ndf_category_reviews['Cluster'] = clustercut","4da0916b":"# Profiling\ndf_category_reviews.groupby('Cluster').mean()","f4450649":"df_category_reviews.groupby('Cluster').mean().plot.bar()\nplt.legend(loc='best')\nplt.show()","0a73990a":"from sklearn.cluster import KMeans","12e21ff6":"wcss  = []\nfor i in range(1,21):\n    kmeans = KMeans(n_clusters = i, random_state = 10)\n    kmeans.fit(df_scaled)\n    wcss.append(kmeans.inertia_)","5825117b":"plt.figure(figsize=(15,8))\nplt.plot(range(1,21), wcss,marker='*')\nplt.title('Elbow Plot', fontsize = 15)\nplt.xlabel('No. of clusters (K)', fontsize = 15)\nplt.ylabel('WCSS', fontsize = 15)\nplt.grid(True)\nplt.show()","44d7ffd5":"from sklearn.metrics import silhouette_score, silhouette_samples\nn_clusters = [2, 3, 4, 5, 6]\nsscore= []\n\nfor K in n_clusters:\n    cluster = KMeans (n_clusters= K, random_state= 10)\n    predict = cluster.fit_predict(df_scaled)\n    score = silhouette_score(df_scaled, predict, random_state= 10)\n    print (\"For {} clusters the silhouette score is {}\".format(K, score))\n    sscore.append(score)\n","4c67b4ae":"plt.figure(figsize=(15,8))\nplt.plot(n_clusters,sscore,'r')\nplt.xlabel('Number of Cluster')\nplt.ylabel('Average Sihouette Score')\nplt.grid(True)\nplt.show()","07e78e6d":"# visualize the silhoutte scores","0aa5a24d":"import matplotlib.cm as cm\nn_clusters = [2, 3, 4, 5, 6]\n\nX = np.array(df_scaled)\n\nfor K in n_clusters:\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    fig.set_size_inches(18, 7)\n    model = KMeans(n_clusters = K, random_state = 10)\n    cluster_labels = model.fit_predict(X)\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    sample_silhouette_values = silhouette_samples(X, cluster_labels)\n    y_lower = 10\n    for i in range(K):\n        ith_cluster_silhouette_values = sample_silhouette_values[cluster_labels == i]\n        ith_cluster_silhouette_values.sort()\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n        color = cm.nipy_spectral(float(i) \/ K)\n        ax1.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n        y_lower = y_upper + 10 \n    ax1.set_title(\"Silhouette Plot\")\n    ax1.set_xlabel(\"Silhouette coefficient\")\n    ax1.set_ylabel(\"Cluster label\")\n    ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n    ax1.set_yticks([])  \n    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8])\n    colors = cm.nipy_spectral(cluster_labels.astype(float) \/ K)\n    ax2.scatter(X[:, 0], X[:, 1], marker='.', s=30, lw=0, alpha=0.7, c=colors, edgecolor='k')\n    centers = model.cluster_centers_\n    for i, c in enumerate(centers):\n        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1, s=50, edgecolor='k')\n    ax2.set_title(\"Clusters\")\n    ax2.set_xlabel(\"Spending Score\")\n    plt.suptitle((\"Silhouette Analysis for K-Means Clustering with n_clusters = %d\" % K), fontsize=14, \n                 fontweight='bold')\nplt.show()","758dfc55":"kmeans = KMeans(n_clusters=5,random_state=4)\nkmeans.fit(df_scaled)","e89ecb32":"# value-counts for the cluster\ncl = pd.DataFrame(kmeans.labels_,columns=['Cluster'])\ncl.value_counts()","11379971":"df_final = df_review.copy()\ndf_final = pd.concat([df_final,cl],1)","d449d477":"df_long = pd.melt(df_final, \"Cluster\", var_name=\"categories\")\n\nfig = plt.figure(figsize = (30,10))\nfor i in range(len(df_long.Cluster.unique())):\n    plt.subplot(1,len(df_long.Cluster.unique()),i+1)\n    g = sns.barplot(y='categories',x='value',data=df_long[df_long['Cluster']==i],palette='Set3',ci=None,estimator=np.median)\n    g.set_title(f'Review distribution of Cluster#{i}',y=1.02,fontsize=20)\n    g.set_ylabel('Categories')\n    g.set_xlim(0,5)\nfig.tight_layout(pad=0.5)","ad1ea1b2":"sns.heatmap(df_review.corr()[df_review.corr() >= 0.6],annot=True)\nplt.show()","c1e36616":"from sklearn.decomposition import PCA\npca = PCA()\npca.fit(df_scaled)","df385d40":"pca.explained_variance_  # To get the eigen values","32aa6f0a":"plt.bar(range(1,25),pca.explained_variance_)\nplt.grid(True)\nplt.show()","c9722d68":"pca.explained_variance_ratio_  # proportion accounted","896b3685":"plt.plot(range(1,25),np.cumsum(pca.explained_variance_ratio_))\nplt.xlabel('Component index')\nplt.ylabel('cummulative proportion')\nplt.show()","91f3e8ae":"pca = PCA(0.95)\npca.fit(df_scaled)","bc0488fc":"pca.explained_variance_","e191cd62":"pca.components_   # this is the eigen vector","36ef1bd1":"pca.components_.shape","f26bb73d":"from sklearn.neighbors import NearestNeighbors\nnn = NearestNeighbors(n_neighbors=48)\nnn = nn.fit(df_scaled)\ndistances,indices= nn.kneighbors(df_scaled)","781ee096":"plt.figure(figsize=(10,8))\ndistances = np.sort(distances,axis=0)\ndistances = distances[:,1]\nplt.xlabel('indices')\nplt.ylabel('eps')\nplt.plot(distances)\nplt.axhline(1.5,color='r')\nplt.grid(True)\nplt.show()","9de7b7ee":"from sklearn.cluster import DBSCAN\ndbscan = DBSCAN(eps=1.5,min_samples=48) \ndbscan.fit(df_scaled)","842cf948":"lbl = pd.DataFrame(dbscan.labels_,columns=['Cluster'])","c8afb4c8":"lbl.value_counts()","aea41e04":"df_review.mean()","68d2e9da":"df_popularity_table = pd.DataFrame(df_review.mean(),columns=['Average Rating'])\ndf_popularity_table.head()","e4e69cfc":"df_popularity_table['TotalRatingCount'] = df_review.astype(bool).sum(axis=0).values\ndf_popularity_table","a189bf53":"df_popularity_table.sort_values(by=['Average Rating','TotalRatingCount'],ascending=False).head()","f01144d0":"from surprise import Dataset,Reader\nfrom surprise import SVDpp","efb8db64":"df_coll_filt_data = df.set_index('User', append=True).stack().reset_index().rename(columns={0:'rating', 'level_2':'Category'}).drop('level_0',1)\ndf_coll_filt_data .head(30)","04dc1ff1":"# dataset info\ndf_coll_filt_data.info()","840ef9c0":"reader = Reader(rating_scale=(1,5))  # rating scale","4d7c4bfc":"rating_data = Dataset.load_from_df(df_coll_filt_data[['User','Category','rating']],reader)","b8fbfdfc":"trainsetfull = rating_data.build_full_trainset()\nprint('Number of user:',trainsetfull.n_users)\nprint('Number of items:',trainsetfull.n_items)","45fcf920":"algo = SVDpp(random_state=4)  \nalgo.fit(trainsetfull)","f46be6d1":"item_id = df_coll_filt_data['Category'].unique()\nitem_id","cf4991ee":"test_set = [['User 50',iid,4] for iid in item_id]\ntest_set","8475ecb6":"pred = algo.test(test_set)","9959e0a2":"rec = pd.DataFrame(pred).sort_values(by='est',ascending=False)\nrec.head(5)","ff16c19d":"from surprise.model_selection import train_test_split\n[trainset,testset] = train_test_split(rating_data,test_size=0.3,random_state=4)\nalgo = SVDpp(random_state=4)\nalgo.fit(trainset)","7cb64a70":"test_pred= algo.test(testset)","1cbf69a2":"tp = pd.DataFrame(test_pred)\ntp.head()","2daec9e2":"from sklearn.metrics import mean_squared_error\nrmse = np.sqrt(mean_squared_error(tp['r_ui'],tp['est']))\nprint('RMSE on Test',rmse)","7b93f457":"#### Interpretation:\n- **Cluster 5 has less dense MissClassification compared to others.**","b8e79d3a":"### Evaluating the Model","ee6223ab":"- #### Interpretation:There are many outliers in Dataset and can be removed.","87bb411b":"#### Optimal Value of K Using Elbow Plot","f018b187":"# MODEL3 -DBSCAN\n","75f10a10":"**Interpretation:**\n- **For a New Visitor to Europe, Top 5 place he\/she can visits are malls,restaurants,theatres,museums,pubs_bars.**","066d64ec":"**Interpretation:**\n- **For a User Number 50, Top 5 place he\/she can visits are viewpoints,beaches,monuments,resorts,churches.**","b5a54cd3":"#### Interpretation: Malls are has highest rating and Gyms has least rating,so people prefer mall compared to gyms.","b5f501c0":"## PCA","b704de3b":"### Approach1: Popularity Based Recommendation","92ce1077":"## Collaborative Filtering Recommendation System.","4778c9c9":"#### Interpretation : Missing values are been treated.","a93a7580":"-**There are 5456 unique values for the feature User which is insignificant and can be removed.**","c24f3e2d":"![WhatsApp%20Image%202021-04-26%20at%2012.57.03%20PM.jpeg](attachment:WhatsApp%20Image%202021-04-26%20at%2012.57.03%20PM.jpeg)","0145c485":"### PROBLEM STATEMENT","93771c94":"- **All the variables are indentified correctly now.**","f567eaeb":"#### Interpretation : No duplicate values in our dataset","6b3e010f":"#### Interpretation:\n- Overall rating are lying between 0.5 to 5 stars\n- Some attractions have wide-range of rating distribution (suchas pubs\/bars, restaurants,malls) since they are common attraction point where most of tourist must visit\n- On the other hand, some attractions such as gyms, bakeries, swimming pools,beauty_spas have relatively low rating. Since most of the users might not visit often to all these places.\n- Since we don't have enough information about attraction itself or descriptive user reivews, In this notebook we'll focus on segmenting user into different cluster based on their preferences","c0be53d2":"###                                                                             THANK YOU","30cca29d":"# Recommendation System","79ab26fc":"#### Interpretation:\n- Lot of outlier present in that data denoted by -1.","9dc9a747":"#### Interpretation : There is only 0.01 % of missing values for gardens and burger_pizza_shops. However there are around 99.9 % of missing values for the variable Unnamed: 25 and hence  can be removed completely.","74557457":"- We used cluster analysis such as k-means,hierarichal and DBscan algorithms to find cluster which user belongs to based on ratings provided.\n- we have done the recommondation systems such as popularity and collabarative filtering\n- Evaluation of model is done throught finding rmse of test data","ce54a6ec":"#### Optimal Value of K Using Silhouette Score","57a77a13":"#### Interpretation: Bakeries has least number of reviews.","6e0ecde1":"#### Interpretation:\n- **Best eps=1.5 where eblow is formed**","360074ed":"**Interpretation:**<br>\n-**Cluster0 are people who like most of the category as similar.**<br>\n-**Cluster1 are people who like museums,parks,malls and theatres.**<br>\n-**Cluster2 are people who like malls and restaurants.**<br>\n-**Cluster3 are people who like burger shop,hotels and art galleries.**<br>\n-**Cluster4 are people who like gyms,swimming pool and dance_clubs.**<br>\n","7d22785c":"#### Interpretation:\n- Cluster 0 : These People dont like additional service and most perfered thing is entertainment.\n- Cluster 1 : These People like Food service and entertainment more and have less interest in Additional Service\n- Cluster 2 : These People like Scenic_Beauty like beaches,parks,zoo,view_points and Entertainment and have less interest in Additional Service.\n- Cluster 3 : These People like Scenic_Beauty and Historical places and have least interest in Additional Service.However, Additional Service is more as compared to other two clusters.\n- Cluster 4 : These People like Food Service and Accommodation and have least interest in Scenic_Beauty.","8d2c8664":"#### Interpretation :\n- **Complete gives lot of cluster.**\n- **Single,Centroid and Weighted has overlap.**\n- **Ward as Method number cluster will be 5.**","48fe97f1":"**Interpretation:**\n- **The above output shows that 21 components are accounting for >=95 % of variation in the data.**","16bf4e02":"## MODEL1-   HIERARCHICAL CLUSTERING","6adc4a92":"### Conclusion ","415e25fc":"#### Interpretation :  The dataset has 5456 observations and 26 features","efbf6cbe":"# EDA","b7469b82":"- Nowadays people love travelling to different places based on their interest with their family and friends. This project mainly focuses on the application of the Travel recommendation system and cluster analysis.\n- Based on the cluster analysis, Companies can focus on different clusters to increase their Revenue.\n- We chose a dataset  from kaggle which has information on the various ratings of users on various categories across the Europe to specify the group of users based on their similarity of their interest using different cluster analysis.","2e6815ab":"### Approach 2: Matrix Based","344d4ec9":"#### Interpretation: Let consider the data with oulier values, as the number of rows are reducing very much after removing outliers.","1241ca3f":"#### Interpretation:\n- **Best k=5 where eblow is formed**","df80e771":"**Interpretation:**\n- **As the Feature has just decreased to 24 to 21,Not Building a Model with PCA Components.**","22286855":"## MODEL2- KMEANS CLUSTERING","7850be0f":"- **There are two categorical variable and 24numeric features. One of the numeric feature(local_services) is identified as object, so let's convert it.**"}}