{"cell_type":{"793036e3":"code","6bf4c920":"code","8fb65afb":"code","ef4b330e":"code","012024dc":"code","779216d8":"code","20bcf1e9":"code","3b9bc01e":"code","8f79d3a2":"code","6cce458b":"code","2779d444":"code","5f0c2985":"code","197e0794":"code","dbe7446e":"code","c0197fad":"code","62b306ea":"code","d0d43cb9":"markdown","9c951388":"markdown","63cd3ce4":"markdown","ecca00bd":"markdown","de0e166c":"markdown","39c30d80":"markdown","2138fa3e":"markdown"},"source":{"793036e3":"# FaceMask Image Classification\n### withMask, withoutMask","6bf4c920":"train_dir = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\/\"\nvalid_dir = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Validation\/\"\ntest_dir  = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test\/\"","8fb65afb":"import numpy as np\nimport cv2\n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom tensorflow.keras.utils import to_categorical\n\nfrom tensorflow.keras import models, layers\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom sklearn.metrics import classification_report, confusion_matrix","ef4b330e":"target_size=(96,96)\nbatch_size = 16","012024dc":"train_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',    \n    shuffle=True,\n    seed=42,\n    class_mode='categorical')","779216d8":"valid_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalid_generator = valid_datagen.flow_from_directory(\n    valid_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',\n    shuffle=False,    \n    class_mode='categorical')","20bcf1e9":"test_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_datagen.flow_from_directory(\n    test_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb', \n    shuffle=False,    \n    class_mode='categorical')","3b9bc01e":"num_classes = 2 # WithMask, WithoutMask\ninput_shape = (96,96,3)","8f79d3a2":"# Build Model\nmodel = models.Sequential()\n# 1st Conv layer\nmodel.add(layers.Conv2D(16, (3, 3), activation='relu', padding='same', input_shape=input_shape))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# 2nd Conv layer\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# 3rd Conv layer\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# 4th Conv layer\nmodel.add(layers.Conv2D(96, (3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# 5th Conv layer\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# FC layers\nmodel.add(layers.Flatten())\n#model.add(layers.Dense(1024, kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)))\nmodel.add(layers.Dense(1024))\n#model.add(layers.Dropout(0.2))\n\n#model.add(layers.Dense(64, kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)))\nmodel.add(layers.Dense(64))\n#model.add(layers.Dropout(0.2))\n\nmodel.add(layers.Dense(num_classes, activation='softmax'))\n\nmodel.summary()","6cce458b":"# Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='Adam',  metrics=['accuracy'])","2779d444":"STEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VALID=valid_generator.n\/\/valid_generator.batch_size\nSTEP_SIZE_TEST =test_generator.n\/\/test_generator.batch_size\nnum_epochs = 50","5f0c2985":"# Train Model\nmodel.fit_generator(train_generator,steps_per_epoch=STEP_SIZE_TRAIN,epochs=num_epochs, validation_data=valid_generator, validation_steps=STEP_SIZE_VALID) #, callbacks=[checkpoint])","197e0794":"models.save_model(model, \"facemask_cnn.h5\")","dbe7446e":"score = model.evaluate_generator(test_generator, steps=STEP_SIZE_TEST)\nprint(score)","c0197fad":"predY=model.predict_generator(test_generator)\ny_pred = np.argmax(predY,axis=1)\n#y_label= [labels[k] for k in y_pred]\ny_actual = test_generator.classes\ncm = confusion_matrix(y_actual, y_pred)\nprint(cm)","62b306ea":"# report\nlabels = ['withMask', 'withoutMask']\nprint(classification_report(y_actual, y_pred, target_names=labels))","d0d43cb9":"## [Face Mask 12K images Dataset](https:\/\/www.kaggle.com\/ashishjangra27\/face-mask-12k-images-dataset)\n![image.png](attachment:image.png)","9c951388":"## Build Model","63cd3ce4":"## Data Augmentation","ecca00bd":"## Evaluate Model","de0e166c":"## Train Model","39c30d80":"## Confusion Matrix","2138fa3e":"## Save Model"}}