{"cell_type":{"2b790c9d":"code","ba0d5495":"code","7d3a2f0a":"code","eb989a3f":"code","6e1ba81d":"code","8330087e":"code","54cd9649":"code","786eef42":"code","5179cd1e":"code","e68d2464":"code","4d7092c3":"code","8daa8a1b":"code","653274df":"code","2b82481b":"code","90cb0e57":"code","deb1da1a":"code","48dff136":"code","f48e1291":"code","7fde16b1":"code","6ac59f06":"code","620fc12f":"code","1f513d14":"code","f662544c":"code","234b87d9":"code","3a7a72da":"code","997b4b1b":"code","c57b67b9":"code","38d5fb2f":"code","63e1706b":"code","defe8480":"code","49e10255":"code","8127d6d0":"code","b4582ecd":"code","ca26aa5c":"code","0e9e6f62":"code","ff7a99c0":"code","28e3f49c":"code","452342e4":"code","a8d2f037":"code","80f10d46":"code","e1cf5540":"code","b320b9d0":"code","f27ba3a6":"code","712261f5":"code","abb05867":"code","e6c766d8":"markdown","7b33c9ec":"markdown","0324ae88":"markdown","e0ba869e":"markdown"},"source":{"2b790c9d":"import numpy as np\nimport pandas as pd\nimport os\nfrom PIL import Image\nfrom tqdm import tqdm\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import StratifiedKFold,cross_val_score\nfrom sklearn.metrics import roc_auc_score\n\nimport lightgbm as lgb","ba0d5495":"train = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv')\ntest = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv')\nsample = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/sample_submission.csv')\n","7d3a2f0a":"train['sex'] = train['sex'].fillna('na')\ntrain['age_approx'] = train['age_approx'].fillna(0)\ntrain['anatom_site_general_challenge'] = train['anatom_site_general_challenge'].fillna('na')\n\ntest['sex'] = test['sex'].fillna('na')\ntest['age_approx'] = test['age_approx'].fillna(0)\ntest['anatom_site_general_challenge'] = test['anatom_site_general_challenge'].fillna('na')","eb989a3f":"trn_images = train['image_name'].values\ntrn_sizes = np.zeros((trn_images.shape[0],2))\nfor i, img_path in enumerate(tqdm(trn_images)):\n    img = Image.open(os.path.join('..\/input\/siim-isic-melanoma-classification\/jpeg\/train\/', f'{img_path}.jpg'))\n    trn_sizes[i] = np.array([img.size[0],img.size[1]])","6e1ba81d":"test_images = test['image_name'].values\ntest_sizes = np.zeros((test_images.shape[0],2))\nfor i, img_path in enumerate(tqdm(test_images)):\n    img = Image.open(os.path.join('..\/input\/siim-isic-melanoma-classification\/jpeg\/test\/', f'{img_path}.jpg'))\n    test_sizes[i] = np.array([img.size[0],img.size[1]])","8330087e":"train['w'] = trn_sizes[:,0]\ntrain['h'] = trn_sizes[:,1]\ntest['w'] = test_sizes[:,0]\ntest['h'] = test_sizes[:,1]","54cd9649":"le = preprocessing.LabelEncoder()\n\ntrain.sex = le.fit_transform(train.sex)\ntrain.anatom_site_general_challenge = le.fit_transform(train.anatom_site_general_challenge)\ntest.sex = le.fit_transform(test.sex)\ntest.anatom_site_general_challenge = le.fit_transform(test.anatom_site_general_challenge)","786eef42":"feature_names = ['sex','age_approx','anatom_site_general_challenge','w','h']\nycol = ['target']","5179cd1e":"train[feature_names + ycol].to_csv('train_meta_size.csv', index=False)\ntest[feature_names ].to_csv('test_meta_size.csv', index=False)","e68d2464":"train = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/train.csv')\ntest = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/test.csv')","4d7092c3":"test.head()","8daa8a1b":"train.head()","653274df":"np.unique(train.diagnosis.values, return_counts=True)","2b82481b":"cols = ['sex', 'age_approx', 'anatom_site_general_challenge']\n\ntrain_test = train[cols].append(test[cols])","90cb0e57":"train_test.shape","deb1da1a":"train_test['age_approx'].mean()","48dff136":"train_test['age_approx'] = train_test['age_approx'].fillna(train_test['age_approx'].mean())#float\ntrain_test['sex'] = train_test['sex'].fillna(train_test['sex'].value_counts().index[0])\ntrain_test['anatom_site_general_challenge'] = train_test['anatom_site_general_challenge'].fillna(train_test['anatom_site_general_challenge'].value_counts().index[0])","f48e1291":"train[cols] = train_test[:train.shape[0]][cols].values\ntest[cols] = train_test[train.shape[0]:][cols].values","7fde16b1":"test.head()","6ac59f06":"trn_images = train['image_name'].values\ntrn_sizes = np.zeros((trn_images.shape[0],2))\nfor i, img_path in enumerate(tqdm(trn_images)):\n    img = Image.open(os.path.join('..\/input\/siim-isic-melanoma-classification\/jpeg\/train\/', f'{img_path}.jpg'))\n    trn_sizes[i] = np.array([img.size[0],img.size[1]])\n    \n    \ntest_images = test['image_name'].values\ntest_sizes = np.zeros((test_images.shape[0],2))\nfor i, img_path in enumerate(tqdm(test_images)):\n    img = Image.open(os.path.join('..\/input\/siim-isic-melanoma-classification\/jpeg\/test\/', f'{img_path}.jpg'))\n    test_sizes[i] = np.array([img.size[0],img.size[1]])","620fc12f":"train['w'] = trn_sizes[:,0]\ntrain['h'] = trn_sizes[:,1]\ntest['w'] = test_sizes[:,0]\ntest['h'] = test_sizes[:,1]","1f513d14":"le = preprocessing.LabelEncoder()\n\nle.fit(train_test.sex)\n\ntrain.sex = le.transform(train.sex)\ntest.sex = le.transform(test.sex)\n\nle = preprocessing.LabelEncoder()\n\nle.fit(train_test.anatom_site_general_challenge)\n\ntrain.anatom_site_general_challenge = le.transform(train.anatom_site_general_challenge)\ntest.anatom_site_general_challenge = le.transform(test.anatom_site_general_challenge)\n","f662544c":"train.head()","234b87d9":"test.head()","3a7a72da":"train[feature_names + ycol].to_csv('train_meta_size_2.csv', index=False)\ntest[feature_names ].to_csv('test_meta_size_2.csv', index=False)","997b4b1b":"ycol","c57b67b9":"oof_c = pd.read_csv('..\/input\/triple-stratified-kfold-with-tfrecords\/oof.csv')\nsubmission_c = pd.read_csv('..\/input\/triple-stratified-kfold-with-tfrecords\/submission.csv')\noof_c.head()","38d5fb2f":"del oof_c['target']\noof_c.head()","63e1706b":"oof_c.shape","defe8480":"train.shape","49e10255":"train_2 = train[train['image_name'].isin(oof_c['image_name'].values)]","8127d6d0":"train_2 = train_2.merge(oof_c, on='image_name')","b4582ecd":"feature_names.append('pred')","ca26aa5c":"submission_c.head()","0e9e6f62":"test['pred'] = submission_c['target']\ntest.head()","ff7a99c0":"ycol","28e3f49c":"train_2[feature_names + ['fold'] + ycol].to_csv('train_meta_size_3.csv', index=False)\ntest[feature_names ].to_csv('test_meta_size_3.csv', index=False)","452342e4":"train_2[feature_names + ['fold'] + ycol].head()","a8d2f037":"test[feature_names]","80f10d46":"train_32 = np.load('..\/input\/siimisic-melanoma-resized-images\/x_train_32.npy')\/255\ntest_32 = np.load('..\/input\/siimisic-melanoma-resized-images\/x_test_32.npy')\/255","e1cf5540":"train_32 = train_32.reshape((train_32.shape[0], 32*32*3))\ntest_32 = test_32.reshape((test_32.shape[0], 32*32*3))","b320b9d0":"columns = [f'c_{i}' for i in range(3072)]","f27ba3a6":"train_32 = pd.DataFrame(data = train_32, columns=columns)\ntest_32 = pd.DataFrame(data = test_32, columns=columns)","712261f5":"train_32['target'] = train['target']","abb05867":"train_32.to_csv('train_32.csv', index=False)\ntest_32.to_csv('test_32.csv', index=False)\nnp.save('columns_32', columns)","e6c766d8":"The purpose of this kernel is just to create a few datasets that can be used for further exploration and modeling in other kernels. ","7b33c9ec":"The problem with the above approach is that we have very different distribution of missing values in train and test sets, so any algorithms that are sensitive to those discrepancies will lead to difference between the local CV and LB. We'll try to do somethign a bit more sophisticated now. ","0324ae88":"We'll now add metafeatures from Chris Deotte's TF kernel:","e0ba869e":"It turns out that just the image metadata and and the image size contains a lot of useful information We'll start by creating feature-engineered datasets with just that information. The approach here follows the one in this notebook: https:\/\/www.kaggle.com\/zzy990106\/lgb-meta-data-image-size"}}