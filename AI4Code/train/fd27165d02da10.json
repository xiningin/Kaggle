{"cell_type":{"9c583510":"code","ec7428ab":"code","fa27bde4":"code","7f347961":"code","5f1576d1":"code","7ff6af0c":"code","83f19187":"code","09219d3e":"code","c5e3ca8e":"code","4ad1d876":"code","041ac988":"code","2f53f4ae":"code","8caa2a81":"code","ed9b3796":"code","81156597":"code","b119f928":"code","1eaae65c":"code","19351824":"code","e33f1edb":"code","b6460aba":"code","27886f17":"code","41733dfa":"code","1afdec55":"code","399db3db":"code","d896f0ca":"code","1c7799d0":"code","12890a82":"code","5a562db8":"code","25f0f227":"code","baec2198":"code","16350e1f":"code","42f53985":"code","ef0fdfba":"code","cb43b893":"code","cea5f4fa":"code","57ae8da0":"code","aab696e5":"code","410b2130":"code","7bfc292d":"code","69e0067a":"code","e481b430":"code","822955ee":"code","2f016984":"code","af033896":"code","b2cee666":"code","05e947a1":"code","c03b4dc0":"code","9cff78d1":"code","425b9846":"code","d07e0e16":"code","c3c3dd8c":"code","f59ae570":"code","68fc0464":"code","f3b17f97":"code","c470aa9f":"code","8890c5a9":"code","9663b1dc":"code","1ba4c2bb":"code","3028fa65":"code","b9d5fd64":"code","c61c20a5":"code","87d7dd98":"code","0ce03ecd":"code","c07349bb":"code","dda6fcb5":"code","05317897":"code","68bfa5f4":"code","d9fa01d4":"code","bcb2e377":"code","ab52acd7":"code","b278c401":"code","ffa3e3ae":"code","2746712b":"markdown","f85d87cf":"markdown","1cf55be2":"markdown","ffd81d66":"markdown","be295fd5":"markdown","08a3881b":"markdown","1bd8a11b":"markdown","83f3f27e":"markdown","45cf78f7":"markdown","726771da":"markdown","8dae4d7f":"markdown","d966af84":"markdown","63165b82":"markdown","0e3ae434":"markdown","a04ece9c":"markdown","68ade184":"markdown","c1ffe743":"markdown","3b944db8":"markdown","e1dc6905":"markdown","ac20e24e":"markdown","d1cfb73e":"markdown","501d29a4":"markdown","11e34592":"markdown","c76ad7c8":"markdown","1ce412a9":"markdown","7ef5c25e":"markdown","9cc135af":"markdown","d90051db":"markdown","21e2e1d2":"markdown"},"source":{"9c583510":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ec7428ab":"import pandas as pd\nimport numpy as np\n\n# visualisations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# ignore unwanted warnings\nimport warnings \nwarnings.filterwarnings(action='ignore',category=DeprecationWarning)\nwarnings.filterwarnings(action='ignore',category=FutureWarning)\nwarnings.filterwarnings(action='ignore',category=RuntimeWarning)","fa27bde4":"# Load the dataset\n\n## Airline passenger dataset \nairline = pd.read_csv('\/kaggle\/input\/time-series-data-1\/airline_passengers.csv',index_col='Month',\n                     parse_dates=True)\nairline.index.freq = 'MS'\n\n## Daily total female birth dataset\nfemale =  pd.read_csv('\/kaggle\/input\/time-series-data-1\/DailyTotalFemaleBirths.csv',index_col='Date',\n                     parse_dates=True)\nfemale.index.freq =  'D'","7f347961":"airline.head()","5f1576d1":"airline.info()","7ff6af0c":"airline.describe().transpose()","83f19187":"female.info()","09219d3e":"female.head()","c5e3ca8e":"female.describe().transpose()","4ad1d876":"# import the libraries\nfrom statsmodels.tsa.stattools import acf,pacf,acovf,pacf_yw,pacf_ols","041ac988":"# create a temporary dataframe and apply the acovf\ntemp_df = pd.DataFrame({'a':[20,12,34,45,32,65]})\narr = acovf(temp_df['a'])\narr","2f53f4ae":"plt.plot(arr)\nplt.title('Autocovariance 1D')","8caa2a81":"arr = acf(temp_df['a'])\narr","ed9b3796":"plt.plot(arr)\nplt.title('Autocorrelation 1D')","81156597":"arr = pacf_yw(temp_df['a'],nlags=4,method='unbiased')\narr","b119f928":"plt.plot(arr)\nplt.title('Autocorrelation with Lag 4')","1eaae65c":"from pandas.plotting import lag_plot","19351824":"lag_plot(airline['Thousands of Passengers'])\nplt.title('lag Plot - Airline Passengers');","e33f1edb":"lag_plot(female['Births'])\nplt.title('lag Plot - Dailty Total Female Passengers');","b6460aba":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf","27886f17":"arr = acf(female['Births']) # by default this will return for 40 lags\narr","41733dfa":"# Plot the autocorrelation at different lags\ntitle = 'Autocorrelation: Daily Female Births'\nlags = 40\nplot_acf(female['Births'],title=title,lags=lags);\n","1afdec55":"# Plot the autocorrelation at different lags\ntitle = 'Autocorrelation: Airline Passenger Dataset'\nlags = 40\nplot_acf(airline['Thousands of Passengers'],title=title,lags=lags);","399db3db":"# Plot the autocorrelation at different lags\ntitle = 'Partial Autocorrelation: Daily Female Births'\nlags = 40\nplot_pacf(female['Births'],title=title,lags=lags);","d896f0ca":"from statsmodels.tsa.statespace.tools import diff\n\nairline['diff_1'] = diff(airline['Thousands of Passengers'],k_diff=1)\nairline['diff_1'].plot(figsize=(12,5),title='First order differencing for stationarity');","1c7799d0":"title='PACF: Airline Passengers First Difference'\nlags=40\nplot_pacf(airline['diff_1'].dropna(),title=title,lags=lags);","12890a82":"# Load the US population dataset\nuspop = pd.read_csv('\/kaggle\/input\/time-series-data-1\/uspopulation.csv',\n                           index_col='DATE',parse_dates=True)","5a562db8":"uspop.head()","25f0f227":"# set the index frequency as MS as all data is on the start of the month\nuspop.index.freq = 'MS'","baec2198":"uspop.isnull().sum()","16350e1f":"title = 'US Monthly Population Estimates'\nylabel = 'Pop. Estimate (thousands)'\n\nax = uspop['PopEst'].plot(title=title,figsize=(12,5))\nax.autoscale(axis='x',tight=True)\nax.set(xlabel='',ylabel=ylabel);","42f53985":"len(uspop)","ef0fdfba":"# train and the test data split \ntrain_data = uspop.iloc[:84]\ntest_data = uspop.iloc[84:]","cb43b893":"# import the model\nfrom statsmodels.tsa.ar_model import AR","cea5f4fa":"model = AR(endog=train_data)\nAR1_fit = model.fit(maxlag=1,method='mle')\nprint(f'Lag: {AR1_fit.k_ar}')\nprint(f'Coefficients:\\n{AR1_fit.params}')","57ae8da0":"predictions1 = AR1_fit.predict(start=len(train_data),end=len(train_data)+len(test_data)-1,dynamic=False).rename('AR(1) Predictions')","aab696e5":"# Comparing predictions to expected values\nfor i in range(len(predictions1)):\n    print(f\"predicted={predictions1[i]:<11.10}, expected={test_data['PopEst'][i]}\")","410b2130":"# plot the true test data and the predictions of AR model with lag 1\ntest_data['PopEst'].plot(legend=True,figsize=(12,5))\npredictions1.plot(legend=True,figsize=(12,5))\nplt.title('Comparison of True Test Value vs the AR Lag1 Predictions');","7bfc292d":"model = AR(endog=train_data)\nAR2_fit = model.fit(maxlag=2,method='mle')\nprint(f'Lag: {AR2_fit.k_ar}')\nprint(f'Coefficients:\\n{AR2_fit.params}')","69e0067a":"predictions2 = AR2_fit.predict(start=len(train_data),end=len(train_data)+len(test_data)-1,dynamic=False).rename('AR(2) Predictions')","e481b430":"# plot the true test data and the predictions of AR model with lag 1\ntest_data['PopEst'].plot(legend=True,figsize=(12,5))\npredictions2.plot(legend=True,figsize=(12,5))\nplt.title('Comparison of True Test Value vs the AR Lag2 Predictions');","822955ee":"warnings.filterwarnings(action = 'ignore')\nnew_model = AR(endog=train_data)\nAR_fit = new_model.fit(method='mle')\nprint(f'The best lag value is {AR_fit.k_ar}')\nprint(f'Coefficients:\\n{AR_fit.params}')","2f016984":"start = len(train_data)\nend = len(train_data)+len(test_data)-1\nrename = f'AR(11) Predictions'\n\npredictions11 = AR_fit.predict(start=start,end=end,dynamic=False).rename(rename)","af033896":"test_data['PopEst'].plot(legend=True)\npredictions1.plot(legend=True)\npredictions2.plot(legend=True)\npredictions11.plot(legend=True,figsize=(12,6));","b2cee666":"from sklearn.metrics import mean_squared_error","05e947a1":"models = ['AR1','AR2','AR11']\npredictions = [predictions1,predictions2,predictions11]\nprint(f'Mean Squared Error of the following models are :- \\n')\nfor i in range(3):\n    error = mean_squared_error(test_data['PopEst'],predictions[i])\n    print(f' Model {models[i]}: Error {error}')","c03b4dc0":"modls = [AR1_fit,AR2_fit,AR_fit]\n\nfor i in range(3):\n    print(f'{modls[i].aic:6.5}')","9cff78d1":"model = AR(uspop['PopEst'])\nARfit = model.fit(maxlag=11,method='mle')\nforecast = ARfit.predict(start=len(uspop),end=len(uspop)+12,dynamic=False).rename('True Forecast')","425b9846":"uspop['PopEst'].plot(legend=True,figsize=(12,5))\nforecast.plot(legend=True,figsize=(12,5))\nplt.title('US Population Forecast')","d07e0e16":"airline.columns","c3c3dd8c":"airline.drop('diff_1',inplace=True,axis=1)","f59ae570":"airline.head()","68fc0464":"# import dickey fuller test\nfrom statsmodels.tsa.stattools import adfuller","f3b17f97":"# lets perform teh augmented dickey fuller test on this dataset\nprint('Augmented dickey fuller test on the airline dataset')\ndickey_test = adfuller(airline['Thousands of Passengers'],autolag='AIC')","c470aa9f":"dickey_test","8890c5a9":"type(dickey_test)","9663b1dc":"dickey_test[4]","1ba4c2bb":"#help(adfuller)","3028fa65":"def dickey_fuller(series,title=' '):\n    '''This is a convenience function to help interpret the result of the Augmented Dickey Fuller Test'''\n    \n    from statsmodels.tsa.stattools import adfuller\n    \n    print(f'Augmented Dickey Fuller test for stationarity:{title}')\n    \n    result = adfuller(series,autolag='AIC')\n    labels = ['ADF test statistics','p-value','# lags used','# observations']\n    \n    adf_outcome = pd.Series(data=result[0:4],index=labels)\n    \n    for key,val in result[4].items():\n        adf_outcome[f'critical value ({key})'] = val\n        \n    print(adf_outcome.to_string())   # to_string will get rid of the dtype:float64 which gets printed\n    \n    # Hypothesis Test Outcome\n    \n    if result[1] < 0.05:\n        print('Strong evidence against the Null hypothesis')\n        print('Reject the Null hypothesis')\n        print('The time series data is stationary')\n    else:\n        print('There is not enough evidence against the Null hypothesis')\n        print('Fail to reject the Null hypothesis')\n        print('The time series data is non stationary')       \n    ","b9d5fd64":"dickey_fuller(airline['Thousands of Passengers'],title='Airline Passenger Dataset')","c61c20a5":"airline['diff_1'] =  diff(airline['Thousands of Passengers'],k_diff=1)","87d7dd98":"airline.dropna(inplace=True)","0ce03ecd":"airline.head()","c07349bb":"from statsmodels.tsa.stattools import grangercausalitytests","dda6fcb5":"# put ; in the end to prevent duplicate outputs\ngrangercausalitytests(airline[['Thousands of Passengers','diff_1']],maxlag=3);","05317897":"from statsmodels.graphics.tsaplots import month_plot,quarter_plot","68bfa5f4":"month_plot(airline['Thousands of Passengers']);","d9fa01d4":"airline_quarter = airline['Thousands of Passengers'].resample(rule='Q').mean()","bcb2e377":"quarter_plot(airline_quarter);","ab52acd7":"economy = pd.read_csv('\/kaggle\/input\/time-series-data-1\/macrodata.csv',index_col=0,parse_dates=True)","b278c401":"economy.head()","ffa3e3ae":"quarter_plot(economy['realgdp']);","2746712b":"### Dickey Fuller Test Covenience Function\nThe Null hypothesis $H_0$ is that the data is non stationary. ","f85d87cf":"## Autocovariance for 1D","1cf55be2":"## Forecasting with Autoregressive Model\nNow we are ready to train the model with the best lag which is 11.","ffd81d66":"This plot indicates non-stationarity as there are a large number of lags before ACF values drop off.","be295fd5":"## Autocorrelation for 1D","08a3881b":"Partial autocorrelation measures the linear dependence of one variable after removing the effect of other variable(s) that affect both the variables.","1bd8a11b":"## PACF Plots\nPACF plots works best with stationary data. If the data is non stationary, then it can be made stationary using differencing.","83f3f27e":"### Let the AR model itself decide the best lag","45cf78f7":"Clearly the lag1 has very bad predictive power. We will try with lag2 and then later we will use the model itself to provide with the right lag value.","726771da":"### Import the Autoregressive model from statsmodels","8dae4d7f":"In Forecasting one of the model evaluation method is AIC or Akaike Information Criterion. Smaller value represents a better forecasted model.","d966af84":"## Granger Causality Test \nThe granger causality test is useful to test whether one time series is useful in forecasting the other time series.","63165b82":"### Model Evaluation","0e3ae434":"Lets plot these plot for a non stationary airline dataset and then for the stationary dataset daily total female birth dataset","a04ece9c":"For stationary dataset, the red lines are all at the same levels which is very different than the non stationary airline passenger dataset. ","68ade184":"### Plot the source data","c1ffe743":"# Part II  Autoregressive Model AR(p)\n","3b944db8":"So now, with a lag of 11, the AR model has the best prediction compared to the lag1 and the lag2 model.","e1dc6905":"This is a typical ACF plot for a stationary data, with lags on the horizontal axis and correlations on the y axis. The first value $y_0$ is always 1. A sharp dropoff indicates there is no Autoregressive component when we decide the orders for ARIMA model.\n\nNext,lets plot the autocorrelation for the non-stationary airline passengers dataset. ","ac20e24e":"## Partial Autocorrelation","d1cfb73e":"This time it is better but at a later point in time, it slowly drifts away from the true test value.","501d29a4":"## Visualizing - y versus the lagged versions of y. \nIf the dataset is non stationary with an upward trend, then neighboring values should trend in the same way. Lets visualise this on the two dataset - Airline and Daily Female Birth. ","11e34592":"### Train Test Split\nIn time series analysis, we cannot do random split of the dataset as the time order and sequence is important. We will take the last 12 values as the test data and the remaining would be the train data.","c76ad7c8":"# Part I ACF and PACF\n## Autocorrelation Function and Partial Autocorrelation Function","1ce412a9":"# Test for Stationarity \nA time series is <em>stationary<\/em> if the mean and variance are fixed between any two equidistant points. That is, no matter where you take your observations, the results should be the same. A times series that shows seasonality is <em>not<\/em> stationary.\n## Augmented Dickey Fuller Test","7ef5c25e":"## ACF Plots\nPlotting the magnitude of the autocorrelations over the first few lags can tell a different story. Lets find this out for the female birth dataset.","9cc135af":"## Exposing Seasonality with Month and Quarter Plots","d90051db":"Visually the lag plot of airline passengers shows a lot of autocorrelation. The neighboring lagged points also increases as y increases. ","21e2e1d2":"Contrary to the airline passengers, the daily total female births seems to have little evidence of autocorrelation visually. "}}