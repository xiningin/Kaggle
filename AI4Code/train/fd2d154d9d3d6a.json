{"cell_type":{"067b77d3":"code","eea316d7":"code","e7d3a8c4":"code","f0f89f8b":"code","613f4b03":"code","f1ee9cdb":"code","7065fab4":"code","332e3b99":"code","46ead9bb":"code","2fb3857e":"code","25a74027":"code","03ea4a7a":"code","5d640883":"code","fd6b9415":"code","edd32ee0":"code","13f1293c":"markdown","55069615":"markdown","51fb7f1d":"markdown","b1419547":"markdown","b14156ba":"markdown"},"source":{"067b77d3":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n%matplotlib inline\nimport plotly.offline as py\nfrom plotly import tools\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\npd.options.mode.chained_assignment = None\nimport datetime\n\n#covid_19_df = pd.read_excel(\"\/kaggle\/input\/covid19geographicdistributionworldwide\/COVID-19-geographic-disbtribution-worldwide.xls\",sheet_name=\"CSV_4_COMS\")\n#covid_19_df = pd.read_csv(\"\/kaggle\/input\/covid19geographicdistributionworldwide\/COVID-19-geographic-disbtribution-worldwide.csv\",encoding = \"ISO-8859-1\")\ncovid_19_df = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ncovid_19_df.columns = ['SNo','DateRep','CountryState', 'CountryExp','UpdateDate' ,'NewConfCasesCum', 'NewDeathsCum', 'NewRecoveredCum']\ncovid_19_df = covid_19_df[covid_19_df['CountryState'].isnull()]\ncovid_19_df['DateRep'] = pd.to_datetime(covid_19_df['DateRep'])\npopulation_df = pd.read_csv(\"\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv\")\n# Any results you write to the current directory are saved as output.","eea316d7":"europe = list(['Austria','Belgium','Bulgaria','Croatia','Cyprus','Czech Republic','Denmark','Estonia','Finland','France','Germany','Greece','Hungary','Ireland',\n          'Italy', 'Latvia','Luxembourg','Lithuania','Malta','Norway','Netherlands','Poland','Portugal','Romania','Slovakia','Slovenia',\n         'Spain', 'Sweden', 'United Kingdom', 'Iceland', 'Russia', 'Switzerland', 'Serbia', 'Ukraine', 'Belarus'])\n\ncovid_19_df_eu = covid_19_df[covid_19_df['CountryExp'].isin(europe)]\npopulation_df_eu = population_df[population_df['Country (or dependency)'].isin(europe)]","e7d3a8c4":"#covid_19_df = covid_19_df[covid_19_df[\"EU\"] == 'EU'].reset_index()\n'''\ncumulative_df = covid_19_df_eu.sort_values([\"CountryExp\",'DateRep'],ascending=True).reset_index()\n\ncumulative_df1 = cumulative_df.groupby([\"CountryExp\"])[\"NewConfCases\"].cumsum().reset_index()\ncumulative_df1['NewConfCasesCum'] = cumulative_df1['NewConfCases']\ncumulative_df1 = cumulative_df1.drop(['NewConfCases'], axis = 1)\n\ncumulative_df2 = cumulative_df.groupby([\"CountryExp\"])[\"NewDeaths\"].cumsum().reset_index()\ncumulative_df2['NewDeathsCum'] = cumulative_df2['NewDeaths']\ncumulative_df2 = cumulative_df2.drop(['NewDeaths'], axis = 1)\n\nresult = pd.concat([cumulative_df,cumulative_df1,cumulative_df2], axis=1)\n'''","f0f89f8b":"\nresult = covid_19_df.sort_values(by=\"DateRep\").reset_index(drop=True)\n\nstart_date = datetime.date(2020, 2, 24)\nresult = result[result[\"DateRep\"]>=start_date]\nresult[\"DateRep\"] = result[\"DateRep\"].astype(str)\n\n\nfig = px.choropleth(locations=result['CountryExp'],\n                    color=result['NewConfCasesCum'], \n                    locationmode=\"country names\",\n                    scope=\"europe\",\n                    animation_frame=result[\"DateRep\"],\n                    color_continuous_scale='Rainbow',\n                    range_color=[0,25000]\n                    #autocolorscale=False,\n                   )\n\nlayout = go.Layout(\n    title=go.layout.Title(\n        text=\"Cumulative count of COVID-19 cases in Europe\",\n        x=0.5\n    ),\n    font=dict(size=14),\n)\n\nfig.update_layout(layout)\nfig.show()","613f4b03":"#covid_19_pop = pd.merge(covid_19_df_eu, population_df_eu, how='left', left_on='Countries and territories', right_on='Country (or dependency)')\n\ncovid_19_df_date = pd.read_csv(\"\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ncovid_19_df_date.columns = ['SNo','DateRep','CountryState', 'CountryExp','UpdateDate' ,'NewConfCasesCum', 'NewDeathsCum', 'NewRecoveredCum']\n\n\ncovid_19_df_date.index = pd.to_datetime(covid_19_df_date['DateRep'])\ncovid_19_df_eu = covid_19_df_date[covid_19_df_date['CountryExp'].isin(europe)]\ncovid_19_df_eu = covid_19_df_eu[covid_19_df_eu['CountryState'].isnull()]\n\npopulation_df_eu = population_df[population_df['Country (or dependency)'].isin(europe)]\n\n'''\ncumulative_df = covid_19_df_eu.sort_values([\"CountryExp\"],ascending=True)\ncumulative_df = cumulative_df.sort_index()\n\ncumulative_df['CaseCum'] = cumulative_df.groupby([\"CountryExp\"])[\"NewConfCases\"].cumsum()\ncumulative_df['DeathsCum'] = cumulative_df.groupby([\"CountryExp\"])[\"NewDeaths\"].cumsum()\n\n#cumulative_df = cumulative_df[(cumulative_df.index > '2020-03-01') & (cumulative_df.index < '2020-03-31')]\n'''","f1ee9cdb":"j = 1\ndata1 = []\nfor country in covid_19_df_eu[\"CountryExp\"].unique() :\n    country_df = covid_19_df_eu[covid_19_df_eu['CountryExp'] == country]\n    #country_df['CaseCum'].plot(figsize=(12,5)).autoscale(axis='x',tight=True)    \n    Traces = go.Scatter(\n         x = country_df.index,\n         y = country_df['NewConfCasesCum'],\n         mode = 'lines',\n         name = country\n     )\n    data1.append(Traces) \n    j = j + 1\n\nj = 1\ndata2 = []\nfor country in covid_19_df_eu[\"CountryExp\"].unique() :\n    country_df = covid_19_df_eu[covid_19_df_eu['CountryExp'] == country]\n    #country_df['CaseCum'].plot(figsize=(12,5)).autoscale(axis='x',tight=True)    \n    Traces = go.Scatter(\n         x = country_df.index,\n         y = country_df['NewDeathsCum'],\n         mode = 'lines',\n         name = country\n     )\n    data2.append(Traces) \n    j = j + 1\n","7065fab4":"layout = go.Layout(\n      xaxis=dict(title='Date'),\n      yaxis=dict(title='No of Corona Patients (Cumulative figure)'),\n      title=('No of Corona Patients across Europe(Cumulative figure)'))\nfig = go.Figure(data=data1, layout=layout)\nfig","332e3b99":"layout = go.Layout(\n      xaxis=dict(title='Date'),\n      yaxis=dict(title='No of Deaths (Cumulative figure)'),\n      title=('No of Deaths reported across Europe(Cumulative figure)'))\nfig = go.Figure(data=data2, layout=layout)\nfig","46ead9bb":"#cumulative_df['DateIndex'] = cumulative_df.index\ncovid_19_df_eu['DateIndex'] = covid_19_df_eu.index\n\ncovid_19_eu_pop = pd.merge(covid_19_df_eu, population_df_eu, how='left', left_on='CountryExp', right_on='Country (or dependency)',left_index = True)\ncovid_19_eu_pop = covid_19_eu_pop[covid_19_eu_pop['DateIndex'] > '2020-02-22']","2fb3857e":"covid_19_eu_pop['RiskWeight_Cases'] = (covid_19_eu_pop['NewConfCasesCum'] \/ covid_19_eu_pop['Population (2020)']) * 1000\ncovid_19_eu_pop['RiskWeight_Deaths'] =(covid_19_eu_pop['NewDeathsCum']\/ covid_19_eu_pop['Population (2020)']) * 100000","25a74027":"j = 1\ndata3 = []\nfor country in covid_19_eu_pop[\"CountryExp\"].unique() :\n    country_df = covid_19_eu_pop[covid_19_eu_pop['CountryExp'] == country]\n    #country_df['CaseCum'].plot(figsize=(12,5)).autoscale(axis='x',tight=True)    \n    Traces = go.Scatter(\n         x = country_df['DateIndex'],\n         y = country_df['RiskWeight_Cases'],\n         mode = 'lines',\n         name = country\n     )\n    data3.append(Traces) \n    j = j + 1\n    \nj = 1\ndata4 = []\nfor country in covid_19_eu_pop[\"CountryExp\"].unique() :\n    country_df = covid_19_eu_pop[covid_19_eu_pop['CountryExp'] == country]\n    #country_df['CaseCum'].plot(figsize=(12,5)).autoscale(axis='x',tight=True)    \n    Traces = go.Scatter(\n         x = country_df['DateIndex'],\n         y = country_df['RiskWeight_Deaths'],\n         mode = 'lines',\n         name = country\n     )\n    data4.append(Traces) \n    j = j + 1","03ea4a7a":"layout = go.Layout(\n      xaxis=dict(title='Date'),\n      yaxis=dict(title='(Patient reported\/Population)*1000'),\n      title=('Which country is at risk, Ranking => (Patient reported\/Population)*1000 '))\nfig = go.Figure(data=data3, layout=layout)\nfig","5d640883":"index_eu = covid_19_eu_pop.groupby(['CountryExp'], sort=False)['RiskWeight_Cases'].max().index\nindex_values = covid_19_eu_pop.groupby(['CountryExp'], sort=False)['RiskWeight_Cases'].max().values\ndata = {'weights':index_values} \ndf_eu_tot = pd.DataFrame(data, index = index_eu) \ndf_eu_tot['CountryExp'] = df_eu_tot.index\ndf_eu_tot = df_eu_tot.dropna()\n\nfig = px.bar(df_eu_tot.sort_values('weights', ascending=False).sort_values('weights', ascending=True), \n             x=\"weights\", y=\"CountryExp\", \n             title='Cases reported per population of country', \n             text='weights', \n             orientation='h', \n             width=1000, height=700, range_x = [0, max(df_eu_tot['weights'])])\nfig.update_traces(marker_color='#46cdfb', opacity=0.8, textposition='inside')\n\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()","fd6b9415":"layout = go.Layout(\n      xaxis=dict(title='Date'),\n      yaxis=dict(title='(Death reported\/Population)*100000'),\n      title=('Which country is at risk, Ranking => (Death reported\/Population)*100000 '))\nfig = go.Figure(data=data4, layout=layout)\nfig","edd32ee0":"index_eu = covid_19_eu_pop.groupby(['CountryExp'], sort=False)['RiskWeight_Deaths'].max().index\nindex_values = covid_19_eu_pop.groupby(['CountryExp'], sort=False)['RiskWeight_Deaths'].max().values\ndata = {'weights':index_values} \ndf_eu_tot = pd.DataFrame(data, index = index_eu) \ndf_eu_tot['CountryExp'] = df_eu_tot.index\ndf_eu_tot = df_eu_tot.dropna()\n\nfig = px.bar(df_eu_tot.sort_values('weights', ascending=False).sort_values('weights', ascending=True), \n             x=\"weights\", y=\"CountryExp\", \n             title='Deaths reported per population of country', \n             text='weights', \n             orientation='h', \n             width=1000, height=700, range_x = [0, max(df_eu_tot['weights'])])\nfig.update_traces(marker_color='#46cdfb', opacity=0.8, textposition='inside')\n\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()","13f1293c":"#### Small Countries in Europe at risk \n1. with population of around 300K Iceland is at great risk\n1. with population of around 600K Luxembourg too need to worry as number of patient has increased.\n1. with population of around 8 million Switzerland is showing risky trend lately.","55069615":"### To be Continued","51fb7f1d":"### Lets use population of European countries to identify countries which are at risk","b1419547":"### Now lets take help of Line plots to visualize the gradual growth in European countries","b14156ba":"___\n\n<a href='https:\/\/en.wikipedia.org\/wiki\/2019%E2%80%9320_coronavirus_pandemic'><img src='https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcTL3nbI4O0nn_0voMTlGLJV4aQk0EhYPkHjQnIiUbQ0R3zIsCpX'\/><\/a>\n___\n<center><em>The COVID-19 pandemic situation in Europe has turned cities in to ghost town and the entire Europe is now fighting against this invisible enemy. In this kernel I will try to visualize the number of cases reported in Europe over the time. <\/em><\/center>\n"}}