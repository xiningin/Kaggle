{"cell_type":{"88399ec2":"code","d5892c9b":"code","0d834ace":"code","1273171f":"code","05515fca":"code","d0a8b196":"code","079f853a":"code","68681c31":"code","6d5ab39e":"code","1ebad915":"code","54d5eb41":"code","a9c24eb8":"code","74d30628":"code","b5f95285":"code","ffaa25fa":"code","f6a4dc48":"code","c6e73c3c":"code","dfe0f8fe":"code","21a69fb0":"code","56a9e73b":"code","ed0f526a":"code","a83a3f1e":"code","96524bed":"code","c59a78a7":"code","79f148b7":"code","29bd8962":"code","759b5ba9":"code","266078d6":"code","23fc7fa7":"code","c63a3c1b":"code","0e5bb678":"code","352a8b21":"code","a6506093":"code","bd56a0e2":"markdown","8409ad53":"markdown","4264a167":"markdown","a92e90ad":"markdown","14dbb142":"markdown","0e8f2d58":"markdown","a94aeed6":"markdown","0bfd1ad3":"markdown","bd4ffefc":"markdown","3d0eaa04":"markdown","f7567007":"markdown","51f158cd":"markdown"},"source":{"88399ec2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5892c9b":"raw = pd.read_csv(\"\/kaggle\/input\/hotel-reviews\/Datafiniti_Hotel_Reviews.csv\")\nraw","0d834ace":"raw.columns","1273171f":"df = raw[[\"name\", \"reviews.rating\", \"reviews.title\", \"reviews.text\"]]\ndf","05515fca":"df.columns = [\"name\", \"rating\", \"title\", \"text\"]\n\ndf = df[(df.title.isna() == False) & (df.text.isna() == False)]","d0a8b196":"# Apply a first round of text cleaning techniques\nimport re\nimport string\n\ndef clean_text_round1(text):\n    '''Make text lowercase then remove punctuation and remove words containing numbers.'''\n    text = text.lower()\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    return text\n\nround1 = lambda x: clean_text_round1(x)","079f853a":"df_cleaned = df\ndf_cleaned.title = df_cleaned.title.apply(round1)\ndf_cleaned.text = df_cleaned.text.apply(round1)\ndf_cleaned","68681c31":"from sklearn.feature_extraction.text import CountVectorizer\n\ncv = CountVectorizer(stop_words='english')\ndata_cv = cv.fit_transform(df_cleaned.text)\ndata_dtm = pd.DataFrame(data_cv.toarray(), columns=cv.get_feature_names())","6d5ab39e":"data_dtm","1ebad915":"data = data_dtm\nsummed = data.sum().reset_index()\nsummed.columns = [\"word\", \"ct\"]\ntop_dict = {}\nfor idx, row in summed.iterrows():\n    top_dict[row.word] = row.ct\n\nwords = sorted(top_dict.items(), key=lambda x: x[1], reverse=True)","54d5eb41":"words[:20]","a9c24eb8":"# Let's update our document-term matrix with the new list of stop words\nfrom sklearn.feature_extraction import text \nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Add new stop words\nstop_words = text.ENGLISH_STOP_WORDS.union([\"stay\", \"hotel\", \"room\"]) #Remove most frequent and common words for hotel\n\n# Recreate document-term matrix\ncv = CountVectorizer(stop_words=stop_words)\ndata_cv = cv.fit_transform(data[[\"title\", \"text\"]])\ndata_stop = pd.DataFrame(data_cv.toarray(), columns=cv.get_feature_names())\n# data_stop.index = data_clean.index\ndata_cv\n","74d30628":"from wordcloud import WordCloud\nwc = WordCloud(stopwords=stop_words, background_color=\"white\", colormap=\"Dark2\",\n               max_font_size=150, random_state=42)","b5f95285":"title = '' \ntext = ''\nfor idx, row in df_cleaned.iterrows():\n    title += f\" {row.title}\"\n    text += f\" {row.text}\"","ffaa25fa":"title_cleaned = []\nfor x in title.split():\n    if x not in stop_words:\n        title_cleaned.append(x)\ntitle_cleaned = \" \".join(title_cleaned)","f6a4dc48":"text_cleaned = []\nfor x in text.split():\n    if x not in stop_words:\n        text_cleaned.append(x)\ntext_cleaned = \" \".join(text_cleaned)","c6e73c3c":"# Reset the output dimensions\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(15, 20))\nwc.generate(title_cleaned)\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.title(\"Most common title words\", fontsize = 20)\nplt.axis(\"off\")","dfe0f8fe":"# Reset the output dimensions\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(15, 20))\nwc.generate(text_cleaned)\nplt.imshow(wc, interpolation=\"bilinear\")\nplt.title(\"Most common review words\", fontsize = 20)\nplt.axis(\"off\")\n# plt.title(full_names[index])","21a69fb0":"from textblob import TextBlob\n\npol = lambda x: TextBlob(x).sentiment.polarity\nsub = lambda x: TextBlob(x).sentiment.subjectivity\n\n\ndf['title_polarity'] = df['title'].apply(pol)\ndf['title_subjectivity'] = df['title'].apply(sub)\n\ndf['text_polarity'] = df['text'].apply(pol)\ndf['text_subjectivity'] = df['text'].apply(sub)\ndf","56a9e73b":"df_grouped = df.groupby(\"name\").mean()","ed0f526a":"df_grouped[\"total_reviews\"] = df.groupby(\"name\").count()[\"rating\"]","a83a3f1e":"df_grouped","96524bed":"def polarity_binning(x):\n    if x < -.4:\n        return \"Terrible\"\n    elif x < -.1:\n        return \"Bad\"\n    elif x < .1:\n        return \"Neutral\"\n    elif x < .5:\n        return \"Good\"\n    else:\n        return \"Great\"\n\nget_polarity = lambda x: polarity_binning(x)","c59a78a7":"df_grouped[\"polarity_bin\"] = df_grouped.text_polarity.apply(get_polarity)","79f148b7":"df_grouped[\"popularity\"] = df_grouped[\"rating\"] * df_grouped[\"total_reviews\"]","29bd8962":"df_grouped","759b5ba9":"import seaborn as sns\nplt.rcParams['figure.figsize'] = [15, 12]\nsns.countplot(df_grouped.polarity_bin)\nplt.title(\"Text review categories\", fontsize = 20)","266078d6":"df_grouped[(df_grouped.polarity_bin == \"Good\") & (df_grouped.total_reviews > 10)]","23fc7fa7":"sns.scatterplot(y = \"text_polarity\", x = \"total_reviews\", data=df_grouped)\nplt.title(\"Total review and polarity correlation\", fontsize = 20)","c63a3c1b":"sns.scatterplot(y = \"rating\", x = \"total_reviews\", data=df_grouped)\nplt.title(\"Total review and rating correlation\", fontsize = 20)","0e5bb678":"sns.regplot(y = \"text_polarity\", x = \"title_polarity\", data=df_grouped)\nplt.title(\"Text and Title polarity\", fontsize = 20)","352a8b21":"df_grouped.sort_values(\"popularity\", ascending=False).iloc[0:10]","a6506093":"most_popular = df_grouped.sort_values(\"popularity\", ascending=False).iloc[0:15]\n\nfor index, hotel in enumerate(most_popular.index):\n    x = most_popular.total_reviews.loc[hotel]\n    y = most_popular.rating.loc[hotel]\n    plt.scatter(x, y, color='blue')\n    plt.text(x-5, y+.02, hotel, fontsize=10)\n    plt.xlim(60, 250) \n    \nplt.title('Best Hotels', fontsize=20)\nplt.xlabel('Total Reviews', fontsize=15)\nplt.ylabel('Average Ratings', fontsize=15)\n\nplt.show()","bd56a0e2":"**Binning, based on text polarity**","8409ad53":"**Get reviews polarity and subjectivity**","4264a167":"**Grouping dataframe by hotel's name, and get the average of each columns**","a92e90ad":"**Get only columns that will we use**","14dbb142":"**Data cleansing**","0e8f2d58":"**Rename column and remove records that contain null**","a94aeed6":"**Generating Word Cloud to visualize most common word in the reviews**","0bfd1ad3":"**Plot best hotels based on total reviews and ratings**","bd4ffefc":"**Read Dataframe**","3d0eaa04":"**Vectorize words**","f7567007":"**Get most frequent words**","51f158cd":"**Create popularity column, based on average ratings and number of reviews**"}}