{"cell_type":{"d4dd889b":"code","e640cd1c":"code","afc20076":"code","7852c233":"code","a18e033c":"code","9d9103ac":"code","7d3c92d1":"code","d7d05cc7":"code","2c0df86c":"code","d20a501c":"code","df11fd0d":"code","36dfba61":"code","ad34ade4":"code","0d43c690":"code","9fba023e":"code","8ccbec48":"code","c9e719e5":"code","65834f8a":"code","7a2d9284":"code","e7b09b19":"code","3300c9aa":"markdown","8600e49d":"markdown","194e8b76":"markdown"},"source":{"d4dd889b":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score\nfrom xgboost import XGBClassifier","e640cd1c":"train = pd.read_csv(r'..\/input\/tabular-playground-series-dec-2021\/train.csv')\ntrain.head()","afc20076":"test = pd.read_csv(r'..\/input\/tabular-playground-series-dec-2021\/test.csv')\ntest.head()","7852c233":"sample_submission = pd.read_csv(r'..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')\nsample_submission.head()","a18e033c":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int8','int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2\n\n    for col in df.columns:\n        col_type = df[col].dtypes\n\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n\n    if verbose:\n        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n \n    return df","9d9103ac":"train_new = reduce_mem_usage(train)\ntest_new = reduce_mem_usage(test)","7d3c92d1":"print(f'train set have {train_new.shape[0]} rows and {train_new.shape[1]} columns.')\nprint(f'test set have {test_new.shape[0]} rows and {test_new.shape[1]} columns.') \nprint(f'sample_submission set have {sample_submission.shape[0]} rows and {sample_submission.shape[1]} columns.') ","d7d05cc7":"# let's check for missing values\ntrain_new.isnull().sum()","2c0df86c":"# let's check count of unique values every cols are having\ntrain_new.nunique()","d20a501c":"# Soil_Type7, Soil_Type15 contains only one value\ntrain_new.drop(['Id','Soil_Type7','Soil_Type15'],axis=1,inplace=True)\ntest_new.drop(['Id','Soil_Type7','Soil_Type15'],axis=1,inplace=True)","df11fd0d":"print(\"Cover_Type unique values:\")\nprint(train_new['Cover_Type'].value_counts())\nplt.figure(figsize=(14,5))\ntarget_values = train_new['Cover_Type'].value_counts()\nsns.barplot(x=target_values.index, y=target_values.values,linewidth=1.5,errcolor=\".2\", edgecolor=\".2\")\nplt.title(\"Cover_Type unique values\", fontdict={'fontsize':20})\nplt.show()","36dfba61":"# delete the row with target 5\ntrain_new.drop(train_new[train_new['Cover_Type']==5].index,inplace=True)","ad34ade4":"y = train_new['Cover_Type']\ntrain_new.drop('Cover_Type',axis=1,inplace=True)","0d43c690":"def fit_xgb(trial, x_train, y_train, x_test, y_test):\n    params = {\n        'max_depth': trial.suggest_int('max_depth', 6, 10), # Extremely prone to overfitting!\n        'n_estimators': trial.suggest_int('n_estimators', 400, 4000, 400), # Extremely prone to overfitting!\n        'eta': trial.suggest_float('eta', 0.007, 0.013), # Most important parameter.\n        'subsample': trial.suggest_discrete_uniform('subsample', 0.2, 0.9, 0.1),\n        'colsample_bytree': trial.suggest_discrete_uniform('colsample_bytree', 0.2, 0.9, 0.1),\n        'colsample_bylevel': trial.suggest_discrete_uniform('colsample_bylevel', 0.2, 0.9, 0.1),\n        'min_child_weight': trial.suggest_loguniform('min_child_weight', 1e-4, 1e4), # I've had trouble with LB score until tuning this.\n        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-4, 1e4), # L2 regularization\n        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-4, 1e4), # L1 regularization\n        'gamma': trial.suggest_loguniform('gamma', 1e-4, 1e4)\n    } \n    \n    \n    model = XGBClassifier(**params,tree_method='gpu_hist', random_state=2021)\n    model.fit(x_train, y_train,eval_set=[(x_test,y_test)], early_stopping_rounds=150, verbose=False)\n    \n    y_train_pred = model.predict(x_train)\n    \n    y_test_pred = model.predict(x_test)\n    y_train_pred = np.clip(y_train_pred, 0.1, None)\n    y_test_pred = np.clip(y_test_pred, 0.1, None)\n    \n    log = {\n        \"train accuracy\": accuracy_score(y_train, y_train_pred),\n        \"valid accuracy\": accuracy_score(y_test, y_test_pred)\n    }\n    \n    return model, log","9fba023e":"from sklearn.model_selection import train_test_split\ndef objective(trial):\n    acc = 0\n    x_train, x_test, y_train, y_test = train_test_split(train_new, y, test_size=0.30)\n    model, log = fit_xgb(trial, x_train, y_train, x_test, y_test)\n    acc += log['valid accuracy']\n        \n    return acc","8ccbec48":"xgb_params = {'max_depth': 6, \n              'n_estimators': 2000, \n              'eta': 0.0116303297452901, \n              'subsample': 0.30000000000000004, \n              'colsample_bytree': 0.6000000000000001, \n              'colsample_bylevel': 0.5, \n              'min_child_weight': 0.0007982395954513741, \n              'reg_lambda': 0.015853494080830713, \n              'reg_alpha': 0.014553261848573449, \n              'gamma': 5.036747241342804}","c9e719e5":"folds = KFold(n_splits = 5, random_state = 2021,shuffle=True)\n\npredictions = np.zeros(len(test))\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(train)):\n    print(f\"Fold: {fold}\")\n    X_train, X_test = train.iloc[trn_idx], train.iloc[val_idx]\n    y_train, y_test = y.iloc[trn_idx], y.iloc[val_idx]\n\n    model = XGBClassifier(tree_method='gpu_hist', **xgb_params)\n   \n    model.fit(X_train, y_train,\n              eval_set=[(X_test, y_test)],\n                early_stopping_rounds=400,\n                verbose=False)\n    pred = model.predict(X_test)\n    acc = accuracy_score(y_test, pred)\n    print(f\" accuracy_score: {acc}\")\n    print(\"-\"*50)\n    \n    predictions += model.predict(test) \/ folds.n_splits ","65834f8a":"# plot feature importance\nfrom xgboost import plot_importance\nfig, ax = plt.subplots(1,1,figsize=(20,12))\nplot_importance(model,ax=ax, xlabel=None)\nplt.show()","7a2d9284":"sample_submission['Cover_Type'] = predictions.astype('int')\nsample_submission.to_csv(f'cat.csv',index = False)","e7b09b19":"sample_submission","3300c9aa":"<div style=\"background-color:skyblue;\">\n    <h1><center>Tabular Playground Series - DEC 2021<\/center><\/h1>\n<\/div>\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/26480\/logos\/header.png?t=2021-04-09-00-57-05)","8600e49d":"* Reducing the size of train and test:","194e8b76":"looks like target '5' have only one value."}}