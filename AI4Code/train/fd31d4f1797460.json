{"cell_type":{"1c988c7f":"code","58d68796":"code","6fbdb5ba":"code","fb204439":"code","a08b978d":"code","9b8f4ff4":"code","68ef70af":"code","16d273cf":"code","19ce81b1":"code","a2247f12":"code","29726201":"code","7ec100fa":"code","1cf05e2f":"code","662d71ff":"code","a58f040a":"code","3446ee40":"code","35ff3f6c":"code","98846381":"code","8428f50f":"code","0fb409be":"code","c7e4d50a":"code","08594102":"code","0af3b48f":"code","a77d8e85":"code","961f351e":"code","c565d99e":"code","21714480":"code","6d66e054":"code","e46c1a6d":"code","2504208a":"code","6b50dfbb":"code","6c2ec241":"code","1c20eddf":"code","969fb82f":"code","5ee511e7":"code","6a380a67":"code","cfcad902":"code","382090b6":"code","43fcf60e":"code","4a0bef37":"code","1ed4a54a":"code","0797e97a":"markdown","301adee1":"markdown","c5e4c7e6":"markdown","f662b3cd":"markdown","39ccbdfa":"markdown","5f73e395":"markdown","46fbf1f0":"markdown","f432aefd":"markdown","663b6898":"markdown","d47d861a":"markdown","78155623":"markdown","a28e162f":"markdown"},"source":{"1c988c7f":"# Import libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nfrom scipy import stats\nimport statsmodels.api as sm\nimport warnings\nfrom itertools import product\nfrom datetime import datetime\nwarnings.filterwarnings('ignore')\nplt.style.use('seaborn-poster')","58d68796":"import os","6fbdb5ba":"for x,y,z in os.walk('\/kaggle\/input'):\n    print(x,z)","fb204439":"df_sen_hodl = pd.read_csv('\/kaggle\/input\/sentiment-bitcoin\/sentiment_hodl.csv')\ndf_sen_hodl = df_sen_hodl.sort_values(by=['date'])","a08b978d":"df_sentiment = pd.read_csv('\/kaggle\/input\/sentiment-bitcoin\/sentiment_nb.csv')\ndf_sentiment = df_sentiment.sort_values(by=['date'])\ndf_sentiment = df_sentiment[1620:]\ndf_sentiment = df_sentiment.append(df_sen_hodl)\ndf_sentiment = df_sentiment.sort_values(by=['date'])\ndf_sentiment = df_sentiment[:8017]","9b8f4ff4":"import datetime,dateutil\ntemp = []\nfor index,x in enumerate(df_sentiment.groupby(['date']).mean().index):\n    if dateutil.parser.parse(x) - dateutil.parser.parse(df_sentiment.groupby(['date']).mean().index[index+1]) == dateutil.parser.parse('2017-10-26')-datetime.datetime(2017,10,27):\n        pass\n    else:\n        y = dateutil.parser.parse(x)+datetime.timedelta(days=1)\n        while y < dateutil.parser.parse(df_sentiment.groupby(['date']).mean().index[index+1]):\n            temp.append(y)\n            y += datetime.timedelta(days=1)\n        \n    ","68ef70af":"mean_sentiment = df_sentiment.groupby(['date']).mean()\nmean_sentiment","16d273cf":"new_temp = []\nfor x in temp:\n    new_temp.append([x.strftime('%Y-%m-%d'),0])","19ce81b1":"newdf = pd.DataFrame(new_temp,columns=['date','sentiment_value'])\nnewdf.index = newdf.date\nnewdf = newdf.drop(['date'],axis=1)\nnewdf","a2247f12":"mean_sentiment = mean_sentiment.append(newdf).sort_values(by=['date'])\nmean_sentiment","29726201":"# Load data\ndf = pd.read_csv('\/kaggle\/input\/bitcoin-historical-data\/bitstampUSD_1-min_data_2012-01-01_to_2020-12-31.csv')\ndf.head()","7ec100fa":"# Unix-time to \ndf.Timestamp = pd.to_datetime(df.Timestamp, unit='s')\n\n# Resampling to daily frequency\ndf.index = df.Timestamp\n\ndf = df.resample('D').mean()\n\n# Resampling to monthly frequency\ndf_month = df.resample('M').mean()\n\n# Resampling to annual frequency\ndf_year = df.resample('A-DEC').mean()\n\n# Resampling to quarterly frequency\ndf_Q = df.resample('Q-DEC').mean()","1cf05e2f":"df = df.iloc[2130:]","662d71ff":"df","a58f040a":"temp = []\nfor index,x in enumerate(mean_sentiment.values):\n    if index == 0:\n        temp.append(0)\n    else:\n        temp.append(x[0]-mean_sentiment.values[index-1][0])\n    ","3446ee40":"mean_sentiment['difference'] = temp\nmean_sentiment","35ff3f6c":"df['sentiment_value'] = mean_sentiment['difference']","98846381":"# PLOTS\nfig = plt.figure(figsize=[15, 7])\nplt.suptitle('Bitcoin exchanges, mean USD', fontsize=22)\n\nplt.subplot(221)\nplt.plot(df.Weighted_Price, '-', label='By Days')\nplt.legend()","8428f50f":"df = df.dropna()\nplt.figure(figsize=[15,7])\nsm.tsa.seasonal_decompose(df.Weighted_Price).plot()\nprint(\"Dickey\u2013Fuller test: p=%f\" % sm.tsa.stattools.adfuller(df.Weighted_Price)[1])\nplt.show()","0fb409be":"# Box-Cox Transformations\ndf['Weighted_Price_box'], lmbda = stats.boxcox(df.Weighted_Price)\nprint(\"Dickey\u2013Fuller test: p=%f\" % sm.tsa.stattools.adfuller(df.Weighted_Price)[1])","c7e4d50a":"# Seasonal differentiation\ndf['prices_box_diff'] = df.Weighted_Price_box - df.Weighted_Price_box.shift(12)\nprint(\"Dickey\u2013Fuller test: p=%f\" % sm.tsa.stattools.adfuller(df.prices_box_diff[12:])[1])","08594102":"# Regular differentiation\ndf['prices_box_diff2'] = df.prices_box_diff - df.prices_box_diff.shift(1)\nplt.figure(figsize=(15,7))\n\n# STL-decomposition\nsm.tsa.seasonal_decompose(df.prices_box_diff2[13:]).plot()   \nprint(\"Dickey\u2013Fuller test: p=%f\" % sm.tsa.stattools.adfuller(df.prices_box_diff2[13:])[1])\n\nplt.show()","0af3b48f":"real_df = df","a77d8e85":"df = real_df[1067:1097]","961f351e":"df","c565d99e":"date_lists = [datetime.datetime(2020, 10,31),\ndatetime.datetime(2020, 11,1),\ndatetime.datetime(2020, 11,2),\ndatetime.datetime(2020, 11,3),\ndatetime.datetime(2020, 11,4),\ndatetime.datetime(2020, 11,5),\ndatetime.datetime(2020, 11,6),\ndatetime.datetime(2020, 11,7),\ndatetime.datetime(2020, 11,8),\ndatetime.datetime(2020, 11,9),\ndatetime.datetime(2020, 11,10),\ndatetime.datetime(2020, 11,11),\ndatetime.datetime(2020, 11,12),\ndatetime.datetime(2020, 11,13),\ndatetime.datetime(2020, 11,14),\ndatetime.datetime(2020, 11,15),\ndatetime.datetime(2020, 11,16),\ndatetime.datetime(2020, 11,17),\ndatetime.datetime(2020, 11,18),\ndatetime.datetime(2020, 11,19),\ndatetime.datetime(2020, 11,20),\ndatetime.datetime(2020, 11,21),\ndatetime.datetime(2020, 11,22),\ndatetime.datetime(2020, 11,23),\ndatetime.datetime(2020, 11,24),\ndatetime.datetime(2020, 11,25),\ndatetime.datetime(2020, 11,26),\ndatetime.datetime(2020, 11,27),\ndatetime.datetime(2020, 11,28),\ndatetime.datetime(2020, 11,29)]","21714480":"real_df[1090:1097]","6d66e054":"# Initial approximation of parameters\nresult_forecast_win30 = []\nfor iterator in range(10):\n    print(iterator)\n    df = real_df[1090+iterator:1097+iterator]\n    Qs = range(0, 2)\n    qs = range(0, 3)\n    Ps = range(0, 3)\n    ps = range(0, 3)\n    D=1\n    d=1\n    parameters = product(ps, qs, Ps, Qs)\n    parameters_list = list(parameters)\n    len(parameters_list)\n\n    # Model Selection\n    results = []\n    best_aic = float(\"inf\")\n    warnings.filterwarnings('ignore')\n    for param in parameters_list:\n        try:\n            model=sm.tsa.statespace.SARIMAX(df.Weighted_Price_box,exog=df.sentiment_value, order=(param[0], d, param[1]), \n                                            seasonal_order=(param[2], D, param[3], 12),enforce_stationarity=False).fit(disp=-1)\n        except ValueError:\n            print('wrong parameters:', param)\n            continue\n        aic = model.aic\n        if aic < best_aic:\n            best_model = model\n            best_aic = aic\n            best_param = param\n        results.append([param, model.aic])\n\n\n    # Best Models\n    result_table = pd.DataFrame(results)\n    result_table.columns = ['parameters', 'aic']\n#     print(result_table.sort_values(by = 'aic', ascending=True).head())\n#     print(best_model.summary())\n\n    df_hodl_forecast = pd.read_csv('\/kaggle\/input\/sentiment-bitcoin\/sentiment_hodl.csv')\n    df_hodl_forecast = df_hodl_forecast.sort_values(by=['date'])\n    df_sentiment_forecast = pd.read_csv('\/kaggle\/input\/sentiment-bitcoin\/sentiment_nb.csv')\n    df_sentiment_forecast = df_sentiment_forecast.sort_values(by=['date'])\n    df_sentiment_forecast = df_sentiment_forecast.append(df_hodl_forecast)\n    df_sentiment_forecast = df_sentiment_forecast.sort_values(by=['date'])\n    df_sentiment_forecast = df_sentiment_forecast.groupby(['date']).mean()\n    df_sentiment_forecast = df_sentiment_forecast[523:]\n\n    \n    df_sentiment_forecast = df_sentiment_forecast[1095+iterator:1097+iterator]\n    temp = []\n    for index,x in enumerate(df_sentiment_forecast.values):\n        if index == 0:\n            temp.append(0)\n        else:\n            temp.append(x[0]-df_sentiment_forecast.values[index-1][0])\n\n    df2 = df[['Weighted_Price']]\n    date_list = [date_lists[iterator]]\n    future = pd.DataFrame(index=date_list, columns= df2.columns)\n    df2 = pd.concat([df2, future])\n    df2['forecast'] = invboxcox(best_model.predict(start=6,end=7,exog=[temp[1]]), lmbda)\n   \n    result_forecast_win30.append(df2['forecast'][-1:])\n#     plt.figure(figsize=(15,7))\n#     real_df[1067+iterator:1098+iterator].Weighted_Price.plot()\n\n#     df2.forecast.plot(color='r', ls='--', label='Predicted Weighted_Price')\n#     plt.legend()\n#     plt.title('Bitcoin exchanges, by months')\n#     plt.ylabel('mean USD')\n#     plt.show()","e46c1a6d":"a = pd.Series()\nb = 0\nfor index,x in enumerate(result_forecast_win30):\n    \n    a = a.append(x)\n        \na","2504208a":"plt.figure(figsize=(15,7))\ndf2 = real_df[1067+iterator:1098+iterator]\ndf2.Weighted_Price.plot()\ndf2['forecast'] = a\ndf2.forecast.plot(color='r', ls='--', label='Predicted Weighted_Price')\nplt.legend()\nplt.title('Bitcoin exchanges, by months')\nplt.ylabel('mean USD')\nplt.show()","6b50dfbb":"df2['forecast'][1:]","6c2ec241":"from sklearn.metrics import mean_squared_error\nimport math\nprint(mean_squared_error(df2['forecast'][-10:].values,df2['Weighted_Price'][-10:].values))\n# print(math.sqrt(mean_squared_error(df2.forecast[1128:1158], df2.Weighted_Price[1128:1158])))\n\nfrom sklearn.metrics import mean_absolute_error\nprint(mean_absolute_error(df2['forecast'][-10:].values,df2['Weighted_Price'][-10:].values))\n#MAE: 26745.1109986","1c20eddf":"# Inverse Box-Cox Transformation Function\ndef invboxcox(y,lmbda):\n   if lmbda == 0:\n      return(np.exp(y))\n   else:\n      return(np.exp(np.log(lmbda*y+1)\/lmbda))","969fb82f":"df_sentiment_forecast['sentiment_value'] = temp","5ee511e7":"from sklearn.metrics import mean_squared_error\nimport math\nprint(mean_squared_error(df2.forecast[1128:1158], df2.Weighted_Price[1128:1158]))\n# print(math.sqrt(mean_squared_error(df2.forecast[1128:1158], df2.Weighted_Price[1128:1158])))\n\nfrom sklearn.metrics import mean_absolute_error\nprint(mean_absolute_error(df2.forecast[1128:1158], df2.Weighted_Price[1128:1158]))\n#MAE: 26745.1109986","6a380a67":"import numpy as np\nfrom sklearn.linear_model import LinearRegression","cfcad902":"# Initial approximation of parameters\nresult_forecast_win30 = []\nfor iterator in range(30):\n    print(iterator)\n    df = real_df[1060+iterator:1097+iterator]\n    model = LinearRegression().fit(df[['sentiment_value','prices_box_diff2','Close']],df['Weighted_Price'])\n\n    df_hodl_forecast = pd.read_csv('\/kaggle\/input\/sentiment-bitcoin\/sentiment_hodl.csv')\n    df_hodl_forecast = df_hodl_forecast.sort_values(by=['date'])\n    df_sentiment_forecast = pd.read_csv('\/kaggle\/input\/sentiment-bitcoin\/sentiment_nb.csv')\n    df_sentiment_forecast = df_sentiment_forecast.sort_values(by=['date'])\n    df_sentiment_forecast = df_sentiment_forecast.append(df_hodl_forecast)\n    df_sentiment_forecast = df_sentiment_forecast.sort_values(by=['date'])\n    df_sentiment_forecast = df_sentiment_forecast.groupby(['date']).mean()\n    df_sentiment_forecast = df_sentiment_forecast[523:]\n\n    \n    df_sentiment_forecast = df_sentiment_forecast[1095+iterator:1097+iterator]\n    temp = []\n    for index,x in enumerate(df_sentiment_forecast.values):\n        if index == 0:\n            temp.append(0)\n        else:\n            temp.append(x[0]-df_sentiment_forecast.values[index-1][0])\n\n    result_forecast_win30.append(model.predict(real_df[1096+iterator:1097+iterator][['sentiment_value','prices_box_diff2','Close']]))\n#     plt.figure(figsize=(15,7))\n#     real_df[1067+iterator:1098+iterator].Weighted_Price.plot()\n\n#     df2.forecast.plot(color='r', ls='--', label='Predicted Weighted_Price')\n#     plt.legend()\n#     plt.title('Bitcoin exchanges, by months')\n#     plt.ylabel('mean USD')\n#     plt.show()","382090b6":"real_df[1097:1127]","43fcf60e":"model = LinearRegression(fit_intercept=True).fit(np.array(real_df[1060:1097]['sentiment_value']).reshape(-1,1),df['Weighted_Price'])\n","4a0bef37":"real_df[1060:1097]['sentiment_value'] * model.coef_[0] + model.intercept_","1ed4a54a":"plt.plot(real_df[1060:1097]['sentiment_value'].values * model.coef_[0] + model.intercept_)\nplt.plot(real_df[1060:1097]['Weighted_Price'].values,color='r')\nplt.show()","0797e97a":"#### Without Using Sentiment\n30 days before, used to predict 31 Oct to 29 Nov, result<br>\nMSE = 192067.0320751612\n333.51605274289125\n\n#### Using Sentiment\n30 days before, used to predict 31 Oct to 29 Nov, result<br>\nMSE = 188773.36671742506<br>\nMAE = 333.7377<br>","301adee1":"## Model Selection","c5e4c7e6":"The series are not stationary.","f662b3cd":"## Data Exploration","39ccbdfa":"The series are stationary.","5f73e395":"## Stationarity check and STL-decomposition of the series","46fbf1f0":"## Regular differentiation","f432aefd":"## Seasonal differentiation","663b6898":"# Bitcoin Price. Prediction by ARIMA","d47d861a":"## Box-Cox Transformations","78155623":"The series are not stationary.","a28e162f":"The series are not stationary."}}