{"cell_type":{"1c5d1870":"code","16c28261":"code","1cec7f19":"code","54abb8c2":"code","6b55d6f5":"code","ac25de1a":"code","10c8b980":"code","4c6266d7":"code","16ab9429":"code","0f12d02c":"code","de806f21":"code","a0336a2c":"code","dc41f85c":"code","da255c18":"code","02db0f12":"code","3c0550ed":"code","344819fa":"code","d4877139":"code","6398e642":"code","8dbc69e6":"code","49f338c5":"code","2d324c8c":"code","ca38ce84":"code","47cf203c":"code","4b20a6b2":"code","adfbfb25":"code","dbe3d75d":"code","3617643d":"code","55ddaf17":"code","044159e5":"code","7b812f77":"code","06afc635":"code","0b256e50":"code","9a339ec7":"code","a9c855a2":"code","7fca3136":"code","dd2539e9":"code","fb4015cd":"code","1436ffa2":"code","365fd00a":"code","12481899":"code","8267b2e2":"code","5861fe0b":"code","8b508c19":"code","86d96050":"code","afd37541":"code","d53ec3d9":"code","122f622c":"code","ee62c56a":"code","9c7f08d5":"code","a452899a":"code","19abdbf9":"code","1e3c7d03":"code","4281de9b":"code","eb579f37":"code","d96a6e4a":"code","d162cd7f":"code","e471bff3":"code","f5362633":"code","099a1b32":"code","d44935e9":"code","a98cd190":"code","594e4048":"code","1592998d":"code","be8c6926":"code","f7d5d4bf":"code","11f9ec8a":"code","92523752":"code","3deef6cb":"code","58adb181":"code","e653bd9a":"code","760c1c35":"code","2362afad":"markdown","f18463fb":"markdown","e96487c3":"markdown","3627f692":"markdown","0e52795b":"markdown","3a886201":"markdown","76e4cad2":"markdown","d449c978":"markdown","ed625bd5":"markdown","46d8d571":"markdown","ccce648e":"markdown","4764940b":"markdown","f334be66":"markdown","078712f0":"markdown","46ab146c":"markdown","ab3fbe96":"markdown","896f0f55":"markdown"},"source":{"1c5d1870":"import numpy as np\nimport pandas as pd\nfrom scipy.stats import norm, kstest\nimport statsmodels.api as sm\nimport seaborn as sns\nimport matplotlib.pyplot as plt","16c28261":"data = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","1cec7f19":"data","54abb8c2":"data.info()","6b55d6f5":"data['bmi'] = data['bmi'].fillna(data['bmi'].mean())","ac25de1a":"data.isnull().sum().plot(kind='bar')","10c8b980":"data['id'].duplicated().sum()","4c6266d7":"sns.distplot(data['age'], bins=100);","16ab9429":"# Bernoli Distribution \nsns.distplot(data['stroke']);","0f12d02c":"# is it normal or not ?\n## let's check it \nsns.distplot(data['avg_glucose_level'], bins=100);","de806f21":"def kl(p, q):\n    res = np.sum(np.where(np.logical_and( p!=0 ,q!=0), p * np.log(p \/ q), 0))\n    return res","a0336a2c":"count, devision = np.histogram(data['avg_glucose_level'], bins=100)","dc41f85c":"ideal = norm.rvs(size=len(data['avg_glucose_level']), loc = data['avg_glucose_level'].mean(), scale =  data['avg_glucose_level'].std())\nicount, idevision = np.histogram(ideal, bins=100)","da255c18":"kl(count\/5110, icount\/5110)","02db0f12":"plt.plot(np.cumsum(data['avg_glucose_level'].sort_values().reset_index(drop=True)))\nplt.plot(np.cumsum(ideal), color='red')","3c0550ed":"data['bmi'].plot(kind='hist', bins=100)","344819fa":"ideal = norm.rvs(size=len(data['bmi']), loc = data['bmi'].mean(), scale =  data['bmi'].std())","d4877139":"plt.hist(ideal, bins=100)\nplt.hist(data['bmi'], bins=100)","6398e642":"sns.countplot(data['gender']);","8dbc69e6":"data.loc[data['gender'].str.contains('Other')]","49f338c5":"data[data.gender.values == 'Other']","2d324c8c":"def remove(gender):\n    if 'Other' in gender:\n        return np.nan\n    else:\n        return gender","ca38ce84":"data['gender'] = data['gender'].apply(remove)\ndata['gender'] = data['gender'].dropna()","47cf203c":"sns.countplot(data['gender']);","4b20a6b2":"data = data.drop('id', axis=1)","adfbfb25":"sns.countplot(data['smoking_status']);","dbe3d75d":"data['smoking_status'].value_counts()","3617643d":"from numpy import nan as NA\n#data[data['age'] < 20]\ndef remove_age(age):\n    if age < 18:\n        return NA\n    else:\n        return age","55ddaf17":"data['age'] = data['age'].apply(remove_age)\ndata['age'].dropna(inplace=True)\ndata.dropna(inplace=True)","044159e5":"data","7b812f77":"data['age'].describe()","06afc635":"data['categori_age'] = pd.cut((data['age']), 3, labels=['Youth ', 'Adults ', 'Seniors '])","0b256e50":"obj = data.select_dtypes(include='object')\nobj","9a339ec7":"data","a9c855a2":"from numpy import sqrt, round, abs","7fca3136":"dataA = data[data['age'] >= 50]['stroke']\ndataB = data[data['age'] < 50]['stroke']","dd2539e9":"Amean = dataA.mean()\nBmean = dataB.mean()\nAstd = dataA.std()\nBstd = dataB.std()\nAlen = len(dataA)\nBlen = len(dataB)","fb4015cd":"above = Amean - Bmean\nbelow = sqrt((Astd ** 2 \/ Alen) + (Bstd ** 2 \/ Blen))\nz  = above \/ below ","1436ffa2":"z","365fd00a":"p_value = 2 * (1 - norm.cdf(abs(z)))\np_value","12481899":"from statsmodels.formula.api import ols\nimport statsmodels.api as sm","8267b2e2":"res = ols('stroke ~ age', data=data).fit()\nsm.stats.anova_lm(res)","5861fe0b":"data","8b508c19":"data.groupby(['gender', 'categori_age'])['stroke'].size()","86d96050":"data.pivot_table(values='age', columns='categori_age', index='stroke', aggfunc='count').plot(kind='bar', figsize=(15, 8))","afd37541":"data.groupby(['Residence_type', 'work_type'])['stroke'].size().plot(kind='bar')","d53ec3d9":"data","122f622c":"sns.catplot(\n    data=data, kind=\"bar\",\n    x=\"gender\", y=\"heart_disease\", hue=\"stroke\",\n    ci=\"sd\", palette=\"dark\"\n)","ee62c56a":"plt.figure(figsize=(10, 10))\nplt.hlines(40, 20, 80, color='black')\nplt.scatter(x=data['age'], y=data['bmi'], color='red')","9c7f08d5":"data['gender'] = pd.get_dummies(data['gender'])\ndata['Residence_type'] = pd.get_dummies(data['Residence_type'])\ndata['ever_married'] = pd.get_dummies(data['ever_married'])\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.compose import make_column_transformer\n##                              *** For Machine Learning use ohe ***\n#ohe = make_column_transformer((OneHotEncoder(), ['work_type', 'smoking_status', 'categori_age']), remainder='passthrough')\n#data = ohe.fit_transform(data)","a452899a":"label = LabelEncoder()\ndata['work_type'] = label.fit_transform(data['work_type'])\ndata['smoking_status'] = label.fit_transform(data['smoking_status'])\ndata['categori_age'] = label.fit_transform(data['categori_age'])\n","19abdbf9":"data.drop('age', inplace=True, axis=1)","1e3c7d03":"from sklearn.preprocessing import StandardScaler\nstn = StandardScaler()\ndata['avg_glucose_level'] = stn.fit_transform(data['avg_glucose_level'].values.reshape(-1, 1))\ndata['bmi'] = stn.fit_transform(data['bmi'].values.reshape(-1, 1))\n","4281de9b":"data","eb579f37":"from sklearn.feature_selection import chi2, SelectKBest\n\nx = data.drop('stroke', axis=1)\ny =  data['stroke']\nbest_f = SelectKBest(chi2, k=5)\nbest_f.fit_transform(abs(x), y)\n\n\ndfscores = pd.DataFrame(best_f.scores_)\ndfcolumns = pd.DataFrame(x.columns)\n\nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\n\nfeatureScores.columns = ['feature','score']  \nprint(featureScores.nlargest(5,'score')) ","d96a6e4a":"plt.figure(figsize=(8, 8))\nsns.heatmap(x.corr(), annot=True)","d162cd7f":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)","e471bff3":"from  sklearn.metrics import confusion_matrix","f5362633":"from sklearn.ensemble  import RandomForestClassifier\nclf_r = RandomForestClassifier(n_estimators=10)\nclf_r.fit(x_train, y_train)\nprint(clf_r.score(x_train, y_train))\nr_predict = clf_r.predict(x_test)\n# Evaluate Model:\nprint(confusion_matrix(y_test, r_predict))","099a1b32":"from  sklearn.linear_model import LogisticRegression\nclf_l = LogisticRegression()\nclf_l.fit(x_train, y_train)\nprint(clf_l.score(x_train, y_train))\nl_predict = clf_l.predict(x_test)\n# Evaluate Model:\nprint(confusion_matrix(y_test, l_predict))","d44935e9":"from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n\nparameters = {'kernel':('linear', 'poly'), 'C':[1,2, 3, 4, 5]}\n\nsvc = SVC()\nclf_sg = GridSearchCV(svc, parameters)\nclf_sg.fit(x_train, y_train)\n\nprint(clf_sg.best_estimator_)\nprint(clf_sg.score(x_train, y_train))\n\nsg_predict = clf_sg.predict(x_test)\n# Evaluate Model:\nprint(confusion_matrix(y_test, sg_predict))","a98cd190":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nx2d = pca.fit_transform(x_train)","594e4048":"plt.scatter(x = x2d[:, 0], y = x2d[:, 1])","1592998d":"pca.explained_variance_ratio_","be8c6926":"import xgboost as xgb\nmodel = xgb.XGBClassifier()\nfrom boruta import BorutaPy\nfeature = BorutaPy(model, n_estimators='auto', verbose=2, random_state=1)","f7d5d4bf":"feature.fit(np.array(x_train), np.array(y_train))","11f9ec8a":"print(feature.support_)\nprint(feature.ranking_)\nprint(x_train.columns[feature.support_].to_list())","92523752":"x_boruta = feature.transform(np.array(x_train))","3deef6cb":"xgb_model = xgb.XGBClassifier()\nxgb_model.fit(x_boruta, y_train)","58adb181":"x_test_filtered = feature.transform(np.array(x_test))\nprediction_xgb = xgb_model.predict(x_test_filtered)","e653bd9a":"from sklearn import metrics\nprint (\"Accuracy = \", metrics.accuracy_score(y_test, prediction_xgb))","760c1c35":"cm = confusion_matrix(y_test, prediction_xgb)\n#print(cm)\nsns.heatmap(cm, annot=True)","2362afad":"# Another Way To Feature Selection:\n### use Boruta \n#### See How It's Work","f18463fb":"\n\nFaster run times, thanks to scikit-learn\n\nScikit-learn like interface\n\nCompatible with any ensemble method from scikit-learn\n\nAutomatic n_estimator selection\n\nRanking of features\n\nFeature importances are derived from Gini impurity instead of RandomForest R package's MDA","e96487c3":"# Logestic_regression:","3627f692":"## Clean The Data:","0e52795b":"# Feature Selcetion\n## Chi2","3a886201":"# Convert To Numerical:","76e4cad2":"## WHO Dataset :\n### Describtion:\n","d449c978":"### *1) id: unique identifier*\n\n### *2) gender: \"Male\", \"Female\" or \"Other\"*\n\n### *3) age: age of the patient**\n\n### *4) hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension*\n\n### *5) heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease*\n\n### *6) ever_married: \"No\" or \"Yes\"*\n\n### *7) work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"*\n\n### *8) Residence_type: \"Rural\" or \"Urban\"*\n\n### *9) avg_glucose_level: average glucose level in blood*\n\n### *10) bmi: body mass index*\n\n### *11) smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"**\n\n### *12) stroke: 1 if the patient had a stroke or 0 if not*\n\n*Note: \"Unknown\" in smoking_status means that the information is unavailable for this patient*\n","ed625bd5":"## Pay attention Use Np.Array Is Not Mandetory","46d8d571":"## Anova_Test","ccce648e":"### Children (00-14 years)\n### Youth (15-24 years)\n### Adults (25-64 years)\n### Seniors (65 years and over)","4764940b":"# SVM:","f334be66":"# PCA:","078712f0":"##  Now We Want To See If The Age Is More Than 40 or 50 Is Really Effected On Stroke Or Not\n### if p_value < 0.5 means we can have a reason to prove it if the p_value > 0.5 means maybe it happens base on chance","46ab146c":"### ** When i want to try remove the Other on gender column i got error ** \n### so try to another way to remove it ","ab3fbe96":"# Random_Forest:\n","896f0f55":"## Let's Check Null Value :\n### Only Bmi Has Null Value"}}