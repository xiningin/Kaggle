{"cell_type":{"262e14dc":"code","9ff3cd5c":"code","ee554684":"code","6b7d5fe2":"code","498b2e25":"code","d02ae56f":"code","9f7e3e67":"markdown"},"source":{"262e14dc":"!pip install ..\/input\/kerasapplication\/Keras_Applications-1.0.8-py3-none-any.whl\n!pip install ..\/input\/imageclassifiers\/image_classifiers-1.0.0-py3-none-any.whl\n!pip install ..\/input\/efficientnet\/efficientnet-1.1.1-py3-none-any.whl","9ff3cd5c":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow_hub as hub\nimport glob\nfrom tensorflow.keras.models import Sequential, Model, load_model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow import keras\nfrom classification_models.tfkeras import Classifiers\nfrom efficientnet.tfkeras import EfficientNetB4\n\n\nSEED = 42\n","ee554684":"weight_path = '..\/input\/model-ensembling-with-k-fold\/fineTuned_v0.77.h5'\nmy_model = load_model(weight_path)","6b7d5fe2":"test_images = glob.glob('..\/input\/cassava-leaf-disease-classification\/test_images\/*.jpg')\n\ndf_test = pd.DataFrame(test_images, columns = ['path'])\n\n\n\ndef make_test_gen(batch_size=16):\n    \n    my_test_idg = ImageDataGenerator()\n    \n    test_gen= my_test_idg.flow_from_dataframe(dataframe=df_test,\n                                              x_col=\"path\",\n                                              y_col=None,\n                                              batch_size=batch_size,\n                                              seed=42,\n                                              shuffle=False,\n                                              class_mode=None,\n                                              target_size=(512,512))\n    return test_gen","498b2e25":"pred_list = []\n\nfor i in range(1):\n    \n    test_gen = make_test_gen(batch_size = 16)\n    pred_test = my_model.predict(test_gen,  verbose = True)\n    pred_list.append(pred_test.tolist())\n                     \npred_test = np.mean(pred_list, axis=0)\npred_test_labels = np.argmax(pred_test, axis = -1)\nfinal_submission = df_test\n\nfinal_submission['image_id'] = final_submission.path.str.split('\/').str[-1]\nfinal_submission['label'] = pred_test_labels\n\nfinal_csv = final_submission[['image_id', 'label']]\nfinal_csv.head()\nfinal_csv.to_csv('submission.csv', index=False)","d02ae56f":"final_csv.head()","9f7e3e67":"# Training Notebook Can be found here\n[Training Notebook](https:\/\/www.kaggle.com\/shubham219\/using-imagenet-params)"}}