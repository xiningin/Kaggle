{"cell_type":{"b25a4741":"code","dbe7664f":"code","c0e47fb1":"code","b2ed1633":"code","26fa4be3":"code","e8270943":"code","0bcf9b38":"code","5df927ad":"code","9856d41f":"code","6d34243c":"code","4d39e759":"code","01358a6c":"code","547fbe3e":"code","270952a2":"code","93bd0d84":"markdown","ec2e653b":"markdown","d6cd04b7":"markdown","4801935e":"markdown","58f7d185":"markdown","3359532d":"markdown","d8004230":"markdown","1fa35348":"markdown"},"source":{"b25a4741":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dbe7664f":"data = pd.read_csv('..\/input\/fifa19\/data.csv')\ndata.info()","c0e47fb1":"def first_func(*args):\n    \"\"\"returns square root of every item in function's parameter\"\"\"\n    for i in args:\n        print(i**(1\/2))","b2ed1633":"first_func(4,9,16,25,36)","26fa4be3":"var1 = 48\ndef test_function():\n    var1 = 24\n    print('value of var1 (inside the function) : ', var1)\ntest_function()\nprint('value of var1 (outside the function) : ', var1)","e8270943":"# if there is no local variable function uses global variable\nx = 4\ndef test_function01():\n    y = x**x\n    print(y)\ntest_function01()","0bcf9b38":"def one():\n    \"\"\"one function returns square of result of function two\"\"\"\n    def two():\n        x = 10\n        y = 5\n        z = x+y\n        return z\n    return two()**2\nprint(one())","5df927ad":"def def_arg(first='name'):\n    print(first + seco)\ndef_arg('surname')","9856d41f":"def flex_arg(*args):\n    \"\"\"returns lowercase of arguments\"\"\"\n    for i in args:\n        print(lower(i))\nflex_arg('name','surname')","6d34243c":"def new_func(**kwargs):\n    for i,j in kwargs.items():\n        print(i,j)\nnew_func(name = 'george best', team = 'liverpool', year = 1976)","4d39e759":"testo = lambda x : x**(1\/2)\nprint(testo(81))","01358a6c":"my_list = ['numpy', 'pandas', 'matplotlib']\nnew_list = [i[::-1] for i in my_list]\nprint(new_list)","547fbe3e":"data['status'] = ['world class' if i > 92  else  'non' for i in data.Potential]","270952a2":"data.loc[::,['Name','status']]","93bd0d84":"DEFAULT ARGUMENTS","ec2e653b":"FLEXIBLE ARGUMENTS","d6cd04b7":"USER DEFINED FUNCTION","4801935e":"NESTED FUNCTION","58f7d185":"SCOPE OF FUNCTION","3359532d":"### list comprehension","d8004230":"lambda function","1fa35348":"### flexible arguments on dictionaries"}}