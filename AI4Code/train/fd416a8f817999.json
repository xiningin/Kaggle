{"cell_type":{"a9319a69":"code","301ec7fa":"code","e19104cf":"code","12581f79":"code","24a22dfd":"code","4c87e909":"code","da6b8bf7":"code","75720c5c":"code","ca1968fb":"code","913c1445":"code","616f72e8":"code","9ae41605":"code","ef7d1ea4":"code","04ed8bef":"code","6a99cb54":"code","eff30a7d":"code","426441ab":"code","b7a65544":"markdown","43221c14":"markdown","38a6cf03":"markdown","bb4fa7ff":"markdown","bbf27320":"markdown","a72837c6":"markdown","16f1ecca":"markdown","cb42910b":"markdown"},"source":{"a9319a69":"import os, shutil","301ec7fa":"original_dataset_dir = '..\/input\/cats-and-dogs\/train'\nbase_dir = '.\/'","e19104cf":"train_dir = os.path.join(base_dir, 'train')\nos.mkdir(train_dir)\nvalidation_dir = os.path.join(base_dir, 'validation')\nos.mkdir(validation_dir)\ntest_dir = os.path.join(base_dir, 'test')\nos.mkdir(test_dir)\n\ntrain_cats_dir = os.path.join(train_dir, 'cats')\nos.mkdir(train_cats_dir)\ntrain_dogs_dir = os.path.join(train_dir, 'dogs')\nos.mkdir(train_dogs_dir)\n\nvalidation_cats_dir = os.path.join(validation_dir, 'cats')\nos.mkdir(validation_cats_dir)\nvalidation_dogs_dir = os.path.join(validation_dir, 'dogs')\nos.mkdir(validation_dogs_dir)\n\ntest_cats_dir = os.path.join(test_dir, 'cats')\nos.mkdir(test_cats_dir)\ntest_dogs_dir = os.path.join(test_dir, 'dogs')\nos.mkdir(test_dogs_dir)","12581f79":"os.mkdir('.\/models')","24a22dfd":"fnames = ['cat.{}.jpg'.format(i) for i in range(1000)]\n\nfor fname in fnames:\n    src = os.path.join(original_dataset_dir, fname)\n    dst = os.path.join(train_cats_dir, fname)\n    shutil.copyfile(src, dst)","4c87e909":"fnames = ['cat.{}.jpg'.format(i) for i in range(1000, 1500)]\n\nfor fname in fnames:\n    src = os.path.join(original_dataset_dir, fname)\n    dst = os.path.join(validation_cats_dir, fname)\n    shutil.copyfile(src, dst)","da6b8bf7":"fnames = ['cat.{}.jpg'.format(i) for i in range(1500, 2000)]\n\nfor fname in fnames:\n    src = os.path.join(original_dataset_dir, fname)\n    dst = os.path.join(test_cats_dir, fname)\n    shutil.copyfile(src, dst)","75720c5c":"fnames = ['dog.{}.jpg'.format(i) for i in range(1000)]\nfor fname in fnames:\n    src = os.path.join(original_dataset_dir, fname)\n    dst = os.path.join(train_dogs_dir, fname)\n    shutil.copyfile(src, dst)\n    \nfnames = ['dog.{}.jpg'.format(i) for i in range(1000, 1500)]\nfor fname in fnames:\n    src = os.path.join(original_dataset_dir, fname)\n    dst = os.path.join(validation_dogs_dir, fname)\n    shutil.copyfile(src, dst)\n    \nfnames = ['dog.{}.jpg'.format(i) for i in range(1500, 2000)]\nfor fname in fnames:\n    src = os.path.join(original_dataset_dir, fname)\n    dst = os.path.join(test_dogs_dir, fname)\n    shutil.copyfile(src, dst)","ca1968fb":"from keras import layers\nfrom keras import models\nfrom keras import optimizers\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint","913c1445":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(150,150,3)))\nmodel.add(layers.MaxPooling2D(2,2))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D(2,2))\nmodel.add(layers.Conv2D(128, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D(2,2))\nmodel.add(layers.Conv2D(128, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D(2,2))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))","616f72e8":"model.compile(loss='binary_crossentropy',\n             optimizer=optimizers.RMSprop(lr=1e-4),\n             metrics=['acc'])","9ae41605":"train_datagen = ImageDataGenerator(rescale=1.\/225,\n                                  rotation_range=40,\n                                  width_shift_range=0.2,\n                                  height_shift_range=0.2,\n                                  shear_range=0.2,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True,)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","ef7d1ea4":"train_generator = train_datagen.flow_from_directory(train_dir,\n                                                   target_size=(150,150),\n                                                   batch_size=20,\n                                                   class_mode='binary')\n\nvalidation_generator = test_datagen.flow_from_directory(validation_dir,\n                                                       target_size=(150,150),\n                                                       batch_size=20,\n                                                       class_mode='binary')","04ed8bef":"callback_list = [\n    EarlyStopping(monitor='val_acc',patience=2),\n    ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=2),\n    ModelCheckpoint(filepath='.\/models\/{epoch:02d}-{val_acc:.4f}.hdf5', monitor='val_loss',save_best_only=True),\n]","6a99cb54":"history = model.fit_generator(train_generator,\n                             steps_per_epoch=100,\n                             epochs=30,\n                             validation_data=validation_generator,\n                             validation_steps=50)","eff30a7d":"import matplotlib.pyplot as plt","426441ab":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(1, len(acc)+1)\n\nplt.figure()\n\nplt.plot(epochs, acc, 'bo', label='Train Acc')\nplt.plot(epochs, val_acc, 'b', label='Validation Acc')\nplt.title('Training and validation Acc')\nplt.legend()\n\nplt.figure()\n\nplt.plot(epochs, loss, 'bo', label='Train Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('Training and validation Loss')\nplt.legend()\n\nplt.show()","b7a65544":"## 1. Make folder for dividing image file","43221c14":"### This notebook is simple code for cats and dogs data classificatio using keras","38a6cf03":"> Make train, validation, test and models directory","bb4fa7ff":"> Train\/Test image generator\n\n> In case of test generator, apply only rescale 1.\/ 255","bbf27320":"## 2. Make Keras model (Simple CNN)","a72837c6":"> Move image datas from input train directory to output train,validation, test directory\n\n> train images : 1000, validation images : 500, test images : 500","16f1ecca":"> You can set callback_list (EarlyStopping, ReduceLROnPlateau, ModelCheckpoint and etc)","cb42910b":"## 3. Check model acc"}}