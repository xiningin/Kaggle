{"cell_type":{"d0808aef":"code","ce5cfbd4":"code","a9f06a47":"code","1023f94f":"code","5f49a22e":"code","fb3a28c9":"code","7fd52910":"code","03099b48":"code","cb281639":"code","26ea149c":"code","6143a642":"code","eb4a44a1":"code","a07b5cf2":"code","9935256c":"code","6bc7b848":"code","49d621f4":"code","c62ee853":"code","058c44e0":"code","37431941":"code","e059ec92":"code","632fa53e":"code","31660a1d":"code","1b65c041":"code","c8a8e594":"code","ea3f9bda":"code","faceeb39":"code","609569df":"code","0a5cc5eb":"code","3b5565cd":"code","5cf1884e":"code","98a8ebd4":"code","a30a42e9":"code","3e50f60c":"code","cf4899a7":"code","3ec30ed5":"code","e9fd51fe":"code","e58b363f":"code","c37ce187":"code","b87494fe":"code","932ba2aa":"code","69be2095":"code","e8171fc7":"code","6a95a06a":"code","fd1ecfd9":"code","504bd890":"code","81218a6e":"code","fb34f48f":"code","ca0d9eaa":"code","b2a82ac3":"code","13bed75f":"code","66a8a285":"code","eec99d3a":"code","c1532980":"code","b9e19401":"code","252e11ca":"code","81e6d9da":"code","2c37f4b7":"code","da17fa8c":"code","4f989149":"code","19c17c14":"code","1106fb77":"code","fc7555f7":"code","ff3c6c18":"code","0c6e4775":"code","d8cd7378":"code","cebae817":"code","95ec0dc4":"code","01d60d8d":"code","51d71365":"code","4f10d28e":"code","4a328216":"code","fba432d8":"code","c4e22f9d":"code","b5bf1569":"code","a022f5f5":"code","8ea214b8":"code","d76832a9":"code","a0b4ab1c":"code","3d7715ce":"code","ef104b0a":"code","645790d2":"code","24c7bf53":"code","57b47c5b":"code","4fdb14d8":"code","5130469f":"code","7eb5ff37":"code","8a4f765d":"code","8d918fc9":"code","cf2705bb":"code","1573bc13":"code","071cd07a":"code","bd7d4ffb":"code","04e29317":"code","3e246360":"code","c814c21e":"code","5ac5ced9":"code","a5d545f0":"code","45c07d97":"code","52a30cab":"code","a6121731":"code","f2b9ecdb":"code","274d933c":"code","4fc0bd04":"code","4d2c3b0b":"code","f7a4a5ef":"code","1ae7c27c":"code","2d6560e4":"code","916c23cb":"code","4312f747":"code","6c3cd089":"code","7711acbe":"code","95459c51":"code","01615e2a":"code","79012b34":"code","8a111e8e":"code","62fc5c96":"code","19c2e397":"code","98fc07f3":"code","ac6ed30f":"code","fc23c0ef":"code","cb94a56c":"code","59960808":"code","8db6eb3f":"code","ae5c3325":"code","05cb5f54":"code","073ce3c9":"code","224c091c":"code","bd90bbd7":"code","23ddc358":"code","eee076d2":"code","6c299891":"code","397b8fc7":"code","132780fe":"markdown","64f95ba4":"markdown","9aade87a":"markdown","88845fd2":"markdown","b28a8a15":"markdown","f1adf5f7":"markdown","ad470c25":"markdown","df5bf6c3":"markdown","126c2d03":"markdown","82b0a827":"markdown","e00beddc":"markdown","d5c9ac68":"markdown","a119517f":"markdown","dcaed643":"markdown","faeccc9c":"markdown","b6bd6269":"markdown","ba410758":"markdown","4818c628":"markdown","dfedebe9":"markdown","76153a14":"markdown","e429682b":"markdown","29948edf":"markdown","76c7ac62":"markdown","8b50c7a5":"markdown","0284ee97":"markdown","49a2cb2d":"markdown","ea65df0b":"markdown","8d84698a":"markdown","c782f0a1":"markdown","aed92d1c":"markdown","1a057911":"markdown","d545d5f7":"markdown","214a310f":"markdown","fcb8423a":"markdown","3bb58da8":"markdown","229eba64":"markdown","67fb830a":"markdown","92e1a55f":"markdown","81c6beda":"markdown","75326295":"markdown","a0bd5523":"markdown","35e93786":"markdown","bee5343d":"markdown","5b7f52b5":"markdown","1a141baf":"markdown","743a82b8":"markdown","68cd4f27":"markdown","0a69d3b7":"markdown","700655a3":"markdown","a85f4822":"markdown","831bfbeb":"markdown","046785c0":"markdown","9b6d9a17":"markdown","74e1a1b6":"markdown","52fc8148":"markdown","07f14644":"markdown","e5bd5c19":"markdown","a789a36f":"markdown","0823b7cf":"markdown","6061df00":"markdown","21c77d3b":"markdown","282355b2":"markdown","306d9d4f":"markdown","910adbfe":"markdown","7a9c34ec":"markdown","1b529fc7":"markdown","1f566d7f":"markdown","53735076":"markdown","b002c3f3":"markdown","62493427":"markdown","dd23cec7":"markdown","ce9b2286":"markdown","3016de4b":"markdown","3853a244":"markdown","48788124":"markdown","9cecf799":"markdown"},"source":{"d0808aef":"#common\nimport numpy as np\nimport pandas as pd \nimport IPython\nfrom IPython.display import display\nimport warnings\nwarnings.simplefilter('ignore')\n\n#visualisation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport matplotlib.style as style\nfrom matplotlib.colors import ListedColormap\n\nfrom sklearn.metrics import SCORERS\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom sklearn.model_selection import train_test_split, cross_validate, cross_val_score, GridSearchCV, RandomizedSearchCV, KFold\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OrdinalEncoder, LabelEncoder, OneHotEncoder\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.utils import shuffle, resample\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.decomposition import PCA, IncrementalPCA\n\n#regressors\nfrom sklearn.dummy import DummyRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import GradientBoostingRegressor, AdaBoostRegressor, RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import LinearSVR, SVR\nimport xgboost as xgb\nimport lightgbm as lgb\nfrom catboost import CatBoostRegressor, Pool, cv","ce5cfbd4":"train_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsubm = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","a9f06a47":"train_df.info()","1023f94f":"train_df.columns","5f49a22e":"train_df['SalePrice'].describe()","fb3a28c9":"sns.set_style('darkgrid')\n\nfig,ax = plt.subplots(1,1,figsize=(8,6))\nsns.distplot(train_df['SalePrice'], ax=ax)\n\nax.set_xlabel('House price, USD')\nplt.suptitle('Price distribution', size=15)\nplt.show()","7fd52910":"len(train_df.query('SalePrice > 500000'))","03099b48":"len(train_df), len(test_df)","cb281639":"train_df.isna().sum().sort_values(ascending=False).head(10)","26ea149c":"test_df.isna().sum().sort_values(ascending=False).head(10)","6143a642":"train_df = train_df.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence'], axis=1)\ntest_df = test_df.drop(['PoolQC', 'MiscFeature', 'Alley', 'Fence'], axis=1)","eb4a44a1":"temp = train_df.isna().sum().sort_values()\ntemp[temp>=1]","a07b5cf2":"temp = test_df.isna().sum().sort_values()\ntemp[temp>=1]","9935256c":"full_df = pd.concat([train_df] + [test_df]).reset_index(drop=True)","6bc7b848":"full_df","49d621f4":"train_ind = train_df['Id']\ntest_ind = test_df['Id']","c62ee853":"test_ind","058c44e0":"full_df.head()","37431941":"temp = full_df.isna().sum().sort_values()\ntemp[temp>=1]","e059ec92":"full_df['FireplaceQu'] = full_df['FireplaceQu'].fillna('None')\nfull_df['GarageQual'] = full_df['GarageQual'].fillna('None')\nfull_df['GarageFinish'] = full_df['GarageFinish'].fillna('None')\nfull_df['GarageCond'] = full_df['GarageCond'].fillna('None')\nfull_df['GarageType'] = full_df['GarageType'].fillna('None')\nfull_df['BsmtExposure'] = full_df['BsmtExposure'].fillna('None')\nfull_df['BsmtQual'] = full_df['BsmtQual'].fillna('None')\nfull_df['BsmtCond'] = full_df['BsmtCond'].fillna('None')\nfull_df['BsmtFinType2'] = full_df['BsmtFinType2'].fillna('None')\nfull_df['BsmtFinType1'] = full_df['BsmtFinType1'].fillna('None')\nfull_df['MasVnrType'] = full_df['MasVnrType'].fillna('None')\nfull_df['BsmtFinType2'] = full_df['BsmtFinType2'].fillna('None')","632fa53e":"full_df.isna().sum().sort_values(ascending=False).head(20)","31660a1d":"temp = full_df[['LotFrontage','LotArea']]\n\nplt.figure(figsize=(10,6))\nsns.scatterplot(x=temp['LotFrontage'], y=temp['LotArea'])\nplt.title('Correlations between Lot Area and Lot Frontage', size=15);\n\nprint(temp.corr())","1b65c041":"full_df['LotFrontage'] = full_df['LotFrontage'].fillna(np.sqrt(full_df['LotArea']))","c8a8e594":"temp = full_df[['LotFrontage','LotArea']]\n\nplt.figure(figsize=(10,6))\nsns.scatterplot(x=temp['LotFrontage'], y=temp['LotArea'])\nplt.title('Correlations between Lot Area and Lot Frontage with filled missing values', size=15);\n\nprint(temp.corr())","ea3f9bda":"temp_year = full_df[['GarageYrBlt', 'YearBuilt']]\n\ntemp_year","faceeb39":"plt.figure(figsize=(10,7))\nsns.scatterplot(temp_year['YearBuilt'], temp_year['GarageYrBlt'])\nplt.title('Were houses and garages built at the same time?', size=15);","609569df":"full_df.query('GarageYrBlt>2100')['GarageYrBlt']","0a5cc5eb":"full_df.loc[full_df['GarageYrBlt'] == 2207,'GarageYrBlt'] = 2007","3b5565cd":"full_df['GarageYrBlt'] = full_df['GarageYrBlt'].fillna(full_df['YearBuilt'])","5cf1884e":"full_df.isna().sum().sort_values(ascending=False).head(10)","98a8ebd4":"full_df['GarageArea'] = full_df.groupby('GarageType')['GarageArea'].transform(lambda x: x.fillna(value=x.median()))","a30a42e9":"full_df['GarageCars'].corr(full_df['GarageArea'])","3e50f60c":"full_df.loc[full_df['GarageCars'].isna()]['GarageArea']","cf4899a7":"full_df.loc[full_df['GarageArea'] == 400]['GarageCars'].value_counts()","3ec30ed5":"full_df['GarageCars'] = full_df['GarageCars'].fillna(2)","e9fd51fe":"full_df.loc[full_df['MasVnrArea'].isna()][['MasVnrArea', 'MasVnrType']]","e58b363f":"full_df['MasVnrArea'] = full_df['MasVnrArea'].fillna(0)","c37ce187":"full_df.loc[full_df['MSZoning'].isna()]","b87494fe":"full_df['MSZoning'].value_counts()","932ba2aa":"full_df['MSZoning'] = full_df['MSZoning'].fillna(value='RL')","69be2095":"full_df.loc[full_df['Utilities'].isna()]['YearBuilt'] ","e8171fc7":"print(full_df.loc[full_df['YearBuilt'] == 1910]['Utilities'].value_counts())\nprint(full_df.loc[full_df['YearBuilt'] == 1952]['Utilities'].value_counts())","6a95a06a":"full_df['Utilities'] = full_df['Utilities'].fillna(value='AllPub')","fd1ecfd9":"full_df['BsmtHalfBath'].value_counts()","504bd890":"full_df['BsmtFullBath'].value_counts()","81218a6e":"full_df.query('BsmtHalfBath==\"nan\" or BsmtFullBath==\"nan\"')[['BsmtHalfBath', 'BsmtFullBath', 'YearBuilt']]","fb34f48f":"full_df.query('YearBuilt == 1959')['BsmtHalfBath'].value_counts()\n#full_df.query('YearBuilt == 1946')['BsmtHalfBath']","ca0d9eaa":"full_df[['BsmtHalfBath', 'BsmtFullBath']] = full_df[['BsmtHalfBath', 'BsmtFullBath']].fillna(value=0)","b2a82ac3":"full_df.Functional.value_counts()","13bed75f":"full_df['Functional'] = full_df['Functional'].fillna('Typ')","66a8a285":"full_df.isna().sum().sort_values(ascending=False).head(10)","eec99d3a":"full_df['BsmtFinSF2'].value_counts()","c1532980":"full_df['BsmtFinSF2'] = full_df['BsmtFinSF2'].fillna(0)","b9e19401":"full_df.loc[full_df['BsmtFinSF1'].isna()]['BsmtFinType1']","252e11ca":"full_df['BsmtFinSF1'] = full_df['BsmtFinSF1'].fillna(0)","81e6d9da":"full_df.loc[full_df['TotalBsmtSF'].isna(), 'BsmtFinSF1']","2c37f4b7":"full_df[['TotalBsmtSF', 'BsmtFinSF1']]","da17fa8c":"full_df['TotalBsmtSF'].corr(full_df['SalePrice'])","4f989149":"full_df.isna().sum().sort_values(ascending=False).head(10)","19c17c14":"full_df.loc[full_df['TotalBsmtSF'].isna()]['OverallQual']","1106fb77":"full_df.loc[full_df['OverallQual']==4]['BsmtUnfSF'].value_counts()","fc7555f7":"full_df[['TotalBsmtSF','BsmtUnfSF']] = full_df[['TotalBsmtSF','BsmtUnfSF']].fillna(0)","ff3c6c18":"full_df['SaleType'].value_counts()","0c6e4775":"full_df['SaleType'] = full_df['SaleType'].fillna('WD')","d8cd7378":"full_df.loc[full_df['Exterior2nd'].isna()][['Exterior2nd','Exterior1st','YearBuilt']]","cebae817":"full_df.loc[full_df['YearBuilt'] == 1940][['Exterior1st', 'Exterior2nd', 'MSZoning']]","95ec0dc4":"full_df.loc[full_df['YearBuilt'] == 1940]['Exterior1st'].value_counts()","01d60d8d":"full_df.loc[full_df['YearBuilt'] == 1940]['Exterior2nd'].value_counts()","51d71365":"full_df[['Exterior1st','Exterior2nd']] = full_df[['Exterior1st','Exterior2nd']].fillna('MetalSd')","4f10d28e":"full_df.loc[full_df['Electrical'].isna()]['YearBuilt']","4a328216":"full_df.loc[full_df['YearBuilt'] == 2006]['Electrical'].value_counts()","fba432d8":"full_df['Electrical'] = full_df['Electrical'].fillna(value='SBrkr')","c4e22f9d":"full_df.loc[full_df['KitchenQual'].isna()]['YearBuilt']","b5bf1569":"full_df.loc[full_df['YearBuilt']==1917][['KitchenQual', 'OverallCond']]","a022f5f5":"full_df.loc[full_df['OverallCond']==3]['KitchenQual'].value_counts()","8ea214b8":"full_df['KitchenQual'] = full_df['KitchenQual'].fillna(value='TA')","d76832a9":"full_df.isna().sum().sort_values()","a0b4ab1c":"full_df_ref_man = full_df[[\n                           'Street',\n                           'Exterior1st',\n                           'KitchenQual',\n                           'Heating',\n    \n                           'MSZoning',\n                           'YearBuilt',\n                           'Neighborhood',\n                           'Condition1',\n                           'BldgType',\n                           'HouseStyle',\n                           'OverallQual',\n                           'OverallCond',\n                           'ExterQual',\n                           'ExterCond', \n                           'BsmtQual',\n                           'BsmtCond',\n                           'CentralAir',\n                           'HeatingQC',\n                           'Electrical',\n                           '1stFlrSF',\n                           '2ndFlrSF',\n                           'GrLivArea',\n                           'FullBath',\n                           'BedroomAbvGr',\n                           'KitchenAbvGr',\n                           'Functional',\n                           'GarageType',\n                           'GarageQual',\n                           'OpenPorchSF',\n                           'PoolArea',\n                           'SaleType',\n                           'SaleCondition',\n                           'SalePrice'\n                          ]]","3d7715ce":"full_df_ver2 = full_df[[\n                            ### This features were added during the last attempt ###\n                           'LotFrontage',\n                           'LotArea',\n                           'Condition2',\n                           'YearRemodAdd',\n                           'MasVnrArea',\n                           'BsmtFinType1',\n                           'TotalBsmtSF',\n                           'TotRmsAbvGrd',\n                           'Fireplaces',\n                           'GarageYrBlt',\n                           'GarageCars',\n    \n                            ### Current best result was performed with these features ### \n                           'Street',\n                           'Exterior1st',\n                           'KitchenQual',\n                           'Heating',\n                            \n                            ### I also removed some features from the first list ###\n                           'MSZoning',\n                           'YearBuilt',\n                           'Neighborhood',\n                           'Condition1',\n                           'BldgType',\n                           'HouseStyle',\n                           'OverallQual',\n                           'OverallCond',\n                           'ExterQual',\n                           'ExterCond', \n                           'BsmtQual',\n                           'BsmtCond',\n                           'CentralAir',\n                           'HeatingQC',\n                           'Electrical',\n                           '1stFlrSF',\n                           '2ndFlrSF',\n                           'GrLivArea',\n                           #'FullBath',\n                           #'BedroomAbvGr',\n                           #'KitchenAbvGr',\n                           'Functional',\n                           'GarageType',\n                           #'GarageQual',\n                           #'OpenPorchSF',\n                           #'PoolArea',\n                           'SaleType',\n                           'SaleCondition',\n                           'SalePrice'\n                          ]]","ef104b0a":"full_df_ver5 = full_df[[\n                            ### This features were added during the last attempt ###\n                           'LotFrontage',\n                           'LotArea',\n                           'Condition2',\n                           'YearRemodAdd',\n                           'MasVnrArea',\n                           'BsmtFinType1',\n                           'TotalBsmtSF',\n                           'TotRmsAbvGrd',\n                           'Fireplaces',\n                           'GarageYrBlt',\n                           'GarageCars',\n    \n                            ### Current best result was performed with these features ### \n                           'Street',\n                           'Exterior1st',\n                           'KitchenQual',\n                           'Heating',\n                            \n                            ### I also removed some features from the first list ###\n                           'MSZoning',\n                           'YearBuilt',\n                           'Neighborhood',\n                           'Condition1',\n                           'BldgType',\n                           'HouseStyle',\n                           'OverallQual',\n                           'OverallCond',\n                           'ExterQual',\n                           'ExterCond', \n                           'BsmtQual',\n                           'BsmtCond',\n                           'CentralAir',\n                           'HeatingQC',\n                           'Electrical',\n                           '1stFlrSF',\n                           '2ndFlrSF',\n                           'GrLivArea',\n                           'FullBath',\n                           'BedroomAbvGr',\n                           'KitchenAbvGr',\n                           'Functional',\n                           'GarageType',\n                           'GarageQual',\n                           'OpenPorchSF',\n                           'PoolArea',\n                           'SaleType',\n                           'SaleCondition',\n                           'SalePrice'\n                          ]]","645790d2":"full_df_ref_man.index = full_df[\"Id\"]\nfull_df_ver2.index = full_df['Id']\nfull_df_ver5.index = full_df['Id']","24c7bf53":"full_df_ver3 = full_df_ver2.copy()","57b47c5b":"full_df_ver3['YearBuilt'].corr(full_df_ver3['SalePrice'])","4fdb14d8":"temp = full_df_ver3[['YearBuilt','SalePrice']].groupby('YearBuilt', as_index=False).median()\n\nsns.set_style('whitegrid')\nfig, axes = plt.subplots(2,1, sharex=True, figsize=(10,12))\n\nsns.distplot(full_df_ver3['YearBuilt'], kde=False, ax=axes[0], color='black')\nsns.lineplot(x=temp['YearBuilt'], y=temp['SalePrice'], ax=axes[1], color='dimgray')\n\naxes[0].set_xlabel('')\naxes[1].set_xlabel('Construction date', size=12)\naxes[1].set_ylabel('Median price', size=12)\naxes[0].set_ylabel('Saturation', size=12)\n\nplt.suptitle('Year of construction and Price distributions', size=18, y=(0.91));","5130469f":"def yearblt_bin(row):\n    \n    row = row['YearBuilt']\n    \n    if row <=1900 :\n        return 'very old'\n    if 1900 < row <= 1930:\n        return 'old'\n    if 1930 < row <= 1980:\n        return 'moderate'\n    else:\n        return 'new'\n    \n\nfull_df_ver3['YearBins'] = full_df_ver3.apply(yearblt_bin, axis=1)","7eb5ff37":"full_df_ver3['YearBins']","8a4f765d":"plt.figure(figsize=(12,4))\nsns.distplot(full_df_ver3['GrLivArea'], bins=50, color='black', kde=False);","8d918fc9":"def area_bin(row):\n    \n    row = row['GrLivArea']\n    \n    if row <= 800 :\n        return 'small'\n    if 800 < row <= 1700:\n        return 'medium'\n    if 1700 < row <= 2900:\n        return 'large'\n    else:\n        return 'extra_large'\n    \n\nfull_df_ver3['AreaBins'] = full_df_ver3.apply(area_bin, axis=1)","cf2705bb":"full_df_ver3['AreaBins'].value_counts()","1573bc13":"full_df_ver3 = full_df_ver3.drop(['GrLivArea', 'YearBuilt'], axis=1)","071cd07a":"full_df_pol = full_df_ver2.copy()\n#full_df_pol = full_df_pol.drop(['Condition2','BsmtFinType1','SaleType'], axis=1)\n\nfull_df_pol['OverallQual*2'] = full_df_pol['OverallQual']*2\n#full_df_pol['GrLivArea*2'] = full_df_pol['GrLivArea']*2\n#full_df_pol['RoomArea'] = full_df_pol['GrLivArea'] \/ full_df_pol['TotRmsAbvGrd'] \n","bd7d4ffb":"full_df_upd_0 = pd.get_dummies(full_df_ref_man, drop_first=True)\nfull_df_enc_2 = pd.get_dummies(full_df_ver2, drop_first=True)\nfull_df_pol_2 = pd.get_dummies(full_df_pol, drop_first=True)\nfull_df_upd_3 = pd.get_dummies(full_df_ver3, drop_first=True)\nfull_df_ver5 = pd.get_dummies(full_df_ver5, drop_first=True)","04e29317":"enc = OrdinalEncoder()","3e246360":"full_df_ver2.columns","c814c21e":"full_df_ver3.columns","5ac5ced9":"cat_features = ['LotFrontage', 'Condition2',\n       'BsmtFinType1', 'Fireplaces', 'SaleType', 'SaleCondition', 'Street',\n       'Exterior1st', 'KitchenQual', 'Heating', 'MSZoning', \n       'Neighborhood', 'Condition1', 'BldgType', 'HouseStyle', 'OverallQual',\n       'OverallCond', 'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond',\n       'CentralAir', 'HeatingQC', 'Electrical', 'Functional', 'GarageType', 'SaleCondition']\n\ncat_features_3 = ['LotFrontage', 'Condition2',\n       'BsmtFinType1', 'Fireplaces', 'SaleType', 'SaleCondition', 'Street',\n       'Exterior1st', 'KitchenQual', 'Heating', 'MSZoning', \n       'Neighborhood', 'Condition1', 'BldgType', 'HouseStyle', 'OverallQual',\n       'OverallCond', 'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond',\n       'CentralAir', 'HeatingQC', 'Electrical', 'Functional', 'GarageType', 'SaleCondition', 'YearBins',\n       'AreaBins']","a5d545f0":"full_df_ver2_cat = full_df_ver2.copy()\nfull_df_ver2_cat[cat_features] = enc.fit_transform(full_df_ver2_cat[cat_features]).astype('int')\n\nfull_df_ver3_cat = full_df_ver3.copy()\nfull_df_ver3_cat[cat_features_3] = enc.fit_transform(full_df_ver3_cat[cat_features_3]).astype('int')","45c07d97":"RND_ST = 42","52a30cab":"X_train_2 = full_df_enc_2.query('index in @train_ind').drop(['SalePrice'], axis=1).reset_index(drop=True)\nX_test_2 = full_df_enc_2.query('index in @test_ind').drop(['SalePrice'], axis=1).reset_index(drop=True)\n\nX_train_cat = full_df_ver2_cat.query('index in @train_ind').drop(['SalePrice'], axis=1).reset_index(drop=True).astype('int')\nX_test_cat = full_df_ver2_cat.query('index in @test_ind').drop(['SalePrice'], axis=1).reset_index(drop=True).astype('int')\n\nX_train_3 = full_df_upd_3.query('index in @train_ind').drop(['SalePrice'], axis=1).reset_index(drop=True).astype('int')\nX_test_3 = full_df_upd_3.query('index in @test_ind').drop(['SalePrice'], axis=1).reset_index(drop=True).astype('int')\n\nX_train_3_cat = full_df_ver3_cat.query('index in @train_ind').drop(['SalePrice'], axis=1).reset_index(drop=True).astype('int')\nX_test_3_cat = full_df_ver3_cat.query('index in @test_ind').drop(['SalePrice'], axis=1).reset_index(drop=True).astype('int')\n\ny_train = full_df_upd_0.query('index in @train_ind')['SalePrice'].reset_index(drop=True)\n\n\n### Validation subsets\n\n#X_train_sub, X_test_sub, y_train_sub, y_test_sub = train_test_split(X_train_0, y_train, test_size=0.2, random_state=RND_ST) \n\nX_train_sub_2, X_valid_sub_2, y_train_sub_2, y_valid_sub_2 = train_test_split(X_train_2, y_train, test_size=0.2, random_state=RND_ST) \n\n\nX_train_sub_c, X_valid_sub_c, y_train_sub_c, y_valid_sub_c = train_test_split(X_train_cat, y_train, test_size=0.2, random_state=RND_ST) \nX_train_sub_3, X_valid_sub_3, y_train_sub_3, y_valid_sub_3 = train_test_split(X_train_3, y_train, test_size=0.2, random_state=RND_ST) \n\n#X_train_sub_3, X_valid_sub_3, y_train_sub_3, y_valid_sub_3 = train_test_split(X_train_3, y_train, test_size=0.2, random_state=RND_ST) \nX_train_sub_3c, X_valid_sub_3c, y_train_sub_3c, y_valid_sub_3c = train_test_split(X_train_3_cat, y_train, test_size=0.2, random_state=RND_ST) ","a6121731":"X_train_5 = full_df_ver5.query('index in @train_ind').drop(['SalePrice'], axis=1).reset_index(drop=True)\nX_test_5 = full_df_ver5.query('index in @test_ind').drop(['SalePrice'], axis=1).reset_index(drop=True)\n\nX_train_sub_5, X_valid_sub_5, y_train_sub_5, y_valid_sub_5 = train_test_split(X_train_5, y_train, test_size=0.2, random_state=RND_ST) ","f2b9ecdb":"def mae(model, X_train, X_test, y_train, y_test):\n    \n    model.fit(X_train, y_train)\n    y_train_pred = model.predict(X_train)\n    y_test_pred = model.predict(X_test)\n    \n    print('MAE train = ', mean_absolute_error(y_train, y_train_pred))\n    print('MAE test = ', mean_absolute_error(y_test, y_test_pred))","274d933c":"RND_ST = 42","4fc0bd04":"### Random Forest Regressor ###\n\nrfr = RandomForestRegressor(n_jobs=-1, random_state=RND_ST)\n\nparams_rfr = dict(n_estimators=range(10,500,10),\n                  max_features=range(5, 30),\n                  max_leaf_nodes = [1,5,10,20])\n\n\n### Gradient Boosting Regressor ###\n\ngbr = GradientBoostingRegressor(random_state=RND_ST)\n\nparams_gbr = dict(n_estimators=range(200,1000,5),\n                  max_features=range(5, 40),\n                  max_depth=[0,2,3,4],\n                  learning_rate = [0.01, 0.1, 0.5, 1],\n                  )\n\nparams_gbr_nest = dict(n_estimators=range(200,900,5))\n\nparams_gbr_other = dict(max_features=range(10, 40),\n                        max_depth=[2,3,4],\n                        learning_rate = [0.1, 0.3, 1]\n                        #max_features = ['auto', 'sqrt', 'log2']\n                       )\n\n\n### CatBoost ###\n\ncatboost_train = Pool(X_train_sub_c, y_train_sub_c, cat_features=cat_features)\ncatboost_train_full = Pool(X_train_cat, y_train, cat_features=cat_features)\n\ncatboost_train_3 = Pool(X_train_sub_3c, y_train_sub_3c, cat_features=cat_features_3)\ncatboost_train_full_3 = Pool(X_train_3_cat, y_train, cat_features=cat_features_3)","4d2c3b0b":"catboost_1 = CatBoostRegressor(\n                          iterations=720, \n                          depth=4, \n                          learning_rate=0.09, \n                          loss_function='MAE', \n                          subsample=0.8,\n                          grow_policy='Depthwise',\n                          l2_leaf_reg=2,\n                          rsm=0.9,\n                          verbose=0, \n                          random_seed=RND_ST\n    )","f7a4a5ef":"catboost_1.fit(X_train_sub_c, y_train_sub_c)\n\ncat_y_tr = catboost_1.predict(X_train_sub_c)\ncat_y_val = catboost_1.predict(X_valid_sub_c)\n\nprint('Train mae = ', mean_absolute_error(y_train_sub_c, cat_y_tr))\nprint('Valid mae = ', mean_absolute_error(y_valid_sub_c, cat_y_val))","1ae7c27c":"### CatBoost best\n### Train mae =  6562.590378143246\n### Valid mae =  16061.543780248663\n","2d6560e4":"X_train_stack_1, X_train_stack_2, y_train_stack_1, y_train_stack_2 = train_test_split(\n                                                                        X_train_cat, y_train, test_size=0.5, random_state=RND_ST)","916c23cb":"lr = LinearRegression(n_jobs=-1) \n\nrfr_1 = RandomForestRegressor(n_estimators=100, max_depth=3, min_samples_split=3, n_jobs=-1, random_state=RND_ST)\n\nrfr_2 = RandomForestRegressor(n_estimators=200, max_depth=4, min_samples_split=4, n_jobs=-1, random_state=RND_ST)\n\nrfr_3 = RandomForestRegressor(n_estimators=300, max_depth=5, min_samples_split=5, n_jobs=-1, random_state=RND_ST)\n\ngbr_1 = GradientBoostingRegressor(n_estimators=300, max_depth=3, learning_rate=0.1, subsample=0.9, random_state=RND_ST)\n\ngbr_2 = GradientBoostingRegressor(n_estimators=400, max_depth=4, learning_rate=0.09, subsample=0.8, random_state=RND_ST)","4312f747":"models = [lr, rfr_1, rfr_2, rfr_3, gbr_1, gbr_2]\nnames = ['lr', 'rfr_1', 'rfr_2', 'rfr_3', 'gbr_1', 'gbr_2']","6c3cd089":"for model in models:\n    model.fit(X_train_stack_1, y_train_stack_1)","7711acbe":"X_train_stack_2_upd = X_train_stack_2.copy()","95459c51":"def pred_stack(model, feat, df_upd, name):\n    \n    pred = pd.Series(model.predict(feat).astype('int'), name=name, index=feat.index)\n    \n    df_upd = df_upd.join(pred)\n    \n    return df_upd","01615e2a":"for model, name in zip(models, names):\n    \n    X_train_stack_2_upd = pred_stack(model, X_train_stack_2, X_train_stack_2_upd, name)","79012b34":"X_train_stack_2_upd","8a111e8e":"X_test_upd = X_test_cat.copy()\n\nfor model, name in zip(models, names):\n    \n    X_test_upd = pred_stack(model, X_test_cat, X_test_upd, name)","62fc5c96":"X_test_upd","19c2e397":"catboost_stack = CatBoostRegressor(iterations=700, \n                          depth=4, \n                          learning_rate=0.09, \n                          loss_function='MAE', \n                          subsample=0.8,\n                          grow_policy='Depthwise',\n                          l2_leaf_reg=2,\n                          rsm=0.9,\n                          verbose=0, \n                          random_seed=RND_ST)","98fc07f3":"X_train_stack_2_upd","ac6ed30f":"catboost_stack.fit(X_train_stack_2_upd, y_train_stack_2)","fc23c0ef":"pred = catboost_stack.predict(X_train_stack_2_upd)\n\nmean_absolute_error(y_train_stack_2, pred)","cb94a56c":"pool = Pool(X_train_stack_2_upd, y_train_stack_2)","59960808":"params = dict(iterations=500, \n                          depth=7, \n                          learning_rate=0.09, \n                          loss_function='MAE', \n                          subsample=0.8,\n                          grow_policy='Depthwise',\n                          l2_leaf_reg=2,\n                          rsm=0.9,\n                          verbose=0, \n                          #early_stopping_rounds=20,\n                          random_seed=RND_ST)\n\nscores = cv(pool,\n            params,\n            fold_count=2, \n            plot=\"True\")","8db6eb3f":"catboost_stack = CatBoostRegressor(iterations=700, \n                          depth=4, \n                          learning_rate=0.09, \n                          loss_function='MAE', \n                          subsample=0.8,\n                          grow_policy='Depthwise',\n                          l2_leaf_reg=2,\n                          rsm=0.9,\n                          verbose=0, \n                          random_seed=RND_ST)","ae5c3325":"imp = catboost_stack.feature_importances_\nnames = X_train_stack_2_upd.columns.tolist()\n\nimportant = pd.DataFrame(columns=['imp', 'names'])\n\nimportant['imp'] = imp\nimportant['names'] = names\n\nimportant = important.sort_values(by='imp', ascending=False).reset_index(drop=True)\n\nimportant","05cb5f54":"upd_columns = important['names'][:25]","073ce3c9":"X_train_stack_2_upd_cols = X_train_stack_2_upd[upd_columns]\nX_test_upd_cols = X_test_upd[upd_columns]","224c091c":"catboost_stack.fit(X_train_stack_2_upd_cols, y_train_stack_2)","bd90bbd7":"pred = catboost_stack.predict(X_train_stack_2_upd)\n\nmean_absolute_error(y_train_stack_2, pred)","23ddc358":"def prediction(model, feat_tr, feat_test, targ_tr):\n    \n    model.fit(feat_tr, targ_tr)\n    pred_final = pd.DataFrame((model.predict(feat_test)), columns=['SalePrice'])\n    \n    return(pred_final)","eee076d2":"pred = np.around(prediction(catboost_stack, X_train_stack_2_upd_cols, X_test_upd_cols, y_train_stack_2))\n\nsubmission = pd.DataFrame(subm['Id'])\n\nsubmission = submission.join(pred)\n\nsubmission.to_csv('\/kaggle\/working\/cb_new_08.csv', index=False)","6c299891":"submission.head()","397b8fc7":"submission.head()","132780fe":"---\n\n### In this version we will try to implement CatBoost.\n","64f95ba4":"Garage cars and Garrage area, next, please.","9aade87a":"##### Utilities\n\nWhat about missing availible utilities? Let's check the year of the build.","88845fd2":"Let's pretend, there are no bath at these houses.","b28a8a15":"Stacking on test subset.","f1adf5f7":"### Feature selection  \n\nFor the first try, let's choose important features manually.","ad470c25":"##### Veneer area","df5bf6c3":"Good, only price values, we must predict, are still missing.","126c2d03":"## Feature importances\n\nRange the importance of features by catboost.","82b0a827":"## Stacking  \n\nTry to apply a basic stacking method. \n\nWe will split a train features on tho equal subsets. Fit the basic models on the first subset. Then predict the target ON THE SECOND train subset and join the predictions TO THE second subset. Repeat this process. prediction and joining, with the test subset.  \nIt looks like advanced feature engeneering.  \n\nThen we will built the meta-regressor, fit it on the updated second train dataset and predict the sale price on the updated test dataset. \n\nFor more information about Stacking, please [check this article](https:\/\/machinelearningmastery.com\/stacking-ensemble-machine-learning-with-python\/).","e00beddc":"Set a list of basic regressors.","d5c9ac68":"Next, please.   \n##### Functional","a119517f":"Missing sale type","dcaed643":"Mean price is around 180k USD, the most expensive house is for 775k USD and the cheapest is only for 34,9k USD. 50 quantile lies at 163k USD.  \n\nDraw a distribution plot of prices.","faeccc9c":"##### Most common categorial features\n\nHere we have some categorical features (such as FireplaceQu and GarageQual for example), some numeric features (LotFrontage and MasVnrArea). \nFirst, we figure out with categorical ones.","b6bd6269":"Nope. We can see, that lot of garages were attached to old houses few years later from the building date.  \nAfter 1980, almost all new houses have a garage by default.  \nLook, somebody want to build a garage after 2200! We must to change it!\n","ba410758":"Ok, we will replace missing Veneer area with O.","4818c628":"#### Living Area bins","dfedebe9":"Four features (Pool quality, Misc Feature, Type of alley access and Fence quality) have more than 80% of missing values. It seems like these features don't affect the final sale price, and we may easily drop them from both datasets.","76153a14":"Yes!","e429682b":"We will fill missing LotFrontage values with square root of LotArea.","29948edf":"#### Pre-analysis.  \n\nFirst, lets check the SalePrice column to clearly understand the distibution of prices.","76c7ac62":"Looking for the best hyperparameters.","8b50c7a5":"Keep in mind, that we dont need to fill SalePrice column! \n\n---\n\n##### LotFrontage\nLinear feet of street connected to property. What if this feature depends of LotArea (Lot size in square feet).","0284ee97":"mod = catboost_1.fit(catboost_train_full_pol)\n\npred_fin = pd.DataFrame(np.around(mod.predict(X_test_pol_cat)), columns=['SalePrice'])\n\n\nsubmission = pd.DataFrame(subm['Id'])\n\nsubmission = submission.join(pred_fin)\n\nsubmission.to_csv('\/kaggle\/working\/catboost_l2.csv', index=False)","49a2cb2d":"Ok, we just fill the last missing value with 'TA'.","ea65df0b":"#### Polynomial features  \n\nIt's time to add some polynoms with high correlations to the target values.","8d84698a":"Don't forget to save the indexes of primary datasets.","c782f0a1":"We will divide all dates into four bins (<1900, 1900-1930, 1930-1980, 1980-2010).","aed92d1c":"### Features engeneering \n\nLet's add mode features, engeneered from existed ones.","1a057911":"There is no other options.","d545d5f7":"What kind of utilities was available at those times?","214a310f":"## Warning\n\nThis approach doesn't work!   \nDeclined.\n\n---\n","fcb8423a":"Remove the features, which give us less then 0.3% impact.","3bb58da8":"Create a meta-regressor. We will implement a Catboost regressor.","229eba64":"By the way, let's fill all the missing years with the date of the houses were built.","67fb830a":"Square feets","92e1a55f":"Divide full dataset into train and test subsets again. Also pick out the target values ('SalePrice')","81c6beda":"##### Time to bath (not bass)","75326295":"#### Split years of \u0441onstruction into bins.","a0bd5523":"Stacking on training set.","35e93786":"#### Best models  \n\ngbr_new = GradientBoostingRegressor(n_estimators=265, max_depth=4, max_features=28, random_state=RND_ST)    \n\ngbr_new_2 = GradientBoostingRegressor(n_estimators=385, max_depth=3, max_features=24, random_state=RND_ST) \n\ncatboost_1 = CatBoostRegressor(\n                          iterations=700, \n                          depth=4, \n                          learning_rate=0.09, \n                          loss_function='MAE', \n                          subsample=0.8,\n                          grow_policy='Depthwise',\n                          l2_leaf_reg=2,\n                          rsm=0.9,\n                          verbose=0, \n                          random_seed=RND_ST\n    )\n","bee5343d":"Checking the full dataset.","5b7f52b5":"### Make a prediction, create the submission file.","1a141baf":"Let's combine two datasets and work with missing values faster.","743a82b8":"Split train set into two subsets.","68cd4f27":"The very first problem is that we have 80 features for prediction. And we have to pick only the important ones.   \nThe second question we must figure out are what to do with lots of missing values.  \nAnd finally, we must turn all the 'sting' objects to numeric values.  \n\nOk, let's jump into it.","0a69d3b7":"#### Prediction for sklearn models","700655a3":"##### Finaly, time for the most important area into entire house!","a85f4822":"Also, split the distribution into four bins: 0-800, 800-1700, 1700-2900, 2900-max.","831bfbeb":"What a beautiful exterior!","046785c0":"## Hello, my Kaggle friends.   \nToday I start a new competition with a prediction of house prices.   \nIt seems like this task will be more difficult, than a computing of Titanic passenger survival probability.  \nHowever, let's start with import libs and data.","9b6d9a17":"##### Air is electrising!","74e1a1b6":"##### We need more different zones, Milord","52fc8148":"#### Features encoding \n\nUsing dummy encoding, we will replace all categotial features with 1 and 0 values.","07f14644":"This garage has a vast area, and we may predict it can accommodate...","e5bd5c19":"This house was built in 1940. Which type of material was more popular at that time?","a789a36f":"We just fill missing Zoning values with 'RL'.","0823b7cf":"#### Checking the datasets","6061df00":"Comfort houses, by the way. So, fill NANs with 'AllPub' values.","21c77d3b":"...two cars.","282355b2":"Ah, what a pity mistake.","306d9d4f":"### Preprocessing","910adbfe":"#### CatBoost","7a9c34ec":"Fit the basic models.","1b529fc7":"Also, for some gradient boosting machines, let's encode categorial string values to integer ones.","1f566d7f":"Only nine houses have a price more than 500000 $, seems like we can drop them as outliers in the future.","53735076":"Make a Catboost cross-validation.","b002c3f3":"I think there should be a strong correlation between Garage Area and number of places for cars.","62493427":"We can observe a clear line of new meanings. Let's see if it will affect the predictions in the future. \n\n---\n\n##### Garages and cars\n\nWhat year garages were built?","dd23cec7":"This house is almost new.","ce9b2286":"As we mentioned above, there are a lot of missing values in train and test datasets. Using the description text file, we will gently replace all the \"NAN\"s with proper values.","3016de4b":"#### Prediction for boosting models","3853a244":"## Scoreboard \n\n0.12625 - Rank 1270 - catboost_stack, X_features_stack_2_upd,  \n0.12845 - Rank 1638 - catboost_l2, X_train_cat  \n0.12868 - Rank 1645 - catboost, X_train_cat  \n0.12886 - Rank 1654 - catboost, X_train_cat  \n0.12910 - Rank 1683 - gbr_new_2, X_train_2  \n0.13866 - Rank 2403 - gbr_new, X_train_0 (more_features)  \n0.13934 - Rank 2433 - catboost, X_train_c  \n0.14346 - Rank 2755 - model_gbr_ with updated params, X_train_0 + Year feature.  \n0.14631 - Rank 2922 - model_gbr with updated params, X_train_0  \n0.15217 - Rank 3330 - model_gbr, X_train_0  \n0.20628 - Rank 4340 - very first try, with no features engeneering and just Random Forest Regressor","48788124":"As we can see, materials for both exteriors are the same as usual. Wood and metal were the most common materials.\n\nLet's pretend, in this case, there are metal siding.","9cecf799":"### Model selection  "}}