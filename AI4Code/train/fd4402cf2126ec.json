{"cell_type":{"78d2b98f":"code","1a8d30b5":"code","40398f99":"code","131c2b00":"code","5d8ab158":"code","c9a664c8":"code","40703dc9":"code","5597013c":"code","eb3ad73f":"code","4a5e973c":"code","d578db02":"code","599a104f":"code","77e28de8":"markdown","72bebc4b":"markdown","c5669bec":"markdown","b280d3f1":"markdown","bc2d45f2":"markdown","81cf8e03":"markdown","5a7a7522":"markdown","95d47381":"markdown","eb803f71":"markdown","17229a58":"markdown"},"source":{"78d2b98f":"import pandas as pd\nimport numpy as np\nimport datetime\nimport random\nimport glob\nimport cv2\nimport os\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import BatchNormalization,Activation,Dropout,Dense\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.layers import Flatten, Conv2D, MaxPooling2D\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, Callback, ReduceLROnPlateau\nimport matplotlib.pyplot as plt\n%matplotlib inline","1a8d30b5":"inputPath = '\/kaggle\/input\/aiacademydeeplearning\/train_images\/'\n# \u753b\u50cf\u8aad\u307f\u8fbc\u307f\nimage = cv2.imread(inputPath+'1_bathroom.jpg')\nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\ndisplay(image.shape)\ndisplay(image[0][0])\n# \u753b\u50cf\u3092\u8868\u793a\nplt.figure(figsize=(8,4))\nplt.imshow(image)","40398f99":"# \u753b\u50cf\u306e\u30b5\u30a4\u30ba\u5909\u66f4\nimage = cv2.resize(image,(256,256))\ndisplay(image.shape)\ndisplay(image[0][0])\n# \u753b\u50cf\u3092\u8868\u793a\nplt.figure(figsize=(8,4))\nplt.imshow(image)","131c2b00":"inputPath = '\/kaggle\/input\/aiacademydeeplearning\/'\ntrain = pd.read_csv(inputPath+'train.csv')\ndisplay(train.shape)\ndisplay(train.head())","5d8ab158":"def load_images(df,inputPath,size,roomType):\n    images = []\n    for i in df['id']:\n        basePath = os.path.sep.join([inputPath, \"{}_{}*\".format(i,roomType)])\n        housePaths = sorted(list(glob.glob(basePath)))\n        for housePath in housePaths:\n            image = cv2.imread(housePath)\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n            image = cv2.resize(image, (size, size))\n        images.append(image)\n    return np.array(images) \/ 255.0\n\n# load train images\ninputPath = '\/kaggle\/input\/aiacademydeeplearning\/train_images\/'\nsize = 28\nroomType = 'kitchen'\ntrain_images = load_images(train,inputPath,size,roomType)\ndisplay(train_images.shape)\ndisplay(train_images[0][0][0])","c9a664c8":"train_x, valid_x, train_images_x, valid_images_x = train_test_split(train, train_images, test_size=0.2)\ntrain_y = train_x['price'].values\nvalid_y = valid_x['price'].values\ndisplay(train_images_x.shape)\ndisplay(valid_images_x.shape)\ndisplay(train_y.shape)\ndisplay(valid_y.shape)","40703dc9":"def create_cnn(inputShape):\n    model = Sequential()\n    model.add(Conv2D(filters=32, kernel_size=(5, 5), strides=(1, 1), padding='valid',\n                     activation='relu', kernel_initializer='he_normal', input_shape=inputShape))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.1))\n\n    model.add(Conv2D(filters=64, kernel_size=(5, 5), strides=(1, 1), padding='valid', \n                     activation='relu', kernel_initializer='he_normal'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.1))\n    \n    model.add(Flatten())\n    \n    model.add(Dense(units=256, activation='relu',kernel_initializer='he_normal'))  \n    model.add(Dense(units=32, activation='relu',kernel_initializer='he_normal'))    \n    model.add(Dense(units=1, activation='linear'))\n    \n    model.compile(loss='mape', optimizer='adam', metrics=['mape']) \n    return model","5597013c":"def seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n\n# \u4e71\u6570\u30b7\u30fc\u30c9\u56fa\u5b9a\nseed_everything(2020)\n\n# callback parameter\nfilepath = \"cnn_best_model.hdf5\" \nes = EarlyStopping(patience=5, mode='min', verbose=1) \ncheckpoint = ModelCheckpoint(filepath=filepath, save_best_only=True,mode='auto') \nreduce_lr_loss = ReduceLROnPlateau(monitor='val_loss',  patience=2, verbose=1,  mode='min')\n\n# \u8a13\u7df4\u5b9f\u884c\ninputShape = (size, size, 3)\nmodel = create_cnn(inputShape)\nmodel.fit(train_images_x, train_y, validation_data=(valid_images_x, valid_y),epochs=50, batch_size=16,\n    callbacks=[es, checkpoint, reduce_lr_loss])","eb3ad73f":"def mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\n# load best model weights\nmodel.load_weights(filepath)\n\n# \u8a55\u4fa1\nvalid_pred = model.predict(valid_images_x, batch_size=32).reshape((-1,1))\nmape_score = mean_absolute_percentage_error(valid_y, valid_pred)\nprint (mape_score)","4a5e973c":"model.summary()","d578db02":"plot_model(model, to_file='cnn.png')","599a104f":"# load test csv\ninputPath = '\/kaggle\/input\/aiacademydeeplearning\/'\ntest = pd.read_csv(inputPath+'test.csv')\n\n# load test images\ninputPath = '\/kaggle\/input\/aiacademydeeplearning\/test_images\/'\nsize = 28\nroomType = 'kitchen'\ntest_images = load_images(test,inputPath,size,roomType)\ndisplay(test_images.shape)\ndisplay(test_images[0][0][0])\n\n# prediction\ntest_pred = model.predict(test_images, batch_size=32).reshape((-1,1))\ntest['price'] = test_pred\ntest[['id','price']].to_csv('submission.csv',index=False)\ndisplay(test.head())","77e28de8":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4e88\u6e2c","72bebc4b":"# \u8a13\u7df4\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f5c\u6210","c5669bec":"# \u753b\u50cf\u51e6\u7406","b280d3f1":"# \u30e2\u30c7\u30eb\u8a13\u7df4","bc2d45f2":"# \u30e2\u30c7\u30eb\u8a55\u4fa1","81cf8e03":"# \u6570\u5024\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f","5a7a7522":"# CNN\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b","95d47381":"# \u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f","eb803f71":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","17229a58":"# \u30e2\u30c7\u30eb\u53ef\u8996\u5316"}}