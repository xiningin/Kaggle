{"cell_type":{"4520bf51":"code","ccd70fd6":"code","f1cb6d2c":"code","c144156f":"code","1450cb56":"code","0faa76b4":"code","602f38fb":"code","9dc0967f":"code","f0227a87":"code","90693ead":"code","de7b2605":"code","4ede81f6":"code","551974a8":"code","565d37bd":"code","f432de1e":"code","4caa0111":"code","4399a622":"code","33e44e51":"code","035f91b5":"code","793bfe04":"code","018ef84a":"code","90a70a26":"code","11f86428":"code","5cf0f348":"code","075574bf":"code","0780cc82":"code","169704d8":"code","85ddc070":"code","0242540f":"code","259c5196":"code","c30de432":"code","9929281f":"code","d32879fa":"code","b97a4792":"code","461d0931":"code","e77c9ef8":"code","a191aba1":"code","f4a5f62a":"code","a0a9cd13":"code","7b91cc31":"code","a983a912":"code","7c5b2825":"code","836b052c":"code","15f4b80e":"code","a94b1d17":"code","bd5d0acc":"code","22300fb0":"code","9d6b9b3b":"code","ccc2f76b":"code","e98b87cc":"code","17e29ba3":"code","1a989384":"code","509eca92":"code","030c5c72":"code","c9270e0c":"code","ceb7d5d4":"code","eb8f1662":"code","4360eed9":"code","a1623b3d":"code","a3a43f38":"code","5afefaa5":"code","e2e862d9":"code","07015628":"code","eac008d7":"code","6b3ad50c":"code","360844cf":"code","28fd3c38":"code","bf960253":"code","60be8db8":"code","605a045f":"code","9662f6f8":"code","b25faa25":"code","2b96d716":"code","69874928":"code","61db082a":"code","1bc3d31d":"code","5986ed95":"code","47e0b137":"markdown","0271b9c8":"markdown","378afe23":"markdown","da826d7e":"markdown","5339e2fb":"markdown","89cac915":"markdown","99180c15":"markdown","05219073":"markdown","6f961d92":"markdown","e4692702":"markdown","5ca33b8b":"markdown","aeddeb78":"markdown","bcade3c0":"markdown","6df70403":"markdown","48b47ad2":"markdown","51628412":"markdown","3432cd6d":"markdown","82099e59":"markdown","1be7ecc3":"markdown","5346f571":"markdown","df22f8b1":"markdown","ec7eff01":"markdown","2f47df53":"markdown","9c285313":"markdown","04a43365":"markdown","3ff4b8e8":"markdown","8b41d640":"markdown","4b316ab2":"markdown","44255873":"markdown","0eee84b4":"markdown","b22460a8":"markdown","dece2399":"markdown","c3050d21":"markdown","5a7505c3":"markdown","2ea51965":"markdown","07a11100":"markdown","55c3ff89":"markdown","44d4cbba":"markdown","896b424e":"markdown","bfd686b3":"markdown","3d06403b":"markdown","956da4f4":"markdown","5e3e13e1":"markdown","cabca3c0":"markdown","f66d0ff8":"markdown","18fd9ae9":"markdown","1032b8a9":"markdown","442fb381":"markdown","4fc9ff20":"markdown","e6df7ff3":"markdown","9599feb1":"markdown","eaa77479":"markdown","f8949951":"markdown","b6954887":"markdown","f83674b3":"markdown","ee7bfe28":"markdown","db9f6b41":"markdown","d6e4c106":"markdown","2e428a83":"markdown","c5500069":"markdown","c089e55d":"markdown","9d397b22":"markdown","b70a2f36":"markdown","8bd501ff":"markdown","34379f2f":"markdown","6ff66491":"markdown","fd75f4b1":"markdown","5e99a807":"markdown","7b45c8e1":"markdown","552df007":"markdown","c528b8cd":"markdown","5a6679a1":"markdown","850de102":"markdown","030b2189":"markdown","3d5bd7fa":"markdown","baa699e1":"markdown","b623302f":"markdown","4684fca0":"markdown","fd0ecda0":"markdown","a8678ce4":"markdown","2c91fd7c":"markdown","eb35eb38":"markdown","6826a0f0":"markdown","5a017687":"markdown","a2905742":"markdown"},"source":{"4520bf51":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport random \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import log_loss\nfrom sklearn import metrics\nfrom sklearn.inspection import permutation_importance\nfrom xgboost import XGBClassifier\npd.set_option('display.max_columns', None)","ccd70fd6":"path = '..\/input\/walmart-recruiting-trip-type-classification\/'\ndf = pd.read_csv(path + 'train.csv.zip')\ntest = pd.read_csv(path + 'train.csv.zip')","f1cb6d2c":"# df = pd.read_csv('train.csv', encoding = \"utf-8\")\n# test = pd.read_csv('test.csv', encoding = \"utf-8\")","c144156f":"df.loc[df.duplicated()].shape","1450cb56":"df.loc[df.duplicated(keep=False)]","0faa76b4":"df = df.drop_duplicates()","602f38fb":"df.shape","9dc0967f":"df.head()","f0227a87":"len(df['TripType'].unique())","90693ead":"plt.figure(figsize = (12, 10))\n\nsn.set_style('whitegrid')\nax = sn.countplot(x = 'TripType', data = df, palette = 'mako')\nax = ax.set(title = 'The Frequent of Trip Type', ylabel = 'Counts', xlabel = 'Trip Type')","de7b2605":"df['TripType'].value_counts().describe()","4ede81f6":"df.loc[df['ScanCount'].isnull()]","551974a8":"df['ScanCount'].plot.hist(bins=50)","565d37bd":"df['ScanCount'].value_counts()","f432de1e":"df.loc[df.duplicated(subset=['TripType', 'VisitNumber', 'Weekday', 'Upc', 'DepartmentDescription', 'FinelineNumber'], keep=False)]","4caa0111":"df = df.groupby(['Upc', 'TripType', 'VisitNumber', 'Weekday',\n            'DepartmentDescription', 'FinelineNumber'])['ScanCount'].sum().reset_index()","4399a622":"df.loc[df.duplicated(subset=['TripType', 'VisitNumber', 'Weekday',\n                             'Upc', 'DepartmentDescription', 'FinelineNumber'], keep=False)]","33e44e51":"df = df.loc[df['ScanCount'] != 0]","035f91b5":"df['ScanCount'].value_counts()","793bfe04":"df.loc[df['VisitNumber'].isnull()]","018ef84a":"len(df['VisitNumber'].unique())","90a70a26":"number_item_purchase = pd.DataFrame()","11f86428":"number_item_purchase['unique_count'] = df.groupby(['VisitNumber'])['Upc'].count()","5cf0f348":"number_item_purchase['unique_count'].head()","075574bf":"number_item_purchase['unique_count'].plot.hist(bins=30, alpha=0.5)","0780cc82":"number_item_purchase['unique_count'].describe()","169704d8":"number_item_purchase['item_sum'] = df.groupby(['VisitNumber'])['ScanCount'].sum()","85ddc070":"number_item_purchase['item_sum'].head()","0242540f":"number_item_purchase['item_sum'].plot.hist(bins=30, alpha=0.5)","259c5196":"number_item_purchase['item_sum'].describe()","c30de432":"number_item_purchase = number_item_purchase.reset_index().merge(df[['TripType', 'VisitNumber', 'Weekday']].drop_duplicates(), on='VisitNumber')","9929281f":"number_item_purchase.shape","d32879fa":"number_item_purchase.head()","b97a4792":"df.groupby(['Weekday'])['ScanCount'].sum().plot.bar()","461d0931":"len(df['DepartmentDescription'].unique())","e77c9ef8":"df['DepartmentDescription'].value_counts().head(10)","a191aba1":"df['DepartmentDescription'].value_counts().tail(10)","f4a5f62a":"plt.figure(figsize = (10, 30))\n\nsn.set_style('whitegrid')\nax = sn.countplot(y='DepartmentDescription', data=df, palette='mako', order=df['DepartmentDescription'].value_counts().index)\nsx = ax.set(title='The Frequent of Trip Type', xlabel='Counts', ylabel='Trip Type')","a0a9cd13":"len(df['FinelineNumber'].unique())","7b91cc31":"df['FinelineNumber'].value_counts()","a983a912":"df.groupby(['DepartmentDescription', 'FinelineNumber'])['ScanCount']\\\n.sum().reset_index().sort_values(by='ScanCount', ascending=False).head(10)","7c5b2825":"X = number_item_purchase.copy()","836b052c":"X.head()","15f4b80e":"cat = df.groupby(['VisitNumber', 'DepartmentDescription'])['ScanCount'].sum().reset_index()\ncat.head()","a94b1d17":"cat_sale = pd.pivot_table(cat, values=['ScanCount'], index=['VisitNumber'],\n               columns=['DepartmentDescription'], aggfunc='sum')\\\n               .reset_index().fillna(0)\ncat_sale.columns = cat_sale.columns.droplevel()\ncat_sale = cat_sale.rename(columns={'': \"VisitNumber\"})","bd5d0acc":"X = X.merge(cat_sale, on='VisitNumber')","22300fb0":"day_of_week = {'Monday': 0, 'Tuesday': 1, 'Wednesday': 2, 'Thursday': 3, 'Friday': 4, 'Saturday': 5, 'Sunday': 6}","9d6b9b3b":"day = X['Weekday'].map(day_of_week)","ccc2f76b":"X['sin_day'] = np.sin(2*np.pi*day\/7)\nX['cos_day'] = np.cos(2*np.pi*day\/7)\nX = X.drop(['Weekday'], axis=1)","e98b87cc":"X.head()","17e29ba3":"data = X.copy()\ny = X['TripType']\nX = X.drop(['TripType', 'VisitNumber'], axis=1)","1a989384":"y","509eca92":"data.head()","030c5c72":"data.loc[data['TripType'] == 39].head(5)","c9270e0c":"data.loc[data['TripType'] == 40].head(5)","ceb7d5d4":"data.loc[data['TripType'] == 5].head(5)","eb8f1662":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","4360eed9":"y_train","a1623b3d":"random_model = y_train.value_counts().reset_index().sort_values(by='index')\nrandom_model = np.array(random_model['TripType']\/random_model['TripType'].sum())","a3a43f38":"y_train_pred_prob = []\nfor i in range(y_train.shape[0]):\n    y_train_pred_prob.append(random_model)","5afefaa5":"log_loss(y_train, y_train_pred_prob)","e2e862d9":"y_test_pred_prob = []\nfor i in range(y_test.shape[0]):\n    y_test_pred_prob.append(random_model)","07015628":"log_loss(y_test, y_test_pred_prob)","eac008d7":"y_test_pred = []\nfor i in range(y_test.shape[0]):\n    y_test_pred.append(40)","6b3ad50c":"report = metrics.classification_report(y_test, y_test_pred, digits=3, output_dict=True)","360844cf":"report_df = pd.DataFrame(report).transpose()\nreport_df","28fd3c38":"rfc = RandomForestClassifier(random_state=42)\nrfc.fit(X_train, y_train)","bf960253":"y_test_pred_prob = rfc.predict_proba(X_test)\ny_test_pred = rfc.predict(X_test)","60be8db8":"log_loss(y_test, y_test_pred_prob)","605a045f":"report = metrics.classification_report(y_test, y_test_pred, digits=3, output_dict=True)\nreport_df = pd.DataFrame(report).transpose()\nreport_df","9662f6f8":"importances = pd.DataFrame(rfc.feature_importances_, index=X_train.columns).reset_index()\nimportances.columns=['features', 'importance']\nimportances = importances.sort_values(by='importance', ascending=False)\nplt.figure(figsize = (12, 30))\nsn.set_style('whitegrid')\nax = sn.barplot( x='importance', y='features', data=importances, palette = 'mako')\nax = ax.set(title = 'The Random Forest Feature Importance', xlabel = 'Importances(GINI)', ylabel = 'Features')","b25faa25":"X_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)","2b96d716":"xgb = XGBClassifier(objective='multi:softmax', booster='gbtree', eval_metric='mlogloss', num_class='38', importance_type='weight')\neval_set = [(X_val, y_val)]\nxgb.fit(X_tr, y_tr, eval_set=eval_set, verbose=False)","69874928":"y_test_pred_prob = xgb.predict_proba(X_test)\ny_test_pred = xgb.predict(X_test)","61db082a":"log_loss(y_test, y_test_pred_prob)","1bc3d31d":"report = metrics.classification_report(y_test, y_test_pred, digits=3, output_dict=True)\nreport_df = pd.DataFrame(report).transpose()\nreport_df","5986ed95":"importances = pd.DataFrame(xgb.feature_importances_, index=X_train.columns).reset_index()\nimportances.columns=['features', 'importance']\nimportances = importances.sort_values(by='importance', ascending=False)\nplt.figure(figsize = (12, 30))\nsn.set_style('whitegrid')\nax = sn.barplot( x='importance', y='features', data=importances, palette = 'mako')\nax = ax.set(title = 'The Random Forest Feature Importance', xlabel = 'Importances(GINI)', ylabel = 'Features')","47e0b137":"### Other metrices","0271b9c8":"### Random model","378afe23":"# Feature Engineering","da826d7e":"## Create feature from department detail","5339e2fb":"## XGBoost","89cac915":"we need to change data into machine learning ready form. First we need 1 trip per row, luckily we already did that.","99180c15":"Change numeric days to sin and cos to make it cyclical","05219073":"### Other metrices","6f961d92":"Change week day to numeric variable first","e4692702":"Top ten department description sold","5ca33b8b":"The item that has been purchase and return in the same visit has been cut","aeddeb78":"No null in scancount","bcade3c0":"## Baseline","6df70403":"## Encoding days","48b47ad2":"### Weekday","51628412":"type 40 seem to be grocery like 39 but bulkier","3432cd6d":"type 5 seem to be pharmacy trip","82099e59":"XGBoost feature importance is not that different from Random Forest, but outperform the Random Forest, which is not surprising given that XGBoost is generally a less bias estimator.","1be7ecc3":"**Create a series counting number of items purchase per visit**","5346f571":"### features importance","df22f8b1":"Because every entries including ScanCount are duplicated, it is likely that the entries are really duplicates.","ec7eff01":"Again produce and merchandise dominate the chart","2f47df53":"As expected the model did not perform well at all","9c285313":"Look like Sunday, Saturday, and Friday generate the most sale","04a43365":"# Import Library","3ff4b8e8":"look like type 39 response seem to be grocery trips","8b41d640":"# EDA 2","4b316ab2":"**Create a series counting number of unique item purchase per visit**","44255873":"## Explore the responses ","0eee84b4":"This can be use as a template for evaluate other models","b22460a8":"### features importance","dece2399":"### FinelineNumber","c3050d21":"average sum items is around 8 items.","5a7505c3":"We need some kind of simple model to evaluate how well the more complicated model perform","2ea51965":"# Import Data","07a11100":"# Modelling","55c3ff89":"Now input the random probability to each y in test set","44d4cbba":"There are 38 unique type of trip","896b424e":"The number of item purchase has not been change much","bfd686b3":"The biggest number of item purchase per item per visit seem to be 1 or 2 items","3d06403b":"The item that has been purchase and return in the same visit should be cut","956da4f4":"### cross entrophy","5e3e13e1":"### Department Description","cabca3c0":"First using **cross entropy**","f66d0ff8":"The model seems to learn from total item purchase and unique item purchase well; the more popular the department, the more critical the feature.","18fd9ae9":"Histrogram plot to see how the data distributed","1032b8a9":"Fineline number is too granular, I will leave it out for now","442fb381":"Now test set","4fc9ff20":"Produce and merchandise dominate the chart","e6df7ff3":"for multiclass classification, the model does better than expected; however, the model seem to has trouble classifying minority class","9599feb1":"Unsurprisingly, walmart being a hypermarket average unique item is around 7 items sold per trip.","eaa77479":"### cross entrophy","f8949951":"Let's look at the data shape","b6954887":"- **TripType** - a categorical id representing the type of shopping trip the customer made. This is the ground truth that you are predicting. TripType_999 is an \"other\" category.\n\n- **VisitNumber** - an id corresponding to a single trip by a single customer\n\n- **Weekday** - the weekday of the trip\n\n- **Upc** - the UPC number of the product purchased\n\n- **ScanCount** - the number of the given item that was purchased. A negative value indicates a product return.\n\n- **DepartmentDescription** - a high-level description of the item's department\n\n- **FinelineNumber** - a more refined category for each of the products, created by Walmart","f83674b3":"## Random forest","ee7bfe28":"Before trying to classify the model let's have a last detail look at a Relationship between predictors and response","db9f6b41":"There are 68 department description","d6e4c106":"### Returned Item","2e428a83":"The data is unbalanced, and there are 38! classes of data. Furthermore max-min number of members per class equal to ~170k members","c5500069":"The trip seem to be divided by what and how much the customer brought, and the feline number may be too granular to be use without more preprocessing. Of course grouping\/clustering the the feline number together may be the same as using department detail.","c089e55d":"95674 unique visit numbers","9d397b22":"A lot more can be done, but stock XGBoost seems to do an adequate job of estimating the problem.","b70a2f36":"Still, the model can not deal with minority class over sampling maybe needed","8bd501ff":"Order the classes alphabetically, as done by sklearn.metrics.log_loss","34379f2f":"Drop duplicates data","6ff66491":"There are 5704 duplicated entries ","fd75f4b1":"### VisitNumber","5e99a807":"Add additional info to number_item_purchase for future uses","7b45c8e1":"According to the probability every class will be predicted to be class with highest frequency which is, class type 40","552df007":"Bottom ten department description sold","c528b8cd":"### Model Evaluation","5a6679a1":"Let's look which day in week generate the most sale","850de102":"We will be use frequency as a kind of PMF to be a baseline for the dataset","030b2189":"Now let's add each department detail scan count as a predictors","3d5bd7fa":"The XGBoost outperform Random Forest, which is as expected. In general gradient boosting seem to be more powerful estimater than bagging algorithm like Random Forest","baa699e1":"### ScanCount","b623302f":"## Split test set for use as final evaluation","4684fca0":"From the last EDA it seem trip type may be a lot more clear cut the expected. As the model try to estimate human judgement, the non-linear tree-based model may be a better fit.","fd0ecda0":"Setting y to be equal to Trip type","a8678ce4":"No null number","2c91fd7c":"Let's look at response type 39 and 40","eb35eb38":"## Dealing with response","6826a0f0":"## Explore the predictors ","5a017687":"Unsurprisingly, Random Forest work better than the baseline model.","a2905742":"# EDA!"}}