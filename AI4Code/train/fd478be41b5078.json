{"cell_type":{"66522d4c":"code","7c026eda":"code","fd7bb9db":"code","9ba14947":"code","48d14e6e":"code","53183c92":"code","37d9d660":"code","d1835b97":"code","ddddb604":"code","4767ee9e":"code","31b7b027":"code","acecce30":"code","495eafb6":"code","82ae0683":"code","83d4c100":"code","18f675df":"code","b0323019":"code","858ae610":"code","51cca63a":"code","f02fab16":"code","f462cc99":"code","d841b3c3":"code","5b60de48":"code","62b6114b":"code","812a128c":"code","b3ece920":"code","64f4a594":"code","4931d9c3":"code","909fcc87":"code","79c8a124":"code","80aed485":"code","ced4b7d8":"code","4116a20f":"code","0aed5f6a":"code","fe7e1553":"code","03269eda":"code","4cdb5ee7":"code","2e575548":"markdown","be0c528f":"markdown","96b8bd7f":"markdown","30eb8064":"markdown","7c29981f":"markdown","f71ce09b":"markdown","a6735731":"markdown","6ed2d45b":"markdown","ac4c40de":"markdown","3c885408":"markdown"},"source":{"66522d4c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7c026eda":"test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ngender_sub = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\n\ntrain.head()","fd7bb9db":"# Checkout the Length of Data in train and test DataFrame\nprint(\"Length of test DataFrame: \", len(test))\nprint(\"Length of train DataFrame: \", len(train))","9ba14947":"# Checkout the Number of Rows and Columns\nprint(\"------ Train Data Frame ---------------\")\nprint (\"Rows: \", train.shape[0])\nprint (\"Columns: \", train.shape[1])\nprint(\"-------------\\nColumns Name\\n-------------\\n\", train.columns)\n\nprint(\"\\n\\n------ Test Data Frame ---------------\")\nprint (\"Rows: \", test.shape[0])\nprint (\"Columns: \", test.shape[1])\nprint(\"-------------\\nColumns Name\\n-------------\\n\", test.columns)","48d14e6e":"train.info()","53183c92":"test.info()","37d9d660":"print(\"Not-Survived: \", train[\"Survived\"].value_counts()[0])\nprint(\"Survived: \", train[\"Survived\"].value_counts()[1])\ntrain[\"Survived\"].value_counts()","d1835b97":"print(\"Not-Survived = 0 \")\nprint(\"Survived = 1 \")\nsns.countplot(x='Survived', data = train)","ddddb604":"print(\"Not-Survived = 0 \")\nprint(\"Survived = 1 \")\nsns.countplot(x='Survived', data = train, hue=\"Sex\")","4767ee9e":"# Null Values in Data\ntrain.isna().sum()","31b7b027":"# Visualizing the Null Vlues using Heatmap\nsns.heatmap(train.isna())","acecce30":"# Calculate % of the null values in Age Column\n(train['Age'].isna().sum()\/len(train['Age'])) * 100","495eafb6":"# Calculate % of the null values in Cabin Column\n(train['Cabin'].isna().sum()\/len(train['Cabin'])) * 100","82ae0683":"# Distribution of the Age Column\nsns.displot(x='Age', data=train)","83d4c100":"print(\"Mean Age of Train DataFrame: \", train['Age'].mean())\nprint(\"Mean Age of Test DataFrame: \", test['Age'].mean())","18f675df":"# fill Age Column of Train and Test DataFrames with mean Age\ntrain['Age'].fillna(train['Age'].mean(), inplace = True)\ntest['Age'].fillna(test['Age'].mean(), inplace = True)\n\n# Verify the Null values in Age Column\nprint(\"Train: \", train['Age'].isna().sum())\nprint(\"Test: \", test['Age'].isna().sum())","b0323019":"# Visualizing the Null Vlues using Heatmap\nsns.heatmap(train.isna())","858ae610":"# Drop Cabin Column From Train because Null Values percentage more than 40%\ntrain.drop('Cabin', axis = 1, inplace = True)\n# Verify Cabin Data Column Dropped\ntrain.head()","51cca63a":"# Convert Sex Column Values to Numerical Values for Analysis Purpose\npd.get_dummies(train['Sex'])","f02fab16":"# After Droping One Columns (First Column) it will look like\npd.get_dummies(train['Sex'], drop_first = True)","f462cc99":"# Save sex Dummies value in gender variable\n# and add new column in train data as gender\n# 1 = Male, 0 = Female\ngender = pd.get_dummies(train['Sex'], drop_first = True)\ntrain['Gender'] = gender\ntrain.columns","d841b3c3":"train.head()","5b60de48":"# drop columns that not required in prediction process\ntrain.drop(['Name', 'Sex', 'Ticket', 'Embarked'], axis = 1, inplace = True)\n# Verify Dropped Columns\ntrain.head()","62b6114b":"# Seperate the Dependent and In-dependent Variables\nX = train[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Gender']]\ny = train['Survived']","812a128c":"X.info()","b3ece920":"# import train test split method\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","64f4a594":"# import logistic Regression\nfrom sklearn.linear_model import LogisticRegression\n# Create Obejct for Logistic Regression\nlr = LogisticRegression()","4931d9c3":"# Fit Logistic Regression\nlr.fit(X_train, y_train)","909fcc87":"predict = lr.predict(X_test)\npredict","79c8a124":"# Import Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\n# Print Confussion Matrix\nconfusion_matrix(y_test, predict)","80aed485":"# Print Confussion Matrix in Readable Form\npd.DataFrame(confusion_matrix(y_test, predict), columns=['Predict No', 'Predict Yes'], index = ['Actual No', 'Actual Yes'])","ced4b7d8":"# Import Confusion Matrix\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test, predict))","4116a20f":"test.isna().sum()","0aed5f6a":"test[\"Age\"].fillna(test[\"Age\"].mean(), inplace=True)\ntest[\"Fare\"].fillna(test[\"Fare\"].mean(), inplace=True)\n\ngender = pd.get_dummies(test['Sex'], drop_first = True)\ntest['Gender'] = gender\ntestIDs = test['PassengerId']\ntest.drop([\"PassengerId\", \"Name\", \"Sex\", \"Ticket\", \"Cabin\" , \"Embarked\" ], axis = 1, inplace = True)\n\ntest.isna().sum()","fe7e1553":"print(\"test Dataframe ID:\\n\", testIDs)","03269eda":"# Predict with test DataFrame\ntest_predict = lr.predict(test)\n# create New Data Frame for Export submission file\ncsv_df = pd.DataFrame({\"PassengerID\": testIDs.values,\n                      \"Survived\": test_predict})\n\n# Display to verify the New Created DataFrame\ncsv_df","4cdb5ee7":"# Export New Created DataFrame as csv file for submission\ncsv_df.to_csv(\"mySubmission.csv\", index=False)","2e575548":"# **Testing Accuracy Score**","be0c528f":"# **Process for Submission File**","96b8bd7f":"**Good Luck**","30eb8064":"# **Load Data**","7c29981f":"# **Prediction**","f71ce09b":"# **Data Modelling**","a6735731":"# **Data Analysis**","6ed2d45b":"Actual No = Actual Not Survived, Predict No = Not Survived in Prediction\nActual Yes = Actual Survived, Predict Yes = Survived in Prediction\n\nAbove matrix showed that \n1. **156** Actual not Survived where as same number in Prediction\n2. **34** numbers Survived in Actual BUT Not Survived in Pridiction Model\n3. **19** Number Not Survived in Actual BUT same number Survvied in Pridiction Model\n4. **86** Numbers Survived Actually and same Survived in Pridiction also.","ac4c40de":"# **Data Filling and Cleaning**","3c885408":"# **Data Exploration**"}}