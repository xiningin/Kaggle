{"cell_type":{"06c8dcc0":"code","e186129e":"code","49a9c7c9":"code","9e532a18":"code","7fa719ce":"code","9e67aabe":"code","d51e8dfb":"code","f59bad61":"code","720555d1":"code","563b5c4d":"code","c6d0d639":"code","16b72b8a":"code","96c96ac5":"code","a19808b9":"code","499e44f3":"code","5303f160":"code","8ddac5e6":"code","c01e6d4a":"code","f2594d12":"code","60cd178c":"code","0cbe1131":"code","474c9a29":"code","faed0d99":"code","ea27f09d":"code","1b1e393a":"code","1766b4a0":"code","043116ed":"code","970ecaf2":"code","b0b07b98":"code","b68526e8":"code","e43df3fd":"code","cccd82dd":"code","63dcf5b7":"code","b9c19ef5":"code","f3eaea59":"code","4dc69c00":"code","60642d01":"code","888f80ca":"code","3144484e":"code","073a57cc":"code","c41078b3":"code","addc70d5":"code","a72ce46d":"code","df501fb6":"code","2fbcad88":"code","d09fe26a":"code","75a2a058":"code","bcb63c22":"code","a92c87b2":"code","adc1f143":"code","f269a816":"code","bbc26190":"code","fc417d85":"code","475acc44":"code","58677b9f":"code","037b8bd9":"code","797029a5":"code","4a59c3fe":"code","221de197":"code","0b2aade9":"code","022e10e8":"code","48fac317":"code","0b3a222e":"code","37e59892":"code","1b61964a":"code","8a8bff29":"code","bbec7660":"markdown","543c8dff":"markdown","2a7a24a4":"markdown","ec862ee6":"markdown","21dac41e":"markdown","69b80e09":"markdown","ef213c5c":"markdown","fd15f753":"markdown","fc475c02":"markdown","7ee67011":"markdown","b1bbe91f":"markdown","959f68e2":"markdown","d8d12350":"markdown","9d5bcce7":"markdown","5e833be7":"markdown","1bad85ef":"markdown","fc9cc003":"markdown","99a7da23":"markdown","7df9004d":"markdown","60fc4042":"markdown","f4244352":"markdown"},"source":{"06c8dcc0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e186129e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","49a9c7c9":"df=pd.read_csv(\"\/kaggle\/input\/loan-approval-prediction\/Training Dataset.csv\")\ndf","9e532a18":" df.head()","7fa719ce":"df.shape","9e67aabe":"df.info()","d51e8dfb":"df.describe()","f59bad61":"df.isnull().sum()","720555d1":"df.LoanAmount=df.LoanAmount.fillna(df.LoanAmount.mean())\n\ndf.Credit_History=df.Credit_History.fillna(df.Credit_History.mean())\n\ndf.Loan_Amount_Term=df.Loan_Amount_Term.fillna(df.Loan_Amount_Term.mean())\n\ndf['Gender'].fillna(df['Gender'].value_counts().idxmax(), inplace=True)\n\ndf['Married'].fillna(df['Married'].value_counts().idxmax(), inplace=True)\n\ndf.Dependents.fillna(df.Dependents.value_counts().idxmax(), inplace=True)\n\ndf.Self_Employed.fillna(df.Self_Employed.value_counts().idxmax(), inplace=True)","563b5c4d":"df.isnull().sum()","c6d0d639":"df.duplicated().sum()","16b72b8a":"df.drop(['Loan_ID'],axis=1)","96c96ac5":"df.skew()","a19808b9":"df.ApplicantIncome=df.ApplicantIncome.clip(lower=df.ApplicantIncome.quantile(0.05),upper=df.ApplicantIncome.quantile(0.95))\n\ndf.CoapplicantIncome=df.CoapplicantIncome.clip(lower=df.CoapplicantIncome.quantile(0.05),upper=df.CoapplicantIncome.quantile(0.95))\n\ndf.Loan_Amount_Term=df.Loan_Amount_Term.clip(lower=df.Loan_Amount_Term.quantile(0.14),upper=df.Loan_Amount_Term.quantile(0.86))\n\ndf.LoanAmount=df.LoanAmount.clip(lower=df.LoanAmount.quantile(0.05),upper=df.LoanAmount.quantile(0.95))\n\ndf.Credit_History=df.Credit_History.clip(lower=df.Credit_History.quantile(0.05),upper=df.Credit_History.quantile(0.95))\n\ndf.ApplicantIncome=df.ApplicantIncome.clip(lower=df.ApplicantIncome.quantile(0.10),upper=df.ApplicantIncome.quantile(0.90))","499e44f3":"df.skew()","5303f160":"df.info()","8ddac5e6":"plt.figure(figsize=(8,4))\nsns.countplot(df.Gender)\nplt.show()","c01e6d4a":"plt.figure(figsize=(8,4))\nsns.countplot(df.Married)\nplt.show()","f2594d12":"plt.figure(figsize=(8,4))\nsns.countplot(df.Dependents)\nplt.show()","60cd178c":"plt.figure(figsize=(8,4))\nsns.countplot(df.Education)\nplt.show()","0cbe1131":"plt.figure(figsize=(8,4))\nsns.countplot(df.Self_Employed)\nplt.show()","474c9a29":"plt.figure(figsize=(8,4))\nsns.countplot(df.Property_Area)\nplt.show()","faed0d99":"plt.figure(figsize=(8,4))\nsns.countplot(df.Credit_History)\nplt.show()","ea27f09d":"num=['ApplicantIncome', 'CoapplicantIncome', 'LoanAmount',\n       'Loan_Amount_Term']\nfor column in num:\n    plt.figure(figsize=(8,4))\n    plt.hist(df[column])\n    plt.title(column)\n    plt.show()","1b1e393a":"df.Loan_Status.replace('N',0,inplace=True)\ndf.Loan_Status.replace('Y',1,inplace=True)","1766b4a0":"df.head()","043116ed":"plt.figure(figsize=(12,5))\nsns.distplot(df['ApplicantIncome'][df.Loan_Status==0])\nsns.distplot(df['ApplicantIncome'][df.Loan_Status==1])\nplt.legend(['Loan_Status=0','Loan_Status=1'])\nplt.show()","970ecaf2":"plt.figure(figsize=(12,5))\nsns.distplot(df['LoanAmount'][df.Loan_Status==0])\nsns.distplot(df['LoanAmount'][df.Loan_Status==1])\nplt.legend(['Loan_Status=0','Loan_Status=1'])\nplt.show()","b0b07b98":"pivot = pd.crosstab(df.Married,df.Loan_Status,margins=True)\npivot","b68526e8":"ratio = pivot[1]\/pivot['All']\nratio","e43df3fd":"ratio.plot(kind='bar')","cccd82dd":"pivot1 = pd.crosstab(df.Gender,df.Loan_Status,margins=True)\npivot1","63dcf5b7":"ratio1 = pivot1[1]\/pivot1['All']\nratio1","b9c19ef5":"ratio1.plot(kind='bar')","f3eaea59":"pivot2 = pd.crosstab(df.Dependents,df.Loan_Status,margins=True)\npivot2","4dc69c00":"ratio2 = pivot2[1]\/pivot2['All']\nratio2","60642d01":"ratio2.plot(kind='bar')","888f80ca":"pivot3 = pd.crosstab(df.Education,df.Loan_Status,margins=True)\npivot3","3144484e":"ratio3 = pivot3[1]\/pivot3['All']\nratio3","073a57cc":"ratio3.plot(kind='bar')","c41078b3":"pivot4 = pd.crosstab(df.Self_Employed,df.Loan_Status,margins=True)\npivot4\n","addc70d5":"ratio4 = pivot4[1]\/pivot4['All']\nratio4","a72ce46d":"ratio4.plot(kind='bar')","df501fb6":"pivot5= pd.crosstab(df.Credit_History,df.Loan_Status,margins=True)\npivot5","2fbcad88":"ratio5= pivot5[1]\/pivot5['All']\nratio5","d09fe26a":"ratio5.plot(kind='bar')","75a2a058":"pivot6= pd.crosstab(df.Property_Area,df.Loan_Status,margins=True)\npivot6","bcb63c22":"ratio6= pivot6[1]\/pivot6['All']\nratio6","a92c87b2":"ratio6.plot(kind='bar')","adc1f143":"from sklearn.preprocessing import LabelEncoder\ndf['Education']=LabelEncoder().fit_transform(df['Education'])\ndf['Dependents']=LabelEncoder().fit_transform(df['Dependents'])\ndf['Self_Employed']=LabelEncoder().fit_transform(df['Self_Employed'])\ndf['Gender']=LabelEncoder().fit_transform(df['Gender'])\ndf['Married']=LabelEncoder().fit_transform(df['Married'])\ndf['Property_Area']=LabelEncoder().fit_transform(df['Property_Area'])","f269a816":"cor=df.corr()\nplt.figure(figsize=(20,12))\nsns.heatmap(cor,annot=True,cmap='coolwarm')\nplt.show()","bbc26190":"from sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error as mae,median_absolute_error as mee,classification_report as cr,accuracy_score as ac","fc417d85":"df2=df\ndf2.head()","475acc44":"col=['Loan_ID','Gender','Married','CoapplicantIncome','Loan_Amount_Term','Property_Area']\ndf2=df2.drop(columns=col,axis=1)\ndf2","58677b9f":"x=df2[['Dependents','Education','Self_Employed','ApplicantIncome','LoanAmount','Credit_History']]\ny=df2[['Loan_Status']]","037b8bd9":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=40)","797029a5":"from sklearn.tree import DecisionTreeClassifier \nmodel=DecisionTreeClassifier()","4a59c3fe":"model.fit(x_train,y_train)","221de197":"y_pre1 = model.predict(x_test)\ny_pre1","0b2aade9":"from sklearn.model_selection import cross_val_score\nprint(ac(y_test,y_pre1)*100)\nsco1=(cross_val_score(model,x,y,cv=5))\nprint(np.mean(sco1)*100)","022e10e8":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_test,y_pre1)\nplt.figure(figsize=(8,6))\nfg=sns.heatmap(cm,annot=True,cmap=\"Reds\")\nfigure=fg.get_figure()\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title(\"Output Confusion Matrix\")","48fac317":"newinput=[[0,0,0,5849.0,146.412162,1.0]]\noutput1=model.predict(newinput)\noutput1","0b3a222e":"from sklearn.naive_bayes import GaussianNB  \nclassifier1 = GaussianNB()  \nclassifier1.fit(x_train, y_train)  ","37e59892":"y_pred3= classifier1.predict(x_test)  ","1b61964a":"print(ac(y_test,y_pred3)*100)\nsco3=(cross_val_score(classifier1,x,y,cv=5))\nprint(np.mean(sco3)*100)","8a8bff29":"newinput1=[[0,0,0,5849.0,146.412162,1.0]]\noutput11=classifier1.predict(newinput1)\noutput11","bbec7660":"# **Implementing Confusion Matrix**","543c8dff":"# **Importing Libraries**","2a7a24a4":"# **Missing values**","ec862ee6":"# **Prediction**","21dac41e":"## **Analyzing Features**","69b80e09":"# **Label Encoding**","ef213c5c":"# **Information of the dataset**","fd15f753":"# **unwanted columns**","fc475c02":"# ***Univariate Analysis***","7ee67011":"# **Dimensions of Dataset**","b1bbe91f":"# ***Bivariate Analysis***","959f68e2":"# **DecisionTree**","d8d12350":"# **Statistical Summary**","9d5bcce7":"# **Correlation Matrix**","5e833be7":"# **Naive Bayes**","1bad85ef":"# **DecisionTree Prediction With New Input**","fc9cc003":"# **Train the Model**","99a7da23":"# **Load Dataset**","7df9004d":"# **Peak at the Data**","60fc4042":"# **Duplicate Entries**","f4244352":"# **Outliers**"}}