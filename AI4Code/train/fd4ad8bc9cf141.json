{"cell_type":{"442b7e47":"code","d1e05079":"code","0b76d7f0":"code","29330fd4":"code","232a969b":"code","c40c783f":"code","2b29da0d":"code","81d5f3f5":"code","023d8178":"code","aad24bb0":"code","21ffcd7b":"code","4d1788ea":"code","eb6abd43":"code","7aaa7709":"code","005ad861":"code","9bd93eb6":"code","378e0b16":"code","06f3070b":"code","246b52ef":"code","fbf671a9":"code","3c6a8622":"code","5a31026a":"code","573b2a90":"code","0ff6fa25":"code","7c5fac22":"code","3fe3edef":"code","19b7c79f":"code","4e6b0407":"code","986a6f02":"code","5789ce36":"code","d8d8f9bb":"code","721b477f":"code","a4e85e50":"code","6474623e":"code","033ae81b":"markdown","3ad1e7bb":"markdown","5df0529e":"markdown","c907976a":"markdown","70792890":"markdown","43add9f6":"markdown","c919bfd4":"markdown","21eab264":"markdown","1669a0ed":"markdown","53a50ad5":"markdown","dfef373d":"markdown","2ad874a0":"markdown","a543f467":"markdown","3865e187":"markdown"},"source":{"442b7e47":"import wandb\nimport os\nimport cv2\nfrom PIL import Image\nimport string\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport albumentations as alb\n#from albumentations.augmentations.  CenterCrop, MedianBlur, VerticalFlip, InvertImg\nimport nltk\n#nltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import PorterStemmer, WordNetLemmatizer\nfrom nltk import pos_tag, ne_chunk\nfrom textblob import TextBlob\n#import textfeatures\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom wordcloud import WordCloud, ImageColorGenerator\nfrom wordcloud import STOPWORDS as stopwords_wc\n","d1e05079":"def show_values_on_bars(axs, h_v=\"v\", space=0.4):\n    '''Plots the value at the end of the a seaborn barplot.\n    axs: the ax of the plot\n    h_v: weather or not the barplot is vertical\/ horizontal'''\n    \n    def _show_on_single_plot(ax):\n        if h_v == \"v\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() \/ 2\n                _y = p.get_y() + p.get_height()\n                value = int(p.get_height())\n                ax.text(_x, _y, format(value, ','), ha=\"center\") \n        elif h_v == \"h\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() + float(space)\n                _y = p.get_y() + p.get_height()\n                value = int(p.get_width())\n                ax.text(_x, _y, format(value, ','), ha=\"left\")\n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _show_on_single_plot(ax)\n    else:\n        _show_on_single_plot(axs)","0b76d7f0":"train_df = pd.read_csv(\"..\/input\/shopee-product-matching\/train.csv\")\nimage_count = train_df[\"image\"].value_counts().reset_index()\nimage_count.columns = [\"image\", \"count\"]\nimage_count_duplicates = image_count[image_count[\"count\"] > 1]\nprint(\"Total no. of images with duplicates: {:,}\".format(len(image_count_duplicates)))\nmy_colors = [\"#EDAC54\", \"#F4C5B7\", \"#DD7555\", \"#B95F18\", \"#475A20\"]\n\n#Plot\nfig, ax = plt.subplots(figsize=(16, 7))\nplt.bar(x=image_count_duplicates.iloc[::16][\"image\"],\n        height=image_count_duplicates.iloc[::16][\"count\"],\n        color=my_colors[4])\nplt.title(\"Duplicated Images: How many apparitions?\", fontsize=20)\nplt.xticks([])\nplt.xlabel(\"Image ID\", fontsize=16)\nplt.ylabel(\"Count\", fontsize=16);","29330fd4":"def get_image_info(name):\n    '''Displays a photo of the image and information on it.\n    name: a string containing the code of the image (.jpg format)'''\n    \n    # Read in the image & corresponding metadata\n    sample_image = cv2.imread(train_base + \"\/\" + name)\n    sample_image = cv2.cvtColor(sample_image, cv2.COLOR_BGR2RGB)\n    sample_df = train_df[train_df[\"image\"] == name]\n    \n    print(color.BOLD + \"Apparitions for this image:\" + color.END, len(sample_df), \"\\n\" +\n          color.BOLD + \"Some titles:\" + color.END, sample_df[\"title\"].value_counts().index[:5].values, \"\\n\" +\n          color.BOLD + \"No. of unique groups:\" + color.END, sample_df[\"label_group\"].value_counts().shape[0])\n\n    # Plot image\n    plt.figure(figsize=(16, 7))\n    plt.imshow(sample_image)\n    plt.axis(\"off\")\n    plt.show();","232a969b":"class color:\n    BOLD = '\\033[1m' + '\\033[93m'\n    END = '\\033[0m'","c40c783f":"train_base = \"..\/input\/shopee-product-matching\/train_images\"","2b29da0d":"sample_name = image_count_duplicates.iloc[10][\"image\"]\nget_image_info(name = sample_name)","81d5f3f5":"sample_name = image_count_duplicates.iloc[110][\"image\"]\nget_image_info(name = sample_name)","023d8178":"sample_name = image_count_duplicates.iloc[100][\"image\"]\nget_image_info(name = sample_name)","aad24bb0":"sample_name = image_count_duplicates.iloc[111][\"image\"]\nget_image_info(name = sample_name)","21ffcd7b":"sample_name = image_count_duplicates.iloc[5][\"image\"]\nget_image_info(name = sample_name)","4d1788ea":"sample_name = image_count_duplicates.iloc[500][\"image\"]\nget_image_info(name = sample_name)","eb6abd43":"sample_name = image_count_duplicates.iloc[501][\"image\"]\nget_image_info(name = sample_name)","7aaa7709":"sample_name = image_count_duplicates.iloc[502][\"image\"]\nget_image_info(name = sample_name)","005ad861":"sample_name = image_count_duplicates.iloc[0][\"image\"]\nget_image_info(name = sample_name)","9bd93eb6":"sample_name = image_count_duplicates.iloc[11][\"image\"]\nget_image_info(name = sample_name)","378e0b16":"sample_name = image_count_duplicates.iloc[12][\"image\"]\nget_image_info(name = sample_name)","06f3070b":"sample_name = image_count_duplicates.iloc[14][\"image\"]\nget_image_info(name = sample_name)","246b52ef":"sample_name = image_count_duplicates.iloc[122][\"image\"]\nget_image_info(name = sample_name)","fbf671a9":"sample_name = image_count_duplicates.iloc[1111][\"image\"]\nget_image_info(name = sample_name)","3c6a8622":"sample_name = image_count_duplicates.iloc[1130][\"image\"]\nget_image_info(name = sample_name)","5a31026a":"def clean_duplicates(df, train=True):\n    '''Intakes the original dataframe and returns it wo duplicated images.\n    Converts label_group to string as well.'''\n    \n    if train == True:\n        df[\"label_group\"] = df[\"label_group\"].astype(str)\n    df = df.drop_duplicates(subset=['image']).reset_index(drop=True)\n    \n    return df","573b2a90":"train_df = clean_duplicates(df=train_df)\n\nprint(\"Is train metadata now the same length as the image train folder?\", \"\\n\",\n      train_df.shape[0] == len(os.listdir(train_base)))","0ff6fa25":"# Get count of values on each group\ngroups_df = train_df[\"label_group\"].value_counts().reset_index()\ngroups_df.columns = [\"group\", \"count\"]\n\n# Print info\nprint(\"No. of unique groups: {:,}\".format(len(groups_df)), \"\\n\" +\n      \"Max no. of apparitions in 1 group: {}\".format(groups_df[\"count\"].max()), \"\\n\" +\n      \"Min no. of apparitions in 1 group: {}\".format(groups_df[\"count\"].min()))\n\nfig, ax = plt.subplots(figsize=(16, 7))\nplt.bar(x=groups_df.iloc[::15][\"group\"],\n        height=groups_df.iloc[::15][\"count\"],\n        color=my_colors[3])\nplt.title(\"Group Count Distribution\", fontsize=20)\nplt.xticks([])\nplt.xlabel(\"Group ID\", fontsize=16)\nplt.ylabel(\"Count\", fontsize=16)\nplt.show();","7c5fac22":"def get_group_info(group_name):\n    '''This function shows a sample of 6 images within a group.\n    group_name: a string representing the desired group code'''\n    \n    # Retrieve a sample of 6 images from this group\n    sample_names = train_df[train_df[\"label_group\"] == group_name][\"image\"].\\\n                    sample(6, random_state=24).values\n    sample_text = train_df[train_df[\"label_group\"] == group_name][\"title\"].\\\n                    sample(1, random_state=1).values\n\n    # Plot\n    fig = plt.figure(figsize=(16, 8))\n    plt.suptitle(f\"Group: {sample_group}\", fontsize=20)\n    plt.title(f\"{sample_text}\", fontsize=15)\n    plt.axis(\"off\")\n    for k, name in enumerate(sample_names):\n        image = cv2.imread(train_base + \"\/\" + name)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n        fig.add_subplot(2, 3, k+1)\n        plt.imshow(image)\n        plt.axis(\"off\")\n    \n    plt.show();","3fe3edef":"sample_group = groups_df[\"group\"][199]\nget_group_info(group_name=sample_group)","19b7c79f":"\nsample_group = groups_df[\"group\"][91]\nget_group_info(group_name=sample_group)","4e6b0407":"sample_group = groups_df[\"group\"][200]\nget_group_info(group_name=sample_group)","986a6f02":"sample_group = groups_df[\"group\"][20]\nget_group_info(group_name=sample_group)","5789ce36":"sample_group = groups_df[\"group\"][2]\nget_group_info(group_name=sample_group)","d8d8f9bb":"sample_group = groups_df[\"group\"][30]\nget_group_info(group_name=sample_group)","721b477f":"sample_group = groups_df[\"group\"][40]\nget_group_info(group_name=sample_group)","a4e85e50":"data=pd.read_csv('..\/input\/shopee-product-matching\/sample_submission.csv')","6474623e":"data[['posting_id','matches']].to_csv('submission.csv',index=False)\nprint(\"Submission Ready :)\")","033ae81b":"1. <center><h1 style =\"background-color:blue\">Some of example to show this codes whtat do mean<\/h1><\/center>\n ","3ad1e7bb":"more example","5df0529e":"1. <center><h1 style =\"background-color:blue\">get data train<\/h1><\/center>","c907976a":"# Example 2","70792890":"1. <center><h1 style =\"background-color:red\">make function show _value_on_bars<\/h1><\/center>","43add9f6":"Another product","c919bfd4":"first Example","21eab264":"\n1. <center><h1 style =\"background-color:blue\">Show a duplicated image<\/h1><\/center>","1669a0ed":"make a lable of group","53a50ad5":"1. <center><h1 style =\"background-color:blue\">make another function for showing image and information<\/h1><\/center>","dfef373d":"make a clean some of daublicate","2ad874a0":"\n![shope](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRaj2DHAhvHURM-op2wofx_g8rPWpvn8CCrgw&usqp=CAU)","a543f467":"# Show some of product ","3865e187":"1. <center><h1 style =\"background-color:blue\">Import some backge<\/h1><\/center>"}}