{"cell_type":{"fcfcc3cd":"code","47531493":"code","cdfed91f":"code","d9bf4f2e":"code","28fc940a":"code","7ffe928c":"code","d9ace99e":"code","1821d2a8":"code","f670a0d1":"code","df4f4d3d":"code","2afa6c48":"code","5034070b":"code","efd05dc4":"code","7b1acc8f":"code","bfed0759":"code","ff8b93c2":"code","55c46c74":"code","76d87eff":"code","6bf97f1e":"code","ff2057fc":"code","ad6ba4fb":"code","487cd3d3":"markdown","6f865532":"markdown","5cb47688":"markdown","b18d66e7":"markdown"},"source":{"fcfcc3cd":"# Importing the libraries\nimport numpy as np\nimport pandas as pd","47531493":"# Importing the dataset\ndataset = pd.read_csv('..\/input\/social-network-ads\/Social_Network_Ads.csv')\nX = dataset.iloc[:,[2,3]].values\ny = dataset.iloc[:,4].values","cdfed91f":"# Splitting the dataset in to training and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.25,random_state=0)","d9bf4f2e":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","28fc940a":"# Fitting Logistic Regression to the training set\nfrom sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state=0)\nclassifier.fit(X_train,y_train)","7ffe928c":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)","d9ace99e":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,y_pred)","1821d2a8":"print(cm)","f670a0d1":"# Fitting KNN classifier to the training set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier2 = KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)\nclassifier2.fit(X_train,y_train)","df4f4d3d":"# Predicting the Test set results\ny_pred2 = classifier2.predict(X_test)","2afa6c48":"# Making the Confusion Matrix\ncm2 = confusion_matrix(y_test,y_pred2)","5034070b":"print(cm2)","efd05dc4":"# Fitting SVM to the training set\nfrom sklearn.svm import SVC\n# linear kernel\nclassifier3 = SVC(kernel='linear',random_state=0)\nclassifier3.fit(X_train,y_train)","7b1acc8f":"# Predicting the Test set results\ny_pred3 = classifier3.predict(X_test)","bfed0759":"# Making the Confusion Matrix\ncm3 = confusion_matrix(y_test,y_pred3)\nprint(cm3)","ff8b93c2":"# using rbf kernel\nclassifier4 = SVC(kernel='rbf',random_state=0)\nclassifier4.fit(X_train,y_train)","55c46c74":"# Predicting the Test set results\ny_pred4 = classifier4.predict(X_test)","76d87eff":"# Making the Confusion Matrix\ncm4 = confusion_matrix(y_test,y_pred4)\nprint(cm4)","6bf97f1e":"# Applying k-Fold Cross Validation\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=classifier4,X=X_train,y=y_train,cv=10)\nprint(accuracies.mean())\nprint(accuracies.std())","ff2057fc":"# Applying Grid Search to find the best model and the best parameters\nfrom sklearn.model_selection import GridSearchCV\nparameters = [\n    {'C':[1,10,100,1000],'kernel':['linear']},\n    {'C':[1,10,100,1000],'kernel':['rbf'],'gamma':[0.5,0.1,0.01,0.001,0.0001]},\n]\ngrid_search = GridSearchCV(estimator=classifier4,\n                          param_grid=parameters,\n                          scoring='accuracy',\n                           cv=10,\n                           n_jobs=-1\n                          )\ngrid_search = grid_search.fit(X_train,y_train)","ad6ba4fb":"best_accuracy = grid_search.best_score_\nbest_parameters = grid_search.best_params_\nprint(f\"Best Accuracy - {best_accuracy}\")\nprint(f\"Best Parameters - {best_parameters}\")","487cd3d3":"# Logistic Regression","6f865532":"# SVC with rbf kernel","5cb47688":"# KNN classifier","b18d66e7":"# SVC with linear kernel"}}