{"cell_type":{"45f2c822":"code","cacb880e":"code","827a08a7":"code","4ae751cc":"code","815d4df8":"code","7e27b644":"code","f13c3722":"code","68773b54":"code","e0adb254":"code","dd08355d":"code","50bb9584":"code","2dda024b":"code","ffca72ee":"code","d97e0cf0":"markdown","2de72eb4":"markdown","9db4010b":"markdown","2536baab":"markdown","69123edd":"markdown","27b16aa8":"markdown","9561e1a0":"markdown"},"source":{"45f2c822":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D","cacb880e":"data = pd.read_csv(\"..\/input\/trainData3D.csv\")\ndx = data.X.values \ndy = data.Y.values\ndz = data.Z.values\nX = np.append(dx.reshape(-1,1),dy.reshape(-1,1), axis =1)\nY = dz\nX.shape, Y.shape","827a08a7":"ax = Axes3D(plt.figure())\nax.scatter(X[:,0],X[:,1],Y)\nax","4ae751cc":"def getW(X,q,tau):\n    \n    #Create W\n    m = X.shape[0]\n    W = np.eye(m) \n    \n    for i in range(m):\n        W[i,i] = np.exp(-np.dot((X[i]-q),(X[i]-q).T)\/(2*tau*tau))\n    \n    return W\n    \ndef getTheta(X,Y,q,tau):\n    m = X.shape[0]\n    ones = np.ones((m,1))\n    q = np.append(np.array([1]), q, axis = 0)\n    X = np.append(ones, X, axis = 1)\n    W = getW(X,q,tau)\n    Y = Y.reshape((-1,1))\n    \n    theta = np.dot(np.linalg.pinv(np.dot(np.dot(X.T,W),X)),np.dot(np.dot(X.T,W),Y))\n    return theta,W\n    \n    ","815d4df8":"theta,W = getTheta(X,Y,[0.6,0.7],0.1)","7e27b644":"print(theta.shape)\nprint(W)","f13c3722":"# X_Test = np.linspace(-20,20,100)\nX_Test = pd.read_csv(\"..\/input\/testData3D.csv\").values\n# print(X_Test)\nY_Test = []\n\nfor xt in X_Test:\n#     print(xt)\n    theta,W = getTheta(X,Y,xt,0.73)\n#     print(xt)\n    pred = theta[0][0]*1 + theta[1][0]*xt[0] + theta[2][0]*xt[1]\n    Y_Test.append(pred)\n    \nY_Test = np.array(Y_Test)\nY_actual = pd.read_csv(\"..\/input\/actualYTest3D.csv\").values\nY_Test.shape, Y_actual.shape","68773b54":"from sklearn.metrics import r2_score\nr2_score(Y_actual,Y_Test)\n","e0adb254":"\nax = Axes3D(plt.figure())\nax.scatter(\n    X_Test[:,0],\n    X_Test[:,1],\n    Y_actual.reshape(-1,1)\n)\nplt.title(\"Redrawn predictions!\")\n\nX_Test[:,1].shape,X_Test[:,0].shape, Y.shape","dd08355d":"from sklearn.model_selection import train_test_split as tts\nxtrain,xtest,ytrain,ytest = tts(X,Y, random_state = 1)\n","50bb9584":"from sklearn.linear_model import LinearRegression as LR\nreg = LR()\nreg.fit(xtrain,ytrain)\nreg.score(xtest,ytest)","2dda024b":"from sklearn.svm import SVR\nreg = SVR()\nreg.fit(xtrain,ytrain)\nreg.score(xtest,ytest)","ffca72ee":"from sklearn.ensemble import GradientBoostingRegressor as GBR\nreg = GBR()\nreg.fit(xtrain,ytrain)\nreg.score(xtest,ytest)","d97e0cf0":"# Locally weighted really performs well, it adapts to the function quickly.\n\nOne thing you will notice is that as you increase tau, the training accuracy is actually behaving abnormally. There is a good reason for that. Can you figure it out?\n\nHint: Implement linear regression to see","2de72eb4":"# Can you figure out why support vector regressor performs so badly?\n#### Hint, draw plot, see decision boundary","9db4010b":"# Just another ensemble technique you can read about.","2536baab":"Above is weighted_regression in practice. It is a deterministic approach.","69123edd":"# Can you figure out why linear regression works so well?","27b16aa8":"# Clearly, locally weighted regression is one solution","9561e1a0":"# Visualizing the dataset"}}