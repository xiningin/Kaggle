{"cell_type":{"9eacf84e":"code","b1d49f31":"code","a06adff2":"code","bdf1bf47":"code","93796850":"code","ae8b95a0":"code","78b31301":"code","8ad2a162":"code","1feb1f8a":"code","f76b823d":"code","f0507f7c":"code","9b5ffe18":"code","fc787e06":"code","f391e776":"code","48491c80":"code","b92c0199":"code","3e065ddf":"code","e8876065":"code","bd9ff94f":"code","bf6eef48":"code","952ca60e":"code","be138dae":"markdown","a6997a39":"markdown","6449c6fb":"markdown","fb6be2d5":"markdown","d7d9c7fe":"markdown","74b5c941":"markdown","894d28e6":"markdown"},"source":{"9eacf84e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1d49f31":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cluster import KMeans\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,confusion_matrix","a06adff2":"data = pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\ndata.head(5)","bdf1bf47":"bins = (2,6.5,8)\nlabels = ['bad','good']\ndata['quality'] = pd.cut(data['quality'],bins=bins,labels=labels)","93796850":"data['quality']","ae8b95a0":"le = LabelEncoder()\ndata['quality'] = le.fit_transform(data['quality'])","78b31301":"X = data.drop('quality',axis=1).values\ny = data['quality'].values.reshape(-1,1)","8ad2a162":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)","1feb1f8a":"print(\"X_train shape: \",X_train.shape)\nprint(\"X_test shape: \",X_test.shape)\nprint(\"y_train shape: \",y_train.shape)\nprint(\"y_test shape: \",y_test.shape)","f76b823d":"lreg = LogisticRegression().fit(X_train,y_train)","f0507f7c":"lreg_pred = lreg.predict(X_test)","9b5ffe18":"lreg_cm = confusion_matrix(lreg_pred,y_test)\nax = sns.heatmap(lreg_cm,annot=True)\nax.set(xlabel='predict', ylabel='true')\nlreg_as = accuracy_score(lreg_pred,y_test)\nprint(\"logistic regression accuracy score: \",lreg_as)","fc787e06":"KN = KNeighborsClassifier(n_neighbors=5)","f391e776":"KN.fit(X_train,y_train)","48491c80":"kn_pred = KN.predict(X_test)","b92c0199":"kn_pred","3e065ddf":"kn_cm = confusion_matrix(kn_pred,y_test)\nax = sns.heatmap(kn_cm,annot=True)\nax.set(xlabel='predict', ylabel='true')\nkn_as = accuracy_score(kn_pred,y_test)\nprint(\"KNearest neighbors accuracy score: \",kn_as)","e8876065":"kmeans = KMeans(n_clusters=2).fit(X_test)","bd9ff94f":"kmeans_predict = kmeans.predict(X_test)","bf6eef48":"km_cm = confusion_matrix(kmeans_predict,y_test)\nax = sns.heatmap(km_cm,annot=True)\nax.set(xlabel='predict', ylabel='true')\nkm_as = accuracy_score(kmeans_predict,y_test)\nprint(\"KMeans clustering accuracy score: \",km_as)","952ca60e":"plt.scatter(X_test[kmeans_predict == 0, 0], X_test[kmeans_predict == 0, 1], s = 100, c = 'red', label = 'Cluster 0')\nplt.scatter(X_test[kmeans_predict == 1, 0], X_test[kmeans_predict == 1, 1], s = 100, c = 'blue', label = 'Cluster 1')\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'yellow', label = 'Centroids')\n\nplt.legend()\nplt.show()","be138dae":"# kmeans clustering","a6997a39":"# k nearest neighbors classification","6449c6fb":"# Verdict","fb6be2d5":"binning the quality data to bad and good","d7d9c7fe":"Judging from the plots above, I'd say that Logistic Regression is the clear winner!\n\nBut K-Means Clustering didn't do too bad either; especially when you consider the fact that it's not built for the task of supervised learning, like Logistic Regression is!\n\nBut KMeans Clustering did bad. It is not a good idea to use KMeans clustering in this scenerio","74b5c941":"## read the dataframe","894d28e6":"# Logistic Regression"}}