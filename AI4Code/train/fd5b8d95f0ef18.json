{"cell_type":{"a3cf2c75":"code","080ed8f3":"code","33db0e44":"code","82b4f119":"code","5f917043":"code","102caa32":"code","7ebc0ed9":"code","d6e5083d":"code","cbda1341":"code","6f443f10":"code","0171829d":"code","2f61f721":"code","9360153a":"code","fa0bd788":"code","64c8e1a2":"code","c6422b0d":"code","05b814ee":"code","ddc74861":"code","3ae15245":"code","b7c0125a":"code","53cd4e7e":"code","43cb3e8a":"code","9b22da3e":"code","247c4c1f":"code","1e2f2fd9":"code","f582f495":"code","2295d48e":"code","04032b3d":"code","be8adcd2":"code","43e886da":"code","628f70e4":"code","0f50ae2a":"code","ae2ceb28":"code","50fe46e5":"code","a93741e9":"code","52a68fe2":"code","1cd0937c":"code","092d603d":"code","99a18239":"code","7caae8bd":"code","3c554b82":"code","5bb59475":"code","d9a0e6bd":"code","627bec37":"code","41daab5a":"code","c0775b09":"code","f35d1828":"code","4518ce67":"code","d5054645":"code","0708db97":"code","ff0556d8":"markdown","6501f995":"markdown","b7340298":"markdown","6cbcb2ab":"markdown","a3686834":"markdown","008a8279":"markdown","b68acf28":"markdown","a564cb49":"markdown","d34c1db8":"markdown","5cbd6f62":"markdown","223fdfa5":"markdown","7d8ebdaa":"markdown","aa040065":"markdown","dbd1a8c1":"markdown","d647647c":"markdown","15a3f77e":"markdown","2790192a":"markdown","a9559284":"markdown","8f9db4d2":"markdown","92de16a2":"markdown","30a96208":"markdown","572e2500":"markdown","0f140f1b":"markdown","059b01c7":"markdown","70e1f937":"markdown"},"source":{"a3cf2c75":"import time\nimport lightgbm\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.metrics import f1_score\nfrom sklearn.manifold import TSNE\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\n\nfrom sklearn.metrics import classification_report\n\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\nfrom sklearn.feature_selection import chi2\nfrom sklearn.preprocessing import MinMaxScaler","080ed8f3":"# matplotlib\nplt.style.use('seaborn-whitegrid')\n%config InlineBackend.figure_format = 'retina'\nmatplotlib.rcParams.update({'font.size': 14})\n\n# pandas\npd.set_option('float_format', '{:f}'.format)","33db0e44":"data = pd.read_csv('\/kaggle\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv')\ndata.head(10)","82b4f119":"data.describe().T","5f917043":"print('\\033[1m Check none values \\033[0m')\n# check Nones\ndata.isna().sum()","102caa32":"# change target column name\ndata = data.rename(\n    columns={'default.payment.next.month': 'Target'}\n)","7ebc0ed9":"fig, axis = plt.subplots(1, 2, figsize=(18, 8))\nsns.countplot(data['MARRIAGE'], ax=axis[0])\nsns.countplot(data['EDUCATION'], ax=axis[1])","d6e5083d":"fig, axis = plt.subplots(2, 3, figsize=(18, 9))\nsns.countplot('PAY_0', ax=axis[0, 0], data=data)\nsns.countplot('PAY_2', ax=axis[0, 1], data=data)\nsns.countplot('PAY_3', ax=axis[0, 2], data=data)\nsns.countplot('PAY_4', ax=axis[1, 0], data=data)\nsns.countplot('PAY_5', ax=axis[1, 1], data=data)\nsns.countplot('PAY_6', ax=axis[1, 2], data=data)","cbda1341":"fig, axis = plt.subplots(1, 2, figsize=(18, 8))\nsns.distplot(data['AGE'], ax=axis[0], norm_hist=False, kde=False)\nsns.countplot(data['SEX'], ax=axis[1])","6f443f10":"# fix issues of labeling \n\n# assign 0 class to 3rd class\ndata['MARRIAGE'] = data['MARRIAGE'].replace({0: 3})\n\n# assign 6 and 0 class to 5th class\ndata['EDUCATION'] = data['EDUCATION'].replace({6: 5, 0: 5})\n\n# iterate over columns and assign -1, and -2 class to 0\nfor column in ['PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']:\n    data[column] = data[column].replace({-1: 0, -2: 0})","0171829d":"fig, axis = plt.subplots(2, 3, figsize=(24, 15))\n\nsns.distplot(data['BILL_AMT1'], ax=axis[0, 0], kde=False, norm_hist=False, bins=20)\nsns.distplot(data['BILL_AMT2'], ax=axis[0, 1], kde=False, norm_hist=False, bins=20)\nsns.distplot(data['BILL_AMT3'], ax=axis[0, 2], kde=False, norm_hist=False, bins=20)\n\nsns.boxplot(data['BILL_AMT1'], ax=axis[1, 0])\nsns.boxplot(data['BILL_AMT2'], ax=axis[1, 1])\nsns.boxplot(data['BILL_AMT3'], ax=axis[1, 2])","2f61f721":"fig, axis = plt.subplots(2, 3, figsize=(24, 15))\n\nsns.distplot(data['BILL_AMT4'], ax=axis[0, 0], kde=False, norm_hist=False, bins=20)\nsns.distplot(data['BILL_AMT5'], ax=axis[0, 1], kde=False, norm_hist=False, bins=20)\nsns.distplot(data['BILL_AMT6'], ax=axis[0, 2], kde=False, norm_hist=False, bins=20)\n\nsns.boxplot(data['BILL_AMT4'], ax=axis[1, 0])\nsns.boxplot(data['BILL_AMT5'], ax=axis[1, 1])\nsns.boxplot(data['BILL_AMT6'], ax=axis[1, 2])","9360153a":"fig, axis = plt.subplots(2, 3, figsize=(24, 15))\nprint(\"\\033[1m Distribution of PAY_AMT 1-3 \\033[0m\")\nsns.distplot(data['PAY_AMT1'], ax=axis[0, 0], kde=False, norm_hist=False)\nsns.distplot(data['PAY_AMT2'], ax=axis[0, 1], kde=False, norm_hist=False)\nsns.distplot(data['PAY_AMT3'], ax=axis[0, 2], kde=False, norm_hist=False)\n\nsns.boxplot(data['PAY_AMT1'], ax=axis[1, 0])\nsns.boxplot(data['PAY_AMT2'], ax=axis[1, 1])\nsns.boxplot(data['PAY_AMT3'], ax=axis[1, 2])","fa0bd788":"fig, axis = plt.subplots(2, 3, figsize=(24, 15))\nprint(\"\\033[1m Distribution of PAY_AMT 4-6 \\033[0m\")\n\nsns.distplot(data['PAY_AMT4'], ax=axis[0, 0], kde=False, norm_hist=False)\nsns.distplot(data['PAY_AMT5'], ax=axis[0, 1], kde=False, norm_hist=False)\nsns.distplot(data['PAY_AMT6'], ax=axis[0, 2], kde=False, norm_hist=False)\n\nsns.boxplot(data['PAY_AMT4'], ax=axis[1, 0])\nsns.boxplot(data['PAY_AMT5'], ax=axis[1, 1])\nsns.boxplot(data['PAY_AMT6'], ax=axis[1, 2])","64c8e1a2":"filtered_data = list(\n    data[column][data[column] <= data[column].quantile(0.75)]\n    for column in ['PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']\n)\n\nfig, axis = plt.subplots(2, 3, figsize=(24, 15))\nprint(\"\\033[1m \u0420\u043e\u0437\u043f\u043e\u0434\u0456\u043b \u0437\u043d\u0430\u0447\u0435\u043d\u044c PAY_AMT 1-3 \\033[0m\")\n\nsns.distplot(filtered_data[0], ax=axis[0, 0], kde=False, norm_hist=False)\nsns.distplot(filtered_data[1], ax=axis[0, 1], kde=False, norm_hist=False)\nsns.distplot(filtered_data[2], ax=axis[0, 2], kde=False, norm_hist=False)\n\nsns.boxplot(filtered_data[0], ax=axis[1, 0])\nsns.boxplot(filtered_data[1], ax=axis[1, 1])\nsns.boxplot(filtered_data[2], ax=axis[1, 2])","c6422b0d":"fig, axis = plt.subplots(2, 3, figsize=(24, 15))\nprint(\"\\033[1m \u0420\u043e\u0437\u043f\u043e\u0434\u0456\u043b \u0437\u043d\u0430\u0447\u0435\u043d\u044c PAY_AMT 4-6 \\033[0m\")\n\nsns.distplot(filtered_data[3], ax=axis[0, 0], kde=False, norm_hist=False)\nsns.distplot(filtered_data[4], ax=axis[0, 1], kde=False, norm_hist=False)\nsns.distplot(filtered_data[5], ax=axis[0, 2], kde=False, norm_hist=False)\n\nsns.boxplot(filtered_data[3], ax=axis[1, 0])\nsns.boxplot(filtered_data[4], ax=axis[1, 1])\nsns.boxplot(filtered_data[5], ax=axis[1, 2])","05b814ee":"correlation = data.corr()\n\nmask = np.zeros_like(\n    correlation,\n    dtype=np.bool\n)\nmask[np.triu_indices_from(mask)] = True\n\nf, ax = plt.subplots(figsize=(25, 25))\n\nsns.heatmap(\n    correlation,\n    xticklabels=correlation.columns,\n    yticklabels=correlation.columns,\n    linewidths=.1,\n    vmin=-1,\n    vmax=1,\n    annot=True,\n    mask=mask\n)","ddc74861":"# encode\ndata = pd.get_dummies(data, columns=['SEX', 'MARRIAGE', 'EDUCATION'])","3ae15245":"# drop junk columns\ndata = data.drop(columns=['SEX_2', 'ID'])","b7c0125a":"pd.set_option('display.max_columns', 50)\ndata.head(10)","53cd4e7e":"# select columns for visualization\ndata_tmp_1 = data[['LIMIT_BAL', 'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']]\ndata_tmp_2 = data[['BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'AGE']]","43cb3e8a":"sns.pairplot(data_tmp_1)","9b22da3e":"sns.pairplot(data_tmp_2)","247c4c1f":"plt.figure(figsize=(18, 8))\nsns.countplot(data['Target'])","1e2f2fd9":"Y = data['Target']  # select target \nX = data[data.columns.difference(['Target'])]  # select features","f582f495":"scaler = MinMaxScaler()\n\nfor column in X.columns:\n    X[column] = scaler.fit_transform(np.array(X[column]).reshape(-1,1))","2295d48e":"X.head(10)","04032b3d":"selector_chi = SelectKBest(chi2, k=10)  # using Chi2 select 10 best features\nselector_chi.fit(X, Y)\nfeatures_1_scores = selector_chi.scores_\nfeatures_1 = list(X.columns[selector_chi.get_support(indices=True)])\n\nplt.figure(figsize=(18, 8))\nfeatures_scores = pd.DataFrame({'features': X.columns.tolist(), 'scores': features_1_scores})\nsns.barplot('features', 'scores', data=features_scores, order=features_scores.sort_values('scores')['features'])\nplt.title('Best features - Chi2')\nplt.ylabel('Score')\nplt.xticks(list(range(len(features_1_scores))), X.columns.tolist(), rotation=45)\nplt.show()","be8adcd2":"selector = SelectKBest(f_classif, k=10)  # using f_classif select 10 best features\nselector.fit(X, Y)\nfeatures_2_scores = selector.scores_\nfeatures_2 = list(X.columns[selector.get_support(indices=True)])\n\nplt.figure(figsize=(18, 8))\nfeatures_scores = pd.DataFrame({'features': X.columns.tolist(), 'scores': features_2_scores})\nsns.barplot('features', 'scores', data=features_scores, order=features_scores.sort_values('scores')['features'])\nplt.title('Best features - ANOVA F-value')\nplt.ylabel('Score')\nplt.xticks(list(range(len(features_2_scores))), X.columns.tolist(), rotation=45)\nplt.show()","43e886da":"features = set(features_1 + features_2)\nfeatures","628f70e4":"# select only best features\nX = X[features]","0f50ae2a":"X_train, X_dev, y_train, y_dev = train_test_split(X, Y, test_size=0.3, stratify=Y)\nX_dev, X_test, y_dev, y_test = train_test_split(X_dev, y_dev, test_size=0.5, stratify=y_dev)","ae2ceb28":"fig, axis = plt.subplots(1, 3, figsize=(25, 8))\n\nsns.countplot(y_train, ax=axis[0], label='train')\nsns.countplot(y_dev, ax=axis[1], label='dev')\nsns.countplot(y_test, ax=axis[2], label='test')\naxis[0].set_title('train')\naxis[1].set_title('dev')\naxis[2].set_title('test')\nplt.show()","50fe46e5":"# list of models\nmodels = [\n    LogisticRegression(solver=\"liblinear\"),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(n_estimators=10),\n    XGBClassifier(),\n    GradientBoostingClassifier(),\n    LGBMClassifier(),\n]","a93741e9":"auc_scores = []\ncv_scores = []\nacc_scores = []\n\n# iterate over models\nfor model in models:\n    \n    # fit model\n    model.fit(X_train, y_train)\n    \n    # predict on dev\n    prediction = model.predict(X_dev)\n    \n    # predict probability on dev\n    probability = model.predict_proba(X_dev)\n    \n    # get AUC\n    auc = roc_auc_score(y_dev, probability[:,1])\n    \n    # get CV score on train\n    cv_score = cross_val_score(model, X_train, y_train, cv=10).mean()\n    \n    # get acc\n    score = accuracy_score(y_dev, prediction)\n    \n    # get report\n    report = classification_report(y_dev, prediction, zero_division=1)\n    \n    # print report\n    name = str(model)\n    print(name[0:name.find(\"(\")])\n    \n    print(\"Accuracy :\", score)\n    print(\"CV Score :\", cv_score)\n    print(\"AUC Score : \", auc)\n    print(report)\n    print(confusion_matrix(y_dev, prediction))\n    print(\" \\033[1m ------------------------------------------------------------ \\033[0m \")\n    \n    auc_scores.append(auc)\n    cv_scores.append(cv_score)\n    acc_scores.append(score)","52a68fe2":"metrics = pd.DataFrame({\n    'AUC': auc_scores,\n    'CV Score': cv_scores,\n    'Accuracy': acc_scores,\n    'name': ['LogisticRegression',\n             'DecisionTreeClassifier',\n             'RandomForestClassifier',\n             'XGBClassifier',\n             'GradientBoostingClassifier',\n             'LGBMClassifier']\n})","1cd0937c":"fig, axis = plt.subplots(3, 1, figsize=(25, 25))\n\nsns.barplot(x='name', y='AUC', data=metrics, order=metrics.sort_values('AUC')['name'], ax=axis[0])\nsns.barplot(x='name', y='CV Score', data=metrics, order=metrics.sort_values('CV Score')['name'], ax=axis[1])\nsns.barplot(x='name', y='Accuracy', data=metrics, order=metrics.sort_values('Accuracy')['name'], ax=axis[2])\nplt.show()","092d603d":"lgbm_params = {\"n_estimators\" : [100, 500, 1000],\n               \"num_leaf\": [5, 15, 25, 30],\n               \"subsample\" : [0.6, 0.8, 1.0],\n               \"learning_rate\" : [0.1, 0.01, 0.02],\n               \"min_child_samples\" : [5, 10, 20]}","99a18239":"lgbm_model = LGBMClassifier()\n\nlgbm_cv_model = GridSearchCV(\n    lgbm_model, \n    lgbm_params, \n    cv=5,\n    verbose=1,\n    n_jobs=-1)","7caae8bd":"lgbm_cv_model.fit(X_train, y_train)","3c554b82":"print('Best params LightGBM')\nbest_params = lgbm_cv_model.best_params_\nbest_params","5bb59475":"auc_scores = []\nf1_scores = []\ncv_scores = []\nacc_scores = []","d9a0e6bd":"# train LightGBM with best params and predict on test\n\nmodel = LGBMClassifier(\n**best_params\n)\n\n# fit model\nmodel.fit(X_train, y_train)\n\n# predict on dev\nprediction = model.predict(X_test)\n\n# predict probability on dev\nprobability = model.predict_proba(X_test)\n\n# get AUC\nauc = roc_auc_score(y_test, probability[:,1])\n\n# get CV score on train\ncv_score = cross_val_score(model, X_train, y_train, cv=10).mean()\n\n# get acc\nscore = accuracy_score(y_test, prediction)\n\n# get report\nreport = classification_report(y_test, prediction, zero_division=1)\n\n\nprint(\"Accuracy :\", score)\nprint(\"CV Score :\", cv_score)\nprint(\"AUC Score : \", auc)\nprint(report)\nprint(confusion_matrix(y_test, prediction))\nprint(\" \\033[1m ------------------------------------------------------------ \\033[0m \")\n\n\nauc_scores.append(auc)\nacc_scores.append(score)\ncv_scores.append(cv_score)\nf1_scores.append(f1_score(y_test, prediction))","627bec37":"gb_params = parameters = {\n    \"learning_rate\": [0.01, 0.05, 0.075, 0.1],\n    \"min_samples_leaf\": np.linspace(0.1, 0.5, 4),\n    \"max_depth\":[3,5,8],\n    \"max_features\":[\"log2\",\"sqrt\"],\n    \"subsample\":[0.5, 0.6, 0.8],\n    \"n_estimators\":[10, 30, 60, 90]\n    }","41daab5a":"gb_model = GradientBoostingClassifier()\n\ngb_cv_model = GridSearchCV(\n    gb_model, \n    gb_params, \n    cv=5,\n    verbose=1,\n    n_jobs=-1)","c0775b09":"gb_cv_model.fit(X_train, y_train)\nprint(' ')","f35d1828":"print('Best params Gradient Boosting')\nbest_params = gb_cv_model.best_params_\nbest_params","4518ce67":"# train GradientBoosting with best params and predict on test\n\nmodel = GradientBoostingClassifier(\n**best_params\n)\n\n# fit model\nmodel.fit(X_train, y_train)\n\n# predict on dev\nprediction = model.predict(X_test)\n\n# predict probability on dev\nprobability = model.predict_proba(X_test)\n\n# get AUC\nauc = roc_auc_score(y_test, probability[:,1])\n\n# get CV score on train\ncv_score = cross_val_score(model, X_train, y_train, cv=10).mean()\n\n# get acc\nscore = accuracy_score(y_test, prediction)\n\n# get report\nreport = classification_report(y_test, prediction, zero_division=1)\n\n\nprint(\"Accuracy :\", score)\nprint(\"CV Score :\", cv_score)\nprint(\"AUC Score : \", auc)\nprint(report)\nprint(confusion_matrix(y_test, prediction))\nprint(\" \\033[1m ------------------------------------------------------------ \\033[0m \")\n\n\nauc_scores.append(auc)\nacc_scores.append(score)\ncv_scores.append(cv_score)\nf1_scores.append(f1_score(y_test, prediction))","d5054645":"metrics = pd.DataFrame({\n    'AUC': auc_scores,\n    'Accuracy': acc_scores,\n    'F1': f1_scores,\n    'CV Score': cv_scores,\n    'name': ['LGBMClassifier',\n             'GradientBoostingClassifier']\n})","0708db97":"fig, axis = plt.subplots(4, 1, figsize=(25, 25))\n\nsns.barplot(x='name', y='AUC', data=metrics, order=metrics.sort_values('AUC')['name'], ax=axis[0])\nsns.barplot(x='name', y='CV Score', data=metrics, order=metrics.sort_values('CV Score')['name'], ax=axis[1])\nsns.barplot(x='name', y='Accuracy', data=metrics, order=metrics.sort_values('Accuracy')['name'], ax=axis[2])\nsns.barplot(x='name', y='F1', data=metrics, order=metrics.sort_values('Accuracy')['name'], ax=axis[3])\nplt.show()","ff0556d8":"### Gradient Boosting ","6501f995":"#### Matrix of correlation","b7340298":"#### Visualization of noncategorical features\n#### Distribution visualization BILL_AMT ","6cbcb2ab":"#### Features normalization","a3686834":"### LightGBM","008a8279":"#### Load data","b68acf28":"### Import and configs","a564cb49":"#### Features selection","d34c1db8":"#### Encoding of categorical features (One Hot)","5cbd6f62":"#### Metrics visualization (test data)","223fdfa5":"#### Visualization of linear dependencies","7d8ebdaa":"#### Fixing issues of data","aa040065":"#### Metrics visualiztion\n","dbd1a8c1":"<style type=\"text\/css\">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}\n.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n<\/style>\n<table class=\"tg\">\n<thead>\n  <tr>\n    <th class=\"tg-c3ow\">\u041d\u0430\u0437\u0432\u0430 \u043e\u0437\u043d\u0430\u043a\u0438 (Features)<\/th>\n    <th class=\"tg-c3ow\">\u041e\u043f\u0438\u0441 \u043e\u0437\u043d\u0430\u043a\u0438 (Features Description)<\/th>\n  <\/tr>\n<\/thead>\n<tbody>\n  <tr>\n    <td class=\"tg-c3ow\">ID<\/td>\n    <td class=\"tg-0pky\">\u0406\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0456\u0454\u043d\u0442\u0430 (\u0443\u043d\u0456\u043a\u0430\u043b\u044c\u043d\u0438\u0439)<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">LIMIT_BAL<br><\/td>\n    <td class=\"tg-0pky\">\u0421\u0443\u043c\u0430 \u043d\u0430\u0434\u0430\u043d\u043e\u0433\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443 \u0432 \u0434\u043e\u043b\u0430\u0440\u0430\u0445 (\u0432\u043a\u043b\u044e\u0447\u0430\u0454 \u0456\u043d\u0434\u0438\u0432\u0456\u0434\u0443\u0430\u043b\u044c\u043d\u0438\u0439 \u0442\u0430 \u0441\u0456\u043c\u0435\u0439\u043d\u0438\u0439 \/ \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442)<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">SEX<\/td>\n    <td class=\"tg-0pky\">\u0421\u0442\u0430\u0442\u044c<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">EDUCATION<\/td>\n    <td class=\"tg-0pky\">\u041e\u0441\u0432\u0456\u0442\u0430 (1=\u0430\u0441\u043f\u0456\u0440\u0430\u043d\u0442\u0443\u0440\u0430, 2=\u0443\u043d\u0456\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442, 3=\u0441\u0435\u0440\u0435\u0434\u043d\u044f \u0448\u043a\u043e\u043b\u0430, 4=\u0456\u043d\u0448\u0435, 0,5,6=\u043d\u0435\u0432\u0456\u0434\u043e\u043c\u043e)<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">MARRIAGE<\/td>\n    <td class=\"tg-0pky\">\u0421\u0456\u043c\u0435\u0439\u043d\u0438\u0439 \u0441\u0442\u0430\u043d (1=\u043e\u0434\u0440\u0443\u0436\u0435\u043d\u0438\u0439, 2=\u043d\u0435\u043e\u0434\u0440\u0443\u0436\u0435\u043d\u0438\u0439, 0-3=\u0456\u043d\u0448\u0435)<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">AGE<\/td>\n    <td class=\"tg-0pky\">\u0412\u0456\u043a<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\"><span style=\"font-weight:500;font-style:normal\">PAY_0 - PAY_6<\/span><br><\/td>\n    <td class=\"tg-0pky\">\u0421\u0442\u0430\u0442\u0443\u0441 \u043f\u043e\u0433\u0430\u0448\u0435\u043d\u043d\u044f \u0437 \u043a\u0432\u0456\u0442\u043d\u044f \u043f\u043e \u0432\u0435\u0440\u0435\u0441\u0435\u043d\u044c 2005 \u0440\u043e\u043a\u0443<br>(-2,-1,0=\u043e\u043f\u043b\u0430\u0442\u0430 \u043d\u0430\u043b\u0435\u0436\u043d\u0438\u043c \u0447\u0438\u043d\u043e\u043c, 1=\u0437\u0430\u0442\u0440\u0438\u043c\u043a\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0443 \u043d\u0430 \u043e\u0434\u0438\u043d \u043c\u0456\u0441\u044f\u0446\u044c, 2=\u0437\u0430\u0442\u0440\u0438\u043c\u043a\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0443 \u043d\u0430 \u0434\u0432\u0430 \u043c\u0456\u0441\u044f\u0446\u0456, ... 9=\u0437\u0430\u0442\u0440\u0438\u043c\u043a\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0443 \u043d\u0430 \u0434\u0435\u0432'\u044f\u0442\u044c \u043c\u0456\u0441\u044f\u0446\u0456\u0432)<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">BILL_AMT1 - <span style=\"font-weight:500;font-style:normal\">BILL_AMT6<\/span><br><\/td>\n    <td class=\"tg-0pky\">\u0421\u0443\u043c\u0430 \u0432\u0438\u043f\u0438\u0441\u043a\u0438 \u0437\u0430 \u0432\u0435\u043a\u0441\u0435\u043b\u0435\u043c \u0437 <span style=\"font-weight:400;font-style:normal\">\u043a\u0432\u0456\u0442\u043d\u044f \u043f\u043e \u0432\u0435\u0440\u0435\u0441\u0435\u043d\u044c 2005 \u0440\u043e\u043a\u0443<\/span><br><\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">PAY_AMT1 - PAY_AMT6<\/td>\n    <td class=\"tg-0pky\">\u0421\u0443\u043c\u0430 \u043f\u043e\u043f\u0435\u0440\u0435\u0434\u043d\u044c\u043e\u0433\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0443 \u0437 <span style=\"font-weight:400;font-style:normal\">\u043a\u0432\u0456\u0442\u043d\u044f \u043f\u043e \u0432\u0435\u0440\u0435\u0441\u0435\u043d\u044c 2005 \u0440\u043e\u043a\u0443<\/span><br><\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">default.payment.next.month<\/td>\n    <td class=\"tg-0pky\">\u041f\u043b\u0430\u0442\u0456\u0436 \u0437\u0430 \u0437\u0430\u043c\u043e\u0432\u0447\u0443\u0432\u0430\u043d\u043d\u044f\u043c<\/td>\n  <\/tr>\n<\/tbody>\n<\/table>","d647647c":"### \u041e\u043f\u0438\u0441 \u0434\u0430\u043d\u0438\u0445\n\n\u0414\u0430\u043d\u0438\u0439 \u043d\u0430\u0431\u0456\u0440 \u0434\u0430\u043d\u0438\u0445 \u043c\u0456\u0441\u0442\u0438\u0442\u044c \u0456\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044e \u043f\u0440\u043e \u043f\u043b\u0430\u0442\u0435\u0436\u0456, \u0434\u0435\u043c\u043e\u0433\u0440\u0430\u0444\u0456\u0447\u043d\u0456 \u0444\u0430\u043a\u0442\u043e\u0440\u0438, \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u0456 \u0434\u0430\u043d\u0456, \u0456\u0441\u0442\u043e\u0440\u0456\u044e \u043f\u043b\u0430\u0442\u0435\u0436\u0456\u0432 \u0442\u0430 \u0432\u0438\u043f\u0438\u0441\u043a\u0438 \u0437 \u0440\u0430\u0445\u0443\u043d\u043a\u0456\u0432 \u043a\u043b\u0456\u0454\u043d\u0442\u0456\u0432 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u0438\u0445 \u043a\u0430\u0440\u0442 \u0443 \u0422\u0430\u0439\u0432\u0430\u043d\u0456 \u0437 \u043a\u0432\u0456\u0442\u043d\u044f \u043f\u043e \u0432\u0435\u0440\u0435\u0441\u0435\u043d\u044c 2005\u0440.","15a3f77e":"#### Visualization of Age and Sex distributions","2790192a":"<style type=\"text\/css\">\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-c3ow{border-color:inherit;text-align:center;vertical-align:top}\n.tg .tg-feq9{background-color:#9698ed;border-color:inherit;font-weight:bold;text-align:center;vertical-align:top}\n.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n<\/style>\n<table class=\"tg\">\n<thead>\n  <tr>\n    <th class=\"tg-feq9\">Model<\/th>\n    <th class=\"tg-feq9\">Link<\/th>\n  <\/tr>\n<\/thead>\n<tbody>\n  <tr>\n    <td class=\"tg-c3ow\">Logistic Regression<\/td>\n    <td class=\"tg-0pky\">https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">Decision Tree<\/td>\n    <td class=\"tg-0pky\">https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.DecisionTreeClassifier.html<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">Random Forest<\/td>\n    <td class=\"tg-0pky\">https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.RandomForestClassifier.html<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">XGBoost<\/td>\n    <td class=\"tg-0pky\">https:\/\/xgboost.readthedocs.io\/en\/latest\/<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">Gradient Boosting<\/td>\n    <td class=\"tg-0pky\">https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.GradientBoostingClassifier.html<\/td>\n  <\/tr>\n  <tr>\n    <td class=\"tg-c3ow\">LightGBM<\/td>\n    <td class=\"tg-0pky\">https:\/\/lightgbm.readthedocs.io\/en\/latest\/<\/td>\n  <\/tr>\n<\/tbody>\n<\/table>","a9559284":"#### Use 3rd quantile threshold for filtering PAY_AMT","8f9db4d2":"#### Get a set of these best features","92de16a2":"#### Target visualiztion","30a96208":"# Acknowledgements\nThis kernel uses such good kernels:\n\n[P1 : sklearn SVM Model](https:\/\/www.kaggle.com\/funxexcel\/p1-sklearn-svm-model)\n\n[Credit Card Fraud Detection](https:\/\/www.kaggle.com\/xuanzhihuang\/credit-card-fraud-detection)\n\n[Credits Card Clients | XGBoosting (score 82.6%)](https:\/\/www.kaggle.com\/anantgupt\/credits-card-clients-xgboosting-score-82-6)\n\n[Predictive Credit Default Customer by ANN](https:\/\/www.kaggle.com\/reynoldms\/predictive-credit-default-customer-by-ann)\n\n[Predicting Credit Card Default (auc: 0.793)](https:\/\/www.kaggle.com\/yuankunsong\/predicting-credit-card-default-auc-0-793)\n\n[P1 : sklearn SVM Model](https:\/\/www.kaggle.com\/funxexcel\/p1-sklearn-svm-model)","572e2500":"#### Visualization of categorical features","0f140f1b":"#### Train Dev Test split","059b01c7":"#### Distribution visualization PAY_AMT ","70e1f937":"#### Modeling"}}