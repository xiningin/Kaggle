{"cell_type":{"a51fb4d9":"code","d9bc62d0":"code","8738c6f8":"code","15f6a8b8":"code","2c51c19a":"code","8c2713e9":"code","ce406350":"code","297405de":"code","0256e8d6":"code","e47a10f8":"code","69ea3b2e":"code","637f69d8":"code","04bf5d98":"code","883a30ac":"code","a07f8c9b":"code","a14bfde8":"code","02ef481b":"code","4c05bc33":"code","e4edc331":"code","67d86d6d":"code","966fb8cf":"markdown","d8803281":"markdown","dbde62fa":"markdown","6dc92801":"markdown","f0a7700e":"markdown","7d3bd7c6":"markdown","ad002e2d":"markdown","21d96e50":"markdown","b5456c60":"markdown","137459b2":"markdown","e18e840d":"markdown","d5c0a4e8":"markdown","063419b0":"markdown","866553ee":"markdown","da2a5475":"markdown","8a68489e":"markdown","7b8380f8":"markdown","ec2ffd1e":"markdown","bc3a809b":"markdown"},"source":{"a51fb4d9":"import PIL\nfrom PIL import Image\nImage.open(\"..\/input\/scrnaseq-analysis-model-outputs\/Screenshot 2021-09-20 112018.jpg\")","d9bc62d0":"!pip install -q scanpy\n\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline ","8738c6f8":"bdata = sc.read('..\/input\/scrnaseq-analysis-model-outputs\/test_adata\/test_adata.h5ad')","15f6a8b8":"bdata","2c51c19a":"print(bdata.obs.shape)\nbdata.obs.head()","8c2713e9":"print(bdata.var.shape)\nbdata.var.head()","ce406350":"bdata.var_names  # print names of all the genes","297405de":"bdata.X","0256e8d6":"bdata.obs[\"new_cell_level_data\"] = [\"test\"] * bdata.n_obs  # adds a new column into obs, similar to pandas","e47a10f8":"bdata.obs.head()","69ea3b2e":"# This might take a minute.\ncount_dataframe = pd.read_csv('..\/input\/tabula-muris\/brain_counts.csv',\n                              index_col=0)  # use the first column to label the rows (the 'index')\n\n## print the first 3 rows of our dataframe\ncount_dataframe.head(3)","637f69d8":"# We can find out how many genes and cells are in the dataset by asking for its shape:\nprint(count_dataframe.shape)","04bf5d98":"metadata_dataframe = pd.read_csv('..\/input\/tabula-muris\/brain_metadata.csv', index_col=0)\nprint(metadata_dataframe.shape)\nmetadata_dataframe.head(3)","883a30ac":"# We can count the number of times each value appears in a column:\nprint(pd.value_counts(metadata_dataframe['subtissue']))","a07f8c9b":"adata = sc.AnnData(X = count_dataframe, obs = metadata_dataframe)\nprint(adata.shape)","a14bfde8":"adata.X #Returns the expression matrix of size (3401,23433)","02ef481b":"is_spike_in = {}\nnumber_of_spike_ins = 0\n\nfor gene_name in adata.var_names:\n    if 'ERCC' in gene_name:\n        is_spike_in[gene_name] = True # record that we found a spike-in\n        number_of_spike_ins += 1 # bump up the counter\n    else:\n        is_spike_in[gene_name] = False # record that this was not a spike-in\n        \nadata.var['ERCC'] = pd.Series(is_spike_in) # because the index of adata.var and the keys of is_spike_in match, anndata will take care of matching them up\nprint('found this many spike ins: ', number_of_spike_ins)","4c05bc33":"adata.var.head()","e4edc331":"# We can save the AnnData objectfor later use:\nadata.write('brain_raw.h5ad') ## the h5ad extension is AnnData-specific","67d86d6d":"!zip \"brain_raw.zip\" \".\/brain_raw.h5ad\"","966fb8cf":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Introduction - Anndata<\/h1>","d8803281":"# Tabular Data\n## Constructing AnnData using the two csv files\nWe now have two dataframes, containing the counts and metadata from the Tabula Muris brain dataset. To keep these organized, we'll use a data structure called <b>AnnData<\/b>.","dbde62fa":"Similarly, bdata.var stores information about the genes.","6dc92801":"Thus, metadata_dataframe contains 5 features for each of the 3401 cells in our dataset.","f0a7700e":"<h2 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Preprocessing - Labeling spike-ins<\/h2>","7d3bd7c6":"Therefore, bdata has 30474 rows(cells) and 13553 columns(genes).\nNow let's look at these individually.","ad002e2d":"### Anndata : https:\/\/anndata.readthedocs.io\/en\/latest\/\nAnnData stores observations (samples) of variables\/features in the rows of a matrix. \n\nSingle dimensional annotations of the observation and variables are stored in the obs and var attributes as DataFrames. This is intended for metrics calculated over their axes. Multi-dimensional annotations are stored in obsm and varm, which are aligned to the objects observation and variable dimensions respectively. Square matrices representing graphs are stored in obsp and varp, with both of their own dimensions aligned to their associated axis. Additional measurements across both observations and variables are stored in layers.\n\n- Anndata.X - Data matrix of shape n_obs \u00d7 n_vars - stores the count matrix\n- Anndata.obs - One-dimensional annotation of observations (pd.DataFrame). - stores metadata about the observations (cells)\n- var - One-dimensional annotation of variables\/ features (pd.DataFrame). - stores metadata about the variables (genes)\n- uns - unstructured annotation (ordered dictionary). - stores any additional, unstructured information we decide to attach later","21d96e50":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Creating Anndata from the csv files in the dataset<\/h1>","b5456c60":"bdata.X is a numpy array of Cells X Genes","137459b2":"<h1 style = \"font-family: garamond; font-size: 40px; font-style: normal; letter-spcaing: 3px; background-color: #f6f5f5; color :#fe346e; border-radius: 100px 100px; text-align:center\">Exploring a Test Anndata from SCVI<\/h1>\n\nImmune cells from the murine spleen and lymph nodes [GayosoSteier21] - \nhttps:\/\/docs.scvi-tools.org\/en\/stable\/api\/reference\/scvi.data.spleen_lymph_cite_seq.html#scvi.data.spleen_lymph_cite_seq","e18e840d":"## Loading the Data\n### Brain Counts\nExpression matrix where each column corresponds to a gene (or transcript) and each row corresponds to a single cell.","d5c0a4e8":"### Labeling spike-ins\nBecause this is smartseq2 data, we may have spike-ins. \nAn RNA spike-in is an RNA transcript of known sequence and quantity used to calibrate measurements in RNA hybridization assays, such as DNA microarray experiments, RT-qPCR, and RNA-Seq.\n\nA spike-in is designed to bind to a DNA molecule with a matching sequence, known as a control probe. This process of specific binding is called hybridization. A known quantity of RNA spike-in is mixed with the experiment sample during preparation. The degree of hybridization between the spike-ins and the control probes is used to normalize the hybridization measurements of the sample RNA.\n\n- These gene names start with ERCC. We can label them in adata.var as a gene annotation.","063419b0":"### Installations","866553ee":"We identified all the genes with spike-ins. Further, we added True against them in the Gene information i.e. adata.var and False against non-spike-in genes.","da2a5475":"<br>\n<h1 style = \"font-size:60px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : #fe346e; text-align: center; border-radius: 100px 100px;\">Exploration of Anndata object<\/h1>\n<br>","8a68489e":"### Brain Metadata\nMetadata describes the properties of each cell.","7b8380f8":"As mentioned above, bdata.obs stores metadata about the cells. Therefore, for each of the 30474 cells present, there are 7 features as shown above.","ec2ffd1e":"Since count_dataframe represent cells X genes, we can see that there are 3401 cells and 23433 genes.","bc3a809b":"The column names represent genes. The row names represent unique cell identifiers that were assigned by the authors of the dataset. Thus count_dataframe contains information about the expression of genes in different unique cell types."}}