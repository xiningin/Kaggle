{"cell_type":{"9699fe96":"code","b8ff6368":"code","9c757f42":"code","a93cf167":"code","3054702f":"code","b2f84eb3":"code","7754c159":"code","2da5edd3":"code","75819fb1":"code","80ae329e":"code","fea404c7":"code","deacf35a":"code","d916b4f8":"code","15b93e16":"code","7cf097c2":"code","d78af35f":"code","6d20b572":"code","fc5d2fac":"code","c841c7b1":"code","db1d8862":"code","8f6e4f55":"code","77a981f2":"code","172883cc":"code","1c6e6592":"code","079bd412":"code","df507fa7":"code","bbbdb96d":"code","a479abad":"code","a52585fb":"code","18b61db5":"code","8f0b366f":"code","a56204d8":"code","123b2268":"code","7ed193c0":"code","4956b05e":"code","1d60b218":"code","9d61c0c6":"code","1e274911":"markdown","65d981d2":"markdown"},"source":{"9699fe96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Libraries for data visualizations\nimport matplotlib.pyplot as plt #matplotlib\nimport matplotlib as mpl \nimport seaborn as sns; sns.set() #seaborn\n#import chart_studio.plotly as py # plotly library to make visualizations\nimport plotly.graph_objs as go\nfrom sklearn import linear_model\nimport warnings\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nwarnings.filterwarnings('ignore') #ignoring warnings\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\nimport graphviz\nfrom sklearn.cluster import KMeans\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b8ff6368":"def create_label_encoder_dict(df):\n    from sklearn.preprocessing import LabelEncoder\n    \n    label_encoder_dict = {}\n    for column in df.columns:\n        # Only create encoder for categorical data types\n        if not np.issubdtype(df[column].dtype, np.number) and column != 'Age':\n            label_encoder_dict[column]= LabelEncoder().fit(df[column])\n    return label_encoder_dict","9c757f42":"data_frame = pd.read_csv(\"..\/input\/diseases\/dataset.csv\")","a93cf167":"backup=data_frame","3054702f":"data_frame\n","b2f84eb3":"df= data_frame[['Disease_CUI', 'Symptom_CUI', 'BMI_Level', 'Age','Gender']]","7754c159":"#Transformation of data in dataset\n\n# label encoding for gender\nfrom sklearn.preprocessing import LabelEncoder #importing label encoder from sklearn\n\n# creating the encoder\nle = LabelEncoder()\ndf['Gender'] = le.fit_transform(df['Gender'])\n\ndf['Gender'].value_counts()","2da5edd3":"#binning bmi \n# 0 - underweight,1- normal, 2- overwifgt, 3- obese\n\nbins = [0,18.5,24.9,29.9, 60]\nlabels=[0,1,2, 3]\ndf['BMI_Level'] = pd.cut(df['BMI_Level'], bins=bins, labels=labels, include_lowest=True)\n\ndf","75819fb1":"#binning age\n\n\n\nbins = [0, 14, 24, 34, 54, 74 ]\nlabels=[0,1,2, 3, 4]\ndf['Age'] = pd.cut(df['Age'], bins=bins, labels=labels, include_lowest=True)\n\ndf","80ae329e":"disease_meta= backup[['Disease', 'Disease_CUI']]","fea404c7":"#Transformation of data in dataset\n\n# label encoding for gender\nfrom sklearn.preprocessing import LabelEncoder #importing label encoder from sklearn\n\n# creating the encoder\nle = LabelEncoder()\ndisease_meta['disease_label'] = le.fit_transform(df['Disease_CUI'])\ndisease_meta['disease_label'].value_counts()","deacf35a":"disease_meta['Symptom']= backup[['Symptoms']]\ndisease_meta['Symptom_CUI']= backup[['Symptom_CUI']]","d916b4f8":"disease_meta","15b93e16":"#Transformation of data in dataset\n\n# label encoding for gender\nfrom sklearn.preprocessing import LabelEncoder #importing label encoder from sklearn\n\n# creating the encoder\nle = LabelEncoder()\ndisease_meta['symptom_label'] = le.fit_transform(backup['Symptoms'])\ndisease_meta['symptom_label'].value_counts()","7cf097c2":"disease_meta.to_csv('mycsvfile.csv',index=False)","d78af35f":"#Transformation of data in dataset\n\n# label encoding for gender\nfrom sklearn.preprocessing import LabelEncoder #importing label encoder from sklearn\n\n# creating the encoder\nle = LabelEncoder()\ndf['Disease_CUI'] = le.fit_transform(df['Disease_CUI'])\ndf['Disease_CUI'].value_counts()","6d20b572":"#Transformation of data in dataset\n\n# label encoding for gender\nfrom sklearn.preprocessing import LabelEncoder #importing label encoder from sklearn\n\n# creating the encoder\nle = LabelEncoder()\ndf['Disease_CUI'] = le.fit_transform(df['Disease_CUI'])\ndf['Disease_CUI'].value_counts()","fc5d2fac":"#Transformation of data in dataset\n\n# label encoding for gender\nfrom sklearn.preprocessing import LabelEncoder #importing label encoder from sklearn\n\n# creating the encoder\nle = LabelEncoder()\ndf['Symptom_CUI'] = le.fit_transform(df['Symptom_CUI'])\ndf['Symptom_CUI'].value_counts()","c841c7b1":"#splitting the dataset into dependent and independent variables\nx = df.drop(['Disease_CUI'], axis = 1) #Independent Variables\ny = df['Disease_CUI'] #Dependent variable","db1d8862":"# splitting the dataset into training and testing sets\n#Most data is used for training\n\nfrom sklearn.model_selection import train_test_split #importing train_test_split from sklearn\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 45) #setting the test size and randomly generate the data\n","8f6e4f55":"reg = linear_model.LinearRegression()\nreg.fit(X_train,y_train)","77a981f2":"print(\"Regression Coefficients\")\npd.DataFrame(reg.coef_,index=X_train.columns,columns=[\"Coefficient\"])","172883cc":"# Make predictions using the testing set\ntest_predicted = reg.predict(X_test)","1c6e6592":"df3 = X_test.copy()\ndf3['predicted Y']=test_predicted\ndf3['Actual Y']=y_test\ndf3.head(20)","079bd412":"sns.residplot(test_predicted, y_test, lowess=True, color=\"g\")","df507fa7":"#trying to see if this plot gives better results\n# it does, whats the diff\n\ndf3.plot.scatter(\n    x='predicted Y',\n    y='Actual Y',\n    figsize=(12,8)\n)\n\nplt.suptitle(\"Predicted Y vs Actual Y\",size=12)\nplt.ylabel(\"Actual Y\")\nplt.xlabel(\"Predicted Y\")","bbbdb96d":"#what does this r2 value imply?\nprint('R squared score is %.2f' % r2_score(y_test, test_predicted))\n","a479abad":"e2 = pd.read_csv(\"..\/input\/mycsvf\/mycsvfile.csv\")\ne2['age']=df['Age']\n","a52585fb":"#splitting the dataset into dependent and independent variables\nx = df.drop(['Disease_CUI'], axis = 1) #Independent Variables\ny = df['Disease_CUI'] #Dependent variable\n","18b61db5":"X_train, X_test, y_train, y_test = train_test_split(X_data, Y_data, test_size=0.30)\nclf = DecisionTreeClassifier(criterion='entropy',min_samples_split=2)\nclf.fit(X_train, y_train)","8f0b366f":"pd.DataFrame([ \"%.2f%%\" % perc for perc in (clf.feature_importances_ * 100) ], index = X_data.columns, columns = ['Matrix of how factors affect Disease '])","a56204d8":"df","123b2268":"clf = DecisionTreeClassifier(criterion='entropy',min_samples_split=2) ","7ed193c0":"clf.fit(X_train, y_train)","4956b05e":"class_names = np.unique([str(i) for i in y_train])\nclass_names","1d60b218":"dot_data = tree.export_graphviz(clf,out_file=None, \n                                feature_names=X_data.columns, \n                                class_names=class_names,\n                                max_depth=7,\n                         filled=True, rounded=True,  proportion=True,\n                                node_ids=True, #impurity=False,\n                         special_characters=True)","9d61c0c6":"graph = graphviz.Source(dot_data) \ngraph","1e274911":"tree","65d981d2":"regression"}}