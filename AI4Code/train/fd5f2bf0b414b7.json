{"cell_type":{"f7943ed8":"code","41aa12ff":"code","3629f2cf":"code","7185bcae":"code","e90e3c3f":"code","7656b3f1":"code","fa2b0e60":"code","e0bf5c22":"code","2014bc6e":"code","36bef3fb":"code","ef99f378":"code","455c6faf":"code","41e4b6ce":"code","10b29ec0":"code","f254a37e":"code","e66e835a":"code","4eb8b8c0":"code","64fd2421":"code","799aeb80":"code","b72275e3":"code","0f711cf4":"code","5896a1c4":"code","4f95ae9c":"code","bfd109b0":"code","ba30e198":"markdown","00909255":"markdown","cec09dd2":"markdown","8d7f0d06":"markdown","2b0f6de2":"markdown","9ad94bef":"markdown","8db092d0":"markdown"},"source":{"f7943ed8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41aa12ff":"import matplotlib.pyplot as plt \nimport seaborn as sns","3629f2cf":"df = pd.read_csv('\/kaggle\/input\/videogamesales\/vgsales.csv')","7185bcae":"df.head()","e90e3c3f":"df.info()","7656b3f1":"df.isna().sum()","fa2b0e60":"df.drop(['Year'], axis=1, inplace=True)","e0bf5c22":"df['Publisher'].replace(np.nan, df['Publisher'].mode()[0], inplace=True)","2014bc6e":"df.Publisher.isna().sum()","36bef3fb":"cate_feat = [col for col in df.columns if df[col].dtypes == 'O']","ef99f378":"cate_feat","455c6faf":"cate_unique = list(map(lambda x: df[x].nunique(), cate_feat))","41e4b6ce":"l = list(zip(cate_feat, cate_unique))","10b29ec0":"l","f254a37e":"df.head()","e66e835a":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error","4eb8b8c0":"df1 = df.copy()","64fd2421":"encoder = LabelEncoder()","799aeb80":"df1.head()","b72275e3":"df1['Platform'] = encoder.fit_transform(df1[cate_feat[1]]) \ndf1['Genre'] = encoder.fit_transform(df1[cate_feat[2]])","0f711cf4":"df1['Publisher'] = df1['Publisher'].replace('<','', inplace=True)","5896a1c4":"df1['Publisher'] = encoder.fit_transform(df1[cate_feat[3]])","4f95ae9c":"X = df1.drop(['Global_Sales', 'Name'], axis=1)\ny = df1['Global_Sales']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n\ntree = DecisionTreeRegressor(random_state=1)\ntree.fit(X_train, y_train)","bfd109b0":"pred = tree.predict(X_test)\nmae = mean_absolute_error(y_test, pred)\nprint(\"\\033[32mMean Absolute Error: {}\\033[00m\" .format(mae)) ","ba30e198":"## Handling Categorical Features","00909255":"<font size=3 color='blue'> We are droping Name Column as its has very large number of labels. <\/font>","cec09dd2":"<font size=3 color='green'> Here there are 271 missing values in Year column. And we are not able to handle the missing year values. So, we simply drop it. <\/font>","8d7f0d06":"# Importing Data","2b0f6de2":"<font size=3 color='green'> There are so many labels for each category so we cannot apply OneHotEncoding. But we can use LabelEncoding. <\/font>","9ad94bef":"# Label Encoding","8db092d0":"# Importing Libraries"}}