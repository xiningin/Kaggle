{"cell_type":{"c3569068":"code","00545292":"code","e42ccb25":"code","f633ae14":"code","6cbf5bc1":"code","07db2554":"code","0c288857":"code","f94a56b9":"code","f5f20494":"code","93d2a836":"code","e973a6fb":"code","9112af6e":"code","ba9a533a":"code","79c34602":"code","18ae906d":"code","75452280":"code","684a71ae":"code","e6caef14":"code","c1ccd58e":"code","01a9a852":"code","1ce99526":"code","d26f8acd":"code","06a2cb26":"code","6a7d9352":"code","98caef70":"code","ccb50aea":"code","3e4fb77f":"code","25ae08b9":"code","4840d737":"code","994ebbcf":"code","6b64cd2a":"code","5842b229":"code","263c1d3b":"code","e4435a6a":"code","82532cdf":"code","11595cff":"code","7290dd0c":"code","477d3c54":"code","4ec4a350":"code","cff13398":"code","8721e044":"code","fad0206c":"code","3f66a1da":"code","a63f217e":"code","0cf1d2be":"code","c2702590":"code","583c3353":"code","b2970ba2":"code","45c21c8d":"code","553f5caa":"code","9f1bf324":"code","d5405f32":"code","d266371c":"code","c3ec9a00":"code","053ba2f3":"code","5b7ce660":"code","53d82fbc":"code","b25d868c":"code","1378bc96":"code","36f867fa":"code","7e2cd871":"code","dbcc2f22":"code","46bdf0a8":"code","74ec48ed":"code","eb4b047c":"code","a6a48328":"code","a9a7ef71":"code","986c380b":"code","9560feb2":"code","7283cd12":"code","7e604203":"code","b8db73b6":"code","888f7b3c":"code","29e0bf8b":"code","a339c72d":"code","14018379":"code","6bb3417e":"code","280f0bf4":"code","bb8a0a6e":"code","a813afe4":"code","c495b570":"code","b656023b":"code","d615e850":"code","cb72c653":"code","d1254f91":"code","d8489c6c":"code","bd0e7486":"code","63901afc":"code","d4a28b55":"code","6dadad70":"code","b6385e1f":"code","db4fcc74":"markdown","0e85cde1":"markdown","cba8c064":"markdown","b75cff93":"markdown","c5353ad1":"markdown","3c42b4cf":"markdown","37930514":"markdown","f6d2c3bd":"markdown","a4c6eb1e":"markdown","3ec49b38":"markdown","c03ce777":"markdown","94c6fa7e":"markdown","48360057":"markdown","928afccf":"markdown","124752e4":"markdown","c38817cd":"markdown","151c16e1":"markdown","3192d619":"markdown","bae25af2":"markdown","62c6ea10":"markdown","aef8c07e":"markdown","0a5369a9":"markdown","df36eced":"markdown","fdc1aeb1":"markdown"},"source":{"c3569068":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n%config Completer.use_jedi = False\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00545292":"df = pd.read_csv(\"..\/input\/zomato-bangalore-dataset\/zomato.csv\")\ndf.head()","e42ccb25":"df.shape","f633ae14":"df.isnull().sum()","6cbf5bc1":"#iterate through columns\nnaFeature = [feature for feature in df.columns if df[feature].isnull().sum() > 1]\nnaFeature","07db2554":"#print the missing percentage\n# df['rate'].isnull().sum()\/len(df) * 100\nfor feature in naFeature:\n    print('{} has {} % missing value. '.format(feature,np.round(df[feature].isnull().sum()\/len(df) * 100 ,2)))","0c288857":"df.info()","f94a56b9":"df['approx_cost(for two people)'].unique()","f5f20494":"#change the data type of 'approx_cost'\n#1. change into str to replace the ',' values\ndf['approx_cost(for two people)']=df['approx_cost(for two people)'].astype('str').apply(lambda x:x.replace(',',''))","93d2a836":"# #without lambda\n# def removeComma(x):\n#     return x.replace(',','')\n\n# df['approx_cost(for two people)'].astype(str).apply(removeComma)","e973a6fb":"df['approx_cost(for two people)'].unique()","9112af6e":"df['approx_cost(for two people)']=df['approx_cost(for two people)'].astype(float)\ndf['approx_cost(for two people)'].dtype    #data is change into float","ba9a533a":"#let's change the dtype of rate\ndf['rate'].dtype","79c34602":"df['rate'].unique()","18ae906d":"df['rate'].isnull().sum()","75452280":"df['rate'][0].split('\/')[0]","684a71ae":"def split(x):\n    return x.split('\/')[0]","e6caef14":"df['rate'] = df['rate'].astype(str).apply(split)","c1ccd58e":"df['rate'].unique()","01a9a852":"df['rate'].replace('-', 0, inplace=True)\ndf['rate'].replace('NEW', 0, inplace=True)","1ce99526":"df['rate'] = df['rate'].astype(float)\ndf['rate'].dtype","d26f8acd":"df.info()\n","06a2cb26":"#plot the top 20 entries\nplt.figure(figsize=(20,12))\ndf['rest_type'].value_counts().nlargest(20).plot.bar(color='green')","6a7d9352":"# make this in summarazie way\ndef summ_mark(x):\n    '''if the x belongs to QUick Bites and Casual Dining'''\n    \n    if x in ('Quick Bites', 'Casual Dining'):\n        return 'Quick Bites + Casual Dining'\n    else:\n        return 'others'","98caef70":"#apply this function in rest type\ndf['top_types']=df['rest_type'].apply(summ_mark)","ccb50aea":"df.head(5)","3e4fb77f":"#we use plotly\nimport plotly.express as px","25ae08b9":"values = df['top_types'].value_counts().values","4840d737":"labels = df['top_types'].value_counts().index","994ebbcf":"fig=px.pie(df, names=labels, values=values, title='Restaurant Type')\nfig.show()","6b64cd2a":"df.columns","5842b229":"df.dtypes","263c1d3b":"restaurant = df.groupby('name').agg({'votes':'sum',\n                        'url':'count', \n                        'approx_cost(for two people)': 'mean',\n                        'rate': 'mean'\n                       }).reset_index()\nrestaurant","e4435a6a":"restaurant.columns = ['name', 'totalVotes', 'totalUrls', 'avgApproxCost', 'avgRating']\nrestaurant.head()","82532cdf":"# caclulate total votes per total urls\n\nrestaurant['votesPerUrl'] = restaurant['totalVotes']\/restaurant['totalUrls']\nrestaurant.head()","11595cff":"# Creating Data Frame to sort the restaurant based on unitites\npopularRest = restaurant.sort_values(by='totalUrls', ascending=False)\npopularRest","7290dd0c":"popularRest.shape","477d3c54":"popularRest.sort_values(by='totalVotes', ascending=False).query('totalVotes > 0')","4ec4a350":"fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(20,25))\nax1.text(0.50, 0.30, int(popularRest['totalVotes'].mean()), fontsize=45, ha = 'center')\nax1.text(0.50, 0.12, 'is the average of votes', fontsize=22, ha='center')\nax1.text(0.50, 0.05, 'recieved by restaurants', fontsize=22, ha='center')\nax1.axis('off')\nsns.barplot(x='totalVotes', y='name', data = popularRest.sort_values(by='totalVotes', ascending=False).query('totalVotes > 0').head(5), ax = ax2)\nax2.set_title('Top 5 most Voted Restaurant')\n\nsns.barplot(x='totalVotes', y='name', data = popularRest.sort_values(by='totalVotes', ascending=False).query('totalVotes > 0').tail(5), ax = ax3)\nax3.set_title('Top 5 least Voted Restaurant')\n","cff13398":"fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(20,25))\nax1.text(0.50, 0.30, int(popularRest['avgApproxCost'].mean()), fontsize=45, ha = 'center')\nax1.text(0.50, 0.12, 'is the mean approx cost', fontsize=22, ha='center')\nax1.text(0.50, 0.05, 'in Bangalore City', fontsize=22, ha='center')\nax1.axis('off')\nsns.barplot(x='avgApproxCost', y='name', data = popularRest.sort_values(by='avgApproxCost', ascending=False).query('avgApproxCost > 0').head(5), ax = ax2)\nax2.set_title('Top 5 most Expensive Restaurant')\n\nsns.barplot(x='avgApproxCost', y='name', data = popularRest.sort_values(by='avgApproxCost', ascending=False).query('avgApproxCost > 0').tail(5), ax = ax3)\nax3.set_title('Top 5 Chepest Restaurant')","8721e044":"x = df['book_table'].value_counts()\nlabels = ['not book', 'book']","fad0206c":"import plotly.graph_objs as pgo\nfrom plotly.offline import iplot","3f66a1da":"trace = pgo.Pie(labels=labels, values= x, hoverinfo='label+percent', textinfo='percent', title='Table Booking')\niplot([trace])","a63f217e":"x = df['online_order'].value_counts()\nlabels = ['Online Accepted', 'Online Not Accepted']","0cf1d2be":"onlineOrder = pgo.Pie(labels=labels, values= x, hoverinfo='label+percent', textinfo='percent', title=\"Accpetance of Online Order\")\niplot([onlineOrder])","c2702590":"filterQuery = (df['approx_cost(for two people)']<=400) & (df['location'] == 'BTM') & (df['rate']>=4) & (df['rest_type'] == 'Quick Bites')\nbudget = df[filterQuery]\nbudget.head()","583c3353":"# we need only name of restaurant\nbudget['name'].unique()","b2970ba2":"# so lets create a function to return budget retaurant\ndef budgetRestaurant(location, restaurantType):\n    '''This funciton will help you to get the budget friendly Restaurant at your location in Bangalore\n    Input: Location, Restaurant Type\n    Return: List of budget friendly Restaurant'''\n    \n    filterQuery = (df['approx_cost(for two people)']<=400) & (df['location'] == location) & (df['rate']>=4) & (df['rest_type'] == restaurantType)\n    budget= df[filterQuery]\n    return budget['name'].unique","45c21c8d":"from geopy.geocoders import Nominatim\n\n#Nomintim is the search engine for the location street data\n#It will return the latitude and longitutde of the location","553f5caa":"geoLocator = Nominatim(user_agent='app')\n","9f1bf324":"#lets get latitude and longitude of first row\ndata=df['name'][0]\ndata","d5405f32":"data = geoLocator.geocode(data)\nprint(\"{} is the Latitude and {} is the longitude.\".format(data.latitude, data.longitude))","d266371c":"locationsData = pd.DataFrame({'Name': df['location'].unique()})\nlocationsData.head()","c3ec9a00":"#we have to extract latitude and longitude of each and every location\nlat = []\nlon = []\nfor location in locationsData['Name']:\n    location = geoLocator.geocode(location)\n    if location is None:\n        lat.append(np.nan)\n        lon.append(np.nan)\n    else:\n        lat.append(location.latitude)\n        lon.append(location.longitude)","053ba2f3":"locationsData['latitude'] = lat\nlocationsData['longitude'] = lon","5b7ce660":"locationsData.head()","53d82fbc":"restaurantLoc = df['location'].value_counts().reset_index()\nrestaurantLoc","b25d868c":"#manipulate the column name\nrestaurantLoc.columns = ['Name', 'Count']\nrestaurantLoc","1378bc96":"#Merge the two df ie restaurantLoc and locationData\nlocationofRest= restaurantLoc.merge(locationsData, on='Name').dropna()\nlocationofRest","36f867fa":"# !pip install folium\n\nimport folium\nfrom folium.plugins import HeatMap","7e2cd871":"baseMap = folium.Map(location=[12.97, 77.59])    #lataitude and longitude of bangalore\nbaseMap","dbcc2f22":"HeatMap(data = locationofRest[['latitude','longitude', 'Count']]).add_to(baseMap)","46bdf0a8":"baseMap","74ec48ed":"# !pip install wordcloud\nfrom wordcloud import WordCloud, STOPWORDS\n\n#perform on Quick Bites Resturant\ndata = df[df['rest_type'] == 'Quick Bites']\ndata.head()","eb4b047c":"data['dish_liked'].isnull().sum()","a6a48328":"# we have to consider only the 'dish_liked' column \ndishes = ''   #empty string\nfor word in data['dish_liked'].dropna():     #dropna is to drop the null value\n    words = word.split()   #it  return the list and store in words\n    #iterate on the list\n    for i in range(len(words)):\n        #convert each and every words into lower case to make every letter looks same in the lower case (we can also choose uppercase)\n        words[i] = words[i].lower()\n    #convert list into string we have to perform join\n    dishes = dishes + ' '.join(words) + ' '","a9a7ef71":"dishes[1:100]","986c380b":"stopwords = set(STOPWORDS)\nwordcloud = WordCloud(stopwords=stopwords, width =1500, height = 1500).generate(dishes)","9560feb2":"plt.figure(figsize=(12,8))\n\nplt.imshow(wordcloud)\nplt.axis('off')","7283cd12":"data = df['reviews_list'][0]\ndata","7e604203":"data = data.lower()\ndata","b8db73b6":"import re\ndata2= re.sub('[^a-zA-Z]', ' ', data)\ndata2","888f7b3c":"data3 = re.sub('rated', ' ', data2)\ndata3","29e0bf8b":"data4 = re.sub('x', ' ', data3)\ndata4","a339c72d":"#remove extra spaces\ndata5 = re.sub(' +', ' ', data4)\ndata5","14018379":"#now our data is ready for sentiment analysis\ndataset = df[df['rest_type'] == 'Quick Bites']\ndataset","6bb3417e":"totalReview = ''\nfor review in dataset['reviews_list']:\n    review = review.lower()   #lower reivew\n    review  = re.sub('[^a-zA-Z]', ' ', review)\n    review = re.sub('rated', ' ', review)\n    review = re.sub('x', ' ', review)\n    review = re.sub(' +', ' ', review)\n    #concatenate\n    totalReview = totalReview + str(review)","280f0bf4":"wordcloudReview = WordCloud(stopwords=stopwords, width =1500, height = 1500).generate(totalReview)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloudReview)\nplt.axis('off')","bb8a0a6e":"df.head()","a813afe4":"# split the dataframe in two categories --> \n#1. newRest --> rating ==0\n#2. trainValRest --> rating > 0  [for trainig]\n\ndef assign(x):\n    \"\"\"Split the data in two categories\"\"\"\n    if x>0:\n        return 1\n    else: \n        return 0","c495b570":"df['rated'] = df['rate'].apply(assign)\ndf['rated'].head()","b656023b":"df['rated'].unique()","d615e850":"newRest = [df['rated'] == 0]\ntrainValRest = df.query(\"rated==1\")","cb72c653":"trainValRest.head()","d1254f91":"trainValRest['rate'].unique() #restaurant with rating >0","d8489c6c":"df.columns","bd0e7486":"import warnings\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","63901afc":"trainValRest['target'] = trainValRest['rate'].apply(lambda x: 1 if x >= 3.75 else 0)","d4a28b55":"trainValRest.head()","6dadad70":"# check the label distribution of target!\n\nx = trainValRest['target'].value_counts()\nlabels = x.index\nprint(x)\nprint(\"Indexes: \", labels)","b6385e1f":"#plot this\nplt.pie(x, labels = labels)","db4fcc74":"# Problem Statement\n## How many types of Restaurant do we have?","0e85cde1":"# Preparation of data for ML ALgo\n","cba8c064":"> **Create the function for budget friendly restaurant**","b75cff93":"# Problem Statemet 1\n## Getting all NaN Features","c5353ad1":"# Extract Latitutde and longitude of any place of restaurant\n\n*The need of Lat and Long is to know the places where we get the budget Restaurant*\n\n**For this we need *geopy* to plot the locations on the map**","3c42b4cf":"# Task: Most Liked Dishes by Customers\n### What Customers like what they dislike","37930514":"## 3. Check which restaurants has online order service?","f6d2c3bd":"## Data CLeaning","a4c6eb1e":"## 2. How many table offer booking table Service?","3ec49b38":"For this we use **wordcloud** --> the bigger the world will be,  most of the customers will like it\n","c03ce777":"here we are getting string formated values. \n- TO get lat and long we need to convert in some geographical format","94c6fa7e":"# Find Budget Friendly Restaurant!\nie Avg Cost for two people < 400","48360057":"#### Handle the missing values in dishliked column","928afccf":"So we have to remove the '\/' to convert it into flot or int","124752e4":"we have to replace the special character '-' and 'NEW' with 0","c38817cd":"call the split and split it on the basisi of '\/' and return the 0th index","151c16e1":"```withoutt list comprehension```\nnaCol = []\n\nfor feature in df.columns:\n\n    if df[feature].isnull().sum()>1:\n    \n        naCol.append(feature)\n        \n        \nnaCol\n","3192d619":"# Problem Statemnts\n1. ANalyise most expenisve and most chepest restaurants in bangalore","bae25af2":"# Perform Feature Importance on data","62c6ea10":"**Now we have to create a feature for whether a restaurant is going to success or not!**\n\n*Domain Expertise tells us which restaurant will be in which category*\n1. rest < 3.75 --> bad(0)\n2. if rest >3.75 --> good(1)","aef8c07e":"# Problem Statement\n## Create a new DF for Votes, Cost and Rating of Each Restaurant\n\n**Group your data on the basis of name of restaurant**","0a5369a9":"# Perform Geolocation Analysis\n## to know about where restaurants are situated\n\nie count of restaurant at a perticular location\n","df36eced":"Now i can showcase important informations\n1. Average Votes received by restaurant\n2. Top 5 most Voted Restaurant\n3. Top 5 less Voted Restaruant\n","fdc1aeb1":"# Task: Reviews of Customers -> Sentiment Analysis"}}