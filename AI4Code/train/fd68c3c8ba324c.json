{"cell_type":{"224452b5":"code","b49fb514":"code","36178720":"code","82aad5c7":"code","ea019e37":"code","22b650af":"code","a6468f34":"code","29c177fd":"code","e7f0d983":"code","7681ae84":"code","ab764d23":"code","bcef92e9":"code","f36cdaea":"code","dc0ae93a":"code","7fc10f09":"code","d7f0a086":"code","f58f70ca":"code","8afa5483":"code","bd70b4da":"code","49dd801d":"code","1e3bbea5":"code","56c878e2":"code","84a78962":"code","39139d90":"code","e1989eeb":"code","0f4fea5a":"code","99dae66f":"code","d9af538d":"code","581058a7":"code","da3a6b79":"code","88fee700":"code","ab3a4e98":"code","dae96cff":"code","a7f59c37":"code","e564887c":"code","95b53155":"code","8c40a4fa":"code","4f1a9292":"code","e2b6977f":"code","dda98544":"code","7a0c6cce":"code","5800c3c5":"code","8a89adba":"code","2248f855":"code","cdb9ca10":"code","4550cd74":"code","5efcbcd6":"code","78fb92f7":"code","744d19f3":"code","67024f39":"code","5548ff56":"code","fb10a166":"code","fa745aeb":"code","db27fdec":"markdown","7d9fe452":"markdown","0946cf59":"markdown","b15391ea":"markdown","5a4d4868":"markdown","1491b79d":"markdown","8622dc6c":"markdown","47981c22":"markdown"},"source":{"224452b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b49fb514":"\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cufflinks as cf\ncf.go_offline()\n%matplotlib inline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LassoCV\nfrom sklearn import metrics \nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nfrom scipy import stats\nfrom scipy.stats import norm, skew\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax","36178720":"train=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain.head()","82aad5c7":"test=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest.head()","ea019e37":"train.describe()\n#Now we get an overall statistical picture of our data","22b650af":"train.info()\n#There are 1460 rows and 81 columns, 43 of which are objects, 35 of it are int64 and 3 of them are float64","a6468f34":"test.info()","29c177fd":"train[\"SalePrice\"].iplot(kind=\"hist\")\n#The target variable seems right-skewed distributed  mostly between 100 000 dolars and 200 000 dolars\n","e7f0d983":"train[\"SalePrice\"].mean(),train[\"SalePrice\"].median(),train[\"SalePrice\"].mode()\n#Right skewed distribution means that the mean(180921) and median(163000) will be greater than the mode(140000) similar to this dataset. \n#Which means more houses were sold by less than the average price(180921).","7681ae84":"train[\"SalePrice\"].iplot(kind=\"box\") ","ab764d23":"plt.figure(figsize=(15,10))\ntrain[\"SalePrice\"].plot.box()\n#The target variable has many outliers as seen both of box plots","bcef92e9":"# The next step is to find out the correlation between target variable and other variables\n#But this step only include numerical variables and non-numerical variables are excluded \n \ntrain.corr()[\"SalePrice\"].sort_values(ascending = False)\n#OverallQual column has the highest correlation point","f36cdaea":"print(f\"Skewness: {train['SalePrice'].skew()}\")\nprint(f\"Kurtosis: {train['SalePrice'].kurt()}\")\nfigure = plt.figure(figsize=(15,10))\nplt.subplot(1,2,1)\nsns.distplot(train['SalePrice'] , fit=norm);\n(mu, sigma) = norm.fit(train['SalePrice'])\nplt.ylabel('Frequency')\nplt.title('The Distribution of sale Prices of Houses')\n\nplt.subplot(1,2,2)\nstats.probplot(train['SalePrice'], plot=plt)\nplt.show()","dc0ae93a":"train[[\"OverallQual\",\"SalePrice\"]].scatter_matrix()\n#The figures below there is a string correlation between the two ","7fc10f09":"plt.figure(figsize=(20,15))\nmask = np.zeros_like(train.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(train.corr(),annot=True,mask = mask,cmap=\"coolwarm\")\n#Here we visualize the correlation between all variables in the data set\nplt.title(\"Heatmap of all the Features\")","d7f0a086":"train.head()","f58f70ca":"train[\"SalePrice\"]","8afa5483":"# Here we save target value for later and drop it from the train data set\ny = train[\"SalePrice\"]\ntrain.drop('SalePrice', axis=1, inplace=True)\ny","bd70b4da":"#Now it is time to deal with the missing values in the columns of the data\ntrain.isnull().sum().sort_values(ascending = False).head(35)\n#There 35 columns which have missing values as seen below:","49dd801d":"test.isnull().sum().sort_values(ascending = False).head(35)","1e3bbea5":"plt.figure(figsize=(30,15))\nsns.heatmap(train.isnull(),cmap=\"coolwarm\")\n# Now we visualize the missing values of the columns in our train data","56c878e2":"missing=train.isnull().sum().sort_values(ascending=False)\ntotal=train.isnull().count().sort_values(ascending=False)\npercentage=(train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\npd.concat([missing,total,percentage],axis=1,keys=[\"Missing\",\"Total\",\"Percentage\"]).head(6)","84a78962":"missing=test.isnull().sum().sort_values(ascending=False)\ntotal=test.isnull().count().sort_values(ascending=False)\npercentage=(test.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\npd.concat([missing,total,percentage],axis=1,keys=[\"Missing\",\"Total\",\"Percentage\"]).head(6)","39139d90":"#Some of the columns have many missing values, so it is better just drop them\n#Because more than 80% of the column are missing in both train dataset and test dataset\ntrain.drop([\"PoolQC\",\"MiscFeature\",\"Alley\",\"Fence\"],axis=1,inplace=True)\ntest.drop([\"PoolQC\",\"MiscFeature\",\"Alley\",\"Fence\"],axis=1,inplace=True)\nplt.figure(figsize=(30,15))\nsns.heatmap(train.isnull(),cmap=\"coolwarm\")","e1989eeb":"train.drop(\"FireplaceQu\",axis=1,inplace=True) #This column also have many missing values. we will just get rid of them\ntest.drop(\"FireplaceQu\",axis=1,inplace=True)\nplt.figure(figsize=(30,15))\nsns.heatmap(train.isnull(),cmap=\"coolwarm\")\n","0f4fea5a":"\"\"\"Now the data is ready to ampute the missing values for the rest of columns\n   We will segregate numeric and categoric columns in order to ampute them differently\"\"\"\nnumeric_cols = train.select_dtypes(['float64','int64']).columns\ncategoric_cols = train.select_dtypes('object').columns\n\nnumeric = train[numeric_cols]\ncategoric = train[categoric_cols]\n\ndef mean_imputation(numeric):\n    \"\"\"\n    Filling the missing values with the mean of the categorical columns\n    \"\"\"\n    for col in numeric.columns:\n        mean = numeric[col].mean()\n        numeric[col] = numeric[col].fillna(mean)\n    return numeric\n\nmean_imp = mean_imputation(numeric)\n\ndef mode_imputation(categoric):\n    \"\"\"\n    Filling the missing values with the mode of the categorical columns\n    \"\"\"\n    for col in categoric.columns:\n        mode = categoric[col].mode().iloc[0]\n        categoric[col] = categoric[col].fillna(mode)\n    return categoric\n\nmode_imp = mode_imputation(categoric)\n'''We will concatenate the mean and mode imputed columns together'''\ntrain = pd.concat([mean_imp, mode_imp], axis = 1)\ntrain\n","99dae66f":"numeric_cols = test.select_dtypes(['float64','int64']).columns\ncategoric_cols = test.select_dtypes('object').columns\n\nnumeric = test[numeric_cols]\ncategoric = test[categoric_cols]\n\ndef mean_imputation(numeric):\n    \"\"\"\n    Filling the missing values with the mean of the categorical columns\n    \"\"\"\n    for col in numeric.columns:\n        mean = numeric[col].mean()\n        numeric[col] = numeric[col].fillna(mean)\n    return numeric\n\nmean_imp = mean_imputation(numeric)\n\ndef mode_imputation(categoric):\n    \"\"\"\n    Filling the missing values with the mode of the categorical columns\n    \"\"\"\n    for col in categoric.columns:\n        mode = categoric[col].mode().iloc[0]\n        categoric[col] = categoric[col].fillna(mode)\n    return categoric\n\nmode_imp = mode_imputation(categoric)\n'''We will concatenate the mean and mode imputed columns together'''\ntest = pd.concat([mean_imp, mode_imp], axis = 1)\ntest","d9af538d":"train.isnull().sum().sort_values(ascending = False).head()\n#Now there is not any column with missing data in our train dataset","581058a7":"test.isnull().sum().sort_values(ascending = False).head()\n#Now there is not any column with missing data in our test dataset","da3a6b79":"train.info()\n#Now we have 75 columns and 1460 rows without any missing valued column in the train  data set","88fee700":"test.info()\n#Now we have 74 columns and 1459 rows without any missing valued column\n","ab3a4e98":"#In order to be more precise, we need to convert floats into integers,because all floats have not any data after \".\"\nfor col in train.select_dtypes(include=\"float64\").columns:\n    train[col]=train[col].astype(np.int64)\n    ","dae96cff":"# we will do the same for the train data set as follows:\nfor col in test.select_dtypes(include=\"float64\").columns:\n    test[col]=train[col].astype(np.int64)\n","a7f59c37":"train.select_dtypes(include=\"object\").shape","e564887c":"test.select_dtypes(include=\"object\").shape","95b53155":"categoric_cols = train.select_dtypes('object').columns\nnumeric_cols=train.select_dtypes('int64').columns\ncategoric = train[categoric_cols]\nnumeric=train[numeric_cols]\nfrom sklearn.preprocessing import OrdinalEncoder\nordinal_encoder = OrdinalEncoder()\nfor col in categoric.columns:\n    categoric[col] = pd.DataFrame(ordinal_encoder.fit_transform(categoric)) #This returns a numpy array\ncategoric","8c40a4fa":"# we will do the same for our test data set:\ntest_categoric_cols = test.select_dtypes('object').columns\ntest_numeric_cols=test.select_dtypes('int64').columns\ntest_categoric = test[test_categoric_cols]\ntest_numeric=test[test_numeric_cols]\nfrom sklearn.preprocessing import OrdinalEncoder\nordinal_encoder = OrdinalEncoder()\nfor col in test_categoric.columns:\n    test_categoric[col] = pd.DataFrame(ordinal_encoder.fit_transform(test_categoric)) #This returns a numpy array\ntest_categoric","4f1a9292":"#Now we will concetanate the previous numerical variables with the converted categorical variables\ntrain_ready = pd.concat([numeric, categoric], axis = 1)\ntest_ready = pd.concat([test_numeric, test_categoric], axis = 1)","e2b6977f":"train_ready.info()","dda98544":"test_ready.info()","7a0c6cce":"X=train_ready # here we assing train data set as our X value for the algorithm\nX.shape,y.shape","5800c3c5":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.4,random_state=42)","8a89adba":"from sklearn.linear_model import LinearRegression\nlm=LinearRegression()\nlm.fit(X_train,y_train)","2248f855":"#In order to evaluate the performance we need to predict the test data and compare the predictions with the actual test data values\npredictions=lm.predict(X_test)\n#here we predict the y_test values from X_test data according to the our trained Linear Regression data\npredictions\n\n","cdb9ca10":"# here I will visualize the real test values(y_test) versus the predicted values.\nsns.scatterplot(y_test,predictions)\n#It seems that our linear regression model predict ver well","4550cd74":"# We will evaluate our model performance by calculating the residual sum of squares and the explained variance score\nfrom sklearn import metrics\nprint(\"MAE:\",metrics.mean_absolute_error(y_test,predictions))\nprint (\"MSE:\",metrics.mean_squared_error(y_test,predictions))\nprint(\"RMSE:\",np.sqrt(metrics.mean_squared_error(y_test,predictions)))","5efcbcd6":"#Evaluation of  the explained variance score (R^2)\nmetrics.explained_variance_score(y_test,predictions) #This shows our model predict %79.9 of the target correctly","78fb92f7":"#Now we will visualize the differences between our predictions and actual y test data\nsns.distplot(y_test-predictions,bins=50) #this figure also proves that our model fits very good\n#There is no huge differences between our predictions and actual y data","744d19f3":"cdf=pd.DataFrame(lm.coef_,X.columns,columns=[\"Coefficients\"])\ncdf[\"Coefficients\"].sort_values(ascending=False)","67024f39":"#we se that our model predict good, we will predict the test data for this time\npredictions=lm.predict(test_ready)","5548ff56":"predictions=pd.DataFrame(predictions)","fb10a166":"submit=pd.concat([test['Id'],predictions],axis=1)\nsubmit.columns=['Id','SalePrice']\nlen(submit.isnull())","fa745aeb":"submit.to_csv(\"submission.csv\", index = False)","db27fdec":"4.Future Engineering:","7d9fe452":"Machine learning algorithms cannot run with categorical columns so we need to make them numerical:\nWe will use Ordinal Encoder for this purpose:\nOrdinalEncoder(*, categories='auto', dtype=<class 'numpy.float64'>) |\n| Encode categorical features as an integer array. |\n| The input to this transformer should be an array-like of integers or | strings, denoting the values taken on by categorical (discrete) features. | The features are converted to ordinal integers. This results in | a single column of integers (0 to n_categories - 1) per feature.","0946cf59":"1. We need to import libraries and data","b15391ea":"5.Splitting the Data and Training the Model","5a4d4868":"#Now both train and test data set have been syncronized in terms of types of data","1491b79d":"The Sale Prices of Houses is right skewed as it is seen above which means that  the mean greater than mode and median and median is greater than mode.We need to fix this skewness because many of the algorithms assume that the data science is normal and calculate various stats assuming this.We can fix this by using numpy.log1p() method normalise skweness by adding one(one added so that the zeros are being transformed to one as log of 0 is not defined) and taking natural log.  So the more the data is close to normal the more it fits the assumption.","8622dc6c":"2. Visualization of the Data","47981c22":"3. Dealing with the Missing Data"}}