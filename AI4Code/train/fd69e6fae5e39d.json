{"cell_type":{"07cfbf75":"code","43a91a06":"code","f11fd16e":"code","5a2ee558":"code","ab637e83":"code","4b21e77d":"code","fbeaf569":"code","b6e5ef13":"code","2daa258c":"code","0749d039":"code","f598c726":"markdown"},"source":{"07cfbf75":"import numpy as np\nimport pandas as pd\nfrom numpy import mean,std\nfrom scipy.stats import norm\nimport statistics as st\n\nimport os\nimport gc\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport json","43a91a06":"train = pd.read_csv(\"..\/input\/mlb-player-digital-engagement-forecasting\/train.csv\")","f11fd16e":"#thanks to Alok Pattani https:\/\/www.kaggle.com\/alokpattani\n\n# Get names of all \"nested\" data frames in daily training set\n#### get all column names\n#daily_data_nested_df_names = train.drop('date', axis = 1).columns.values.tolist()\n\ndaily_data_nested_df_names = ['nextDayPlayerEngagement']\n\nfor df_name in daily_data_nested_df_names:\n    date_nested_table = train[['date', df_name]]\n\n    date_nested_table = (date_nested_table[\n      ~pd.isna(date_nested_table[df_name])\n      ].\n      reset_index(drop = True)\n      )\n    \n    daily_dfs_collection = []\n    \n    for date_index, date_row in date_nested_table.iterrows():\n        daily_df = pd.read_json(date_row[df_name])\n        \n        daily_df['dailyDataDate'] = date_row['date']\n        \n        daily_dfs_collection = daily_dfs_collection + [daily_df]\n\n    # Concatenate all daily dfs into single df for each row\n    unnested_table = (pd.concat(daily_dfs_collection,\n      ignore_index = True).\n      # Set and reset index to move 'dailyDataDate' to front of df\n      set_index('dailyDataDate').\n      reset_index()\n      )\n    \n    # Creates 1 pandas df per unnested df from daily data read in, with same name\n    globals()[df_name] = unnested_table    \n    \n    # Clean up tables and collection of daily data frames for this df\n    del(date_nested_table, daily_dfs_collection, unnested_table)\n\nprint (daily_data_nested_df_names)","5a2ee558":"del(train)\ngc.collect()","ab637e83":"nextDayPlayerEngagement","4b21e77d":"nextDayPlayerEngagement['year'] = pd.DatetimeIndex(nextDayPlayerEngagement['engagementMetricsDate']).year\nnextDayPlayerEngagement['month'] = pd.DatetimeIndex(nextDayPlayerEngagement['engagementMetricsDate']).month","fbeaf569":"new_df = nextDayPlayerEngagement[nextDayPlayerEngagement['year'] == 2021]\nnew_df = new_df[new_df['month'] >= 4]\nnew_df","b6e5ef13":"playerId_list=new_df.playerId.unique().tolist()\n#playerId_list=playerId_list[:10]\n#playerId_list","2daa258c":"import warnings\nwarnings.simplefilter('ignore')\n\ndef calc_probs(pid,df,temp):\n    to_append=[pid,'','','','','','','','','','','','','','','','','','','','','','','','']\n    targets=['target1','target2','target3','target4']\n    z=1\n    for target in targets:\n        target_prob = temp[target].tolist()\n        mean = np.mean(target_prob)\n        std = np.std(target_prob)\n        median = st.median(target_prob)\n        distribution = norm(mean, std)\n        min_weight = min(target_prob)\n        max_weight = max(target_prob)\n        values = list(np.linspace(min_weight, max_weight))\n        probabilities = [distribution.pdf(v) for v in values]\n        max_value = max(probabilities)\n        max_index = probabilities.index(max_value)\n        to_append[z]=mean\n        to_append[z+1]=median\n        to_append[z+2]=std\n        to_append[z+3]=min_weight\n        to_append[z+4]=max_weight\n        to_append[z+5]=target_prob[max_index]\n        z=z+6\n    df_length = len(df)\n    df.loc[df_length] = to_append\n    return df\n    \n\n### CREATE DATAFRAME to store probabilities\ncolumn_names = [\"playerId\", \"target1_mean\",\"target1_median\",\"target1_std\",\"target1_min\",\"target1_max\",\"target1_prob\", \"target2_mean\",\"target2_median\",\"target2_std\",\"target2_min\",\"target2_max\",\"target2_prob\", \"target3_mean\",\"target3_median\",\"target3_std\",\"target3_min\",\"target3_max\",\"target3_prob\", \"target4_mean\",\"target4_median\",\"target4_std\",\"target4_min\",\"target4_max\",\"target4_prob\"]\nplayer_target_probs = pd.DataFrame(columns = column_names)\n    \nfor pid in playerId_list:\n    temp = new_df[new_df['playerId'] == pid]\n    player_target_stats=calc_probs(pid,player_target_probs,temp)\n\nplayer_target_stats","0749d039":"player_target_stats.to_csv('player_target_stats.csv', index = False)","f598c726":"This notebook will create a desciptive statistics dataset for all players 4 targets."}}