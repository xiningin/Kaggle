{"cell_type":{"809f7deb":"code","f56d3ca2":"code","7a7d0fe9":"code","6cb7ac2c":"code","03126954":"code","1f823224":"code","abb592b0":"code","e0bca60e":"code","8987d55c":"code","77583f63":"code","36dddede":"code","3b838788":"code","d2ab4fff":"code","93fb09db":"code","09019e37":"code","9621b321":"code","b5469ea5":"code","ee40fce1":"markdown"},"source":{"809f7deb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f56d3ca2":"import numpy as np\nfrom keras import layers\nfrom keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D, AveragePooling2D, MaxPooling2D, GlobalMaxPooling2D\nfrom keras.models import Model, load_model\nfrom keras.preprocessing import image\nfrom keras.utils import layer_utils\nfrom keras.utils.data_utils import get_file\nfrom keras.applications.imagenet_utils import preprocess_input\nimport pydot\nfrom IPython.display import SVG\nfrom keras.utils.vis_utils import model_to_dot\nfrom keras.utils import plot_model\nfrom resnets_utils import *\nfrom keras.initializers import glorot_uniform\nimport scipy.misc\nfrom matplotlib.pyplot import imshow\n%matplotlib inline\n\nimport keras.backend as K\nK.set_image_data_format('channels_last')\nK.set_learning_phase(1)","7a7d0fe9":"# GRADED FUNCTION: identity_block\n\ndef identity_block(X, f, filters, stage, block):\n    \"\"\"\n    Implementation of the identity block as defined in Figure 4\n    \n    Arguments:\n    X -- input tensor of shape (m, n_H_prev, n_W_prev, n_C_prev)\n    f -- integer, specifying the shape of the middle CONV's window for the main path\n    filters -- python list of integers, defining the number of filters in the CONV layers of the main path\n    stage -- integer, used to name the layers, depending on their position in the network\n    block -- string\/character, used to name the layers, depending on their position in the network\n    \n    Returns:\n    X -- output of the identity block, tensor of shape (n_H, n_W, n_C)\n    \"\"\"\n    \n    # defining name basis\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n    \n    # Retrieve Filters\n    F1, F2, F3 = filters\n    \n    # Save the input value. You'll need this later to add back to the main path. \n    X_shortcut = X\n    \n    # First component of main path\n    X = Conv2D(filters = F1, kernel_size = (1, 1), strides = (1,1), padding = 'valid', name = conv_name_base + '2a')(X)\n    X = BatchNormalization(axis = 3, name = bn_name_base + '2a')(X)\n    X = Activation('relu')(X)\n    \n    ### START CODE HERE ###\n    \n    # Second component of main path (\u22483 lines)\n    X = Conv2D(filters = F2, kernel_size = (f, f), strides = (1,1), padding = 'same', name = conv_name_base + '2b')(X)\n    X = BatchNormalization(axis = 3, name = bn_name_base + '2b')(X)\n    X = Activation('relu')(X)\n\n    # Third component of main path (\u22482 lines)\n    X = Conv2D(filters = F3, kernel_size = (1, 1), strides = (1,1), padding = 'valid', name = conv_name_base + '2c')(X)\n    X = BatchNormalization(axis = 3, name = bn_name_base + '2c')(X)\n\n    # Final step: Add shortcut value to main path, and pass it through a RELU activation (\u22482 lines)\n    X = Add()([X, X_shortcut])\n    X = Activation('relu')(X)\n    \n    ### END CODE HERE ###\n    \n    return X","6cb7ac2c":"import tensorflow as tf\n\ntf.reset_default_graph()\n\nwith tf.Session() as test:\n    np.random.seed(1)\n    A_prev = tf.placeholder(\"float\", [3, 4, 4, 6])\n    X = np.random.randn(3, 4, 4, 6)\n    A = identity_block(A_prev, f = 2, filters = [2, 4, 6], stage = 1, block = 'a')\n    test.run(tf.global_variables_initializer())\n    out = test.run([A], feed_dict={A_prev: X, K.learning_phase(): 0})\n    print(\"out = \" + str(out[0][1][1][0]))","03126954":"# GRADED FUNCTION: convolutional_block\n\ndef convolutional_block(X, f, filters, stage, block, s = 2):\n    \"\"\"\n    Implementation of the convolutional block as defined in Figure 4\n    \n    Arguments:\n    X -- input tensor of shape (m, n_H_prev, n_W_prev, n_C_prev)\n    f -- integer, specifying the shape of the middle CONV's window for the main path\n    filters -- python list of integers, defining the number of filters in the CONV layers of the main path\n    stage -- integer, used to name the layers, depending on their position in the network\n    block -- string\/character, used to name the layers, depending on their position in the network\n    s -- Integer, specifying the stride to be used\n    \n    Returns:\n    X -- output of the convolutional block, tensor of shape (n_H, n_W, n_C)\n    \"\"\"\n    \n    # defining name basis\n    conv_name_base = 'res' + str(stage) + block + '_branch'\n    bn_name_base = 'bn' + str(stage) + block + '_branch'\n    \n    # Retrieve Filters\n    F1, F2, F3 = filters\n    \n    # Save the input value\n    X_shortcut = X\n\n\n    ##### MAIN PATH #####\n    # First component of main path \n    X = Conv2D(F1, (1, 1), strides = (s,s),  padding = 'valid', name = conv_name_base + '2a')(X)\n    X = BatchNormalization(axis = 3, name = bn_name_base + '2a')(X)\n    X = Activation('relu')(X)\n    \n    ### START CODE HERE ###\n\n    # Second component of main path (\u22483 lines)\n    X = Conv2D(F2, (f, f), strides = (1,1), padding = 'same',  name = conv_name_base + '2b')(X)\n    X = BatchNormalization(axis = 3, name = bn_name_base + '2b')(X)\n    X = Activation('relu')(X)\n    # Third component of main path (\u22482 lines)\n    X = Conv2D(F3, (1, 1), strides = (1,1), padding = 'valid', name = conv_name_base + '2c')(X)\n    X = BatchNormalization(axis = 3, name = bn_name_base + '2c')(X)\n    ##### SHORTCUT PATH #### (\u22482 lines)\n    X_shortcut = Conv2D(F3, (1, 1), strides = (s,s), name = conv_name_base + '1')(X_shortcut)\n    X_shortcut = BatchNormalization(axis = 3, name = bn_name_base + '1')(X_shortcut)\n    # Final step: Add shortcut value to main path, and pass it through a RELU activation (\u22482 lines)\n    X = Add()([X, X_shortcut])\n    X =  Activation('relu')(X) \n    \n    ### END CODE HERE ###\n    \n    return X","1f823224":"def ResNet50(input_shape = (64, 64, 3), classes = 6):\n    \"\"\"\n    Implementation of the popular ResNet50 the following architecture:\n    CONV2D -> BATCHNORM -> RELU -> MAXPOOL -> CONVBLOCK -> IDBLOCK*2 -> CONVBLOCK -> IDBLOCK*3\n    -> CONVBLOCK -> IDBLOCK*5 -> CONVBLOCK -> IDBLOCK*2 -> AVGPOOL -> TOPLAYER\n\n    Arguments:\n    input_shape -- shape of the images of the dataset\n    classes -- integer, number of classes\n\n    Returns:\n    model -- a Model() instance in Keras\n    \"\"\"\n    \n    # Define the input as a tensor with shape input_shape\n    X_input = Input(input_shape)\n\n    \n    # Zero-Padding\n    X = ZeroPadding2D((3, 3))(X_input)\n    \n    # Stage 1\n    X = Conv2D(64, (7, 7), strides = (2, 2), name = 'conv1')(X)\n    X = BatchNormalization(axis = 3, name = 'bn_conv1')(X)\n    X = Activation('relu')(X)\n    X = MaxPooling2D((3, 3), strides=(2, 2))(X)\n\n    # Stage 2\n    X = convolutional_block(X, f = 3, filters = [64, 64, 256], stage = 2, block='a', s = 1)\n    X = identity_block(X, 3, [64, 64, 256], stage=2, block='b')\n    X = identity_block(X, 3, [64, 64, 256], stage=2, block='c')\n\n    ### START CODE HERE ###\n\n    # Stage 3 (\u22484 lines)\n    X = convolutional_block(X, f = 3, filters = [128,128,512], stage = 3, block='a', s = 2)\n    X = identity_block(X, 3, [128,128,512], stage=3, block='b')\n    X = identity_block(X, 3, [128,128,512], stage=3, block='c')\n    X = identity_block(X, 3, [128,128,512], stage=3, block='d')\n\n    # Stage 4 (\u22486 lines)\n    X = convolutional_block(X, f = 3, filters = [256, 256, 1024], stage = 4, block='a', s = 2)\n    X = identity_block(X, 3, [256, 256, 1024], stage=4, block='b')\n    X = identity_block(X, 3, [256, 256, 1024], stage=4, block='c')\n    X = identity_block(X, 3, [256, 256, 1024], stage=4, block='d')\n    X = identity_block(X, 3, [256, 256, 1024], stage=4, block='e')\n    X = identity_block(X, 3, [256, 256, 1024], stage=4, block='f')\n\n    # Stage 5 (\u22483 lines) \n    X = convolutional_block(X, f = 3, filters = [512, 512, 2048], stage = 5, block='a', s = 2)\n    X = identity_block(X, 3, [512, 512, 2048], stage=5, block='b')\n    X = identity_block(X, 3, [512, 512, 2048], stage=5, block='c')\n\n    # AVGPOOL (\u22481 line). Use \"X = AveragePooling2D(...)(X)\"\n    X = AveragePooling2D()(X)\n    \n    ### END CODE HERE ###\n\n    # output layer\n    X = Flatten()(X)\n    X = Dense(classes, activation='softmax', name='fc' + str(classes))(X)\n    \n    \n    # Create model\n    model = Model(inputs = X_input, outputs = X, name='ResNet50')\n\n    return model","abb592b0":"model = ResNet50(input_shape = (64, 64, 3), classes = 6)","e0bca60e":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","8987d55c":"x_l = np.load(\"\/kaggle\/input\/sign-language-digits-dataset\/X.npy\")\ny_l = np.load(\"\/kaggle\/input\/sign-language-digits-dataset\/Y.npy\")","77583f63":"X = np.concatenate((x_l[204:409], x_l[822:1027]),axis = 0)\nz = np.zeros(205)\no = np.ones(205)\nY = np.concatenate((z, o), axis = 0).reshape(X.shape[0],1)\nX.shape,Y.shape","36dddede":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train,Y_test = train_test_split(X,Y, test_size=0.15, random_state = 42)\nnumber_of_train = X_train.shape[0]\nnumber_of_test = X_test.shape[0]","3b838788":"x_train= X_train.reshape(number_of_train,X_train.shape[1]*X_train.shape[2])\nx_test = X_test.reshape(number_of_test,X_test.shape[1]*X_test.shape[2])\nx_train.shape,x_test.shape\n","d2ab4fff":"def per_image_normalization(X, constant=10.0, copy=True):\n    if copy:\n        X_res = X.copy()\n    else:\n        X_res = X\n\n    means = np.mean(X, axis=1)\n    variances = np.var(X, axis=1) + constant\n    X_res = (X_res.T - means).T\n    X_res = (X_res.T \/ np.sqrt(variances)).T\n    return X_res","93fb09db":"x_train = per_image_normalization(x_train)\nx_test = per_image_normalization(x_test)","09019e37":"x_train=x_train.reshape(x_train.shape[0],64,64,3)\nx_test=x_test.reshape(x_test.shape[0],64,64,3)","9621b321":"\nprint (\"number of training examples = \" + str(X_train.shape[0]))\nprint (\"number of test examples = \" + str(X_test.shape[0]))\nprint (\"X_train shape: \" + str(X_train.shape))\nprint (\"Y_train shape: \" + str(Y_train.shape))\nprint (\"X_test shape: \" + str(X_test.shape))\nprint (\"Y_test shape: \" + str(Y_test.shape))","b5469ea5":"model.fit(X_train, Y_train, epochs = 2, batch_size = 32)","ee40fce1":"Building your first ResNet model (50 layers)****"}}