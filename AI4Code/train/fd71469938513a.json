{"cell_type":{"ab45970c":"code","fcd91b14":"code","2329503f":"code","d11f85e4":"code","c251114e":"code","3ee58483":"code","a8dbef56":"code","dc2b3d2f":"code","e7e046d4":"code","e0ba3614":"code","0e42442b":"code","c22c9cef":"code","34605335":"code","49170a29":"code","1c9e9bb5":"code","67ed2aa3":"code","e15e140b":"code","af7c96cb":"code","091c12ef":"code","e6c1938a":"code","aab87da0":"code","8d04b010":"code","cfa15137":"code","64a417b7":"code","150fca7c":"code","d9ca0c72":"code","d8b0c017":"code","bd70114c":"code","0232442e":"code","487ec476":"code","64eb9c57":"markdown","90577e1e":"markdown","d4b9d52a":"markdown","9f149683":"markdown","3c851260":"markdown","9e1b7206":"markdown"},"source":{"ab45970c":"import torch\nimport numpy as np\nimport torchvision\nimport pandas as pd\nimport torch.nn as nn\nfrom tqdm.notebook import tqdm\nimport torch.nn.functional as F\nimport matplotlib.pyplot as plt\nimport torchvision.models as models\nfrom torchvision.utils import make_grid\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\nfrom torch.utils.data import random_split\nfrom torchvision.transforms import transforms\n%matplotlib inline","fcd91b14":"transform_ds = transforms.Compose([\n    transforms.RandomCrop(64, padding=4, padding_mode=\"reflect\"),\n    transforms.RandomHorizontalFlip(),\n    transforms.ToTensor(),\n    #transforms.Normalize([.5, .5, .5], [.5, .5, .5])\n])\n\nds = torchvision.datasets.ImageFolder(root=\"..\/input\/fruits\/fruits-360\/Training\", transform=transform_ds)","2329503f":"images, labels = ds[0]\nprint(images.shape)\nplt.imshow(images.permute(1,2,0))\nprint(ds.classes[labels])","d11f85e4":"val_ds_size = 6769\ntrain_ds_size = 60923\n\ntrain_ds, val_ds = random_split(ds, [train_ds_size, val_ds_size])","c251114e":"batch_size = 128\ntrain_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=3, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=3, pin_memory=True)","3ee58483":"def show_batch(train_dl):\n    for images, labels in train_dl:\n        fig, ax = plt.subplots(figsize=(16,16))\n        ax.set_xticks([]); ax.set_yticks([])\n        ax.imshow(make_grid(images[:64], nrow=8).permute(1,2,0))\n        break","a8dbef56":"show_batch(train_dl)","dc2b3d2f":"def accuracy(out, labels):\n    _, preds = torch.max(out, dim=1)\n    return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))\n\n\nclass ImageClassificationBase(nn.Module):\n    \n    def training_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        return loss\n    \n    def validation_step(self, batch):\n        images, labels = batch\n        out = self(images)\n        loss = F.cross_entropy(out, labels)\n        acc = accuracy(out, labels)\n        return {\"val_loss\": loss.detach(), \"val_acc\": acc}\n    \n    def validation_epoch_end(self, outputs):\n        batch_loss = [x[\"val_loss\"] for x in outputs]\n        epoch_loss = torch.stack(batch_loss).mean()\n        batch_acc = [x[\"val_acc\"] for x in outputs]\n        epoch_acc = torch.stack(batch_acc).mean()\n        return {\"val_loss\": epoch_loss.item(), \"val_acc\": epoch_acc.item()}\n    \n    def epoch_end(self, epoch, result):\n            print(\"Epoch [{}], last_lr: {:.8f}, train_loss {:.4f}, val_loss {:.4f}, val_acc {:.4f}\".format(\n                epoch, result[\"lrs\"][-1], result[\"train_loss\"], result[\"val_loss\"], result[\"val_acc\"]))","e7e046d4":"def conv_block(input_channels, out_channels, pool=False):\n    layers = [nn.Conv2d(input_channels, out_channels, kernel_size=3, padding=1, stride=1),\n             nn.BatchNorm2d(out_channels),\n             nn.ReLU()]\n    if pool: layers.append(nn.MaxPool2d(2))\n    return nn.Sequential(*layers)\n\nclass ResNet9(ImageClassificationBase):\n    def __init__(self, input_channels, num_classes):\n        super().__init__()\n        self.conv1 = conv_block(input_channels, 64) #128, 64, 64, 64\n        self.conv2 = conv_block(64, 128, pool=True) #128, 128, 32, 32\n        self.res1 = nn.Sequential(conv_block(128, 128), conv_block(128, 128)) #128, 128, 32, 32\n        \n        self.conv3 = conv_block(128, 256, pool=True) #128, 256, 16, 16\n        self.conv4 = conv_block(256, 512, pool=True) #128, 512, 8, 8\n        self.res2 = nn.Sequential(conv_block(512, 512), conv_block(512, 512)) #128, 512, 8, 8\n        \n        self.classifier = nn.Sequential(nn.MaxPool2d(8), nn.Flatten(), nn.Linear(512, num_classes))\n        \n    def forward(self, x):\n        out = self.conv1(x)\n        out = self.conv2(out)\n        out = self.res1(out) + out\n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.res2(out) + out\n        out = self.classifier(out)\n        return out\n    \nresnet_model = ResNet9(input_channels=3, num_classes=131)\nresnet_model","e0ba3614":"class SiamoAllaFrutta(ImageClassificationBase):\n    \n    def __init__(self):\n        super().__init__()\n        self.cnn = nn.Sequential(\n            nn.Conv2d(3, 64, kernel_size=3, padding=1, stride=1),\n            nn.ReLU(),\n        \n            nn.Conv2d(64, 256, kernel_size=3, padding=1, stride=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2,2), # 256, 16, 16\n            \n            nn.Conv2d(256, 512, kernel_size=3, padding=1, stride=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2,2), # 512, 8, 8\n            \n            nn.Conv2d(512, 1024, kernel_size=3, padding=1, stride=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2,2), # 1024, 4, 4\n            \n            nn.Conv2d(1024, 2048, kernel_size=3, padding=1, stride=1),\n            nn.ReLU(),\n            nn.MaxPool2d(2,2), # 2048, 2, 2\n            \n            nn.Flatten(),\n            \n            nn.Linear(8192, 2048),\n            nn.ReLU(),\n            nn.Linear(2048, 1024),\n            nn.ReLU(),\n            nn.Linear(1024, 512),\n            nn.ReLU(),\n            nn.Linear(512, 131))\n        \n    def forward(self, bx):\n        return self.cnn(bx)","0e42442b":"class FruitResnet(ImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        self.network = models.resnet18(pretrained=True)\n        number_of_features = self.network.fc.in_features\n        self.network.fc = nn.Linear(number_of_features, 131)\n        \n    def forward(self, xb):\n        return self.network(xb)\n    \n    def freeze(self):\n        for param in self.network.parameters():\n            param.requires_grad = False\n        for param in self.network.fc.parameters():\n            param.requires_grad = True\n            \n    def unfreeze(self):\n        for param in self.network.parameters():\n            param.requires_grad = True","c22c9cef":"def select_device():\n    if torch.cuda.is_available():\n        return torch.device(\"cuda\")\n    else:\n        return torch.device(\"cpu\")\n    \ndef to_device(data, device):\n    if isinstance (data, (list, tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        for x in self.dl:\n            yield to_device(x, self.device)\n    \n    def __len__(self):\n        return len(self.dl)","34605335":"device = select_device()\ndevice","49170a29":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)","1c9e9bb5":"for images, labels in train_dl:\n    print(images.shape)\n    print(labels)\n    break","67ed2aa3":"@torch.no_grad()\ndef evaluate(model, val_dl):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_dl]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group[\"lr\"]\n    \ndef fit_one_cycle(epochs, max_lr, model, train_dl, val_dl,\n                 weight_decay=0, grad_clip=None, opt_func=torch.optim.Adam):\n    history = []\n    \n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr,\n                                     epochs=epochs, steps_per_epoch=len(train_dl))\n    \n    for epoch in range(epochs):\n        model.train()\n        train_loss = []\n        lrs = []\n        for batch in tqdm(train_dl):\n            loss = model.training_step(batch)\n            train_loss.append(loss)\n            loss.backward()\n            \n            if grad_clip:\n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n                \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            lrs.append(get_lr(optimizer))\n            sched.step()\n            \n        result = evaluate(model, val_dl)\n        result[\"train_loss\"] = torch.stack(train_loss).mean().item()\n        result[\"lrs\"] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","e15e140b":"model = to_device(FruitResnet(), device)","af7c96cb":"history = [evaluate(model, val_dl)]\nhistory","091c12ef":"model.freeze()","e6c1938a":"epochs = 5\nmax_lr = 10e-4\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","aab87da0":"%%time\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl,\n                         weight_decay=weight_decay, grad_clip=grad_clip, \n                         opt_func=opt_func)\nhistory","8d04b010":"model.unfreeze()","cfa15137":"epochs = 5\nmax_lr = 10e-5\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","64a417b7":"%%time\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl,\n                         weight_decay=weight_decay, grad_clip=grad_clip, \n                         opt_func=opt_func)\nhistory","150fca7c":"transform_test = transforms.Compose([transforms.ToTensor()])\n\ntest_ds = torchvision.datasets.ImageFolder(root=\"..\/input\/fruits\/fruits-360\/Test\", \n                                  transform=transform_test)","d9ca0c72":"def prediction(images, model):\n    xb = to_device(images.unsqueeze(0), device)\n    out = model(xb)\n    _, preds = torch.max(out, dim=1)\n    return ds.classes[preds[0].item()]","d8b0c017":"image, label = test_ds[2000]\nplt.imshow(image.permute(1,2,0))\nprint(\"Label:\", test_ds.classes[label], \"Prediction:\", prediction(image,model))","bd70114c":"image, label = test_ds[2900]\nplt.imshow(image.permute(1,2,0))\nprint(\"Label:\", test_ds.classes[label], \"Prediction:\", prediction(image,model))","0232442e":"def plot_accuracy(history):\n    accuracy = [x[\"val_acc\"] for x in history]\n    plt.plot(accuracy, \"-x\")\n    plt.title(\"Accuracy vs number of epochs\")\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Accuracy\")\n    \nplot_accuracy(history)","487ec476":"def plot_losses(history):\n    train_loss = [x.get(\"train_loss\") for x in history]\n    val_loss = [x[\"val_loss\"] for x in history]\n    plt.plot(train_loss, \"-rx\")\n    plt.plot(val_loss, \"-bx\")\n    plt.legend([\"Training loss\", \"Validation loss\"])\n    plt.xlabel(\"Epochs\")\n    plt.ylabel(\"Losses\")\n    \nplot_losses(history)","64eb9c57":"## Model performance","90577e1e":"## Predictions","d4b9d52a":"# Fruit image classification","9f149683":"## Preparing the data","3c851260":"## Training","9e1b7206":"## Importing the modules"}}