{"cell_type":{"55686a86":"code","afbdcb3d":"code","d0f783a6":"code","e5a05052":"code","25b29123":"code","659f1738":"code","117096c5":"code","148ae1e0":"code","dfcd7c0c":"code","3b6d47c8":"code","7fc48b9a":"code","2577a594":"code","16a1e8de":"code","450594af":"code","aee6cdd6":"code","bf7778fa":"code","f713b67c":"code","32d11d1f":"code","2bed2407":"code","14e54284":"code","5f673e0f":"code","b51c0450":"code","8e01a855":"code","30625df2":"code","1f420411":"code","c37a9135":"code","5bb6ef44":"code","cd82d5c9":"code","1cbadabf":"code","db160cfd":"code","5ddfbc7f":"code","ec59aa16":"code","afc188ac":"code","7d78be39":"code","9fed22d9":"code","780d7593":"code","a3c67338":"code","4cf39014":"code","a255ce79":"code","b1546919":"code","297b9e6a":"code","67d2d51d":"code","9336ef69":"code","2dd0f621":"code","4cd7b726":"code","dd7b4e97":"code","9a100e3c":"code","fd854344":"code","8ecdb8b8":"code","2aee7ad7":"code","2618e3d5":"code","b216888f":"code","a320451e":"code","b3fc45c4":"code","67daa1ea":"code","ad5560b5":"code","03b64617":"code","1ffb5722":"code","36220c22":"code","f36bde95":"code","b198a58e":"code","b069f7d9":"code","733b5a05":"code","c0f52415":"code","fd99e685":"code","db68e984":"code","d42b91ba":"code","2942b66b":"code","ef846987":"code","307c1a99":"code","4ca0d404":"code","beb38772":"code","a896584a":"code","9c41b5e7":"code","c6bf0d94":"code","f571ac85":"code","b793748e":"code","131147cf":"code","719fd343":"code","b9db5139":"code","61a5b11c":"code","cad98482":"code","382a3860":"code","84a8b770":"code","ac9d92a2":"code","358337d7":"code","00c0689e":"code","1b2da831":"markdown","29a53d22":"markdown","6229ea04":"markdown","e7fba71a":"markdown","d02e978c":"markdown","6146482c":"markdown","3cd5a060":"markdown","9cca26be":"markdown","9abcdda3":"markdown","b1a2dc20":"markdown","0fbe0f7c":"markdown","9e0fbc56":"markdown","ff63b1a5":"markdown","99650728":"markdown","0fbac6b6":"markdown","3cf0b951":"markdown","38250caa":"markdown","3da8a210":"markdown","1df06e7a":"markdown","b46619af":"markdown","aca13861":"markdown"},"source":{"55686a86":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\n%matplotlib inline \nimport IPython as ipy\nimport IPython.display as ipyd\nimport librosa\nimport librosa.display\nimport folium\nfrom folium.plugins import HeatMap, HeatMapWithTime\nimport plotly.express as px\nimport sklearn\nimport warnings\nwarnings.filterwarnings(action='ignore')","afbdcb3d":"train_df = pd.read_csv(\"..\/input\/birdsong-recognition\/train.csv\")","d0f783a6":"print(f\"train data: {train_df.shape}\")\nprint(f\"train data columns: {list(train_df.columns)}\")\n","e5a05052":"pd.set_option('display.max_columns', 50)\ntrain_df.head()","25b29123":"train_df.info()","659f1738":"train_df.describe()","117096c5":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","148ae1e0":"missing_data(train_df)","dfcd7c0c":"def unique_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    uniques = []\n    for col in data.columns:\n        unique = data[col].nunique()\n        uniques.append(unique)\n    tt['Uniques'] = uniques\n    return(np.transpose(tt))","3b6d47c8":"unique_values(train_df)","7fc48b9a":"def plot_count(feature, title, df, size=1):\n    '''\n    Plot count of classes \/ feature\n    param: feature - the feature to analyze\n    param: title - title to add to the graph\n    param: df - dataframe from which we plot feature's classes distribution \n    param: size - default 1.\n    '''\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set1')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()  ","2577a594":"print(f\"playback_used values: {train_df.playback_used.nunique()}\")\nplot_count(\"playback_used\", \"playback_used\", train_df, size=1)","16a1e8de":"print(f\"ebird_codes values: {train_df.ebird_code.nunique()}\")\nplot_count(\"ebird_code\", \"ebird_code (first 20 entries)\", train_df, size=4)","450594af":"print(f\"channels values: {train_df.channels.nunique()}\")\nplot_count(\"channels\", \"channels\", train_df, size=1)","aee6cdd6":"print(f\"pitch values: {train_df.pitch.nunique()}\")\nplot_count(\"pitch\", \"pitch\", train_df, size=2)","bf7778fa":"print(f\"speed values: {train_df.speed.nunique()}\")\nplot_count(\"speed\", \"speed\", train_df, size=2)","f713b67c":"print(f\"species values: {train_df.species.nunique()}\")\nplot_count(\"species\", \"species (first 20)\", train_df, size=4)","32d11d1f":"print(f\"number of notes values: {train_df.number_of_notes.nunique()}\")\nplot_count(\"number_of_notes\", \"number_of_notes\", train_df, size=2)","2bed2407":"print(f\"bird_seen values: {train_df.bird_seen.nunique()}\")\nplot_count(\"bird_seen\", \"bird_seen\", train_df, size=1)","14e54284":"print(f\"sci_name values: {train_df.sci_name.nunique()}\")\nplot_count(\"sci_name\", \"sci_name (first 20)\", train_df, size=4)","5f673e0f":"print(f\"location values: {train_df.location.nunique()}\")\nplot_count(\"location\", \"location (first 20)\", train_df, size=4)","b51c0450":"print(f\"sampling_rate values: {train_df.sampling_rate.nunique()}\")\nplot_count(\"sampling_rate\", \"sampling_rate\", train_df, size=3)","8e01a855":"print(f\"type values: {train_df.type.nunique()}\")\nplot_count(\"type\", \"type (first 20)\", train_df, size=4)","30625df2":"print(f\"elevation values: {train_df.elevation.nunique()}\")\nplot_count(\"elevation\", \"elevation (first 20)\", train_df, size=4)","1f420411":"print(f\"latitude values: {train_df.latitude.nunique()}\")\nplot_count(\"latitude\", \"latitude (first 20)\", train_df, size=4)","c37a9135":"print(f\"longitude values: {train_df.longitude.nunique()}\")\nplot_count(\"longitude\", \"longitude (first 20)\", train_df, size=4)","5bb6ef44":"print(f\"bitrate_of_mp3 values: {train_df.bitrate_of_mp3.nunique()}\")\nplot_count(\"bitrate_of_mp3\", \"bitrate_of_mp3 (first 20)\", train_df, size=4)","cd82d5c9":"print(f\"volume values: {train_df.volume.nunique()}\")\nplot_count(\"volume\", \"volume\", train_df, size=2)","1cbadabf":"print(f\"file_type values: {train_df.file_type.nunique()}\")\nplot_count(\"file_type\", \"file_type\", train_df, size=2)","db160cfd":"print(f\"background values: {train_df.background.nunique()}\")\nplot_count(\"background\", \"background (first 20)\", train_df, size=4)","5ddfbc7f":"print(f\"author values: {train_df.author.nunique()}\")\nplot_count(\"author\", \"author (first 20)\", train_df, size=4)","ec59aa16":"print(f\"primary_label values: {train_df.primary_label.nunique()}\")\nplot_count(\"primary_label\", \"primary_label (first 20)\", train_df, size=4)","afc188ac":"print(f\"length values: {train_df.length.nunique()}\")\nplot_count(\"length\", \"length\", train_df, size=2)","7d78be39":"print(f\"time values: {train_df.time.nunique()}\")\nplot_count(\"time\", \"time (first 20)\", train_df, size=4)","9fed22d9":"print(f\"country values: {train_df.country.nunique()}\")\nplot_count(\"country\", \"country (first 20)\", train_df, size=4)","780d7593":"print(f\"recordist values: {train_df.recordist.nunique()}\")\nplot_count(\"recordist\", \"recordist (first 20)\", train_df, size=4)","a3c67338":"print(f\"license values: {train_df.license.nunique()}\")\nplot_count(\"license\", \"license\", train_df, size=3)","4cf39014":"tmp = train_df.groupby(['latitude', 'longitude'])['url'].count()\nlatlong_df = pd.DataFrame(tmp).reset_index()\nlatlong_df.columns = ['latitude', 'longitude', 'count']\nlatlong_df.tail()","a255ce79":"latlong_df = latlong_df.loc[~(latlong_df.latitude==\"Not specified\")]","b1546919":"m = folium.Map(location=[0,0], zoom_start=2)\nmax_val = max(latlong_df['count'])\nHeatMap(data=latlong_df[['latitude', 'longitude', 'count']],\\\n        radius=15, max_zoom=12).add_to(m)\nm","297b9e6a":"tmp = train_df.groupby(['country'])['url'].count()\ncountry_df = pd.DataFrame(tmp).reset_index()\ncountry_df.columns = ['country','count']\ndf = px.data.gapminder().query(\"year==2007\")\ndf = df[['country', 'iso_alpha']]\ncountry_df = country_df.merge(df, on=\"country\")\ncountry_df.head()","67d2d51d":"hover_text = []\nfor index, row in country_df.iterrows():\n    hover_text.append((f\"country: {row['country']}<br>count: {row['count']}<br>country code: {row['iso_alpha']}\"))\ncountry_df['hover_text'] = hover_text\n\nfig = px.choropleth(country_df, \n                    locations=\"iso_alpha\",\n                    hover_name='hover_text',\n                    color=\"count\",\n                     projection=\"natural earth\",\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    width=700, height=525)\nfig.update_geos(   \n    showcoastlines=True, coastlinecolor=\"DarkBlue\",\n    showland=True, landcolor=\"LightGrey\",\n    showocean=True, oceancolor=\"LightBlue\",\n    showlakes=True, lakecolor=\"Blue\",\n    showrivers=True, rivercolor=\"Blue\",\n    showcountries=True, countrycolor=\"DarkBlue\"\n)\nfig.update_layout(title = 'Number of observations per country<br>(hover for details)')\nfig.show()","9336ef69":"train_df['dated'] = pd.to_datetime(train_df['date'], format='%Y-%m-%d', errors='coerce')","2dd0f621":"train_df['year'] = train_df['dated'].dt.year\ntrain_df['month'] = train_df['dated'].dt.month\ntrain_df['day'] = train_df['dated'].dt.day\ntrain_df['dayofweek'] = train_df['dated'].dt.dayofweek","4cd7b726":"def plot_time_variation(df, x='date', y='count', hue=None, size=1, is_log=False):\n    f, ax = plt.subplots(1,1, figsize=(4*size,3*size))\n    g = sns.lineplot(x=x, y=y, hue=hue, data=df)\n    plt.xticks(rotation=90)\n    if hue:\n        plt.title(f'{y} grouped by {hue}')\n    else:\n        plt.title(f'{y}')\n    if(is_log):\n        ax.set(yscale=\"log\")\n    ax.grid(color='black', linestyle='dotted', linewidth=0.75)\n    plt.show() ","dd7b4e97":"agg_df = train_df.groupby(['year'])['url'].count().reset_index()\nagg_df.columns = ['year', 'count']","9a100e3c":"plot_time_variation(agg_df, x='year', y=\"count\", hue=None, size=4)","fd854344":"train_df.columns","8ecdb8b8":"agg_df = train_df.groupby(['year', 'bird_seen'])['url'].count().reset_index()\nagg_df.columns = ['year', 'bird_seen', 'count']\nplot_time_variation(agg_df, x='year', y=\"count\", hue='bird_seen', size=4, is_log=True)","2aee7ad7":"agg_df = train_df.groupby(['year', 'playback_used'])['url'].count().reset_index()\nagg_df.columns = ['year', 'playback_used', 'count']\nplot_time_variation(agg_df, x='year', y=\"count\", hue='playback_used', size=4, is_log=True)","2618e3d5":"agg_df = train_df.groupby(['year', 'license'])['url'].count().reset_index()\nagg_df.columns = ['year', 'license', 'count']\nplot_time_variation(agg_df, x='year', y=\"count\", hue='license', size=4, is_log=True)","b216888f":"print(f\"year values: {train_df.year.nunique()}\")\nplot_count(\"year\", \"year\", train_df, size=4)","a320451e":"print(f\"month values: {train_df.month.nunique()}\")\nplot_count(\"month\", \"month\", train_df, size=3)","b3fc45c4":"print(f\"day values: {train_df.day.nunique()}\")\nplot_count(\"day\", \"day\", train_df, size=4)","67daa1ea":"print(f\"dayofweek values: {train_df.dayofweek.nunique()}\")\nplot_count(\"dayofweek\", \"dayofweek\", train_df, size=3)","ad5560b5":"TRAIN_AUDIO_PATH = \"..\/input\/birdsong-recognition\/train_audio\/\"\nfiles = os.listdir(TRAIN_AUDIO_PATH)\nprint(f\"train folders: {len(files)}\")\nprint(f\"some ebird_code examples: {files[0:10]}\")","03b64617":"def play_audio_file(ebird_code, samples=3):\n    for sample in range(0, samples):\n        file_name = train_df.loc[train_df.ebird_code==ebird_code, \"filename\"].values[sample]\n        length = train_df.loc[train_df.ebird_code==ebird_code, \"length\"].values[sample]\n        file_type = train_df.loc[train_df.ebird_code==ebird_code, \"file_type\"].values[sample]\n        volume = train_df.loc[train_df.ebird_code==ebird_code, \"volume\"].values[sample]\n        bitrate_of_mp3 = train_df.loc[train_df.ebird_code==ebird_code, \"bitrate_of_mp3\"].values[sample]\n        audio_file_path = os.path.join(TRAIN_AUDIO_PATH, ebird_code, file_name)\n        print(f\"ebird_code: {ebird_code} file: {file_name}\\nlength: {length}\\nvolume: {volume}\\nbit rate: {bitrate_of_mp3}\\nfile type: {file_type}\")\n        ipy.display.display(ipyd.Audio(audio_file_path))","1ffb5722":"play_audio_file(\"aldfly\", 2)","36220c22":"play_audio_file(\"purfin\", 2)","f36bde95":"play_audio_file(\"marwre\", 2)","b198a58e":"play_audio_file(\"boboli\", 2)","b069f7d9":"play_audio_file(\"wewpew\", 2)","733b5a05":"play_audio_file(\"eawpew\", 2)","c0f52415":"def plot_audio_file(ebird_code):\n\n    plt.figure(figsize=(16,6))\n    sample = 0\n    file_name = train_df.loc[train_df.ebird_code==ebird_code, \"filename\"].values[sample]\n    length = train_df.loc[train_df.ebird_code==ebird_code, \"length\"].values[sample]\n    file_type = train_df.loc[train_df.ebird_code==ebird_code, \"file_type\"].values[sample]\n    volume = train_df.loc[train_df.ebird_code==ebird_code, \"volume\"].values[sample]\n    bitrate_of_mp3 = train_df.loc[train_df.ebird_code==ebird_code, \"bitrate_of_mp3\"].values[sample]\n    audio_file_path = os.path.join(TRAIN_AUDIO_PATH, ebird_code, file_name)\n    x , sr = librosa.load(audio_file_path)\n    librosa.display.waveplot(x, sr=sr)\n    plt.gca().set_title(f\"ebird_code: {ebird_code} file: {file_name}\\nlength: {length} volume: {volume} bit rate: {bitrate_of_mp3} file type: {file_type}\")\n    plt.show()","fd99e685":"plot_audio_file(\"aldfly\")","db68e984":"plot_audio_file(\"purfin\")","d42b91ba":"plot_audio_file(\"marwre\")","2942b66b":"plot_audio_file(\"brebla\")","ef846987":"plot_audio_file(\"boboli\")","307c1a99":"plot_audio_file(\"wewpew\")","4ca0d404":"plot_audio_file(\"eawpew\")","beb38772":"def plot_audio_file_spectrogram(ebird_code):\n\n    plt.figure(figsize=(16,6))\n    sample = 0\n    file_name = train_df.loc[train_df.ebird_code==ebird_code, \"filename\"].values[sample]\n    length = train_df.loc[train_df.ebird_code==ebird_code, \"length\"].values[sample]\n    file_type = train_df.loc[train_df.ebird_code==ebird_code, \"file_type\"].values[sample]\n    volume = train_df.loc[train_df.ebird_code==ebird_code, \"volume\"].values[sample]\n    bitrate_of_mp3 = train_df.loc[train_df.ebird_code==ebird_code, \"bitrate_of_mp3\"].values[sample]\n    audio_file_path = os.path.join(TRAIN_AUDIO_PATH, ebird_code, file_name)\n    x , sr = librosa.load(audio_file_path)\n    xs = librosa.stft(x)\n    xdb = librosa.amplitude_to_db(abs(xs))\n    librosa.display.specshow(xdb, sr=sr, x_axis='time', y_axis='hz')\n    plt.gca().set_title(f\"Spectrogram - ebird_code: {ebird_code} file: {file_name}\\nlength: {length} volume: {volume} bit rate: {bitrate_of_mp3} file type: {file_type}\")\n    plt.colorbar()","a896584a":"plot_audio_file_spectrogram(\"aldfly\")","9c41b5e7":"plot_audio_file_spectrogram(\"purfin\")","c6bf0d94":"plot_audio_file_spectrogram(\"marwre\")","f571ac85":"plot_audio_file_spectrogram(\"brebla\")","b793748e":"plot_audio_file_spectrogram(\"boboli\")","131147cf":"plot_audio_file_spectrogram(\"wewpew\")","719fd343":"plot_audio_file_spectrogram(\"eawpew\")","b9db5139":"def normalize(x, axis=0):\n    return sklearn.preprocessing.minmax_scale(x, axis=axis)\n\ndef plot_audio_file_spectral_rolloff(ebird_code):\n\n    plt.figure(figsize=(16,6))\n    sample = 0\n    file_name = train_df.loc[train_df.ebird_code==ebird_code, \"filename\"].values[sample]\n    length = train_df.loc[train_df.ebird_code==ebird_code, \"length\"].values[sample]\n    file_type = train_df.loc[train_df.ebird_code==ebird_code, \"file_type\"].values[sample]\n    volume = train_df.loc[train_df.ebird_code==ebird_code, \"volume\"].values[sample]\n    bitrate_of_mp3 = train_df.loc[train_df.ebird_code==ebird_code, \"bitrate_of_mp3\"].values[sample]\n    audio_file_path = os.path.join(TRAIN_AUDIO_PATH, ebird_code, file_name)\n    x , sr = librosa.load(audio_file_path)\n    spectral_rolloff = librosa.feature.spectral_rolloff(x+0.01, sr=sr)[0]\n    spectral_centroids = librosa.feature.spectral_centroid(x, sr=sr)[0]\n    frames = range(len(spectral_centroids))\n    t = librosa.frames_to_time(frames)\n    librosa.display.waveplot(x, sr=sr, alpha=0.4)\n    plt.gca().set_title(f\"Spectral rolloff - ebird_code: {ebird_code} file: {file_name}\\nlength: {length} volume: {volume} bit rate: {bitrate_of_mp3} file type: {file_type}\")\n    plt.plot(t, normalize(spectral_rolloff), color='r')","61a5b11c":"plot_audio_file_spectral_rolloff(\"aldfly\")","cad98482":"plot_audio_file_spectral_rolloff(\"purfin\")","382a3860":"plot_audio_file_spectral_rolloff(\"marwre\")","84a8b770":"plot_audio_file_spectral_rolloff(\"brebla\")","ac9d92a2":"plot_audio_file_spectral_rolloff(\"boboli\")","358337d7":"plot_audio_file_spectral_rolloff(\"wewpew\")","00c0689e":"plot_audio_file_spectral_rolloff(\"eawpew\")","1b2da831":"### Signal spectral rolloff\n\nThe spectral rolloff is a measure of the shape of the signal, representing the frequency at which high frequencies decline to 0. Can be calculated by the fraction of bins in the power spectrum where 85% of its power is at lower frequencies.","29a53d22":"# 2. Analysis preparation\n\n## 2.1. Load packages\n\nHere we load the Python modules we will need for our analysis.","6229ea04":"### Signal spectrogram\n\nLet's also plot some signal spectrograms. A spectrogram is a visual representation of the spectre of frequencies associated with a signal.\n","e7fba71a":"# 1. Introduction\n\n\nIn this competition the researchers from Cornell Lab of Ornithology\u2019s Center for Conservation Bioacoustics (CBC) wants the Kaggle community to help them build an AI solution to identify bird species using their bird call audio.\n\n<img src=\"https:\/\/images.unsplash.com\/photo-1493236296276-d17357e28888?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1051&q=80\" width=\"800\"><\/img>","d02e978c":"## Play audio\n\nLet's listen to some of the audio signals.","6146482c":"Latitude, longitude, elevation can be used to build a map with the observation location and altitude.","3cd5a060":"E-bird codes and Species seems to be corresponding values.","9cca26be":"## 2.5. Unique values","9abcdda3":"\n## 2.3. Glimpse the data\n\nWe perform a preliminary analysis of the data, looking to such things like data shape, missing data, unique values.","b1a2dc20":"It looks like recording birdsongs is mainly a weekend activity (which makes sense, since most of the recorders are volunteers), since most of the recording are on Saturdays & Sundays.","0fbe0f7c":"## 2.2. Load the data\n\nHere we load the metadata (csv file).","9e0fbc56":"## 3.3. Time and location distribution","ff63b1a5":"Going out to record birdsongs happens mostly in May and Junr, when more than 40% of all records were made.","99650728":"Let's explore now the signal data from the training set.","0fbac6b6":"# 3. Data exploration\n\nWe will explore the data, starting with the metadata information (csv file).\n\n## 3.1. Features values distribution","3cf0b951":"# Signal data exploration","38250caa":"## 3.2. Geographical distribution\n\nLet's look now to the geographical distribution of data. We will group on latitude and longitude and count the occurences for each {latitude, longitude} tuple.\nNext, we will represent this geographical distribution with a heatmap, the intensity of color being proportional with the number of data.","3da8a210":"## 2.4 Missing data","1df06e7a":"Background is given in name of the species and (in paranthesys) the scientific name.","b46619af":"## Analyze signals\n\n\n### Signal plots\n\nLet's plot some of the signals in time.\n\nWe create a function that samples few signals from a certain species and display it.","aca13861":"We also can group the data on countries."}}