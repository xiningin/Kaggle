{"cell_type":{"4257e255":"code","2c3a058f":"code","981b7246":"code","637caca6":"code","ff7d3001":"code","dce8f430":"code","60a93e02":"code","cca98b0f":"code","7328e375":"code","e3ef4d65":"code","82e8205e":"code","7e401262":"code","75a70bef":"code","c346c49c":"code","73c2ca7d":"code","578bb9b2":"code","74267a12":"code","ed5fb496":"code","1d6a3e15":"code","6d482472":"code","68feee9e":"code","34fda5c4":"code","3b56d95d":"code","d81aa9b5":"code","0d336769":"markdown","499c3d87":"markdown","063b6285":"markdown","7d171982":"markdown","470883d7":"markdown"},"source":{"4257e255":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport datetime as dt\nimport seaborn as sns\nsns.set_style('whitegrid')\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.tokenize import word_tokenize\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c3a058f":"dataset = pd.read_csv('..\/input\/coursera-course-dataset\/coursea_data.csv');\ndataset.head()","981b7246":"dataset.info()","637caca6":"dataset.isnull().sum()","ff7d3001":"dataset.describe().transpose()","dce8f430":"#Import TfIdfVectorizer from scikit-learn\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n#Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'\ntfidf = TfidfVectorizer(stop_words='english')\n\n#Construct the required TF-IDF matrix by fitting and transforming the data\ntfidf_matrix = tfidf.fit_transform(dataset['course_title'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape","60a93e02":"# Import linear_kernel\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","cca98b0f":"#Construct a reverse map of indices and movie titles\nindices = pd.Series(dataset.index, index=dataset['course_title']).drop_duplicates()","7328e375":"# Function that takes in movie title as input and outputs most similar movies\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    # Get the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    course_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return dataset['course_title'].iloc[course_indices]","e3ef4d65":"get_recommendations('AI for Medical Diagnosis')","82e8205e":"from sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.tokenize import word_tokenize","7e401262":"bow = CountVectorizer(stop_words=\"english\", tokenizer=word_tokenize)\nbank = bow.fit_transform(dataset.course_title)","75a70bef":"idx = 0\ncontent = dataset.loc[idx,'course_title']\ncontent","c346c49c":"code = bow.transform([content])\ncode","73c2ca7d":"from sklearn.metrics.pairwise import cosine_distances\n\ndist = cosine_distances(code,bank)\ndist","578bb9b2":"rec_idx = dist.argsort()[0,1:11]\nrec_idx","74267a12":"dataset.loc[rec_idx]","ed5fb496":"def clean_data(x):\n    if isinstance(x, list):\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        #Check if director exists. If not, return empty string\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''","1d6a3e15":"# Apply clean_data function to your features.\nfeatures = ['course_organization', 'course_Certificate_type', 'course_difficulty']\n\nfor feature in features:\n    dataset[feature] = dataset[feature].apply(clean_data)","6d482472":"def create_soup(x):\n    return ''.join(x['course_title']) + ' '  + ''.join(x['course_organization']) + ' '  + ''.join(x['course_difficulty'])\ndataset['soup'] = dataset.apply(create_soup, axis=1)\ndataset.head(10)","68feee9e":"# Import CountVectorizer and create the count matrix\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(dataset['soup'])\ncount_matrix","34fda5c4":"from sklearn.metrics.pairwise import cosine_similarity\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)\ncosine_sim2","3b56d95d":"# Reset index of our main DataFrame and construct reverse mapping as before\ndataset = dataset.reset_index()\nindices = pd.Series(dataset.index, index=dataset['course_title'])","d81aa9b5":"rec = get_recommendations('AI for Medical Diagnosis', cosine_sim2)\nrec","0d336769":"**CARA 1\nCONTENT : JUDUL**","499c3d87":"# > **CONTENT BASED FILTERING**","063b6285":"CARA 2","7d171982":"CARA 3","470883d7":"HASIL REKOMENDASI"}}