{"cell_type":{"8805d93f":"code","e4fd0e82":"code","f73fb3a7":"code","b3abd586":"code","e8dfc975":"code","4c1ab9b4":"code","84eb58a4":"code","37ef0b06":"code","70e62893":"code","711cfda8":"code","c233a58a":"code","e95354e7":"code","4c3f1556":"code","440f2145":"code","e32774ff":"code","d8a44f00":"code","c49d9765":"code","52fc0100":"code","a77cbf59":"code","6cf7c3b7":"code","c5f854bf":"code","703f4fcb":"code","84e2c8c4":"code","cd4408d2":"code","95ad3303":"code","bcfe355a":"markdown","b1c23530":"markdown","70e296e6":"markdown","7c9f4e77":"markdown","87296b36":"markdown","bf375ab4":"markdown","fdd09c42":"markdown","6c8cb508":"markdown","f1fb61ab":"markdown","8ffdb81c":"markdown","70058f3b":"markdown","a87b2335":"markdown","d066c077":"markdown","54ef7016":"markdown","97855c9e":"markdown","fafad323":"markdown","3a3e2cf2":"markdown","7d2661cc":"markdown","85363b12":"markdown","15bdf82d":"markdown","5811001a":"markdown","15004fe4":"markdown","64e7dd67":"markdown","1c26c6ae":"markdown","0da61985":"markdown","feb1e175":"markdown","9a17f8ef":"markdown","152b0730":"markdown","d0f16dbd":"markdown"},"source":{"8805d93f":"import numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import tree\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.dummy import DummyClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nfrom sklearn import svm","e4fd0e82":"address = r'..\/input\/beginner-datasets\/beginner_datasets\/diamond.csv'\ndf=pd.read_csv(address)\ndf.head(10)","f73fb3a7":"df.describe()","b3abd586":"labelencoder = LabelEncoder()\ndf['Report']=pd.get_dummies(df['Report'])\ndf['Cut'] = labelencoder.fit_transform(df['Cut'])\ndf['Color'] = labelencoder.fit_transform(df['Color'])\ndf['Clarity'] = labelencoder.fit_transform(df['Clarity'])\ndf['Polish'] = labelencoder.fit_transform(df['Polish'])\ndf['Symmetry'] = labelencoder.fit_transform(df['Symmetry'])\ndf.head()","e8dfc975":"df.isnull().sum()","4c1ab9b4":"df.info()","84eb58a4":"check = sns.barplot(x=df['Report'], y=df['Price'], data=df, linewidth=2.5, color=\"salmon\", errcolor=\".2\", edgecolor=\".2\")\nplt.title('Reporting Companies Price Comparison')\nplt.xlabel('Reporting Company')\nplt.show()\nprint('0 = GIA ,1 = AGSL')","37ef0b06":"df=df.drop(labels = \"Report\", axis = 1)","70e62893":"plt.figure(figsize=(20,10))\nc= df.corr()\nsns.heatmap(c,cmap=\"Accent\",annot=True)\nplt.show()","711cfda8":"df.hist(bins=50, figsize=(20,15), color = 'Black')\nplt.show()","c233a58a":"sns.barplot(x='Cut',y = 'Price', data=df)\nplt.show()","e95354e7":"sns.barplot(x='Clarity' , y='Price' , data=df )\nplt.title('Clarity - Price Correlation')\nplt.xlabel('Clarity Ranking')\nplt.show()\nprint('0 = FL','1 = IF','2 = SI1','3 = VS1','4 = VS2','5 = VVS1','6 = VVS2')\ndf['Clarity'].value_counts()","4c3f1556":"plt.scatter(df['Carat Weight'],df['Price'],color='pink')\nplt.title('Carat Weight')\nplt.xlabel('Carat Weight in Grams')\nplt.ylabel('Price')\nplt.show()","440f2145":"sns.barplot(x=df['Color'], y=df['Price'], palette=\"Reds_d\")\nplt.title('Color - Price Correlation')\nplt.show()\nprint('0 = D','1 = E','2 = F','3 = G','4 = H','5 = I')","e32774ff":"sns.jointplot(x='Symmetry' , y='Price' , data=df , height=5 , color = 'Green')\nplt.title('Symmetry')\nplt.show()\nprint('0 = excellent','1 = good','2 = ideal','3 = very good')","d8a44f00":"sns.catplot(x=\"Polish\", y=\"Price\", data=df)\nplt.title('Polish')\nplt.xlabel('Polish Ranking')\nplt.show()\nprint('0 = excellent','1 = good','2 = ideal','3 = very good')","c49d9765":"x = df.drop('Price', axis = 1)\ny = df.Price\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2)","52fc0100":"regr = LinearRegression()\nregr.fit(x_train,y_train)\nlin_prediction = regr.predict(x_test)","a77cbf59":"print(\"MAE:\", mean_absolute_error(y_test, lin_prediction))\nlinModel = LinearRegression().fit(x_train,y_train)\nprint(\"Score:\" ,linModel.score(x_train,y_train))\nlin_scores = cross_val_score(linModel, x, y, cv=5)\nprint(\"Cross Validation scores mean:\",lin_scores.mean())","6cf7c3b7":"knn = KNeighborsRegressor(n_neighbors = 2)\nknn.fit(x_train,y_train)\nknn_prediction = knn.predict(x_test)","c5f854bf":"arr = []\nfor i in range(1,15):\n    knn2 = KNeighborsRegressor(n_neighbors = i)\n    knn2.fit(x_train, y_train)\n    linModel = KNeighborsRegressor(n_neighbors = i).fit(x_train,y_train)\n    arr.append(linModel.score(x_train,y_train))\n    \nplt.plot(range(1,15), arr)\nplt.xticks(np.arange(1,15,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()","703f4fcb":"knn_scores = cross_val_score(knn, x, y, cv=4)\nknn_model = KNeighborsRegressor(n_neighbors = 2).fit(x_train,y_train)\nprint(\"Cross Validation scores mean:\",knn_scores.mean())\nprint(\"Score:\" , knn_model.score(x_train,y_train))","84e2c8c4":"model = DecisionTreeRegressor(random_state = 0)\nmodel.fit(x_train, y_train)\ndtr_prediction = model.predict(x_test)","cd4408d2":"print(\"MAE:\", mean_absolute_error(y_test, dtr_prediction))\ndtrModel = DecisionTreeRegressor().fit(x_train,y_train)\nprint(\"Score: \", dtrModel.score(x_train,y_train))\ndtr_scores = cross_val_score(dtrModel, x, y, cv=5)\nprint(\"Cross Validation scores mean:\", dtr_scores.mean())","95ad3303":"arrX = ['Linear Regression','KNN', 'Decision Tree Regressor']\narrY = [lin_scores.mean()*100,knn_scores.mean()*100, dtr_scores.mean()*100]\nplt.plot (arrX, arrY, linestyle='--',color='purple')\nplt.title(\"Model Results Comparison\", fontsize = 18)\nplt.xlabel(\"Model\")\nplt.ylabel(\"Cross Validation Score Mean (%)\")\nplt.show()","bcfe355a":"Let's look at a range of k values","b1c23530":"#### One carat diamond weighs 0.2 grams","70e296e6":"# The end","7c9f4e77":"![diamond%20color.gif](attachment:diamond%20color.gif)","87296b36":"Let's check for null values","bf375ab4":"![diamonds%20clarity.png](attachment:diamonds%20clarity.png)","fdd09c42":"0 = fair\n1 = good\n2 = ideal\n3 = signature ideal\n4 = very good","6c8cb508":"### Let's check whether the company reporting on the diamonds affects their value","f1fb61ab":"## Divide data into training and testing sets","8ffdb81c":"Let's check the Linear Regression's results","70058f3b":"### Diamonds symmetry chart","a87b2335":"### Linear Regression","d066c077":"![diamond.jpeg](attachment:diamond.jpeg)","54ef7016":"![symmetry%202.jpg](attachment:symmetry%202.jpg)","97855c9e":"Carat Weight: in grams\n\nCut: how good the cut is\n\nColor: the color of the diamond\n\nClarity: diamond clarity rating\n\nPolish: diamond polish rating\n\nSymmetry: diamond symmetry rating\n\nReport: which company has graded the diamond\n\nPrice: in US dollars","fafad323":"Let's check the Decision Tree Regressor's results","3a3e2cf2":"Let's delete the report column, since it has no significance","7d2661cc":"### Import the data","85363b12":"### Diamonds cut chart","15bdf82d":"### KNN\n### K = 2","5811001a":"![diamond%20cut.jpg](attachment:diamond%20cut.jpg)","15004fe4":"### Diamonds clarity chart","64e7dd67":"### Diamonds color chart","1c26c6ae":"Let's check the KNN Regressor's results","0da61985":"### Decision Tree  Regressor","feb1e175":"# Correlation chart","9a17f8ef":"## Attribute Information","152b0730":"Although the 4 diamonds rated 0 (=Flawless) for clarity have significantly higher prices, since there are only 4 of them they don't affect the data analysis and models. Therefore I didn't remove them from the data. They aren't outliers, since their prices (behavior) match their group's.","d0f16dbd":"### Replace object values with numeric values"}}