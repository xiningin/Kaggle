{"cell_type":{"2a0123b7":"code","f0314525":"code","4633e164":"code","f1f84da8":"code","758dc159":"code","f69081ba":"code","0b100d0f":"code","298b5ae7":"code","75dd4c14":"code","c28d15a4":"code","a36e3c9e":"code","76ee30bf":"code","83e2de50":"code","fbda4859":"code","5a16bc8c":"code","42fe73d5":"code","00f3b662":"code","301cbf56":"markdown","c77adb55":"markdown","e84ad1f1":"markdown","cec4ec44":"markdown"},"source":{"2a0123b7":"import numpy as np\nimport pandas as pd","f0314525":"train = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv')","4633e164":"train.head(5)","f1f84da8":"import seaborn as sns\nsns.set(rc={'figure.figsize':(20,5)})\n\ndef show_sells(country, store, product):\n    \n    sells = train.loc[(train['country'] == country) & \n                               (train['product'] == product) &\n                               (train['store'] == store)]\n    sells['date'] = pd.to_datetime(sells['date'])\n    sns.lineplot(data=sells, x='date', y='num_sold')","758dc159":"show_sells('Finland', 'KaggleMart', 'Kaggle Mug')","f69081ba":"show_sells('Norway', 'KaggleMart', 'Kaggle Sticker')","0b100d0f":"show_sells('Sweden', 'KaggleRama', 'Kaggle Hat')","298b5ae7":"from sklearn.preprocessing import LabelEncoder\n\n\ndef transform_labels(df):\n    le = LabelEncoder()\n    df['country'] = le.fit_transform(df['country'])\n    df['store'] = le.fit_transform(df['store'])\n    df['product'] = le.fit_transform(df['product'])\n    return df","75dd4c14":"train = transform_labels(train)\ntrain.head(5)","c28d15a4":"def transform_date(df):\n    df['date'] = pd.to_datetime(df['date'])\n    df['day'] = df['date'].dt.day\n    df['month'] = df['date'].dt.month\n    #df['year'] = df['date'].dt.year - 2015\n    df['weekday'] = df['date'].dt.dayofweek\n    df['yearday'] = df['date'].dt.dayofyear\n    df = df.drop(columns=['date', 'row_id'])\n    return df\n\ntrain = transform_date(train)","a36e3c9e":"Y = train['num_sold']\nX = train.drop(columns=['num_sold'])","76ee30bf":"from sklearn.model_selection import train_test_split\n\n\nX_train, X_dev, y_train, y_dev = train_test_split(X, Y, test_size=0.2, random_state=42)","83e2de50":"def smape(A, F):    \n    N = A.shape[0] \n    return 100 \/ N * np.sum(np.divide(np.abs(A - F),\n                                      np.divide(np.abs(A) + np.abs(F), 2)))\n    ","fbda4859":"from xgboost import XGBRegressor\n\nmodel = XGBRegressor(eta=0.05)\nmodel.fit(X_train, y_train)\n\ny_pred = pd.Series(model.predict(X_dev))\n\nsmape(y_dev, y_pred)","5a16bc8c":"test = transform_labels(test)\ntest = transform_date(test)\n\nY_test = model.predict(test)\nY_test = Y_test.astype(int)\n","42fe73d5":"result = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/sample_submission.csv')\nresult['num_sold'] = pd.Series(Y_test)","00f3b662":"result.to_csv('submission.csv', index=False)","301cbf56":"This data definetly has seasonality. The month matters, december is the month when sells are particulary high. Different products have different sells dynamics: sometimes it's close to sine wave.","c77adb55":"The graphs had shown that linear methods won't work. It won't handle these ups in the end of any year. Tree-based models could hangle that.","e84ad1f1":"It helped me a lot when I added weekday and yearday. Year made results worse.","cec4ec44":"Let's see the dynamics of sells for a particular product in particular country and particular shop."}}