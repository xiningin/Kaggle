{"cell_type":{"1e798c4f":"code","0ea32486":"code","4680f4c4":"code","8012e762":"code","c71ceb5b":"code","a76b6e90":"code","73840ae8":"code","3786fac9":"code","ecd01a3f":"code","ad23af4d":"code","efc06c60":"code","4a96eed6":"code","57e30432":"code","7b376e35":"code","2aa653fc":"code","48a5c7f0":"code","ccf6a719":"code","962518a7":"code","a8925043":"code","95c515cc":"code","c883dd57":"markdown","39485b32":"markdown","3e3e514e":"markdown","41030884":"markdown","8573e821":"markdown","0b1e6a24":"markdown","1c7ca624":"markdown","417f0ead":"markdown","d4a8c6dc":"markdown","fd05f33f":"markdown","31be92a4":"markdown","bbfac44d":"markdown","99668386":"markdown","565e2e97":"markdown","c655b893":"markdown","cb31af16":"markdown","8d3de868":"markdown","88b5174b":"markdown","95938f95":"markdown","b1288291":"markdown","a268c447":"markdown"},"source":{"1e798c4f":"import pandas as pd\nimport numpy as ny\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport plotly.express as px\nimport geopandas\nfrom wordcloud import WordCloud\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\n!pip install openpyxl ","0ea32486":"athletes = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Athletes.xlsx')\ncoaches = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Coaches.xlsx')\nentries_gender = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/EntriesGender.xlsx')\nmedals = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Medals.xlsx')\nteams = pd.read_excel('..\/input\/2021-olympics-in-tokyo\/Teams.xlsx')","4680f4c4":"#cleaning athletes\nprint(\"Number of rows and columns : \"+ str(athletes.shape))\ndupes = athletes[athletes.duplicated()]\nif dupes.empty:\n    print(\"No duplucates found\")\nelse:\n    print(\"Duplicates found\")\n    print(dupes)\n","8012e762":"athletes[athletes.Name == \"ALI Mohamed\"]","c71ceb5b":"athletes = athletes.drop_duplicates()","a76b6e90":"naCount = athletes.isnull().any(axis = 1).sum()\nnull_data = athletes[athletes.isnull().any(axis=1)]\nnull_data\nprint(\"Count of null values in athletes is \" + str(naCount))\nprint(\"Displaying the Clean Table\")\nathletes.info","73840ae8":"print(\"Number of Rows and Columns : \" + str(entries_gender.shape))\ndupes = entries_gender[entries_gender.duplicated()]\nif dupes.empty:\n    print(\"No duplucates found\")\nelse:\n    print(\"Duplicates found\")\n    print(dupes)","3786fac9":"naCount = entries_gender.isnull().any(axis = 1).sum()\nprint(\"Count of null values in coaches is \" + str(naCount))\nprint(\"Displaying the Clean Table\")\nentries_gender.info","ecd01a3f":"print(\"Number rows rows and columns : \" + str(medals.shape))\ndupes = medals[medals.duplicated()]\nif dupes.empty:\n    print(\"No duplucates found\")\nelse:\n    print(\"Duplicates found\")\n    print(dupes)","ad23af4d":"#Looking for NUll Values\nnaCount = medals.isnull().any(axis = 1).sum()\nprint(\"Count of null values in medals is \" + str(naCount))\nprint(\"Displaying the Clean Table\")\nmedals.info","efc06c60":"print(\"Number rows rows and columns : \" + str(teams.shape))\ndupes = teams[teams.duplicated()]\ndupes.empty\nif dupes.empty:\n    print(\"No duplucates found\")\nelse:\n    print(\"Duplicates found\")\n    print(dupes)","4a96eed6":"#looking for NUll Values\nnaCount = teams.isnull().any(axis = 1).sum()\nprint(\"Count of null values in teams is \" + str(naCount))\nprint(\"Displaying the Clean Table\")\nteams.info","57e30432":"tasks = medals['Total'].head(10)\nmyLabels=medals['Team\/NOC'].head(10)\nplt.figure(figsize=(9,7))\nplt.pie(tasks,labels=myLabels,autopct='%1.1f%%')\nplt.title('Top 10 Countries', fontsize = 20)\nplt.axis('equal')\nplt.show()","7b376e35":"medal_gold = medals[['Team\/NOC','Gold']]\nmedal_gold=medal_gold.sort_values(['Gold'], ascending=False)\nmedal_gold = medal_gold.head(10)\ntasks = medal_gold['Gold']\nmyLabels=medal_gold['Team\/NOC']\nplt.figure(figsize=(9,7))\nplt.pie(tasks,labels=myLabels,autopct='%1.1f%%')\nplt.title('Top 10 Gold winning Countries', fontsize =20)\nplt.axis('equal')\nplt.show()","2aa653fc":"medals=medals.sort_values(['Silver'], ascending=False)\ntasks = medals['Silver'].head(10)\nmyLabels=medals['Team\/NOC'].head(10)\nplt.figure(figsize=(9,7))\nplt.pie(tasks,labels=myLabels,autopct='%1.1f%%')\nplt.title('Top 10 Silver winning Countries', fontsize = 20)\nplt.axis('equal')\nplt.show()","48a5c7f0":"medals = medals.sort_values(['Bronze'], ascending = False)\ntasks = medals['Bronze'].head(10)\nmyLabels = medals['Team\/NOC'].head(10)\nplt.figure(figsize=(9,7))\nplt.pie(tasks, labels = myLabels, autopct='%1.1f%%')\nplt.title('Top 10 Bronze Winning Countries', fontsize=20)\nplt.axis('equal')\nplt.show\n","ccf6a719":"#NUmber of athletes per country \nathletes_countries = athletes.groupby(\"NOC\").count().reset_index()\nathletes_countries = athletes_countries.drop(columns = ['Discipline'])\nathletes_countries = athletes_countries.rename(columns = {\"Name\":\"Number of Athletes\"}).sort_values(by = 'Number of Athletes', ascending = False)\nathletes_countries\n# Change some contries names\nathletes_countries['NOC'] = athletes_countries['NOC'].replace('ROC', 'Russia')\nathletes_countries['NOC'] = athletes_countries['NOC'].replace(\"People's Republic of China\", 'China')\nathletes_countries['NOC'] = athletes_countries['NOC'].replace('Islamic Republic of Iran', 'Iran')\nathletes_countries['NOC'] = athletes_countries['NOC'].replace('United Republic of Tanzania', 'Tanzania')\nathletes_countries['NOC'] = athletes_countries['NOC'].replace('Democratic Republic of the Congo', 'Democratic republic of the congo')\n\n#Average number of participants from each country\ntop = athletes_countries.head(10)\ntop.plot.bar(x='NOC', title = \"Number of Athletes by Country (Top 10)\", fontsize =10)\n\n\n\n#Plotting them on map\nworld = geopandas.read_file(geopandas.datasets.get_path(\"naturalearth_lowres\"))\nathletes_country_final = world.merge(athletes_countries, how = 'left', left_on=['name'], right_on=['NOC'])\n\nsns.set_style(\"ticks\")\nathletes_country_final.plot(\"Number of Athletes\",\n                           figsize=(22,10),\n                           legend=True,\n                           edgecolor=\"black\",\n                           legend_kwds={\"label\":\"Athletes by Country\"},\n                           cmap='Wistia',\n                           missing_kwds={\"color\":\"white\"}\n                          )\nplt.title(\"Number of Athletes by Country\", fontsize = 20);","962518a7":"medals_countries = medals\nmedals_countries['Team\/NOC'] = medals['Team\/NOC'].replace('ROC', 'Russia')\nmedals_countries['Team\/NOC'] = medals['Team\/NOC'].replace(\"People's Republic of China\", 'China')\nmedals_countries['Team\/NOC'] = medals['Team\/NOC'].replace('Islamic Republic of Iran', 'Iran')\nmedals_countries['Team\/NOC'] = medals['Team\/NOC'].replace('United Republic of Tanzania', 'Tanzania')\nmedals_countries['Team\/NOC'] = medals['Team\/NOC'].replace('Democratic Republic of the Congo', 'Democratic republic of the congo')\ntop10Medal = medals_countries.head(10)\ntop10Medal\ntop10NoAthlete = athletes_countries.head(10)\ntop10NoAthlete\n\n#Merging both data frames to see if countries with most number of athletes win the most number of medals\nM_A = pd.merge(top10Medal , top10NoAthlete, left_on='Team\/NOC',right_on='NOC')\nM_A_V2 = M_A[['NOC' , 'Total']]\nprint(str(M_A.NOC.count())+ \"\/10 of the Countries which have the most number of athletes in Tokyo Olympics 2020 are also listed in the Top 10 Performorming countries.\")\nprint(M_A.NOC)\n","a8925043":"plt.figure(figsize=(12,8))\ngender_plot = entries_gender.sort_values(by='Total', ascending= False).reset_index(drop=True).head(10)\n\npx.bar(gender_plot, x ='Discipline',\n        y=['Female','Male'],\n        color_discrete_sequence =['#D7BDE2','#2980B9'],\n        title = \"Distribution of genders across Discipline\")","95c515cc":"px.pie(data_frame=entries_gender,\n      names = ['Female','Male'],\n      values=[entries_gender['Female'].sum(),entries_gender['Male'].sum()],\n      color_discrete_sequence=['#2980B9','#D7BDE2'],\n      title = \"Distribution of genders across olimpics\")","c883dd57":"## 3.0 Cleaning Data\n### 3.1 Cleaning Athletes \nSearching for duplicates and null values and fixing them.","39485b32":"<div id='content'><\/div>\n\n## Index\n\n* [**Importing Modules**](#Chapter 1)\n* [**IMporting Data**](#Chapter 2)","3e3e514e":"### Countries which have the most number of athletes in Tokyo Olympics 2020 and are also listed in the Top 10 Performorming countries","41030884":"### Number of Men vs Women Athletes","8573e821":"# **EDA of Olympics 2020**\n![](https:\/\/stillmed.olympics.com\/media\/Images\/OlympicOrg\/News\/2017\/06\/09\/2017-06-09-tokyo2020-thumbnail.jpg?interpolation=lanczos-none&resize=2120:1200)","0b1e6a24":"### 4.3 Top 10 Silver Winning Countries","1c7ca624":"### 4.2 Top 10 Gold Winning Countries","417f0ead":"Duplicates Exist.","d4a8c6dc":"## 2.0 Importing Data","fd05f33f":"### 3.3 Cleaning Medals\nLooking for duplicate and Null data in the data frame.info","31be92a4":"### Countries with Most number of Participants","bbfac44d":"## 5.0 Conclusion\n\n* **USA , China and Japan are the Top 3 Performing Countries at the Olympics**\n* **7\/10 of the Countries with most Number of Athletes are amongst the Top 10 Medal Grabbing Countries at the Tokyo Olympics 2020**\n* **Number of Male Athletes is more than the Female Athletes by a Small Margin of 7%**\n* **Athletics is has the Most number of Athletes**","99668386":"**All Four Dataframes are now Clean**\n\n## 4.0 Analysis and Visualization\n### 4.1 Top 10 Countries with most number of medals","565e2e97":"### 3.2 Cleaning entries_gender\nLooking for duplicate and Null data in the data frame.","c655b893":"### 3.4 Cleaning Teams\nLooking for duplicate and Null data in the data frame.","cb31af16":"Looking for Null data","8d3de868":"### Top 10 Bronze Winning Countries","88b5174b":"<div id='Chapter1'><\/div>\n\n## 1.0 Importing modules","95938f95":"### Distribution of genders across olimpics\"","b1288291":"### **The aim is to clean and explore the data to gain some insights on the games played in the Tokyo Olympics**","a268c447":"The duplicated data is true and identical and hence it will be removed"}}