{"cell_type":{"185aaabb":"code","4b816e06":"code","674fb057":"code","40a80bb9":"code","2a4775f1":"code","816d0be7":"code","86aa48d2":"code","c7f15b08":"code","459716c4":"code","97400587":"code","895054a9":"code","7325d9cd":"code","89c9b9c6":"code","c85238a3":"code","859a968f":"code","4fc004c3":"code","af395a85":"code","a40d9363":"markdown","9bfd8c33":"markdown","3abce6e8":"markdown","c84f03f2":"markdown","32f20cde":"markdown","e71fb065":"markdown","f2106a36":"markdown","f6348d1f":"markdown","de60af2f":"markdown","3a901df9":"markdown","cc2c466b":"markdown"},"source":{"185aaabb":"!pip install pyradiomics","4b816e06":"# special functions for using pyradiomics\nfrom SimpleITK import GetImageFromArray\nimport radiomics\nfrom radiomics.featureextractor import RadiomicsFeatureExtractor # This module is used for interaction with pyradiomic\nimport logging\nlogging.getLogger('radiomics').setLevel(logging.CRITICAL + 1)  # this tool makes a whole TON of log noise","674fb057":"# Instantiate the extractor\ntexture_extractor = RadiomicsFeatureExtractor(verbose=False)\ntexture_extractor.disableAllFeatures()\n_text_feat = {ckey: [] for ckey in texture_extractor.featureClassNames}\ntexture_extractor.enableFeaturesByName(**_text_feat)\n\nprint('Extraction parameters:\\n\\t', texture_extractor.settings)\nprint('Enabled filters:\\n\\t', texture_extractor.enabledImagetypes) \nprint('Enabled features:\\n\\t', texture_extractor.enabledFeatures) ","40a80bb9":"import numpy as np # for manipulating 3d images\nimport pandas as pd # for reading and writing tables\nimport h5py # for reading the image files\nimport skimage # for image processing and visualizations\nimport sklearn # for machine learning and statistical models\nimport os # help us load files and deal with paths\nfrom pathlib import Path # help manage files","2a4775f1":"%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nplt.rcParams[\"figure.figsize\"] = (8, 8)\nplt.rcParams[\"figure.dpi\"] = 125\nplt.rcParams[\"font.size\"] = 14\nplt.rcParams['font.family'] = ['sans-serif']\nplt.rcParams['font.sans-serif'] = ['DejaVu Sans']\nplt.style.use('ggplot')\nsns.set_style(\"whitegrid\", {'axes.grid': False})","816d0be7":"data_root = Path('..') \/ 'input'\nall_df = pd.DataFrame({'h5_path': list(data_root.glob('*\/*.h5'))})\nall_df['file_id'] = all_df['h5_path'].map(lambda x: x.stem)\nall_df['training_group'] = all_df['h5_path'].map(lambda x: x.parent.stem)\nall_df['scan_id'] = all_df['file_id'].map(lambda x: int(x.split('_')[-1]))\nall_df.head(5) # show the first 5 lines","86aa48d2":"def read_scan(full_scan_path):\n    # load the image using hdf5\n    with h5py.File(full_scan_path, 'r') as h:\n        # [::2, ::4, ::4, 0] downsampling makes it go much faster\n        return h['image'][:][:, :, :, 0] # we read the data from the file","c7f15b08":"sample_scan = all_df.iloc[0] # just take the first row\nprint(sample_scan)\n# turn the h5_path into the full path\nimage_data = read_scan(sample_scan['h5_path'])\nprint('Image Shape:', image_data.shape)","459716c4":"# we take a mask by just keeping the part of the image greater than 0\nplt.imshow(np.sum((image_data>0).astype(float), 0))","97400587":"%%time\nresults = texture_extractor.execute(GetImageFromArray(image_data),\n                            GetImageFromArray((image_data>0).astype(np.uint8)))","895054a9":"pd.DataFrame([results]).T","7325d9cd":"def calc_radiomics(in_image_data):\n    return texture_extractor.execute(GetImageFromArray(in_image_data),\n                            GetImageFromArray((in_image_data>0).astype(np.uint8)))","89c9b9c6":"%%time\nall_df['radiomics'] = all_df['h5_path'].map(lambda c_filename: calc_radiomics(read_scan(c_filename)))","c85238a3":"full_df = pd.DataFrame([dict(**c_row.pop('radiomics'), **c_row) for _, c_row in all_df.iterrows()])\nprint(full_df.shape, 'data prepared')\nfirst_cols = all_df.columns[:-1].tolist()\nfull_df = full_df[first_cols + [c_col for c_col in full_df.columns \n                                if c_col not in first_cols]]\n# export the whole table\nfull_df.to_csv('all_radiomics_table.csv', index=False)\nfull_df.sample(3)","859a968f":"# leave out anything that doesn't start with original (just junk from the input)\n# also remove shape since it is not very informative\nvalue_feature_names = [c_col for c_col in full_df.columns if (c_col.startswith('original') and '_shape_' not in c_col)]\nprint(np.random.choice(value_feature_names, 3), 'of', len(value_feature_names))","4fc004c3":"# make a cleaner vefirst_colson\nclean_df = full_df[first_cols + value_feature_names].copy()\nclean_df.columns = first_cols + [\n    ' '.join(c_col.split('original_')[-1].split('_')) \n    for c_col in value_feature_names\n]\nclean_col_names = clean_df.columns[len(first_cols):]\n# fix some of the artifacts from the radiomics tool\nobj_cols = clean_df[clean_col_names].select_dtypes(['object']).columns.tolist()\nfor c_col in obj_cols:\n    clean_df[c_col] = clean_df[c_col].map(lambda x: float(x))\nclean_df.to_csv('clean_radiomics_table.csv', index=False)\nclean_df.sample(3)","af395a85":"fig, m_axs = plt.subplots(12, 8, figsize=(60, 70))\nfor c_ax, c_var in zip(m_axs.flatten(), clean_col_names):\n    c_ax.hist(clean_df[c_var].values, bins=10)\n    c_ax.set_title('\\n'.join(c_var.split(' ')))\nfig.savefig('all_metrics.png')","a40d9363":"# Read Image","9bfd8c33":"### Setup the PyRadiomics Code","3abce6e8":"# Calculate Radiomic Features\nCalculate the radiomic features for the test scan","c84f03f2":"# Show the distribution of different variables","32f20cde":"# Overview\nIn this notebook we load the data and view different images to get a better idea about the challenge we are facing. This is always a very helpful first step. It is also important that you can see and try to make some of your own predictions about the data. If you cannot see differences between the groups it is going to be difficult for a biomarker to capture that (but not necessarily impossible)","e71fb065":"# Load a Scan\n- the data on kaggle are located in a parent folder called input. \n- Since the files have been organized into train and test we use the train folder","f2106a36":"# Load all of the images\nWe start with the training data since we have labels for them and can look in more detail","f6348d1f":"# Focusing on Interesting Radiomics","de60af2f":"### Plot Setup Code\nHere we setup the defaults to make the plots look a bit nicer for the notebook","3a901df9":"### Run over all scans\nWe use the `.map` function from pandas to calculate the brightness for all the scans","cc2c466b":"Install the PyRadiomics package read more about it here (https:\/\/pyradiomics.readthedocs.io\/en\/latest\/)"}}