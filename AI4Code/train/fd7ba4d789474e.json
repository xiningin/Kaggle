{"cell_type":{"7ca1fecb":"code","2164a8a1":"code","407fc3ef":"code","a1610d10":"code","6bdb2d4f":"code","d536da24":"code","acad3b66":"code","e6161f1a":"code","403b99cf":"code","af658b36":"code","90c27c2a":"code","0457f5fb":"code","8923ecc6":"code","759e6088":"code","791e0d30":"code","fede15f2":"code","1fa3cde7":"code","155cef63":"code","c526face":"code","33599df6":"code","618b2260":"code","c62db375":"code","2ab73c6b":"code","9254270c":"code","e2a64779":"code","f95cf4a9":"code","f8871540":"code","570f124a":"code","2e092e64":"code","d40d4f09":"code","13e4446c":"code","9b989686":"code","716dc63f":"code","9ce285b2":"code","d8930074":"code","9215aa9c":"code","6f7bd9e1":"code","cf412b70":"code","79cc06f3":"code","f47bff73":"code","89582243":"code","d1c7f9a8":"code","c8939e5f":"code","ca2d4ee5":"code","2127d50b":"code","2998db7c":"code","d97ea061":"code","53342ae4":"code","4f91b41c":"code","f710dc4d":"code","5df2c57b":"code","ebe747ba":"code","de0c98a6":"code","acbc6c97":"code","865c703b":"code","7a46c63a":"code","c1c38323":"code","59764b52":"code","66767315":"code","8e77d308":"code","d0d27b17":"code","a7ab135f":"code","b74fcd40":"code","197ac0b0":"markdown","68ceb14c":"markdown","1305fa75":"markdown","b3136a88":"markdown","dd686ca7":"markdown","d255c90f":"markdown","7420bb7e":"markdown","8f026ca6":"markdown","0fa96b14":"markdown","6b515467":"markdown","d4b20df4":"markdown","038c9b6c":"markdown","1fd73338":"markdown","2d2650cf":"markdown","1582299f":"markdown","e7ee0b4c":"markdown","51cf3f8a":"markdown","753779d5":"markdown","2db83807":"markdown","e9f4566f":"markdown","a6ff69dd":"markdown","dec62bb6":"markdown","60c2e6a6":"markdown","e78142aa":"markdown","7b6f7b97":"markdown","d88468f3":"markdown","2a2487ff":"markdown","513f39a4":"markdown","36edb610":"markdown","f818418c":"markdown","7e258af0":"markdown","43bb4301":"markdown","bd141b49":"markdown","dbe6ffd7":"markdown","53ba319e":"markdown","f11c0b31":"markdown","9a90df5d":"markdown","59d5740d":"markdown","ec52150a":"markdown","799e8092":"markdown","b3e562fd":"markdown","8eb24f04":"markdown","e9b080ec":"markdown","aa7b418b":"markdown","fad9c566":"markdown","8f3c1914":"markdown","0ce2259e":"markdown","9eec4649":"markdown","d38903cf":"markdown","d0f91a4d":"markdown","d2fb780e":"markdown","f1248eca":"markdown","b7e362dd":"markdown"},"source":{"7ca1fecb":"%matplotlib inline\n\nimport os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams['figure.figsize'] = (8, 5)\nplt.rcParams['font.size'] = 16","2164a8a1":"df = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')","407fc3ef":"print('# of NaNs in train dataset:', df.isna().values.sum())\nprint('# of NaNs in test dataset:', df_test.isna().values.sum())","a1610d10":"BAR_WIDTH = 0.2","6bdb2d4f":"percentage = df.cp_type.value_counts() \/ len(df) * 100\nplt.bar(np.arange(len(percentage)), percentage.values, width=BAR_WIDTH, label='Train')\n\npercentage = df_test.cp_type.value_counts() \/ len(df_test) * 100\nplt.bar(np.arange(len(percentage)) + BAR_WIDTH, percentage.values, width=BAR_WIDTH, label='Test')\n\nplt.xticks(np.arange(len(percentage)) + BAR_WIDTH \/ 2, percentage.index)\nplt.legend()\nplt.xlabel('Perturbation (cp_type) column value')\nplt.ylabel('% of values')\nplt.title('cp_type')\nplt.show()","d536da24":"percentage = df.cp_time.value_counts() \/ len(df) * 100\nplt.bar(np.arange(len(percentage)), percentage.values, width=BAR_WIDTH, label='Train')\n\npercentage = df_test.cp_time.value_counts() \/ len(df_test) * 100\nplt.bar(np.arange(len(percentage)) + BAR_WIDTH, percentage.values, width=BAR_WIDTH, label='Test')\n\nplt.xticks(np.arange(len(percentage)) + BAR_WIDTH \/ 2, percentage.index.astype(str) + ' hours')\nplt.xlim(-0.5, 3.3)\nplt.legend()\nplt.xlabel('Treatment duration (cp_time) column value')\nplt.ylabel('% of values')\nplt.title('cp_time')\nplt.show()","acad3b66":"percentage = df.cp_dose.value_counts() \/ len(df) * 100\nplt.bar(np.arange(len(percentage)), percentage.values, width=BAR_WIDTH, label='Train')\n\npercentage = df_test.cp_dose.value_counts() \/ len(df_test) * 100\nplt.bar(np.arange(len(percentage)) + BAR_WIDTH, percentage.values, width=BAR_WIDTH, label='Test')\n\nplt.xticks(np.arange(len(percentage)) + BAR_WIDTH \/ 2, percentage.index.astype(str) + ' hours')\nplt.xlim(-0.5, 2)\nplt.legend()\nplt.xlabel('Treatment dose (cp_dose) column value')\nplt.ylabel('% of values')\nplt.title('cp_dose')\nplt.show()","e6161f1a":"gene_cols = [f'g-{i}' for i in range(772)]\ndf[gene_cols].values.min(), df[gene_cols].values.max()","403b99cf":"gene_columns_sample = df[gene_cols].sample(9, axis=1, random_state=42)\ngene_columns_sample.describe()","af658b36":"fig, axs = plt.subplots(3, 3, figsize=(15, 6), constrained_layout=True)\nfor i, col in enumerate(gene_columns_sample):\n    sns.distplot(df[col], ax=axs[i \/\/ 3, i % 3], label='Train')\n    sns.distplot(df_test[col], ax=axs[i \/\/ 3, i % 3], label='Test')\n    axs[i \/\/ 3, i % 3].set_title(col)\nfor ax in axs.flat:\n    ax.set(xlabel='', ylabel='')\n    ax.set_xlim(-10.5, 10.5)\n    ax.label_outer()\n    ax.title.set_fontsize(12)\nplt.legend()\nplt.show()","90c27c2a":"sns.distplot(df[gene_cols].mean(), kde=False, bins=75)\nplt.title('Gene features mean distribution')\nplt.show()","0457f5fb":"gene_cols_with_high_mean = np.argsort(df[gene_cols].mean())[-3:]\ngene_cols_with_low_mean = np.argsort(df[gene_cols].mean())[:3]\n\nfig, axs = plt.subplots(2, 3, figsize=(15, 5), constrained_layout=True)\nfor i, col_number in enumerate(gene_cols_with_high_mean):\n    col_name = f'g-{col_number}'\n    sns.distplot(df[col_name], ax=axs[0, i], label='Train')\n    sns.distplot(df_test[col_name], ax=axs[0, i], label='Test')\n    axs[0, i].set_title(col_name)\nfor i, col_number in enumerate(gene_cols_with_low_mean):\n    col_name = f'g-{col_number}'\n    sns.distplot(df[col_name], ax=axs[1, i], label='Train')\n    sns.distplot(df_test[col_name], ax=axs[1, i], label='Test')\n    axs[1, i].set_title(col_name)\nfor ax in axs.flat:\n    ax.set(xlabel='', ylabel='')\n    ax.set_xlim(-10.5, 10.5)\n    ax.label_outer()\n    ax.title.set_fontsize(12)\nfig.suptitle('Gene features with the highest (first row) and the lowest (second row) mean')\nplt.legend()\nplt.show()","8923ecc6":"sns.distplot(df[gene_cols].std(), kde=False, bins=75)\nplt.title('Gene features std distribution')\nplt.show()","759e6088":"gene_cols_with_high_std = np.argsort(df[gene_cols].std())[-3:]\ngene_cols_with_low_std = np.argsort(df[gene_cols].std())[:3]\n\nfig, axs = plt.subplots(2, 3, figsize=(15, 5), constrained_layout=True)\nfor i, col_number in enumerate(gene_cols_with_high_std):\n    col_name = f'g-{col_number}'\n    sns.distplot(df[col_name], ax=axs[0, i], label='Train')\n    sns.distplot(df_test[col_name], ax=axs[0, i], label='Test')\n    axs[0, i].set_title(col_name)\nfor i, col_number in enumerate(gene_cols_with_low_std):\n    col_name = f'g-{col_number}'\n    sns.distplot(df[col_name], ax=axs[1, i], label='Train')\n    sns.distplot(df_test[col_name], ax=axs[1, i], label='Test')\n    axs[1, i].set_title(col_name)\nfor ax in axs.flat:\n    ax.set(xlabel='', ylabel='')\n    ax.set_xlim(-10.5, 10.5)\n    ax.label_outer()\n    ax.title.set_fontsize(12)\nfig.suptitle('Gene features with the highest (first row) and the lowest (second row) std')\nplt.legend()\nplt.show()","791e0d30":"plt.figure(figsize=(8, 7))\nsns.heatmap(df[gene_cols[:50]].corr())\nplt.title('Pairwise correlations of the first 50 gene features')\nplt.show()","fede15f2":"correlations = df[gene_cols].corr()\nplt.figure(figsize=(8, 7))\nsns.heatmap(correlations)\nplt.title('Pairwise correlations of gene features')\nplt.show()","1fa3cde7":"sns.distplot(correlations.abs().values.flatten(), kde=False)\nplt.title('Gene features pairwise (absolute) correlation coefficients distribution')\nplt.show()","155cef63":"correlations_np = correlations.values\ncorrelations_np[np.arange(len(gene_cols)), np.arange(len(gene_cols))] = np.NaN","c526face":"max_corr = np.nanmax(correlations_np)\ni, j = np.where(correlations_np == max_corr)[0]\ni, j = f'g-{i}', f'g-{j}'\nprint(f'Two features with the highest pairwise correlation in the train dataset: {i}, {j}')\nprint(f'Correlation coefficient on train data:', max_corr)\nprint(f'Correlation coefficient on test data:', df_test[[i, j]].corr().values[0][1])\nplt.scatter(df[i], df[j], alpha=0.05)\nplt.xlabel(i)\nplt.ylabel(j)\nplt.title('Two features with the highest correlation')\nplt.show()","33599df6":"min_corr = np.nanmin(correlations_np)\ni, j = np.where(correlations_np == min_corr)[0]\ni, j = f'g-{i}', f'g-{j}'\nprint(f'Two features with the lowest pairwise correlation in the train dataset: {i}, {j}')\nprint(f'Correlation coefficient on train data:', min_corr)\nprint(f'Correlation coefficient on test data:', df_test[[i, j]].corr().values[0][1])\nplt.scatter(df[i], df[j], alpha=0.05)\nplt.xlabel(i)\nplt.ylabel(j)\nplt.title('Two features with the lowest correlation')\nplt.show()","618b2260":"cell_viability_cols = [f'c-{i}' for i in range(100)]","c62db375":"viability_columns_sample = df[cell_viability_cols].sample(9, axis=1)\nviability_columns_sample.describe()","2ab73c6b":"fig, axs = plt.subplots(3, 3, figsize=(15, 6), constrained_layout=True)\nfor i, col in enumerate(viability_columns_sample):\n    sns.distplot(df[col], ax=axs[i \/\/ 3, i % 3], label='Train')\n    sns.distplot(df_test[col], ax=axs[i \/\/ 3, i % 3], label='Test')\n    axs[i \/\/ 3, i % 3].set_title(col)\nfor ax in axs.flat:\n    ax.set(xlabel='', ylabel='')\n    ax.set_xlim(-10.5, 6.5)\n    ax.label_outer()\n    ax.title.set_fontsize(12)\nplt.legend()\nplt.show()","9254270c":"sns.distplot(df[cell_viability_cols].mean(), kde=False, bins=15)\nplt.title('Cell viability features mean distribution')\nplt.show()","e2a64779":"gene_cols_with_high_mean = np.argsort(df[cell_viability_cols].mean())[-3:]\ngene_cols_with_low_mean = np.argsort(df[cell_viability_cols].mean())[:3]\n\nfig, axs = plt.subplots(2, 3, figsize=(15, 5), constrained_layout=True)\nfor i, col_number in enumerate(gene_cols_with_high_mean):\n    col_name = f'c-{col_number}'\n    sns.distplot(df[col_name], ax=axs[0, i], label='Train')\n    sns.distplot(df_test[col_name], ax=axs[0, i], label='Test')\n    axs[0, i].set_title(col_name)\nfor i, col_number in enumerate(gene_cols_with_low_mean):\n    col_name = f'c-{col_number}'\n    sns.distplot(df[col_name], ax=axs[1, i], label='Train')\n    sns.distplot(df_test[col_name], ax=axs[1, i], label='Test')\n    axs[1, i].set_title(col_name)\nfor ax in axs.flat:\n    ax.set(xlabel='', ylabel='')\n    ax.set_xlim(-10.5, 6.5)\n    ax.label_outer()\n    ax.title.set_fontsize(12)\nfig.suptitle('Cell viability features with the highest (first row) and the lowest (second row) mean')\nplt.legend()\nplt.show()","f95cf4a9":"sns.distplot(df[cell_viability_cols].std(), kde=False, bins=15)\nplt.title('Cell viability features std distribution')\nplt.show()","f8871540":"gene_cols_with_high_std = np.argsort(df[cell_viability_cols].std())[-3:]\ngene_cols_with_low_std = np.argsort(df[cell_viability_cols].std())[:3]\n\nfig, axs = plt.subplots(2, 3, figsize=(15, 5), constrained_layout=True)\nfor i, col_number in enumerate(gene_cols_with_high_std):\n    col_name = f'c-{col_number}'\n    sns.distplot(df[col_name], ax=axs[0, i], label='Train')\n    sns.distplot(df_test[col_name], ax=axs[0, i], label='Test')\n    axs[0, i].set_title(col_name)\nfor i, col_number in enumerate(gene_cols_with_low_std):\n    col_name = f'c-{col_number}'\n    sns.distplot(df[col_name], ax=axs[1, i], label='Train')\n    sns.distplot(df_test[col_name], ax=axs[1, i], label='Test')\n    axs[1, i].set_title(col_name)\nfor ax in axs.flat:\n    ax.set(xlabel='', ylabel='')\n    ax.set_xlim(-10.5, 6.5)\n    ax.label_outer()\n    ax.title.set_fontsize(12)\nfig.suptitle('Cell viability features with the highest (first row) and the lowest (second row) std')\nplt.legend()\nplt.show()","570f124a":"correlations = df[cell_viability_cols].corr()\nplt.figure(figsize=(8, 7))\nsns.heatmap(correlations)\nplt.title('Pairwise correlations of cell viability features')\nplt.show()","2e092e64":"sns.distplot(correlations.abs().values.flatten(), kde=False)\nplt.title('Cell viability features pairwise (absolute) correlation coefficients distribution')\nplt.show()","d40d4f09":"col = 'c-0'\nprint(df[df[col] < -9][cell_viability_cols[1:]].values.mean(), df[df[col] >= -9][cell_viability_cols[1:]].values.mean())\nsns.distplot(df[df[col] < -9][cell_viability_cols[1:]].values, label='c-1 - c-99 distribution when c-0 < -9')\nsns.distplot(df[df[col] >= -9][cell_viability_cols[1:]].values, label='c-1 - c-99 distribution when c-0 >= -9')\nplt.title('Cell viability distribution conditioned on c-0')\nplt.legend()\nplt.show()","13e4446c":"print(df.loc[(df[cell_viability_cols] < -9).any(axis=1), cell_viability_cols].values.mean(), \n      df.loc[(df[cell_viability_cols] >= -9).all(axis=1), cell_viability_cols].values.mean())\nsns.distplot(df.loc[(df[cell_viability_cols] < -9).any(axis=1), cell_viability_cols], label='any of cell viability features < -9')\nsns.distplot(df.loc[(df[cell_viability_cols] >= -9).all(axis=1), cell_viability_cols], label='all of cell viability features >= -9')\nplt.title('Conditioned cell viability features distribution')\nplt.legend()\nplt.show()","9b989686":"print('Percentage of rows containing a value < -9:', (df[cell_viability_cols] < -9).any(axis=1).sum() \/ len(df) * 100)","716dc63f":"correlations = df.loc[(df[cell_viability_cols] >= -9).all(axis=1), cell_viability_cols].corr()\nplt.figure(figsize=(8, 7))\nsns.heatmap(correlations)\nplt.title('Pairwise correlations of cell viability features, outliers excluded')\nplt.show()","9ce285b2":"targets = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')","d8930074":"targets.head()","9215aa9c":"targets.shape","6f7bd9e1":"target_cols = targets.columns[1:]","cf412b70":"(targets[target_cols].mean() * 100).plot.hist(bins=50)\nplt.title('% of true labels in target distribution')\nplt.xlabel('% of true labels')\nplt.show()","79cc06f3":"frequent_targets = (targets[target_cols].mean() * 100).sort_values()[-20:].index","f47bff73":"(targets[frequent_targets].mean() * 100).sort_values().plot.bar()\nplt.title('Most frequent targets')\nplt.ylabel('% of true labels')\nplt.show()","89582243":"vc = targets[target_cols].sum(axis=1).value_counts()\nplt.title('# of true labels per row distribution')\nplt.ylabel('# of rows')\nplt.xlabel('# of true targets per row')\nplt.bar(vc.index, vc.values)\nplt.show()","d1c7f9a8":"counts = np.zeros((len(frequent_targets), len(frequent_targets)))\nfor i, col1 in enumerate(frequent_targets):\n    for j, col2 in enumerate(frequent_targets):\n        if i != j:\n            counts[i, j] = len(targets[(targets[col1] == 1) & (targets[col2] == 1)]) \/ len(targets[targets[col1] == 1]) ","c8939e5f":"plt.figure(figsize=(12, 10))\nsns.heatmap(counts, annot=True, fmt=\".1f\", annot_kws={\"size\": 14})\nplt.xticks(np.arange(len(frequent_targets)), frequent_targets, rotation=90)\nplt.yticks(np.arange(len(frequent_targets)), frequent_targets, rotation=0)\nplt.show()","ca2d4ee5":"fig, axs = plt.subplots(2, 2, figsize=(14, 6), constrained_layout=True)\nfor i, col in enumerate(gene_columns_sample.columns[:4]):\n    sns.distplot(df[df.cp_time == 24][col], label='24 hours', kde=False, ax=axs[i \/\/ 2, i % 2])\n    sns.distplot(df[df.cp_time == 48][col], label='48 hours', kde=False, ax=axs[i \/\/ 2, i % 2])\n    sns.distplot(df[df.cp_time == 72][col], label='72 hours', kde=False, ax=axs[i \/\/ 2, i % 2])\n    axs[i \/\/ 2, i % 2].set_title(col)\nfor ax in axs.flat:\n    ax.set(xlabel='', ylabel='')\n    ax.set_xlim(-10.5, 10.5)\n    ax.label_outer()\n    ax.title.set_fontsize(12)\nfig.suptitle('Gene features distributions conditioned on cp_time')\nplt.legend()\nplt.show()","2127d50b":"fig, axs = plt.subplots(2, 2, figsize=(14, 6), constrained_layout=True)\nfor i, col in enumerate(gene_columns_sample.columns[:4]):\n    sns.distplot(df[df.cp_dose == 'D1'][col], label='Low dose', kde=False, ax=axs[i \/\/ 2, i % 2])\n    sns.distplot(df[df.cp_dose == 'D2'][col], label='High dose', kde=False, ax=axs[i \/\/ 2, i % 2])\n    axs[i \/\/ 2, i % 2].set_title(col)\nfor ax in axs.flat:\n    ax.set(xlabel='', ylabel='')\n    ax.set_xlim(-10.5, 10.5)\n    ax.label_outer()\n    ax.title.set_fontsize(12)\nfig.suptitle('Gene features distributions conditioned on cp_dose')\nplt.legend()\nplt.show()","2998db7c":"fig, axs = plt.subplots(2, 2, figsize=(14, 6), constrained_layout=True)\nfor i, col in enumerate(viability_columns_sample.columns[:4]):\n    sns.distplot(df[df.cp_time == 24][col], label='24 hours', kde=False, ax=axs[i \/\/ 2, i % 2])\n    sns.distplot(df[df.cp_time == 48][col], label='48 hours', kde=False, ax=axs[i \/\/ 2, i % 2])\n    sns.distplot(df[df.cp_time == 72][col], label='72 hours', kde=False, ax=axs[i \/\/ 2, i % 2])\n    axs[i \/\/ 2, i % 2].set_title(col)\nfor ax in axs.flat:\n    ax.set(xlabel='', ylabel='')\n    ax.set_xlim(-10.5, 10.5)\n    ax.label_outer()\n    ax.title.set_fontsize(12)\nfig.suptitle('Cell viability features distributions conditioned on cp_time')\nplt.legend()\nplt.show()","d97ea061":"fig, axs = plt.subplots(2, 2, figsize=(14, 6), constrained_layout=True)\nfor i, col in enumerate(viability_columns_sample.columns[:4]):\n    sns.distplot(df[df.cp_dose == 'D1'][col], label='Low dose', kde=False, ax=axs[i \/\/ 2, i % 2])\n    sns.distplot(df[df.cp_dose == 'D2'][col], label='High dose', kde=False, ax=axs[i \/\/ 2, i % 2])\n    axs[i \/\/ 2, i % 2].set_title(col)\nfor ax in axs.flat:\n    ax.set(xlabel='', ylabel='')\n    ax.set_xlim(-10.5, 10.5)\n    ax.label_outer()\n    ax.title.set_fontsize(12)\nfig.suptitle('Cell viability features distributions conditioned on cp_dose')\nplt.legend()\nplt.show()","53342ae4":"correlations = df[gene_cols + cell_viability_cols].corr()","4f91b41c":"plt.figure(figsize=(16, 7))\nsns.heatmap(correlations.loc[cell_viability_cols, gene_cols])\nplt.title('Pairwise correlations of gene and cell viabilty features')\nplt.show()","f710dc4d":"plt.figure(figsize=(8, 7))\nsns.heatmap(correlations.loc[cell_viability_cols[:50], gene_cols[:50]])\nplt.title('Closer look: pairwise correlations of gene and cell viabilty features')\nplt.show()","5df2c57b":"sns.distplot(correlations.loc[cell_viability_cols, gene_cols].abs().values.flatten(), kde=False, bins=200)\nplt.title('Gene - cell viability (absolute) correlation coefficients distribution')\nplt.show()","ebe747ba":"correlations = df.loc[(df[cell_viability_cols] >= -9).all(axis=1), gene_cols + cell_viability_cols].corr()","de0c98a6":"plt.figure(figsize=(16, 7))\nsns.heatmap(correlations.loc[cell_viability_cols, gene_cols])\nplt.title('Pairwise correlations of gene and cell viabilty features, outliers excluded')\nplt.show()","acbc6c97":"plt.figure(figsize=(8, 7))\nsns.heatmap(correlations.loc[cell_viability_cols[:50], gene_cols[:50]])\nplt.title('Closer look: pairwise correlations of gene and cell viabilty features, outliers excluded')\nplt.show()","865c703b":"sns.distplot(correlations.loc[cell_viability_cols, gene_cols].abs().values.flatten(), kde=False, bins=200)\nplt.title('Gene - cell viability (absolute) correlation coefficients distribution, outliers excluded')\nplt.show()","7a46c63a":"targets.loc[df.cp_type == 'ctl_vehicle', target_cols].sum().sum()","c1c38323":"EPS = 10 ** -5\nREL_ERROR_THRESHOLD = 0.3\ncolumns = ['cp_dose', 'cp_time']\n\nt = targets[target_cols].sum()\ntarget_cols_more_than_once = t[t > 1].index  # we don't want to look at targets with only one true label\n\nfor col in columns:\n    col_unique_values = df[col].unique()\n    target_averages = []\n    \n    # Step 1: compute mean targets scores\n    for val in col_unique_values:\n        target_averages.append(targets.loc[df[col] == val, target_cols_more_than_once].mean())\n     \n    # Step 2: compute relative differences\n    for i in range(len(col_unique_values)):\n        for j in range(i + 1, len(col_unique_values)):\n            rel_diff = abs(target_averages[i] - target_averages[j]) \/ (pd.concat([target_averages[i], target_averages[j]], axis=1).max(axis=1) + EPS)\n            if rel_diff.max() < REL_ERROR_THRESHOLD:\n                continue\n            print(col_unique_values[i], col_unique_values[j])  # Step 3: output feature values and targets with high relative difference\n            for target in rel_diff[rel_diff >= REL_ERROR_THRESHOLD].index:\n                print(target, target_averages[i][target], target_averages[i][target])","59764b52":"correlations = pd.concat([df[gene_cols + cell_viability_cols], targets[target_cols]], axis=1).corr()","66767315":"plt.figure(figsize=(16, 7))\nsns.heatmap(correlations.loc[target_cols, gene_cols])\nplt.title('Gene features correlations with targets')\nplt.show()","8e77d308":"plt.figure(figsize=(16, 7))\nsns.heatmap(correlations.loc[target_cols, cell_viability_cols])\nplt.title('Cell viability features correlations with targets')\nplt.show()","d0d27b17":"correlations.loc[target_cols, cell_viability_cols].mean(axis=1).sort_values()","a7ab135f":"correlations.loc[target_cols, gene_cols].std(axis=1).sort_values(ascending=False)","b74fcd40":"for target in ['proteasome_inhibitor', 'nfkb_inhibitor']:\n    print(f'Percentage of true labels for {target} target among outliers %.2f' % (targets.loc[(df[cell_viability_cols] < -9).any(axis=1), target].mean() * 100))\n    print(f'Percentage of true labels for {target} target among non-outliers %.2f' % (targets.loc[(df[cell_viability_cols] >= -9).all(axis=1), target].mean() * 100))\n    print('-' * 20)","197ac0b0":"Randomly sample 9 cell viability features and look at their distributions in train and test datasets.","68ceb14c":"**Thus we will exclude these rows from further analysis.**\n\nSo now we have 2 categorical features (`cp_dose` and `cp_time`) and we want to know if any of them strongly affects any of our targets.\n\nIn order to achieve this we can do the following:\n\n1. For every unique value of the feature and each target compute mean target's score over train samples with this value\n2. For each pair of unique feature values compare their mean scores for each target using relative difference:\n\n    $$\\text{Relative difference }(\\text{value i}, \\text{value j}, \\text{target k}) = \\frac{|\\bar{y_{i, k}} - \\bar{y_{j, k}}|}{max(\\bar{y_{i, k}}, \\bar{y_{j, k}})}$$\n3. Output features values and targets with relative difference\n\n\nSee the cell below for code.\n","1305fa75":"# Feature-target intercations","b3136a88":"## Correlations\nNow we will look at the pairwise correlation between gene features.","dd686ca7":"Validate that samples treated with a control perturbation do not have MoAs (i. e. rows with `cp_type == 'ctl_vehicle'` have all targtes equal to 0), as stated in competiton data description.","d255c90f":"> ## Insights \ud83d\udca1\n> Even with \"outliers\" excluded, cell viability features still look very inter-dependent.\n>\n> However, there are some features that do not correlate with others (dark vertical and horizontal lines).\n>\n> Also worth mentioning: we do not have any anti-correltaions here!","7420bb7e":"So now this looks much better. Although there are still some gene features with strong (anti-) correlation with all the cell viability features, on average they all look quite independent.","8f026ca6":"# Categorical columns distributions","0fa96b14":"> ## Insights \ud83d\udca1 \n> There are features that are highly correlated. So be careful when choosing the model and preprocessing the data as correlated features may lead to poor perfomace for some ML models.","6b515467":"Well, there is clearly some weird behavior here. \n\nNow let's have a look at feature distributions in rows where any of the features is close to the lower bound (-10).","d4b20df4":"> ## Insights \ud83d\udca1\n> This is an interesting behavior: seems like some rows have all the values around zero while some have a lot of very low values.","038c9b6c":"In general, individual numerical features do not correlate with targets. However, there are two distinct horizontal lines on both plots. Let's have a look at these targets.\n\nThese two targets have strong anti-correlation with all the cell viability features:","1fd73338":"**To be continued...**","2d2650cf":"Same for cell viability features:","1582299f":"For now we will confider them outliers, exclude from the dataset and look at the correlations heatmap once again:","e7ee0b4c":"Now we want to know how many true labels can each row have.","51cf3f8a":"> ## Insights \ud83d\udca1\n> It seems like most of the targets are mutually exclusive. However, there are a few that look very coupled. For example, `kit_inhibitor`, and `flt3_inhibitor`: if a sample has a true label for `kit_inhibitor`, there is an 80% chance that it will also have `flt3_inhibitor` among its targets and vice versa.","753779d5":"As an example of feature dependency let's pick one feature (`c-0`) and look at how other features are distributed when `c-0` value is close to the lower bound (-10).","2db83807":"# Gene features\n\nThere are 772 gene features (`g-0` - `g-771`), each is represented by a real number in range [-10, 10].","e9f4566f":"> ## Insights \ud83d\udca1\n> Different gene features are distibuted differently and have heavy distributions tails. Be careful if your model implies that input features are distributed similarly or that they come from standard distribution.\n>\n> Also, there is some bimodality in gene features distributions: some of them have a second small peak at the edge (-10 or 10). Maybe outliers? Will need to explore in more details.","a6ff69dd":"Here we observe the same patterns.","dec62bb6":"## Gene - cell viability correlations\nWe will look at how gene and cell viability features correlate with each other","60c2e6a6":"The dataset does not have any missing values, which is great","e78142aa":"> **If you look at these plots, the huge impact of heavy distributions tails becomes even more obvious. All the distributions have the main peak at zero.**","7b6f7b97":"As a reminder: `proteasome_inhibitor` and `nfkb_inhibitor` are also two most frequent features in train dataset.","d88468f3":"> ## Insights \ud83d\udca1\n> Cell viability features distributions with different `cp_time` and `cp_dose` match almost exactly. For gene features, these distributions are not identical, but still very close.","2a2487ff":"# Targets\n\nWe have 206 different binary targets in this competition.","513f39a4":"You can see some very bright and dark lines \/ rectangles on this plot. It means that there are some groups of features that strongly correlate with each other, as well as features that are highly anti-correlated with others.\n\nNow let's look at all features correlations heatmap, not just the first 50.","36edb610":"Now we'll see how means of the gene features are distributed.","f818418c":"We will take these top-20 frequent targets and see how they interact with each other - how often they go together.","7e258af0":"`train_features.csv` and `test_features.csv` have identical sets of columns:\n- `sig_id` - unique entry id\n- `cp_type` - type of perturbation, either `cp_vehicle` or `ctrl_vehicle`\n- `cp_time` - treatment duration, 24, 48 or 72 hours\n- `cp_dose` - treatment dose, either `D1` (low) or `D2` (high)\n- `g-0` - `g-771` - gene expression data, real numbers in range [-10, 10]\n- `c-0` - `c-99` - cell viability data","43bb4301":"> ## Insights \ud83d\udca1\n> A large portion of train samples does not have any MoA labels at all. Most of the other rows have exactly one label, but some can have up to 7.","bd141b49":"# Introduction\n\nThis is a simple EDA for the MoA Prediction competition data, which includes:\n- training data overview\n- numerical and categorical feature distributions\n- basic feature intercations\n- targets distribution\n- feature-feature interactions\n- feature-target interactions\n- exploring outliers","dbe6ffd7":"# Cell viability features\n\nThere are 100 cell viability features (`c-0` - `c-99`), each is represented by a real number in range from -10 to approximately 6.5.\n\n\nFor them we'll perform similar analysis as for gene features.","53ba319e":"> ## Insights \ud83d\udca1\n> We can see that categorical columns distirbutions in train and test datasets are quite similar. Also, the distributions of `cp_time` and `cp_dose` features are very even (balanced).","f11c0b31":"Visualize gene features with the highest mean (which are `g-100`, `g-707` and `g-744`), and the lowest mean (which are `g-37`, `g-370` and `g-508`).","9a90df5d":"These are `proteasome_inhibitor` and `nfkb_inhibitor` which on average have much lower mean correlation coefficients than all the other targets.\n\nSurprisingly, these are exactly the two features with the highest variance in their correlation coefficients with gene features!","59d5740d":"Remember \"our outliers\" from Cell viability features section? Let's see how these two targets are distributed for them:","ec52150a":"We'll randomly sample 9 gene features and look at their distributions in train and test datasets.","799e8092":"Rows with low values make up about 6% of the train dataset.","b3e562fd":"> ## Insights \ud83d\udca1\n> **Note the scale on the right side of the plot - the lowest value of pairwise correlation coefficient is around 0.6. It means that cell viability features are highly dependent. However, this may be caused by the peaks around -10. We'll study them in a bit more details later in this notebook.**","8eb24f04":"> Also, we can see that some features have a second small peak at either edge values (-10 or 10) or at -5 or 5. ","e9b080ec":"> ## Insights \ud83d\udca1\n>Gene features distributions are far from normal: most of them have non-zero mean, heavy tails and some even have a small second peak (e.g. `g-417`).\n\n>However, train and test distributions match almost exactly.","aa7b418b":"The cell did not output anything, so none of the values of these features have a particular affect on the target on its own (which does not mean that these features are not important for prediction!)\n\nNow let's see how numerical features correlate with targets.","fad9c566":"> ## Insights \ud83d\udca1\n> All the targets are very unbalanced. The most frequent target has only 3.5% of true labels! And most of the rest have less than 0.5%.","8f3c1914":"> ## Insights \ud83d\udca1\n> Cell viability features are distributed much more similarly (to each other) than gene features. Still, they are also assymetrical, have heavy distribution tails (usually on the left side) and sometimes a second peak at -10.","0ce2259e":"Note that gene features also have very different variances. Let's look at their stds distributions.","9eec4649":"# Train data overview\n\nTraining data is provided in csv format","d38903cf":"> ## Insights \ud83d\udca1\n> Gene features and cell viability features are very inter-dependent.\n>\n> The presence of these distinct light (or dark) vertical lines on the plot means that there are gene features that are higly correlated (or anti-correlated) with **ALL** the cell viability features.","d0f91a4d":"# Feature interactions\n\nNow we will expolore feature interaction a bit.\n\nLet's see how gene columns are distributed with different `cp_time` (treatment duration) and `cp_dose` (treatment dose).","d2fb780e":"# Drugs Mechanisms of Action Prediction Exploratory Data Analysis","f1248eca":"Let's have a look at top-20 most frequent targets.","b7e362dd":"Now we will try to exclude our \"outliers\" (samples which have any of the cell features values < -9, see Cell viability features section) and recompute the correlations matrix. "}}