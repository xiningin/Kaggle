{"cell_type":{"5fa3d885":"code","ad58bdba":"code","375deddd":"code","d9d1c9f8":"code","a80bc13a":"code","4f438b69":"code","e14885d5":"code","2d04447f":"code","bd70e490":"code","4ce11177":"code","aef72909":"code","306d4a90":"code","d6712cad":"code","255506ba":"code","967e69da":"code","24810601":"code","2c4bc85c":"code","38c15db9":"code","569302ad":"code","0d0e2892":"code","7e1d35f9":"code","d7aef29c":"code","625a9157":"code","893c1f64":"code","1cf5bf20":"code","f089fbb9":"code","662b3a99":"code","e9bf309a":"code","3fafe29e":"code","ad5d14c3":"code","11b18335":"code","3298d130":"code","8ffd5c06":"code","547a89e8":"code","bc35dcc0":"code","8b9008a1":"code","8b0c5d88":"code","8a11ff30":"code","0173ef58":"code","3a2425d8":"code","02c3b136":"code","17aff6be":"code","595f5da3":"code","6b507e34":"code","a6ce9746":"code","98378ce9":"code","e080d103":"code","d1b1b98e":"code","a97775aa":"code","113e81eb":"code","2b85ed65":"code","996bb4a0":"code","7be5afd7":"code","dd37d496":"code","a6f296cd":"code","85228358":"code","fe694ccc":"code","9bb83927":"code","c2d8e21a":"code","76e851c7":"markdown","61ca3e44":"markdown","7450c9d6":"markdown","b64b7061":"markdown","7db70e02":"markdown","06893b9f":"markdown","42317ed8":"markdown","fe74430e":"markdown","c5f6615f":"markdown","5bdd6170":"markdown","edde8a12":"markdown","3f121a5a":"markdown","b79ecc29":"markdown","eefabd16":"markdown","9614194e":"markdown","345cd0ac":"markdown","ea3e5de9":"markdown","96a91829":"markdown","c8a48e92":"markdown","35863711":"markdown","fe4cb88b":"markdown","764478c1":"markdown","04b75b49":"markdown","2ee8f377":"markdown","fb8b35ba":"markdown","96998f66":"markdown","1bebbdd7":"markdown","89d9b201":"markdown","ee089dab":"markdown","fcce5e18":"markdown"},"source":{"5fa3d885":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ad58bdba":"import numpy as np\nimport pandas as pd\nimport random\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.metrics import r2_score as r2\nfrom sklearn.model_selection import KFold, GridSearchCV\n\nfrom datetime import datetime\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","375deddd":"import warnings\nwarnings.filterwarnings('ignore')","d9d1c9f8":"matplotlib.rcParams.update({'font.size': 14})","a80bc13a":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","4f438b69":"def evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","e14885d5":"TRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'","2d04447f":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntrain_df = reduce_mem_usage(train_df)\ntrain_df.tail()","bd70e490":"train_df.dtypes","4ce11177":"test_df = pd.read_csv(TEST_DATASET_PATH)\ntest_df.tail()","aef72909":"train_df.shape","306d4a90":"test_df.shape","d6712cad":"#\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 'Id' \u0438 'DistrictId' \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435\ntrain_df['Id'] = train_df['Id'].astype(str)\ntrain_df['DistrictId'] = train_df['DistrictId'].astype(str) ","255506ba":"plt.figure(figsize = (16, 8))\n\ntrain_df['Price'].hist(bins=30)\nplt.ylabel('Count')\nplt.xlabel('Price')\n\nplt.title('Target distribution')\nplt.show()","967e69da":"target_mean = round(train_df['Price'].mean(), 2)\ntarget_median = train_df['Price'].median()\ntarget_mode = train_df['Price'].mode()[0]","24810601":"print(target_mean)","2c4bc85c":"print(target_mode)","38c15db9":"plt.figure(figsize = (16, 8))\n\nsns.distplot(train_df['Price'], bins=30)\n\ny = np.linspace(0, 0.000007, 10)\nplt.plot([target_mean] * 10, y, label='mean', linestyle=':', linewidth=4)\nplt.plot([target_median] * 10, y, label='median', linestyle='--', linewidth=4)\nplt.plot([target_mode] * 10, y, label='mode', linestyle='-.', linewidth=4)\n\nplt.title('Distribution of price')\nplt.legend()\nplt.show()","569302ad":"train_df.describe()","0d0e2892":"train_df_num_features = train_df.select_dtypes(include=['float32', 'int8', 'int16', 'int32'])\ntrain_df_num_features.drop('Price', axis=1, inplace=True)","7e1d35f9":"train_df_num_features","d7aef29c":"train_df_num_features.hist(figsize=(16,16), bins=20, grid=False);","625a9157":"train_df['Social_2'].median()","893c1f64":"train_df.loc[train_df['Square'] < 200, 'Square'].\\\n    hist(figsize=(4,4), bins=20, grid=False);","1cf5bf20":"train_df.loc[train_df['LifeSquare'] < 200, 'LifeSquare'].\\\n    hist(figsize=(4,4), bins=20, grid=False);","f089fbb9":"train_df.loc[train_df['KitchenSquare'] < 50, 'KitchenSquare'].\\\n    hist(figsize=(4,4), bins=20, grid=False);","662b3a99":"train_df.select_dtypes(include='object').columns.tolist()","e9bf309a":"#\u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a'DistrictId' \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c, \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e \u043f\u043e \u0447\u0430\u0441\u0442\u043e\u0442\u0435\ntrain_df['DistrictId'].value_counts()","3fafe29e":"train_df['Ecology_2'].value_counts()","ad5d14c3":"train_df['Ecology_3'].value_counts()","11b18335":"train_df['Shops_2'].value_counts()","3298d130":"grid = sns.jointplot(train_df['Rooms'], train_df['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)\n\nplt.show()","8ffd5c06":"grid = sns.jointplot(train_df['Square'], train_df['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)\n\nplt.show()","547a89e8":"grid = sns.jointplot(train_df['Ecology_1'], train_df['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)\n\nplt.show()","bc35dcc0":"grid = sns.jointplot(train_df['Social_1'], train_df['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)\n\nplt.show()","8b9008a1":"grid = sns.jointplot(train_df['Social_2'], train_df['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)\n\nplt.show()","8b0c5d88":"grid = sns.jointplot(train_df['Social_3'], train_df['Price'], kind='reg')\ngrid.fig.set_figwidth(8)\ngrid.fig.set_figheight(8)\n\nplt.show()","8a11ff30":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians = None\n        self.means = None\n        self.square_quantile = None\n        self.kitchen_square_quantile = None\n        self.healthcare_1_median = None\n        \n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d, \u0441\u0440\u0435\u0434\u043d\u0438\u0445, \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u0439\n        self.medians = X.median()\n        self.means = X.mean()\n        self.square_quantile = X['Square'].quantile(.975)\n        self.kitchen_square_quantile = X['KitchenSquare'].quantile(.975)\n        self.healthcare_1_median = X['Healthcare_1'].median()\n        \n    \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # Rooms. \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 'rooms' \u043d\u0430 1, \n        #\u0435\u0441\u043b\u0438 \u043e\u043d \u0431\u044b\u043b \u0440\u0430\u0432\u0435\u043d 0, \u0438 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 \u043e\u043d \u0431\u044b\u043b \u0440\u0430\u0432\u0435\u043d \u0438\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 6.\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 6), 'Rooms_outlier'] = 1\n        \n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        X.loc[X['Rooms'] >= 6, 'Rooms'] = self.medians['Rooms']\n        \n         # Square. \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u0438 \u043d\u0438\u0436\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 'Square': \n        #\u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0431\u043e\u043b\u044c\u0448\u0435 100 \u043c2(\u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c 75%) \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0438\u0445 \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438, \n        #\u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043c\u0435\u043d\u044c\u0448\u0435 20 \u043c2 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0440\u0430\u0432\u043d\u044b\u043c\u0438 20.\n        condition = (X['Square'].isna()) \\\n                    | (X['Square'] > self.square_quantile)\n        \n        X.loc[condition, 'Square'] = self.medians['Square']\n\n        X.loc[X['Square'] < 20, 'Square'] = 20\n        \n        # KitchenSquare. \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u0435\u0440\u0445\u043d\u044e\u044e \u0438 \u043d\u0438\u0436\u043d\u044e\u044e \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 'KitchenSquare': \n        #\u043a\u0443\u0445\u043d\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 13 \u043c2(\u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c 75%) \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0438\u0445 \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438, \n        #\u043a\u0443\u0445\u043d\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 3 \u043c2 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0440\u0430\u0432\u043d\u044b\u043c\u0438 3.\n        condition = (X['KitchenSquare'].isna()) \\\n                    | (X['KitchenSquare'] > self.kitchen_square_quantile)\n        \n        X.loc[condition, 'KitchenSquare'] = self.medians['KitchenSquare']\n\n        X.loc[X['KitchenSquare'] < 3, 'KitchenSquare'] = 3\n        \n        # HouseFloor, Floor. \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0432\u043d\u043e\u0439 0, \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 95 \u044d\u0442\u0430\u0436\u0435\u0439 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.\n        #\u041f\u0440\u0438 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u0438\u0438 \u043e\u0448\u0438\u0431\u043a\u0438, \u0433\u0434\u0435 \u044d\u0442\u0430\u0436 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u0449\u0443\u044e \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u043c\u0430, \u0434\u0435\u043b\u0430\u0435\u043c \u044d\u0442\u0430\u0436 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \n        #\u0440\u0430\u0432\u043d\u044b\u043c \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043c\u0430\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['HouseFloor'] > 95, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        X.loc[X['HouseFloor'] > 95, 'HouseFloor'] = self.medians['HouseFloor']\n        \n        floor_outliers = X.loc[X['Floor'] > X['HouseFloor']].index\n        X.loc[floor_outliers, 'Floor'] = X.loc[floor_outliers, 'HouseFloor']\n        \n        # HouseYear\n        current_year = datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n        # Social_1. \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435, \u0435\u0441\u043b\u0438 \u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u0435\u043d 50.\n        X.loc[X['Social_1'] >= 50, 'Social_1'] = self.means['Social_1']\n        \n        # Social_2. \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435, \u0435\u0441\u043b\u0438 \u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u0435\u043d 12000.\n        X.loc[X['Social_2'] >= 12000, 'Social_2'] = self.means['Social_2']\n        \n        # Social_3. \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u043d\u0430 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435, \u0435\u0441\u043b\u0438 \u043e\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u0440\u0430\u0432\u0435\u043d 20.\n        X.loc[X['Social_3'] >= 20, 'Social_3'] = self.means['Social_3']\n        \n        \n        # Healthcare_1. \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u044b \u043f\u043e\u0434\u043e\u0439\u0434\u0435\u0442 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432.\n        X['Healthcare_1'] = X['Healthcare_1'].fillna(self.healthcare_1_median)\n        \n            \n        # LifeSquare. \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0443 \n        #\u0436\u0438\u043b\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b = \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 - 5 \u043c2(\u0441\u0430\u043d\u0443\u0437\u0435\u043b \u0438 \u043a\u043b\u0430\u0434\u043e\u0432\u0430\u044f)\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        condition = (X['LifeSquare'].isna()) & \\\n                      (~X['Square'].isna()) & \\\n                      (~X['KitchenSquare'].isna())\n        \n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 5\n        \n        \n        X.loc[X['LifeSquare'] <= 20, 'LifeSquare'] = self.medians['LifeSquare']\n        X.loc[X['LifeSquare'] >= 90, 'LifeSquare'] = self.medians['LifeSquare']\n        \n        \n        X.fillna(self.medians, inplace=True)\n        \n        return X","0173ef58":"preprocessing = DataPreprocessing()\npreprocessing.fit(train_df)\ntrain_df = preprocessing.transform(train_df)","3a2425d8":"train_df.isna().sum()","02c3b136":"class FeatureGenetator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        self.house_year_max = None\n        self.floor_max = None\n        self.house_year_min = None\n        self.floor_min = None\n        self.district_size = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # Binary features.\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # DistrictID\n        self.district_size = X['DistrictId'].value_counts().reset_index() \\\n                               .rename(columns={'index':'DistrictId', 'DistrictId':'DistrictSize'})\n                \n        # Target encoding\n        ## District, Rooms\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            self.med_price_by_district = df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'MedPriceByDistrict'})\n            \n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n        ## floor, year\n        if y is not None:\n            self.floor_max = df['Floor'].max()\n            self.floor_min = df['Floor'].min()\n            self.house_year_max = df['HouseYear'].max()\n            self.house_year_min = df['HouseYear'].min()\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n        \n\n        \n    def transform(self, X):\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # DistrictId, IsDistrictLarge\n        X = X.merge(self.district_size, on='DistrictId', how='left')\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictSize'].isna(), 'new_district'] = 1\n        \n        X['DistrictSize'].fillna(5, inplace=True)\n        \n        X['IsDistrictLarge'] = (X['DistrictSize'] > 100).astype(int)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X['MedPriceByDistrict'].fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X['MedPriceByFloorYear'].fillna(self.med_price_by_floor_year_median, inplace=True)\n        \n        return X\n    \n    def floor_to_cat(self, X):\n        bins = [self.floor_min, 3, 5, 9, 15, self.floor_max]\n        X['floor_cat'] = pd.cut(X['Floor'], bins=bins, labels=False)\n        \n\n        X['floor_cat'].fillna(-1, inplace=True)\n        return X\n     \n    def year_to_cat(self, X):\n        bins = [self.house_year_min, 1941, 1945, 1980, 2000, 2010, self.house_year_max]\n        X['year_cat'] = pd.cut(X['HouseYear'], bins=bins, labels=False)\n        \n            \n        X['year_cat'].fillna(-1, inplace=True)\n        return X","17aff6be":"train_df.columns.tolist()","595f5da3":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3',\n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['HouseFloor_outlier', 'LifeSquare_nan', 'DistrictSize', 'IsDistrictLarge', 'MedPriceByFloorYear']\n\ntarget_name = 'Price'","6b507e34":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]","a6ce9746":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True, random_state=21)","98378ce9":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","e080d103":"features_gen = FeatureGenetator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","d1b1b98e":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","a97775aa":"X_train.shape, X_valid.shape, test_df.shape","113e81eb":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","2b85ed65":"gb_model = GradientBoostingRegressor(criterion='mse',\n                                     max_depth=5,\n                                     min_samples_leaf=10,\n                                     random_state=42,  \n                                     n_estimators=200)\ngb_model.fit(X_train, y_train)","996bb4a0":"y_train_preds = gb_model.predict(X_train)\ny_test_preds = gb_model.predict(X_valid)\nevaluate_preds(y_train, y_train_preds, y_valid, y_test_preds)","7be5afd7":"feature_importances = pd.DataFrame(zip(X_train.columns, gb_model.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","dd37d496":"test_df.shape","a6f296cd":"test_df","85228358":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","fe694ccc":"predictions = gb_model.predict(test_df)\npredictions","9bb83927":"submit['Price'] = predictions\nsubmit.head()","c2d8e21a":"submit.to_csv('gb_submit.csv', index=False)","76e851c7":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\n* Id - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* DistrictId - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* Rooms - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* Square - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* LifeSquare - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* KitchenSquare - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* Floor - \u044d\u0442\u0430\u0436\n* HouseFloor - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* HouseYear - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* Ecology_1, Ecology_2, Ecology_3 - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Social_1, Social_2, Social_3 - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* Healthcare_1, Helthcare_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* Shops_1, Shops_2 - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* Price - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","61ca3e44":"\u0412\u0438\u0434\u0438\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b.","7450c9d6":"# **7. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438.**","b64b7061":"# **6. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test**","7db70e02":"# **1. EDA**","06893b9f":"**\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435**","42317ed8":"# **8. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435**","fe74430e":"**\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f.** \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435.","c5f6615f":"\u0412\u0438\u0434\u0438\u043c \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u043d\u0430\u0442 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0438 \u0446\u0435\u043d\u044b.","5bdd6170":"# 3. **\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**","edde8a12":"\u0412\u0438\u0434\u0438\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b.","3f121a5a":"\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435, \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u0438 \u043c\u043e\u0434\u0443 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.","b79ecc29":"\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432","eefabd16":"# 5. **\u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","9614194e":"# 2. **\u0410\u043d\u0430\u043b\u0438\u0437 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0442\u0430\u0440\u0433\u0435\u0442\u0430 \u043e\u0442 \u0444\u0438\u0447\u0435\u0439**","345cd0ac":"\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u0442.","ea3e5de9":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'Square' \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0434\u043e 200 \u043c2.","96a91829":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","c8a48e92":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0443 \u0434\u0432\u0443\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 ('LifeSquare', 'Healthcare_1') \u043d\u0435 \u0440\u0430\u0432\u043d\u043e 10000, \u0437\u0430\u044f\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u0432 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u044d\u0442\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c. \u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0432\u0438\u0434\u0438\u043c \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0438 \u0432 \u0446\u0438\u0444\u0440\u0430\u0445.","35863711":"# 4. **\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","fe4cb88b":"\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.","764478c1":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'LifeSquare' \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0434\u043e 200 \u043c2.","04b75b49":"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043d\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c.","2ee8f377":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a 'KitchenSquare' \u0432 \u0440\u0430\u0437\u0440\u0435\u0437\u0435 \u0434\u043e 50 \u043c2.\n","fb8b35ba":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u043e\u0435: \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0435\u0434\u043e\u0440\u043e\u0433\u0438\u0445 \u043a\u0432\u0430\u0440\u0442\u0438\u0440, \u043c\u043d\u043e\u0433\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u043f\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0446\u0435\u043d\u0435, \u0438 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0440\u043e\u0433\u0438\u0445 \u043a\u0432\u0430\u0440\u0442\u0438\u0440. \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c.","96998f66":"\u0414\u0435\u043b\u0430\u0435\u043c \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043d\u044b\u0445: \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e, \u043c\u0435\u0434\u0438\u0430\u043d\u044b \u0438 \u043c\u043e\u0434\u044b.","1bebbdd7":"\u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u044b \u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u044b \u0434\u0440\u0443\u0433 \u043a \u0434\u0440\u0443\u0433\u0443, \u0432 \u0441\u0432\u044f\u0437\u0438 \u0441 \u0447\u0435\u043c \u0435\u0449\u0435 \u0440\u0430\u0437 \u0443\u0431\u0435\u0436\u0434\u0430\u0435\u043c\u0441\u044f, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u043d\u044b.","89d9b201":"**\u041d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435.** \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0438 \u0447\u0430\u0441\u0442\u043e\u0442\u0443 \u0438\u0445 \u0432\u0441\u0442\u0440\u0435\u0447 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435.","ee089dab":"\u0412\u0438\u0434\u0438\u043c \u043b\u0438\u043d\u0435\u0439\u043d\u0443\u044e \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0438 \u0446\u0435\u043d\u044b.","fcce5e18":"**\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435.** \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438."}}