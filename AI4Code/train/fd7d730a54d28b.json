{"cell_type":{"3483e077":"code","e550b1ff":"code","786a6de0":"code","4743e2bd":"code","92dc9b74":"code","fcaafb9b":"code","41a62823":"code","03af769c":"code","ff53265f":"code","df3604bd":"code","7962ee27":"markdown","66c08f30":"markdown","ad86b89d":"markdown"},"source":{"3483e077":"train_mode = False # is it training mode or submission mode\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import load_model\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import load_model\n\nif train_mode:\n    import keras\n    import tensorflow as tf\n    from keras import models\n    from keras import layers\n    from tensorflow.keras.layers import Dropout\n    from tensorflow.keras.optimizers import Adam\n    from tensorflow.keras.callbacks import EarlyStopping\n    from tensorflow.keras.applications.inception_v3 import InceptionV3","e550b1ff":"main_folder = '\/kaggle\/input\/petfinder-pawpularity-score\/'\n\ntest_image_folder  = main_folder + 'test'\ntest_meta = pd.read_csv(main_folder + 'test.csv')\ntest_meta['img_fnm'] = test_meta.Id.apply(lambda s: test_image_folder + '\/' + s + '.jpg')\n\nif train_mode:\n    train_image_folder = main_folder + 'train'\n    train_meta = pd.read_csv(main_folder + 'train.csv')\n    train_meta['img_fnm'] = train_meta.Id.apply(lambda s: train_image_folder + '\/' + s + '.jpg')","786a6de0":"#split the data to find the best setting, for final model I will use the whole train dataset\n# train_meta, valid_meta = train_test_split(train_meta, test_size = 0.2, random_state=12345)","4743e2bd":"target_size = 299\nif train_mode:\n    inceptionv3_pretrained = InceptionV3(input_shape = (target_size, target_size, 3) , \n                                         include_top = False, \n                                         weights = 'imagenet')\n\n    model = models.Sequential()\n    model.add(inceptionv3_pretrained)\n    model.add(layers.Flatten())\n    model.add(Dropout(0.25))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(layers.Dense(1))\n\n    model.compile(loss='mse', optimizer=Adam(learning_rate=2e-5), metrics=['mse'])\n    model.summary()","92dc9b74":"# Generator for 2 input\nif train_mode:\n    def gen_flow_for_two_inputs(datagen, batch, x_train, shuffle=True):\n        \"\"\"\n        Args:\n            datagen(image.ImageDataGenerator): data generator\n            batch(int): batch size \n            x_train: dataframe for input img and metadata\n            y_train(np.ndarray): label array for output \n            shuffle(bool): bool to shuffle data\n        \"\"\"\n        # Pass index to the 2nd parameter instead of labels\n        x_train_2 = x_train.set_index('Id')\n        batch = datagen.flow_from_dataframe(x_train, batch_size=batch, shuffle=shuffle, \n                                            x_col='img_fnm', y_col='Id', class_mode = 'raw',\n                                            target_size=(target_size, target_size))\n        while True:\n            batch_image, batch_index = batch.next()\n            yield batch_image, x_train_2.loc[batch_index, 'Pawpularity'].values\n\n    # Add our data-augmentation parameters to ImageDataGenerator\n    train_datagen = ImageDataGenerator(rescale = 1.\/255.,\n                                       rotation_range = 30,\n                                       width_shift_range = 0.2,\n                                       height_shift_range = 0.2,\n                                       shear_range = 0.1,\n                                       zoom_range = 0.3,\n                                       horizontal_flip = True)\n\n    # val_datagen = ImageDataGenerator(rescale = 1.\/255.)\n\n    EPOCH = 2\n    BATCH = 32\n\n    early_stopping =  EarlyStopping(\n                                monitor='val_loss',\n                                min_delta=1.0,\n                                patience=50,\n    )\n\n    log = model.fit(\n        x = gen_flow_for_two_inputs(train_datagen, BATCH, train_meta),\n        steps_per_epoch = np.ceil(train_meta.shape[0] \/ BATCH),\n    #     validation_data = gen_flow_for_two_inputs(val_datagen, BATCH, valid_meta),\n    #     validation_steps = np.ceil(valid_meta.shape[0] \/ BATCH),\n        epochs = EPOCH,\n        callbacks=[early_stopping]\n        )","fcaafb9b":"if train_mode:\n    model.optimizer.learning_rate = 0.5e-6\n    log = model.fit(\n        x = gen_flow_for_two_inputs(train_datagen, BATCH, train_meta),\n        steps_per_epoch = np.ceil(train_meta.shape[0] \/ BATCH),\n    #     validation_data = gen_flow_for_two_inputs(val_datagen, BATCH, valid_meta),\n    #     validation_steps = np.ceil(valid_meta.shape[0] \/ BATCH),\n        epochs = 2,\n        callbacks=[early_stopping]\n        )","41a62823":"if train_mode:\n    model.save('InceptionV3_2_64FC_191121.h5')","03af769c":"if not train_mode:\n    model = load_model('..\/input\/petfinder-inceptionv3-finetuned\/InceptionV3_2_64FC_191121.h5')","ff53265f":"if not train_mode:\n    #prediction\n    test_datagen = ImageDataGenerator(rescale=1\/255)\n\n    BATCH = 32\n\n    # Generator for 2 input\n    def gen_flow_for_two_inputs_test(datagen, batch, x_train, shuffle=True):\n        \"\"\"\n        Args:\n            datagen(image.ImageDataGenerator): data generator\n            batch(int): batch size \n            x_train: dataframe for input img and metadata\n            y_train(np.ndarray): label array for output \n            shuffle(bool): bool to shuffle data\n        \"\"\"\n        # Pass index to the 2nd parameter instead of labels\n        x_train_2 = x_train.set_index('Id')\n        batch = datagen.flow_from_dataframe(x_train, batch_size=batch, shuffle=shuffle, \n                                            x_col='img_fnm', y_col='Id', class_mode = 'raw',\n                                            target_size=(target_size, target_size))\n        while True:\n            batch_image, batch_index = batch.next()\n            # Use index values for text(x_text) and labels(y_train)\n            yield batch_image, np.zeros(1)\n\n    pred = model.predict_generator(\n        generator = gen_flow_for_two_inputs_test(test_datagen, BATCH, test_meta, shuffle=False), verbose= 1,\n        steps = np.ceil(test_meta.shape[0] \/ BATCH)\n        )","df3604bd":"if not train_mode:\n    #save the submission file\n    test_meta['Pawpularity'] = pred \n    submission_df = test_meta[['Id','Pawpularity']]\n    submission_df.to_csv(\"submission.csv\", index=False)\n    submission_df","7962ee27":"# Prediction","66c08f30":"For this competition I just want to use images to make the prediction and ignore the tabular data for the first attempt.","ad86b89d":"I mostly used these two sources and my computer vision \/ deep learning knowledge. \n\nhttps:\/\/www.kaggle.com\/genichiroshimizu\/keras-multi-imput-image-resnet50-meta-nn\n\nhttps:\/\/github.com\/keras-team\/keras\/issues\/8792\n"}}