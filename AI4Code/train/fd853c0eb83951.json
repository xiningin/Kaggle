{"cell_type":{"39e30903":"code","060ce461":"code","5cd68c4f":"code","b3c81fe1":"code","e7e3079b":"code","6a134fb0":"code","4e2d9aeb":"code","0806f0b5":"code","e5cfb219":"code","983c1763":"code","f62586f8":"code","cdf38375":"code","d372aa19":"code","25815581":"code","afd73fef":"code","3489728d":"code","fa734fc1":"code","d8cf1d70":"code","8b5e0f5d":"code","d5adbc96":"code","2de4aada":"code","8e634c1a":"code","3965a232":"code","df4b9008":"code","61379565":"code","0a800efc":"code","57a64905":"code","7d93eb94":"code","ea99b546":"code","c118ddbd":"code","df0ac3f1":"code","40919dfc":"code","b45b1eab":"code","63792d8d":"code","9b09d45b":"code","71fe3831":"code","1e8822db":"code","8cc321bd":"code","1dc51aa7":"code","dfc713d6":"code","1e41bd32":"code","e6ca9995":"code","dd66965c":"code","b3037dd1":"code","a4c38aa7":"code","06f35a22":"code","ddd4da99":"markdown","a247ee41":"markdown","426142b0":"markdown","967be785":"markdown","66dfea3f":"markdown","dc280408":"markdown","bac192e7":"markdown","f586d5c6":"markdown","121fddc9":"markdown","b436d33e":"markdown","071c0be7":"markdown","1d6a7bfb":"markdown","6e685da8":"markdown","d0d0d301":"markdown","73191711":"markdown","deddb0eb":"markdown","4e1e7e5a":"markdown","0d63878c":"markdown"},"source":{"39e30903":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","060ce461":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","5cd68c4f":"\ndescription = open(\"..\/input\/house-prices-advanced-regression-techniques\/data_description.txt\",'r')\nprint(description.read())","b3c81fe1":"train_df = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","e7e3079b":"train_df.head(5)","6a134fb0":"test_df.head(5)","4e2d9aeb":"train_df.info()","0806f0b5":"test_df.info()","e5cfb219":"train_df.describe()","983c1763":"matrix_corr = train_df.corr()['SalePrice']","f62586f8":"matrix_corr.sort_values(ascending=False)","cdf38375":"train_df.hist(bins=50,figsize=(25,20))\nplt.show()","d372aa19":"train_df.plot(kind='scatter',x='OverallQual',y='SalePrice')","25815581":"train_df.plot(kind='scatter',x='GrLivArea',y='SalePrice')","afd73fef":"train_df.plot(kind='scatter',x='GarageCars',y='SalePrice')","3489728d":"train_df.dtypes.value_counts()","fa734fc1":"test_df.dtypes.value_counts()","d8cf1d70":"object_df = train_df.select_dtypes(include=[np.object])","8b5e0f5d":"object_df","d5adbc96":"train_df.replace('Ex',5,inplace=True)\ntrain_df.replace('Gd',4,inplace=True)\ntrain_df.replace('TA',3,inplace=True)\ntrain_df.replace('Fa',2,inplace=True)\ntrain_df.replace('Po',1,inplace=True)\ntrain_df.replace('None',0,inplace=True)\ntrain_df.replace('GLQ',6,inplace=True)\ntrain_df.replace('ALQ',5,inplace=True)\ntrain_df.replace('BLQ',4,inplace=True)\ntrain_df.replace('Rec',3,inplace=True)\ntrain_df.replace('LNQ',2,inplace=True)\ntrain_df.replace('UNF',1,inplace=True)\ntrain_df.replace('Y',1,inplace=True)\ntrain_df.replace('P',1,inplace=True)\ntrain_df.replace('N',0,inplace=True)\n#TESTING \ntest_df.replace('Ex',10,inplace=True)\ntest_df.replace('Gd',9,inplace=True)\ntest_df.replace('TA',8,inplace=True)\ntest_df.replace('Fa',7,inplace=True)\ntest_df.replace('Po',6,inplace=True)\ntest_df.replace('None',0,inplace=True)\ntest_df.replace('GLQ',6,inplace=True)\ntest_df.replace('ALQ',5,inplace=True)\ntest_df.replace('BLQ',4,inplace=True)\ntest_df.replace('Rec',3,inplace=True)\ntest_df.replace('LNQ',2,inplace=True)\ntest_df.replace('UNF',1,inplace=True)\ntest_df.replace('Y',1,inplace=True)\ntest_df.replace('P',1,inplace=True)\ntest_df.replace('N',0,inplace=True)","2de4aada":"train_df.dtypes.value_counts()","8e634c1a":"test_df.dtypes.value_counts()","3965a232":"train_df.isnull().sum().sort_values(ascending=False).iloc[:15]","df4b9008":"test_df.isnull().sum().sort_values(ascending=False).iloc[:12]","61379565":"print('For training dataset')\nprint('Null Val. Percentage in PoolQC:',(1453\/len(train_df['PoolQC']))*100)\nprint('Null Val. Percentage in MiscFeature:',(1406\/len(train_df['MiscFeature']))*100)\nprint('Null Val. Percentage in Alley:',(1369\/len(train_df['Alley']))*100)\nprint('Null Val. Percentage in Fence:',(1179\/len(train_df['Fence']))*100)\nprint('Null Val. Percentage in FireplaceQu:',(690\/len(train_df['FireplaceQu']))*100)\nprint('Null Val. Percentage in LotFrontage:',(259\/len(train_df['LotFrontage']))*100)\nprint('\\n')\nprint('For testing dataset')\nprint('Null Val. Percentage in PoolQC:',(1456\/len(test_df['PoolQC']))*100)\nprint('Null Val. Percentage in MiscFeature:',(1408\/len(test_df['MiscFeature']))*100)\nprint('Null Val. Percentage in Alley:',(1352\/len(test_df['Alley']))*100)\nprint('Null Val. Percentage in Fence:',(1169\/len(test_df['Fence']))*100)\nprint('Null Val. Percentage in FireplaceQu:',(730\/len(test_df['FireplaceQu']))*100)\nprint('Null Val. Percentage in LotFrontage:',(227\/len(test_df['LotFrontage']))*100)\n\n\n\n\n","0a800efc":"train_df.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],axis=1,inplace=True)\ntest_df.drop(['PoolQC','MiscFeature','Alley','Fence','FireplaceQu'],axis=1,inplace=True)","57a64905":"train_numerical = train_df.select_dtypes(exclude=[np.object])\ntest_numerical = test_df.select_dtypes(exclude=[np.object])\ntrain_object = train_df.select_dtypes(include=[np.object])\ntest_object = test_df.select_dtypes(include=[np.object])","7d93eb94":"train_numerical.isnull().sum().sort_values(ascending = False).iloc[:6]","ea99b546":"test_numerical.isnull().sum().sort_values(ascending = False).iloc[:10]","c118ddbd":"train_numerical['LotFrontage'].fillna(train_numerical['LotFrontage'].median(),inplace=True)\ntrain_numerical['GarageQual'].fillna(train_numerical['GarageQual'].median(),inplace=True)\ntrain_numerical['GarageYrBlt'].fillna(train_numerical['GarageYrBlt'].median(),inplace=True)\ntrain_numerical['BsmtQual'].fillna(train_numerical['BsmtQual'].median(),inplace=True)\ntrain_numerical['BsmtCond'].fillna(train_numerical['BsmtCond'].median(),inplace=True)\ntrain_numerical['MasVnrArea'].fillna(train_numerical['MasVnrArea'].median(),inplace=True)\n\ntest_numerical['LotFrontage'].fillna(test_numerical['LotFrontage'].median(),inplace=True)\ntest_numerical['GarageYrBlt'].fillna(test_numerical['GarageYrBlt'].median(),inplace=True)\ntest_numerical['GarageCond'].fillna(test_numerical['GarageCond'].median(),inplace=True)\ntest_numerical['GarageArea'].fillna(test_numerical['GarageArea'].median(),inplace=True)\ntest_numerical['MasVnrArea'].fillna(test_numerical['MasVnrArea'].median(),inplace=True)\ntest_numerical['BsmtCond'].fillna(test_numerical['BsmtCond'].median(),inplace=True)\ntest_numerical['BsmtQual'].fillna(test_numerical['BsmtQual'].median(),inplace=True)","df0ac3f1":"train_numerical.fillna(0,inplace=True)\ntest_numerical.fillna(0,inplace=True)","40919dfc":"sns.heatmap(train_numerical.isnull())","b45b1eab":"sns.heatmap(test_numerical.isnull())","63792d8d":"train_object = pd.get_dummies(train_object)","9b09d45b":"test_object = pd.get_dummies(test_object)","71fe3831":"train_df_updated = pd.concat([train_numerical,train_object],axis=1)\ntest_df_updated = pd.concat([test_numerical,test_object],axis=1)","1e8822db":"X = train_df_updated.drop(['SalePrice','Id'],axis=1)\ny = train_df['SalePrice']","8cc321bd":"from sklearn.model_selection import train_test_split","1dc51aa7":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)","dfc713d6":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom lightgbm import LGBMRegressor","1e41bd32":"lr = LinearRegression()\ndcr = DecisionTreeRegressor()\nrfr = RandomForestRegressor()\nsvr = SVR()\n","e6ca9995":"lr.fit(X_train,y_train)\ndcr.fit(X_train,y_train)\nrfr.fit(X_train,y_train)\nsvr.fit(X_train,y_train)","dd66965c":"prediction = lr.predict(X_test)\npredict1 = dcr.predict(X_test)\npredict2 = rfr.predict(X_test)\npredict3 = svr.predict(X_test)","b3037dd1":"from sklearn.metrics import mean_squared_error,r2_score","a4c38aa7":"import math","06f35a22":"print('RMSE for Random Forest:',math.sqrt(mean_squared_error(y_test,predict2)))\nprint('r2 score for Random Forest:',r2_score(y_test,predict2))\nprint('\\n')\nprint('RMSE for Support Vector Regressor:',math.sqrt(mean_squared_error(y_test,predict3)))\nprint('r2 score for Support Vector Regressor:',r2_score(y_test,predict3))\nprint('\\n')\nprint('RMSE for Decision Tree:',math.sqrt(mean_squared_error(y_test,predict1)))\nprint('r2 score for Decision Tree:',r2_score(y_test,predict3))\nprint('\\n')\nprint('RMSE for Linear Regression:',math.sqrt(mean_squared_error(y_test,prediction)))\n\n\n","ddd4da99":"Data Exploring","a247ee41":"One hot encoding","426142b0":"Lets check how much error the model is giving.","967be785":"**NO NULL VALUES!**","66dfea3f":"Lets fill the null values with the mode of the respective columns.","dc280408":"So we have added some more high correlated columns to the dataset! Lets continue.","bac192e7":"Lets convert them into numerical form.","f586d5c6":"Lets see the percentage of the null values in the top columns on the top of the above list","121fddc9":"**The best results are from Random Forest Model!Now we apply this model on the prepared test data**","b436d33e":"We have reduced object dtype columns!","071c0be7":"Train Test Splt","1d6a7bfb":"**Data Visualisation and PreProcessing**","6e685da8":"Lets drop the columns with high perentage of null values","d0d0d301":"Anathor such important features are kitchen quality , garage quality and condition etc which include object data type. Lets convert them into numerical values.","73191711":"Lets take significant features as X and target variable as y.","deddb0eb":"We have created the histogram for each numerical column.","4e1e7e5a":"**Upvotes please!**","0d63878c":"Features like Overall Quality and Living Area Square foot are high linearly correlated to housing price."}}