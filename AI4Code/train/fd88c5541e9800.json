{"cell_type":{"cc9cd6f6":"code","0d693f07":"code","3de37f3d":"code","637820f1":"code","c448d07a":"code","ecab2fd1":"code","7e65afa2":"code","d3e55bb9":"code","f9fda9a1":"code","835d4970":"code","41996f52":"code","393b7000":"code","cc7fb0dd":"code","084507d7":"code","6e1e6254":"code","8d7fc584":"code","3ae7225a":"code","1a70de46":"code","ddb6114b":"code","cd280b79":"code","519f7246":"code","156917e2":"code","ba601771":"code","2c627bad":"code","454a5f51":"code","f2abd4e7":"code","0d1dbaf3":"code","d453aab5":"code","0ce78685":"code","8f474b26":"code","8c3cbcb5":"code","1b41142b":"code","a9fa25c9":"code","208605e4":"code","2d0eb7e8":"code","5e9efe0d":"code","dab5ba1a":"code","bc415f9b":"code","57a1a959":"code","e7921f4d":"code","cb897908":"code","203f9131":"code","3d09ae53":"code","b156d411":"code","17782f21":"code","247374cb":"code","ba48aabe":"code","f79725ff":"code","75f31d6d":"code","00b1dd6f":"code","1da870eb":"code","aa599350":"code","ec7b0e74":"code","06cc9a25":"code","a2f8ed96":"code","efab98c6":"code","653ba0ad":"code","45635c4f":"code","d1aa7b55":"code","55d08c3a":"code","87061c6d":"code","30272509":"code","3db3c1a5":"code","d5304bcc":"code","c64ff8f4":"code","bd67bb2a":"code","45ec12a8":"code","f7c6cc01":"code","c345b525":"code","fc68ba6a":"code","ddc74836":"code","d81c2fbb":"markdown","fb632257":"markdown","eb949b0c":"markdown","e7dbdae9":"markdown","2e08d288":"markdown","c72b787c":"markdown","5eaa600b":"markdown","78723516":"markdown","4bfcf071":"markdown","4d2f8d0f":"markdown","5ae9b0be":"markdown"},"source":{"cc9cd6f6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d693f07":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import PolynomialFeatures\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.metrics import accuracy_score, r2_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\n\nsns.set_style(style='darkgrid')","3de37f3d":"dataset = pd.read_csv('..\/input\/salary\/Salary.csv')\ndataset","637820f1":"dataset.shape","c448d07a":"x=dataset.iloc[:,:-1].values\ny=dataset.iloc[:,-1].values","ecab2fd1":"print(x)","7e65afa2":"print(y)","d3e55bb9":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=1\/3,random_state=0)","f9fda9a1":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","835d4970":"lr=LinearRegression()\nlr.fit(x_train,y_train)","41996f52":"y_pred=lr.predict(x_test)\ny_pred","393b7000":"scores = cross_val_score(lr,x,y,scoring='r2',cv=10)\nscores","cc7fb0dd":"plt.scatter(x_train,y_train,color='red')\nplt.plot(x_train,lr.predict(x_train),color='blue')\nplt.title('Salary vs Experience (Training Set)')\nplt.xlabel('Years of Experience')\nplt.ylabel('Salary')\nplt.show()","084507d7":"plt.scatter(x_test,y_test,color='red')\nplt.plot(x_test,lr.predict(x_test),color='blue')\nplt.title('Salary vs Experience (Test Set)')\nplt.xlabel('Years of Experience')\nplt.ylabel('Salary')\nplt.show()","6e1e6254":"dataset=pd.read_csv('..\/input\/50-startups\/50_Startups.csv')\nx=dataset.iloc[:,:-1].values\ny=dataset.iloc[:,-1].values","8d7fc584":"dataset.head()","3ae7225a":"ct= ColumnTransformer(transformers=[('encoder',OneHotEncoder(),[3])],remainder='passthrough')\nx=np.array(ct.fit_transform(x))","1a70de46":"print(x)","ddb6114b":"x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.2,random_state=0)","cd280b79":"lr=LinearRegression()\nlr.fit(x_train,y_train)","519f7246":"y_pred = lr.predict(x_test)\nnp.set_printoptions(precision=2)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))","156917e2":"print(lr.predict([[1,0,0,20000,14000,300000]]))","ba601771":"print(lr.coef_)\nprint(lr.intercept_)","2c627bad":"df=pd.read_csv('..\/input\/position-salaries\/Position_Salaries.csv')\ndf.head()","454a5f51":"x=df.iloc[:,1:-1].values\ny=df.iloc[:,-1].values","f2abd4e7":"print(x)\nprint(y)","0d1dbaf3":"plt.scatter(x,y)","d453aab5":"lin_reg=LinearRegression()\nlin_reg.fit(x,y)","0ce78685":"pr=PolynomialFeatures(degree=4)\nx_poly=pr.fit_transform(x)","8f474b26":"lin_reg2=LinearRegression()\nlin_reg2.fit(x_poly,y)","8c3cbcb5":"plt.scatter(x,y,color='red')\nplt.plot(x,lin_reg.predict(x),color='blue')\nplt.title('Truth or Bluff (Linear Regression)')\nplt.xlabel('Position Level')\nplt.ylabel('Salary')\nplt.show()","1b41142b":"plt.scatter(x,y,color='red')\nplt.plot(x,lin_reg2.predict(pr.fit_transform(x)),color='blue')\nplt.title('Truth or Bluff (Linear Regression)')\nplt.xlabel('Position Level')\nplt.ylabel('Salary')\nplt.show()","a9fa25c9":"X_grid = np.arange(min(x), max(x), 0.1)\nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(x, y, color = 'red')\nplt.plot(X_grid, lin_reg2.predict(pr.fit_transform(X_grid)), color = 'blue')\nplt.title('Truth or Bluff (Polynomial Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()","208605e4":"\nlin_reg.predict([[6.5]])","2d0eb7e8":"lin_reg2.predict(pr.fit_transform([[6.5]]))","5e9efe0d":"from sklearn.datasets import load_boston","dab5ba1a":"df = load_boston()","bc415f9b":"df","57a1a959":"data = pd.DataFrame(df.data)\ndata.head()","e7921f4d":"data.columns = df.feature_names","cb897908":"data.head()","203f9131":"data['Price'] = df.target","3d09ae53":"data.head()","b156d411":"X = data.iloc[:,:-1]\ny = data.iloc[:,-1]","17782f21":"l_reg = LinearRegression()","247374cb":"mse = cross_val_score(l_reg,X,y,cv=5,scoring='neg_mean_squared_error')\nmean_mse = np.mean(mse)\nprint(mean_mse)","ba48aabe":"ridge = Ridge()\nparameters = {'alpha':[1e-15,1e-10,1e-8,1e-6,1e-4,1e-2,1,5,10,20,30,40,45,50,55,60,70,80,100]}\nreg_r=GridSearchCV(ridge,parameters,scoring='neg_mean_squared_error',cv = 5)\nreg_r.fit(X,y)","f79725ff":"print(reg_r.best_estimator_)\nprint(reg_r.best_score_)","75f31d6d":"lasso= Lasso()\nparameters = {'alpha':[1e-15,1e-10,1e-8,1e-6,1e-4,1e-2,1,5,10,20,30,40,45,50,55,60,70,80,100]}\nreg_lasso=GridSearchCV(lasso,parameters,scoring='neg_mean_squared_error',cv = 5)\nreg_lasso.fit(X,y)","00b1dd6f":"print(reg_lasso.best_estimator_)\nprint(reg_lasso.best_score_)","1da870eb":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size =0.3 , random_state = 42)","aa599350":"prediction_lasso = reg_lasso.predict(X_test)\nprediction_ridge = reg_r.predict(X_test)","ec7b0e74":"sns.distplot(y_test - prediction_lasso)","06cc9a25":"sns.distplot(y_test - prediction_ridge)","a2f8ed96":"df = pd.read_csv('..\/input\/position-salaries\/Position_Salaries.csv')\ndf.head()","efab98c6":"X=df.iloc[:,1:-1].values\ny=df.iloc[:,-1].values","653ba0ad":"y=y.reshape(len(y),1)","45635c4f":"sc_X = StandardScaler()\nsc_y = StandardScaler()\nX = sc_X.fit_transform(X)\ny = sc_y.fit_transform(y)","d1aa7b55":"regressor =SVR(kernel='rbf')\nregressor.fit(X,y.ravel())","55d08c3a":"print (sc_y.inverse_transform(regressor.predict(sc_X.transform([[6.5]]))))","87061c6d":"plt.scatter(sc_X.inverse_transform(X), sc_y.inverse_transform(y), color = 'red')\nplt.plot(sc_X.inverse_transform(X), sc_y.inverse_transform(regressor.predict(X)), color = 'blue')\nplt.title('Truth or Bluff (SVR)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()","30272509":"X_grid = np.arange(min(sc_X.inverse_transform(X)), max(sc_X.inverse_transform(X)), 0.1)\nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(sc_X.inverse_transform(X), sc_y.inverse_transform(y), color = 'red')\nplt.plot(X_grid, sc_y.inverse_transform(regressor.predict(sc_X.transform(X_grid))), color = 'blue')\nplt.title('Truth or Bluff (SVR)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()","3db3c1a5":"regressor = DecisionTreeRegressor(random_state=0)\nX = df.iloc[:,1:-1].values\ny = df.iloc[:,-1].values","d5304bcc":"regressor.fit(X,y)","c64ff8f4":"regressor.predict([[6.5]])","bd67bb2a":"X_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\nplt.title('Truth or Bluff (Decision Tree Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()","45ec12a8":"df = pd.read_csv('..\/input\/position-salaries\/Position_Salaries.csv')\ndf.head()","f7c6cc01":"X = df.iloc[:,1:-1].values\ny = df.iloc[:,-1].values","c345b525":"regressor = RandomForestRegressor(n_estimators=10, random_state= 0)\nregressor.fit(X,y)","fc68ba6a":"regressor.predict([[6.5]])","ddc74836":"X_grid = np.arange(min(X), max(X), 0.01)\nX_grid = X_grid.reshape((len(X_grid), 1))\nplt.scatter(X, y, color = 'red')\nplt.plot(X_grid, regressor.predict(X_grid), color = 'blue')\nplt.title('Truth or Bluff (Random Forest Regression)')\nplt.xlabel('Position level')\nplt.ylabel('Salary')\nplt.show()","d81c2fbb":"# Visualising Train Data","fb632257":"# Ridge, Lasso","eb949b0c":"# Random Forest","e7dbdae9":"## Hence the equation will be :\n> **Profit**=86.6\u00d7Dummy State 1\u2212873\u00d7Dummy State 2+786\u00d7Dummy State 3\u22120.773\u00d7R&D Spend+0.0329\u00d7Administration+0.0366\u00d7Marketing Spend+42467.53","2e08d288":"# SVR","c72b787c":"# Visualising Test Data","5eaa600b":"# Linear Regression","78723516":"# Decision Trees","4bfcf071":"The data is less. This is just a simple notebook to show different Regression techniques.","4d2f8d0f":"# Polynomial Regression","5ae9b0be":"# Multiple Linear Regression"}}