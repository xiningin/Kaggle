{"cell_type":{"5c63b7df":"code","d34a5e33":"code","16af3abb":"code","37c5d5e1":"code","ef04babd":"code","a24337d4":"code","7a198074":"code","1abe9360":"code","bc7fd5a1":"code","c3f21b21":"code","af9e6f68":"code","daf26a60":"code","4a71b4d7":"code","aa5f1c16":"code","d0a11fd2":"code","e8001d7e":"code","225764b6":"code","38365a33":"code","cda525a1":"code","6d993568":"code","85edd66d":"code","31874070":"code","05ef1f2b":"code","b7a2f7c3":"code","aa2eca2a":"code","ad3dfad7":"code","3fe40ed1":"code","e0ddf626":"code","ff923e74":"code","9f4ad04b":"code","6d027955":"code","060b6bfd":"code","a828a2db":"code","c3ae6f9e":"code","449cdb34":"code","8d3e181e":"code","b0206d3a":"code","c9d892ce":"code","116f45be":"code","5a15815a":"code","a3f2670d":"code","45af15ba":"code","eb44252e":"code","982074b2":"code","f063d450":"code","dbe27c76":"code","f5ffe916":"code","664c7d0a":"code","39dc1127":"code","02f14871":"markdown","fddf638b":"markdown","b09d31be":"markdown","2a819a40":"markdown","27ad3bf9":"markdown","e6106d1f":"markdown","2f90e88c":"markdown","29d7aa1a":"markdown","28f1cf2a":"markdown","b73c7aba":"markdown","de553f17":"markdown","f1c18351":"markdown","b75e5769":"markdown","bf456c13":"markdown","23ef1b35":"markdown","3ac1ecbb":"markdown","6242be22":"markdown","d46e912d":"markdown","511160bf":"markdown"},"source":{"5c63b7df":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\nimport plotly.express as px\nimport plotly.offline as pyo\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom IPython.display import display, Markdown","d34a5e33":"#from google.colab import files \n#uploaded = files.upload()\n\n","16af3abb":"dfn=pd.read_csv(\"..\/input\/india-covid19-dataset\/covid_19_india.csv\")\ndfn.tail()","37c5d5e1":"st_df= pd.read_csv(\"..\/input\/india-covid19-dataset\/StatewiseTestingDetails.csv\")\nst_df.head()","ef04babd":"vc_df=pd.read_csv('..\/input\/india-covid19-dataset\/covid_vaccine_statewise.csv')\nvc_df.head()","a24337d4":"dfn.info()","7a198074":"dfn.isnull().sum()","1abe9360":"df=dfn.drop(['Time','ConfirmedIndianNational','ConfirmedForeignNational'],axis=1)","bc7fd5a1":"df['active']=df['Confirmed']-(df['Deaths']+df['Cured'])","c3f21b21":"df.head()","af9e6f68":"statewise = pd.pivot_table(df, values= ['Confirmed','Deaths','Cured'],index='State\/UnionTerritory',aggfunc='max')\nstatewise['Recovery rate']= statewise['Cured']*100 \/ statewise['Confirmed']\nstatewise['Mortality rate'] = statewise['Deaths']*100\/ statewise['Confirmed']\nstatewise= statewise.sort_values(by='Confirmed', ascending= False)\nstatewise.style.background_gradient(cmap= 'YlOrBr')","daf26a60":"st_df.info()","4a71b4d7":"st_df.isnull().sum()","aa5f1c16":"st_df['Negative']=st_df['Negative'].fillna(0)\nst_df['TotalSamples']=st_df['TotalSamples'].astype('int')\nst_df['Positive']=st_df['Positive'].fillna(0)\nst_df['Positive']=st_df['Positive'].astype('int')","d0a11fd2":"StatewiseTesting = pd.pivot_table(st_df, values=['TotalSamples','Positive'],index='State',aggfunc='max')\nStatewiseTesting['positive case rate ']= StatewiseTesting['Positive']*100\/ StatewiseTesting['TotalSamples']\nStatewiseTesting= StatewiseTesting.sort_values(by='TotalSamples', ascending= False)\nStatewiseTesting.style.background_gradient(cmap = 'YlOrBr')","e8001d7e":"totaltested =StatewiseTesting['TotalSamples'].sum()\ntotalpositive = StatewiseTesting['Positive'].sum()\nfig = go.Figure(data=[go.Pie(labels=['Total Samples Tested','Positive Cases from tested samples'],\n                            values= [totaltested,totalpositive],hole =.3)])\nfig.update_traces(hoverinfo='label+percent', textinfo='value',textfont_size=20,\n                  marker=dict(colors=['#263fa3','#cc3c2f'], line=dict(color='#FFFFFF', width=2)))\nfig.update_layout(title_text='COVID19 Test Results from ICMR in india from 2020-01-30 - 2021-07-07\t',plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","225764b6":"at = df['active'].sum()\ndeath = df['Deaths'].sum()\ncr= df['Cured'].sum()\nfig = go.Figure(data=[go.Pie(labels=['Active','Cured','Death'],\n                             values= [at,cr,death],hole =.3)])\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=['#263fa3', '#2fcc41','#cc3c2f'], line=dict(color='#FFFFFF', width=2)))\nfig.update_layout(title_text='Sum total COVID Situation in INDIA from 2020-01-30 - 2021-07-07',plot_bgcolor='rgb(275, 270, 273)')\nfig.show()","38365a33":"testing = st_df.groupby('State')['TotalSamples'].max().sort_values(ascending=False).reset_index()\nfig = px.bar(testing,\n             x='TotalSamples',\n             y='State',\n             orientation='h',\n             height=900,\n             title= 'Total sample Statewise',\n             color='State', text='TotalSamples',)\nfig.show()","cda525a1":"plt.figure(figsize = (16,14))\nfigure = px.line(dfn, x='Date', y='Confirmed', color='State\/UnionTerritory')\nfigure.update_xaxes(rangeslider_visible=True)\npyo.iplot(figure)","6d993568":"df1=dfn.groupby('Date')[['Cured','Deaths','Confirmed']].sum()\ndf1.tail()","85edd66d":"fig = make_subplots(rows=2, cols=1,\n                   subplot_titles=(\"Recovery Rate\", \"Mortatlity Rate\"))\nfig.add_trace(\n    go.Scatter(x=df1.index, y=(df1[\"Cured\"]\/df1[\"Confirmed\"])*100,\n              name=\"Recovery Rate\"),\n    row=1, col=1\n)\nfig.add_trace(\n    go.Scatter(x=df1.index, y=(df1[\"Deaths\"]\/df1[\"Confirmed\"])*100,\n              name=\"Mortality Rate\"),\n    row=2, col=1\n)\nfig.update_layout(height=1000,legend=dict(x=-0.1,y=1.2,traceorder=\"normal\"))\nfig.update_xaxes(title_text=\"Date\", row=1, col=1)\nfig.update_yaxes(title_text=\"Recovery Rate\", row=1, col=1)\nfig.update_xaxes(title_text=\"Date\", row=1, col=2)\nfig.update_yaxes(title_text=\"Mortality Rate\", row=1, col=2)\nfig.show()","31874070":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=df1.index, y=df1[\"Confirmed\"],\n                    mode='lines+markers',\n                    name='Confirmed Cases'))\nfig.add_trace(go.Scatter(x=df1.index, y=df1[\"Cured\"],\n                    mode='lines+markers',\n                    name='Cured Cases'))\nfig.add_trace(go.Scatter(x=df1.index, y=df1[\"Deaths\"],\n                    mode='lines+markers',\n                    name='Death Cases'))\nfig.update_layout(title=\"Curve to show cases in India\",\n                 xaxis_title=\"Date\",yaxis_title=\"Number of Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","05ef1f2b":"# Adding Location data (Latitude,Longitude)\nlocations = {\n    \"Kerala\" : [10.8505,76.2711],\n    \"Maharashtra\" : [19.7515,75.7139],\n    \"Karnataka\": [15.3173,75.7139],\n    \"Telangana\": [18.1124,79.0193],\n    \"Uttar Pradesh\": [26.8467,80.9462],\n    \"Rajasthan\": [27.0238,74.2179],\n    \"Gujarat\":[22.2587,71.1924],\n    \"Delhi\" : [28.7041,77.1025],\n    \"Punjab\":[31.1471,75.3412],\n    \"Tamil Nadu\": [11.1271,78.6569],\n    \"Haryana\": [29.0588,76.0856],\n    \"Madhya Pradesh\":[22.9734,78.6569],\n    \"Jammu and Kashmir\":[33.7782,76.5762],\n    \"Ladakh\": [34.1526,77.5770],\n    \"Andhra Pradesh\":[15.9129,79.7400],\n    \"West Bengal\": [22.9868,87.8550],\n    \"Bihar\": [25.0961,85.3131],\n    \"Chhattisgarh\":[21.2787,81.8661],\n    \"Chandigarh\":[30.7333,76.7794],\n    \"Uttarakhand\":[30.0668,79.0193],\n    \"Himachal Pradesh\":[31.1048,77.1734],\n    \"Goa\": [15.2993,74.1240],\n    \"Odisha\":[20.9517,85.0985],\n    \"Andaman and Nicobar Islands\": [11.7401,92.6586],\n    \"Puducherry\":[11.9416,79.8083],\n    \"Manipur\":[24.6637,93.9063],\n    \"Mizoram\":[23.1645,92.9376],\n    \"Assam\":[26.2006,92.9376],\n    \"Meghalaya\":[25.4670,91.3662],\n    \"Tripura\":[23.9408,91.9882],\n    \"Arunachal Pradesh\":[28.2180,94.7278],\n    \"Jharkhand\" : [23.6102,85.2799],\n    \"Nagaland\": [26.1584,94.5624],\n    \"Sikkim\": [27.5330,88.5122],\n    \"Dadra and Nagar Haveli\":[20.1809,73.0169],\n    \"Lakshadweep\":[10.5667,72.6417],\n    \"Daman and Diu\":[20.4283,72.8397]    \n}\nstatewise[\"Lat\"] = \"\"\nstatewise[\"Long\"] = \"\"\n\nfor index in statewise.index :\n    if index in locations:\n        statewise.loc[statewise.index == index,\"Lat\"] = locations[index][0]\n        statewise.loc[statewise.index == index,\"Long\"] = locations[index][1]\n    else:\n        statewise.drop([index],inplace=True)","b7a2f7c3":"import folium  \nfrom IPython.display import HTML, display\nindia = folium.Map(location=[23,80], zoom_start=4,max_zoom=6,min_zoom=4,height=600,width=\"80%\", tiles='cartodbpositron')\nfor i in range(0,len(statewise[statewise['Confirmed']>0].index)):\n    folium.Circle(\n        location=[statewise.iloc[i]['Lat'], statewise.iloc[i]['Long']],\n        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+statewise.iloc[i].name+\"<\/h5>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(statewise.iloc[i]['Confirmed'])+\"<\/li>\"+\n        \"<li>Cured:   \"+str(statewise.iloc[i]['Cured'])+\"<\/li>\"+\n        \"<li>Deaths:   \"+str(statewise.iloc[i]['Deaths'])+\"<\/li>\"+\n        \"<li>Recovery Rate:   \"+str(np.round(statewise.iloc[i]['Recovery rate'],2))+\"<\/li>\"+\n        \"<li>Mortality Rate:   \"+str(np.round(statewise.iloc[i]['Mortality rate'],2))+\"<\/li>\"+\n        \"<\/ul>\"\n        ,\n        radius=(int(np.log2(statewise.iloc[i]['Confirmed']+1)))*6000,\n        color='red',\n        fill_color='#ff8533',\n        fill=True).add_to(india)\n\nindia","aa2eca2a":"df1.tail()","ad3dfad7":"growth_diff = []\n\nfor i in range(1,len(df1['Confirmed'])):\n    growth_diff.append(df1['Confirmed'][i] \/ df1['Confirmed'][i-1])\n\ngrowth_factor = sum(growth_diff)\/len(growth_diff)\nprint('Average growth factor',growth_factor)","3fe40ed1":"prediction_dates = []\ndf1.reset_index(inplace=True)\nfrom datetime import datetime,timedelta\ndf1['Date']=pd.to_datetime(df1['Date'], format='%Y-%m-%d')\nstart_date = df1['Date'][len(df1['Date']) - 1]\nfor i in range(90):\n    date = start_date +timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nprevious_day_cases = df1['Confirmed'][len(df1['Date']) - 1]\npredicted_cases = []\n\nfor i in range(90):\n    predicted_value = previous_day_cases *  growth_factor\n    predicted_cases.append(predicted_value)\n    previous_day_cases = predicted_value\n\nplt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Number of cases cases',fontsize = 20)\nplt.title(\"Predicted Values for the next 90 Days\" , fontsize = 20)\nax1 = plt.plot_date(y= predicted_cases,x= prediction_dates,linestyle ='-',color = 'c')","e0ddf626":"No_Lockdown=df1[df1[\"Date\"]<pd.to_datetime(\"2020-03-24\")]\nLockdown_1=df1[(df1[\"Date\"]>=pd.to_datetime(\"2020-03-24\"))&(df1[\"Date\"]<pd.to_datetime(\"2020-07-15\"))]\nLockdown_2=df1[(df1[\"Date\"]>=pd.to_datetime(\"2020-07-15\"))&(df1[\"Date\"]<pd.to_datetime(\"2020-11-04\"))]\nLockdown_3=df1[(df1[\"Date\"]>=pd.to_datetime(\"2020-11-04\"))&(df1[\"Date\"]<pd.to_datetime(\"2021-02-19\"))]\nLockdown_4=df1[(df1[\"Date\"]>=pd.to_datetime(\"2021-02-19\"))&(df1[\"Date\"]<=pd.to_datetime(\"2021-05-31\"))]\nUnlock_1=df1[(df1[\"Date\"]>=pd.to_datetime(\"2020-06-01\"))&(df1[\"Date\"]<=pd.to_datetime(\"2020-06-30\"))]\nUnlock_2=df1[(df1[\"Date\"]>=pd.to_datetime(\"2020-07-01\"))]\n\nNo_Lockdown_datewise=No_Lockdown.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nLockdown_1_datewise=Lockdown_1.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nLockdown_2_datewise=Lockdown_2.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nLockdown_3_datewise=Lockdown_3.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nLockdown_4_datewise=Lockdown_4.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nUnlock_1_datewise=Unlock_1.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nUnlock_2_datewise=Unlock_2.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\n\nNo_Lockdown_datewise[\"Active Cases\"]=No_Lockdown_datewise[\"Confirmed\"]-No_Lockdown_datewise[\"Cured\"]-No_Lockdown_datewise[\"Deaths\"]\nLockdown_1_datewise[\"Active Cases\"]=Lockdown_1_datewise[\"Confirmed\"]-Lockdown_1_datewise[\"Cured\"]-Lockdown_1_datewise[\"Deaths\"]\nLockdown_2_datewise[\"Active Cases\"]=Lockdown_2_datewise[\"Confirmed\"]-Lockdown_2_datewise[\"Cured\"]-Lockdown_2_datewise[\"Deaths\"]\nLockdown_3_datewise[\"Active Cases\"]=Lockdown_3_datewise[\"Confirmed\"]-Lockdown_3_datewise[\"Cured\"]-Lockdown_3_datewise[\"Deaths\"]\nLockdown_4_datewise[\"Active Cases\"]=Lockdown_4_datewise[\"Confirmed\"]-Lockdown_4_datewise[\"Cured\"]-Lockdown_4_datewise[\"Deaths\"]\nUnlock_1_datewise[\"Active Cases\"]=Unlock_1_datewise[\"Confirmed\"]-Unlock_1_datewise[\"Cured\"]-Unlock_1_datewise[\"Deaths\"]\nUnlock_2_datewise[\"Active Cases\"]=Unlock_2_datewise[\"Confirmed\"]-Unlock_2_datewise[\"Cured\"]-Unlock_2_datewise[\"Deaths\"]\n\nNo_Lockdown_datewise[\"Days Since\"]=(No_Lockdown_datewise.index-No_Lockdown_datewise.index.min()).days\nLockdown_1_datewise[\"Days Since\"]=(Lockdown_1_datewise.index-Lockdown_1_datewise.index.min()).days\nLockdown_2_datewise[\"Days Since\"]=(Lockdown_2_datewise.index-Lockdown_2_datewise.index.min()).days\nLockdown_3_datewise[\"Days Since\"]=(Lockdown_3_datewise.index-Lockdown_3_datewise.index.min()).days\nLockdown_4_datewise[\"Days Since\"]=(Lockdown_4_datewise.index-Lockdown_4_datewise.index.min()).days\nUnlock_1_datewise[\"Days Since\"]=(Unlock_1_datewise.index-Unlock_1_datewise.index.min()).days\nUnlock_2_datewise[\"Days Since\"]=(Unlock_2_datewise.index-Unlock_2_datewise.index.min()).days\n\nprint(\"Average Active Cases growth rate in Lockdown 1.0: \",(Lockdown_1_datewise[\"Active Cases\"]\/Lockdown_1_datewise[\"Active Cases\"].shift()).mean())\nprint(\"Median Active Cases growth rate in Lockdown 1.0: \",(Lockdown_1_datewise[\"Active Cases\"]\/Lockdown_1_datewise[\"Active Cases\"].shift()).median())\nprint(\"Average Active Cases growth rate in Lockdown 2.0: \",(Lockdown_2_datewise[\"Active Cases\"]\/Lockdown_2_datewise[\"Active Cases\"].shift()).mean())\nprint(\"Median Active Cases growth rate in Lockdown 2.0: \",(Lockdown_2_datewise[\"Active Cases\"]\/Lockdown_2_datewise[\"Active Cases\"].shift()).median())\nprint(\"Average Active Cases growth rate in Lockdown 3.0: \",(Lockdown_3_datewise[\"Active Cases\"]\/Lockdown_3_datewise[\"Active Cases\"].shift()).mean())\nprint(\"Median Active Cases growth rate in Lockdown 3.0: \",(Lockdown_3_datewise[\"Active Cases\"]\/Lockdown_3_datewise[\"Active Cases\"].shift()).median())\nprint(\"Average Active Cases growth rate in Lockdown 4.0: \",(Lockdown_4_datewise[\"Active Cases\"]\/Lockdown_4_datewise[\"Active Cases\"].shift()).mean())\nprint(\"Median Active Cases growth rate in Lockdown 4.0: \",(Lockdown_4_datewise[\"Active Cases\"]\/Lockdown_4_datewise[\"Active Cases\"].shift()).median())\nprint(\"Average Active Cases growth rate in Unlock 1.0: \",(Unlock_1_datewise[\"Active Cases\"]\/Unlock_1_datewise[\"Active Cases\"].shift()).mean())\nprint(\"Median Active Cases growth rate in Unlock 1.0: \",(Unlock_1_datewise[\"Active Cases\"]\/Unlock_1_datewise[\"Active Cases\"].shift()).median())","ff923e74":"fig=go.Figure()\nfig.add_trace(go.Scatter(y=list(Lockdown_1_datewise[\"Active Cases\"]\/Lockdown_1_datewise[\"Active Cases\"].shift()),\n                    mode='lines+markers',\n                    name='Growth Factor of Lockdown 1.0 Active Cases'))\nfig.add_trace(go.Scatter(y=list(Lockdown_2_datewise[\"Active Cases\"]\/Lockdown_2_datewise[\"Active Cases\"].shift()),\n                    mode='lines+markers',\n                    name='Growth Factor of Lockdown 2.0 Active Cases'))\nfig.add_trace(go.Scatter(y=list(Lockdown_3_datewise[\"Active Cases\"]\/Lockdown_3_datewise[\"Active Cases\"].shift()),\n                    mode='lines+markers',\n                    name='Growth Factor of Lockdown 3.0 Active Cases'))\nfig.add_trace(go.Scatter(y=list(Lockdown_4_datewise[\"Active Cases\"]\/Lockdown_4_datewise[\"Active Cases\"].shift()),\n                    mode='lines+markers',\n                    name='Growth Factor of Lockdown 4.0 Active Cases'))\nfig.add_trace(go.Scatter(y=list(Unlock_1_datewise[\"Active Cases\"]\/Unlock_1_datewise[\"Active Cases\"].shift()),\n                    mode='lines+markers',\n                    name='Growth Factor of Unlock 1.0 Active Cases'))\n# fig.add_trace(go.Scatter(y=list(Unlock_2_datewise[\"Active Cases\"]\/Unlock_2_datewise[\"Active Cases\"].shift()),\n#                     mode='lines+markers',\n#                     name='Growth Factor of Unlock 2.0 Active Cases'))\nfig.update_layout(title=\"Lockdownwise Growth Factor of Active Cases in India\",\n                 xaxis_title=\"Date\",yaxis_title=\"Growth Factor\",\n                 legend=(dict(x=0,y=1,traceorder=\"normal\")))\nfig.show()","9f4ad04b":"predIndiaDF = df1.copy()\nextended_period = 2000\nfrom scipy.optimize import curve_fit\ndef sigmoid(x, L, k, x0):\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1\n\npopt, pcov = curve_fit(sigmoid,  (predIndiaDF.index+1).astype(float), predIndiaDF['Confirmed'],  p0=(0,0,0),maxfev=5000 )\n\nx0 = int(popt[2]\/10)\nprint('\\033[1mx0 (point\/day of inflexion):\\033[0m',int(popt[2]\/10))\nprint('\\033[1mL (Maximum no.of cases):\\033[0m',int(popt[0]\/10000) )\nprint('\\033[1mk (Growth Rate):\\033[0m',round(float(popt[1]),2) )\nprint('\\033[1mPCOV: \\033[0m\\n',pcov )\n\nfig = go.Figure()\ndateRange = pd.date_range(pd.to_datetime(predIndiaDF['Date'].min()),\\\n                                         pd.to_datetime(predIndiaDF['Date'].min())+pd.DateOffset(extended_period))\n\nfig.add_trace(go.Scatter(x = predIndiaDF['Date'],\n                         y = predIndiaDF['Confirmed'],\n                         mode = 'lines',\n                         name = 'Observed'))\nfig.add_trace(go.Scatter(x = dateRange[:600],\n                         y = sigmoid([x for x in range(extended_period)],*popt),\n                         mode = 'lines',\n                         name = 'Predicted'))\nfig.add_trace(go.Scatter(x = [dateRange[x0], dateRange[x0]],\n                         y = [0,  sigmoid([x for x in range(extended_period)],*popt)[x0]],\n                         name = 'X0 - Inflexion point',\n                         mode = 'lines'))\n\nfig.update_layout(template='plotly_dark',title='Projected Confirmed Cases')\nfig.show()","6d027955":"from fbprophet import Prophet\nfb_data = df1.copy()\nfb_confirm = fb_data[['Date', 'Confirmed']]\nfb_confirm = fb_confirm.rename(columns={'Date': 'ds',\n                        'Confirmed': 'y'})\n\nfb_confirm.head()","060b6bfd":"# Time Series Forecasting with Prophet\n# set the uncertainty interval to 95% (the Prophet default is 80%)\nmy_model = Prophet(interval_width=0.95)\nmy_model.fit(fb_confirm)","a828a2db":"# Creating a new dataframe\n# Prophet provides the make_future_dataframe helper function\nfuture_dates = my_model.make_future_dataframe(periods=15, freq='MS')\nfuture_dates.tail()","c3ae6f9e":"forecast = my_model.predict(future_dates)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","449cdb34":"from fbprophet.plot import plot_plotly, add_changepoints_to_plot\nfig = plot_plotly(my_model, forecast)\npyo.iplot(fig) \n\nfig = my_model.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","8d3e181e":"forecast_components=my_model.plot_components(forecast)","b0206d3a":"fb_death = fb_data[['Date', 'Deaths']]\nfb_death = fb_death.rename(columns={'Date': 'ds',\n                        'Deaths': 'y'})\n\nm = Prophet()\nm.fit(fb_death)\nfuture = m.make_future_dataframe(periods=90)\nforecast = m.predict(future)\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat'],\n                    mode='lines+markers',name='Predicted Cases',marker_color='red'))\nfig.add_trace(go.Scatter(x=fb_death['ds'], y=fb_death['y'],\n                    mode='lines+markers',name='Actual Cases',marker_color='blue'))\nfig.update_layout(\n    title='Forecasting of Deaths in INDIA for Next 30 Days')\nfig.show()","c9d892ce":"fb_Cured = fb_data[['Date', 'Cured']]\nfb_Cured = fb_death.rename(columns={'Date': 'ds',\n                        'Cured': 'y'})\n\nm = Prophet()\nm.fit(fb_Cured)\nfuture = m.make_future_dataframe(periods=90)\nforecast = m.predict(future)\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat'],\n                    mode='lines+markers',name='Predicted Cases',marker_color='green'))\nfig.add_trace(go.Scatter(x=fb_Cured['ds'], y=fb_Cured['y'],\n                    mode='lines+markers',name='Actual Cases',marker_color='yellow'))\nfig.update_layout(\n    title='Forecasting of Cured in INDIA for Next 30 Days')\nfig.show()","116f45be":"# test size\ntest_size = 30\ntrain_size= len(df1) - test_size\ntrain = df1[['Confirmed']].iloc[:train_size]\ntest = df1[['Confirmed']].iloc[train_size:]\n# train and test\n\nprint(train.shape)\nprint(test.shape)","5a15815a":"# exons variables\nexons=df1[['Cured','Deaths']]\n\nfull_data = df1['Confirmed']","a3f2670d":"import statsmodels.api as sm\nSARIMAX__model = sm.tsa.statespace.SARIMAX(full_data.values,exons=exons,\n                                            order=(1,0,1),\n                                            seasonal_order=(1,0,1,7),\n                                         enforce_stationarity=False,\n                                         enforce_invertibility=False,)\nSARIMAX__model = SARIMAX__model.fit(maxiter=1000)\n\ndays=60\nprediction = SARIMAX__model.get_forecast(steps=days)\npred_date = prediction.summary_frame(alpha=0.05).set_index(pd.date_range(start='2021-07-07',periods=days,freq='D'))","45af15ba":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    name=\"Actual\",\n     x=df1['Date'], y=df1[\"Confirmed\"]))\n\nfig.add_trace(go.Scatter(\n    name=\"prediction\",mode=\"lines\",\n     x=pred_date.index, y=pred_date['mean']))\n\nfig.add_trace(go.Scatter(\n    name=\"lowerbound\",mode=\"lines\",\n        line=dict(width=0),fillcolor='rgba(68, 68, 68, 0.3)',\n        fill='tonexty',showlegend=False,\n     x=pred_date.index, y=pred_date['mean_ci_lower']))\n\nfig.add_trace(go.Scatter(name=\"upperbound\",mode=\"lines\",\n        line=dict(width=0),fillcolor='rgba(68, 68, 68, 0.3)',fill='tonexty',showlegend=False,\n                         x=pred_date.index, y=pred_date['mean_ci_upper']))","eb44252e":"MH_test=st_df[(st_df['State']=='Maharashtra')]\nplt.figure(figsize=(8,8))\nplt.plot(MH_test['Date'],MH_test['TotalSamples'],'-r')\nplt.rc(\"xtick\",labelsize=9)\nplt.rc(\"ytick\",labelsize=10)\nax = plt.gca()\nstart, end = ax.get_xlim()\nax.xaxis.set_ticks(np.arange(start, end, 12))\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Total Samples')\nplt.title('Dates V\/S Total Samples')\nax.annotate('Lockdown 2', xy =('2020-07-15', 21994), xytext=('2020-07-15',150000),ha='center',\n                arrowprops = dict(facecolor ='Blue',shrink = 0.05),) \nax.annotate('Lockdown 3', xy =('2020-11-04',162970), xytext=('2020-11-04',5000),ha='center', \n                arrowprops = dict(facecolor ='Yellow',shrink = 0.05),) \nax.annotate('Lockdown 4', xy =('2021-03-18',337841), xytext=('2021-03-18',185000),ha='center',\n                arrowprops = dict(facecolor ='Black',shrink = 0.05),) \nax.annotate('Unlock 1.0', xy =('2021-06-08',607952), xytext=('2021-06-08',200000),ha='center',\n                arrowprops = dict(facecolor ='orange',shrink = 0.05),) ","982074b2":"states=['Uttar Pradesh','Kerala', 'Tamil Nadu', 'Karnataka', 'Rajasthan',\n        'Andhra Pradesh']\nfrom datetime import datetime,timedelta\ndf['Date']=pd.to_datetime(df['Date'], format='%Y-%m-%d')\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom statsmodels.tsa.arima_model import ARIMA\nfig = plt.figure(figsize=(25,20),dpi = 250)\nsubplotno = 1\n\nfor state in states:\n    \n     \n    state_df = df[df['State\/UnionTerritory'] == state]\n    y = state_df['Confirmed']\n    \n    arima = ARIMA(y, order=(5, 2, 0))\n    arima = arima.fit(trend='c', full_output=True, disp=True)\n    forecast = arima.forecast(steps= 6)\n    pred = list(forecast[0])\n\n    start_date = state_df['Date'].max()\n\n    prediction_dates = [pd.to_datetime(start_date)]\n\n    for i in range(5):\n        \n        tempdate = start_date + timedelta(days=1)\n        prediction_dates.append(tempdate)\n        start_date = tempdate\n    \n    ax = fig.add_subplot(3,2,subplotno)\n    \n    plt.title(state + ' : ' + str(int(round(pred[-1],0))) + ' Cases' , fontsize = 16)\n\n\n    plt.xticks(fontsize = 8)\n    \n    sns.lineplot(y= pred,x= prediction_dates,linestyle ='dashed',label = 'Predicted',color = 'red')\n    sns.lineplot(y=state_df['Confirmed'] , x = state_df['Date'] ,color = 'darkcyan',label = 'Actual')\n    plt.legend()\n    \n\n    plt.ylabel('')\n    plt.xlabel('')\n\n    subplotno +=1\n\nplt.suptitle('State-wise Predicted Number of Cases by '+str(prediction_dates[-1].date()) ,fontsize = 23)\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.savefig('Statepred - ARIMA')","f063d450":"vc_pro =vc_df.groupby('State')['Total Individuals Vaccinated'].max().reset_index().sort_values(['Total Individuals Vaccinated'],ascending=False)\nvc_pro","dbe27c76":"up =vc_df[vc_df[\"State\"]==\"Uttar Pradesh\"] \nfig = px.line(up,x=\"Updated On\",y=\"Total Individuals Vaccinated\",title=\"UP Vaccinated per day\")  \nfig.update_xaxes(rangeslider_visible=True) ","f5ffe916":"fig = px.line(up,x=\"Updated On\",y=\"Total Sessions Conducted\",title=\"Total Number of sessions are conducted in UP per day\")  \nfig.update_xaxes(rangeslider_visible=True) ","664c7d0a":"male = up[\"Male(Individuals Vaccinated)\"].sum() \nfemale = up[\"Female(Individuals Vaccinated)\"].sum()  \ntrans = up[\"Transgender(Individuals Vaccinated)\"].sum()\npx.pie(names=[\"Male Vaccinated\",\"Female Vaccinated\",\"Trans Gender\"],values=[male,female,trans],title=\"Male and Female Vaccinated ratio for Covid19--UP\")","39dc1127":"first = up[\"First Dose Administered\"].sum() \nsecond = up[\"Second Dose Administered\"].sum() \npx.pie(names=[\"First Dose\",\"Second dose\"],values=[first,second],title =\"First and Second dosage ratio for covid in UP\")","02f14871":"Mortality rate = (Number of Death Cases \/ Number of Confirmed Cases) x 100\n\nRecovery Rate= (Number of Recoverd Cases \/ Number of Confirmed Cases) x 100\n\nRecovery Rate was initially very high when the number of positive (Confirmed) cases were low and showed a drastic drop with increasing number of cases. Increasing Mortality rate and dropped Recovery Rate is worrying sign for India.\n\nIncreasing Mortality Rate and very slowly increasing Recovery Rate is conclusive evidence for increase in number of Closed Cases\n\nRecovery Rate is showing an upward trend which is a really good sign. Mortality Rate is showing a slight dips but with occasional upward trends.","fddf638b":"Curve is going upwards so rigrously, the only hope is with vaccination lets check vacination data","b09d31be":"## Vaccination detail ","2a819a40":"All Lockdowns seems to have shown a slight effect of the Growth Rate of Active Cases implying the COVID-19 controlling practices are working well.                       \n\nThe Growth rate of Active Cases has slowed down during each Lockdown.                              \n\nGrowth of Active Cases is showing a decreasing trend in Lockdown 3.0, probably because Lockdown 3.0 is much more lenient as compared to previous Lockdown versions","27ad3bf9":"Highest Population is of                    \nUttar Pradesh\t          29305008.0  so lets check its data for vaccination \n","e6106d1f":"## Lockdown Effect","2f90e88c":"On 24 March 2020, PM Narendra Modi announced a complete nationwide lockdown                                             \n\nNo lockdown= 2020-01-30 to 2020-03-24                \nlockdown 1= 2020-03-24 to 2020-07-15                    \nLockdown_2= 2020-07-15 to 2020-11-04              \nLockdown_3= 2020-11-04 to 2021-02-19                \nLockdown_4= 2021-02-19 to 2021-05-31                   \nUnlock_1= 2020-06-01 to 2020-06-30                       \nUnlock_2= 2020-07-01 to present                                       ","29d7aa1a":"Production of vaccine is increasing day by day also people are getting vaccinated, Hope curve of number of cases get flatten soon. \nBut for this people have to follow lockdown and take precaution as told by government.\n","28f1cf2a":"Maharastra at the top in number of cases                            \nSeeing the number of cases Rajasthan doing pretty well in recovery rate.                       \nKerala and AP shows low mortality rate                        ","b73c7aba":"ds: the datestamp of the forecasted value                      \nyhat: the forecasted value of our metric (in Statistics, yhat is a notation traditionally used to represent the predicted values of a value y)                                              \nyhat_lower: the lower bound of our forecasts                                 \nyhat_upper: the upper bound of our forecasts                            ","de553f17":"# Visualization","f1c18351":"# Covid-19 Analysis in India\n![Vaccine-770x433.webp](data:image\/webp;base64,UklGRrocAABXRUJQVlA4IK4cAACwDQGdASoCA7EBPu1ysVKpuLSrp1GJwxAdiWNu8ZRaUiEKQVdtuL83n+kRQ8TsF7s7ie0x+s456WoPg7ma2kEZecdPRMMoTHctmjPqKkklvOA5eGzhw+B0dyjUs9zNbSCM6O5RqWfaeB0bfXjd18cvFM4qvKpJdXEFus1MOKWNwd9n9JyOSXJiXlZW6qO7hF0XWuGyC7durL3ZfWScexxO20oQpzfaMVlvAQU\/9eZxTEz07mUAtKSFoQsc8XR9e7aOUmn6Su8m74dh1mo7lOu920pFVOFBAf5SlbuZrvffoRfmKIgFvi8pYsLs+MT9HgSyEvRvWKZwRfwOwEPK9rWt5xqCkHDqB86hTVm9915AaIqit8YwHDDtRwIkxQmM7RYBvLmd8J\/TmIFN0kCm6SBTdJAoXwAW0Y5Q4VfGEVvimLtGciOK38DvOjWPsLNSb+1OigaHlFxJVn+5c\/j8RIwDL0JxSlxERaDlW0HpqZ0Z8zSlxHqdznEaZy8E1ueujUcaO87wZCDzYcLJfQDouhrs5r08Xb0eiP1nMm5YlXkifMNGWXhyXSv8Ug3Ly2qZbwDJV2kJQP90hxvi4GhO9ZlRVs8X5mpRZF4bXPRZx2IkLtaDFu7+7ihdfLy7ajzEsfaJ7+5HoeUjYg0l1c5eVYZ5a5pvYBDj244VHHD0H+5RqRUWsK9xDyemN21HaXar6aNlgNDs1h9QJZw3IlvLHLCm\/UUCGxKrf85glgfVnzXOCBuXw3mZi+jUgjDQ3FovrNgmvPD\/DTCLgulmm7PEcFpOs+vcNZ+85NrUK49Ev+ea6uaxsFHHeUoLI4msIGpOU6bv2UalnrCaBP\/Mw8GskZjcJjzToTOcgLpU3p+eJdPFuggBcrhzIZN+CsQf9tIF08tB69OyDTlt3ONGmfMxaxFdOdrrq2dgVMqFg6NNVe0xQM6+nKO1bBzuIfNxVjKMnRlMCHSFYAOP91RtOHh\/qDIHtT+LM97slCqDrtmIUru7K8pau\/NLOwISrK7PcP\/2DXheO4ulOdlpZdUGXQn+j3lb7czjHy5XR9dBcNT80q4Fs8ehAesDqoDy71u\/mKjs2W6Q0cC8TYeRhOgbC+CFbyvpPUAcMkFyH0GyPEBH4PWyeDi3SQcKj2rq5RzUX0XphKP5wxgSfzn8aM\/FVBPABEKTG1KCkZHkoy+M0dqq+Z6TuaJXwly10R8wlh6\/krvePeul72XfmHGysJhCDjUs+Mw4U50ac8P0wOPsiEVX4aGACUh1sHnlf3lF2XXp2YxWIUgBhgMy000hxtrEB47g6M9NQaYWcrNJ5COplroWL0Winhk7GIT6zN\/SgjObzCcTWllvXbrmIPuehRUWnXOv41dGQ5UswN0R+gR+aZoYrt6ZeOmrEGal0Pjh+F+DEX7YR+tiY3GiqIwEh2nwcjZ9tQOAiyN2\/xlIYYxbVEbPlwxGaF3s\/Zyfkr8djlgJNd4MGUYqZ+PFhMWCJ2GCy8qd99pST1dXdYyHOpsm18+tjx5EsZms5gT3uc1ptVuGx3EeQZ7qH5qlPdDcKaoiphHl5NHhIbm913LwU+duMymU1Gs3UzvWlPDPSSgOebERz0lbOJbcY9lVwiCRxaqjRFG7ltlnG\/qRWiRh7q4IOzkUjQsucKotoyuBj9ba6rGcn+omfdtcC0zgqbBwxMc\/fyHerTQUa3MCS+JXU\/MwcgpmzHNj5GOWbZk1U2RcpwGxm1fxUvSbhTI0vEEbwKZ5G\/HzupVkCkyeDvDtENTh7tgRXKwFK6WU8zCkBmUqBxcW+cLff7NstxNA4I\/WE7lWx+f8Yx3zrR2FKNNDA40tYG1B4CiPONqH5hSJzKq+JUQ1oq0XTsSWjsksDZjx3HdoeHiQM7PPH7SNkZZQBp+QCsUwl4+8uE2XbiybJjttTnQavePXAyNkGPVT\/AsRIeTwIPZf9QQDfuFtiZ0Phyby9GXcg715s+UsxvYVrdEeyqOJpuEiY9Dvn0vjfQzRZQB+4RPBZr5XlI1yV5kGTny9HlaxkHp9BmkAAe79M8RHxjWc4gWX8dT7fIs1drBgK8q6bDeOLXh0kE5dNlRaJkL5gIa7MpaaXHPXAej879ybYXElm+nqFhrnkapMjFkvf1GTuBk8CSxsrKcFBfiQ14RFJ24NveI73ihDN4+kFdctbHeIWchkMr0OAkiK9JDl9cRLoGLOX\/gVTPRLPYPagQ5poWt3a3L2dgvlBhG21gCPgC0dPcukNaRixkE6UHbMdIAX0+TU7ORCItqn5xeGVFKsFgt0PomBaXJ7PJFLlj9W4mJ63nVs6AC\/UEsVRf31AulEEF8ylA3KfZfKJsOWrZYtPyia3QFXuSS2AAPeYXKbG+USI7oNL\/6o\/TONWLymCWqEQEM47kGlwTuUXtMME0WJpOMo4E5iSHBiMU5LqF5FAhLuwD9tp51GHBx\/Zk8vO17ld753Sn9J\/UUCZP3vXznQrMOb7CszTj5Jwn\/hZb2EE8Gde0cKVwJ\/XQXHaJtxpvSP7RUmEdtsaBQeo38Zi9M46pcsNwaN89z\/iu\/ynOqxSkyjZ47jSDQGaUcyTH0E8EVjACptPmLQ2Y7zExnSPIxHqKK3xLGPOpzpETUED\/h7rXkkXzYyvNeARzaSJK3SfpBLNGfCArKN6lfAvW6Vm4DgcZGsts3MPc7tprIEQx+BgiwI2OBojVIY8o6xdzUspf01tgw2IyhGKH5fnWl2lbcmmYApAH8l4pysW7D\/pM0bzknDGeuMBifFwPLT1tPDOb5vpN+lllVXpprEViPuXVa8zLNTeN9nCPKU0DUK1MQvhVqjC8J73Kj6O\/9xhP+S4Ygo1yf1x2\/tEW77GbWpFSGlGuuvku62i+qGObNtMgnKd\/pY7yLbkT8sRCjB3AAA\/ufof\/8o3\/rp\/ua4C\/9mPYD38xUvtItTQcXiZVRzNKLfy6uL6hGaq9xwOvL8a\/\/td+cexqMN6tM73bxW4ai2+vvRcj67SvSlTQqaKJnKoBxJTgLS9a2A0e++ET+4VpnqxDXG9itCVxYq3MY+g6h\/TeGapBv6qyAYVProSngdm\/EFfeQFcFFvcx90p8jQ+va0nuNyopsFLFNTevhg3HUnfNS09fUns5\/TWqTCWx3xwOUAQ9fEmEUKu\/5UJwGG0dyJIO1+UQMIGVTCMYqhSBang2zWITYhASa7+nIy8sjlQ9s7nOf\/4hwAAAAAAcHKbCqgAIzCC93394DDgtyowxDO5E3uTbaIwAa2JGVSa6n3vC3IQVOnZJkQwsRPXN8W4fEoAS\/oJ6DAPmzwwgB9Zd+h6f0+TtXUwQAADVt74c8LzTcAPD6+Jq6X3QHJqyYtfBLoj+CEuHh098CkYmvRQVJrVyKNb+pHwc+xP7tXRsvY8XJUWqlN+HaUzEnEY0jR6SDnxe\/cNgj5a33a1XzlX1hej+Fq7TbQAAEAAKXgADuzrAarwgbt72Dxz7tsdBgtEcIJlpON9M43ZDHZ5J\/5J3GbRr\/vZo3L2LHt5kSBUWpd53NzuVI42ql6S\/QPV0sxTTa9A8xWotd\/\/AdGf3aE6TfNCh7rSybAVJBX+lSQSnnxpBFaoCCYYO6pp\/bU\/+Rtr18xQGKa2ftUd16WPgXDyh2HiDBWA+\/0oi7mpVvr1JoMSC5ILy1oz8QFkXFldUYw3NM1J9aR0+jyncxywkMp\/pvs59gkSkaf87sIgW1CV1Q7jpFase\/aWoLkwwfYpgWL7hYTpgK1xqRaoEXkbQX4Rl\/2OwkLBvIB3tgYDgj0EUhCIJrC\/cyP7RZYeSKuwJY0K1dwEHdvmjIXQc5\/J2emh2C1bp3xjpLm3oGtmLgJ3DZO\/0IHW+kYOJTKEKDBZvOPa2qFPr6NzBFS\/GVBjG2nA6cuEEBLUz9Oy+geYFXgWppDtj\/C0r7bsp3ec7OjH8kyVhR0ZKRo8pg\/lQW22FHT5hJvMNKVUjroJ0e99ypZzaFjBd0L8e\/YmiGAe5OieEoTZoug1y\/PG1IYkmvYSQEr+IAClZmAfb6Dq1wNxHe26b1FXhZvW2LENOSu+7UNGTQeXzG4MAAQD\/ha+c3nMaBqW2yOc\/vF0aQsSrFdMdxRDRJkPZ9uoquaECPk43lXyjtDgYrclVIXLRiRkPZkKaScTACm8hkcROzvqE1QAABBnDs1hM9Cs6OWT80kvakOyVI0UOoCzjGQBsMFAT32C\/zyDRcyWU8uinQchP31vWKUueZhaC1qXNC6omGfCMcamQ4x4IL0CqdGjBlFOuzs4GF1u9sR\/Q6iM\/0EkfEm6I7MDcSTkT8p+CRw9Oxo6qyjesLa1d3wvQMR3opVNAw\/DgAAzwVJgColhMHaul7TpNyzvc7sI6\/kRpS3uLYeEXKkAYCEtMtcsB75ubQwVPfj9sDV7sa\/Km66mc8GhjLk+ucQMC\/pnAM9+pkaonLbPVY3pqFbFaonvSqll\/TE\/IS3wWmSUCLkwKOlLafHCUwMHyBKCWStmTcEbElTmOmxWBpmHWvXgbkAj7FZS1VtA3P0zknjgImCTkQD9KpgWwPQuDGzF0\/m960HfdH0tEXE6bTiC19JNy9WT54fJGGMb0732PLh2lAb7j\/8r6M1NxYqCPcgiz9KCjzNmmZCUjR2QVIrxgIhQXZ0eBjk18fSjqRoCoQBXeU+HBjH5pHeR93MnEF2jfxou7eyyorQehAtqSxRdtDyEIXOkMdz3bfalOQWNbv+VmSk4gihGIyb1s71FlM5iWXwOX7y+yrEHkqJljtNYFz0jbTMebAXnXNK+zVBM0fiy60m1APAUFAYz7Yi7CBAQAA\/g7KbcBQAJZ\/7Hths4f0U0z2FEtrgRnnNKrBidbw7du\/p0a4hheRmTY8WTZAVp6jcVcbn4Uw+hlRcBh8kc5QSqgIfJFDu+AdTHRev70E5vLT6DmwvU16ddwS\/3ixvWxJjm3nwG46Jh3EWxJyE2G\/yDzDziLDWoLaIKZVJhcYqEvMpTFAeF9ogAAADlD357dTAl0JqHEfG\/uULU9AZ+2Ljt8oLK0XqKBCaXYiYCU1oVXAdCcCN\/ji3kB31aNHxc+JViVky0qLYDhpCj8wS4WbhkR5dqrM35ah5lNSzRnVGafBxTUUwzCK6mvhGuH16GLFgMq1AIicASYw5E5YUO4L2brbdgWQgB3WuxCg+kXhLmXt6HlPKuRFk6ZFjUfmXHE9+yjIG1AuQ7MQjZr\/T8kRlIPLaP5A76kvrQsCfntl4iQg9VqA8CsAnigCpYcjwAivJgUCD1bvjy4yxjZrOARl4GbLw+2x6CL9n8kyGhoFgNdIwTHStKNr8hgzTlgTaaQJl5qBCfgV5q9DPJJYUaXgbbbvU6O1774nYe\/xLg9cwvR0DDOzHHhyaLqIGmsFFYxCFGjnYG5eWJiLq0o5btQ67W6wnaueVx15YUo5rTyc+K2Cy5d0erSnMwRP61jbRRRzlgTVu4kZUtaoIKut4hLdcPTE7ZDx6L3I50Z3K1Sigt5zzPKpxwGZJT2Oc7YzaZW2wDi0MppjaDfbHBMrNn4IjIxisj\/TYlPlLwKigiTk7YuboZ\/oMVILTLYzpmZbq30gKm+VQdliCE1hVtPTozbbJkDmOod0E9Bmc+Tu2EUk5Dwo\/BTBlQMGFhGX34OBGY66HGqjMNck3V\/z38RbMZ97x5faUhTLptetAN60H8MvSuFF\/tONDmJc57d3PLiCBFcBq8H4LnFH3ZAbgwr7Id3QQ6Xy8kfDsnqKGYABNh+1jIOLyRKAaH8\/5D0GXMzH8d9hdwI8eDGHhTPkrtS+IpVPHUenGjCPDjfiUMbZC645qhG09Rk4Yf3MyOhdCf4onYABV1UyacIcI50fsRkCY\/Z4Eg25PwwLCvS3W6oBqB+3cpjSjet1TIGuU5xUoea1a6Lscf1NtdZ7dY+r4PoEVrE46cyt9f37v2NtCS+Poeo2d2i7Mba3PjgeXd4+xfPwnV5RMVALqghfbaRh+ElFL0uDy6VKpu3Hou8MKbw7zKpvpPESJX8lAG7tsM26LGQBPYx7jfmiRw5Ntkc7fCOsVt881HXcReAXpBJDIDphzGMS6I0OngbqonwjsfdEQ6tgplyNqKJj3ONpZ4FyKxgjsR7zG+DKDf7kHxq\/HzO5cJhmeSnYvBRBApYWLCxgrIiNUJZ2x\/EktnnsE1373LqYGor1JZeIx3ggQjES+texwYKKf8yW+C+KQnMm5MQ21ALFmStmTBetUzZUoBKRs\/tJbEQngdPzZzKdFjcr0bGWps82it5oAI3vwYuZTxLuNtxZPSVMmp7YyOcuMil5YRKmyyb0Sy3AzCzk14isMd1hAffJBFn2mnBbpqFNJiCmu7QOHfF2xiIo2kwQGaSsMxGEtONLi7pfDCXYN9y\/yR+pA23l5KgUcU50CuRuq0w\/TDf1t+UksskROPccFAH5JwktwDXR20Mo3djR2uuFhdJtILR7eJUYnBJXU5vd66V+ORszx4dLx19ZT\/ugspfDZ+\/oDGIeIF7R2y5Wu1NLpJcNY0k\/hK1yfW5Op69qvYUrnN59TFbuB3F2DF9LnS2ghZV5ZhILLw8hepXl1oILCmEPLgT3RWSWG\/+Mh9mfxPrPdB9I5HsUzAanzGAerZHJFpBZp9zu9IpDryxCJi+OWb8PxGv\/egAYu3CtY6OyamaLTRk8DsPIzJzSBzIJO\/FaGj3xKaHyfw98i1MaRSjhQ88RlNvYVlvNukfjr5trAYvy+HKqBg2kGjB8+PZ7dJs3+1mUV4eyXs+uRTpazOoErmANpwi9hwpFlpYlaz1tq9bowViv5ZsotE+af2AaSVFEbBbRVkDspDoLd6YPRJPByYw54epb0JdZ0S7gJqwKToTXfNZSkckTg\/Y2xJXBgTXUwXjEnVfA7ULyg+J17u6NUmJBxiryahX4er3rnbNvfspdoqaNJtgojkfrhqdusiFxn2yWr0QiYlOR399O4XseyiFDhzJCqAuFEpxJLV18nYJYTJois\/L5fqAgI43hIn+LFDi4TdN7Jm0Q5S3Xnmvx3mH6mSAYqXgJArw2ndaSlEnOqkyt5oNkyO3MR+0qsSCUdqR61EHWrm7DeRELNxgL39JWzOsxD0ZBOftjSJxaewqzdBnFxvmCxWTA\/lYHH3uR5CjtGSFJPBO3CTtUx61g\/0hijqQgeBRwgFpML27XOKLu5x5UNnwbfA1OzPQfyU2tCChGZDyUPS7e3BbRBl1Kre\/Qw1QF5Ob\/inoWdhWWH9NyoxS3wSDg3V5HldGyfJCW9OhomSATn5sh3mUUZEDuFN5zciBnT+ddIIDuodDHAIrTTnPoqvmtBcv2WEeh16OV\/IoCMBw9xnygN+Ck3Zph5QAw\/1+JYi+ZEZhrTCG\/gu6KsjkkpyBF09pnOUnYkfZGjovij9vvVgGO+o+hWdsuVGi5BMDQ9p3Suea9JQMAaQp0AZW\/peVg0D3ZOfZngRfsbQS+GJbK7PYw29bZq\/kWHWGAdYcnfk79ge1wnB\/Mg3gkg9NEqa9wu9xZe2qoldebPLCCSmFu\/wgSoRD5OX1Xyb3El4hYizS9zqY+XDFz4Qzr\/yGslZ8Pw\/D+5wGep9xipdpUyuZp3TdrXPw9wZCzjt3QPtHuj+cCHYtgA5jsNhZvNkefk6wZK2nC5cQu7MH1K6j7ebKw903xa\/4Ui8DdwLp67niQb+qiKRnreTNwLf6oRwRm2\/ZebQgwV5Yvz4fhse1zRiBFfBA3DVSCpVBgmP761NzAQPkx\/VBPqCJGI0A+\/5Ax+kem+m+Fw2+2PT1GABLHS3OxmHiqMNbrMwGVemCht8Mio+WBpt5NvEitQUdB5pNeNAUva+jFVzD4CkCiNhErJD4vZ9HhUHbTeNFuAIpbQGr+sfliq4aMoGLNWohwjshtoptmnSJV8nUD6+HP2oxw3Quh2TnFaJilLg8mwyWIa2nFALeol0V855hs0GFZzbOKVzlcn5SdeVmxWR20Awoqh06eDhSkG+SrDFRBDNA6vlaz15n\/nwKvIJvT3cTkTc874Ey\/KdMVVLHeFa69CkT3EPqVB4JT00GZ4ZZS721UeqZaqaUgeUruMw0bZ9maoPUjYV7C1qNX2SSXTNRe95AZurOm+b+5r9xEA4bNceK8\/jiB1FMXAzy59bJeI6Jx2nRkUzbqdY0uTaE1iRN\/LAHnGjFgbD\/DjRTCKNSSBit58TrTQtL5Xiur5kCyChArxKg+PqEd7vWZXZvV69\/MO8dbFGXUKaykyEtYgMSDVSL+Gg+I8XTBxDryT25ADYM46m9YnSCNqDOrn\/JxT6tPe0fmV+WuaM8g0b75yrnOJUGRxeb97ZE6lWhk1Xq1ZaTU7c\/82dKRmkHAPYH32JSA+W0jB4ZR38lfQSmC+Y3EeKUa7T8hZiBSTPKoFcLZnwR7HMYCVAyRLG0lPez9aM6oel0acn\/mNcn9ChCuN2JaBxGpjho+PnyUhgEfGm8Xh2s6IsQGv7mfLchWn78DY1ub\/b1YhNxYuZBWOyuiw9L5SbmSDYoRQ7lvQy1nLVTZ9LliEHAUxGYTbe7VzW8J+a04hgwxvPoSkidrRjY8H4A\/bjkDJzrcflxD51SFZh6tzTIUzfL+AdnTnYOJL0Eo5waYhJzlMSbW0WVuTBVeCdPvAnEj56yMWMuObYOPXRAijGJiZlMyFpk3bqEFTfC\/7wVLUteZ2BHHf2GDmEJm32SO9H7yBbWH0NvLjxQrxdxZwIHa95OKABpyxrOUCGXgwGALP1+oYRUM1mly95nlFXFgBH0u912mDuK\/X3nlVfI8FsP+8EQOctmh\/IgTqD8AW6esdxCXhWQEYt+GXrHSvVsP+g3gDL2PbZBBgnqcnxR3FDtxQ\/S7htLR+ELUU5h3LJs3LtF00FBTyUoVAOIXQqtRndjBqbOksltLE2CGkdedrr\/k9Xd4RQmfPZl35leY1u1iRTM7sg9kgamlGaFWXhx3Hk9nSMXg36DjsJJlAoHID3kx8SVxm2AdOmet55bVT8OIJjDKUrjVR3nOuzrdGRhmyjfdJzQGB6cdMl2ZL5TPYbcAgoht9leFPSdwjAayLbtaX+ghQbr4GZ0X0BSMl+b2yqnCYHyXvC3wlVMtjIGsRW2hD2oGXwEazLeL2nlC4fnFkzDkUqymYwOmBvoLdVBE9pCF67y7baa5O7KxLVfHTJCRonVk5xe\/3Jrx9Zi8r0jL7NIo9rmZBR4dzcVnkG4Mh3j3aIEVnCaQ4tsP94LU6\/MRscY5iYxQs5CIoSIh8LVMPP5ER4gxTJGG24PyOLxILgO9zkhsQuR0KQZolo2Soowlm3OxV+2b+Q+sWxeGOD7utYU4jnuVYSV9LMKrbUeNLyhmZ2gWhmjqRbd3eBK7rfvrY7kRPyEQwLsxTE378P0TY3sXpzEeFsDZSxhf7AIucx4LLL2rq\/yqdBDWx2BZPH2yFlbfLmhMMJQ8xB6HqnW1rybverjbihTIJcngR7TlR6cqJu0poqZuLaPq0bFe6arrH8iDuw4Nb3FDeJn4c55q0g\/euLizl9yE3olx2B8mPXRFToQv0\/\/M5+RxKnmENUGEc4ui0WB6ZUy\/4sXi31gtGFZSWL8ID2vb5unKqnF1TrLCsMYVpjiXqf61n9UKxHshJ0VMn9ck5Z3yyuiOTmYyMRVzlIgvS3aklDZOI2DLBGmZRLMRBmjtlhQZm10nqd7q5Y8PfRviaQ+p+dE9i+NDDdkE8FfxTuYJdVW73ih27fAX29nVx6zn4q1T1zuBxwDOFPp+G\/cqDh1O7Fy6bX7GoX+hLu6T\/0o6m6UDm+r9\/oNo\/WdqRGu9lg+EkfIKB0jQIk9\/KHfxe1DiTZajnfRAA)\n","b75e5769":"Here is the visuals on India Map ","bf456c13":"##  Prediction\nFitting data into a Logistic Curve\/Sigmoid equation: y=(L1\/1+e\u2212k(x\u2212x0))+1       ","23ef1b35":"Tripura has highest positive rate of COVID followed by Dadra and Nagar (although population is so less ) , Kerala , Maharastra then Jharkhand.","3ac1ecbb":"### SARIMAX MODEL","6242be22":" Number of Covid 19 cases  are increasing day by day and trend shows that yet it's peak has not reached as per data - only vaccine and lockdown are feasible approach to tackle this situation. ","d46e912d":"# Data loading","511160bf":"Number of cases are getting high as time passes it's bad sign \nalthough people are getting cured too, with good rate."}}