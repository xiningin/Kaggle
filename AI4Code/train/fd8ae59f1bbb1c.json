{"cell_type":{"ce403dee":"code","397b1211":"code","2017b474":"code","ad5cebca":"code","f47bd1e3":"code","9bc55eed":"code","ef46bd2e":"code","feae24fa":"code","fb9c1fa7":"code","65ffd0bb":"code","31813e07":"code","116add8b":"code","db18341e":"code","68980145":"code","48323979":"code","722957a1":"code","a4877f86":"code","69314974":"code","9a0b735e":"code","133803df":"code","0d6ac7d7":"code","b084bb24":"code","adc0d907":"code","3871f38b":"code","07327e8a":"code","735b2c98":"code","71fe5b11":"code","fd7bc5e4":"code","fe6fb0cf":"code","95bf5674":"code","b36af987":"code","b6155801":"code","d95afb38":"code","b0985b75":"code","44877b89":"code","6d121a2b":"code","802bdabf":"markdown","78c1d374":"markdown","40581457":"markdown","50e0bf3e":"markdown","2cb90bf0":"markdown","66a96729":"markdown","9eccc6d5":"markdown","43460fa3":"markdown","014eafd7":"markdown","c7337d32":"markdown","911337bb":"markdown","afbdb4df":"markdown","baab4bfd":"markdown","963e974f":"markdown","2c990da5":"markdown","23510142":"markdown","05e9cb19":"markdown","3c45ef7d":"markdown","73ebbb65":"markdown","8a2af70d":"markdown","a0568db1":"markdown","51ef71f7":"markdown","890b56d4":"markdown","2fc77955":"markdown","c647596d":"markdown","90175252":"markdown","06686c86":"markdown","1a792e1d":"markdown"},"source":{"ce403dee":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings","397b1211":"warnings.filterwarnings(\"ignore\")","2017b474":"dataset = pd.read_csv(\"..\/input\/social-network-ads\/Social_Network_Ads.csv\")","ad5cebca":"dataset.head(10).style.set_properties(**{'background-color': 'black',                                                   \n                                    'color': 'gold',                       \n                                    'border-color': 'white'})","f47bd1e3":"dataset.describe().style.set_properties(**{'background-color': 'black',                                                   \n                                    'color': 'gold',                       \n                                    'border-color': 'white'})","9bc55eed":"dataset.info()","ef46bd2e":"sns.set_style(\"dark\")\nsns.displot(dataset.iloc[:, 0].values, kde=True)\nplt.title(\"Probability Distribution Function of Age\")\nplt.show()","feae24fa":"sns.set_style(\"dark\")\nsns.displot(dataset.iloc[:, 1].values, kde=True)\nplt.title(\"Probability Distribution Function of Salary\")\nplt.show()","fb9c1fa7":"sns.set_style(\"dark\")\nsns.boxplot(x = dataset.iloc[:, 0].values)\nplt.title(\"Box Plot visualization of Age\")\nplt.show()","65ffd0bb":"sns.set_style(\"dark\")\nsns.boxplot(x = dataset.iloc[:, 1].values)\nplt.title(\"Box Plot visualization of Salary\")\nplt.show()","31813e07":"sns.set_style(\"dark\")\nsns.histplot(x = dataset.iloc[:, 0].values)\nplt.title(\"Histogram visualization of Age\")\nplt.show()","116add8b":"sns.set_style(\"dark\")\nsns.histplot(x = dataset.iloc[:, 1].values)\nplt.title(\"Histogram visualization of Salary\")\nplt.show()","db18341e":"sns.set_style(\"dark\")\nsns.histplot(x = dataset.iloc[:, 2].values)\nplt.title(\"Histogram visualization of Purchsed feature\")\nplt.xticks([0, 1])\nplt.show()","68980145":"plt.pie(dataset.loc[:, dataset.columns[-1]].value_counts(), startangle=90, wedgeprops={'edgecolor': 'black'}, shadow=True)\nplt.legend(dataset.loc[:, dataset.columns[-1]].unique())\nplt.title(\"Pie visualization of Purchased feature\")\nplt.show()","48323979":"sns.set_style(\"dark\")\nsns.jointplot(x = dataset.iloc[:, 0].values, y = dataset.iloc[:, 1].values ,kind=\"hex\")\nplt.title(\"Hexbin visualization of Numerical features\")\nplt.show()","722957a1":"sns.set_style(\"dark\")\nsns.jointplot(x = dataset.iloc[:, 0].values, y = dataset.iloc[:, 1].values ,kind=\"reg\")\nplt.title(\"Hexbin visualization of Numerical features\")\nplt.show()","a4877f86":"sns.set_style(\"dark\")\nsns.pairplot(dataset.iloc[:, [0, 1]])\nplt.show()","69314974":"dataset.isna().any()","9a0b735e":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(dataset.iloc[:, :-1].values, dataset.iloc[:, -1].values, test_size = 0.2, random_state = 42)","133803df":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","0d6ac7d7":"from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score","b084bb24":"models_precisions = []\nmodels_recalls = []\nmodels_accuracy = []\nmodels_f1 = []","adc0d907":"def train_predict_and_show_results(model, epochs = None, batch_size = None):\n    print(\"Training the model\")\n    if epochs != None and batch_size != None:\n        model.fit(X_train, Y_train, epochs = epochs, batch_size = batch_size)\n    else:\n        model.fit(X_train,Y_train)\n    print(\"Training completed\")\n    if epochs != None and batch_size != None:\n        Y_pred = model.predict_classes(X_test)\n    else:\n        Y_pred = model.predict(X_test)\n    precision = round(precision_score(Y_test, Y_pred, zero_division=1), 2)\n    recall = round(recall_score(Y_test, Y_pred), 2)\n    accuracy = round(accuracy_score(Y_test, Y_pred), 2)\n    f1 = round(f1_score(Y_test, Y_pred), 2)\n    print(f\"Precision : {precision} \\nRecall : {recall} \\nAccuracy : {accuracy} \\nF1 Score : {f1}\")\n    models_precisions.append(precision)\n    models_recalls.append(recall)\n    models_accuracy.append(accuracy)\n    models_f1.append(f1)","3871f38b":"from sklearn.linear_model import LogisticRegression\nlog_reg = LogisticRegression()\ntrain_predict_and_show_results(log_reg)","07327e8a":"from sklearn.svm import LinearSVC\nlin_svc = LinearSVC(max_iter=20000)\ntrain_predict_and_show_results(lin_svc)","735b2c98":"from sklearn.svm import SVC\nsvc = SVC(kernel=\"rbf\")\ntrain_predict_and_show_results(svc)","71fe5b11":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\ntrain_predict_and_show_results(knn)","fd7bc5e4":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\ntrain_predict_and_show_results(nb)","fe6fb0cf":"from sklearn.tree import DecisionTreeClassifier\ndec_tree = DecisionTreeClassifier()\ntrain_predict_and_show_results(dec_tree)","95bf5674":"from sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier()\ntrain_predict_and_show_results(forest)","b36af987":"import keras\nmodel = keras.models.Sequential()\nmodel.add(keras.layers.InputLayer(input_shape=(2,)))\nmodel.add(keras.layers.BatchNormalization())\nmodel.add(keras.layers.Dense(128, activation=\"relu\"))\nmodel.add(keras.layers.Dropout(0.2))\nmodel.add(keras.layers.Dense(1, activation=\"sigmoid\"))","b6155801":"model.summary()","d95afb38":"model.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=\"accuracy\")","b0985b75":"train_predict_and_show_results(model, epochs=10, batch_size = 32)","44877b89":"results_df = pd.DataFrame(list(zip([\"Logistic Regression\", \"Linear SVM\", \"Kernel SVM\", \"KNN Classifier\", \"Naive Bayes Classifier\", \"Decision Tree Classifier\", \"Random Forest Classifier\", \"Neural Network\"], models_precisions, models_recalls, models_accuracy, models_f1)))\nresults_df.columns = [\"Model Type\" ,\"Precision\", \"Recall\", \"Accuracy\", \"F1 Score\"]","6d121a2b":"results_df.style.set_properties(**{'background-color': 'black',                                                   \n                                    'color': 'gold',                       \n                                    'border-color': 'white'})","802bdabf":"## Linear SVM","78c1d374":"## Categorical Features (Bivariate Analysis)","40581457":"> **The following distribution is also a gaussian distribution with maximum density at salary of 8000**","50e0bf3e":"## Random Forest Classifier","2cb90bf0":"## Decision Tree Classifier","66a96729":"# EDA","9eccc6d5":"## Kernel SVM","43460fa3":"## KNN Classification","014eafd7":"> **The following plot is a gaussian distribution with maximum value of age of 40**","c7337d32":"# Results","911337bb":"### Pair Plot","afbdb4df":"## Naive Bayes Classifier","baab4bfd":"> **Dataset mostly users are within salaries less than 90 thousand**","963e974f":"### Histograms","2c990da5":"### BoxPlots","23510142":"> **Presence of no outliners in Age feaure**","05e9cb19":"### Pie Plot","3c45ef7d":"## Logistic Regression","73ebbb65":"## Neural Network","8a2af70d":"> **Count of not purchased is almost double as that of purchased**","a0568db1":"### Joint Plot","51ef71f7":"### PDF Plots","890b56d4":"# Models","2fc77955":"## Numerical Features (Univariate Analysis)","c647596d":"### Histograms","90175252":"> **Maximum count is of age between 35 to 45 in the following dataset**","06686c86":"## Numerical Features (Bivariate Analysis)","1a792e1d":"> **Presence of no outliners in Salary feature**"}}