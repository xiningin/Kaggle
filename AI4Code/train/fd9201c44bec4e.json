{"cell_type":{"40511127":"code","6d148bd9":"code","a5b4ac2f":"code","c33a0bfe":"code","006a52b7":"code","8ba80003":"code","2d5c898e":"code","96c19e42":"code","29cb948d":"code","b3109e82":"code","3254a321":"code","ea4bb410":"code","2c5620cf":"code","c690d025":"code","09063c6f":"code","52cfe8c9":"code","08e16eff":"code","1bbd4883":"code","ffc228dc":"code","2353be73":"code","011fedea":"code","b9f08df5":"code","914ef12f":"code","9076f637":"code","975630d6":"code","e8fa8efa":"code","0edb0c12":"code","4541a5c4":"code","ea158700":"code","ac797e4f":"code","3e801c18":"code","573855b0":"code","da4941f5":"code","fdf120b5":"code","040a8725":"code","256329dd":"code","3f33fec0":"code","827f33aa":"code","8f78b53c":"markdown","2787bfdf":"markdown","857517ba":"markdown"},"source":{"40511127":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data manipulation\nimport numpy as np\nimport pandas as pd\n\n# data visualisation\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\nfrom sklearn import metrics\n\n# sets matplotlib to inline\n%matplotlib inline  \n\n# importing LogisticRegression for Test and Train\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n","6d148bd9":"df = pd.read_csv(\"..\/input\/HR-Employee-Attrition.csv\")","a5b4ac2f":"df.head()","c33a0bfe":"df.shape","006a52b7":"df.columns","8ba80003":"df['Attrition'] = df['Attrition'].map(lambda x: 1 if x== 'Yes' else 0)","2d5c898e":"df.head()","96c19e42":"df.dtypes","29cb948d":"df.isnull().any()","b3109e82":"df.corr()","3254a321":"def plot_factorplot(attr,labels=None):\n    sns.catplot(data=df,kind='count',height=5,aspect=1.5,x=attr)","ea4bb410":"cat_df=df.select_dtypes(include='object')\n\nfor i in cat_df:\n    plt.figure(figsize=(15, 15))\n    plot_factorplot(i)   ","2c5620cf":"df.corr()","c690d025":"df.drop(labels=['EmployeeCount','EmployeeNumber','StockOptionLevel','StandardHours'],axis=1,inplace=True)\ndf.head()","09063c6f":"df.corr()","52cfe8c9":"df.cov()","08e16eff":"#cat_col = df.select_dtypes(exclude=np.number).columns\ncat_col = df.select_dtypes(exclude=np.number)\ncat_col","1bbd4883":"for i in cat_col:\n    print(df[i].value_counts())","ffc228dc":"numerical_col = df.select_dtypes(include=np.number)\nnumerical_col","2353be73":"for i in numerical_col:\n    print(i)","011fedea":"df.BusinessTravel.value_counts()","b9f08df5":"df.columns.shape","914ef12f":"one_hot_categorical_variables = pd.get_dummies(cat_col)","9076f637":"one_hot_categorical_variables.head()","975630d6":"df = pd.concat([numerical_col,one_hot_categorical_variables],sort=False,axis=1)\ndf.head()","e8fa8efa":"x = df.drop(columns='Attrition')","0edb0c12":"y = df['Attrition']","4541a5c4":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=12)\nlogreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ntrain_Pred = logreg.predict(x_train)","ea158700":"metrics.confusion_matrix(y_train,train_Pred)","ac797e4f":"metrics.accuracy_score(y_train,train_Pred)","3e801c18":"test_Pred = logreg.predict(x_test)","573855b0":"metrics.confusion_matrix(y_test,test_Pred)","da4941f5":"metrics.accuracy_score(y_test,test_Pred)","fdf120b5":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, test_Pred))","040a8725":"from sklearn.preprocessing import Imputer\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score","256329dd":"df.head()","3f33fec0":"train_y = y_train.ravel()","827f33aa":"for K in range(25):\n    K_value = K+1\n    neigh = KNeighborsClassifier(n_neighbors = K_value, weights='uniform', algorithm='auto')\n    neigh.fit(x_train, y_train) \n    predict_y = neigh.predict(x_test)\n    print (\"Accuracy is \", accuracy_score(y_test,predict_y)*100,\"% for K-Value:\",K_value)","8f78b53c":"Now lets set the target variable and remove from the actual DataFrame","2787bfdf":"#finding value_counts on all categorical variable","857517ba":"**ENCODING**"}}