{"cell_type":{"cdb5f662":"code","e03f9cd0":"code","bef073f9":"code","1337852f":"code","beff3adc":"code","039f8451":"code","c05f082d":"code","021456b4":"code","22695510":"code","5fa35143":"code","04d36da7":"code","13dcd37f":"code","47b38d4c":"code","0a83c9b7":"code","a3a9aa23":"code","172c3f24":"code","a610f67d":"code","6e6a6bc3":"code","680e1ca9":"code","37cd98d1":"code","bf1053fd":"code","1c318073":"code","1d4156c6":"code","45c1a8ee":"code","ce1e25a7":"code","6f20065e":"code","7f7616a8":"code","a09c27d4":"code","9d19512c":"code","ad1de194":"code","7d3d0f64":"code","0ee65077":"code","6cd6bf06":"code","12ca0572":"code","1048e111":"code","6658612f":"code","0d2cd223":"code","fb89902a":"code","98bfcb5d":"code","63672dd7":"code","437065b1":"code","b4331690":"code","06afb075":"code","f69257ee":"code","1e90f886":"code","432a7f09":"code","58950d4a":"code","3520c935":"code","023d112d":"code","1ee5b162":"code","569991f3":"code","f2019c98":"markdown","e2c1bfff":"markdown","d1da2abe":"markdown","6acf604d":"markdown","c13f9329":"markdown","529c601a":"markdown","ffb6c003":"markdown","237727ce":"markdown","9839f9ec":"markdown","32598056":"markdown","cf2a884f":"markdown","16bda8e0":"markdown","59ffe1a2":"markdown","131a648b":"markdown","dbdae156":"markdown","0cfc4cd0":"markdown","b33fc7d6":"markdown","ef629d6e":"markdown","d02e662b":"markdown","fb2d8670":"markdown","5f1479a9":"markdown","b16f6555":"markdown","a1c429fe":"markdown","5819464e":"markdown","403ab9a5":"markdown","20025193":"markdown"},"source":{"cdb5f662":"# 1. \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nimport numpy as np\nimport pandas as pd\nimport random\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# 2. \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438 \u043f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nfrom sklearn.model_selection import train_test_split, cross_val_score, KFold, GridSearchCV\n\n# 3. \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \nfrom sklearn.preprocessing import StandardScaler\n\n# 4. \u041c\u043e\u0434\u0435\u043b\u0438 \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom catboost import CatBoostRegressor\nfrom lightgbm import LGBMRegressor\n\n# 5. \u041c\u0435\u0442\u0440\u0438\u043a\u0438 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\nfrom sklearn.metrics import r2_score as r2\n\n\nimport datetime\nimport gc # \u0441\u0431\u043e\u0440\u0449\u0438\u043a \u043c\u0443\u0441\u043e\u0440\u0430\n","e03f9cd0":"import warnings\nwarnings.filterwarnings('ignore')\nmatplotlib.rcParams.update({'font.size': 14})","bef073f9":"# \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043a\u043e\u0440 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 r2\ndef evaluate_preds(train_true_values, train_pred_values, test_true_values, test_pred_values):\n    print(\"Train R2:\\t\" + str(round(r2(train_true_values, train_pred_values), 3)))\n    print(\"Test R2:\\t\" + str(round(r2(test_true_values, test_pred_values), 3)))\n    \n    plt.figure(figsize=(18,10))\n    \n    plt.subplot(121)\n    sns.scatterplot(x=train_pred_values, y=train_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Train sample prediction')\n    \n    plt.subplot(122)\n    sns.scatterplot(x=test_pred_values, y=test_true_values)\n    plt.xlabel('Predicted values')\n    plt.ylabel('True values')\n    plt.title('Test sample prediction')\n\n    plt.show()","1337852f":"TRAIN_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/train.csv'\nTEST_DATASET_PATH = '..\/input\/real-estate-price-prediction-moscow\/test.csv'","beff3adc":"# \u041f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c train data \u0432 df_train \u0438 test data \u0432 X_test\ndf_train = pd.read_csv(TRAIN_DATASET_PATH)\nX_test = pd.read_csv(TEST_DATASET_PATH)\n\n\n\n# \u0414\u043b\u044f df_train \u0438 X_test \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 'Id'\ndf_train.set_index('Id', inplace=True)\nX_test.set_index('Id', inplace=True)\n\n# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\nprint('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0440\u0435\u0439\u043d\u0435:', df_train.shape[0])\nprint('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0435\u0441\u0442\u0435', X_test.shape[0])\n\n# \u0423\u0434\u0430\u043b\u044f\u0435\u043c df_train \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u043b \u043c\u0435\u0441\u0442\u043e\n","039f8451":"df_train.head()","c05f082d":"df_train.dtypes","021456b4":"df_train['DistrictId'] =df_train['DistrictId'].astype(str)\nX_test['DistrictId'] = X_test['DistrictId'].astype(str)","22695510":"plt.figure(figsize = (15,10))\n\nsns.set(font_scale=1.4)\n\ncorr_matrix = df_train.corr()\ncorr_matrix = np.round(corr_matrix, 2)\ncorr_matrix[np.abs(corr_matrix) < 0.3] = 0\n\nsns.heatmap(corr_matrix, annot=True, linewidths=.5, cmap='coolwarm')\n\nplt.title('Correlation matrix')\nplt.show()","5fa35143":"# \u0414\u0435\u043b\u044e \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \nnum_features = list(df_train.select_dtypes(exclude='object').columns)\ncat_features = list(df_train.select_dtypes(include='object').columns)\n\n# \u0421\u043e\u0437\u0434\u0430\u044e \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e \u043a\u043e\u043b. \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c \ndf_train[num_features].hist( figsize=(16,16), bins=10)\n\nplt.show()","04d36da7":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0442\u0430\u043a\u0438\u0445 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\nnan_features = df_train.columns[df_train.isna().any()].tolist()\n  \n# C\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e \u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445\n    \nfor el in nan_features:\n    print('\u0412 \u0441\u0442\u043e\u043b\u0431\u0446\u0435', el, '\u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u043e', df_train[el].isnull().sum() * 100 \/ len(df_train), '% \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439')","13dcd37f":"# Rooms\n\ndf_train['Rooms'].value_counts().sort_index()\n\n# \u0414\u0443\u043c\u0430\u044e, \u0435\u0441\u043b\u0438 > 6 \u043a\u043e\u043c\u043d\u0430\u0442, \u0442\u043e \u0441\u0434\u0435\u043b\u0430\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 = 5 \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u043c.\n# \u0410 \u0435\u0441\u043b\u0438 0 \u0442\u043e \u043f\u0443\u0441\u0442\u044c \u0431\u0443\u0434\u0435\u0442 1","47b38d4c":"# Square\n\nplt.scatter(df_train['Square'], df_train['Price'])\n\nplt.show()\n\n(df_train['Square'] > 200).value_counts()\n\n# \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0441\u0442\u043e\u0438\u0442 \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 200 \n","0a83c9b7":"#feature_importances.sort_values(by='importance', ascending=False).head()","a3a9aa23":"#plt.scatter(X_train['Square'], y_train)\n\n#plt.show()","172c3f24":"lf_df = df_train[df_train['LifeSquare'] < 50]\nlf_df.info()","a610f67d":"plt.scatter(df_train['LifeSquare'], df_train['Price'])\n\nplt.show()\n\n(df_train['LifeSquare'] > 200).value_counts()\n\n# \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0441\u0442\u043e\u0438\u0442 \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0431\u043e\u043b\u044c\u0448\u0435 200\n# \u0422\u0430\u043a\u0436\u0435, \u043f\u0440\u0438 \u0431\u043e\u043b\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u043c \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0438 \u0431\u0440\u043e\u0441\u0430\u0435\u0442\u0441\u044f \u0432 \u0433\u043b\u0430\u0437\u0430 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 < 10 \u043c\u0435\u0442\u0440\u043e\u0432 \u0441\u0430\u043c\u044b\u0445 \u0440\u0430\u0437\u043d\u044b\u0445 \u0446\u0435\u043d\u043e\u0432\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n# \u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u043e\u0438\u0442 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0438\u0445 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439?","6e6a6bc3":"# KitchenSquare\n\ndf_train['KitchenSquare'].value_counts().sort_index()\n\n# \u041f\u043e \u0437\u0430\u043a\u043e\u043d\u0443 \u0420\u0424, \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c  < 3, \u0442\u0430\u043a \u0447\u0442\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u044e \u044d\u0442\u0443\n# \u041f\u043b\u043e\u0449\u0430\u0434\u044c > 20 \u0442\u0430\u043a\u0436\u0435 \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u0441\u043e\u043c\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439, \u044d\u0442\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c, \u043b\u0438\u0431\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0440\u0430\u0432\u043d\u044b\u043c\u0438 20 ","680e1ca9":"#HouseFloor\n\ndf_train['HouseFloor'].value_counts().sort_index()\n# \u041f\u043e\u043b\u0430\u0433\u0430\u044e, \u0437\u0434\u0430\u043d\u0438\u0438 \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c 0 \u044d\u0442\u0430\u0436\u0435\u0439 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442, \u0441\u0442\u043e\u0438\u0442 0 \u044d\u0442\u0430\u0436\u0435\u0439 \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430 1 \u044d\u0442\u0430\u0436","37cd98d1":"# Floor\n\ndf_train['Floor'].value_counts().sort_index()\n\n# \u0422\u0443\u0442 \u0432\u0440\u043e\u0434\u0435 \u0431\u044b \u0432\u0441\u0435 \u043e\u043a, \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u043e \u043e\u043d\u0438 \u043f\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0439 \u043c\u0435\u0440\u0435 \u043b\u043e\u0433\u0438\u0447\u043d\u044b, 42+ \u044d\u0442\u0430\u0436\u043d\u044b\u0435 \u0437\u0434\u0430\u043d\u0438\u044f \u0432 \u041c\u043e\u0441\u043a\u0432\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442","bf1053fd":"# \u0412 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043d\u043e\u0433\u043e \u043e\u0448\u0438\u0431\u043e\u043a, \u043c\u043e\u0436\u0435\u0442 \u043b\u0438 \u0431\u044b\u0442\u044c \u0442\u0430\u043a\u043e\u0435, \u0447\u0442\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0430 \u043d\u0430 \u044d\u0442\u0430\u0436\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0448\u0435 \u0447\u0435\u043c \u0437\u0430\u044f\u0432\u043b\u0435\u043d\u043e \u0432 \u0437\u0434\u0430\u043d\u0438\u0438?\n(df_train['Floor'] > df_train['HouseFloor']).sum()\n\n# \u0422\u0430\u043a\u0438\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u043d\u043e\u0433\u043e, \u0437\u0430\u043c\u0435\u043d \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 Floor \u043d\u0430 HouseFloor, \n                                # \u0442\u043e\u0433\u0434\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0432\u044b\u0441\u043e\u043a\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u0432 \u0437\u0434\u0430\u043d\u0438\u0438","1c318073":"# HouseYear\n\ndf_train[df_train['HouseYear'] > 2021].head()\n\n# \u0412 \u0441\u043f\u0438\u0441\u043a\u0435 \u0435\u0441\u0442\u044c \u0434\u043e\u043c\u0430, \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c, \u044d\u0442\u043e \u043d\u0430\u0434\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c","1d4156c6":"#\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e, \u043a\u0430\u043a\u0438\u0435 \u0435\u0441\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ndf_train.select_dtypes(include='object').columns.tolist()","45c1a8ee":"# DistrictId\ndf_train['DistrictId'].value_counts()\n# \u041f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442\u0441\u044f 209 \u0440\u0430\u0439\u043e\u043d\u043e\u0432","ce1e25a7":"# Ecology_2\n\ndf_train['Ecology_2'].value_counts()\n# \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0441\u0443\u043d\u0443\u0442\u044c \u0432 dummy \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e ","6f20065e":"# Ecology_3\n\ndf_train['Ecology_3'].value_counts()\n# \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0441\u0443\u043d\u0443\u0442\u044c \u0432 dummy \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e ","7f7616a8":"# Shops_2\n\ndf_train['Shops_2'].value_counts()\n# \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u0441\u0443\u043d\u0443\u0442\u044c \u0432 dummy \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e ","a09c27d4":"class DataPreprocessing:\n    \"\"\"\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n    def __init__(self):\n        \"\"\"\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043b\u0430\u0441\u0441\u0430\"\"\"\n        self.medians = None\n        \n    def fit(self, X):\n        \"\"\"\u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\"\"\"       \n        # \u0420\u0430\u0441\u0447\u0435\u0442 \u043c\u0435\u0434\u0438\u0430\u043d\n        self.medians = X.median()\n    \n    def transform(self, X):\n        \"\"\"\u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n\n        # Rooms\n        X['Rooms_outlier'] = 0\n        X.loc[(X['Rooms'] == 0) | (X['Rooms'] >= 6), 'Rooms_outlier'] = 1\n        \n        X.loc[X['Rooms'] == 0, 'Rooms'] = 1\n        X.loc[X['Rooms'] >= 6, 'Rooms'] = self.medians['Rooms'] # !!! \u043c\u0435\u0434\u0438\u0430\u043d\u0430 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u043d\u0430 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435 !!!\n        \n        \n        # Square !\n#         X.loc[(X['Square'] > 110) & (X['Square'] < 1000), 'Square'] =  X.loc[X['Square'] > 300, 'Square'] * 0.2\n#         X.loc[(X['Square'] > 110) & (X['Square'] < 1000), 'Square'] =  X.loc[X['Square'] > 300, 'Square'] * 0.2\n        X.loc[(X['Square'] < 20), 'Square'] =  X.loc[(X['Square'] < 20), 'Square'] * 2 + 20\n        X.loc[(X['Square'] > 250), 'Square'] =  self.medians['Square']\n        \n        # KitchenSquare\n        X.loc[X['KitchenSquare'] < 3, 'KitchenSquare'] = 3\n        X.loc[X['KitchenSquare'] > 1000, 'KitchenSquare'] = X.loc[X['KitchenSquare'] > 1000, 'KitchenSquare'] \/ 10  # \u043c\u043e\u0436\u043d\u043e median\n        X.loc[X['KitchenSquare'] >= 21, 'KitchenSquare']  = 20 # !!!\n\n\n        \n        # HouseFloor, Floor\n        X['HouseFloor_outlier'] = 0\n        X.loc[X['HouseFloor'] == 0, 'HouseFloor_outlier'] = 1\n        X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor_outlier'] = 1\n        \n        X.loc[X['HouseFloor'] == 0, 'HouseFloor'] = self.medians['HouseFloor']\n        X.loc[X['Floor'] > X['HouseFloor'], 'Floor'] = X.loc[X['Floor'] > X['HouseFloor'], 'HouseFloor']\n        \n        \n        # HouseYear\n        current_year = now = datetime.datetime.now().year\n        \n        X['HouseYear_outlier'] = 0\n        X.loc[X['HouseYear'] > current_year, 'HouseYear_outlier'] = 1\n        \n        X.loc[X['HouseYear'] > current_year, 'HouseYear'] = current_year\n        \n        \n        # Healthcare_1\n        if 'Healthcare_1' in X.columns:\n            X.drop('Healthcare_1', axis=1, inplace=True)\n          \n        \n        # LifeSquare\n        X['LifeSquare_nan'] = X['LifeSquare'].isna() * 1\n        \n        condition = (X['LifeSquare'].isna()) &\\\n                      (~X['Square'].isna()) & \\\n                      (~X['KitchenSquare'].isna())\n        \n        X.loc[condition, 'LifeSquare'] = X.loc[condition, 'Square'] - X.loc[condition, 'KitchenSquare'] - 3\n        # X.loc[(X['LifeSquare'] > 200), 'LifeSquare'] =  self.medians['LifeSquare']\n        # X.loc[(X['LifeSquare'] < 10), 'LifeSquare'] =  self.medians['LifeSquare']\n        return X","9d19512c":"class FeatureGenerator():\n    \"\"\"\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\"\"\"\n    \n    def __init__(self):\n        self.DistrictId_counts = None\n        self.binary_to_numbers = None\n        self.med_price_by_district = None\n        self.med_price_by_floor_year = None\n        \n    def fit(self, X, y=None):\n        \n        X = X.copy()\n        \n        # DistrictID\n        district = X['DistrictId'].value_counts()\n        district = district[district > 50]  ## \u0415\u0441\u043b\u0438 \u0432\u044b \u044d\u0442\u043e\u0433\u043e \u043d\u0435 \u0441\u0434\u0435\u043b\u0430\u0435\u0442\u0435, \u0442\u043e \u043d\u0430 Leaderboard-\u0435 \u0443\u043b\u0435\u0442\u0438\u0442\u0435 \u0432 \u0441\u0430\u043c\u044b\u0439 \u043d\u0438\u0437 (>100 \u043c\u0435\u0441\u0442\u0430, R2 ~ 0.65),\n                                            ## \u0425\u043e\u0442\u044f \u043d\u0430 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 \u0441\u043a\u043e\u0440 \u0432\u044b\u0440\u0430\u0441\u0442\u0435\u0442\n        \n        self.DistrictId_counts = dict(district)\n        \n        # Binary features\n        self.binary_to_numbers = {'A': 0, 'B': 1}\n        \n        # Target encoding\n        ## District\n        df = X.copy()\n        \n        if y is not None:\n            df['Price'] = y.values\n            \n            df['DistrictId_popular'] = df['DistrictId'].copy()\n            df.loc[~df['DistrictId_popular'].isin(district.keys().tolist())] = np.nan\n            \n            self.med_price_by_district = df.groupby(['DistrictId_popular', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                                            .rename(columns={'Price':'MedPriceByDistrict',\n                                                           'DistrictId_popular': 'DistrictId'})\n            med_price_by_district = train_df.groupby(['DistrictId', 'Rooms'], as_index=False).agg({'Price':'median'})\\\n                            .rename(columns={'Price':'MedPriceByDistrict'})\n            \n            self.med_price_by_district_median = self.med_price_by_district['MedPriceByDistrict'].median()\n            \n        ## floor, year\n        if y is not None:\n            df['Price'] = y.values\n            df = self.floor_to_cat(df)\n            df = self.year_to_cat(df)\n            self.med_price_by_floor_year = df.groupby(['year_cat', 'floor_cat'], as_index=False).agg({'Price':'median'}).\\\n                                            rename(columns={'Price':'MedPriceByFloorYear'})\n            self.med_price_by_floor_year_median = self.med_price_by_floor_year['MedPriceByFloorYear'].median()\n\n        \n    def transform(self, X):\n        \n        # DistrictId\n        X['DistrictId_count'] = X['DistrictId'].map(self.DistrictId_counts)  # self.DistrictId_counts = {'id': value}\n        \n        X['new_district'] = 0\n        X.loc[X['DistrictId_count'].isna(), 'new_district'] = 1\n        \n        X['DistrictId_count'].fillna(5, inplace=True)\n        \n        # Binary features\n        X['Ecology_2'] = X['Ecology_2'].map(self.binary_to_numbers)  # self.binary_to_numbers = {'A': 0, 'B': 1}\n        X['Ecology_3'] = X['Ecology_3'].map(self.binary_to_numbers)\n        X['Shops_2'] = X['Shops_2'].map(self.binary_to_numbers)\n        \n        # More categorical features\n        X = self.floor_to_cat(X)  # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 floor_cat\n        X = self.year_to_cat(X)   # + \u0441\u0442\u043e\u043b\u0431\u0435\u0446 year_cat\n        \n        # Target encoding\n        if self.med_price_by_district is not None:\n            X = X.merge(self.med_price_by_district, on=['DistrictId', 'Rooms'], how='left')\n            X['MedPriceByDistrict'].fillna(self.med_price_by_district_median, inplace=True)\n            \n        if self.med_price_by_floor_year is not None:\n            X = X.merge(self.med_price_by_floor_year, on=['year_cat', 'floor_cat'], how='left')\n            X['MedPriceByFloorYear'].fillna(self.med_price_by_floor_year_median, inplace=True)\n        \n        return X\n    \n    @staticmethod\n    def floor_to_cat(X):\n        \n        X['floor_cat'] = np.nan\n        \n        X.loc[X['Floor'] < 3, 'floor_cat'] = 1  \n        X.loc[(X['Floor'] >= 3) & (X['Floor'] <= 5), 'floor_cat'] = 2\n        X.loc[(X['Floor'] > 5) & (X['Floor'] <= 9), 'floor_cat'] = 3\n        X.loc[(X['Floor'] > 9) & (X['Floor'] <= 15), 'floor_cat'] = 4\n        X.loc[X['Floor'] > 15, 'floor_cat'] = 5\n            \n        return X\n     \n    @staticmethod\n    def year_to_cat(X):\n        \n        X['year_cat'] = np.nan\n        \n        X.loc[X['HouseYear'] < 1941, 'year_cat'] = 1\n        X.loc[(X['HouseYear'] >= 1941) & (X['HouseYear'] <= 1945), 'year_cat'] = 2\n        X.loc[(X['HouseYear'] > 1945) & (X['HouseYear'] <= 1980), 'year_cat'] = 3\n        X.loc[(X['HouseYear'] > 1980) & (X['HouseYear'] <= 2000), 'year_cat'] = 4\n        X.loc[(X['HouseYear'] > 2000) & (X['HouseYear'] <= 2010), 'year_cat'] = 5\n        X.loc[(X['HouseYear'] > 2010), 'year_cat'] = 6\n            \n        return X","ad1de194":"feature_names = ['Rooms', 'Square', 'LifeSquare', 'KitchenSquare', 'Floor', 'HouseFloor', 'HouseYear',\n                 'Ecology_1', 'Ecology_2', 'Ecology_3', 'Social_1', 'Social_2', 'Social_3',\n                 'Helthcare_2', 'Shops_1', 'Shops_2']\n\nnew_feature_names = ['Rooms_outlier', 'HouseFloor_outlier', 'HouseYear_outlier', 'LifeSquare_nan', 'DistrictId_count',\n                     'new_district', 'floor_cat', 'year_cat',  'MedPriceByDistrict', 'MedPriceByFloorYear']\n\ntarget_name = 'Price'","7d3d0f64":"train_df = pd.read_csv(TRAIN_DATASET_PATH)\ntest_df = pd.read_csv(TEST_DATASET_PATH)\n\nX = train_df.drop(columns=target_name)\ny = train_df[target_name]","0ee65077":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.33, shuffle=True)","6cd6bf06":"preprocessor = DataPreprocessing()\npreprocessor.fit(X_train)\n\nX_train = preprocessor.transform(X_train)\nX_valid = preprocessor.transform(X_valid)\ntest_df = preprocessor.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","12ca0572":"features_gen = FeatureGenerator()\nfeatures_gen.fit(X_train, y_train)\n\nX_train = features_gen.transform(X_train)\nX_valid = features_gen.transform(X_valid)\ntest_df = features_gen.transform(test_df)\n\nX_train.shape, X_valid.shape, test_df.shape","1048e111":"X_train = X_train[feature_names + new_feature_names]\nX_valid = X_valid[feature_names + new_feature_names]\ntest_df = test_df[feature_names + new_feature_names]","6658612f":"X_train.isna().sum().sum(), X_valid.isna().sum().sum(), test_df.isna().sum().sum()","0d2cd223":"# \u0417\u0430\u0440\u0430\u043d\u0435\u0435, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e GridSearchCV \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043b\u0443\u0447\u0448\u0438\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\nlgbm = LGBMRegressor(max_depth=20,\n                             num_leaves=31,\n                             n_estimators=500,\n                             learning_rate=0.03)\n\nlgbm.fit(X_train, y_train)\n","fb89902a":"y_train_preds = lgbm.predict(X_train)\ny_valid_preds = lgbm.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_valid_preds)","98bfcb5d":"# cv_score\ncv_score = cross_val_score(lgbm, X_train, y_train, scoring='r2', cv=KFold(n_splits=3, shuffle=True, random_state=21))\n\nmean = cv_score.mean()\nstd = cv_score.std()\n\nprint('R2: {:.3f} +- {:.3f}'.format(mean, std))","63672dd7":"y_train_preds = lgbm.predict(X_train)\ny_valid_preds = lgbm.predict(X_valid)\n\nevaluate_preds(y_train, y_train_preds, y_valid, y_valid_preds)","437065b1":"feature_importances = pd.DataFrame(zip(X_train.columns, lgbm.feature_importances_), \n                                   columns=['feature_name', 'importance'])\n\nfeature_importances.sort_values(by='importance', ascending=False)","b4331690":"test_df.shape","06afb075":"test_df.info()","f69257ee":"submit = pd.read_csv('\/kaggle\/input\/real-estate-price-prediction-moscow\/sample_submission.csv')\nsubmit.head()","1e90f886":"X.info()","432a7f09":"test_df.info()","58950d4a":"predictions = lgbm.predict(test_df)\npredictions","3520c935":"submit['Price'] = predictions\nsubmit.head()","023d112d":"submit.info()","1ee5b162":"submit.to_csv('submission.csv', index=False)\n","569991f3":"submit.info()","f2019c98":"**\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435**","e2c1bfff":"### 8. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435  <a class='anchor' id='prediction'>\n\n1. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0442\u0435 \u0436\u0435 \u044d\u0442\u0430\u043f\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u043d\u0438\u044f\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n2. \u041d\u0435 \u043f\u043e\u0442\u0435\u0440\u044f\u0442\u044c \u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0430\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u043e\u0442 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u043f\u0440\u0438 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u0432\n3. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0434\u043b\u044f \u0432\u0441\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 (\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u043e\u043a)","d1da2abe":"\u0417\u0430 \u043e\u0441\u043d\u043e\u0432\u0443 \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0431\u044b\u043b \u0432\u0437\u044f\u0442 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0435\u0439 \"Geekbrains\" Baseline \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0439 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 - https:\/\/www.kaggle.com\/julichitai\/baseline  ;  \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u044b\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d LGBMRegressor\n\nScore baseline'\u0430 : 0.7\n\nScore \u043c\u043e\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 : ~0.734\n\n\u041c\u0435\u0442\u0440\u0438\u043a\u0430:\nR2 - \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u0434\u0435\u0442\u0435\u0440\u043c\u0438\u043d\u0430\u0446\u0438\u0438 (sklearn.metrics.r2_score)\n\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u0440\u0430\u0437\u043d\u0443\u044e \u043b\u043e\u0433\u0438\u043a\u0443 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0444\u0438\u0447. \u041f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u043c\u043e\u043e\u0434\u0435\u043b\u0438 RandomForestRegressor, LGBMRegressor \u0438 CatBoostRegressor. \u041f\u0440\u043e\u0431\u043e\u0432\u0430\u043b \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0442\u044c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e TSNE + K-means, \u0432\u044b\u0434\u0435\u043b\u044f\u0442\u044c 2 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0430 \u0438 \u0434\u0435\u043b\u0430\u0442\u044c 2 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0430 \u0430 \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u044c\u0435\u0434\u0438\u043d\u044f\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u043f\u043e \u043e\u0431\u043e\u0438\u043c \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0430\u043c. \u0412 \u0440\u0430\u0431\u043e\u0442\u0435 \u043e\u0441\u0442\u0430\u0432\u0438\u043b \u0441\u0430\u043c\u044b\u0439 \u0430\u0434\u0435\u043a\u0432\u0430\u0442\u043d\u044b\u0439 , \u0441 \u043c\u043e\u0435\u0439 \u0442\u043e\u0447\u043a\u0438 \u0437\u0440\u0435\u043d\u0438\u044f, \u0432\u0430\u0440\u0438\u0430\u043d\u0442.","6acf604d":"**\u041f\u043b\u0430\u043d \u043f\u0440\u043e\u0435\u043a\u0442\u0430**\n* [\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435](#intro)\n* [1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445](#load)\n* [2. EDA](#eda)\n* [3. \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445(\u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438)](#outlier)\n* [4. Feature engineering](#feature)\n* [5. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#feature_selection)\n* [6. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test](#split)\n* [7. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438](#modeling)\n* [8. \u041f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435](#prediction)","c13f9329":"**\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432**","529c601a":"### 7. \u041f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439  <a class='anchor' id='modeling'>","ffb6c003":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430**\n\n* **Id** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b\n* **DistrictId** - \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0430\u0439\u043e\u043d\u0430\n* **Rooms** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442\n* **Square** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **LifeSquare** - \u0436\u0438\u043b\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c\n* **KitchenSquare** - \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u0443\u0445\u043d\u0438\n* **Floor** - \u044d\u0442\u0430\u0436\n* **HouseFloor** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u0434\u043e\u043c\u0435\n* **HouseYear** - \u0433\u043e\u0434 \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043e\u043c\u0430\n* **Ecology_1, Ecology_2, Ecology_3** - \u044d\u043a\u043e\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Social_1, Social_2, Social_3** - \u0441\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438\n* **Healthcare_1, Helthcare_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043e\u0445\u0440\u0430\u043d\u043e\u0439 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u044f\n* **Shops_1, Shops_2** - \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 \u043d\u0430\u043b\u0438\u0447\u0438\u0435\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0442\u043e\u0440\u0433\u043e\u0432\u044b\u0445 \u0446\u0435\u043d\u0442\u0440\u043e\u0432\n* **Price** - \u0446\u0435\u043d\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b","237727ce":"\u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u0433\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u0435:\n\n* Rooms, Square, LifeSquare, KitchenSquare, Floor, HouseFloor, HouseYear, Social_3 - \u0438\u043c\u0435\u044e\u0442 \u0441\u0438\u043b\u044c\u043d\u044b\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n* Shops_1, Healthcare_2 - \u0438\u043c\u0435\u044e\u0442 \u0441\u0442\u0440\u0430\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435","9839f9ec":"### \u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 <a class='anchor' id='intro'>","32598056":"**\u0412\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","cf2a884f":"**\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438**","16bda8e0":"\u041f\u043e \u043c\u0430\u0442\u0440\u0438\u0446\u0435 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u044b : \n* \u041e\u0436\u0438\u0434\u0430\u0435\u043c\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442 \u043d\u0435\u043f\u043b\u043e\u0445\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442, \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u0440\u0430\u0437\u0443\u043c\u043d\u043e\u0433\u043e\n* \u042d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u044d\u0442\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0438\u043c\u0435\u044e\u0442 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e, \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u0437\u043b\u044f\u0434 - \u0431\u0435\u0441\u043f\u043e\u043b\u0435\u0437\u043d\u043e \n* Social_1, Shops_1 \u0438 Healthcare_2 \u0445\u043e\u0440\u043e\u0448\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442, \u0434\u0443\u043c\u0430\u044e \u0440\u0435\u0447\u044c \u0437\u0434\u0435\u0441\u044c \u0438\u0434\u0435\u0442 \u043e \u0440\u0430\u0439\u043e\u043d\u0430\u0445, \u043c\u043e\u0436\u0435\u0442 \u0441\u0442\u043e\u0438\u0442 \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0445 \u0432 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u044b \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u0430\u043a \u0444\u0438\u0447\u0443 ?\n* Social_1 \u0438 Social_2 \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0438\u043c\u0435\u0435\u0442 \u0441\u043c\u044b\u0441\u043b \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c Social_2\n* Social_3 \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 Shops_1, \u0447\u0442\u043e \u044d\u0442\u043e \u043c\u043d\u0435 \u0434\u0430\u0435\u0442... \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u043d\u0430\u044e","59ffe1a2":"### 3. \u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445(\u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438)  <a class='anchor' id='outlier'>\n\u0427\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c\u0438?\n1. \u0412\u044b\u043a\u0438\u043d\u0443\u0442\u044c \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435, \u043d\u0430 \u0442\u0435\u0441\u0442\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0432\u044b\u043a\u0438\u0434\u044b\u0432\u0430\u0435\u043c)\n2. \u0417\u0430\u043c\u0435\u043d\u044f\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438 (\u043c\u0435\u0434\u0438\u0430\u043d\u044b, \u0441\u0440\u0435\u0434\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, np.clip \u0438 \u0442.\u0434.)\n3. \u0414\u0435\u043b\u0430\u0442\u044c\/\u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0444\u0438\u0447\u0443\n4. \u041d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0434\u0435\u043b\u0430\u0442\u044c","131a648b":"### 6. \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test  <a class='anchor' id='split'>","dbdae156":"### 5. \u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432  <a class='anchor' id='feature_selection'>","0cfc4cd0":"\u0412\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u0430\u043c : \n* \u0414\u0443\u043c\u0430\u044e \u0447\u0442\u043e LifeSquare \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0432\u0430\u0436\u043d\u044b\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c \u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c Square, \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \n* \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c  Healthcare_1 \u043c\u043d\u0435 \u043d\u0435 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u043e\u043d\u044f\u0442\u0435\u043d \u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 ~50% , \u0432\u044b\u043a\u0438\u0434\u044b\u0432\u0430\u044e \u0435\u0433\u043e.","b33fc7d6":"# Python-libraries Course Project \n\n","ef629d6e":"**LGBMRegressor**","d02e662b":"**\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438**","fb2d8670":"### \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432","5f1479a9":"**\u041f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c**","b16f6555":"**\u0413\u0438\u0441\u0442\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e \u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c**","a1c429fe":"### 1. \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 <a class='anchor' id='load'>","5819464e":"## 2. EDA  <a class='anchor' id='eda'>\n\u0414\u0435\u043b\u0430\u0435\u043c EDA \u0434\u043b\u044f:\n- \u0418\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n- \u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f NaN\n- \u0418\u0434\u0435\u0439 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0447","403ab9a5":"### 4. Feature engineering  <a class='anchor' id='feature'>","20025193":"**\u0412\u044b\u0431\u0440\u043e\u0441\u044b**"}}