{"cell_type":{"23004d1c":"code","6d9f5e0a":"code","9af6b1d2":"code","62a87977":"code","7891f82e":"code","5622c908":"code","da37557b":"code","4da2c66a":"code","a28f3818":"markdown","9395c792":"markdown","54eebae6":"markdown","cdd5b14f":"markdown","0f5583aa":"markdown"},"source":{"23004d1c":"import numpy as np \nimport pandas as pd \nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6d9f5e0a":"# Read train dataset\ndf_train = pd.read_csv('\/kaggle\/input\/restaurant-revenue-prediction\/train.csv.zip')\ndf_test = pd.read_csv('\/kaggle\/input\/restaurant-revenue-prediction\/test.csv.zip')\n# print(df_train.info())\ndf_train.head()\ndf_test.info()","9af6b1d2":"# Data type conversion\ndf_train = df_train.astype({\"City\":'category',\"City Group\":'category',\"Type\":'category', \"Open Date\":'datetime64[ns]'})\n# df_train.info()\ndf_test = df_test.astype({\"City\":'category',\"City Group\":'category',\"Type\":'category', \"Open Date\":'datetime64[ns]'})\n# df_test.info()","62a87977":"# 1. Check categories in train and test data\n# df_train : City, City group, Type\ncities = df_train.City.unique().tolist()\nprint(len(cities))\ncity_group = df_train['City Group'].unique().tolist()\nprint(city_group)\ntype_ = df_train['Type'].unique().tolist()\nprint(type_)","7891f82e":"cities = df_test.City.unique().tolist()\nprint(len(cities))\ncity_group = df_train['City Group'].unique().tolist()\nprint(city_group)\ntype_ = df_train['Type'].unique().tolist()\nprint(type_)","5622c908":"# 2. Choose 1 category and assign label which matches in both train and test set.\n# To choose among city and type - Convert type to numerical\n\ndf_train['City Group'] = df_train[['City Group']].apply(lambda x: x.cat.codes)\ndf_train['Type'] = df_train[['Type']].apply(lambda x: x.cat.codes)\n\n# # # Correlation for train set\n# plt.rcParams[\"figure.figsize\"] = (20,10)\n# sns.heatmap(df_train[['City Group','Type','revenue']].corr(), annot=True)\n# plt.show()\n\nfrom sklearn.tree import DecisionTreeRegressor\n\ndf_train = df_train.drop(columns = ['Id','Open Date','City'],axis=1)\nX = df_train.loc[:, df_train.columns != 'revenue']\ny = df_train.loc[:, df_train.columns == 'revenue']\n\ntree = DecisionTreeRegressor().fit(X, y)\n# print(X.columns)\n# np.round(tree.feature_importances_, 3)\n\n# Feature importance dataframe\nd = {'Importance': np.round(tree.feature_importances_, 3) , 'Features': X.columns}\nfeature_imp = pd.DataFrame(data=d)\n# feature_imp\n\n# Sort\nfeature_imp_order = feature_imp.sort_values('Importance', ascending=False).reset_index(drop=True)[0:20]\nfeature_imp_order","da37557b":"# Training\nfrom sklearn import preprocessing, svm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\n\n\nX_main = df_train[feature_imp_order.Features.values]\ny_main = df_train['revenue']\nscaler_train = StandardScaler()\nscaler_train.fit(X_main)\nX_main_scaled = scaler_train.transform(X_main)\n\n# Splitting the data into training and testing data\nlinear_regr = LinearRegression()\nlinear_regr.fit(X_main_scaled, y)\ny_pred = linear_regr.predict(X_main_scaled)\naccuracy = linear_regr.score(X_main_scaled,y)\nprint(\"Train Accuracy {}%\".format(int(round(accuracy *100))))\nprint(\"Training RMSE Linear regression \",mean_squared_error(y, y_pred, squared=False))\n\nfrom sklearn.svm import SVR\nsvm_regr = SVR(kernel = 'rbf')\nsvm_regr.fit(X_main_scaled, y)\ny_pred = svm_regr.predict(X_main_scaled)\naccuracy = svm_regr.score(X_main_scaled,y)\nprint(\"Train Accuracy {}%\".format(int(round(accuracy *100))))\nprint(\"Training RMSE SVM regressor \",mean_squared_error(y, y_pred, squared=False))\n\n# import the regressor\nfrom sklearn.tree import DecisionTreeRegressor \n  \n# create a regressor object\ndt_regr = DecisionTreeRegressor(random_state = 0) \n  \n# fit the regressor with X and Y data\ndt_regr.fit(X_main_scaled, y)\ny_pred = dt_regr.predict(X_main_scaled)\naccuracy = dt_regr.score(X_main_scaled,y)\nprint(\"Train Accuracy {}%\".format(int(round(accuracy *100))))\nprint(\"Training RMSE SVM regressor \",mean_squared_error(y, y_pred, squared=False))\n","4da2c66a":"# Prepare test data\ndf_test\ndf_test['City Group'] = df_test[['City Group']].apply(lambda x: x.cat.codes)\ndf_test['Type'] = df_test[['Type']].apply(lambda x: x.cat.codes)\n\nresult_df_linear_regr = pd.DataFrame()\nresult_df_linear_regr['Id'] = df_test['Id'].values\n\nresult_df_svm_regr = pd.DataFrame()\nresult_df_svm_regr['Id'] = df_test['Id'].values\n\nresult_df_dt_regr = pd.DataFrame()\nresult_df_dt_regr['Id'] = df_test['Id'].values\n\ndf_test = df_test[feature_imp_order.Features.values]\n\nX_test = df_test.loc[:, df_test.columns != 'revenue']\n# y_test = df_test.loc[:, df_train.columns == 'revenue']\n\nscaler_test = StandardScaler()\nscaler_test.fit(X_test)\nX_test_scaled = scaler_test.transform(X_test)\n\ny_pred_linear_regr = linear_regr.predict(X_test_scaled)\nresult_df_linear_regr['Prediction'] = y_pred_linear_regr\nresult_df_linear_regr['Prediction'] = result_df_linear_regr['Prediction'].apply(lambda x:round(x,2))\nresult_df_linear_regr\n\ny_pred_svm_regr = svm_regr.predict(X_test_scaled)\nresult_df_svm_regr['Prediction'] = y_pred_svm_regr\nresult_df_svm_regr['Prediction'] = result_df_svm_regr['Prediction'].apply(lambda x:round(x,2))\nresult_df_svm_regr\n\ny_pred_dt_regr = dt_regr.predict(X_test_scaled)\nresult_df_dt_regr['Prediction'] = y_pred_dt_regr\nresult_df_dt_regr['Prediction'] = result_df_dt_regr['Prediction'].apply(lambda x:round(x,2))\nresult_df_dt_regr.to_csv('Prediction_DT.csv',index=False)\nresult_df_dt_regr","a28f3818":"Problem statement : \nFinding a mathematical model to increase the effectiveness of investments in new restaurant sites would allow TFI to invest more in other important business areas, like sustainability, innovation, and training for new employees.\nSo if revenue predicted is less then for that particular restaurant will not be invested.","9395c792":"Observations :\nCities column in train data is insuffucient as test data has more categories than train. We will drop it\nCity group and type has the same categories in both train and test data.","54eebae6":"Outline :\n1. Check categories in train and test data\n2. Choose 1 category and assign label which matches in both train and test set.\n3. See how to handle categorical data in prediction\n4. Do corelation of obscure data with revenue \n5. Create training and test set\n6. Put it in different prediction models \n7. Get rmse value","cdd5b14f":"Training data has -\nOpen date - the date when restaurant was opened (Date - dd-mm-yyyy)\nCity - The city it was in (Categorical data) \nCity - group (Categorical data)\nType - Type of the restaurant. FC: Food Court, IL: Inline, DT: Drive Thru, MB: Mobile (Categorical data)\nP1 - P37 - Obscure data\nrevenue - revenue of the restaurant in a given year (Float)\n\nThere are no null values in train data and test data.","0f5583aa":"According to feature importance order we will choose the first 16 highest ranked paramters for predicting revenue."}}