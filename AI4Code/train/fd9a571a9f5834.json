{"cell_type":{"7d98c17e":"code","28d82769":"code","cf1f5953":"code","682fc7a8":"code","1eef072f":"code","7ed7c04c":"code","806964b0":"code","382ef30f":"code","9e271ccd":"code","33963ee7":"code","fd44825f":"code","2db07ff6":"code","18c29e7d":"code","807a6dfd":"code","57f39fb9":"code","36afb399":"code","1daf846c":"code","1e6afc40":"code","26e86171":"code","08ce4f5e":"code","71296d99":"code","5f6e1683":"code","7412bad0":"code","ea77b6e9":"code","815a4862":"code","ad9c7c8d":"code","01c4e624":"markdown","8dea14cb":"markdown","8d980000":"markdown","7bc07767":"markdown","e3999275":"markdown","8fb44ed0":"markdown","814664bb":"markdown","2eb4d442":"markdown","9dd4535e":"markdown"},"source":{"7d98c17e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom keras import backend as K\nfrom keras.engine.topology import Layer\nfrom keras import initializers, regularizers, constraints\n\nfrom keras.layers import Dense, Input, LSTM, Bidirectional, Activation, Conv1D, GRU, TimeDistributed\nfrom keras.layers import Dropout, Embedding, GlobalMaxPooling1D, MaxPooling1D, Add, Flatten, SpatialDropout1D\nfrom keras.layers import GlobalAveragePooling1D, BatchNormalization, concatenate\nfrom keras.layers import Reshape, merge, Concatenate, Lambda, Average\nfrom keras.models import Sequential, Model, load_model\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.initializers import Constant\nfrom keras.layers.merge import add\n\nfrom keras.preprocessing import sequence\nfrom keras.preprocessing.text import Tokenizer, text_to_word_sequence\nfrom keras.utils import np_utils\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","28d82769":"train_df = pd.read_json('..\/input\/news-category-dataset\/News_Category_Dataset_v2.json', lines=True)\ntrain_df.head()","cf1f5953":"# using headlines and short_description as input X\ntrain_df['text'] = train_df.headline + \" \" + train_df.short_description\ntrain_df.text = train_df.text.map(lambda x: x.lower())\ntrain_df.head()","682fc7a8":"train_df.category.isnull().values.any()","1eef072f":"train_df.text.isnull().values.any()","7ed7c04c":"categories = train_df.groupby('category')\nprint('total categories: {}'.format(categories.ngroups))\nprint(categories.size())","806964b0":"# Combine similar categories\ntrain_df.category = train_df.category.map(lambda x: \"WORLDPOST\" if x == \"THE WORLDPOST\" else x)\ntrain_df.category = train_df.category.map(lambda x: \"WORLD NEWS & POLITICS\" if x == \"WORLD NEWS\" or x == \"POLITICS\" else x)\ntrain_df.category = train_df.category.map(lambda x: \"RACIAL & LGBTQ ISSUES\" if x == \"BLACK VOICES\" or x == \"LATINO VOICES\" or x == \"QUEER VOICES\" else x)\ntrain_df.category = train_df.category.map(lambda x: \"GREEN & HEALTHY LIVING\" if x == \"GREEN\" or x == \"HEALTHY LIVING\" else x)\ntrain_df.category = train_df.category.map(lambda x: \"STYLE & BEAUTY\" if x == \"STYLE\" else x)\ntrain_df.category = train_df.category.map(lambda x: \"TRAVEL & CULINARY\" if x == \"TRAVEL\" or x == \"TASTE\" or x == \"FOOD & DRINK\" else x)\ntrain_df.category = train_df.category.map(lambda x: \"COLLEGE & EDUCATION\" if x == \"EDUCATION\" or x == \"COLLEGE\" else x)\ntrain_df.category = train_df.category.map(lambda x: \"ARTS & CULTURE\" if x == \"ARTS\" or x == \"CULTURE & ARTS\" or x == \"ARTS & CULTURE\" else x)\ntrain_df.category = train_df.category.map(lambda x: \"PARENTING\" if x == \"PARENTING\" or x == \"PARENT\" or x == \"PARENTS\" else x)\ntrain_df.category = train_df.category.map(lambda x: \"WEDDING & DIVORCE\" if x == \"WEDDING\" or x == \"DIVORCE\" or x == \"WEDDINGS\" else x)\ntrain_df.category = train_df.category.map(lambda x: \"SCIENCE & TECHNOLOGY\" if x == \"SCIENCE\" or x == \"TECH\" else x)\ntrain_df.category = train_df.category.map(lambda x: \"SPORT\" if x == \"SPORTS\" else x)\n\ncategories = train_df.groupby('category')\nprint('total categories: {}'.format(categories.ngroups))\nprint(categories.size())","382ef30f":"# tokenizing\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(train_df.text)\nX = tokenizer.texts_to_sequences(train_df.text)\ntrain_df['words'] = X\n\n# delete some empty and short data\ntrain_df['word_length'] = train_df.words.apply(lambda i: len(i))\ntrain_df = train_df[train_df.word_length >= 5]\n\ntrain_df.head()","9e271ccd":"train_df.word_length.describe()","33963ee7":"# using 50 for padding length\nmaxlen = 50\nX = list(sequence.pad_sequences(train_df.words, maxlen=maxlen))","fd44825f":"# category to id\ncategories = train_df.groupby('category').size().index.tolist()\ncategory_int = {}\nint_category = {}\nfor i, k in enumerate(categories):\n    category_int.update({k:i})\n    int_category.update({i:k})\n\ntrain_df['c2id'] = train_df['category'].apply(lambda x: category_int[x])\n\ntrain_df.head()","2db07ff6":"word_index = tokenizer.word_index\n\nEMBEDDING_DIM = 100\n\nembeddings_index = {}\nf = open('..\/input\/glove-global-vectors-for-word-representation\/glove.6B.100d.txt')\nfor line in f:\n    values = line.split()\n    word = values[0]\n    coefs = np.asarray(values[1:], dtype='float32')\n    embeddings_index[word] = coefs\nf.close()\n\nprint('Found %s unique tokens.' % len(word_index))\nprint('Total %s word vectors.' % len(embeddings_index))","18c29e7d":"embedding_matrix = np.zeros((len(word_index) + 1, EMBEDDING_DIM))\nfor word, i in word_index.items():\n    embedding_vector = embeddings_index.get(word)\n    if embedding_vector is not None:\n        embedding_matrix[i] = embedding_vector\n\nembedding_layer = Embedding(len(word_index)+1,\n                            EMBEDDING_DIM,\n                            embeddings_initializer=Constant(embedding_matrix),\n                            input_length=maxlen,\n                            trainable=False)","807a6dfd":"# prepared data \nX = np.array(X)\nY = np_utils.to_categorical(list(train_df.c2id))\n\n# and split to training set and validation set\nseed = 29\nx_train, x_val, y_train, y_val = train_test_split(X, Y, test_size=0.2, random_state=seed)","57f39fb9":"inp = Input(shape=(maxlen,), dtype='int32')\nx = embedding_layer(inp)\nx = SpatialDropout1D(0.2)(x)\nx = Bidirectional(GRU(128, return_sequences=True, dropout=0.1, recurrent_dropout=0.1))(x)\nx = Conv1D(64, kernel_size=3)(x)\navg_pool = GlobalAveragePooling1D()(x)\nmax_pool = GlobalMaxPooling1D()(x)\nx = concatenate([avg_pool, max_pool])\noutp = Dense(len(int_category), activation=\"softmax\")(x)\n\nBiGRU = Model(inp, outp)\nBiGRU.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['acc'])\n\nBiGRU.summary()","36afb399":"# training\nbigru_history = BiGRU.fit(x_train, \n                          y_train, \n                          batch_size=128, \n                          epochs=20, \n                          validation_data=(x_val, y_val))","1daf846c":"def evaluate_accuracy(model):\n    predicted = model.predict(x_val)\n    diff = y_val.argmax(axis=-1) - predicted.argmax(axis=-1)\n    corrects = np.where(diff == 0)[0].shape[0]\n    total = y_val.shape[0]\n    return float(corrects\/total)","1e6afc40":"print('Bidirectional GRU: {}'.format(evaluate_accuracy(BiGRU)))","26e86171":"!rm -rf bigru*","08ce4f5e":"from IPython.display import FileLink, FileLinks\n# serialize model to JSON\nmodel_json = BiGRU.to_json()\nwith open(\"bigru.json\", \"w\") as json_file:             \n     json_file.write(model_json) \n\n# serialize weights to HDF5\nBiGRU.save_weights(\"bigru.h5\")\nprint(\"Saved model to disk\")\nFileLinks('.') #lists all downloadable files on server","71296d99":"raw_dfs = []\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/all-the-news'):\n    for filename in filenames:\n        raw_dfs.append(pd.read_csv(os.path.join(dirname, filename), index_col=[0]))\n\ndf = pd.concat(raw_dfs, axis=0, ignore_index=True)\n\ndf.title = df.title.astype(str)\ndf.content = df.content.astype(str)\n\ndf.head()","5f6e1683":"# using title and content as input X\ndf['text'] = df.title + \" \" + df.content\n# df['text'] = df.title\ndf.text = df.text.map(lambda x: x.lower())\n\n# tokenizing\ntokenizer = Tokenizer()\ntokenizer.fit_on_texts(df.text)\nX_to_predict = tokenizer.texts_to_sequences(df.text)\ndf['words'] = X_to_predict\n\n# delete some empty and short data\ndf['word_length'] = df.words.apply(lambda i: len(i))\ndf = df[df.word_length >= 5]\n\ndf.head()","7412bad0":"# using 50 for padding length\nmaxlen = 50\nX_to_predict = list(sequence.pad_sequences(df.words, maxlen=maxlen))\ndf['padded_words'] = X_to_predict\n\ndf.head()","ea77b6e9":"sample_text = df.iloc[999].text\nsample_title = df.iloc[999].title\nprint('sample title: {}'.format(sample_title))\n\ntokenizer.fit_on_texts(sample_text)\nX_sample = tokenizer.texts_to_sequences(sample_text)\nX_max_words = list(sequence.pad_sequences(X_sample, maxlen=maxlen))\n\npredict = BiGRU.predict([X_max_words])\n\npredict","815a4862":"sorting = (-predict).argsort()\nvalue = sorting[0][0]\nvalue1 = sorting[0][1]\n\npredicted_label = int_category[value]\npredicted_label1 = int_category[value1]\nprint(predicted_label)\nprint(predicted_label1)","ad9c7c8d":"def get_first_topic(sample_text):\n    tokenizer.fit_on_texts(sample_text)\n    X_sample = tokenizer.texts_to_sequences(sample_text)\n    X_max_words = list(sequence.pad_sequences(X_sample, maxlen=maxlen))\n\n    predict = BiGRU.predict([X_max_words])\n    \n    sorting = (-predict).argsort()\n    value = sorting[0][0]\n\n    predicted_label = int_category[value]\n    return predicted_label\n\ndef get_second_topic(padded_words):\n    tokenizer.fit_on_texts(sample_text)\n    X_sample = tokenizer.texts_to_sequences(sample_text)\n    X_max_words = list(sequence.pad_sequences(X_sample, maxlen=maxlen))\n\n    predict = BiGRU.predict([X_max_words])\n    \n    sorting = (-predict).argsort()\n    value = sorting[0][1]\n\n    predicted_label = int_category[value]\n    return predicted_label","01c4e624":"## Data Preparation","8dea14cb":"## Topic Prediction","8d980000":"Evaluating the accuracy","7bc07767":"### Split the Dataset","e3999275":"## Modules and Dataset Preparation\nFor model training, the [News Category Dataset](https:\/\/www.kaggle.com\/rmisra\/news-category-dataset) with [GloVe word embedding vector](https:\/\/www.kaggle.com\/rtatman\/glove-global-vectors-for-word-representation) will be used to predict the topic of news in the [All the News](https:\/\/www.kaggle.com\/snapcrack\/all-the-news) dataset.","8fb44ed0":"# News Topic Classification","814664bb":"## Model Training\n### Data Preparation","2eb4d442":"### Train using Bidirectional LSTM\nUse bidirectional LSTM with convolution such as [this](https:\/\/www.kaggle.com\/eashish\/bidirectional-gru-with-convolution).","9dd4535e":"### GloVe Embedding"}}