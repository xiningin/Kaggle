{"cell_type":{"2d7005c6":"code","b78c0505":"code","13966cdc":"code","7da80b3d":"code","59e9c51d":"code","442d888a":"code","d7e15145":"code","e551a548":"code","8cf06363":"code","ae33903e":"code","0bca8970":"code","0de26859":"code","7e965e61":"code","74b0e1c0":"code","cf2de0ae":"code","d6ddbeab":"code","8972048b":"code","f72973f6":"code","cf489ec8":"code","4087ae26":"code","ab8410aa":"code","0c8774d8":"code","a1517432":"code","aa9fc0eb":"code","61d7c2de":"code","b7abc2dd":"code","d10feb5d":"code","bed52cd5":"code","c7d677ec":"code","50c11972":"code","65d92302":"code","468cb748":"code","23059012":"code","3341d276":"code","a7d35eba":"code","019638a9":"code","253ddbf1":"code","1e1978bb":"code","330afd13":"code","6e7faf44":"code","55b8c118":"code","bdb65d35":"code","42809078":"code","24ca1c58":"markdown","88abf905":"markdown","bfbc2bbf":"markdown","e451cc6a":"markdown","384c193f":"markdown","0e4d2e4e":"markdown","193bbb9e":"markdown","1df380b7":"markdown","996391f8":"markdown","663908e0":"markdown","a66589ec":"markdown"},"source":{"2d7005c6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# for visualizations\nimport matplotlib.pyplot as plt\nimport squarify\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\n# for analysis\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules       \n        \n        \n# Any results you write to the current directory are saved as output.","b78c0505":"data = pd.read_csv('..\/input\/movielens\/movies.csv')\n\n# let's check the shape of the dataset\ndata.shape","13966cdc":"#verifico los nulos \ndata.info()","7da80b3d":"#Head of the data\ndata.head(10)","59e9c51d":"# checkng the tail of the data\n\ndata.tail()","442d888a":"# checking the random entries in the data\n\ndata.sample(10)","d7e15145":"# let's describe the dataset\n\ndata.describe()","e551a548":"movies_genero = data.drop('genres',1).join(data.genres.str.get_dummies())\npd.options.display.max_columns=100","8cf06363":"#listo las peliculas y los distintos generos que tiene\nmovies_genero.head()","ae33903e":"stat1 = movies_genero.drop(['title', 'movieId'],1).apply(pd.value_counts)\nstat1.head()","0bca8970":"stat1 = stat1.transpose().drop(0,1).sort_values(by=1, \n                                                ascending=False).rename(columns={1:'No. of movies'})\n","0de26859":"#coloco la \u00b4primera columna con el nombre genre\nstat1.index = stat1.index.set_names('genre')","7e965e61":"#obtengo la cantidad de peliculas por genero, ordenadas de mayor a menor.\nstat1.head()","74b0e1c0":"stat1.tail()","cf2de0ae":"#genero una nueva tabla con la columna numero de generos que tiene una pelicula.\n\nstat2 = data.join(data.genres.str.split('|').reset_index().genres.str.len(), rsuffix='r').rename(\n    columns={'genresr':'genre_count'})","d6ddbeab":"stat2.head(10)","8972048b":"stat2.tail(10)","f72973f6":"#agrupo por generos y cuento cuantas peliculas hay por genero.\nstat2 = stat2[stat2['genre_count']==1].drop('movieId',1).groupby('genres').sum().sort_values(\n    by='genre_count', ascending=False)","cf489ec8":"stat2.head(10)","4087ae26":"stat2.tail(10)","ab8410aa":"#obtengo el total de distintos generos.\nstat2.shape","0c8774d8":"#uniendo la peliculas por genero, y visualizando cuantas peliculas tienen asociado un unico genero.\nstat = stat1.merge(stat2, how='left', left_index=True, right_index=True).fillna(0)","a1517432":"stat.genre_count=stat.genre_count.astype(int)\nstat.rename(columns={'genre_count': 'No. of movies with only 1 genre'},inplace=True)","aa9fc0eb":"stat.head()","61d7c2de":"stat.tail()","b7abc2dd":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom wordcloud import WordCloud\n\nplt.rcParams['figure.figsize'] = (15, 15)\nwordcloud = WordCloud(background_color = 'white', width = 1200,  height = 1200, max_words = 121).generate(str(data['genres']))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most Popular Items',fontsize = 20)\nplt.show()","d10feb5d":"# looking at the frequency of most popular items \n\nplt.rcParams['figure.figsize'] = (18, 7)\ncolor = plt.cm.copper(np.linspace(0, 1, 40))\ndata['genres'].value_counts().head(40).plot.bar(color = color)\nplt.title('frequency of most popular items', fontsize = 20)\nplt.xticks(rotation = 90 )\nplt.grid()\nplt.show()","bed52cd5":"y = data['genres'].value_counts().head(50).to_frame()\ny.index","c7d677ec":"# plotting a tree map\n\nplt.rcParams['figure.figsize'] = (20, 20)\ncolor = plt.cm.cool(np.linspace(0, 1, 50))\nsquarify.plot(sizes = y.values, label = y.index, alpha=.8, color = color)\nplt.title('Tree Map for Popular Items')\nplt.axis('off')\nplt.show()","50c11972":"#movies_genero\n#visualizo las pprimeras 15 peliculas por genero aventura\n\nmovies_genero['Adventure'] = 'adventure'\nfood = movies_genero.truncate(before = -1, after = 15)","65d92302":"import networkx as nx\n\nfood = nx.from_pandas_edgelist(food, source = 'Adventure', target = 'title', edge_attr = True)","468cb748":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (20, 20)\npos = nx.spring_layout(food)\ncolor = plt.cm.Wistia(np.linspace(0, 15, 1))\nnx.draw_networkx_nodes(food, pos, node_size = 15000, node_color = color)\nnx.draw_networkx_edges(food, pos, width = 3, alpha = 0.6, edge_color = 'black')\nnx.draw_networkx_labels(food, pos, font_size = 20, font_family = 'sans-serif')\nplt.axis('off')\nplt.grid()\nplt.title('Top 15 First Choices', fontsize = 40)\nplt.show()","23059012":"#movies_genero\n#visualizo las pprimeras 15 peliculas por genero aventura\nmovies_genero['Comedy'] = 'Comedy'\nfood = movies_genero.truncate(before = -1, after = 15)","3341d276":"import networkx as nx\n\nfood = nx.from_pandas_edgelist(food, source = 'Comedy', target = 'title', edge_attr = True)","a7d35eba":"import warnings\nwarnings.filterwarnings('ignore')\n\nplt.rcParams['figure.figsize'] = (20, 20)\npos = nx.spring_layout(food)\ncolor = plt.cm.Wistia(np.linspace(0, 15, 1))\nnx.draw_networkx_nodes(food, pos, node_size = 15000, node_color = color)\nnx.draw_networkx_edges(food, pos, width = 3, alpha = 0.6, edge_color = 'black')\nnx.draw_networkx_labels(food, pos, font_size = 20, font_family = 'sans-serif')\nplt.axis('off')\nplt.grid()\nplt.title('Top 15 First Choices', fontsize = 40)\nplt.show()","019638a9":"movies_genero.set_index(['movieId','title'],inplace=True)","253ddbf1":"movies_genero = data.drop(['movieId','genres','title'],1).join(data.genres.str.get_dummies())\npd.options.display.max_columns=100\nmovies_genero.head()","1e1978bb":"frequent_itemsets = apriori(movies_genero, min_support = 0.02, use_colnames=True)\nfrequent_itemsets['length'] = frequent_itemsets['itemsets'].apply(lambda x: len(x))\nfrequent_itemsets","330afd13":"# getting th item sets with length = 2 and support more han 4%\nfrequent_itemsets[ (frequent_itemsets['length'] == 2) &\n                   (frequent_itemsets['support'] >= 0.04) ]","6e7faf44":"# getting th item sets with length = 1 and support more han 5%\n\nfrequent_itemsets[ (frequent_itemsets['length'] == 1) &\n                   (frequent_itemsets['support'] >= 0.05) ]","55b8c118":"frequent_itemsets[ frequent_itemsets['itemsets'] == {'Comedy', 'Drama'} ]","bdb65d35":"frequent_itemsets[ frequent_itemsets['itemsets'] == {'Adventure', 'Action'} ]","42809078":"frequent_itemsets[ frequent_itemsets['itemsets'] == {'Comedy', 'Romance'} ]","24ca1c58":"### -Indique la calidad del dataset seleccionado, considerando valores faltantes.\ndatos duplicados y valores anomalos, por ejemplo.","88abf905":"## Association Mining","bfbc2bbf":"El proposito del dataset es indicar el genero al que pertenecen distintas peliculas, tomando en consideracion que una pelicula puede tener mas de un genero. ","e451cc6a":"## Applying apriori","384c193f":"### - Describir el proposito del dataset seleccionado, incluyendo el porque fue constitudo este dataset originalmente.\n\n","0e4d2e4e":"##### la asociacion entre ciertos generos tiene un buen soporte.\npara las peliculas de genero Comedy se suele tener relacion con el genero Romance y el Genero Drama, con un soporte de 0.093 y 0.069 respectivamanente.\n\npara las peliculas de genero aventura el soporte es de 0.035 de que sean tambien del genero accion, en caso contrario el valor del soporte \n\n","193bbb9e":"## Conclusiones","1df380b7":"## Selecting and Filtering the Results","996391f8":"## **Data Visualizations**","663908e0":"El dataset no posse valores faltantes, es de calidad bastante buena en cuanto a las filas, pero con pocas columnas ya que solo cuenta con titulos de peliculas y sus generos asociados, sin mas informacion que indique de donde fueron obtenidos estos datos.","a66589ec":"**Importing the dataset**"}}