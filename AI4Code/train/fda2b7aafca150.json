{"cell_type":{"d636091f":"code","4c7ab4b9":"code","1b541f3a":"code","f4d16b94":"code","6beb5d2a":"code","3cb97d4c":"code","f7354501":"code","f52a72b3":"code","b3456033":"code","b55432b4":"code","370ba1c4":"markdown","0f89a3fe":"markdown","aa9c0bb9":"markdown","2b5e0f7c":"markdown","914bba5c":"markdown","7fda36d8":"markdown","6dd22e2c":"markdown","077caf45":"markdown","626e6ac5":"markdown"},"source":{"d636091f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression,Ridge\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor,VotingRegressor,StackingRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.manifold import TSNE\nfrom catboost import CatBoostRegressor\nfrom scipy import stats\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4c7ab4b9":"train = pd.read_csv(\"..\/input\/bike-sharing-demand\/train.csv\", parse_dates=['datetime'])\ntest = pd.read_csv(\"..\/input\/bike-sharing-demand\/test.csv\", parse_dates=['datetime'])\n\ntrain.drop(['casual','registered'],axis=1,inplace=True)\ntrain.drop(['temp'],axis=1,inplace=True)\ntest.drop(['temp'],axis=1,inplace=True)\n\nprint('train:',train.shape)\nprint('test:',test.shape)","1b541f3a":"train['year'] = train['datetime'].dt.year\ntrain['month'] = train['datetime'].dt.month\ntrain['day'] = train['datetime'].dt.day\ntrain['hour'] = train['datetime'].dt.hour\ntrain['dayofweek'] = train['datetime'].dt.dayofweek\n\ntest['year'] = test['datetime'].dt.year\ntest['month'] = test['datetime'].dt.month\ntest['day'] = test['datetime'].dt.day\ntest['hour'] = test['datetime'].dt.hour\ntest['dayofweek'] = test['datetime'].dt.dayofweek\n\ntrain.drop(['datetime'],axis=1,inplace=True)\ntest_dates = test['datetime']","f4d16b94":"sns.boxplot(train['count'])\nplt.title('Boxplot of count without log transform')\nplt.show()\ntrain['count'] = train['count'].map(np.log1p)\nsns.boxplot(train['count'])\nplt.title('Boxplot of count with log transform')\nplt.show()","6beb5d2a":"X = train.drop(['count'],axis=1)\ny = train['count']\n\nx_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.3)","3cb97d4c":"ridge = Ridge()\nridge_params = {'alpha':(0.001,0.005,0.01,0.05,0.1,0.5,1)}\ngrid = GridSearchCV(ridge,ridge_params,scoring='r2')\ngrid.fit(x_train,y_train)\nridge = grid.best_estimator_\n\nsvr = SVR()\nsvr_params = {'kernel':('linear', 'poly', 'rbf'),\n             'C':(0.001,0.005)}\ngrid = GridSearchCV(svr,svr_params,scoring='r2')\ngrid.fit(x_train,y_train)\nsvr = grid.best_estimator_\n\nkneighb = KNeighborsRegressor()\nkneighb_params = {'n_neighbors': (range(2,15))}\ngrid = GridSearchCV(kneighb,kneighb_params,scoring='r2')\ngrid.fit(x_train,y_train)\nkneighb = grid.best_estimator_\n\nrf = RandomForestRegressor().fit(x_train,y_train)\n\nvoting_estimators = [('svr',svr),('rf',rf),('kneighb',kneighb),('ridge',ridge)]\nvoting = VotingRegressor(voting_estimators).fit(x_train,y_train)\n\n","f7354501":"names = ['svr','kneighb','rf','ridge','voting']\nscores = []\nfor counter,i in enumerate([svr,kneighb,rf,ridge,voting]):\n    scores.append( mean_squared_error(y_test,i.predict(x_test)) )\n    \ntmp = pd.DataFrame(scores,names).T\n\nplt.figure(figsize=(15,5))\nplt.bar(names,scores,align='edge')\n\ntmp.head(5)","f52a72b3":"xgb = XGBRegressor(n_estimators=700,\n                  max_depth=7,\n                  learning_rate=0.05)\nxgb.fit(x_train,y_train)\n\nlgb = LGBMRegressor(n_estimators=600,\n                   max_depth=6,\n                   learning_rate=0.1)\nlgb.fit(x_train,y_train)\n\nctb = CatBoostRegressor(n_estimators=500,\n                   max_depth=5,\n                   learning_rate=0.1,verbose=0)\nctb.fit(x_train,y_train)\n\ngb_ensemble = [('xgb',xgb),('lgb',lgb),('ctb',ctb)]\nvoting_gb = VotingRegressor(gb_ensemble).fit(x_train,y_train)\n\n","b3456033":"gb_ensemble = [('xgb',xgb),('lgb',lgb),('ctb',ctb)]\nvoting_gb = VotingRegressor(gb_ensemble).fit(x_train,y_train)\n\nnames_gb = ['xgb','lgb','ctb','gb ensemble']\nscores_gb = []\nfor counter,i in enumerate([xgb,lgb,ctb,voting_gb]):\n    scores_gb.append( mean_squared_error(y_test,i.predict(x_test)) )\n    \ntmp = pd.DataFrame(scores_gb,names_gb).T\n\ntmp.head(5)","b55432b4":"stacked_estimators = [('xgb',xgb),('lgb',lgb),('ctb',ctb),]\nfinals = [svr,kneighb,rf,ridge,voting]\n\nfor counter,i in enumerate(finals):\n    stacked = StackingRegressor(estimators = stacked_estimators,\n                           final_estimator=i).fit(x_train,y_train)\n    metric = mean_squared_error(y_test,stacked.predict(x_test))\n    print(names[counter],' as meta-model score: ',metric)\n","370ba1c4":"### Now we will check each of models from the first chunk as a Meta Model in Stacking. By the way, usually for base learners are not boosting models, but in order to check something let's try. ","0f89a3fe":"# Modeling","aa9c0bb9":"### Also, it is important to transform the target variable to avoid skewness and outliers","2b5e0f7c":"### So, First approach is voting. This is the simple one. Just average all predictions and give the overall answer. Anyway, with grid search it gave really good results, but Random Fores outperfomed voting. It seems like this data was constructed especcialy for him. Our goal is to build powerful stacking model, that's why let's try boosting methods next","914bba5c":"### Yes, Gradient Boosting Voting outperformed his 'weak' learners :)","7fda36d8":"### Here are just some features extraction from Timestamp","6dd22e2c":"### SVR model as a meta-model ouperfomed others slightly. But anyway, this is an amazing result.\n### Upvote if you like my solution :)","077caf45":"### These models represents the best boosting libraries nowadays. Moreover, they do have amazing parametres. Like in previous chunks we will check the perfomance of each model separately before have a look at voting perfomance","626e6ac5":"# Introduction\n### The purpose of this notebook is to give some information and approach of using ensemble methods from custom estimators. I did not really apply a lot of Features Engineering and Transformation to save your time and ,indeed, show how stacking is powerful :)"}}