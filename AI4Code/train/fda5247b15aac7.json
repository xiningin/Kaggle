{"cell_type":{"81ca47de":"code","b945f0b2":"code","54b69eb7":"code","638eab6a":"code","ce4ce8c1":"code","463a7a0d":"code","cf2eb4a6":"code","b368cc75":"code","a60c849f":"code","1386dbb8":"code","1febb648":"code","a20e3e07":"code","2edef240":"code","a6ce717e":"code","01e2285f":"code","5afb9e67":"code","6c38f876":"code","ed5b8854":"code","e8683938":"code","b1c06f39":"code","694f131c":"code","bfb21430":"code","59f31ece":"code","771c69f1":"code","9d8505d1":"code","2c8ff5ff":"code","941a830e":"code","67086fb3":"code","0c408e84":"markdown","8171c616":"markdown","320a44f1":"markdown","06dcfeb7":"markdown","bc1b2da7":"markdown","24628930":"markdown","061dba72":"markdown","ad72904e":"markdown","aca1e89e":"markdown","27de3ab5":"markdown","d0563bc6":"markdown","214e2377":"markdown"},"source":{"81ca47de":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')","b945f0b2":"# Train data\ndf_train = pd.read_csv(\"..\/input\/blood-train.csv\")\ndf_train.head()","54b69eb7":"# Test data\ndf_test = pd.read_csv(\"..\/input\/blood-test.csv\")\ndf_test.head()","638eab6a":"#labelling\ndf_train.rename(columns={\"Unnamed: 0\":\"Donor_id\"},inplace=True)\ndf_train.head()","ce4ce8c1":"df_test.rename(columns={\"Unnamed: 0\":\"Donor_id\"},inplace=True)\ndf_test.head()","463a7a0d":"df_train.shape, df_test.shape","cf2eb4a6":"df_train.info()\nprint(\"\\n--------------------------------------\\n\")\ndf_test.info()","b368cc75":"#Statistical Inference\n\ndf_train.describe()","a60c849f":"df_test.describe()","1386dbb8":"# Correlation\ntrain_corr = df_train.corr()\nsns.heatmap(train_corr)","1febb648":"test_corr = df_test.corr()\nsns.heatmap(test_corr)","a20e3e07":"# Training data\nX_train = df_train.iloc[:,[1,2,3,4]].values\ny_train = df_train.iloc[:,-1].values","2edef240":"X_train,y_train","a6ce717e":"# Test data\nX_test = df_test.iloc[:,[1,2,3,4]].values","01e2285f":"X_test","5afb9e67":"#Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nScaler = StandardScaler()\nX_train = Scaler.fit_transform(X_train)\n\nX_test = Scaler.fit_transform(X_test)","6c38f876":"X_train, X_test","ed5b8854":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()\nclassifier.fit(X_train,y_train)","e8683938":"y_pred = classifier.predict(X_test)","b1c06f39":"score = classifier.score(X_train,y_train)\nscore","694f131c":"#Applying k-fold cross validation\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=classifier,X=X_train,y=y_train,cv=5)\nmean = accuracies.mean()\nstd = accuracies.std()","bfb21430":"mean,std","59f31ece":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(random_state=0)\nrf.fit(X_train,y_train)\nscore = rf.score(X_train,y_train)\nscore","771c69f1":"y_pred = rf.predict(X_test)","9d8505d1":"from xgboost import XGBClassifier\nxg = XGBClassifier()\nxg.fit(X_train,y_train)\nscore = xg.score(X_train,y_train)\nscore","2c8ff5ff":"#Applying k-fold cross validation\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=xg,X=X_train,y=y_train,cv=10)\nmean = accuracies.mean()\nstd = accuracies.std()","941a830e":"mean,std","67086fb3":"y_pred = xg.predict(X_test)","0c408e84":"<h1>Logistic Regression<\/h1>\n<p style=\"padding-left:10px\">Building a Logistic Regression model<\/p>","8171c616":"<h1>The Blood Transfusion Service Center Dataset<\/h1>","320a44f1":"<h1>Data Preprocessing<\/h1>","06dcfeb7":"<h3 style=\"padding-left:10px\">Importing Necessary Libraries<\/h3>","bc1b2da7":"<b>No missing values<\/b>","24628930":"<p>So this is how our data looks like, you can see we have multiple columns in our data but the Unnamed:0 should be either removed or labeled.<\/p>","061dba72":"<h1>Random Forest<\/h1>","ad72904e":"<p>We will explore our data now.<\/p>","aca1e89e":"<h1>XGBoost<\/h1>","27de3ab5":"<h3 style=\"padding-left:10px\">Reading the dataset<\/h3>","d0563bc6":"<p style=\"padding:5px;\">Given our mission, we're interested in predicting if a blood donor will donate within a given time window.<\/p>\n\n<p style=\"padding-left:6px\">Predict if the donor will give in March 2007\nThe goal is to predict the last column, whether he\/she donated blood in March 2007.<\/p>\n\n<p style=\"padding-left:10px\">Use information about each donor's history<\/p>\n<ul>\n    <li><strong>Months since Last Donation :<\/strong> this is the number of monthis since this donor's most recent donation.<\/li>\n    <li><strong>Number of Donations :<\/strong> this is the total number of donations that the donor has made.<\/li>\n    <li><strong>Total Volume Donated :<\/strong> this is the total amound of blood that the donor has donated in cubuc centimeters.<\/li>\n<li><strong>Months since First Donation:<\/strong> this is the number of months since the donor's first donation.<\/li>\n<\/ul>","214e2377":"<p style=\"padding-left:10px\">We have two files <b>blood-train.csv<\/b> and <b>blood-test.csv<\/b><\/p>\n<ul><li><b>blood-train.csv<\/b> : Training data<\/li>\n    <li><b>blood-test.csv<\/b> : Test data<\/li><\/ul>"}}