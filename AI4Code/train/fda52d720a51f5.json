{"cell_type":{"404fb112":"code","5e8f2470":"code","a3778f1e":"code","af88dcd9":"code","81fde0dc":"code","51b2eb98":"code","6ca7f54e":"code","0095d8a6":"code","5fc3e070":"code","0d199fca":"code","9675f03a":"code","3361e04a":"code","e2c5976b":"code","7f8f3b3e":"code","70bac7d6":"code","ef005860":"code","19cbbd32":"code","1595bdfe":"code","4c8ab725":"code","74a00738":"code","c9c77a32":"code","c22a143b":"code","bfc73923":"code","4c49da8d":"code","d9d5f3f5":"code","bcd6269d":"code","d04f640f":"code","30d12150":"code","069f98d5":"code","6a034862":"code","48376673":"code","a7faeba7":"code","e61c493c":"code","b07e25c3":"code","2e147198":"code","f836fcfa":"code","0324170e":"code","c4cf2fb6":"code","97aab6fa":"code","93c29c25":"code","270f50d6":"code","76725d6a":"code","c9ea48f7":"code","647f74fd":"code","2f443059":"code","f2ccb2c8":"code","f77b505b":"code","0f44a450":"code","d546f05e":"code","24fafb7b":"code","fa6d7163":"code","e8e47fe9":"code","ee49258c":"code","5449f961":"code","f1cc1cb2":"code","6f65ee67":"code","f7a3f37f":"code","49eccfb1":"code","c6e0b0fd":"code","f63bace6":"code","76d451a1":"code","bf355d53":"code","c8f281b5":"code","71af11d3":"code","e01a338b":"code","f28ff489":"code","4605be3b":"code","bca074db":"code","6afd0794":"code","11ef0aa9":"code","eab21ef6":"code","b4a348c0":"code","5d411a5b":"code","7a6ec49a":"code","12234cee":"code","cdaf4212":"code","0a686e83":"code","c4985ba3":"code","73189acc":"code","837cee30":"code","0374c754":"code","68cf5f0f":"code","5f729107":"code","952c63ef":"code","2a4f3436":"code","4ef84523":"markdown","f8c35ed2":"markdown","080f7e4b":"markdown","4776b797":"markdown","9311eb15":"markdown","75157714":"markdown","09763a30":"markdown","77a85fb3":"markdown","cd225597":"markdown","27ed227e":"markdown","df4b92cc":"markdown","23b02efc":"markdown","ac7da46f":"markdown","6cae5a23":"markdown","1ed617d0":"markdown","dd885fee":"markdown","394758f8":"markdown","1cf660a3":"markdown","9dab525e":"markdown","985507d4":"markdown","a2b2ce82":"markdown","a047b90c":"markdown","6a7364d0":"markdown","0096fb40":"markdown","8762f291":"markdown","3f078d95":"markdown","c8d6e6e6":"markdown"},"source":{"404fb112":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e8f2470":"#importing libraries\nimport pandas as pd \nimport numpy as np \nimport seaborn as sns \nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.metrics import accuracy_score,confusion_matrix\n\nimport warnings\nwarnings.filterwarnings('ignore')","a3778f1e":"pip install openpyxl","af88dcd9":"df=pd.read_excel(\"..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx\")","81fde0dc":"df.head()","51b2eb98":"df.info()","6ca7f54e":"df.shape","0095d8a6":"# checking if the dataset has null values\ndf.isnull().sum()","5fc3e070":"#dropping these null values \ndf.dropna(inplace=True)","0d199fca":"df.isnull().sum()","9675f03a":"df.dtypes","3361e04a":"# defining a function to change type to datetime\ndef change_into_datetime(col):\n    df[col]=pd.to_datetime(df[col])","e2c5976b":"for i in ['Date_of_Journey', 'Dep_Time', 'Arrival_Time']:\n    change_into_datetime(i)","7f8f3b3e":"df.dtypes","70bac7d6":"(df['Date_of_Journey'].dt.year).value_counts()","ef005860":"df['journey_day']=df['Date_of_Journey'].dt.day\ndf['journey_month']=df['Date_of_Journey'].dt.month","19cbbd32":"df.drop('Date_of_Journey', axis=1, inplace=True)","1595bdfe":"df.head()","4c8ab725":"# creating a function for extracting hours and minutes\ndef extract_hour(data,col):\n    data[col+'_hour']=data[col].dt.hour\n\ndef extract_minute(data,col):\n    data[col+'_minute']=data[col].dt.minute\n\n# dropping the original column now\ndef drop_col(data,col):\n    data.drop(col,axis=1,inplace=True)","74a00738":"# calling the functions for Departure Time\n\n#extracting hours\nextract_hour(df,'Dep_Time')\n\n#extracting minutes\nextract_minute(df,'Dep_Time')\n\n#drop the column\ndrop_col(df,'Dep_Time')","c9c77a32":"# now calling the function for Arrival Time\n\n#extracting hour\nextract_hour(df,'Arrival_Time')\n\n#extracting min\nextract_minute(df,'Arrival_Time')\n\n\n#drop the column\ndrop_col(df,'Arrival_Time')","c22a143b":"df.head()","bfc73923":"duration=list(df['Duration'])\nfor i in range(len(duration)):\n    if len(duration[i].split(' '))==2:\n        pass\n    else:\n        if 'h' in duration[i]: # Check if duration contains only hour\n             duration[i]=duration[i] + ' 0m' # Adds 0 minute\n        else:\n             duration[i]='0h '+ duration[i]","4c49da8d":"df['Duration']=duration","d9d5f3f5":"def hour(x):\n    return x.split(' ')[0][0:-1]\n\ndef minutes(x):\n    return x.split(' ')[1][0:-1]","bcd6269d":"df['dur_hour']=df['Duration'].apply(hour)\ndf['dur_min']=df['Duration'].apply(minutes)","d04f640f":"drop_col(df,'Duration')","30d12150":"df['dur_hour'] = df['dur_hour'].astype(int)\ndf['dur_min'] = df['dur_min'].astype(int)","069f98d5":"column=[column for column in df.columns if df[column].dtype=='object']\nprint(column)","6a034862":"cont_col=[cont_col for cont_col in df.columns if df[cont_col].dtype!='object']\nprint(cont_col)","48376673":"categorical=df[column]","a7faeba7":"categorical.head()","e61c493c":"categorical['Airline'].value_counts()","b07e25c3":"df.head()","2e147198":"plt.figure(figsize=(15,8))\nsns.boxplot(x='Airline',y='Price',data=df.sort_values('Price',ascending=False));\nplt.xticks(rotation=90);","f836fcfa":"plt.figure(figsize=(15,8))\nsns.boxplot(x='Total_Stops',y='Price',data=df.sort_values('Price',ascending=False));","0324170e":"# performing OneHotEncoding on 'Airline' column\nAirline=pd.get_dummies(categorical['Airline'],drop_first=True)","c4cf2fb6":"Airline.head()","97aab6fa":"plt.figure(figsize=(15,15))\nsns.catplot(x='Source',y='Price',data=df.sort_values('Price',ascending=False),kind='boxen');","93c29c25":"#encoding of source column using onehotencoding\nsource=pd.get_dummies(categorical['Source'],drop_first=True)\nsource.head()","270f50d6":"plt.figure(figsize=(15,8))\nsns.boxplot(x='Destination',y='Price',data=df.sort_values('Price',ascending=False));","76725d6a":"#encoding of destination column\ndestination=pd.get_dummies(categorical['Destination'],drop_first=True)\ndestination.head()","c9ea48f7":"categorical['Route'].value_counts()","647f74fd":"categorical['Route1']=categorical['Route'].str.split('\u2192').str[0]\ncategorical['Route2']=categorical['Route'].str.split('\u2192').str[1]\ncategorical['Route3']=categorical['Route'].str.split('\u2192').str[2]\ncategorical['Route4']=categorical['Route'].str.split('\u2192').str[3]\ncategorical['Route5']=categorical['Route'].str.split('\u2192').str[4]","2f443059":"categorical.head()","f2ccb2c8":"drop_col(categorical,'Route')","f77b505b":"categorical.isnull().sum()","0f44a450":"# filling NaN values \nfor i in ['Route3', 'Route4', 'Route5']:\n    categorical[i].fillna('None',inplace=True)","d546f05e":"categorical.isnull().sum()","24fafb7b":"df.head()","fa6d7163":"sns.lineplot(x=df['Arrival_Time_hour'], y=df['Price']);","e8e47fe9":"df.plot.hexbin(x='Arrival_Time_hour',y='Price',gridsize=15);","ee49258c":"# Applying Label Encoder\nfrom sklearn.preprocessing import LabelEncoder\nencoder=LabelEncoder()","5449f961":"for i in ['Route1', 'Route2', 'Route3', 'Route4', 'Route5']:\n    categorical[i]=encoder.fit_transform(categorical[i])","f1cc1cb2":"categorical.head()","6f65ee67":"drop_col(categorical,'Additional_Info')","f7a3f37f":"categorical['Total_Stops'].unique()","49eccfb1":"# encoding Total stops\ndict={'non-stop':0, '2 stops':2, '1 stop':1, '3 stops':3, '4 stops':4}\ncategorical['Total_Stops']=categorical['Total_Stops'].map(dict)","c6e0b0fd":"categorical['Total_Stops']","f63bace6":"# dropping columns from categorical table which wee don't need\ndrop_col(categorical,'Source')\ndrop_col(categorical,'Destination')\ndrop_col(categorical,'Airline')","76d451a1":"final_df=pd.concat([categorical,Airline,source,destination,df[cont_col]],axis=1)","bf355d53":"final_df.head()","c8f281b5":"plt.figure(figsize=(16,4))\nsns.distplot(final_df['Price']);","71af11d3":"print(final_df['Price'].skew())\nfinal_df['Price'].kurt()","e01a338b":"plt.figure(figsize=(16,4))\nsns.boxplot(final_df['Price']);","f28ff489":"final_df['Price']=np.where(final_df['Price']>=40000,final_df['Price'].median(),final_df['Price'])","4605be3b":"plt.figure(figsize=(16,4))\nsns.distplot(final_df['Price']);","bca074db":"plt.figure(figsize=(16,4))\nsns.boxplot(final_df['Price']);","6afd0794":"# Seperate the dataset in X and y columns\nX=final_df.drop('Price', axis=1)\ny=df['Price']","11ef0aa9":"from sklearn.feature_selection import mutual_info_classif","eab21ef6":"mutual_info_classif(X,y)","b4a348c0":"imp = pd.DataFrame(mutual_info_classif(X,y),index=X.columns)\nimp","5d411a5b":"imp.columns=['importance']\nimp.sort_values(by='importance',ascending=False)","7a6ec49a":"# spiliting the dataset\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.20,random_state=1)","12234cee":"from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\ndef predict(ml_model):\n    print('Model is: {}'.format(ml_model))\n    model= ml_model.fit(X_train,y_train)\n    print(\"Training score: {}\".format(model.score(X_train,y_train)))\n    predictions = model.predict(X_test)\n    print(\"Predictions are: {}\".format(predictions))\n    print('\\n')\n    r2score=r2_score(y_test,predictions) \n    print(\"r2 score is: {}\".format(r2score))\n          \n    print('MAE:{}'.format(mean_absolute_error(y_test,predictions)))\n    print('MSE:{}'.format(mean_squared_error(y_test,predictions)))\n    print('RMSE:{}'.format(np.sqrt(mean_squared_error(y_test,predictions))))\n     \n    sns.distplot(y_test-predictions)","cdaf4212":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","0a686e83":"predict(RandomForestRegressor())","c4985ba3":"predict(KNeighborsRegressor())","73189acc":"predict(DecisionTreeRegressor())","837cee30":"from sklearn.model_selection import RandomizedSearchCV","0374c754":"random_grid = {\n    'n_estimators' : [100, 120, 150, 180, 200,220],\n    'max_features':['auto','sqrt'],\n    'max_depth':[5,10,15,20],\n    }","68cf5f0f":"rf=RandomForestRegressor()\nrf_random=RandomizedSearchCV(estimator=rf,param_distributions=random_grid,cv=3,verbose=2,n_jobs=-1,)\n\nrf_random.fit(X_train,y_train)\n\n# best parameter\nrf_random.best_params_","5f729107":"# best parameter\nrf_random.best_params_","952c63ef":"#predicting the values\nprediction = rf_random.predict(X_test)\n\n#distribution plot between actual value and predicted value\nsns.displot(y_test-prediction);","2a4f3436":"r2_score(y_test,prediction)","4ef84523":"#### Checking if some features require transformations:","f8c35ed2":"### Getting to know our target variable!!","080f7e4b":"##### Maximum stops in any route is 4","4776b797":"We can drop these missing values as these are very less","9311eb15":"##### Destination vs Price Analysis","75157714":"#### Checking for outliers","09763a30":"##### Apply pre-processing on duration column,Separate Duration hours and minute from duration.","77a85fb3":"## After the preprocessing our data is ready for modelling","cd225597":"#### After hypertunnning the model its accuracy increases","27ed227e":"#### We have tried different model and it is clear that RandomForestRegressor performs best now we have to do hypertunning of the model","df4b92cc":"##### Airline vs Price Analysis","23b02efc":"#### Handling outliers:\n\n##### As there are some outliers in 'Price' feature, we replace it with median","ac7da46f":"##### Total_Stops vs Price Analysis","6cae5a23":"##### Arrival_Time_hour vs Price","1ed617d0":"##### From Arrival_Time and Dep_Time we extract hours and minutes and create new columns to store these values:","dd885fee":"##### Finding continous values ","394758f8":"##### Source vs Price Analysis","1cf660a3":"### Feature Selection","9dab525e":"##### Finding the Categorical Values","985507d4":"### Models","a2b2ce82":"### Looking at our target variable","a047b90c":"#### From the graph it is clear that we predicted with more than 80% accuracy","6a7364d0":"##### As some flights have only 2 route so, Route3, Route4, Route5 has value NaN for many rows.","0096fb40":"### Hypertunning the model","8762f291":"##### Looking at the transformed dataset","3f078d95":"##### We extract day and month from Date_of_Journey and store these values in two new columns\n##### Then there will be no use of Date_of_Journey column so we can drop it.","c8d6e6e6":"#### As we can see \"Date_of_Journey\", \"Dep_Time\", \"Arrival_Time\" have object type so we need to change it to datetime type for proper prediction"}}