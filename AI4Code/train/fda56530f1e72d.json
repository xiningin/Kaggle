{"cell_type":{"dd2397a2":"code","a4c132a7":"code","7a74bfb7":"code","49b7d20f":"code","d044bfa2":"code","7937cac6":"code","fefed6b3":"code","ae0e7653":"markdown","cb4af15d":"markdown","2543030b":"markdown","c68ac03f":"markdown","09ba8c19":"markdown","5c5605c9":"markdown","02442219":"markdown","05322408":"markdown","6fa2e449":"markdown","b5fc6a13":"markdown","559190aa":"markdown","02de0f1a":"markdown"},"source":{"dd2397a2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndef get_days(assigned_days, n_people):\n    days = np.zeros(assigned_days.max(), int)\n    for i, r in enumerate(assigned_days):\n        days[r-1] += n_people[i]\n    return days\ndef dataset_plot(dataset):\n    desired = dataset.values[:,1:11]\n    n_people = dataset.values[:,11]\n    n_days = desired.max()\n    plt.rcParams['figure.figsize'] = [20, 5]\n    for i in range(10):\n        plt.plot(np.arange(n_days), get_days(desired[:,i], n_people), alpha=0.9, label=f'choice {i}')\n    days = np.zeros(desired.max(), int)\n    for i, r in enumerate(desired):\n        for j in range(10):\n            days[r[j]-1] += n_people[i]\n    plt.bar(np.arange(n_days), days\/10, label='mean choices')\n    plt.ylim(0, 1100)\n    plt.legend()\n    plt.show()","a4c132a7":"def example_ortools(desired, n_people, has_accounting=True):\n    from ortools.linear_solver import pywraplp\n    def accounting_penalty(day, next_day):\n        return (day-125)*(day**(0.5 + abs(day-next_day)\/50.0))\/400\n    NUM_THREADS = 4\n    NUM_SECONDS = 3600\n    FAMILY_COST = np.asarray([0,50,50,100,200,200,300,300,400,500])\n    MEMBER_COST = np.asarray([0, 0, 9,  9,  9, 18, 18, 36, 36,235])\n    num_days = desired.max()\n    num_families = desired.shape[0]\n    solver = pywraplp.Solver('Santa2019', pywraplp.Solver.CBC_MIXED_INTEGER_PROGRAMMING)\n#     solver.set_time_limit(NUM_SECONDS*NUM_THREADS*1000)\n    solver.SetNumThreads(NUM_THREADS)\n    C, B, I = {}, {}, {}\n    for fid, choices in enumerate(desired):\n        for cid in range(10):\n            B[fid, choices[cid]-1] = solver.BoolVar('')\n            C[fid, choices[cid]-1] = FAMILY_COST[cid] + n_people[fid] * MEMBER_COST[cid]\n\n    for day in range(num_days):\n        I[day] = solver.IntVar(125, 300, f'I{day}')\n        solver.Add(solver.Sum(n_people[fid]*B[fid, day] for fid in range(num_families) if (fid,day) in B) == I[day])\n\n    for fid in range(num_families):\n        solver.Add(solver.Sum(B[fid, day] for day in range(num_days) if (fid,day) in B) == 1)\n\n    objective = solver.Sum(C[fid, day]*B[fid, day] for fid, day in B)\n    if has_accounting:\n        Y = {}\n\n        for day in range(num_days):\n            next_day = np.clip(day+1, 0, num_days-1)\n            gen = [(u,v) for v in range(176) for u in range(176)]\n            for u,v in gen:\n                Y[day,u,v] = solver.BoolVar('')\n            solver.Add(solver.Sum(Y[day,u,v]*u for u,v in gen) == I[day]-125)\n            solver.Add(solver.Sum(Y[day,u,v]*v for u,v in gen) == I[next_day]-125)\n            solver.Add(solver.Sum(Y[day,u,v]   for u,v in gen) == 1)\n            \n        accounting_penalties = solver.Sum(accounting_penalty(u+125,v+125) * Y[day,u,v] for day,u,v in Y)\n        objective += accounting_penalties\n\n    solver.Minimize(objective)\n    sol = solver.Solve()\n    status = ['OPTIMAL', 'FEASIBLE', 'INFEASIBLE', 'UNBOUNDED', 'ABNORMAL', 'MODEL_INVALID', 'NOT_SOLVED']\n    if status[sol] == 'OPTIMAL':\n        print(\"Result: \", objective.solution_value())\n        assigned_days = np.zeros(num_families, int)\n        for fid, day in B:\n            if B[fid, day].solution_value() > 0.5:\n                assigned_days[fid] = day + 1\n        return assigned_days","7a74bfb7":"def example_cplex(desired, n_people, has_accounting=True): # can't run on kaggle notebooks \n    def accounting_penalty(day, next_day):\n        return (day-125)*(day**(0.5 + abs(day-next_day)\/50.0))\/400\n\n    from docplex.mp.model import Model\n    FAMILY_COST = np.asarray([0,50,50,100,200,200,300,300,400,500])\n    MEMBER_COST = np.asarray([0, 0, 9,  9,  9, 18, 18, 36, 36,235])\n    num_days = desired.max()\n    num_families = desired.shape[0]\n    solver = Model(name='Santa2019')\n    solver.parameters.mip.tolerances.mipgap = 0.00\n    solver.parameters.mip.tolerances.absmipgap = 0.00\n    C = {}\n    for fid, choices in enumerate(desired):\n        for cid in range(10):\n            C[fid, choices[cid]-1] = FAMILY_COST[cid] + n_people[fid] * MEMBER_COST[cid]\n\n    B = solver.binary_var_dict(C, name='B')\n    I = solver.integer_var_list(num_days, lb=125, ub=300, name='I')\n\n    for day in range(num_days):\n        solver.add(solver.sum(n_people[fid]*B[fid, day] for fid in range(num_families) if (fid,day) in B) == I[day])\n\n    for fid in range(num_families):\n        solver.add(solver.sum(B[fid, day] for day in range(num_days) if (fid,day) in B) == 1)\n\n    preference_cost = solver.sum(C[fid, day]*B[fid, day] for fid, day in B)\n    if has_accounting:\n        Y = solver.binary_var_cube(num_days, 176, 176, name='Y')\n\n        for day in range(num_days):\n            next_day = np.clip(day+1, 0, num_days-1)\n            gen = [(u,v) for v in range(176) for u in range(176)]\n            solver.add(solver.sum(Y[day,u,v]*u for u,v in gen) == I[day]-125)\n            solver.add(solver.sum(Y[day,u,v]*v for u,v in gen) == I[next_day]-125)\n            solver.add(solver.sum(Y[day,u,v]   for u,v in gen) == 1)\n            \n        gen = [(day,u,v) for day in range(num_days) for v in range(176) for u in range(176)]\n        accounting_penalties = solver.sum(accounting_penalty(u+125,v+125) * Y[day,u,v] for day,u,v in gen)\n        solver.minimize(accounting_penalties+preference_cost)\n    else:\n        solver.minimize(preference_cost)\n\n    solver.print_information()\n    sol = solver.solve(log_output=True)\n    if sol:\n        print(sol.objective_value)\n        assigned_days = np.zeros(num_families, int)\n        for fid, day in C:\n            if sol[B[fid, day]] > 0:\n                assigned_days[fid] = day + 1\n        return assigned_days","49b7d20f":"for n_days in [10,20,40,80]:\n    dataset_plot(pd.read_csv(f'\/kaggle\/input\/santa-2019-{n_days}-uniform-days\/family_data.csv'))\n    dataset_plot(pd.read_csv(f'\/kaggle\/input\/santa-2019-{n_days}-days\/family_data.csv'))\n#     dataset_plot(pd.read_csv(f'\/kaggle\/input\/santa-revenge-of-the-accountants-{n_days}-uniform-days\/family_data.csv'))\n#     dataset_plot(pd.read_csv(f'\/kaggle\/input\/santa-2019-revenge-of-the-accountants-{n_days}-days\/family_data.csv'))","d044bfa2":"for n_days in [10,20,40,80]:\n    ds = pd.read_csv(f'\/kaggle\/input\/santa-2019-{n_days}-uniform-days\/family_data.csv')\n    %time example_ortools(ds.values[:,1:11], ds.values[:,11], False)","7937cac6":"columns = ['competition', 'distribution', 'number days', 'optimum', 'Cplex(seconds)', 'OR-Tools(seconds)']\npd.DataFrame([\n    ['Santa 2019', 'uniform', 10,   0, 0, 0],\n    ['Santa 2019', 'uniform', 20,   0, 0, 1],\n    ['Santa 2019', 'uniform', 40, 150, 2, 3],\n    ['Santa 2019', 'uniform', 80,   0, 3, 4],\n\n    ['Santa 2019', '', 10,  5148,  2,    1],\n    ['Santa 2019', '', 20,  8481,  2, 1317],\n    ['Santa 2019', '', 40, 12090,  3, 'Too long'],\n    ['Santa 2019', '', 80, 32806, 15, 'Too long'],\n\n    ['Santa Revenge', 'uniform', 10,   0, 0, 0],\n    ['Santa Revenge', 'uniform', 20, 100, 1, 3],\n    ['Santa Revenge', 'uniform', 40, 150, 3, 3],\n    ['Santa Revenge', 'uniform', 80, 850, 5, 'Too long'],\n\n    ['Santa Revenge', '', 10,  9206,  0, 'Too long'],\n    ['Santa Revenge', '', 20, 14627,  3, 'Too long'],\n    ['Santa Revenge', '', 40, 22565, 26, 'Too long'],\n    ['Santa Revenge', '', 80, 55212, 44, 'Too long'],\n], columns=columns)","fefed6b3":"pd.DataFrame([\n    ['Santa 2019', 'uniform', 10, 251.5312,  86, 'Too long'],\n    ['Santa 2019', 'uniform', 20, 992.2934, 761, 'Too long'],\n    ['Santa 2019', 'uniform', 40, None, 'Too long', 'Too long'],\n    ['Santa 2019', 'uniform', 80, None, 'Too long', 'Too long'],\n\n    ['Santa 2019', '', 10,  7902.8137, 1960, 'Too long'],\n    ['Santa 2019', '', 20, 12794.1957, 4504, 'Too long'],\n    ['Santa 2019', '', 40, None, 'Too long', 'Too long'],\n    ['Santa 2019', '', 80, None, 'Too long', 'Too long'],\n], columns=columns)","ae0e7653":"### Please upvote my notebooks and datasets if you like my work!","cb4af15d":"**Preference cost:**","2543030b":"### Example Cplex ","c68ac03f":"**Preference cost + Accounting penalty:**","09ba8c19":"Following this topic [Heng CherKeng](https:\/\/www.kaggle.com\/c\/santa-workshop-tour-2019\/discussion\/120764#690889) I have created 2 examples(OR-Tools and Cplex):\n","5c5605c9":"For testing, I have created smaller [datasets](https:\/\/www.kaggle.com\/golubev\/datasets) with uniform distribution and almost original:","02442219":"## Merry Christmas and Happy New Year!","05322408":"Datasets with uniform distributions calculate so fast because almost all families can choose best day:","6fa2e449":"### Resume:\nIf Cplex spend more than 5 seconds on task - OR-Tools can't solve this task in reasonable time.","b5fc6a13":"### Example OR-Tools ","559190aa":"### Let's try my Santa2019 notebooks and datasets:\n* https:\/\/www.kaggle.com\/golubev\/manual-to-improve-submissions\n* https:\/\/www.kaggle.com\/golubev\/c-stochastic-product-search-65ns\n* https:\/\/www.kaggle.com\/golubev\/mip-optimization-preference-cost\n* https:\/\/www.kaggle.com\/golubev\/optimization-preference-cost-mincostflow\n* https:\/\/www.kaggle.com\/golubev\/benchmark-mip-solvers-draft\n* https:\/\/www.kaggle.com\/golubev\/datasets","02de0f1a":"You can practice with smaller datasets for your experiments."}}