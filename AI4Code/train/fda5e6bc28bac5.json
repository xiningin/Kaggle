{"cell_type":{"5ed0d1b3":"code","e385fd3c":"code","e71e5789":"code","0dd6af1d":"code","ea3ae5bb":"code","4f44ab05":"code","bade6db6":"code","6f7770dd":"code","88e2c894":"code","6fa7c493":"code","7ff26b19":"code","89cc72e1":"code","b298e5c4":"code","f87816e3":"code","e4586228":"code","fd98e0e2":"code","5446b295":"code","662f0e4f":"code","3ff002dd":"code","c2871846":"code","2aa971cd":"code","4471ed9d":"code","93cbd301":"code","7500b35e":"markdown","22dd72d0":"markdown","3aa2df35":"markdown","f90e1404":"markdown","667569b4":"markdown","442d78fc":"markdown","17465e37":"markdown","88df3302":"markdown","9ca33a88":"markdown","648dccc3":"markdown","34bb18ba":"markdown","7f896a57":"markdown","eed64857":"markdown","6d5e15ad":"markdown","423220c1":"markdown","9d4a0dfa":"markdown","1764db22":"markdown","d6d92e87":"markdown","0cdfc38e":"markdown","279c9e6a":"markdown","c199a46c":"markdown"},"source":{"5ed0d1b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e385fd3c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\nfrom sklearn.preprocessing import MinMaxScaler \nfrom sklearn.metrics import mean_squared_error\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\nfrom keras.layers import LSTM\nfrom sklearn import preprocessing # how to import preprocessing\nimport sklearn.preprocessing","e71e5789":"np.random.seed(7)","0dd6af1d":"dataset= pd.read_csv('..\/input\/stock-price-prediction-of-apple-inc\/apple_share_price.csv', usecols=[1,2,3,4])\ndataset= dataset.reindex(index= dataset.index[::-1])\ndataset.head()","ea3ae5bb":"obs= np.arange(1, len(dataset)+1, 1)","4f44ab05":"OHLC_avg= dataset.mean(axis=1)\nHLC_avg= dataset[['High', 'Low', 'Close']].mean(axis=1)\nclose_val= dataset[['Close']]","bade6db6":"plt.plot(obs, OHLC_avg, 'r', label = 'OHLC avg')\nplt.plot(obs, HLC_avg, 'b', label = 'HLC avg')\nplt.plot(obs, close_val, 'g', label = 'Closing price')\nplt.legend(loc = 'upper right')\nplt.show()","6f7770dd":"OHLC_avg= np.reshape(OHLC_avg.values, (len(OHLC_avg), 1))\nscaler= MinMaxScaler(feature_range=(0,1))\nOHLC_avg= scaler.fit_transform(OHLC_avg)","88e2c894":"train_OHLC= int(len(OHLC_avg)*0.75)\ntest_OHLC= len(OHLC_avg)-train_OHLC\ntrain_OHLC,test_OHLC= OHLC_avg[:train_OHLC,:], OHLC_avg[:test_OHLC,:]","6fa7c493":"def new_dataset(dataset, step_size):\n    trainX, trainY = [], []\n    for i in range(len(dataset)-step_size-1):\n        a = dataset[i:(i+step_size), 0]\n        trainX.append(a)\n        trainY.append(dataset[i + step_size, 0])\n    return np.array(trainX), np.array(trainY)","7ff26b19":"trainX, trainY = new_dataset(train_OHLC, 1)\ntestX, testY = new_dataset(test_OHLC, 1)","89cc72e1":"trainX= np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))\ntestX= np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))\nstep_size=1","b298e5c4":"model= Sequential()\nmodel.add(LSTM(32, input_shape=(1, step_size), return_sequences= True))\nmodel.add(LSTM(16))\nmodel.add(Dense(1))\nmodel.add(Activation('linear'))","f87816e3":"model.compile(loss= 'mean_squared_error', optimizer='adagrad')\nmodel.fit(trainX, trainY, epochs=5, batch_size=1, verbose=2)","e4586228":"trainpred= model.predict(trainX)\ntestpred= model.predict(testX)","fd98e0e2":"trainpred= scaler.inverse_transform(trainpred)\ntrainY= scaler.inverse_transform([trainY])\ntestpred= scaler.inverse_transform(testpred)\ntestY= scaler.inverse_transform([testY])","5446b295":"trainscore = math.sqrt(mean_squared_error(trainY[0], trainpred[:,0]))\nprint('Train RMSE: %.2f' % (trainscore))","662f0e4f":"testscore= math.sqrt(mean_squared_error(testY[0], testpred[:,0]))\nprint('Test RMSE: %.2f'%(testscore))","3ff002dd":"trainpredplot= np.empty_like(OHLC_avg)\ntrainpredplot[:, :]= np.nan\ntrainpredplot[step_size:len(trainpred)+step_size, :]= trainpred","c2871846":"testpredplot = np.empty_like(OHLC_avg)\ntestpredplot[:, :] = np.nan\ntestpredplot[len(trainpred)+(step_size*2)+1:len(OHLC_avg)-1, :] = testpred","2aa971cd":"OHLC_avg = scaler.inverse_transform(OHLC_avg)","4471ed9d":"plt.plot(OHLC_avg, 'g', label = 'original dataset')\nplt.plot(trainpredplot, 'r', label = 'training set')\nplt.plot(testpredplot, 'b', label = 'predicted stock price\/test set')\nplt.legend(loc = 'upper right')\nplt.xlabel('Time in Days')\nplt.ylabel('OHLC Value of Apple Stocks')\nplt.show()","93cbd301":"last_val = testpred[-1]\nlast_val_scaled = last_val\/last_val\nnext_val = model.predict(np.reshape(last_val_scaled, (1,1,1)))\nprint(\"Last Day Value:\", np.asscalar(last_val))\nprint(\"Next Day Value:\", np.asscalar(last_val*next_val))","7500b35e":"# DE-NORMALIZING FOR PLOTTING","22dd72d0":"# IMPORTING DATASET ","3aa2df35":"# PLOTTING ALL INDICATORS IN ONE PLOT","f90e1404":"# CREATING OWN INDEX FOR FLEXIBILITY","667569b4":"# PLOT OF MAIN OHLC VALUES, TRAIN PREDICTIONS AND TEST PREDICTIONS","442d78fc":"# MODEL COMPILING AND TRAINING","17465e37":"# TIME-SERIES DATASET (FOR TIME T, VALUES FOR TIME T+1)","88df3302":"# LSTM MODEL","9ca33a88":"# CREATING SIMILAR DATASSET TO PLOT TEST PREDICTIONS","648dccc3":"# PREPARATION OF TIME SERIES DATASET","34bb18ba":"# TRAIN-TEST SPLIT","7f896a57":"# TAKING DIFFERENT INDICATORS FOR PREDICTION","eed64857":"# PREDICT FUTURE VALUES\n","6d5e15ad":"# RESHAPING TRAIN AND TEST DATA","423220c1":"# FOR REPRODUCIBILITY","9d4a0dfa":"# DE-NORMALIZING MAIN DATASET ","1764db22":"# CREATING SIMILAR DATASET TO PLOT TRAINING PREDICTIONS","d6d92e87":"# PREDICTION","0cdfc38e":"# TRAINING RMSE","279c9e6a":"# IMPORTING IMPORTANT LIBRARIES","c199a46c":"# TEST RMSE"}}