{"cell_type":{"a7e52ccb":"code","eeba7aa6":"code","aefa668f":"code","47d2bed1":"code","13a31a5a":"code","b9cb1e15":"code","0a5411fc":"code","ea83b0d5":"code","4c06487d":"code","d1fc9580":"code","f9b75b69":"code","244cb93a":"code","fb265faa":"code","0c1353a2":"code","ca443ed2":"code","74337d33":"code","e1968ed0":"code","879499c2":"code","1563c86c":"code","80e63be7":"code","6010d51f":"code","0acf7e86":"code","279f637d":"code","fdf75fcc":"code","119adbb3":"code","17aff5d8":"code","21917a67":"code","e1c0bae9":"code","1cbaa1c1":"code","438e8f0e":"code","125d33d4":"code","c98f10bf":"code","dca95edd":"code","e93074e9":"code","4ba97a42":"code","63c86733":"code","b6f83aed":"code","549b1da9":"code","1e693c02":"code","529b7f36":"code","2ba395dc":"code","97860501":"code","b2b3b079":"code","974b370c":"code","a6bf5ea2":"code","f62bdccd":"code","aff3de99":"code","9e9e4537":"code","90105468":"code","480c28d9":"code","c7277fc3":"code","020a3c83":"code","cabbb134":"code","49ae94de":"code","94b5746c":"code","c201879f":"code","0d771551":"code","c96242b2":"code","cfa71b80":"code","16e9d1f3":"code","e14bd0b1":"code","03623fa1":"code","f513b4aa":"code","28c31fda":"code","e0c37163":"code","ddca3940":"code","d360e627":"code","95c3af8c":"code","962c81df":"code","f50f0cf9":"code","d3f20016":"code","ed7b7845":"code","e05e5adc":"code","43f36cb7":"code","cfaab999":"code","327b5033":"code","27aac3a4":"code","daef95c9":"code","9ffcdb71":"code","0b6b770e":"code","c26046ce":"code","fa2d3d92":"code","d79d5b99":"code","1af65019":"code","bc2dc8df":"code","9a168db0":"code","17a07c07":"code","f04730ca":"code","2ae5ebb7":"code","5bd2fc16":"code","1680fe0a":"code","a7854684":"code","1c7690ff":"code","0a92c17c":"code","bb89741c":"code","878e9c7a":"code","14bb7086":"code","99f58618":"code","876bedd4":"code","b0e6822c":"code","9a24c8a9":"code","863dcded":"code","cfcdb9cc":"code","e2416246":"code","323295c4":"code","a7a52714":"code","8c3d2aae":"code","2421a9bc":"code","9b6dd110":"code","74d365e7":"code","85a82f59":"code","ccce84b2":"code","2ab02283":"code","fa2290ca":"code","03375264":"code","ef57a4ec":"code","9653e43e":"code","d8c99cac":"code","c6bd65dc":"code","f08e119a":"code","518c5fc0":"code","370c8a73":"code","ab0b9913":"code","f0d9abd4":"markdown","2dcc1488":"markdown","a149267a":"markdown","52a4cc22":"markdown","c904b6ef":"markdown","b9d9cc07":"markdown","20b8d19d":"markdown","c8fef88a":"markdown"},"source":{"a7e52ccb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sn","eeba7aa6":"df = pd.read_csv('..\/input\/titanic1\/titanic.csv')","aefa668f":"df","47d2bed1":"df.shape","13a31a5a":"df.columns","b9cb1e15":"df.info","0a5411fc":"df.dtypes","ea83b0d5":"df.count()","4c06487d":"df.isnull()","d1fc9580":"df.notnull()","f9b75b69":"df.isnull().sum()","244cb93a":"df.head()","fb265faa":"df.head(10)","0c1353a2":"df.tail()","ca443ed2":"df.tail(10)","74337d33":"df['Pclass'].head()","e1968ed0":"df.sample()","879499c2":"df.sample(5)","1563c86c":"df[0:10]","80e63be7":"df.describe()","6010d51f":"df.describe().T","0acf7e86":"df['Survived'].value_counts()","279f637d":"df.groupby('PassengerId').size()","fdf75fcc":"df.hist(figsize=(20,20))","119adbb3":"sn.pairplot(df, hue='Survived')","17aff5d8":"df.corr()","21917a67":"sn.heatmap(df.corr())","e1c0bae9":"sn.countplot(x = 'Survived', data=df)","1cbaa1c1":"sn.scatterplot(x = 'Fare', y = 'Age', data=df)","438e8f0e":"sn.distplot(df['Age'])","125d33d4":"df.isnull().sum()","c98f10bf":"#Age data is missing\nplt.figure(figsize=(10,7))\nsn.boxplot(x='Pclass', y='Age', data=df)","dca95edd":"def age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        \n        if Pclass == 1:\n            return 37\n        \n        elif Pclass ==2:\n            return 29\n        \n        else:\n            return 24\n    else:\n        return Age","e93074e9":"df['Age'] = df[['Age', 'Pclass']].apply(age, axis=1)","4ba97a42":"df.isnull().sum()","63c86733":"df['Sex'].head()","b6f83aed":"pd.get_dummies(df['Sex'])","549b1da9":"pd.get_dummies(df['Sex'], drop_first=True)","1e693c02":"gender = pd.get_dummies(df['Sex'], drop_first=True )","529b7f36":"df = pd.concat([df,gender], axis=1)","2ba395dc":"df.head()","97860501":"df.drop('Cabin', axis=1, inplace=True)","b2b3b079":"df.head()","974b370c":"df.drop('Name', axis=1, inplace=True)","a6bf5ea2":"df.drop('PassengerId', axis=1, inplace=True)","f62bdccd":"df.drop('Embarked', axis=1, inplace=True)","aff3de99":"df.drop('Sex', axis=1, inplace=True)","9e9e4537":"df.drop('Ticket', axis=1, inplace=True)","90105468":"df.drop('Fare', axis=1, inplace=True)","480c28d9":"df.head()","c7277fc3":"x = df.drop('Survived', axis=1)","020a3c83":"x","cabbb134":"y = df['Survived']","49ae94de":"y","94b5746c":"from sklearn.model_selection import train_test_split","c201879f":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3)","0d771551":"x_train.info()","c96242b2":"x_test.info()","cfa71b80":"from sklearn.linear_model import LogisticRegression","16e9d1f3":"logmodel = LogisticRegression()","e14bd0b1":"logmodel.fit(x_train, y_train)","03623fa1":"predictions = logmodel.predict(x_test)","f513b4aa":"from sklearn.metrics import classification_report","28c31fda":"print(classification_report(y_test, predictions))","e0c37163":"from sklearn.metrics import confusion_matrix","ddca3940":"print(confusion_matrix(y_test, predictions))","d360e627":"#SVM\nfrom sklearn.svm import SVC","95c3af8c":"SVM = SVC()","962c81df":"SVM.fit(x_train, y_train)","f50f0cf9":"predictions = SVM.predict(x_test)","d3f20016":"from sklearn.metrics import classification_report","ed7b7845":"print(classification_report(y_test, predictions))","e05e5adc":"from sklearn.metrics import confusion_matrix","43f36cb7":"print(confusion_matrix(y_test, predictions))","cfaab999":"#KNN\nfrom sklearn.neighbors import KNeighborsClassifier","327b5033":"knn = KNeighborsClassifier()","27aac3a4":"knn.fit(x_train, y_train)","daef95c9":"predictions = knn.predict(x_test)","9ffcdb71":"from sklearn.metrics import classification_report","0b6b770e":"print(classification_report(y_test, predictions))","c26046ce":"from sklearn.metrics import confusion_matrix","fa2d3d92":"print(confusion_matrix(y_test, predictions))","d79d5b99":"#Kmean\nfrom sklearn.cluster import KMeans","1af65019":"Kmean = KMeans(n_clusters=2)","bc2dc8df":"Kmean.fit(x_train, y_train)","9a168db0":"predictions = Kmean.predict(x_test)","17a07c07":"from sklearn.metrics import classification_report","f04730ca":"print(classification_report(y_test, predictions))","2ae5ebb7":"from sklearn.metrics import confusion_matrix","5bd2fc16":"print(confusion_matrix(y_test, predictions))","1680fe0a":"from sklearn.tree import DecisionTreeClassifier","a7854684":"dtree = DecisionTreeClassifier()","1c7690ff":"dtree.fit(x_train, y_train)","0a92c17c":"predictions = dtree.predict(x_test)","bb89741c":"from sklearn.metrics import classification_report","878e9c7a":"print(classification_report(y_test, predictions))","14bb7086":"from sklearn.metrics import confusion_matrix","99f58618":"print(confusion_matrix(y_test, predictions))","876bedd4":"from sklearn.ensemble import RandomForestClassifier","b0e6822c":"rfc = RandomForestClassifier(n_estimators=100)","9a24c8a9":"rfc.fit(x_train, y_train)","863dcded":"predictions = rfc.predict(x_test)","cfcdb9cc":"from sklearn.metrics import classification_report","e2416246":"print(classification_report(y_test, predictions))","323295c4":"from sklearn.metrics import confusion_matrix","a7a52714":"print(confusion_matrix(y_test, predictions))","8c3d2aae":"from sklearn.naive_bayes import GaussianNB","2421a9bc":"NB = GaussianNB()","9b6dd110":"NB.fit(x_train, y_train)","74d365e7":"predictions = NB.predict(x_test)","85a82f59":"from sklearn.metrics import classification_report","ccce84b2":"print(classification_report(y_test, predictions))","2ab02283":"from sklearn.metrics import confusion_matrix","fa2290ca":"print(confusion_matrix(y_test, predictions))","03375264":"#LINEAR REGRESSION CANOT BE APPLIED BECAUSE THE OUTPUT COUNT IS ZERO","ef57a4ec":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis","9653e43e":"LDA = LinearDiscriminantAnalysis()","d8c99cac":"LDA.fit(x_train, y_train)","c6bd65dc":"predictions = LDA.predict(x_test)","f08e119a":"from sklearn.metrics import classification_report","518c5fc0":"print(classification_report(y_test, predictions))","370c8a73":"from sklearn.metrics import confusion_matrix","ab0b9913":"print(confusion_matrix(y_test, predictions))","f0d9abd4":"# Train Test Split","2dcc1488":"# Naive bayes","a149267a":"# Decide dependent and independent elements in Data set","52a4cc22":"# Logistic REGRESSION","c904b6ef":"# decision tree","b9d9cc07":"# Linear Discriminant Analysis","20b8d19d":"# Data Cleaning","c8fef88a":"# Random forest"}}