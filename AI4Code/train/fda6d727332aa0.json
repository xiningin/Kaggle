{"cell_type":{"25b4742c":"code","60285f0b":"code","ee41d7e4":"code","5dde808b":"code","83e2f0d4":"code","ec96683d":"code","4106956d":"code","a31df4b1":"code","3c4d4160":"code","d3bc576c":"code","e5f4f696":"code","8cb8a606":"code","ee992bb0":"code","4bbb3165":"code","9cb2dae4":"code","b6dcbca6":"code","ce21ce8c":"code","a64e7986":"code","94cffba2":"code","85c20f94":"code","4e279a57":"code","cc077da9":"code","3fd7f94f":"code","571d92cf":"code","d0b49c19":"code","317c150b":"code","aa3607f2":"code","9a7e4154":"code","294a9969":"code","e99ac9b0":"code","74c6ec1a":"code","60755477":"code","69da87a1":"code","771e5983":"code","1bf3c291":"code","6673e5ca":"code","0bbb868f":"markdown","a429831b":"markdown","8222ab63":"markdown","3e788e9e":"markdown"},"source":{"25b4742c":"from glob import glob\nfrom keras.preprocessing.image import load_img, img_to_array","60285f0b":"import pandas as pd\nimport numpy as np\nimport keras\nimport matplotlib.pyplot as plt\nimport os","ee41d7e4":"files = glob('\/kaggle\/input\/breast-histopathology-images\/*\/*\/*')","5dde808b":"count =0 \nfor file in files:\n    if file[-5] == '1':\n        count+=1\nprint(count)","83e2f0d4":"len(files)","ec96683d":"def show_img(files):\n    plt.figure(figsize= (10,10))\n    ind = np.random.randint(0, len(files), 25)\n    i=0\n    for loc in ind:\n        plt.subplot(5,5,i+1)\n        sample = load_img(files[loc], target_size=(150,150))\n        sample = img_to_array(sample)\n        plt.axis(\"off\")\n        plt.imshow(sample.astype(\"uint8\"))\n        i+=1","4106956d":"show_img(files)","a31df4b1":"def load_data(files, lower_limit, upper_limit):\n    X = []\n    y = []\n    for file in files[lower_limit:upper_limit]:\n        if file.endswith(\".png\"):\n            img = load_img(file, target_size = (50,50))\n            pixels = img_to_array(img)\n            pixels \/= 255\n            X.append(pixels)\n            if(file[-5] == '1'):\n                y.append(1)\n            elif(file[-5] == '0'):\n                y.append(0)\n    return np.stack(X), y\n        \n    ","3c4d4160":"from sklearn.model_selection import train_test_split\n#Splitting the data into training set\nX_train,y_train = load_data(files,0, 90000)","d3bc576c":"import seaborn as sns","e5f4f696":"sns.countplot(y_train)","8cb8a606":"X_test, y_test = load_data(files, 90000, 110000)","ee992bb0":"sns.countplot(y_train)","4bbb3165":"files[:5]","9cb2dae4":"def load_balanced_data(files, size, start_index):\n    half_size = int(size\/2)\n    count=0\n    res = []\n    y = []\n    for file in files[start_index:]:\n        if (count!=half_size):\n            if file[-5] == '1' and file.endswith(\".png\"):\n                img = load_img(file, target_size = (50,50))\n                pixels = img_to_array(img)\n                pixels \/= 255\n                res.append(pixels)\n                y.append(1)\n                count += 1\n                \n    for file in files[start_index:]:\n        if(count!=0):\n            if(file[-5] == '0'):\n                img = load_img(file, target_size = (50,50))\n                pixels = img_to_array(img)\n                pixels \/= 255\n                res.append(pixels)\n                y.append(0)\n                count -= 1\n    return np.stack(res), y\n    \n            ","b6dcbca6":"X_train2, y_train2 = load_balanced_data(files, 90000,0)","ce21ce8c":"sns.countplot(y_train2)","a64e7986":"x_test2, y_test2 = load_balanced_data(files, 20000, 100000)","94cffba2":"sns.countplot(y_test2)","85c20f94":"from keras.models import Model\nfrom keras.layers import Input, Dense, Dropout, Conv2D, Activation, MaxPooling2D, Flatten, BatchNormalization","4e279a57":"#Creation And Architecture of Concolutional Neural Network\ndef def_model(inp_shape = (50,50,3)):\n    inp = Input(inp_shape)\n    m = Conv2D(32, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(inp)\n    m = MaxPooling2D(2)(m)\n    m = BatchNormalization()(m)\n    m = Conv2D(64, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n    m = BatchNormalization()(m)\n    m = Conv2D(128, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n    m = BatchNormalization()(m)\n    m = Conv2D(128, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n    m = Flatten()(m)\n    m = Dense(128, activation = \"relu\")(m)\n    out = Dense(1, activation = \"sigmoid\")(m)\n    model = Model(inp, out)\n    model.compile(optimizer = keras.optimizers.SGD(1e-3, momentum=0.9), loss=\"binary_crossentropy\", metrics = ['acc'])\n    return model","cc077da9":"model = def_model()","3fd7f94f":"#describe the CNN Model\nmodel.summary()","571d92cf":"#Training The CNN Model with 25 Epochs\nhistory = model.fit(X_train2, y_train2, validation_data=(x_test2, y_test2), epochs = 15, batch_size=256)","d0b49c19":"#plot the accuracy graph\nplt.figure(figsize = (12,6))\nplt.subplot(2,1,1)\nplt.plot(history.history['acc'], label=\"train_acc\")\nplt.plot(history.history['val_acc'], label = \"test_acc\")\nplt.legend()\nplt.subplot(2,1,2)\nplt.plot(history.history['loss'], label = \"train_loss\")\nplt.plot(history.history['val_loss'], label = \"val_loss\")\nplt.legend()","317c150b":"def def_model2(inp_shape = (50,50,3)):\n    inp = Input(inp_shape)\n    m = Conv2D(32, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(inp)\n    m = MaxPooling2D(2)(m)\n    m = Conv2D(64, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n    m = Conv2D(128, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n    m = Conv2D(128, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n    m = Conv2D(256, (3,3), kernel_initializer='he_uniform', padding=\"same\", activation='relu')(m)\n    m = MaxPooling2D(2)(m)\n\n    m = Dropout(0.2)(m)\n    m = Flatten()(m)\n\n    m = Dense(128, activation = \"relu\")(m)\n    out = Dense(1, activation = \"sigmoid\")(m)\n    model = Model(inp, out)\n    model.compile(optimizer = keras.optimizers.SGD(1e-3, momentum=0.9), loss=\"binary_crossentropy\", metrics = ['acc'])\n    return model","aa3607f2":"model2 = def_model2()","9a7e4154":"from keras.preprocessing.image import ImageDataGenerator","294a9969":"#Using ImageDataGenerator To Generate similar images\ndatagen = ImageDataGenerator(height_shift_range=0.2,\n                            width_shift_range=0.2,\n                            zoom_range=0.2,\n                            shear_range=0.2)","e99ac9b0":"train_generator = datagen.flow(X_train2, y_train2, batch_size=256)\nval_generator = datagen.flow(x_test2, y_test2, batch_size=256)","74c6ec1a":"#Training The Model using train_generator and val_generator\nhistory2 = model2.fit(train_generator, validation_data=val_generator, epochs = 15)","60755477":"#plot accuracy and loss graph\nplt.figure(figsize = (12,6))\nplt.subplot(2,1,1)\nplt.plot(history2.history['acc'], label=\"train_acc\")\nplt.plot(history2.history['val_acc'], label = \"test_acc\")\nplt.legend()\nplt.subplot(2,1,2)\nplt.plot(history2.history['loss'], label = \"train_loss\")\nplt.plot(history2.history['val_loss'], label = \"val_loss\")\nplt.legend()","69da87a1":"#Testing The CNN Model\npred = model.predict(x_test2)","771e5983":"#Classification To check wether IDC or Not IDC\nres = []\nfor prediction in pred:\n    if(prediction > 0.5):\n        res.append(1)\n    else:\n        res.append(0)","1bf3c291":"from sklearn.metrics import classification_report, confusion_matrix\n#Final Classification Report using Confusion Matrix\nprint(confusion_matrix(y_test2, res))\nprint(classification_report(y_test2, res))","6673e5ca":"\nplt.figure(figsize= (10,10))\nind = np.random.randint(0, len(pred), 9)\ni=0\n#The patient having IDC is represented by IDC 1 ,IDC 0 otherwise.\nfor loc in ind:\n    plt.subplot(3,3,i+1)\n    plt.xlabel(None)\n    plt.title(\"IDC ({})\".format(res[loc]))\n        \n    plt.imshow(x_test2[loc])\n    i+=1","0bbb868f":"**Trying Dropout and Data Augmentation**","a429831b":"**IDC classification using keras**","8222ab63":"## Handling Class Imbalance Problem ","3e788e9e":"# Breast Cancer Detection Using CNN"}}