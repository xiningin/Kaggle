{"cell_type":{"75075813":"code","7c10eb49":"code","84da4758":"code","39bb35b5":"code","00e0ba41":"code","044b2e45":"code","62aaaf91":"code","18f4befd":"code","64bc001a":"code","5fcc2c3f":"code","31cf2832":"code","baccc4f4":"code","be968367":"code","066784b1":"code","4300fb7a":"code","efa9b7e2":"code","5f891dd1":"code","b9fffc72":"code","d8b0e45b":"code","d539aa95":"code","eaaedc5e":"code","7768f58c":"code","0586b7d5":"code","bad48c55":"code","8264226c":"code","7b5ec83a":"code","ffefecc4":"code","df8d7be0":"code","93726f73":"code","ba971fd0":"code","645f1772":"code","2c41c681":"code","a5ba27df":"code","9f0422fd":"code","38e6ef52":"code","916065e9":"markdown","9ce94ee8":"markdown","acd477d4":"markdown","30dcd981":"markdown","c43689ce":"markdown","1c4a8451":"markdown","208746e5":"markdown","30413e0b":"markdown","e96e81e0":"markdown","2fca9e76":"markdown","77fb1060":"markdown","8fa067d4":"markdown","b3678b9d":"markdown","75c43080":"markdown","236496ec":"markdown","f20dcf05":"markdown","13044159":"markdown"},"source":{"75075813":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7c10eb49":"# Essentials\nimport numpy as np\nimport pandas as pd\nimport datetime\nimport random\n\n# Plots\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)","84da4758":"data = pd.read_csv('..\/input\/widsdatathon2022\/train.csv')\ntest_data = pd.read_csv('..\/input\/widsdatathon2022\/test.csv')","39bb35b5":"print(\"Number of train samples are\",data.shape)\nprint(\"Number of train samples are\",test_data.shape)","00e0ba41":"data.head()","044b2e45":"#columns\ndata.columns","62aaaf91":"data.describe().T.style","18f4befd":"cols_with_missing = [col for col in data.columns \n                                 if data[col].isnull().any()]\nmiss_count =data.isna().sum()\nmiss_df = (pd.concat([miss_count.rename('Missing count'),miss_count.div(len(data)).rename('Missing value')],axis = 1).loc[miss_count.ne(0)])\nmiss_df.style.background_gradient(cmap=\"coolwarm\")","64bc001a":"categorical_cols=[c for c in data.columns if (1<data[c].nunique()) & (data[c].dtype != np.number)& (data[c].dtype != int)]\ncategorical_cols","5fcc2c3f":"for col in categorical_cols:\n    data[col]=data[col].astype('category')","31cf2832":"data_binary_col = data.select_dtypes('category').columns\ndata_binary_col ","baccc4f4":"num_col=data.select_dtypes('number').columns\nnum_col","be968367":"sns.distplot(data['site_eui'])","066784b1":"plt.figure(figsize=(15, 15))\nsns.set(style=\"darkgrid\")\ni=1\nfor col in categorical_cols:\n    plt.subplot(3,1,i)\n    sns.boxplot(data=data, x=col, y='site_eui')\n    i=i+1\nplt.show()","4300fb7a":"cols=['Year_Factor', 'floor_area', 'year_built', 'energy_star_rating',\n       'ELEVATION',  'cooling_degree_days',\n       'heating_degree_days', 'precipitation_inches', 'snowfall_inches',\n       'snowdepth_inches', 'avg_temp', 'days_below_30F', 'days_below_20F',\n       'days_below_10F', 'days_below_0F', 'days_above_80F', 'days_above_90F',\n       'days_above_100F', 'days_above_110F', 'direction_max_wind_speed',\n       'direction_peak_wind_speed', 'max_wind_speed', 'days_with_fog']\ni=1\nfor col in cols:\n    plt.figure(figsize=(15, 2))\n    sns.distplot(data[col],kde=True)\n    plt.title(col+\" distribution\")\n    #i=i+1\n    plt.show()\n    ","efa9b7e2":"\nplt.figure(figsize=(15, 5))\nmin_temp=['january_min_temp', 'february_min_temp','march_min_temp','april_min_temp','may_min_temp','june_min_temp','july_min_temp','august_min_temp','september_min_temp', 'october_min_temp','november_min_temp', 'december_min_temp']\nfor col in min_temp:\n    sns.kdeplot(data[col], shade=True)\n    plt.title(\"Monthly distribution of min temp\")\n\nplt.figure(figsize=(15, 5))\nmax_temp=['january_max_temp', 'february_max_temp','march_max_temp','april_max_temp','may_max_temp','june_max_temp','july_max_temp','august_max_temp','september_max_temp', 'october_max_temp','november_max_temp', 'december_max_temp']\nfor col in max_temp:\n    sns.kdeplot(data[col], shade=True)\n    plt.title(\"Monthly distribution of max temp\")\n\nplt.figure(figsize=(15, 5))\navg_temp=['january_avg_temp', 'february_avg_temp','march_avg_temp','april_avg_temp','may_avg_temp','june_avg_temp','july_avg_temp','august_avg_temp','september_avg_temp', 'october_avg_temp','november_avg_temp', 'december_avg_temp']\nfor col in avg_temp:\n    sns.kdeplot(data[col], shade=True)\n    plt.title(\"Monthly distribution of avg temp\")","5f891dd1":"data_cor = data.corr()\ndata_df_upper = data_cor.where(np.triu(np.ones(data_cor.shape, dtype=np.int), k=1).astype(np.bool))\ncor80 = [col for col in data_df_upper.columns if any(data_df_upper[col] >= 0.9)]\ncor80","b9fffc72":"# year_built: replace with current year.\ndata['year_built'] =data['year_built'].replace(np.nan, 2022)\n#replacing rest of the values with mean\n#data['energy_star_rating']=data['energy_star_rating'].replace(np.nan,data['energy_star_rating'].mean())\n#data['direction_max_wind_speed']= data['direction_max_wind_speed'].replace(np.nan,data['direction_max_wind_speed'].mean())\n#data['direction_peak_wind_speed']= data['direction_peak_wind_speed'].replace(np.nan,data['direction_peak_wind_speed'].mean())\n#data['max_wind_speed']=data['max_wind_speed'].replace(np.nan,data['max_wind_speed'].mean())\n#data['days_with_fog']=data['days_with_fog'].replace(np.nan,data['days_with_fog'].mean())\n\n##for testdata\n\n# year_built: replace with current year.\ntest_data['year_built'] =test_data['year_built'].replace(np.nan, 2022)\n##replacing rest of the values with mean\n#test_data['energy_star_rating']=test_data['energy_star_rating'].replace(np.nan,test_data['energy_star_rating'].mean())\n#test_data['direction_max_wind_speed']= test_data['direction_max_wind_speed'].replace(np.nan,test_data['direction_max_wind_speed'].mean())\n#test_data['direction_peak_wind_speed']= test_data['direction_peak_wind_speed'].replace(np.nan,test_data['direction_peak_wind_speed'].mean())\n#test_data['max_wind_speed']=test_data['max_wind_speed'].replace(np.nan,test_data['max_wind_speed'].mean())\n#test_data['days_with_fog']=test_data['days_with_fog'].replace(np.nan,test_data['days_with_fog'].mean())\n","d8b0e45b":"from sklearn.impute import SimpleImputer\nnull_col=['energy_star_rating','direction_max_wind_speed','direction_peak_wind_speed','max_wind_speed','days_with_fog']\nimputer = SimpleImputer()\nimputer.fit(data[null_col])\ndata_transformed = imputer.transform(data[null_col])\ndata[null_col] = pd.DataFrame(data_transformed)\ntest_data_transformed = imputer.transform(test_data[null_col])\ntest_data[null_col] = pd.DataFrame(test_data_transformed)","d539aa95":"#rechecking null values\ncols_with_missing = [col for col in data.columns \n                                 if data[col].isnull().any()]\ncols_with_missing","eaaedc5e":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nfor col in categorical_cols:\n    data[col] = le.fit_transform(data[col])\n    test_data[col] = le.fit_transform(test_data[col])\n","7768f58c":"data.head()","0586b7d5":"#data_binary_col1 = data[data_binary_col]\ndummy_col = pd.get_dummies(data[data_binary_col], drop_first=True)\ndata = pd.concat([data,dummy_col], axis=1)\ndata = data.drop(columns=data_binary_col )","bad48c55":"dummy_test = pd.get_dummies(test_data[data_binary_col], drop_first=True)\ntest_data = pd.concat([test_data,dummy_test], axis=1)\ntest_data = test_data.drop(columns=data_binary_col )","8264226c":"\ny = data['site_eui']\nX = data.drop(['site_eui'], axis = 1)","7b5ec83a":"X.head()","ffefecc4":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ntrain = scaler.fit_transform(X)\ntest = scaler.transform(test_data)","df8d7be0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 50)","93726f73":"import xgboost\n\nxgboost_model = xgboost.XGBRegressor(n_estimators=100, learning_rate=0.03, gamma=0, subsample=0.75,\n                           colsample_bytree=0.4, max_depth=3)\nxgboost_model.fit(X_train,y_train)\n","ba971fd0":"from sklearn.metrics import explained_variance_score\npredictions = xgboost_model.predict(X_test)\nprint(explained_variance_score(predictions,y_test))","645f1772":"from sklearn.model_selection import GridSearchCV\nxgb = xgboost.XGBRegressor()\nparameters = {'objective':['reg:linear'],\n              'learning_rate': [.02, .05, 0.01], #so called `eta` value\n              'max_depth': [3,5],\n              'min_child_weight': [4],\n              'subsample': [0.7],\n              'colsample_bytree': [0.4],\n              'n_estimators': [1000],\n              'reg_alpha': [0.4],\n              'reg_lambda': [2e-08]\n}\nxgb_grid = GridSearchCV(xgb,\n                        parameters,\n                        cv = 5,\n                        verbose=True)\n\nxgb_grid.fit(X_train,y_train)\n\nprint(xgb_grid.best_score_)\nprint(xgb_grid.best_params_)","2c41c681":"#testdata prediction\nprediction = xgb_grid.best_estimator_.predict(test_data)\nprediction ","a5ba27df":"submission= pd.read_csv('\/kaggle\/input\/widsdatathon2022\/sample_solution.csv')\nsubmission['site_eui'] = prediction\nsubmission.to_csv(\"submission.csv\",index=False)\n","9f0422fd":"submission.head()","38e6ef52":"# thank you","916065e9":"<b>Problem Statement:<\/b> <p> Climate change is a globally relevant, urgent, and multi-faceted issue heavily impacted by energy policy and infrastructure. Addressing climate change involves mitigation (i.e. mitigating greenhouse gas emissions) and adaptation (i.e. preparing for unavoidable consequences). Mitigation of GHG emissions requires changes to electricity systems, transportation, buildings, industry, and land use. <\/p>\n\n<p>According to a report issued by the International Energy Agency (IEA), the lifecycle of buildings from construction to demolition were responsible for 37% of global energy-related and process-related CO2 emissions in 2020. Yet it is possible to drastically reduce the energy consumption of buildings by a combination of easy-to-implement fixes and state-of-the-art strategies. For example, retrofitted buildings can reduce heating and cooling energy requirements by 50-90 percent. Many of these energy efficiency measures also result in overall cost savings and yield other benefits, such as cleaner air for occupants. This potential can be achieved while maintaining the services that buildings provide.<\/p>\n\n<b>Goal: <\/b> <p>\nThe goal of this competition is to predict the energy consumption using building characteristics and climate and weather variables. <\/p>","9ce94ee8":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#87CEFA;\n          font-size:260%;\">\nWiDS Datathon 2022 \n     <\/p>","acd477d4":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#87CEFA;\n          font-size:200%;\">\nEDA \n     <\/p>","30dcd981":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#FFFFFF;\n          font-size:150%;\">\nXGboost Model\n     <\/p>","c43689ce":"![image.png](attachment:3bf8e8c7-6e4e-43ce-90de-014029460ab2.png)","1c4a8451":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#FFFFFF;\n          font-size:150%;\">\nCorelataion Analysis\n     <\/p>","208746e5":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#FFFFFF;\n          font-size:150%;\">\nHandling Missing Values\n     <\/p>","30413e0b":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#FFFFFF;\n          font-size:150%;\">\nUnivariate Analysis\n     <\/p>","e96e81e0":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#87CEFA;\n          font-size:200%;\">\nImporting Libraries \n     <\/p>","2fca9e76":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#FFFFFF;\n          font-size:150%;\">\nChecking Null values\n     <\/p>","77fb1060":"This graph is positively skewed and have long right side tail. \n","8fa067d4":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#FFFFFF;\n          font-size:150%;\">\nTarget Variable\n     <\/p>","b3678b9d":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#FFFFFF;\n          font-size:150%;\">\nFeature Scaling\n     <\/p>","75c43080":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#FFFFFF;\n          font-size:150%;\">\nLabel Encoder\n     <\/p>","236496ec":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#FFFFFF;\n          font-size:150%;\">\nPrediction\n     <\/p>","f20dcf05":"This model achieved the 97 % accuary and model seems to be overfitted. \nNext step is using the gridsearch to find the optimal parameters","13044159":"<p style=\"padding: 10px;\n          color:#000000;\n          font-weight: bold;\n          text-align: center;\n          background-color:#87CEFA;\n          font-size:200%;\">\nLoading Files\n     <\/p>"}}