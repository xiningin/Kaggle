{"cell_type":{"e2259dfe":"code","7fa02813":"code","31fe73d5":"code","37f86cba":"code","5a544997":"code","1ff4ab02":"code","7cd42590":"code","73649a94":"code","2ef6513c":"code","505fa924":"code","ddf3b6ff":"code","f258a49e":"code","5dc50352":"code","105a358d":"code","190f3cb8":"code","dfef6861":"code","bc80f1f9":"code","813d97de":"code","ecf1460b":"code","d89f4d26":"code","3c1aa114":"code","30552f3d":"code","261ceadc":"code","342c6650":"code","36054a3c":"code","f98a3afc":"code","d9b6e23e":"markdown","ba65f6bd":"markdown","e32ea340":"markdown","b7c2a459":"markdown","32566467":"markdown","e9e4a004":"markdown","e7c064b1":"markdown","0f19ad3b":"markdown","2badbdc5":"markdown","95746f3a":"markdown","7fb6bdd9":"markdown","2c1bd3dc":"markdown","6e39e2c2":"markdown","0946a26e":"markdown","a01c4cd7":"markdown","8dde1412":"markdown","66bcb645":"markdown","fdcbe5a3":"markdown","901c2199":"markdown","d683d685":"markdown","b06fa5da":"markdown","6d1d1a74":"markdown","a283518d":"markdown","44a7cd06":"markdown","5649b73b":"markdown"},"source":{"e2259dfe":"import numpy as np\nimport pandas as pd \nimport json\n","7fa02813":"fpl2020_file = open('..\/input\/fantasy-epl-new-season-research-2020-2021\/FPL_2019_20_season_stats.jscsrc')\nfpl2020 = fpl2020_file.read()\nfpl2020 = json.loads(fpl2020)\nfpl2021_file = open('..\/input\/fantasy-epl-new-season-research-2020-2021\/FPL_2020_21_player_list.jscsrc')\nfpl2021 = fpl2021_file.read()\nfpl2021 = json.loads(fpl2021)","31fe73d5":"fpl2020.keys()","37f86cba":"for key in fpl2020.keys():\n    print('Data type: %s for Key: %s' %(type(fpl2020[key]),key))","5a544997":"print('Understanding the data structure for Teams')\nprint(fpl2020['teams'][0].keys())\nprint('Understanding the data structure for Elements')\nprint(fpl2020['elements'][0].keys())","1ff4ab02":"teams2020 = pd.DataFrame(fpl2020['teams'])\nplayers2020 = pd.DataFrame(fpl2020['elements'])\nteams2020.head()","7cd42590":"players2020.head()","73649a94":"fpoints_table = players2020.groupby('team_code')['total_points'].sum()\nfpoints_table = pd.DataFrame(fpoints_table)\nfpoints_table['code'] = fpoints_table.index\nfpoints_table['fpoints_rank']=fpoints_table['total_points'].rank(ascending = False)\nleaguetable_2020 = teams2020[['short_name','code','win','draw','loss','points','position','strength','strength_overall_home','strength_overall_away','strength_attack_home','strength_attack_away','strength_defence_home','strength_defence_away','pulse_id']]\nleague_fpoints = leaguetable_2020.join(fpoints_table, on='code', how='left',lsuffix = 'lt')\ntable_comparison = league_fpoints[['short_name','position','points','fpoints_rank','total_points','code']]\ntable_comparison.sort_values('position')","2ef6513c":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nX = table_comparison['points'].values.reshape(-1,1)\ny = table_comparison['total_points'].values.reshape(-1,1)\nnames = table_comparison['short_name'].values.reshape(-1,1)\nmodel.fit(X,y)\ny_pred = model.predict(X)\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(15,10))\nplt.scatter(X,y,color='black')\nplt.plot(X,y_pred, color='blue', linewidth=3)\n\nfor a,b,l in zip(X,y,names):\n    plt.annotate(l,(a,b), textcoords=\"offset points\", xytext=(0,7), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\nplt.show()\n","505fa924":"fpoints_by_pos = players2020.groupby(by = ['team_code','element_type'],as_index=False)['total_points'].sum()\nfpoints_pos = fpoints_by_pos.pivot(index='team_code', columns='element_type', values='total_points')\nfpoints_pos.columns = ['GK','Def','Mid','Fwd']\nfpoints_pos['code']=fpoints_pos.index\nfp_pos = table_comparison.join(fpoints_pos, on='code', how='left',lsuffix = 'lt')\nfor each in ['GK','Def','Mid','Fwd']:\n    fp_pos['perc_'+str(each)]=(fp_pos[each]\/fp_pos['total_points']*100).round(2)\nfp_pos['perc_Defense'] = fp_pos['perc_GK'] + fp_pos['perc_Def']\nfp_pos[['short_name', 'position','total_points', 'perc_GK', 'perc_Def',\n       'perc_Mid', 'perc_Fwd','code','perc_Defense']].sort_values('total_points',ascending = False)","ddf3b6ff":"players2021 = pd.DataFrame(fpl2021['elements'])\ncombined = players2020.merge(players2021[[ 'now_cost','code','element_type','team_code']], on = 'code',how='outer',suffixes = ['','_21'])\nteams2020['team_code'] = teams2020['code'].astype('Int64')\ncombined['team_code'] = combined['team_code'].astype('Int64')\ncombined = combined.merge(teams2020, on = 'team_code', how = 'left',suffixes = ('','_team'))","f258a49e":"def points_calc(row,label='element_type'):\n    points = 0\n    if row[label] == 1:\n        points = points + 6*row['goals_scored'] + 4*row['clean_sheets'] + 5*row['penalties_saved'] # + save_points - 2goals concededpts\n    elif row[label] == 2:\n        points = points + 6*row['goals_scored'] + 4*row['clean_sheets'] #  - 2goals concededpts\n    elif row[label] == 3:\n        points = points + 5*row['goals_scored'] + 1*row['clean_sheets']\n    else:\n        points = points + 4*row['goals_scored']\n    \n    points = points + 3*row['assists'] - 1*row['yellow_cards'] - 2*row['red_cards'] - 2*row['own_goals'] -2*row['penalties_missed'] + row['bonus']\n    return points","5dc50352":"players2020['projected_points'] = players2020.apply(points_calc,axis = 1)\nplayers2020[['projected_points','total_points']]\nplayers2020['gw_points'] = players2020['total_points'] - players2020['projected_points']\ncombined = players2020.merge(players2021[[ 'now_cost','code','element_type','team_code']], on = 'code',how='outer',suffixes = ['','_21'])\ncombined['projected_points_21'] = combined.apply(points_calc,axis = 1,args = ['element_type_21'] )\ncombined['proj_tot_points_21'] = combined['projected_points_21'] + combined['gw_points']\ncombined['team_code'] = combined['team_code'].astype('Int64')\ncombined['team_code_21'] = combined['team_code_21'].astype('Int64')\ncombined = combined.merge(teams2020, on = 'team_code', how = 'left',suffixes = ('','_team'))\ncombined = combined.merge(teams2020, left_on = 'team_code_21',right_on='team_code', how = 'left',suffixes = ('','_team_21'))","105a358d":"fpoints_table_21 = combined.groupby('team_code')['proj_tot_points_21'].sum()\nfpoints_table_21 = pd.DataFrame(fpoints_table_21)\nfpoints_table_21['code'] = fpoints_table.index\nfpoints_table_21['fpoints_rank']=fpoints_table_21['proj_tot_points_21'].rank(ascending = False)\nleaguetable_2021 = teams2020[['short_name','code','win','draw','loss','points','position','strength','strength_overall_home','strength_overall_away','strength_attack_home','strength_attack_away','strength_defence_home','strength_defence_away','pulse_id']]\nleague_fpoints_21 = leaguetable_2021.join(fpoints_table_21, on='code', how='left',lsuffix = 'lt')\ntable_comparison_21 = league_fpoints_21[['short_name','position','points','fpoints_rank','proj_tot_points_21','code']]\ntable_comparison_21 = table_comparison_21.merge(table_comparison[['code','total_points']], on='code', how='left',suffixes = ['','_20'])\ntable_comparison_21 = table_comparison_21.sort_values('position')\ntable_comparison_21[:-3]","190f3cb8":"fpoints_by_pos_21 = combined.groupby(by = ['team_code','element_type_21'],as_index=False)['proj_tot_points_21'].sum()\nfpoints_pos_21 = fpoints_by_pos_21.pivot(index='team_code', columns='element_type_21', values='proj_tot_points_21')\nfpoints_pos_21.columns = ['GK','Def','Mid','Fwd']\nfpoints_pos_21['code']=fpoints_pos_21.index\nfp_pos_21 = table_comparison_21.join(fpoints_pos_21, on='code', how='left',lsuffix = 'lt')\nfor each in ['GK','Def','Mid','Fwd']:\n    fp_pos_21['proj_perc_'+str(each)]=(fp_pos_21[each]\/fp_pos_21['proj_tot_points_21']*100).round(2)\nfp_pos_21['proj_perc_Defense'] = fp_pos_21['proj_perc_GK'] + fp_pos_21['proj_perc_Def']\nfp_pos_21 = fp_pos_21[['short_name', 'position','proj_tot_points_21', 'proj_perc_GK', 'proj_perc_Def',\n       'proj_perc_Mid', 'proj_perc_Fwd','code','proj_perc_Defense']].sort_values('proj_tot_points_21',ascending = False)\nfp_pos_21[:-3] ","dfef6861":"# At a player level there is some need for basic filtering the list of players.\n#Remove players that do not have a team code for 2021. \ntargets = combined.dropna(axis=0,how = 'any',subset = ['team_code_21'])\n# Remove players that dont have a Projected points score or the score is 0\ntargets = targets.dropna(axis=0,how = 'any',subset = ['proj_tot_points_21'])\ntargets = targets[targets['proj_tot_points_21']!=0]\n#Remove players that have 0 minutes played\ntargets = targets[targets['minutes']!=0]\n#Remove players that have lesser than 2 projected points per game\ntargets['proj_ppg_21'] = targets['proj_tot_points_21']\/round(targets['total_points'] \/ targets['points_per_game'].astype(float) , 0)\ntargets = targets [targets['proj_ppg_21']>=2]\ntargets.shape[0]","bc80f1f9":"players_per_club = targets['team_code_21'].value_counts()\ntargets.pivot_table(values ='team_code_21',index =  'short_name_team_21',aggfunc = 'count')","813d97de":"targets['proj_points_per90'] = round(targets['proj_tot_points_21'] \/ targets['minutes']*90,2)\ntargets['proj_points_permn_per90'] = round(targets['proj_tot_points_21'] \/ (targets['now_cost_21']\/10)\/ targets['minutes']*90,3)\nclub_proj_scores = targets.groupby(by = 'team_code_21')['proj_tot_points_21'].sum()\ntargets['club_points_21'] =  targets['team_code_21'].apply(lambda x: club_proj_scores[x])\ntargets['proj_club_points_percent'] = round(targets['proj_tot_points_21'] \/ targets['club_points_21']*100,2)\ntargets['proj_bonus_points_perc'] = round(targets['bonus'] \/ targets['proj_tot_points_21']*100,2)\n\ntargets[['proj_points_per90','proj_points_permn_per90','proj_club_points_percent','proj_bonus_points_perc']].corr()","ecf1460b":"# Plotting Points per 90 vs Total Points for the first 30 players by total points\ndata = targets[['proj_points_per90','proj_tot_points_21','web_name']].nlargest(50,'proj_tot_points_21')\nplt.figure(figsize=(15,10))\nplt.scatter(data['proj_tot_points_21'],data['proj_points_per90'],color='black')\nfor a,b,l in zip(data['proj_tot_points_21'],data['proj_points_per90'],data['web_name']):\n    plt.annotate(l,(a,b), textcoords=\"offset points\", xytext=(0,7), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\nplt.title('Points per 90 vs Total Points')\nplt.xlabel('Total Points')\nplt.ylabel('Points per 90')\n\nplt.show()\n","d89f4d26":"data = targets[['proj_points_permn_per90','proj_tot_points_21','web_name','code_team_21']].nlargest(50,'proj_tot_points_21')\nplt.figure(figsize=(15,10))\nplt.scatter(data['proj_tot_points_21'],data['proj_points_permn_per90'],c=data['code_team_21'],cmap = 'tab20')\nfor a,b,l in zip(data['proj_tot_points_21'],data['proj_points_permn_per90'],data['web_name']):\n    plt.annotate(l,(a,b), textcoords=\"offset points\", xytext=(0,7), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\nplt.title('Points per million per 90 vs Total Points')\nplt.xlabel('Total Points')\nplt.ylabel('Points per million per 90')\nplt.show()","3c1aa114":"gkdata = targets[['proj_points_permn_per90','proj_tot_points_21','web_name','element_type_21','now_cost_21','code_team_21']]\n\ngkdata = gkdata[gkdata['element_type_21']==1].nlargest(25,'proj_tot_points_21')\nplt.figure(figsize=(15,10))\nplt.scatter(gkdata['proj_tot_points_21'],gkdata['proj_points_permn_per90'],c=gkdata['code_team_21'],cmap = 'tab20')\nfor a,b,l,c in zip(gkdata['proj_tot_points_21'],gkdata['proj_points_permn_per90'],gkdata['web_name'],gkdata['now_cost_21']):\n    plt.annotate(l+ ' '+ str(c\/10),(a,b), textcoords=\"offset points\", xytext=(0,7), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\nplt.title('Points per million per 90 vs Total Points')\nplt.xlabel('Total Points')\nplt.ylabel('Points per million per 90')\nplt.show()","30552f3d":"defchrt = targets[['proj_points_permn_per90','proj_tot_points_21','web_name','element_type_21','now_cost_21','code_team_21']]\n\ndefchrt = defchrt[defchrt['element_type_21']==2].nlargest(50,'proj_tot_points_21')\nplt.figure(figsize=(15,10))\nplt.scatter(defchrt['proj_tot_points_21'],defchrt['proj_points_permn_per90'],c=defchrt['code_team_21'],cmap = 'tab20')\nfor a,b,l,c in zip(defchrt['proj_tot_points_21'],defchrt['proj_points_permn_per90'],defchrt['web_name'],defchrt['now_cost_21']):\n    plt.annotate(l+ ' '+ str(c\/10),(a,b), textcoords=\"offset points\", xytext=(0,7), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\nplt.title('Points per million per 90 vs Total Points')\nplt.xlabel('Total Points')\nplt.ylabel('Points per million per 90')\nplt.show()","261ceadc":"defchrt = targets[['proj_points_permn_per90','proj_tot_points_21','web_name','element_type_21','now_cost_21','code_team_21']]\n\ndefchrt = defchrt[defchrt['element_type_21']==2].nlargest(50,'proj_tot_points_21')[4:]\ndefchrt = defchrt[defchrt['proj_points_permn_per90']<1]\nplt.figure(figsize=(15,10))\nplt.scatter(defchrt['proj_tot_points_21'],defchrt['proj_points_permn_per90'],c=defchrt['code_team_21'],cmap = 'tab20')\nfor a,b,l,c in zip(defchrt['proj_tot_points_21'],defchrt['proj_points_permn_per90'],defchrt['web_name'],defchrt['now_cost_21']):\n    plt.annotate(l+ ' '+ str(c\/10),(a,b), textcoords=\"offset points\", xytext=(0,7), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\nplt.title('Points per million per 90 vs Total Points')\nplt.xlabel('Total Points')\nplt.ylabel('Points per million per 90')\nplt.show()","342c6650":"midchrt = targets[['proj_points_permn_per90','proj_tot_points_21','web_name','element_type_21','now_cost_21','code_team_21']]\n\nmidchrt = midchrt[midchrt['element_type_21']==3].nlargest(50,'proj_tot_points_21')\nplt.figure(figsize=(15,10))\nplt.scatter(midchrt['proj_tot_points_21'],midchrt['proj_points_permn_per90'],c=midchrt['code_team_21'],cmap = 'tab20')\nfor a,b,l,c in zip(midchrt['proj_tot_points_21'],midchrt['proj_points_permn_per90'],midchrt['web_name'],midchrt['now_cost_21']):\n    plt.annotate(l+ ' '+ str(c\/10),(a,b), textcoords=\"offset points\", xytext=(0,7), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\nplt.title('Points per million per 90 vs Total Points')\nplt.xlabel('Total Points')\nplt.ylabel('Points per million per 90')\nplt.show()","36054a3c":"midchrt = targets[['proj_points_permn_per90','proj_tot_points_21','web_name','element_type_21','now_cost_21','code_team_21']]\n\nmidchrt = midchrt[midchrt['element_type_21']==3].nlargest(50,'proj_tot_points_21')[9:]\n\nmidchrt = midchrt[midchrt['proj_points_permn_per90']<1]\nplt.figure(figsize=(15,10))\nplt.scatter(midchrt['proj_tot_points_21'],midchrt['proj_points_permn_per90'],c=midchrt['code_team_21'],cmap = 'tab20')\nfor a,b,l,c in zip(midchrt['proj_tot_points_21'],midchrt['proj_points_permn_per90'],midchrt['web_name'],midchrt['now_cost_21']):\n    plt.annotate(l+ ' '+ str(c\/10),(a,b), textcoords=\"offset points\", xytext=(0,7), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\nplt.title('Points per million per 90 vs Total Points')\nplt.xlabel('Total Points')\nplt.ylabel('Points per million per 90')\nplt.show()\n\n","f98a3afc":"fwdchrt = targets[['proj_points_permn_per90','proj_tot_points_21','web_name','element_type_21','now_cost_21','code_team_21']]\n\nfwdchrt = fwdchrt[fwdchrt['element_type_21']==4].nlargest(35,'proj_tot_points_21')\nplt.figure(figsize=(15,10))\nplt.scatter(fwdchrt['proj_tot_points_21'],fwdchrt['proj_points_permn_per90'],c=fwdchrt['code_team_21'],cmap = 'tab20')\nfor a,b,l,c in zip(fwdchrt['proj_tot_points_21'],fwdchrt['proj_points_permn_per90'],fwdchrt['web_name'],fwdchrt['now_cost_21']):\n    plt.annotate(l+ ' '+ str(c\/10),(a,b), textcoords=\"offset points\", xytext=(0,7), # distance from text to points (x,y)\n                 ha='center') # horizontal alignment can be left, right or center\nplt.show()","d9b6e23e":"It is evident from the table that league success does not always imply fantasy success and vice versa. \nLet's look at this relationship in a visual manner. We will plot a linear regression between league points and fantasy points. \n\nA critical consideration is understand which is the dependent vs independent variable. Since there are only 2 varibles, the consideration is mathematically moot. Y = mX + c and X = (Y-c)\/m are both linear. However we typically look at league points to establish if a team did well in a season so we will keep that as the independent variable. This is purely a convention based approach. ","ba65f6bd":"Aguero leads the line in terms of ROI in the premium bracket with Ings a close second. Jesus, Martial, Jiminez, Vardy form the next group of potential candidates to displace those two. \n\nKane, Firmino, Richarlison are overpriced in the current scenario and it would be best to stay away from them till their form improves. \n\nThe 6.0 quartet of Adams, Gayle, Mousset, and Ihenacho is the rotating shoppers paradise with Che Admas showing particular promise towards the end of the last season. \n\nAny injury to the Liverpool frontline immediately puts Origi in contention with his ROI making a mockert of the 5.5 tag. \n\nGiroud and Abhraham although had strong ROIs will most likely play second fiddle to the incoming Werner. \n\nChris Wood, Antonio, Maupay all 6.5 and Rogriguez can prove to be great differentials during a strong run of fixtures. \n\n","e32ea340":"We can see the confirmation of some of our earlier notions and some interesting observations. \nCity still have the worst defense which they hope to fix by introducing $40 mn man Ben Ake and the fitness of Laporte who was on a lengthy injury lay-off last season. \n\nSheffield still has the highest defensive points even with Lundstram as a midfielder. However the prices of the previous cut price Sheffield assets have gone up considerably and we will look at that shortly. \n\nMatt Riche as a midfielder puts Burley and Wolves at a higher level than Newcastle. \n\nUnited turns out to be the champion in midfield and not City. Villa is the second best by a slim margin over a host of other clubs. The midfield competition gets tigher with City, Liverpool, Chelsea, Arsenal, Spurs, West Ham all between 45-48 percent points. \n\nSouthampton, and now Everton (due to Richarlison as a forward), depend on their front lines to reign in the fantasy points. \n\nThe stage is set to dive into player level analysis.......","b7c2a459":"Before we jump into reading this chart, lets split out the chart by postion of the player. \n","32566467":"Let's take a look at the keys in the dataset....","e9e4a004":"In midfield, De Bruyne 11.5 provides better value than the higher priced Salah, Mane, Aubamayeng all 12.0 and Sterling at 11.5. \n\nThe next group of players comprises Rashford at 9.5, Willian at 8.0 and Son at 9.0. \n\nMahrez and Greenwood are absolute value picks if they can manage retain a regular place and keep up with their last season form. \n\nIn a similar fashion, I am going to clear the clutter (hopefully) by removing these players. ","e7c064b1":"TAA as we all know is an absolute monster providing a fantastic ROI combined with the highest number of points. Alonso was a source of cosistent points and has to potential to make a mockery of the 6.0 price tag if he can nail down a consistent starting place. \n\nDoherty still makes a strong case for investment over the other Liverpool defenders provided Wolves can keep up their defensive record and still allow him freedom to attack. \n\nThe rest of the chart is almost illegible and I am going to redo it below after removing the premium defenders. ","0f19ad3b":"It is intresting to check how the clubs rank on total fantasy points earned. ","2badbdc5":"We can see that both data structures are lists of dictionaries. Further manipulation can be done using Pandas. ","95746f3a":"# **This notebook provides a quick analysis of the Fantasy EPL Assets for the upcoming season (2020-21)**\n\nThe analysis is purely based on fantasy stats from the FPL dataset. More sophistaced methods involve supplementing the dataset here with xG and xA stats which are availble with paid data streams. \n\nA fair bit of the starting block of the notebook is an exploratory piece into the dataset for the benefit of beginners and people who want to analyze it further. ","7fb6bdd9":"We have created a combined dataframe which has all 2019-20 metrics with the 2020 player positions, teams, prices. Lets have another look at our points table. ","2c1bd3dc":"The first thing we are going to do is just replicate the analysis above after accouting for positional changes in the new season. It is not enough to reclassify the player directly, rather we need to recount the total score as a result of the players change of position. We can do that by defining a function for points calculation and applying it to the dataframe row-wise. \n\nA key point to note is that we are not working with a gameweek level dataset. Hence we are unable to know if a players gets 2 points in a gw after playing 60 mins or if points got deducted for more than 2 goals conceded by a defensive player in a gameweek. \n\nIn order to approximate this, we will calculate the points based on the FPL scoring model and then subtract these calculated points from the total points. This gives us the sum of the gameweek points over the season.","6e39e2c2":"The datafiles are jsons and require to be read from the file and converted into a dictionary using the code below. ","0946a26e":"In terms of points scoring potential in a gameweek, the city assets Aguero, Mahrez, and De Bruyne are head and shoulders above anyone else. Liverpool pair Salah and Mane are distant second places. \n\nIt would make a better read to look at this chart normalized by price. This is the reason we have constructed the per million per 90 minutes ROI value.  ","a01c4cd7":"We can that ManCity and to some extent Leicester outperformed in terms of Fantasy points. Newcastle, WestHam and Villa also showed a similar trend. \n\nSimilarly Liverpool, Spurs, Southampton, Palace, showed a negative deviation. \n\nLet's dive into understanding how these clubs scored those points on a position and a player level. ","8dde1412":"The notable mention here goes to Fernandes 10.5 (overwritten by Henderson) who played just half a season and racked up 115 points. \n\nPulisic can also offer a massive differential if he can cement his starting position under Lampard. \n\nPerez now classified as a midfielder offers great value at 6.5 and also will be a star if he can put minutes on the board rather than on the bench. \n\nMost other assets seem to be overpriced and it is upon us to find the new Grealish and Mount rather than buy them at their increased prices. Armstrong has the potential to deliver in this area and will need an eye-test and good run of fixtures to merit investment. ","66bcb645":"As with any created features, its important to note their correlation. We can observe that the points per 90 and points per 90 are certainly correlated. We will dig into this further to make sense of the relationship. For now we will consider it to be the fact that players who score more points also naturally give more ROI. \n\nThe other correlated pairs are club points percent and bonus points percent which is expected. Players who outperform at their club are the usual suspects for bonus points. \n\nLet's plot some scatter charts...\n","fdcbe5a3":"While most of the values have very small changes in total points, there are some notable items in the table. Arsenal see a 25 point bump due to Aubamayeng's position change to a midfielder. Sheffield, Newcastle and West Ham the previous outperformers all see points docked due to positional updates. \nIf we take a look at the split of projected points by position, we can identify each team's area of investment more accurately. ","901c2199":"We have more than halved our player list from 747 to 296. But even 296 is a really large list and we are yet to consider new arrivals to the epl this year both players and promoted clubs. \nBut lets take a look at how many players are there per club in this list.","d683d685":"**And that's all folks. Hope you found this interesting and enlightening. Feel free to share any questions and have a great FPL season. \nGood Luck!**","b06fa5da":"Most clubs are around the 17-20 mark since this type of filtering has removed the inconsequential 93rd minute substitutions getting 1 point per game or the holding midfields who hardly earn any points. \n\nThe next step is to create a metric to compare these players. It would be too easy if there was a single metric to identify the best players. We are going to build a few metrics with their logic explained. To the hardened FPL player these should be familiar terms. \n* Points per 90 mins - Gives the expected value of points in a gameweek\n* Points per million per 90 mins - Gives the expected ROI of points in a gameweek \n* Player points as a percent of club points - Gives the relative importance of the player to the club\n* Bonus points percent of total points scored - Compares the ability of the player to earn bonus points","6d1d1a74":"The key called 'elements' contains the player list and the key called 'teams' contains the team level stats.\nLets get a look at the team stats for 2019-20. It is a good practice to take a look at the datatype of the data in each key.","a283518d":"If Willy Boly 5.5 is fit, the case for a double investment in the Wolves defense is strong if the fixtures align well. \n\nAlso in the 5.5 bracket, Stevens, Tarkowski, Baldock, Wan Bissaka, Jonny, Aurier, vanAnholt are in a tight race. The first three are the best consistent bets while Aurier could be a strong differential if Spurs are able to keep things tight at the back.\n\nEgan provides the best balance between ROI and total points at 5.0. Dunk is a close second. \n\nThe best 4.5 player is Webster just shy of 90 points. Him along with the rest of the players do not inspire a lot confidence. It is wise to spend that \\\\$1 saved from the Goalkeepers in defense to go from 4.5 to 5.5 or 5.0. ","44a7cd06":"The chart above shows the ROI analysis for Goalkeepers. In the premium segment, both Ederson and Alission do not make a case for investment due to City's poor defensive record last season and Alissons injury which also to an extent impacted the Liverpool defense. \n\nA keeper priced at 5.5 is the new go to choice if the intention is to gain a lift from the Goalkeepers. Choices include Pope, Schmeichel, Patricio, deGea, with Henderson moving to United that is an interesting dynamic. However the availablity of Ryan at 4.5 and Guaita and Dubravka both at 5.0 is a tempting prospect.   \n\nRyan looks like the best option to start with. A wildcard can be used to realgin the strategy should a higher priced keeper start providing consistent returns. The incremental lift in points from Ryan to anyone is at best around 25 for \\\\$1. The case for investment of this \\\\$1 elsewhere in the team is much stronger thanks to the various options further up the pitch. \n\nLet's look at Defenders","5649b73b":"The table is starting to give some insights. City's defensive fantasy assets had a terrible fantasy season with just 31.15% of their total points coming from Goalkeepers and Defenders. That's the worst in the league. Astonishing for a team of their cadre. \n\nIn contrast, Sheffield scored 61.48% of their points from their strong 5 man defense and the goal scoring exploits of the misclassified Lundstram. \n\nAlong with Sheffield, Newcastle and Wolves make a case for investment in their defensive assets but the change in position for Matt Ritche may put a damper on the Magpies. \n\nCity had the best midfield points ratio lead by the massive 251 point haul from Kevin De Bruyne. West Ham's 55.06% points can be attributed to the misclassified Antonio hitting from after the lockdown. Villa have the next best midfield ratio mostly attributed to Grealish who was 10th in the midfielder ranking. Spurs have the benefit of Son's exploits. Other notable mentions include Liverpool with Salah and Mane, Chelsea with none of their midfields in the top 10, and Norwich who were not let down by their midfield. \n\nThe teams depending mostly on their front line are Southampton with Ings, Arsenal with Aubamayeng (now a midfielder), Burnley, and the now departed Watford and Bournemouth.\n\nWe have only considered aggregate team level stats, and it's time to dive into player level analysis. Before we do that it is important to address that player positions and prices have changed in the new season. We will factor those in our calculations. "}}