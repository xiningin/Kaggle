{"cell_type":{"9fa08250":"code","b03b57fe":"code","5422df0a":"code","f4339870":"code","4a369257":"code","b8e649d1":"code","75fb52c2":"code","d4fab4af":"code","277d0f20":"code","2c1ab9e0":"code","e3826631":"code","41f268fa":"code","456d0ccb":"code","ed988bfc":"code","0127b9ea":"code","dda8a272":"code","24f29625":"code","b2ff7240":"code","6ef549f8":"code","b493879a":"code","8248db8d":"code","0d7d821e":"code","7f2c7491":"code","e1fda99e":"code","60b15b15":"code","305577c1":"code","502694d6":"code","8361dd2b":"code","489ff1a1":"code","4ae4a086":"code","a1207792":"code","17769ba6":"code","aa918f6a":"code","c6009d26":"code","e08537f7":"code","da160be3":"code","b4f4ceef":"code","271db3b5":"code","3941e771":"code","5c6b77b4":"code","3df619b5":"code","2493f9ae":"code","8b5a83be":"code","d00d46be":"code","c7be8cf8":"code","3df1cfb3":"code","e8d9e547":"code","f3adb7cd":"code","902c6a16":"code","2f4d4cb5":"code","1b931d7a":"code","bb15fa38":"code","298bad92":"code","c9290eae":"code","21280ad3":"code","149f121f":"code","ad460d08":"code","7258c01c":"code","1c04789e":"code","2f5a89b4":"code","f1e6a1e3":"code","633924eb":"code","37e5d8b0":"code","2b542392":"code","fe97522c":"code","9ea41087":"code","cc3ccbca":"code","a908b0b5":"code","a8557a1c":"code","b88e6393":"code","b05d275f":"code","7e71cb68":"code","a64b8142":"code","52597a0c":"code","d3a2e528":"code","2a447727":"code","92761800":"code","d7104e12":"code","926a6bfd":"code","95496528":"code","25eedfa1":"code","15adccbb":"code","c54ed7ae":"code","44a6aa49":"code","ad241727":"code","a78a0047":"code","282f58b0":"code","9352f9da":"code","318e6dfc":"code","3ac304ab":"code","95f4205c":"code","b65d4374":"code","976c942e":"code","a70f135d":"code","c2ade786":"code","cf2ff6b6":"code","2bd599c7":"code","b2f2b78c":"code","11607429":"code","1dced0a7":"code","f3172e44":"code","940992e1":"code","b793cd50":"code","eb3fc892":"code","07ff5a9f":"code","d86e1ea2":"code","b9ad8483":"code","a47d8af3":"code","cf7aa5df":"code","534b8d56":"code","d00c682b":"code","cad732c6":"code","3529aed8":"markdown","4e454a69":"markdown","2ec11d41":"markdown","52eb17e6":"markdown","cc3101f0":"markdown","67d7d62d":"markdown","afde8430":"markdown","b7526922":"markdown","82530326":"markdown","352fa8ab":"markdown","7a1a9918":"markdown","de497e19":"markdown","cc8d4b35":"markdown","31d45269":"markdown","49564dd2":"markdown","a5d125ea":"markdown","2e68b9c9":"markdown"},"source":{"9fa08250":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b03b57fe":"import seaborn as sns \nimport matplotlib.pyplot as plt","5422df0a":"train=pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")\ntest=pd.read_csv(\"..\/input\/home-data-for-ml-course\/test.csv\")","f4339870":"train.head()","4a369257":"train.info()","b8e649d1":"train.shape","75fb52c2":"train.isnull().sum().sum()","d4fab4af":"missing_values = train.isnull().sum()\nmissing_values = missing_values[missing_values > 0]\nmissing_values.sort_values(inplace=True)\nmissing_values","277d0f20":"missing_values = missing_values.to_frame()\nmissing_values.columns = ['count']\nmissing_values['Name'] = missing_values.index","2c1ab9e0":"sns.set(style=\"whitegrid\", color_codes=True)\nsns.barplot(x = 'Name', y = 'count', data=missing_values)\nplt.xticks(rotation = 90)\nplt.style.use(\"fivethirtyeight\")\nplt.gcf().set_size_inches(12,6)\nplt.show()","e3826631":"null_columns=test.columns[test.isnull().any()]\ntest[null_columns].isnull().sum()","41f268fa":"train.drop(train[['Alley','FireplaceQu','PoolQC','Fence','MiscFeature','MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','SaleType','SaleCondition','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure','GarageType','GarageYrBlt','GarageFinish','GarageQual','GarageCond','BsmtFinType1','BsmtFinType2','LotFrontage','MasVnrArea','GarageCars','Functional','KitchenQual','BsmtFullBath','BsmtHalfBath','BsmtFinType1','BsmtFinSF2','BsmtUnfSF','Electrical','Heating','HeatingQC','CentralAir','PavedDrive']],axis=1,inplace=True)\ntest.drop(test[['Alley','FireplaceQu','PoolQC','Fence','MiscFeature','MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','SaleType','SaleCondition','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure','GarageType','GarageYrBlt','GarageFinish','GarageQual','GarageCond','BsmtFinType1','BsmtFinType2','LotFrontage','MasVnrArea','GarageCars','Functional','KitchenQual','BsmtFullBath','BsmtHalfBath','BsmtFinType1','BsmtFinSF2','BsmtUnfSF','Electrical','Heating','HeatingQC','CentralAir','PavedDrive']],axis=1,inplace=True)","456d0ccb":"main_features=['OverallQual','GrLivArea','GarageCars','GarageArea','TotalBsmtSF','1stFlrSF','FullBath','TotRmsAbvGrd','YearBuilt','YearRemodAdd']","ed988bfc":"train.head()","0127b9ea":"null_columns=train.columns[train.isnull().any()]\ntrain[null_columns].isnull().sum()","dda8a272":"null_columns=test.columns[test.isnull().any()]\ntest[null_columns].isnull().sum()","24f29625":"print(test['GarageArea'].mean())\nprint(test['TotalBsmtSF'].mean())\nprint(test['BsmtFinSF1'].mean())","b2ff7240":"test['GarageArea'].fillna(value=472.7,inplace=True)\ntest['TotalBsmtSF'].fillna(value=1046.1,inplace=True)\ntest['BsmtFinSF1'].fillna(value=439.2,inplace=True)","6ef549f8":"print(train.isnull().sum().sum())\nprint(test.isnull().sum().sum())","b493879a":"train.shape","8248db8d":"test.shape","0d7d821e":"X=train.drop(['SalePrice'],axis=1)\ny=train['SalePrice']","7f2c7491":"from sklearn.model_selection import train_test_split","e1fda99e":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)","60b15b15":"print(len(X_train),len(y_train),len(X_test),len(y_test))","305577c1":"from sklearn.linear_model import LinearRegression\nmodel=LinearRegression()","502694d6":"model.fit(X_train,y_train)","8361dd2b":"predictions=model.predict(X_test)","489ff1a1":"model.score(X_test,y_test)","4ae4a086":"from sklearn.ensemble import RandomForestRegressor\n\nmodel_2 = RandomForestRegressor()","a1207792":"model_2.fit(X_train,y_train)","17769ba6":"predictions_2=model_2.predict(X_test)","aa918f6a":"model_2.score(X_test,y_test)","c6009d26":"from sklearn.tree import DecisionTreeRegressor\nmodel_3 = DecisionTreeRegressor()","e08537f7":"model_3.fit(X_train,y_train)","da160be3":"predictions_3=model_3.predict(X_test)","b4f4ceef":"model_3.score(X_test,y_test)","271db3b5":"from sklearn.neighbors import KNeighborsRegressor","3941e771":"model_4=KNeighborsRegressor()","5c6b77b4":"model_4.fit(X_train,y_train)","3df619b5":"predictions_4=model_4.predict(X_test)","2493f9ae":"model_4.score(X_test,y_test)","8b5a83be":"final_model = RandomForestRegressor()","d00d46be":"final_model.fit(X,y)","c7be8cf8":"final_pred=final_model.predict(test)","3df1cfb3":"submission = pd.DataFrame({'Id':test.Id, 'SalePrice': final_pred})","e8d9e547":"submission.to_csv('submission.csv', index=False)","f3adb7cd":"print(submission)","902c6a16":"train=pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")","2f4d4cb5":"plt.figure(figsize=(35,20))\nsns.heatmap(train.corr(method=\"spearman\"),annot=True)","1b931d7a":"train.head()\npd.set_option(\"display.max_columns\",90)","bb15fa38":"train.head()","298bad92":"features_1=train[[\"OverallQual\",\"YearBuilt\",\"YearRemodAdd\",\"TotalBsmtSF\",\"1stFlrSF\",\"GrLivArea\",\"FullBath\",\"TotRmsAbvGrd\",\"GarageCars\",\"GarageArea\",\"SalePrice\"]].copy()","c9290eae":"plt.figure(figsize=(12,6))\nplt.scatter(train[\"OverallQual\"],train[\"SalePrice\"])\nplt.xlabel(\"OverallQual\")\nplt.ylabel(\"SalePrice\")\nplt.show()","21280ad3":"plt.figure(figsize=(12,6))\nplt.scatter(train[\"YearBuilt\"],train[\"SalePrice\"])\nplt.xlabel(\"YearBuilt\")\nplt.ylabel(\"SalePrice\")\nplt.show()","149f121f":"plt.figure(figsize=(12,6))\nplt.scatter(train[\"YearRemodAdd\"],train[\"SalePrice\"])\nplt.xlabel(\"YearRemodAdd\")\nplt.ylabel(\"SalePrice\")\nplt.show()","ad460d08":"plt.figure(figsize=(12,6))\nplt.scatter(train[\"TotalBsmtSF\"],train[\"SalePrice\"])\nplt.xlabel(\"TotalBsmtSF\")\nplt.ylabel(\"SalePrice\")\nplt.show()","7258c01c":"plt.figure(figsize=(12,6))\nplt.scatter(train[\"1stFlrSF\"],train[\"SalePrice\"])\nplt.xlabel(\"1stFlrSF\")\nplt.ylabel(\"SalePrice\")\nplt.show()","1c04789e":"plt.figure(figsize=(12,6))\nplt.scatter(train[\"GrLivArea\"],train[\"SalePrice\"])\nplt.xlabel(\"GrLivArea\")\nplt.ylabel(\"SalePrice\")\nplt.show()","2f5a89b4":"plt.figure(figsize=(12,6))\nplt.scatter(train[\"FullBath\"],train[\"SalePrice\"])\nplt.xlabel(\"FullBath\")\nplt.ylabel(\"SalePrice\")\nplt.show()","f1e6a1e3":"plt.figure(figsize=(12,6))\nplt.scatter(train[\"TotRmsAbvGrd\"],train[\"SalePrice\"])\nplt.xlabel(\"TotRmsAbvGrd\")\nplt.ylabel(\"SalePrice\")\nplt.show()","633924eb":"plt.figure(figsize=(12,6))\nplt.scatter(train[\"GarageCars\"],train[\"SalePrice\"])\nplt.xlabel(\"GarageCars\")\nplt.ylabel(\"SalePrice\")\nplt.show()","37e5d8b0":"plt.figure(figsize=(12,6))\nplt.scatter(train[\"GarageArea\"],train[\"SalePrice\"])\nplt.xlabel(\"GarageArea\")\nplt.ylabel(\"SalePrice\")\nplt.show()","2b542392":"features_1.head()","fe97522c":"features_1.shape","9ea41087":"features_1.isnull().sum()","cc3ccbca":"X=features_1.drop(\"SalePrice\",axis=1)\ny=features_1[\"SalePrice\"]","a908b0b5":"from sklearn.model_selection import train_test_split","a8557a1c":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)","b88e6393":"print(len(X_train),len(y_train),len(X_test),len(y_test))","b05d275f":"from sklearn.linear_model import LinearRegression\nmodel=LinearRegression()","7e71cb68":"model.fit(X_train,y_train)","a64b8142":"predictions=model.predict(X_test)","52597a0c":"model.score(X_test,y_test)","d3a2e528":"from sklearn.ensemble import RandomForestRegressor","2a447727":"model_2=RandomForestRegressor()","92761800":"model_2.fit(X_train,y_train)","d7104e12":"predictions_2=model_2.predict(X_test)","926a6bfd":"model_2.score(X_test,y_test)","95496528":"from sklearn.tree import DecisionTreeRegressor\nmodel_3 = DecisionTreeRegressor()","25eedfa1":"model_3.fit(X_train,y_train)","15adccbb":"predictions=model_3.predict(X_test)","c54ed7ae":"model_3.score(X_test,y_test)","44a6aa49":"from sklearn.neighbors import KNeighborsRegressor\nmodel_4=KNeighborsRegressor()","ad241727":"model_4.fit(X_train,y_train)","a78a0047":"predictions_4=model_4.predict(X_test)","282f58b0":"model_4.score(X_test,y_test)","9352f9da":"train=pd.read_csv(\"..\/input\/home-data-for-ml-course\/train.csv\")","318e6dfc":"features_3=train[[\"Id\",\"MSSubClass\",\"OverallCond\",\"BsmtFinSF2\",\"LowQualFinSF\",\"BsmtHalfBath\",\"KitchenAbvGr\",\"EnclosedPorch\",\"MiscVal\",\"YrSold\",\"SalePrice\"]]","3ac304ab":"features_3.isnull().sum()","95f4205c":"X=features_3.drop(\"SalePrice\",axis=1)","b65d4374":"y=features_3[\"SalePrice\"]","976c942e":"from sklearn.model_selection import train_test_split","a70f135d":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)","c2ade786":"print(len(X_train),len(y_train),len(X_test),len(y_test))","cf2ff6b6":"from sklearn.linear_model import LinearRegression\nmodel=LinearRegression()","2bd599c7":"model.fit(X_train,y_train)","b2f2b78c":"predictions=model.predict(X_test)","11607429":"model.score(X_test,y_test)","1dced0a7":"from sklearn.tree import DecisionTreeRegressor","f3172e44":"model_2=DecisionTreeRegressor()","940992e1":"model_2.fit(X_train,y_train)","b793cd50":"predictions=model_2.predict(X_test)","eb3fc892":"model_2.score(X_test,y_test)","07ff5a9f":"from sklearn.ensemble import RandomForestRegressor\nmodel_3=RandomForestRegressor()","d86e1ea2":"model_3.fit(X_train,y_train)","b9ad8483":"predictions_3=model_3.predict(X_test)","a47d8af3":"model_3.score(X_test,y_test)","cf7aa5df":"from sklearn.neighbors import KNeighborsRegressor\nmodel_4=KNeighborsRegressor()","534b8d56":"model_4.fit(X_train,y_train)","d00c682b":"predictions_4=model_4.predict(X_test)","cad732c6":"model_4.score(X_test,y_test)","3529aed8":"# RandomForestRegressor","4e454a69":"# Random Forest Regressor","2ec11d41":"# Data Visualization","52eb17e6":"# Random Forest Regressor","cc3101f0":"# Taking columns having Correlation more than 0.50","67d7d62d":"# LinearRegression","afde8430":"# DecisionTreeRegressor","b7526922":"# KNeighborsRegressor","82530326":"# DecisionTreeRegressor","352fa8ab":"# Data Cleaning","7a1a9918":"# DecisionTreeRegressor","de497e19":"# K-NeighborsRegressor","cc8d4b35":"# Taking Correlation having all values Negative","31d45269":"# Linear Regression","49564dd2":"# Final model","a5d125ea":"# LinearRegression","2e68b9c9":"# K-NeighborsRegressor"}}