{"cell_type":{"4f06fd37":"code","c229aa68":"code","6a136e1a":"code","89e22f64":"code","fdcb09ec":"code","b3b67753":"code","54145876":"code","188602fa":"code","828b5b40":"code","4c32b168":"code","9d34e85c":"code","ec1b53e0":"code","8899abb5":"code","46c51194":"code","9b9ae55f":"code","f8ceaa95":"code","15195d13":"code","b8cd093c":"code","33f01a3b":"code","75866008":"code","3b6fab91":"code","3634d6d4":"code","060c4f42":"code","5479730b":"code","55e5b233":"code","220083bc":"code","14ecd49d":"code","d28be0f8":"code","828f94f2":"code","792fcfc9":"code","557770ae":"code","22ca52d0":"code","3fe580ea":"code","87d83abd":"code","99d340e6":"code","e9fae7c7":"code","1c07edf1":"code","1d6dcf9e":"code","abaa04c5":"code","8a96dc03":"markdown","88ff12ad":"markdown","846a46be":"markdown","ded0a7db":"markdown","27ab1fcb":"markdown","03a25908":"markdown","2760d123":"markdown","0055dc62":"markdown","79fc8c52":"markdown","660cf1b5":"markdown","20cbcb9e":"markdown","70b78f94":"markdown"},"source":{"4f06fd37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c229aa68":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport missingno as msno\nfrom sklearn.impute import KNNImputer\n# Autoreg, autocorrolationand time series tools...\n\nfrom pandas.plotting import lag_plot, autocorrelation_plot\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom sklearn.metrics import mean_squared_error\nfrom statsmodels.tsa.ar_model import AutoReg\nfrom statsmodels.tsa.stattools import adfuller, acf, pacf,arma_order_select_ic\n%matplotlib inline\nfrom matplotlib import rcParams\n\nfrom scipy.stats import skew\n\nplt.style.use('seaborn-whitegrid')\n\nfrom termcolor import colored\nimport pycountry\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\n!pip install chart_studio\nimport chart_studio.plotly as py\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n#py.init_notebook_mode(connected=True)\n\n#Racing Bar Chart\n!pip install bar_chart_race\nimport bar_chart_race as bcr\nfrom IPython.display import HTML\n\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\nplt.style.use(\"fivethirtyeight\")# for pretty graphs","6a136e1a":"data_2019 = pd.read_csv('\/kaggle\/input\/iaqidata2019\/iaqi2019.csv').sort_values(by = ['Date', 'City'])","89e22f64":"print(list(data_2019.columns))","fdcb09ec":"data_2019.head(9)","b3b67753":"data_2019.describe()","54145876":"data_2019.info()","188602fa":"# Convert string to datetime64\ndata_2019['Date'] = pd.to_datetime(data_2019['Date'])","828b5b40":"print(f\"The available data is between {data_2019['Date'].min()} and {data_2019['Date'].max()}\")\n","4c32b168":"def missing_value_table(data_2019):\n    values = data_2019.isnull().sum()\n    percentage = 100*data_2019.isnull().sum()\/len(data_2019)\n    table = pd.concat([values,percentage.round(2)],axis=1)\n    table.columns = ['No of missing values','% of missing values']\n    return table[table['No of missing values']!=0].sort_values('% of missing values',ascending=False).style.background_gradient('Greens')\n    \nmissing_value_table(pd.read_csv('..\/input\/iaqidata2019\/iaqi2019.csv'))","9d34e85c":"pd.read_csv('\/kaggle\/input\/iaqidata2019\/iaqi2019.csv').isnull().sum().plot(kind ='pie')","ec1b53e0":"data_2019.corr().AQI.sort_values(ascending = False)","8899abb5":"data_2019['BTXN'] = data_2019['Benzene'] + data_2019['Xylene'] + data_2019['Toluene'] + data_2019['NH3']\n\ndata_2019['ParticulateMatters'] = data_2019['PM2.5'] + data_2019['PM10']\n\ncorr_with_AQI = data_2019.corr().AQI.sort_values(ascending = False)\n\n\ncorr_with_AQI","46c51194":"pollutants = ['PM2.5','PM10','NO2', 'CO', 'SO2','O3', 'BTXN']","9b9ae55f":"most_polluted = data_2019[['City', 'AQI', 'PM10', 'CO']].groupby(['City']).mean().sort_values(by = 'AQI', ascending = False)\nmost_polluted","f8ceaa95":"plt.style.use('seaborn-whitegrid')\nf, ax_ = plt.subplots(1, 3, figsize = (15,15))\n\nbar1 = sns.barplot(x = most_polluted.AQI,\n                   y = most_polluted.index,\n                   palette = 'Reds_r',\n                   ax = ax_[0]);\n\nbar1 = sns.barplot(x = most_polluted.PM10,\n                   y = most_polluted.index,\n                   palette = 'RdBu',\n                   ax = ax_[1]);\n\nbar1 = sns.barplot(x = most_polluted.CO,\n                   y = most_polluted.index,\n                   palette = 'RdBu',\n                   ax = ax_[2]);\n\ntitles = ['AirQualityIndex', 'ParticulateMatter10', 'CO']\nfor i in range(3) :\n    ax_[i].set_ylabel('')   \n    ax_[i].set_yticklabels(labels = ax_[i].get_yticklabels(),fontsize = 14);\n    ax_[i].set_title(titles[i])\n    f.tight_layout()","15195d13":"import plotly.express as px\n\ndf = data_2019.drop(columns = ['Date', 'AQI_Bucket', 'AQI']).groupby('City').sum().reset_index()\nfig = px.treemap(pd.melt(df, id_vars = 'City'), path=['City','variable'],\n                 values=pd.melt(df, id_vars = 'City')['value'],\n                 title = 'Cities and the proportion of pollution in each')\nfig.show()","b8cd093c":"combined = pd.read_csv('\/kaggle\/input\/combineddata\/2019-2020.csv').sort_values(by = [ 'City'])\ncombined.set_index('Date',inplace=True)\naxes = data_2019[pollutants].plot(marker='.', alpha=0.5, linestyle='None', figsize=(16, 20), subplots=True)\nfor ax in axes:\n    \n    ax.set_xlabel('Years')\n    ax.set_ylabel('ug \/ m3')\n","33f01a3b":"def trend_plot(dataframe,value):\n    \n    df['year'] = [d.year for d in df.Date]\n    df['month'] = [d.strftime('%b') for d in df.Date]\n    years = df['year'].unique()\n\n    # Draw Plot\n    fig, axes = plt.subplots(1, 2, figsize=(14,6), dpi= 80)\n    sns.boxplot(x='year', y=value, data=df, ax=axes[0])\n    sns.pointplot(x='month', y=value, data=df.loc[~df.year.isin([2015, 2020]), :])\n\n    # Set Title\n    axes[0].set_title('Year-wise Box Plot \\n(The Trend)', fontsize=18); \n    axes[1].set_title('Month-wise Plot \\n(The Seasonality)', fontsize=18)\n    plt.show()","75866008":"data_2019.reset_index(inplace=True)\ndf = data_2019.copy()\nvalue='NO2'\ntrend_plot(df,value)","3b6fab91":"df = data_2019.copy()\nvalue='SO2'\ntrend_plot(df,value)","3634d6d4":"value='BTXN'\ntrend_plot(df,value)","060c4f42":"value='PM2.5'\ntrend_plot(df,value)","5479730b":"value='PM10'\ntrend_plot(df,value)","55e5b233":"def max_polluted_city(pollutant):\n    x1 = data_2019[[pollutant,'City']].groupby([\"City\"]).mean().sort_values(by=pollutant,ascending=False).reset_index()\n    x1[pollutant] = round(x1[pollutant],2)\n    return x1[:10].style.background_gradient(cmap='OrRd')\n","220083bc":"from IPython.display import display_html\ndef display_side_by_side(*args):\n    html_str=''\n    for df in args:\n        html_str+=df.render()\n    display_html(html_str.replace('table','table style=\"display:inline\"'),raw=True)","14ecd49d":"pm2_5 = max_polluted_city('PM2.5')\npm10 = max_polluted_city('PM10')\nno2 = max_polluted_city('NO2')\nso2 = max_polluted_city('SO2')\nco = max_polluted_city('CO')\nbtx = max_polluted_city('BTXN')\ndisplay_side_by_side(pm2_5,pm10,no2,so2,co,btx)","d28be0f8":"x2= data_2019[['PM2.5','City']].groupby([\"City\"]).median().sort_values(by='PM2.5',ascending=False).reset_index()\nx3 = data_2019[['PM10','City']].groupby([\"City\"]).median().sort_values(by='PM10',ascending=False).reset_index()\n\nfrom plotly.subplots import make_subplots\nfig = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"PM2.5\",\"PM10\"))\n\nfig.add_trace(go.Bar( y=x2['PM2.5'], x=x2[\"City\"],  \n                     marker=dict(color=x2['PM2.5'], coloraxis=\"coloraxis\")),\n              1, 1)\n\n\nfig.add_trace(go.Bar( y=x3['PM10'], x=x2[\"City\"],  \n                     marker=dict(color=x3['PM10'], coloraxis=\"coloraxis\")),\n              1, 2)\nfig.update_layout(coloraxis=dict(colorscale='reds'), showlegend=False,plot_bgcolor='white')\nfig.update_xaxes(ticks=\"outside\", tickwidth=2,tickangle=45, tickcolor='crimson', ticklen=10,title_text=\"cities\")\nfig.update_yaxes(title_text=\"ug \/ m3\", row=1, col=1)\nfig.update_yaxes(title_text=\"ug \/ m3\", row=1, col=2)\nfig.show()","828f94f2":"x4= data_2019[['CO','City']].groupby([\"City\"]).median().sort_values(by='CO',ascending=False).reset_index()\nx5 = data_2019[['NO2','City']].groupby([\"City\"]).median().sort_values(by='NO2',ascending=False).reset_index()\nx6 = data_2019[['SO2','City']].groupby([\"City\"]).median().sort_values(by='SO2',ascending=False).reset_index()\n\n\nfrom plotly.subplots import make_subplots\nfig = make_subplots(\n    rows=1, cols=3,\n    subplot_titles=(\"CO\",\"NO2\",'SO2'))\n\nfig.add_trace(go.Bar( y=x4['CO'], x=x4[\"City\"],  \n                     marker=dict(color=x4['CO'], coloraxis=\"coloraxis\")),\n              1, 1)\n\n\nfig.add_trace(go.Bar( y=x5['NO2'], x=x5[\"City\"],  \n                     marker=dict(color=x5['NO2'], coloraxis=\"coloraxis\")),\n              1, 2)\n\nfig.add_trace(go.Bar( y=x6['SO2'], x=x5[\"City\"],  \n                     marker=dict(color=x6['SO2'], coloraxis=\"coloraxis\")),\n              1, 3)\nfig.update_layout(coloraxis=dict(colorscale='reds'), showlegend=False,plot_bgcolor='white')\nfig.update_xaxes(ticks=\"outside\", tickwidth=2,tickangle=45, tickcolor='crimson', ticklen=10,title_text=\"cities\")\nfig.update_yaxes(title_text=\"ug \/ m3\", row=1, col=1)\nfig.update_yaxes(title_text=\"ug \/ m3\", row=1, col=2)\nfig.update_yaxes(title_text=\"ug \/ m3\", row=1, col=3)\nfig.show()","792fcfc9":"combined = pd.read_csv('\/kaggle\/input\/combineddata\/2019-2020.csv').sort_values(by = [ 'City'])\ncities = ['Ahmedabad','Delhi','Bengaluru','Jaipur','Hyderabad','Kolkata','Amaravati','Amritsar','Visakhapatnam']\n\nfiltered_combined = combined[combined['Date'] >= '2019-01-01']\nAQI = filtered_combined[filtered_combined.City.isin(cities)][['Date','City','AQI','AQI_Bucket']]\nAQI.head()","557770ae":"AQI_pivot = AQI.pivot(index='Date', columns='City', values='AQI')\nAQI_pivot.fillna(method='bfill',inplace=True)\n\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=6, cols=1,\n    #specs=[[{}, {}],\n          # [{\"colspan\": 6}, None]],\n    subplot_titles=(\"Ahmedabad\",\"Bengaluru\",\"Chennai\",\"Delhi\",'Hyderabad','Mumbai'))\n\nfig.add_trace(go.Bar(x=AQI_pivot.index, y=AQI_pivot['Ahmedabad'],\n                    marker=dict(color=AQI_pivot['Ahmedabad'],coloraxis=\"coloraxis\")),\n              1, 1)\nfig.add_trace(go.Bar(x=AQI_pivot.index, y=AQI_pivot['Bengaluru'],\n                    marker=dict(color=AQI_pivot['Bengaluru'], coloraxis=\"coloraxis\")),\n              2, 1)\nfig.add_trace(go.Bar(x=AQI_pivot.index, y=AQI_pivot['Jaipur'],\n                    marker=dict(color=AQI_pivot['Jaipur'], coloraxis=\"coloraxis\")),\n              3, 1)\nfig.add_trace(go.Bar(x=AQI_pivot.index, y=AQI_pivot['Delhi'],\n                    marker=dict(color=AQI_pivot['Delhi'], coloraxis=\"coloraxis\")),\n              4, 1)\nfig.add_trace(go.Bar(x=AQI_pivot.index, y=AQI_pivot['Hyderabad'],\n                    marker=dict(color=AQI_pivot['Hyderabad'], coloraxis=\"coloraxis\")),\n              5, 1)\nfig.add_trace(go.Bar(x=AQI_pivot.index, y=AQI_pivot['Kolkata'],\n                    marker=dict(color=AQI_pivot['Kolkata'], coloraxis=\"coloraxis\")),\n              6, 1)\n\nfig.update_layout(coloraxis=dict(colorscale='Temps'),showlegend=False,title_text=\"AQI Levels\")\n\nfig.update_layout(plot_bgcolor='white')\n\nfig.update_layout( width=800,height=1200,shapes=[\n      dict(\n      type= 'line',\n      yref= 'paper', y0= 0, y1= 1,\n      xref= 'x', x0= '2020-03-25', x1= '2020-03-25'\n    )\n])\n\nfig.show()","22ca52d0":"AQI_beforeLockdown = AQI_pivot['2020-01-01':'2020-03-25']\nAQI_afterLockdown = AQI_pivot['2020-03-26':'2020-07-01']\n","3fe580ea":"print(AQI_beforeLockdown.mean())\nprint(AQI_afterLockdown.mean())\n","87d83abd":"from matplotlib.patches import Circle, Wedge, Rectangle\n\ndef degree_range(n): \n    start = np.linspace(0,180,n+1, endpoint=True)[0:-1]\n    end = np.linspace(0,180,n+1, endpoint=True)[1::]\n    mid_points = start + ((end-start)\/2.)\n    return np.c_[start, end], mid_points\n\ndef rot_text(ang): \n    rotation = np.degrees(np.radians(ang) * np.pi \/ np.pi - np.radians(90))\n    return rotation","99d340e6":"from matplotlib.patches import Circle, Wedge, Rectangle\ndef gauge(labels=['GOOD','SATISFACTORY','MODERATE','POOR','VERY POOR','EXTREME'], \\\n          colors='jet_r', arrow=1, title='', fname=False): \n    \n    \"\"\"\n    some sanity checks first\n    \n\n\"\"\"\n    \n    N = len(labels)\n    \n    if arrow > N: \n        raise Exception(\"\\n\\nThe category ({}) is greated than \\\n        the length\\nof the labels ({})\".format(arrow, N))\n \n    \n    \"\"\"\n    if colors is a string, we assume it's a matplotlib colormap\n    and we discretize in N discrete colors \n    \"\"\"\n    if isinstance(colors, str):\n        cmap = cm.get_cmap(colors, N)\n        cmap = cmap(np.arange(N))\n        colors = cmap[::-1,:].tolist()\n    if isinstance(colors, list): \n        if len(colors) == N:\n            colors = colors[::-1]\n        else: \n            raise Exception(\"\\n\\nnumber of colors {} not equal \\\n            to number of categories{}\\n\".format(len(colors), N))\n\n    \"\"\"\n    begins the plotting\n    \"\"\"\n    \n    fig, ax = plt.subplots()\n\n    ang_range, mid_points = degree_range(N)\n\n    labels = labels[::-1]\n    \n    \"\"\"\n    plots the sectors and the arcs\n    \"\"\"\n    patches = []\n    for ang, c in zip(ang_range, colors): \n        # sectors\n        patches.append(Wedge((0.,0.), .4, *ang, facecolor='w', lw=2))\n        # arcs\n        patches.append(Wedge((0.,0.), .4, *ang, width=0.10, facecolor=c, lw=2, alpha=0.5))\n    \n    [ax.add_patch(p) for p in patches]\n    \"\"\"\n    set the labels (e.g. 'LOW','MEDIUM',...)\n    \"\"\"\n\n    for mid, lab in zip(mid_points, labels): \n\n        ax.text(0.35 * np.cos(np.radians(mid)), 0.35 * np.sin(np.radians(mid)), lab, \\\n            horizontalalignment='center', verticalalignment='center', fontsize=14, \\\n            fontweight='bold', rotation = rot_text(mid))\n\n    \"\"\"\n    set the bottom banner and the title\n    \"\"\"\n    r = Rectangle((-0.4,-0.1),0.8,0.1, facecolor='w', lw=2)\n    ax.add_patch(r)\n    \n    ax.text(0, -0.05, title, horizontalalignment='center', \\\n         verticalalignment='center', fontsize=22, fontweight='bold')\n\n    \"\"\"\n    plots the arrow now\n    \"\"\"\n    \n    pos = mid_points[abs(arrow - N)]\n    \n    ax.arrow(0, 0, 0.225 * np.cos(np.radians(pos)), 0.225 * np.sin(np.radians(pos)), \\\n                 width=0.04, head_width=0.09, head_length=0.1, fc='k', ec='k')\n    \n    ax.add_patch(Circle((0, 0), radius=0.02, facecolor='k'))\n    ax.add_patch(Circle((0, 0), radius=0.01, facecolor='w', zorder=11))\n\n    \"\"\"\n    removes frame and ticks, and makes axis equal and tight\n    \"\"\"\n    ax.set_frame_on(False)\n    ax.axes.set_xticks([])\n    ax.axes.set_yticks([])\n    ax.axis('equal')\n    plt.tight_layout()\n    if fname:\n        fig.savefig(fname, dpi=200)","e9fae7c7":"display(\"Ahmedabad's AQI levels\")\n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \\\n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=5, title='Ahmedabad AQI before Lockdown') \n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \\\n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=3, title='Ahmedabad AQI After Lockdown') ","1c07edf1":"display(\"Delhi's AQI levels\")\n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \\\n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=4, title=\"Delhi's AQI before Lockdown\") \n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \\\n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=3, title=\"Delhi's AQI after Lockdown\") ","1d6dcf9e":"display(\"Amritsar's AQI levels\")\n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \\\n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=3, title=\"Amritsar's AQI before Lockdown\") \n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \\\n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=2, title=\"Amritsar's AQI after Lockdown\") ","abaa04c5":"display(\"Jaipur's AQI levels\")\n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \\\n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=3, title=\"Jaipur's AQI before Lockdown\") \n\ngauge(labels=['Good','Satisfactory','Moderate','Poor','Very Poor','Extreme'], \\\n      colors=['#007A00','#90EE90','#ffff00','#FF9900','#ff0000','#CC0000'], arrow=2, title=\"Jaipur's AQI after Lockdown\")","8a96dc03":"# PM2.5","88ff12ad":"# BTNX(BENZENE, TOLUENE, NH3, XYLENE)","846a46be":"# Effect of Lockdown on AQI","ded0a7db":"# 1)There is a clear trend that pollution level in India falls in the month of July and August. This might be majorly because monsoon sesason sets in during these months.The BTX levels additionally show a major decline around April.\n\n# 2)The pollution level then start rising and reach highest leveks in winter months. Again, its during these months that a lot of crop residue burning takes place,especially in northern parts of India.","27ab1fcb":"# SO2","03a25908":"# Delhi and Ahmedabad seem to top the charts. Ahmedabad has maximum concenterations of NO2,SO2 as well as CO levels.","2760d123":"# NO2","0055dc62":"# Seasonality of our data ","79fc8c52":"# PM10","660cf1b5":"# Visualising yearly data(2019)","20cbcb9e":"The black vertical line shows the date on which the first phase of lockdown came into effect in India.\n\nThe above graph shows the variation of various pollutant levels, from Jan 2019 onwards till july 2020.\n\nApparantely, all the above Indian cities seem to be a dangerously high level of pollution levels.\n\nClearly, there appears to be a rapid decline after 25th March,2020(lockdown).","70b78f94":"PM2.5 and PM10 pollution show a seasonal effect, with pollution being higher in winter months as compared to the summer ones."}}