{"cell_type":{"55e0cc6d":"code","4ba0877f":"code","2276d938":"code","541f420c":"code","71e5cf01":"code","d6235551":"code","45434fe7":"code","6d9404b0":"code","b991394b":"code","fbdf3448":"code","6697cb23":"code","b8c97297":"markdown","f0ec7865":"markdown"},"source":{"55e0cc6d":"# import some importatnt packages that are used for linear regression\nimport numpy as np\nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline","4ba0877f":"# use the pandas to load the dataset\ndf = pd.read_csv('..\/input\/CiVilium\/train_final.csv')\n# get the timetamp and CiVilium trading volume within the csv file\nX = df[['Unix_Timestamp','Volume_CiVilium']]\n# get the stocking price which is the targeting prediction of the model \ny = df[['Weighted_Price']]","2276d938":"# Now we split the data into training set and validation set\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=10086)","541f420c":"# This function is to define a loss metric which is root mean squre error in this task\ndef rmse(true, predicted):\n    rmse = math.sqrt(mean_squared_error(true, predicted))\n    return rmse\n","71e5cf01":"# Now we initialize a linear Regression model using scikit-learn package\nlin_reg = LinearRegression()\n# fit the data with model\nlin_reg.fit(X_train,y_train)","d6235551":"# calculate and print the train set error\ntrain_pred = lin_reg.predict(X_train)\nprint(rmse(y_train,train_pred))","45434fe7":"# calculate and print the validation set error\nval_pred = lin_reg.predict(X_val)\nprint(rmse(y_val,val_pred))","6d9404b0":"# load the test set \ndf_test = pd.read_csv('..\/input\/CiVilium\/test_final.csv')\ntest_X = df_test[['Unix_Timestamp','Volume_CiVilium']]\n# predict the test set using the model fitted on the train set\ntest_Y = lin_reg.predict(test_X)\n# print the test_Y\ntest_Y","b991394b":"# add a new colum to df_test to store the prediction\ndf_test['Weighted_Price'] = test_Y\ndf_test","fbdf3448":"# save a output csv file \nsub = df_test[[\"Unix_Timestamp\",\"Weighted_Price\"]]\nsub.to_csv(\"submission.csv\",index = False)","6697cb23":"# Use the codes above will field a fair loss but can we make it better?\n# try searching data pre-processing and rerun the code","b8c97297":"# Upvote!","f0ec7865":"This is a brief introdution about how to predict Civilium using linear regression"}}