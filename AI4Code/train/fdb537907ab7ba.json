{"cell_type":{"0c4f4ef5":"code","fd79fc44":"code","78f8cc61":"code","ca0d8ea6":"code","e2e6d4de":"code","048859c1":"code","472e39b0":"code","b507403c":"code","4c7d740f":"code","e57282d2":"code","9950f4a4":"code","512782b5":"code","a82981fa":"code","0b073f88":"code","dc96629f":"code","72912f66":"code","097188c1":"code","05a3283e":"code","8b425297":"code","336cc8ea":"code","c81ec20d":"code","e540166f":"code","372f26cd":"code","db29af2a":"code","676d5c8e":"code","47e4d623":"code","fd257cad":"code","07ad5f57":"code","3e0e78b1":"code","9ce30661":"code","7817ec6b":"code","f70ac450":"code","bbee3c0e":"code","b1205e23":"code","b8069df5":"code","b7ca6080":"code","d4590ed5":"code","18457d68":"markdown","783e0cfd":"markdown","ffeaf79f":"markdown","6605c7d0":"markdown","da77376c":"markdown","269f714c":"markdown","38100e74":"markdown","70a80334":"markdown","ba0b7460":"markdown","673abbcf":"markdown","0fbb7d87":"markdown","a142a440":"markdown","408be94f":"markdown","930352a5":"markdown","e90e43ea":"markdown","99e48e58":"markdown","a599b2f4":"markdown","0f6d0f6d":"markdown","82e7b8cf":"markdown","b14aeef6":"markdown","68a2fcdf":"markdown"},"source":{"0c4f4ef5":"# Diabetes Prediction Using Machine Learning\n# importing the necessary libraries\nfrom mlxtend.plotting import plot_decision_regions\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fd79fc44":"#Loading the dataset\ndiabetes_data = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\n\n#Print the first 5 rows of the dataframe.\ndiabetes_data.head()","78f8cc61":"## gives information about the data types,columns, null value counts, memory usage etc\n## function reference : https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.info.html\ndiabetes_data.info(verbose=True)","ca0d8ea6":"## basic statistic details about the data (note only numerical columns would be displayed here unless parameter include=\"all\")\n## for reference: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.describe.html#pandas.DataFrame.describe\ndiabetes_data.describe()\n\n## Also see :\n##to return columns of a specific dtype: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.select_dtypes.html#pandas.DataFrame.select_dtypes","e2e6d4de":"diabetes_data.describe().T  # creating the trsnspose of the description of the Dataframe and then showing it","048859c1":"diabetes_data_copy = diabetes_data.copy(deep = True) # creating the copy of the dataset\n# replacing the 0 values with Nan\ndiabetes_data_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']] = diabetes_data_copy[['Glucose','BloodPressure','SkinThickness','Insulin','BMI']].replace(0,np.NaN)\n\n## showing the count of Nans\nprint(diabetes_data_copy.isnull().sum())","472e39b0":"p = diabetes_data_copy.hist(figsize = (20,20))","b507403c":"diabetes_data_copy['Glucose'].fillna(diabetes_data_copy['Glucose'].mean(), inplace = True)\ndiabetes_data_copy.isna().sum()","4c7d740f":"diabetes_data_copy['BloodPressure'].fillna(diabetes_data_copy['BloodPressure'].mean(), inplace = True)\ndiabetes_data_copy.isna().sum()","e57282d2":"diabetes_data_copy['SkinThickness'].fillna(diabetes_data_copy['SkinThickness'].median(), inplace = True)\ndiabetes_data_copy.isna().sum()","9950f4a4":"diabetes_data_copy['Insulin'].fillna(diabetes_data_copy['Insulin'].median(), inplace = True)\ndiabetes_data_copy.isna().sum()","512782b5":"diabetes_data_copy['BMI'].fillna(diabetes_data_copy['BMI'].median(), inplace = True)\ndiabetes_data_copy.isna().sum()","a82981fa":"p = diabetes_data_copy.hist(figsize = (20,20))","0b073f88":"## observing the shape of the data\ndiabetes_data.shape","dc96629f":"diabetes_data.info()","72912f66":"diabetes_data.dtypes","097188c1":"## null count analysis\nimport missingno as msno\np=msno.bar(diabetes_data)","05a3283e":"## checking the balance of the data by plotting the count of outcomes by their value\ncolor_wheel = {1: \"#0392cf\", \n               2: \"#7bc043\"}\ncolors = diabetes_data[\"Outcome\"].map(lambda x: color_wheel.get(x + 1))\nprint(diabetes_data.Outcome.value_counts())\np=diabetes_data.Outcome.value_counts().plot(kind=\"bar\")","8b425297":"from pandas.plotting import scatter_matrix\np=scatter_matrix(diabetes_data,figsize=(25, 25))","336cc8ea":"p=sns.pairplot(diabetes_data_copy, hue = 'Outcome')","c81ec20d":"plt.figure(figsize=(12,10))  # on this line I just set the size of figure to 12 by 10.\np=sns.heatmap(diabetes_data.corr(), annot=True,cmap ='RdYlGn')  # seaborn has very simple solution for heatmap","e540166f":"plt.figure(figsize=(12,10))  # on this line I just set the size of figure to 12 by 10.\np=sns.heatmap(diabetes_data_copy.corr(), annot=True,cmap ='RdYlGn')  # seaborn has very simple solution for heatmap","372f26cd":"# dataframe before transformation\ndiabetes_data_copy.head()","db29af2a":"# scaling the data\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX =  pd.DataFrame(sc_X.fit_transform(diabetes_data_copy.drop([\"Outcome\"],axis = 1),),\n        columns=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n       'BMI', 'DiabetesPedigreeFunction', 'Age'])","676d5c8e":"X.head()  # looking at the transformed data","47e4d623":"#X = diabetes_data.drop(\"Outcome\",axis = 1)\ny = diabetes_data_copy.Outcome  # assigning the label column","fd257cad":"#importing train_test_split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=1\/3,random_state=42, stratify=y)","07ad5f57":"from sklearn.neighbors import KNeighborsClassifier\n\n\ntest_scores = []\ntrain_scores = []\n\nfor i in range(1,15):\n\n    knn = KNeighborsClassifier(i)\n    knn.fit(X_train,y_train)\n    \n    train_scores.append(knn.score(X_train,y_train))\n    test_scores.append(knn.score(X_test,y_test))","3e0e78b1":"print(train_scores)\nprint(test_scores)","9ce30661":"## score that comes from testing on the same datapoints that were used for training\nmax_train_score = max(train_scores)\ntrain_scores_ind = [i for i, v in enumerate(train_scores) if v == max_train_score]\nprint('Max train score {} % and k = {}'.format(max_train_score*100,list(map(lambda x: x+1, train_scores_ind))))","7817ec6b":"## score that comes from testing on the datapoints that were split in the beginning to be used for testing solely\nmax_test_score = max(test_scores)\ntest_scores_ind = [i for i, v in enumerate(test_scores) if v == max_test_score]\nprint('Max test score {} % and k = {}'.format(max_test_score*100,list(map(lambda x: x+1, test_scores_ind))))","f70ac450":"plt.figure(figsize=(12,5))\np = sns.lineplot(range(1,15),train_scores,marker='*',label='Train Score')\np = sns.lineplot(range(1,15),test_scores,marker='o',label='Test Score')","bbee3c0e":"#Setup a knn classifier with k neighbors\nknn = KNeighborsClassifier(11)\n\nknn.fit(X_train,y_train)\nknn.score(X_test,y_test)","b1205e23":"value = 20000\nwidth = 20000\nplot_decision_regions(X.values, y.values, clf=knn, legend=2, \n                      filler_feature_values={2: value, 3: value, 4: value, 5: value, 6: value, 7: value},\n                      filler_feature_ranges={2: width, 3: width, 4: width, 5: width, 6: width, 7: width},\n                      X_highlight=X_test.values)\n\n# Adding axes annotations\nplt.title('KNN with Diabetes Data')\nplt.show()","b8069df5":"#import confusion_matrix\nfrom sklearn.metrics import confusion_matrix\n#let us get the predictions using the classifier we had fit above. Creating the confusion Matrix\ny_pred = knn.predict(X_test)\ny_pred","b7ca6080":"confusion_matrix(y_test,y_pred)\npd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)","d4590ed5":"# Creating a Heatmap for the confusion matrix. \ny_pred = knn.predict(X_test)\nfrom sklearn import metrics\ncnf_matrix = metrics.confusion_matrix(y_test, y_pred)\np = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","18457d68":"###### The pairs plot builds on two basic figures, the histogram and the scatter plot. The histogram on the diagonal allows us to see the distribution of a single variable while the scatter plots on the upper and lower triangles show the relationship (or lack thereof) between two variables.\n\nFor Reference: https:\/\/towardsdatascience.com\/visualizing-data-with-pair-plots-in-python-f228cf529166","783e0cfd":"# Model Performance Analysis","ffeaf79f":"#### The best result is captured at k = 11 hence 11 is used for the final model","6605c7d0":"## Test Train Split and Cross Validation methods\n\n\n\n***Train Test Split*** : To have unknown datapoints to test the data rather than testing with the same points with which the model was trained. This helps capture the model performance much better.\n\n![](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*-8_kogvwmL1H6ooN1A1tsQ.png)\n\n***Cross Validation***: When model is split into training and testing it can be possible that specific type of data point may go entirely into either training or testing portion. This would lead the model to perform poorly. Hence over-fitting and underfitting problems can be well avoided with cross validation techniques\n\n![](https:\/\/cdn-images-1.medium.com\/max\/1600\/1*4G__SV580CxFj78o9yUXuQ.png)\n\n\n***About Stratify*** : Stratify parameter makes a split so that the proportion of values in the sample produced will be the same as the proportion of values provided to parameter stratify.\n\nFor example, if variable y is a binary categorical variable with values 0 and 1 and there are 25% of zeros and 75% of ones, stratify=y will make sure that your random split has 25% of 0's and 75% of 1's.\n\nFor Reference : https:\/\/towardsdatascience.com\/train-test-split-and-cross-validation-in-python-80b61beca4b6","da77376c":"**DataFrame.describe()** method generates descriptive statistics that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution, excluding NaN values. This method tells us a lot of things about a dataset. One important thing is that the describe() method deals only with numeric values. It doesn't work with any categorical values. So if there are any categorical values in a column the describe() method will ignore it and display summary for the other columns unless parameter include=\"all\" is passed.\n\nNow, let's understand the statistics that are generated by the describe() method:\n* count tells us the number of NoN-empty rows in a feature.\n* mean tells us the mean value of that feature.\n* std tells us the Standard Deviation Value of that feature.\n* min tells us the minimum value of that feature.\n* 25%, 50%, and 75% are the percentile\/quartile of each features. This quartile information helps us to detect Outliers.\n* max tells us the maximum value of that feature.","269f714c":"Finally we have imputated all the missing values","38100e74":"## Skewness\n\nA ***left-skewed distribution*** has a long left tail. Left-skewed distributions are also called negatively-skewed distributions. That\u2019s because there is a long tail in the negative direction on the number line. The mean is also to the left of the peak.\n\nA ***right-skewed distribution*** has a long right tail. Right-skewed distributions are also called positive-skew distributions. That\u2019s because there is a long tail in the positive direction on the number line. The mean is also to the right of the peak.\n\n\n![](https:\/\/www.statisticshowto.datasciencecentral.com\/wp-content\/uploads\/2014\/02\/pearson-mode-skewness.jpg)\n\n\n#### to learn more about skewness\nhttps:\/\/www.statisticshowto.datasciencecentral.com\/probability-and-statistics\/skewed-distribution\/","70a80334":"### Aiming to impute nan values for the columns in accordance with their distribution","ba0b7460":"#### To fill these Nan values the data distribution needs to be understood","673abbcf":"## Scaling the data \ndata Z is rescaled such that \u03bc = 0 and \ud835\uded4 = 1, and is done through this formula:\n![](https:\/\/cdn-images-1.medium.com\/max\/800\/0*PXGPVYIxyI_IEHP7.)\n\n\n#### to learn more about scaling techniques\nhttps:\/\/medium.com\/@rrfd\/standardize-or-normalize-examples-in-python-e3f174b65dfc\nhttps:\/\/machinelearningmastery.com\/rescaling-data-for-machine-learning-in-python-with-scikit-learn\/","0fbb7d87":"#### Heatmap for unclean data","a142a440":"## Plotting after Nan removal ","408be94f":"#### Scatter matrix of uncleaned data\n\n1.   List item\n2.   List item","930352a5":"#### Pair plot for clean data","e90e43ea":"It is better to replace zeros with nan since after that counting them would be easier and zeros need to be replaced with suitable values","99e48e58":"### The Question creeping out of this summary\n\n#### Can minimum value of below listed columns be zero (0)?\n\nOn these columns, a value of zero does not make sense and thus indicates missing value.\n\nFollowing columns or variables have an invalid zero value:\n1. Glucose\n2. BloodPressure\n3. SkinThickness\n4. Insulin\n5. BMI","a599b2f4":"## 1. Confusion Matrix\n\nThe confusion matrix is a technique used for summarizing the performance of a classification algorithm i.e. it has binary outputs.\n![](https:\/\/cdn-images-1.medium.com\/max\/1600\/0*-GAP6jhtJvt7Bqiv.png)\n\n\n\n### ***In the famous cancer example***:\n\n\n###### Cases in which the doctor predicted YES (they have the disease), and they do have the disease will be termed as TRUE POSITIVES (TP). The doctor has correctly predicted that the patient has the disease.\n\n###### Cases in which the doctor predicted NO (they do not have the disease), and they don\u2019t have the disease will be termed as TRUE NEGATIVES (TN). The doctor has correctly predicted that the patient does not have the disease.\n\n###### Cases in which the doctor predicted YES, and they do not have the disease will be termed as FALSE POSITIVES (FP). Also known as \u201cType I error\u201d.\n\n###### Cases in which the doctor predicted NO, and they have the disease will be termed as FALSE NEGATIVES (FN). Also known as \u201cType II error\u201d.\n\n![](https:\/\/cdn-images-1.medium.com\/max\/1600\/0*9r99oJ2PTRi4gYF_.jpg)\n\nFor Reference: https:\/\/medium.com\/@djocz\/confusion-matrix-aint-that-confusing-d29e18403327","0f6d0f6d":"#### Heatmap for clean data","82e7b8cf":"***Pearson's Correlation Coefficient***: helps you find out the relationship between two quantities. It gives you the measure of the strength of association between two variables. The value of Pearson's Correlation Coefficient can be between -1 to +1. 1 means that they are highly correlated and 0 means no correlation.\n\nA heat map is a two-dimensional representation of information with the help of colors. Heat maps can help the user visualize simple or complex information.","b14aeef6":"## Result Visualisation","68a2fcdf":"#### The above graph shows that the data is biased towards datapoints having outcome value as 0 where it means that diabetes was not present actually. The number of non-diabetics is almost twice the number of diabetic patients"}}