{"cell_type":{"d100a466":"code","870bd22f":"code","7250f683":"code","8167b768":"code","efe92acb":"code","bba2f5de":"code","4783fb00":"code","2fe201b0":"code","0860bb9a":"code","8328ca5d":"code","3c231b83":"code","b184e3c0":"markdown","62016ac6":"markdown"},"source":{"d100a466":"#libraries\nimport numpy as np # linear algebra\nimport keras\nfrom keras.models import load_model\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Activation\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\/Sign-language-digits-dataset\"))\n","870bd22f":"# load data\nX = np.load(\"..\/input\/Sign-language-digits-dataset\/X.npy\")\nY = np.load(\"..\/input\/Sign-language-digits-dataset\/Y.npy\")\n\nprint(\"Samples :\", X.shape[0])","7250f683":"#sample image\nplt.imshow(X[345], cmap = \"gray\")\nplt.show()","8167b768":"#split train and test \nx_train, x_test, y_train, y_test = train_test_split(X,Y, test_size = .33, shuffle = True)\n\nx_train =  x_train.reshape(-1,64,64,1)\nx_test =  x_test.reshape(-1,64,64,1)\n\nprint(\"x_train shape:\", x_train.shape)\nprint(\"x_test shape:\", x_test.shape)\nprint(\"y_train shape:\", y_train.shape)\nprint(\"y_test shape:\", y_test.shape)","efe92acb":"batch_size = 128\nepoch = 20\ninput_shape = (64,64,1)\nnum_classes = 10\n\nmodel = Sequential()","bba2f5de":"model.add(Conv2D(64,(4,4), input_shape = input_shape))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size = (4,4)))\n\nmodel.add(Conv2D(64,(5,5)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPooling2D(pool_size = (4,4)))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(128,activation = \"relu\"))\nmodel.add(Dropout(0.25))\n\nmodel.add(Dense(num_classes, activation = \"softmax\"))\n\n\nmodel.summary()","4783fb00":"#compile\nmodel.compile(loss = keras.losses.categorical_crossentropy,\n             optimizer = keras.optimizers.Adadelta(),\n             metrics = [\"accuracy\"])\n#fit\nmodel.fit(x_train,y_train,\n         batch_size = batch_size,\n         epochs = epoch,\n         verbose = 1,\n         validation_data = (x_test,y_test))","2fe201b0":"score = model.evaluate(x_test, y_test, verbose = 0)\n\nprint(\"Test Loss: \", score[0])\nprint(\"Test Accucary: \", score[1])","0860bb9a":"#save model\nmodel.save(\"..your_path\/your_model.h5\")\n\n#load model\nmodel_test = load_model(\"..your_path\/your_model.h5)","8328ca5d":"classes = [\"9\", \"0\", \"7\", \"6\", \"1\", \"0\", \"4\",\"3\", \"2\", \"5\"]\n\n#index for test data 0 ~ 680\nindex = 254\nplt.imshow(x_test[index].reshape(64,64), cmap = \"gray\")\ny_test[index]","3c231b83":"#predict\ntest = x_test[index].reshape(1,64,64,1)\npre = model.predict(test, batch_size = 1)\n#pre = model_test(test, batch_size = 1) with loaded model\n\nprint(\"Prediction: \", np.round(pre, 0))\nprint(\"Real value: \", y_test[index])\nprint(\"Number: \",classes[np.argmax(pre)])","b184e3c0":"**Trying  Model**","62016ac6":"**Create Model**"}}