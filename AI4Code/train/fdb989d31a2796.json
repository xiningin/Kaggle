{"cell_type":{"1ba6e2ee":"code","a9b27a9b":"code","8138ae8d":"code","6023bfb9":"code","34eafb25":"code","734b6c27":"code","105ee910":"code","7106110f":"code","bb73df90":"code","aee73870":"code","1adfc471":"code","b5182032":"code","d4be8451":"code","7f8d4468":"code","e57422c8":"code","71720920":"code","c22f6219":"code","694f769f":"code","ee1c74c6":"code","6793274d":"code","515682a9":"code","835c6183":"code","0390bc50":"code","2d0295fa":"code","8aa327a9":"code","2564bbb8":"code","3826d0c8":"code","4b70e2b5":"code","d00c3ca3":"code","c5e987ae":"code","62d8b8e1":"code","5178cd07":"code","42aaf053":"code","0f30436c":"code","1f063419":"code","fe865f48":"code","fba8e463":"code","42f693e3":"code","eab06285":"code","ebc3b789":"code","8e9401af":"code","f550921e":"markdown","e42bede0":"markdown","ec358c45":"markdown","d73b8b45":"markdown","ccb39237":"markdown","aa02b1d5":"markdown","c4263edf":"markdown","f733c681":"markdown","6f34e572":"markdown","3a61f275":"markdown","807d32c3":"markdown","37332a1d":"markdown","245b5dad":"markdown"},"source":{"1ba6e2ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a9b27a9b":"import plotly.express as px\nimport plotly.graph_objects as go","8138ae8d":"train_data = pd.read_csv(\"\/kaggle\/input\/osic-pulmonary-fibrosis-progression\/train.csv\")\ntrain_data.info()","6023bfb9":"def get_unique(df):\n    cols = df.columns\n    for col in cols:\n        print(col+\" : \"+str(df[col].nunique()))\n\nget_unique(train_data)","34eafb25":"patient = train_data.head(36)#train_data[train_data.Patient=='ID00023637202179104603099'] #  ID00090637202204766623410\nfig = px.line(patient, x=\"Weeks\", y=\"FVC\", title='FVC of a patient', color='Patient')\nfig.show()","734b6c27":"patient = train_data.head(36)#train_data[train_data.Patient=='ID00023637202179104603099'] #  ID00090637202204766623410\nfig = px.line(patient, x=\"Weeks\", y=\"Percent\", title='Percent of a patient', color='Patient')\nfig.show()","105ee910":"week =  train_data.Weeks.value_counts().reset_index(name = 'count')\nmean = train_data.Weeks.median()\ny = train_data.Weeks.max()\nfig = px.bar(week, x='index', y='count', color='index')\nfig.update_layout(\n    title=\"CT Scan Weeks distribution\",\n    xaxis_title=\"Weeks\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.add_shape(\n        go.layout.Shape(\n            type=\"line\",\n            x0=-.5,\n            y0=mean,\n            x1=y-.5,\n            y1=mean,\n            line=dict(\n                color=\"red\",\n                width=2,\n                dash=\"dash\",\n            ),\n    ))\nfig.show()","7106110f":"fvc = train_data.groupby(['Sex','FVC'])['FVC'].count().reset_index(name = 'Count')\nfig = px.histogram(fvc, x=\"FVC\", color='Sex')\nfig.update_layout(\n    title=\"FVC distribution for Male\/Female\",\n    xaxis_title=\"FVC values\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","bb73df90":"fvc = train_data.groupby(['SmokingStatus','FVC'])['FVC'].count().reset_index(name = 'Count')\nfig = px.histogram(fvc, x=\"FVC\", color='SmokingStatus')\nfig.update_layout(\n    title=\"FVC distribution for Smokers Type\",\n    xaxis_title=\"FVC values\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","aee73870":"sm_per_mean = train_data.groupby('SmokingStatus')['Percent'].mean().reset_index(name = 'Average')\nfig = px.bar(sm_per_mean, x='SmokingStatus', y='Average', color='SmokingStatus')\nfig.update_layout(\n    title=\"Infected Percent by Smoking Types\",\n    xaxis_title=\"Smoking Types\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","1adfc471":"smoke = train_data.groupby('SmokingStatus')['SmokingStatus'].count().reset_index(name = 'count')\nsmoke","b5182032":"fig = px.bar(smoke, x='SmokingStatus', y='count', color = 'SmokingStatus')\nfig.update_layout(\n    title=\"Smoking Status Distribution\",\n    xaxis_title=\"Smoking Types\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","d4be8451":"sex = train_data.groupby('Sex')['Sex'].count().reset_index(name = 'count')\nfig = px.bar(sex, x='Sex', y='count', color = 'Sex')\nfig.update_layout(\n    title=\"Gender Distribution\",\n    xaxis_title=\"Gender Types\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","7f8d4468":"age = train_data.groupby('Age')['Age'].count().reset_index(name = 'count')\nfig = px.bar(age, x='Age', y='count', color = 'Age')\nfig.update_layout(\n    title=\"Patient Age Distribution\",\n    xaxis_title=\"Age\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","e57422c8":"week = train_data.groupby('Weeks')['Weeks'].count().reset_index(name = 'count')\nfig = px.bar(week, x='Weeks', y='count', color = 'Weeks')\nfig.update_layout(\n    title=\"Weeks Distribution\",\n    xaxis_title=\"Weeks\",\n    yaxis_title=\"Counts\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","71720920":"ss = train_data.groupby(['SmokingStatus','Sex'])['Sex'].count().reset_index(name= 'Count')\nfig = px.bar(ss, x='SmokingStatus', y='Count', color = 'Sex')\nfig.update_layout(\n    title=\"Who smokes high? Male\/Female\",\n    xaxis_title=\"Smoking\",\n    yaxis_title=\"Count\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","c22f6219":"ss = train_data.groupby(['Age','Sex'])['Sex'].count().reset_index(name= 'Count')\nfig = px.bar(ss, x='Age', y='Count', color = 'Sex')\nfig.update_layout(\n    title=\"What Age people smokes high? Male\/Female\",\n    xaxis_title=\"Age levels\",\n    yaxis_title=\"Count\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","694f769f":"ss = train_data.groupby(['SmokingStatus','Age'])['SmokingStatus'].count().reset_index(name= 'Count')\nfig = px.bar(ss, x='Age', y='Count', color = 'SmokingStatus')\nfig.update_layout(\n    title=\"Age wise Smoking types\",\n    xaxis_title=\"Age\",\n    yaxis_title=\"Count\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","ee1c74c6":"ss = train_data.groupby(['Percent','Age','Sex'])['Sex'].count().reset_index(name= 'Count')\nfig = px.scatter(ss, x='Age', y='Percent', color = 'Sex')\nfig.update_layout(\n    title=\"What age Male\/Female affected high\",\n    xaxis_title=\"Age\",\n    yaxis_title=\"Affected Percent\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","6793274d":"ss = train_data.groupby(['Percent','Weeks','Sex'])['Sex'].count().reset_index(name= 'Count')\nfig = px.scatter(ss, x='Weeks', y='Percent', color = 'Sex')\nfig.update_layout(\n    title=\"Patient Affected by week\",\n    xaxis_title=\"Weeks\",\n    yaxis_title=\"Affected Percent\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","515682a9":"ss = train_data.groupby(['Percent','Weeks','SmokingStatus'])['SmokingStatus'].count().reset_index(name= 'Count')\nfig = px.scatter(ss, x='Weeks', y='Percent', color = 'SmokingStatus')\nfig.update_layout(\n    title=\"Patient Affected by week\",\n    xaxis_title=\"Weeks\",\n    yaxis_title=\"Affected Percent\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","835c6183":"ss = train_data.groupby(['Age','Weeks','SmokingStatus'])['SmokingStatus'].count().reset_index(name= 'Count')\nfig = px.scatter(ss, x='Weeks', y='Age', color = 'SmokingStatus')\nfig.update_layout(\n    title=\"Patient Affected by week\",\n    xaxis_title=\"Weeks\",\n    yaxis_title=\"Age\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","0390bc50":"ss = train_data.groupby(['Age','Weeks','Sex'])['Sex'].count().reset_index(name= 'Count')\nfig = px.scatter(ss, x='Weeks', y='Age', color = 'Sex')\nfig.update_layout(\n    title=\"Patient Affected by week\",\n    xaxis_title=\"Age\",\n    yaxis_title=\"Affected Percent\",\n    font=dict(\n        family=\"sans serif\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n)\nfig.show()","2d0295fa":"weks = train_data.groupby(['Weeks','Sex'])['Sex'].count().reset_index(name = 'Count')\nfig = px.line(weks, x=\"Weeks\", y=\"Count\", title='Weekly Gender relations', color='Sex')\nfig.show()","8aa327a9":"weks = train_data.groupby(['Weeks','SmokingStatus'])['SmokingStatus'].count().reset_index(name = 'Count')\nfig = px.line(weks, x=\"Weeks\", y=\"Count\", title='Weekly Smokers relations', color='SmokingStatus')\nfig.show()","2564bbb8":"age_ss = train_data.groupby(['Age','SmokingStatus'])['SmokingStatus'].count().reset_index(name = 'Count')\nfig = px.line(age_ss, x=\"Age\", y=\"Count\", title='Age-Smokers relations', color='SmokingStatus')\nfig.show()","3826d0c8":"cols = ['Percent','FVC','Age','Weeks']\nffs = train_data[cols]\ndd = ffs.corr(method ='pearson')\nfit = px.imshow(dd, x = cols, y = cols)\nfit.show()","4b70e2b5":"fig = px.box(train_data, y=\"Age\", points = 'all')\nfig.show()","d00c3ca3":"fig = px.box(train_data, y=\"Percent\", points = 'all')\nfig.show()","c5e987ae":"fig = px.box(train_data, y=\"FVC\", points = 'all')\nfig.show()","62d8b8e1":"fig = px.box(train_data, y=\"Weeks\", points = 'all')\nfig.show()","5178cd07":"fig = px.box(train_data, y=\"Age\", x ='Sex',points = 'all')\nfig.show()","42aaf053":"fig = px.box(train_data, y=\"Age\", x ='SmokingStatus')\nfig.show()","0f30436c":"fig = px.box(train_data, y=\"Weeks\", x ='Sex', points = 'all')\nfig.show()","1f063419":"fig = px.box(train_data, y=\"Weeks\", x ='SmokingStatus')\nfig.show()","fe865f48":"fig = px.box(train_data, y=\"FVC\", x ='Sex')\nfig.show()","fba8e463":"fig = px.box(train_data, y=\"FVC\", x ='SmokingStatus')\nfig.show()","42f693e3":"import pydicom as dicom\nimport matplotlib.pyplot as plt","eab06285":"data_ =  dicom.dcmread(\"..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00007637202177411956430\/1.dcm\")\nplt.imshow(data_.pixel_array)\nplt.axis('off')\nplt.show()","ebc3b789":"basepath = '..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00007637202177411956430'\nfig, axes = plt.subplots(nrows=10, ncols=3,figsize=(15,10)) \nfor ax, entry in zip(axes.flatten(),os.listdir(basepath)):\n    if os.path.isfile(os.path.join(basepath, entry)):\n        data_ =  dicom.dcmread(basepath+'\/'+entry)\n        ax.imshow(data_.pixel_array)\n        ax.axis('off')\n        ax.autoscale(enable=True)\n        \nplt.show()","8e9401af":"basepath = '..\/input\/osic-pulmonary-fibrosis-progression\/train\/ID00019637202178323708467'\nfig, axes = plt.subplots(nrows=10, ncols=3,figsize=(15,10)) \nfor ax, entry in zip(axes.flatten(),os.listdir(basepath)):\n    if os.path.isfile(os.path.join(basepath, entry)):\n        data_ =  dicom.dcmread(basepath+'\/'+entry)\n        ax.imshow(data_.pixel_array)\n        ax.axis('off')\n        ax.autoscale(enable=True)\n        \nplt.show()","f550921e":"## DICOM Sample 2","e42bede0":"<font color='#2C8087 '> The average time a patient have the CT Scan is 28 weeks","ec358c45":"## EDA - Patient Details ","d73b8b45":"![image.png](attachment:image.png)","ccb39237":"## DICOM Analysis","aa02b1d5":"<font color = '#2C8087'> A sample of 4 patients. FVC is going down weeks by weeks.","c4263edf":"## DICOM Sample 1","f733c681":"## If you like this kernel plz <font color='red'>UPVOTE<\/font>.\n## If you have suggestions to improve this kernel plz <font color='red'>COMMENT<\/font>.\n\n<font color='Blue'>************************ Notebook is under construction ************************<\/font>","6f34e572":"## Smoking Status Distribution","3a61f275":"## Objective:\nPredict Patient\u2019s severity of decline in lung function based on a CT scan of their lungs. You\u2019ll determine lung function based on output from a spirometer, which measures the volume of air inhaled and exhaled.","807d32c3":"<font color='#2C8087 '>The average FVC level is for females, ranges from 1300 to 1800\nfor Males, ranges from 2000 to 3000.<\/font>","37332a1d":"<font color = '#2C8087'> There in 176 Patients details in the training set.","245b5dad":"# OSIC Pulmonary Fibrosis Progression"}}