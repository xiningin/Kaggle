{"cell_type":{"931e85df":"code","7d2dbd4c":"code","b6f16d39":"code","f7c75d6c":"code","b5e98093":"code","e66aa5c7":"code","5f6eccbb":"code","0350e798":"code","b6d0fb59":"code","942141f4":"code","dc66de38":"code","03486e94":"code","306ec7f1":"code","0bf50839":"code","16a284a7":"code","9faa7185":"code","34e139b3":"code","c043e478":"code","b2298979":"code","1ba712f0":"code","5f8fb050":"code","2800c174":"code","9bc20a06":"code","45e8085e":"code","d461a167":"code","58f8f08a":"code","77cedc9f":"code","72db980e":"code","8a16f77b":"code","71d1e10c":"code","4060281c":"code","77266d9a":"code","2fa86dcd":"code","a388288f":"code","c85c5afb":"code","0417f8ab":"code","199bb684":"code","831a4206":"code","bbb74e9e":"code","419d98f4":"code","d88997de":"code","b2186973":"code","e06fbe62":"code","af3a3d68":"code","50fdc1a7":"code","35a2a12f":"code","c90480d7":"code","4974bbfa":"code","8fa8d867":"code","26358789":"code","edddde58":"code","ff0b98b1":"code","f99cf856":"code","36a8b653":"code","1c1548f6":"code","ec9ca962":"code","de247eb1":"code","2dfc94ac":"code","a7a7f679":"markdown","99f2c231":"markdown","ea22b664":"markdown","e670ee4c":"markdown","9bcfb4e9":"markdown","3c38e494":"markdown","786f6088":"markdown","59a7e2a8":"markdown","7d583727":"markdown","65622459":"markdown","1f43b50b":"markdown","c2311347":"markdown"},"source":{"931e85df":"import numpy as np \nimport pandas as pd\nimport sklearn\nimport seaborn as sns\nfrom sklearn import svm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom numpy import mean\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\n\nfrom imblearn.pipeline import Pipeline\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler","7d2dbd4c":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","b6f16d39":"maindf=pd.read_csv(\"..\/input\/genomeshackerearth\/train.csv\")","f7c75d6c":"maindf.head()","b5e98093":"maindf.info()","e66aa5c7":"maindf.describe().T","5f6eccbb":"missing=maindf.isnull().sum()\nprint(missing)\ntype(missing)","0350e798":"#sns.pairplot(data=maindf, kind=\"kde\")","b6d0fb59":"numerics = maindf.select_dtypes(include=np.number).columns.tolist()\nnumerics","942141f4":"cateogorical= maindf.select_dtypes(exclude=np.number).columns.tolist()\ncateogorical","dc66de38":"for i in cateogorical:\n    print(maindf[i].value_counts())","03486e94":"stage1_remove=maindf.columns[[0,7,8,9,12,13]]\nprint(\"reomving \",stage1_remove)\n\nmaindf=maindf.drop(stage1_remove,axis=1)","306ec7f1":"maindf.isnull().sum()","0bf50839":"maindf.columns = maindf.columns.str.replace(\"'\",\" \")\nmaindf.columns = maindf.columns.str.replace(\"(\",\"_\")\nmaindf.columns = maindf.columns.str.replace(\")\",\"_\")\n\n","16a284a7":"print(maindf['Genetic Disorder'].value_counts())\nprint(maindf['Disorder Subclass'].value_counts())","9faa7185":"sample={\n    'Mitochondrial genetic inheritance disorders':[],\n    'Single-gene inheritance diseases':[],\n    'Multifactorial genetic inheritance disorders':[]\n    \n}\nno_rows=[]\n\nfor i in range(len(maindf)\/\/3):\n    \n    if type(maindf['Genetic Disorder'][i])==str and type(maindf['Disorder Subclass'][i])==str:\n        #print(maindf['Genetic Disorder'][i],\" \",maindf['Disorder Subclass'][i],\"\\n\")\n        if maindf['Disorder Subclass'][i] not in sample[maindf['Genetic Disorder'][i]]:\n            sample[maindf['Genetic Disorder'][i]].append(maindf['Disorder Subclass'][i])\n    elif type(maindf['Genetic Disorder'][i])!=str and type(maindf['Disorder Subclass'][i])!=str:\n        no_rows.append(i)","34e139b3":"print(len(no_rows))\nprint(no_rows)\n\nmaindf.drop(labels=no_rows, axis=0)\nprint(len(maindf))\nmaindf=maindf.drop(labels=no_rows, axis=0)\nprint(len(maindf))\n","c043e478":"maindf=maindf.reset_index()","b2298979":"sample","1ba712f0":"print(sample)\nkey_list = list(sample.keys())\nval_list = list(sample.values())\nprint(key_list)\nprint(val_list)\n","5f8fb050":"def for_genetic(income_subclass):\n    for i in range(len(key_list)):\n        for j in range(len(val_list[i])):\n            if income_subclass==val_list[i][j]:\n                return( key_list[i])\n    \n\nfor i in range(len(maindf)):\n    if type(maindf['Genetic Disorder'][i])!=str:\n        #for_genetic(maindf['Disorder Subclass'][i])\n        maindf['Genetic Disorder'][i]= for_genetic(maindf['Disorder Subclass'][i])\n\nprint(maindf['Genetic Disorder'].isnull().sum(),\"\\n\")\nprint(maindf['Genetic Disorder'].value_counts())\nprint(maindf['Genetic Disorder'].value_counts().sum())\n","2800c174":"def for_subclass(income_disorder):\n    for ix in range(len(key_list)):\n        if income_disorder==key_list[ix]:\n            return val_list[ix][0]\n        \n\nfor i in range(len(maindf)):\n    if type(maindf['Disorder Subclass'][i])!=str:\n        #for_genetic(maindf['Disorder Subclass'][i])\n        maindf['Disorder Subclass'][i]= for_subclass(maindf['Genetic Disorder'][i])\n\nprint(maindf['Disorder Subclass'].isnull().sum(),\"\\n\")\nprint(maindf['Disorder Subclass'].value_counts())\nprint(maindf['Disorder Subclass'].value_counts().sum())\n","9bc20a06":"maindf['Blood cell count _mcL_']=maindf['Blood cell count _mcL_'].fillna(maindf['Blood cell count _mcL_'].mean())\nmaindf['White Blood cell count _thousand per microliter_']=maindf['White Blood cell count _thousand per microliter_'].fillna(maindf['White Blood cell count _thousand per microliter_'].mean())\nmaindf['Patient Age']=maindf['Patient Age'].fillna(maindf['Patient Age'].mean())\nmaindf['Mother s age']=maindf['Mother s age'].fillna(maindf['Mother s age'].mean())\nmaindf['Father s age']=maindf['Father s age'].fillna(maindf['Father s age'].mean())\nmaindf.isnull().sum()","45e8085e":"for i in maindf.columns:\n    print(maindf[i].value_counts(),\"*\"*50,\"\\n\")","d461a167":"maindf=maindf.fillna(method='bfill')","58f8f08a":"##df[['a', 'b']] = df[['a','b']].fillna(value=0)\nmaindf[0:5]","77cedc9f":"\nmaindf.describe().T","72db980e":"del maindf['index']","8a16f77b":"x_col=maindf.columns[range(0,maindf.shape[1]-2)]\nprint(x_col)\ny_col=maindf.columns[range(maindf.shape[1]-2,maindf.shape[1])]\nprint(y_col)\n\nX=maindf[x_col]\ny=maindf[y_col]","71d1e10c":"X=pd.get_dummies(X)\nX","4060281c":"X.columns","77266d9a":"y","2fa86dcd":"X_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.33, random_state=42)","a388288f":"from sklearn.metrics import accuracy_score","c85c5afb":"from sklearn.multioutput import MultiOutputClassifier\n\nforest = RandomForestClassifier(random_state=1,n_estimators=100)\nmulti_target_forest = MultiOutputClassifier(forest)\nmodel_m=multi_target_forest.fit(X_train, y_train)\npredy_m=model_m.predict(X_test)","0417f8ab":"gen=[]\nsub=[]\nfor i in range(len(predy_m)):\n    gen.append(predy_m[i][0])\n    sub.append(predy_m[i][1])\n    \nogen=[]\nosub=[]\n\npp=list(y_test['Genetic Disorder'])\nqq=list(y_test['Disorder Subclass'])\nfor k in range(len(y_test)):\n    ogen.append(pp[k])\n    osub.append(qq[k])\nprint(accuracy_score(gen,ogen))\nprint(accuracy_score(sub,osub))","199bb684":"testdf=pd.read_csv(\"..\/input\/genomeshackerearth\/test.csv\")\ntestdf[0:5]","831a4206":"testdf.describe()","bbb74e9e":"patid=testdf.pop(\"Patient Id\")","419d98f4":"testdf.columns = testdf.columns.str.replace(\"'\",\" \")\ntestdf.columns = testdf.columns.str.replace(\"(\",\"_\")\ntestdf.columns = testdf.columns.str.replace(\")\",\"_\")","d88997de":"#stage1_remove=testdfPatient Id[['Patient First Name','Family Name','Father s name','Institute Name','Location of Institute']]\nprint(\"reomving \",stage1_remove)\n\ntestdf=testdf.drop(['Patient First Name','Family Name','Father s name','Institute Name','Location of Institute'],axis=1)\nprint(testdf.shape)","b2186973":"testdf=testdf.replace('-99',np.nan)","e06fbe62":"import statistics\nfrom statistics import mode","af3a3d68":"testdf['Blood cell count _mcL_']=testdf['Blood cell count _mcL_'].fillna(testdf['Blood cell count _mcL_'].mean())\ntestdf['White Blood cell count _thousand per microliter_']=testdf['White Blood cell count _thousand per microliter_'].fillna(testdf['White Blood cell count _thousand per microliter_'].mean())\ntestdf['Patient Age']=testdf['Patient Age'].fillna(testdf['Patient Age'].mean())\ntestdf['Mother s age']=testdf['Mother s age'].fillna(testdf['Mother s age'].mean())\ntestdf['Father s age']=testdf['Father s age'].fillna(testdf['Father s age'].mean())\ntestdf['Test 2']=testdf['Father s age'].fillna(testdf['Father s age'].mode()[0])\ntestdf.isnull().sum()\n\ntestdf=testdf.fillna(method='bfill')\n","50fdc1a7":"testdf.shape","35a2a12f":"testdf.isnull().sum()","c90480d7":"ftestdf=pd.get_dummies(testdf)","4974bbfa":"len(ftestdf.columns)","8fa8d867":"ftestdf.columns","26358789":"len(X.columns)","edddde58":"len(ftestdf.columns)","ff0b98b1":"testdf['Heart Rate _rates\/min'].value_counts()","f99cf856":"predictions=model_m.predict(ftestdf)","36a8b653":"gd=[]\nds=[]\nfor i in range(len(predictions)):\n    gd.append(predictions[i][0])\n    ds.append(predictions[i][1])\nprint(gd[0:5],\"\\n\")\nprint(ds[0:50],\"\\n\")","1c1548f6":"finaldf=pd.DataFrame(list(zip(patid,gd,ds)),columns=['Patient Id','Genetic Disorder','Disorder Subclass'])","ec9ca962":"finaldf","de247eb1":"finaldf.to_csv(\"submission.csv\",index=False)","2dfc94ac":"submit=pd.read_csv(\".\/submission.csv\")\nsubmit","a7a7f679":"# Data exploring","99f2c231":"## handling missing values in Dataframe","ea22b664":"## Maping values","e670ee4c":"## handling missing values in target variable","9bcfb4e9":"1. Leigh syndrome                         5160   [ Mitochondrial genetic inheritance disorders ]\n1. Mitochondrial myopathy                 4405   \n1. Cystic fibrosis                        3448   [ Single-gene inheritance diseases ]\n1. Tay-Sachs                              2833\n1. Diabetes                               1817   [ Multifactorial genetic inheritance disordersle = preprocessing.LabelEncoder()\nle.fit([\"paris\", \"paris\", \"tokyo\", \"amsterdam\"])\n\nlist(le.classes_)\n\nle.transform([\"tokyo\", \"tokyo\", \"paris\"]) ]\n1. Hemochromatosis                        1355\n1. Leber's hereditary optic neuropathy     648\n1. Alzheimer's                             152\n1. Cancer                                   97","3c38e494":"## Remove un-necessary features","786f6088":"# ML model","59a7e2a8":"# Submission","7d583727":"### changing apostrophe","65622459":"# import Data","1f43b50b":"# Fit the model to the test data","c2311347":"## train test split"}}