{"cell_type":{"ba069e9e":"code","573251e3":"code","fd504aa5":"code","68481a83":"code","2829dace":"code","c5a34b67":"code","c319ad92":"code","040d760b":"code","dc6a36a3":"code","33ae20d0":"code","582bb0dc":"code","36964315":"code","d87ee504":"code","71f1aff4":"code","891d9661":"code","f2f0faac":"code","bf9fea60":"code","888bc4c5":"code","77bcb371":"code","3cbaa619":"code","06be4c83":"code","e162a1c5":"code","cd7db058":"code","10fe589e":"code","59e2fa3f":"code","b7aab9de":"code","ac720626":"code","f24138c3":"code","9936dd27":"code","6afe81dc":"code","d86f8bf5":"code","be664cf1":"code","8e8e0c06":"code","03dbc315":"code","555825b4":"code","465d8782":"code","d1cf364e":"code","d9e14c62":"code","973f137e":"code","0210e483":"code","581cc1ed":"code","2fb3a312":"code","3d54906e":"code","4f4e228d":"code","adec9558":"code","d13d42ef":"code","9d1bc28e":"code","f71a0194":"code","47a45237":"code","4c2f1d40":"code","88761379":"code","8f17b7ba":"code","095161a7":"code","6f207c93":"code","ee2a6c2c":"code","304b3baa":"code","8cde012a":"code","3870734c":"code","3282ccd5":"code","1e9c59eb":"code","262ec484":"code","e3c92170":"code","1cbb4348":"code","219dff50":"code","63e72786":"code","4debe8e4":"code","723ec06b":"code","8bf7f0ee":"code","6b45c871":"code","96727279":"code","f3dae1c3":"code","cc91fcbd":"code","77001f8c":"code","741d6992":"code","1a2eceb0":"code","e89ab794":"code","7811aa46":"code","e6487f46":"code","5371a55b":"code","64c557c5":"code","87f581c0":"code","1787cc27":"code","da16858f":"code","55328058":"code","11c51cf6":"code","1e1532a7":"code","6a9a6c85":"code","17ee58a2":"code","ce4facdd":"code","a40a39b0":"code","ebde3c04":"code","2697addf":"code","64c216fa":"code","6ebf4225":"code","805b1778":"code","317ee838":"code","60092b88":"code","3d326786":"code","8f0c2225":"code","617b94db":"markdown","90b922a4":"markdown","1328a072":"markdown","3b68769c":"markdown","f37eaa9b":"markdown","3e16a4ae":"markdown","b864e244":"markdown","ff79b8f1":"markdown","d4e2ca79":"markdown","6bded1fc":"markdown","2f5a56ed":"markdown","573af19c":"markdown","195047bb":"markdown","504dfa12":"markdown","186a625b":"markdown","f8c2a408":"markdown","8b7736f5":"markdown","062d7465":"markdown","684e8485":"markdown","95cc6a44":"markdown","03e02f98":"markdown","df80fde3":"markdown","1f78d9a9":"markdown","2ae8bed1":"markdown","8f5bfeaa":"markdown","9eec59ae":"markdown","438ee718":"markdown","6fce7d6f":"markdown","6a8d50c3":"markdown","10e01b0d":"markdown","52819212":"markdown","420b3cd6":"markdown","3119e3dc":"markdown","8168d0bd":"markdown","641fc860":"markdown","bf526aa1":"markdown","717ff490":"markdown","2f37e4ad":"markdown","8e9898b8":"markdown","a4e75e4f":"markdown","8d2148b8":"markdown","971d2bb1":"markdown","7e92cfaa":"markdown","77707417":"markdown","862c6e82":"markdown","f0205269":"markdown","6f5db704":"markdown","3a79d2e5":"markdown","6db3e413":"markdown","b22ef8e9":"markdown","11d70ae8":"markdown","b0de5fe1":"markdown","8ffbedf6":"markdown","e7fc0d75":"markdown","824112a4":"markdown","3fa3d43e":"markdown","b5dbba68":"markdown","342124a0":"markdown","67bf5219":"markdown","fb35bde1":"markdown","146a3d29":"markdown"},"source":{"ba069e9e":"# Basic\nimport pandas as pd\nimport numpy as np\n# Visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n# Encoding\nfrom sklearn.preprocessing import LabelEncoder\n# Feature Selection & Other\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.feature_selection import RFE, f_regression\n# Modeling \nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, RidgeCV, LassoCV, ElasticNetCV\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import AdaBoostRegressor, GradientBoostingRegressor, RandomForestRegressor, ExtraTreesRegressor\nfrom sklearn.neural_network import MLPRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor","573251e3":"df_train = pd.read_csv('..\/input\/a-fine-windy-day-hackerearth-ml-challenge\/train_data.csv')\ndf_test = pd.read_csv('..\/input\/a-fine-windy-day-hackerearth-ml-challenge\/test_data.csv')","fd504aa5":"df_train.head()","68481a83":"print(df_train.shape)","2829dace":"df_train.info()","c5a34b67":"df_train.describe()","c319ad92":"df_test.head()","040d760b":"print(df_test.shape)","dc6a36a3":"df_test.info()","33ae20d0":"df_test.describe()","582bb0dc":"df_train_total_na = df_train.isnull().sum().sort_values(ascending=False)\ndf_train_miss_rate = ((df_train.isnull().sum() \/ len(df_train)) * 100).sort_values(ascending=False)\ndf_train_miss_values = pd.concat([df_train_total_na, df_train_miss_rate], axis=1, keys=['Total','Missing Rate'])\ndf_train_miss_values.head(20)","36964315":"msno.matrix(df_train)","d87ee504":"msno.heatmap(df_train) ","71f1aff4":"corr = df_train.corr()\nplt.figure(figsize=(12,12))\nmask = np.zeros_like(corr,dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,mask=mask,annot=True,cbar=False,cmap='Blues')\nplt.show()","891d9661":"df_test_total_na = df_test.isnull().sum().sort_values(ascending=False)\ndf_test_miss_rate = ((df_test.isnull().sum() \/ len(df_test)) * 100).sort_values(ascending=False)\ndf_test_miss_values = pd.concat([df_test_total_na, df_test_miss_rate], axis=1, keys=['Total','Missing Rate'])\ndf_test_miss_values.head(20)","f2f0faac":"msno.matrix(df_test)","bf9fea60":"msno.heatmap(df_test) ","888bc4c5":"corr = df_test.corr()\nplt.figure(figsize=(12,12))\nmask = np.zeros_like(corr,dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,mask=mask,annot=True,cbar=False,cmap='Blues')\nplt.show()","77bcb371":"num_features = []\ncat_features = []\nfor col in df_test.columns:\n    if df_test[col].dtype == 'object':\n        cat_features.append(col)\n    else:\n        num_features.append(col)\nprint('There are totally', len(num_features), 'numeric features. (Without Target)')\nprint('There are totally', len(cat_features), 'categorical features.')","3cbaa619":"num_features","06be4c83":"cat_features","e162a1c5":"# About Numeric Features\nplt.figure(figsize=(30, 60))\nplt.subplots_adjust(hspace=0.2, wspace=0.2)\nfor i, feature in enumerate(num_features):\n    plt.subplot(6, 3, i+1)\n    sns.boxplot(y = feature, data=df_train)\nplt.show()","cd7db058":"cat_features.remove('tracking_id')\ncat_features.remove('datetime')","10fe589e":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['wind_speed(m\/s)'])\nplt.title('Train Set')\nplt.ylabel('wind_speed(m\/s)')\nplt.subplot(122)\nsns.boxplot(y=df_test['wind_speed(m\/s)'])\nplt.title('Test Set')\nplt.ylabel('wind_speed(m\/s)')\nplt.show()","59e2fa3f":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['atmospheric_temperature(\u00b0C)'])\nplt.title('Train Set')\nplt.ylabel('atmospheric_temperature(\u00b0C)')\nplt.subplot(122)\nsns.boxplot(y=df_test['atmospheric_temperature(\u00b0C)'])\nplt.title('Test Set')\nplt.ylabel('atmospheric_temperature(\u00b0C)')\nplt.show()","b7aab9de":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['shaft_temperature(\u00b0C)'])\nplt.title('Train Set')\nplt.ylabel('shaft_temperature(\u00b0C)')\nplt.subplot(122)\nsns.boxplot(y=df_test['shaft_temperature(\u00b0C)'])\nplt.title('Test Set')\nplt.ylabel('shaft_temperature(\u00b0C)')\nplt.show()","ac720626":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['blades_angle(\u00b0)'])\nplt.title('Train Set')\nplt.ylabel('blades_angle(\u00b0)')\nplt.subplot(122)\nsns.boxplot(y=df_test['blades_angle(\u00b0)'])\nplt.title('Test Set')\nplt.ylabel('blades_angle(\u00b0)')\nplt.show()","f24138c3":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['gearbox_temperature(\u00b0C)'])\nplt.title('Train Set')\nplt.ylabel('gearbox_temperature(\u00b0C)')\nplt.subplot(122)\nsns.boxplot(y=df_test['gearbox_temperature(\u00b0C)'])\nplt.title('Test Set')\nplt.ylabel('gearbox_temperature(\u00b0C)')\nplt.show()","9936dd27":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['engine_temperature(\u00b0C)'])\nplt.title('Train Set')\nplt.ylabel('engine_temperature(\u00b0C)')\nplt.subplot(122)\nsns.boxplot(y=df_test['engine_temperature(\u00b0C)'])\nplt.title('Test Set')\nplt.ylabel('engine_temperature(\u00b0C)')\nplt.show()","6afe81dc":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['motor_torque(N-m)'])\nplt.title('Train Set')\nplt.ylabel('motor_torque(N-m)')\nplt.subplot(122)\nsns.boxplot(y=df_test['motor_torque(N-m)'])\nplt.title('Test Set')\nplt.ylabel('motor_torque(N-m)')\nplt.show()","d86f8bf5":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['generator_temperature(\u00b0C)'])\nplt.title('Train Set')\nplt.ylabel('generator_temperature(\u00b0C)')\nplt.subplot(122)\nsns.boxplot(y=df_test['generator_temperature(\u00b0C)'])\nplt.title('Test Set')\nplt.ylabel('generator_temperature(\u00b0C)')\nplt.show()","be664cf1":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['atmospheric_pressure(Pascal)'])\nplt.title('Train Set')\nplt.ylabel('atmospheric_pressure(Pascal)')\nplt.subplot(122)\nsns.boxplot(y=df_test['atmospheric_pressure(Pascal)'])\nplt.title('Test Set')\nplt.ylabel('atmospheric_pressure(Pascal)')\nplt.show()","8e8e0c06":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['area_temperature(\u00b0C)'])\nplt.title('Train Set')\nplt.ylabel('area_temperature(\u00b0C)')\nplt.subplot(122)\nsns.boxplot(y=df_test['area_temperature(\u00b0C)'])\nplt.title('Test Set')\nplt.ylabel('area_temperature(\u00b0C)')\nplt.show()","03dbc315":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['windmill_body_temperature(\u00b0C)'])\nplt.title('Train Set')\nplt.ylabel('windmill_body_temperature(\u00b0C)')\nplt.subplot(122)\nsns.boxplot(y=df_test['windmill_body_temperature(\u00b0C)'])\nplt.title('Test Set')\nplt.ylabel('windmill_body_temperature(\u00b0C)')\nplt.show()","555825b4":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['wind_direction(\u00b0)'])\nplt.title('Train Set')\nplt.ylabel('wind_direction(\u00b0)')\nplt.subplot(122)\nsns.boxplot(y=df_test['wind_direction(\u00b0)'])\nplt.title('Test Set')\nplt.ylabel('wind_direction(\u00b0)')\nplt.show()","465d8782":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['resistance(ohm)'])\nplt.title('Train Set')\nplt.ylabel('resistance(ohm)')\nplt.subplot(122)\nsns.boxplot(y=df_test['resistance(ohm)'])\nplt.title('Test Set')\nplt.ylabel('resistance(ohm)')\nplt.show()","d1cf364e":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['rotor_torque(N-m)'])\nplt.title('Train Set')\nplt.ylabel('rotor_torque(N-m)')\nplt.subplot(122)\nsns.boxplot(y=df_test['rotor_torque(N-m)'])\nplt.title('Test Set')\nplt.ylabel('rotor_torque(N-m)')\nplt.show()","d9e14c62":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['blade_length(m)'])\nplt.title('Train Set')\nplt.ylabel('blade_length(m)')\nplt.subplot(122)\nsns.boxplot(y=df_test['blade_length(m)'])\nplt.title('Test Set')\nplt.ylabel('blade_length(m)')\nplt.show()","973f137e":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['blade_breadth(m)'])\nplt.title('Train Set')\nplt.ylabel('blade_breadth(m)')\nplt.subplot(122)\nsns.boxplot(y=df_test['blade_breadth(m)'])\nplt.title('Test Set')\nplt.ylabel('blade_breadth(m)')\nplt.show()","0210e483":"plt.figure(figsize=(12,5))\nplt.subplot(121)\nsns.boxplot(y=df_train['windmill_height(m)'])\nplt.title('Train Set')\nplt.ylabel('windmill_height(m)')\nplt.subplot(122)\nsns.boxplot(y=df_test['windmill_height(m)'])\nplt.title('Test Set')\nplt.ylabel('windmill_height(m)')\nplt.show()","581cc1ed":"plt.figure(figsize=(15,5))\nplt.subplot(121)\nsns.countplot(data=df_train, x='turbine_status')\nplt.title('Train Set')\nplt.subplot(122)\nsns.countplot(data=df_test, x='turbine_status')\nplt.title('Test Set')\nplt.show()","2fb3a312":"plt.figure(figsize=(15,5))\nplt.subplot(121)\nsns.countplot(data=df_train, x='cloud_level')\nplt.title('Train Set')\nplt.subplot(122)\nsns.countplot(data=df_test, x='cloud_level')\nplt.title('Test Set')\nplt.show()","3d54906e":"df_train['windmill_generated_power(kW\/h)'].describe()","4f4e228d":"sns.displot(df_train['windmill_generated_power(kW\/h)'], kde='Ture')","adec9558":"# Numeric Features & Target\nplt.figure(figsize=(30, 60))\nplt.subplots_adjust(hspace=0.2, wspace=0.2)\nfor i, feature in enumerate(num_features):\n    plt.subplot(6, 3, i+1)\n    sns.scatterplot(x=feature, y='windmill_generated_power(kW\/h)', data=df_train, alpha=0.5)\n    plt.xlabel(feature)\n    plt.ylabel('windmill_generated_power(kW\/h)')\nplt.show()","d13d42ef":"# Categorical Features & Target\nplt.figure(figsize=(15,20))\nplt.subplots_adjust(hspace=0.2, wspace=0.2)\nfor i, feature in enumerate(cat_features):\n    plt.subplot(2, 1, i+1)\n    sns.violinplot(x=feature, y=\"windmill_generated_power(kW\/h)\", data=df_train)\n    plt.xlabel(feature)\n    plt.ylabel('windmill_generated_power(kW\/h)')\nplt.show()","9d1bc28e":"train = df_train.copy()\ntest = df_test.copy()","f71a0194":"# About The Numeric Features & Outliers (Train set)\nplt.figure(figsize=(30, 60))\nplt.subplots_adjust(hspace=0.2, wspace=0.2)\nfor i, feature in enumerate(num_features):\n    plt.subplot(6, 3, i+1)\n    plt.hist(x=feature, data=train, bins=30, rwidth=0.9)\n    plt.title(feature)\nplt.show()","47a45237":"def nan_replace_outlier(col, value):\n    train[col].replace(value, np.nan, inplace=True)\n    test[col].replace(value, np.nan, inplace=True)","4c2f1d40":"col_out = ['atmospheric_temperature(\u00b0C)', 'shaft_temperature(\u00b0C)', 'blades_angle(\u00b0)', 'windmill_body_temperature(\u00b0C)', 'resistance(ohm)', 'rotor_torque(N-m)', 'blade_length(m)']\n\nfor i in col_out:\n    nan_replace_outlier(i, -99)\n    \nnan_replace_outlier('windmill_body_temperature(\u00b0C)', -999)","88761379":"for col in num_features:\n    train[col].fillna(value=train[col].mean(),inplace=True)\n    test[col].fillna(value=test[col].mean(),inplace=True)\n    \nfor col in cat_features:\n    train[col].fillna(value=train[col].mode()[0],inplace=True)\n    test[col].fillna(value=test[col].mode()[0],inplace=True)\n    \ntrain['windmill_generated_power(kW\/h)'].fillna(value=train['windmill_generated_power(kW\/h)'].mode()[0],inplace=True)","8f17b7ba":"train.isna().sum()","095161a7":"test.isna().sum()","6f207c93":"train['datetime'] = pd.to_datetime(train['datetime'], format='%Y\/%m\/%d %H:%M:%S')\n\ntrain['year'] = train['datetime'].dt.year\ntrain['month'] = train['datetime'].dt.month\ntrain['day'] = train['datetime'].dt.day\ntrain['hour'] = train['datetime'].dt.hour\ntrain['minute'] = train['datetime'].dt.minute","ee2a6c2c":"test['datetime'] = pd.to_datetime(test['datetime'], format='%Y\/%m\/%d %H:%M:%S')\n\ntest['year'] = test['datetime'].dt.year\ntest['month'] = test['datetime'].dt.month\ntest['day'] = test['datetime'].dt.day\ntest['hour'] = test['datetime'].dt.hour\ntest['minute'] = test['datetime'].dt.minute","304b3baa":"train.info()","8cde012a":"plt.figure(figsize=(12,5))\nmonth_power=train.iloc[:train.shape[0],:].astype({'month':str}).groupby('month',axis=0)['windmill_generated_power(kW\/h)'].max()\nplt.plot(month_power.index.values,month_power)\nplt.xlabel('Month')\nplt.ylabel('windmill_generated_power(kW\/h)')","3870734c":"plt.figure(figsize=(12,5))\nday_power=train.iloc[:train.shape[0],:].astype({'day':str}).groupby('day',axis=0)['windmill_generated_power(kW\/h)'].max()\nplt.plot(day_power.index.values,day_power)\nplt.xlabel('Day')\nplt.ylabel('windmill_generated_power(kW\/h)')","3282ccd5":"plt.figure(figsize=(12,5))\nhour_power=train.iloc[:train.shape[0],:].astype({'hour':str}).groupby('hour',axis=0)['windmill_generated_power(kW\/h)'].max()\nplt.plot(hour_power.index.values,hour_power)\nplt.xlabel('Hour')\nplt.ylabel('windmill_generated_power(kW\/h)')","1e9c59eb":"le = LabelEncoder()\nle.fit(['Medium', 'Low', 'Extremely Low'])\ntrain['cloud_level'] = le.transform(train['cloud_level'])\ntest['cloud_level'] = le.transform(test['cloud_level'])","262ec484":"train_dum = pd.get_dummies(train['turbine_status'])\ntest_dum = pd.get_dummies(test['turbine_status'])\n\ntrain = pd.concat([train,train_dum],axis=1)\ntest = pd.concat([test,test_dum],axis=1)","e3c92170":"train.drop(['turbine_status'], axis=1, inplace=True)\ntest.drop(['turbine_status'], axis=1, inplace=True)\n\ntrain.info()","1cbb4348":"corr = train.corr()\nplt.figure(figsize=(25,25))\nmask = np.zeros_like(corr,dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,mask=mask,annot=True,cbar=False,cmap='Blues')\nplt.show()","219dff50":"train.drop(['tracking_id','datetime'], axis=1, inplace=True)\ntest.drop(['tracking_id','datetime'], axis=1, inplace=True)","63e72786":"fs = train.copy()\n\nfs_Y = fs['windmill_generated_power(kW\/h)']\nfs_X = fs.drop(['windmill_generated_power(kW\/h)'],axis=1)","4debe8e4":"names = []\nfor col in fs_X.columns:\n    names.append(col)","723ec06b":"ranks = pd.DataFrame()\nranks[\"Features\"] = names","8bf7f0ee":"f, pval  = f_regression(fs_X, fs_Y, center=True)\nranks[\"Corr\"] = f","6b45c871":"lr = LinearRegression(normalize=True)\nlr.fit(fs_X, fs_Y)\nranks[\"Linear reg\"] = lr.coef_","96727279":"ridge = Ridge(alpha=7)\nridge.fit(fs_X, fs_Y)\nranks[\"Ridge\"] = ridge.coef_","f3dae1c3":"lasso = Lasso(alpha=.05)\nlasso.fit(fs_X, fs_Y)\nranks[\"Lasso\"] = lasso.coef_","cc91fcbd":"rfe = RFE(lr, n_features_to_select=5)\nrfe.fit(fs_X, fs_Y)\nranks[\"RFE\"] = rfe.ranking_","77001f8c":"ranks = ranks.set_index('Features',drop=True)\nranks = ranks.abs()","741d6992":"ranks","1a2eceb0":"train.drop(['gearbox_temperature(\u00b0C)', 'windmill_body_temperature(\u00b0C)'], axis=1, inplace=True)\ntest.drop(['gearbox_temperature(\u00b0C)', 'windmill_body_temperature(\u00b0C)'], axis=1, inplace=True)","e89ab794":"train.info()","7811aa46":"Y = train['windmill_generated_power(kW\/h)']\nX = train.drop(['windmill_generated_power(kW\/h)'],axis=1)\n\nX_test = test\n\nprint(X.shape,Y.shape)\nprint(X_test.shape)","e6487f46":"scaler = RobustScaler()\nX = scaler.fit_transform(X)\nX_test = scaler.transform(X_test)","5371a55b":"x_train,x_test,y_train,y_test = train_test_split(X,Y,train_size=0.75,random_state=42)\n\nprint(x_train.shape,y_train.shape)\nprint(x_test.shape,y_test.shape)","64c557c5":"lr_model = LinearRegression()\nlr_model.fit(x_train,y_train)\ny_train_pred = lr_model.predict(x_train)\ny_test_pred = lr_model.predict(x_test)\nprint(r2_score(y_true=y_train,y_pred=y_train_pred))\nprint(r2_score(y_true=y_test,y_pred=y_test_pred))","87f581c0":"ridge_model = RidgeCV(scoring=\"r2\", alphas=[0.0001,0.0005,0.001,0.005,0.01,0.1,1.0,10],cv=5)\nridge_model.fit(x_train,y_train)\ny_train_pred = ridge_model.predict(x_train)\ny_test_pred = ridge_model.predict(x_test)\nprint(r2_score(y_true=y_train,y_pred=y_train_pred))\nprint(r2_score(y_true=y_test,y_pred=y_test_pred))","1787cc27":"lasso_model = LassoCV(alphas=[0.0001,0.0005,0.001,0.005,0.01,0.1,1.0,10],cv=5)\nlasso_model.fit(x_train,y_train)\ny_train_pred = lasso_model.predict(x_train)\ny_test_pred = lasso_model.predict(x_test)\nprint(r2_score(y_true=y_train,y_pred=y_train_pred))\nprint(r2_score(y_true=y_test,y_pred=y_test_pred))","da16858f":"enet_model = ElasticNetCV(l1_ratio = [0.1, 0.5, 0.7, 0.9, 0.95, 0.99, 1], alphas = [1, 0.1, 0.01, 0.001, 0.0005], cv=5)\nenet_model.fit(x_train, y_train)\ny_train_pred = enet_model.predict(x_train)\ny_test_pred = enet_model.predict(x_test)\nprint(r2_score(y_train,y_train_pred))\nprint(r2_score(y_test,y_test_pred))","55328058":"svr_model = SVR()\nsvr_model.fit(x_train, y_train)\ny_train_pred = svr_model.predict(x_train)\ny_test_pred = svr_model.predict(x_test)\nprint(r2_score(y_train,y_train_pred))\nprint(r2_score(y_test,y_test_pred))","11c51cf6":"ab_model = AdaBoostRegressor()\nab_model.fit(x_train,y_train)\ny_train_pred = ab_model.predict(x_train)\ny_test_pred = ab_model.predict(x_test)\nprint(r2_score(y_train,y_train_pred))\nprint(r2_score(y_test,y_test_pred))","1e1532a7":"gb_model = GradientBoostingRegressor(criterion='mse',random_state=0,max_depth=5, n_estimators=500,min_samples_split=2,min_samples_leaf=2)\ngb_model.fit(x_train,y_train)\ny_train_pred = gb_model.predict(x_train)\ny_test_pred = gb_model.predict(x_test)\nprint(r2_score(y_train,y_train_pred))\nprint(r2_score(y_test,y_test_pred))","6a9a6c85":"rf_model = RandomForestRegressor()\nrf_model.fit(x_train,y_train)\ny_train_pred = rf_model.predict(x_train)\ny_test_pred = rf_model.predict(x_test)\nprint(r2_score(y_train,y_train_pred))\nprint(r2_score(y_test,y_test_pred))","17ee58a2":"extra_model = ExtraTreesRegressor(criterion='mse', random_state=0, n_jobs=-1, min_samples_leaf=1, max_depth=20, min_samples_split=3, n_estimators=1000)\nextra_model.fit(x_train, y_train)\ny_train_pred = extra_model.predict(x_train)\ny_test_pred = extra_model.predict(x_test)\nprint(r2_score(y_train,y_train_pred))\nprint(r2_score(y_test,y_test_pred))","ce4facdd":"lgbm_model = LGBMRegressor(learning_rate=0.05, max_depth=6,n_estimators=300,num_leaves=30)\nlgbm_model.fit(x_train, y_train)\ny_train_pred = lgbm_model.predict(x_train)\ny_test_pred = lgbm_model.predict(x_test)\nprint(r2_score(y_train,y_train_pred))\nprint(r2_score(y_test,y_test_pred))","a40a39b0":"xgb_model = XGBRegressor(n_estimators=500,max_depth=5,booster='gbtree',n_jobs=-1,learning_rate=0.1,reg_lambda=0.01,reg_alpha=0.3)\nxgb_model.fit(x_train,y_train)\ny_train_pred = xgb_model.predict(x_train)\ny_test_pred = xgb_model.predict(x_test)\nprint(r2_score(y_train,y_train_pred))\nprint(r2_score(y_test,y_test_pred))","ebde3c04":"mlp_model = MLPRegressor(hidden_layer_sizes=(150,100), activation='tanh',solver='adam',alpha=0.02,max_iter=800)\nmlp_model.fit(x_train,y_train)\ny_train_pred = mlp_model.predict(x_train)\ny_test_pred = mlp_model.predict(x_test)\nprint(r2_score(y_true=y_train,y_pred=y_train_pred))\nprint(r2_score(y_true=y_test,y_pred=y_test_pred))","2697addf":"class AveragingModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, models):\n        self.models = models\n        \n    def fit(self, X, y):\n        self.models_ = [clone(x) for x in self.models]\n        for model in self.models_:\n            model.fit(X, y)\n        return self\n    \n    def predict(self, X):\n        predictions = np.column_stack([model.predict(X) for model in self.models_])\n        return np.mean(predictions, axis=1) ","64c216fa":"averaged_model = AveragingModels(models = (gb_model,rf_model,extra_model,lgbm_model,xgb_model,mlp_model))\naveraged_model.fit(x_train, y_train)\ny_train_pred = averaged_model.predict(x_train)\ny_test_pred = averaged_model.predict(x_test)\nprint(r2_score(y_train,y_train_pred))\nprint(r2_score(y_test,y_test_pred))","6ebf4225":"result = averaged_model.predict(X_test)","805b1778":"test_final = df_test[['tracking_id','datetime']]","317ee838":"x = pd.DataFrame(test_final)\nx.loc[:,'windmill_generated_power(kW\/h)'] = result","60092b88":"test_final.head()","3d326786":"print(test_final.shape)","8f0c2225":"test_final.to_csv('.\/sample_submission.csv',header=True,index=False)","617b94db":"### windmill_body_temperature(\u00b0C)","90b922a4":"### blades_angle(\u00b0)","1328a072":"## Convert Datetime","3b68769c":"## About Each Feature ","f37eaa9b":"## SVR","3e16a4ae":"It's obvious that 'atmospheric_temperature(\u00b0C)', 'shaft_temperature(\u00b0C)', 'blades_angle(\u00b0)', 'windmill_body_temperature(\u00b0C)', 'resistance(ohm)', 'rotor_torque(N-m)', 'blade_length(m)' have extreme outliers like -99.","b864e244":"## RandomForestRegressor","ff79b8f1":"## Handle Missing Values","d4e2ca79":"Year and second are no that important in this case. ","6bded1fc":"### wind_direction(\u00b0)","2f5a56ed":"### df_test","573af19c":"## Different Models","195047bb":"Label encoding for cloud_level","504dfa12":"## GradientBoostingRegressor","186a625b":"### area_temperature(\u00b0C)","f8c2a408":"### cloud_level","8b7736f5":"### resistance(ohm)","062d7465":"## Handle Extreme Outliers","684e8485":"## Mix Model","95cc6a44":"### shaft_temperature(\u00b0C)","03e02f98":"***","df80fde3":"## About Target - windmill_generated_power(kW\/h)","1f78d9a9":"### atmospheric_pressure(Pascal)","2ae8bed1":"### gearbox_temperature(\u00b0C)","8f5bfeaa":"# Exploratory Data Analysis ","9eec59ae":"Get_dummies for turbine_status","438ee718":"### wind_speed(m\/s)","6fce7d6f":"## Missing Values & Correlation","6a8d50c3":"### df_train","10e01b0d":"## Ridge","52819212":"# Submission","420b3cd6":"## ElasticNet","3119e3dc":"When it comes to categorical features, we will not plot right now because 'Tracking_id' & 'datetime' will be processed later. And further analysis on all features will be done later.","8168d0bd":"# Data Processing","641fc860":"### blade_breadth(m)","bf526aa1":"### rotor_torque(N-m)","717ff490":"## Encoding On Categorical Features","2f37e4ad":"## AdaBoostRegressor","8e9898b8":"## XGBRegressor","a4e75e4f":"Replacing the missing values of numeric features with `mean`, and `mode` for categorical features.","8d2148b8":"## About df_train & df_test","971d2bb1":"## MLP","7e92cfaa":"## LinearRegression","77707417":"### blade_length(m)","862c6e82":"### df_train","f0205269":"## ExtraTreesRegressor","6f5db704":"## Categorical & Numerical Features","3a79d2e5":"## Lasso","6db3e413":"Combined with the previous EDA, we can do feature selection. I delete 'gearbox_temperature(\u00b0C)', 'windmill_body_temperature(\u00b0C)'.","b22ef8e9":"## LGBMRegressor","11d70ae8":"### windmill_height(m)","b0de5fe1":"### motor_torque(N-m)","8ffbedf6":"### generator_temperature(\u00b0C)","e7fc0d75":"### atmospheric_temperature(\u00b0C)","824112a4":"### turbine_status","3fa3d43e":"### df_test","b5dbba68":"## Feature Selection","342124a0":"## After EDA\n\n1. 'tracking_id' can be deleted as it's useless.\n2. 'windmill_body_temperature(\u00b0C)' seems to be have different distribution in training and testing set and it not highly correlated with target, so maybe we'll drop it.\n3.  Some features have negative values. Negative value of wind_speed may represent the wind in the opposite flow. But most of negative values are meaningless, such as -99 and -999, which can be considered as missing values. These values should be removed as extreme outliers.\n4. 'datetime' should be converted from object to timestamp or datetime format. We can also extract new features like 'Hour' & 'Month'.\n5. Features with null values need to be imputed.  \n6. Some pairs of features have high correlation or missing value correlation, we should pay attention to these features.","67bf5219":"# Modeling","fb35bde1":"# Preparation","146a3d29":"### engine_temperature(\u00b0C)"}}