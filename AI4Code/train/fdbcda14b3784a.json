{"cell_type":{"48562a7f":"code","e82caf87":"code","b01e3e3e":"code","36d84248":"code","b4e39835":"code","db3000c5":"code","81ade14f":"code","abc0cb70":"code","7c039c92":"code","823ae133":"code","f7e36741":"code","fdbad02d":"code","f41e49bd":"code","a8f319c9":"code","1b45226d":"code","182bb9d9":"code","fb5a4844":"code","910e49ad":"code","ad18d40b":"code","cbd290c6":"code","13b692dd":"code","8c885080":"code","57f71bc3":"code","707a8b8a":"code","128e88d7":"code","1dc5d595":"code","63d38158":"code","2e20591a":"code","4a7b6c95":"code","9fe2442b":"code","f7ab29e4":"code","3bc6b79a":"code","ecd7adf0":"code","1f9e1b74":"code","b79184a2":"code","c3dbf5ef":"code","55db4ec3":"code","91334eaa":"code","449a4f22":"code","28f6dde0":"code","6109daa5":"code","f884db82":"code","e0d28c9b":"code","165820c5":"code","67db9eda":"code","165a3717":"code","39a2eda5":"code","6b6b4186":"code","a39d8c51":"code","f80e98ba":"code","c7896e1b":"code","7ebfb415":"code","48842456":"code","2bb4e7be":"code","8a63b84b":"code","b79cdbd3":"code","a0a8d8d7":"code","b74a0a29":"code","0a7dc3ef":"code","864ddcc3":"code","2031696d":"code","33e4f0bf":"code","c7985469":"code","23a329a6":"code","8ec06b0a":"code","36f89f94":"code","2f1bdc4a":"code","897142a5":"code","12d1628b":"code","d62f04e8":"code","6644b687":"code","581dd7c3":"code","43a771ee":"code","c4a6cb0a":"code","5fd8959b":"code","acae8f65":"code","ef7cc298":"code","79da674f":"code","b10c4f04":"markdown","05d7c485":"markdown","945e88bd":"markdown","1168dde0":"markdown","4a8c6eba":"markdown","a2c23b29":"markdown","b2b0bafe":"markdown","7c90c37f":"markdown","87c33cf1":"markdown","590cc685":"markdown","c3cc63af":"markdown","1191f648":"markdown","9499f7cf":"markdown","93b56905":"markdown","b2dda6fc":"markdown","246ae715":"markdown","5288dd23":"markdown","5a7ebb17":"markdown","724f6e90":"markdown","ebda47eb":"markdown","6d75588f":"markdown","e0aa9171":"markdown","63b7614f":"markdown","299d7e19":"markdown","01970b46":"markdown"},"source":{"48562a7f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport librosa\nimport librosa.display\nimport soundfile as sf\nimport os\nimport glob\nimport matplotlib.pyplot as plt\nfrom tqdm.auto import tqdm\nfrom scipy.fft import fft, fftfreq, rfft, rfftfreq, irfft","e82caf87":"trainfiles = glob.glob( '..\/input\/rfcx-species-audio-detection\/train\/*.flac' )\ntestfiles = glob.glob( '..\/input\/rfcx-species-audio-detection\/test\/*.flac' )\nlen(trainfiles), len(testfiles), trainfiles[0]","b01e3e3e":"df_train_tp = pd.read_csv( '..\/input\/rfcx-species-audio-detection\/train_tp.csv' )\ndf_train_tp[\"filepath\"] = df_train_tp[\"recording_id\"].apply(lambda rid: f\"..\/input\/rfcx-species-audio-detection\/train\/{rid}.flac\")\ndf_train_tp['t_dif'] = df_train_tp['t_max'] - df_train_tp['t_min']\ndf_train_tp['f_dif'] = df_train_tp['f_max'] - df_train_tp['f_min']\ndf_train_tp[\"truepos\"] = \"1\"\n\ndf_train_fp = pd.read_csv( '..\/input\/rfcx-species-audio-detection\/train_fp.csv' )\ndf_train_fp[\"filepath\"] = df_train_fp[\"recording_id\"].apply(lambda rid: f\"..\/input\/rfcx-species-audio-detection\/train\/{rid}.flac\")\ndf_train_fp['t_dif'] = df_train_fp['t_max'] - df_train_fp['t_min']\ndf_train_fp['f_dif'] = df_train_fp['f_max'] - df_train_fp['f_min']\ndf_train_fp[\"truepos\"] = 0\n\ndf_train_full = pd.concat([df_train_tp, df_train_fp])\n\ndf_train_tp.shape, df_train_fp.shape","36d84248":"def collect_bird_metrics(df, species_id):\n    df = df[df[\"species_id\"] == species_id]\n    df_metrics = df.describe()\n    return df_metrics\n\nall_metrics = []\nfor x in range(24):\n    metrics = collect_bird_metrics(df_train_full, x)\n    all_metrics.append(metrics)","b4e39835":"# Plot the spectrogram\n\nsampling_frequency = 48000\nvisualize_fft_bins = False\n\ndef row_spectrogram(row, zoom, show_fft):\n    dataitem, samplerate = sf.read(row[\"filepath\"])\n    start_time = row[\"t_min\"]\n    start_time = float(start_time)\n    start_sample = start_time * sampling_frequency\n    start_sample = int(start_sample)\n    end_time = row[\"t_max\"] \n    end_sample = end_time * sampling_frequency\n    end_time = float(end_time)\n    end_sample = int(end_sample)\n    if zoom:\n        dataitem = dataitem[start_sample:end_sample]\n    freq_bottom = row[\"f_min\"]\n    freq_top = row[\"f_max\"]\n\n    if not zoom:\n        plt.figure(figsize=(8,5))\n        plt.title(\"Full one minute spectrogram with sample time and frequency highlighted\")\n        plt.axvspan(start_time, end_time, color='red', alpha=0.1)\n    else:\n        plt.figure(figsize=(5,5))\n        plt.title(\"Sample time cropped spectrogram\")\n    plt.axhspan(freq_bottom, freq_top, color='red', alpha=0.3)\n    powerSpectrum, freqenciesFound, time, imageAxis = plt.specgram(dataitem, Fs=sampling_frequency)\n    plt.xlabel('Time')\n    plt.ylabel('Frequency')\n    plt.show()\n    \n    plt.figure(figsize=(8,5))\n    if not zoom:\n        plt.title('Full one minute Mel spectrogram, with full frequency range')\n        mel_spectrogram = librosa.feature.melspectrogram(y=dataitem,\n                                                             sr=samplerate,\n                                                             n_mels=256,\n                                                             fmax=samplerate\/2,\n                                                             hop_length=128)\n    else:\n        plt.title('Mel spectrogram for signal time and frequency range')\n        #256 mels produced empty streaks, reduced to 128\n        mel_spectrogram = librosa.feature.melspectrogram(y=dataitem,\n                                                             sr=samplerate,\n                                                             n_mels=128,\n                                                             hop_length=64,\n                                                             fmax=freq_top,\n                                                             fmin=freq_bottom)\n\n    librosa.display.specshow(librosa.power_to_db(mel_spectrogram,ref=np.max),\n                              y_axis='mel', x_axis='time')\n    plt.colorbar(format='%+2.0f dB')\n    plt.tight_layout()\n\n    if show_fft:\n        bird_fft(dataitem, freq_bottom, freq_top, zoom)\n\ndef bird_spectrograms(df, species_id, idxs, zoom=False, show_fft=False):\n    df = df[df[\"species_id\"] == species_id]\n    df = df.iloc[idxs]\n    for index, row in df.iterrows():\n        print(f\"plotting row {index}:\\n{row}\")\n        row_spectrogram(row, False, show_fft)\n        if zoom:\n            print(f\"plotting (zoomed) sample area only: {row['t_min']}s to {row['t_max']}s\")\n            row_spectrogram(row, True, show_fft)\n    \n    \n#https:\/\/realpython.com\/python-scipy-fft\/\ndef bird_fft(dataitem, freq_bottom, freq_top, zoom):\n    yf = rfft(dataitem)\n#    xf = rfftfreq(dataitem.shape[0], 1 \/ sampling_frequency * 100)\n    xf = rfftfreq(dataitem.shape[0], 1 \/ sampling_frequency)\n\n    if visualize_fft_bins:\n        plt.figure(figsize=(8,5))\n        if not zoom:\n            plt.title(\"Full one minute FFT frequency weights\")\n        else:\n            plt.title(\"Sample range FFT frequency weights\")\n        plt.plot(xf, np.abs(yf))\n        plt.show()\n    \n    # The maximum frequency is half the sample rate (yes, I copied this from the internet :)\n    points_per_freq = len(xf) \/ (sampling_frequency \/ 2)\n\n    target_idx_bottom = int(points_per_freq * freq_bottom)\n    target_idx_top = int(points_per_freq * freq_top)\n    yf[target_idx_top:] = 0\n    yf[:target_idx_bottom] = 0\n\n    if visualize_fft_bins:\n        plt.figure(figsize=(8,5))\n        if not zoom:\n            plt.title(\"Full FFT frequency weights for sample time\")\n        else:\n            plt.title(\"Sample frequency range FFT frequency weights for sample time\")\n        plt.plot(xf, np.abs(yf))\n        plt.show()\n\n    #reverse the fft data back to signal without the filtered parts\n    new_sig = irfft(yf)\n\n    plt.figure(figsize=(8,5))\n    if not zoom:\n        plt.title(\"Reversed signal from sample FFT frequency weights, cropped to sample freq range\")\n    else:\n        plt.title(\"Reversed signal from sample FFT frequency weights, cropped to sample time and freq range\")\n    plt.plot(new_sig)\n    plt.show()\n    \n    #the following will draw a spectrogram for the filtered signal range(s)\n#    plt.figure(figsize=(8,5))\n#    powerSpectrum, freqenciesFound, time, imageAxis = plt.specgram(new_sig, Fs=sampling_frequency)\n#    plt.title(\"Spectrogram from above FFT reversed signal\")\n#    plt.xlabel('Time')\n#    plt.ylabel('Frequency')\n#    plt.show()","db3000c5":"indices_to_plot = [0,1,2]","81ade14f":"x=0","abc0cb70":"display(all_metrics[x])\n","7c039c92":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","823ae133":"x=1","f7e36741":"display(all_metrics[x])","fdbad02d":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","f41e49bd":"x = 2","a8f319c9":"display(all_metrics[x])","1b45226d":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","182bb9d9":"x = 3","fb5a4844":"display(all_metrics[x])","910e49ad":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","ad18d40b":"x = 4","cbd290c6":"display(all_metrics[x])","13b692dd":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","8c885080":"x = 5","57f71bc3":"display(all_metrics[x])","707a8b8a":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","128e88d7":"x = 6","1dc5d595":"display(all_metrics[x])","63d38158":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","2e20591a":"x = 7","4a7b6c95":"display(all_metrics[x])","9fe2442b":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","f7ab29e4":"x = 8","3bc6b79a":"display(all_metrics[x])","ecd7adf0":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","1f9e1b74":"x = 9","b79184a2":"display(all_metrics[x])","c3dbf5ef":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","55db4ec3":"x = 10","91334eaa":"display(all_metrics[x])","449a4f22":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","28f6dde0":"x = 11","6109daa5":"display(all_metrics[x])","f884db82":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","e0d28c9b":"x = 12","165820c5":"display(all_metrics[x])","67db9eda":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","165a3717":"x = 13","39a2eda5":"display(all_metrics[x])","6b6b4186":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","a39d8c51":"x = 14","f80e98ba":"display(all_metrics[x])","c7896e1b":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","7ebfb415":"x = 15","48842456":"display(all_metrics[x])","2bb4e7be":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","8a63b84b":"x = 16","b79cdbd3":"display(all_metrics[x])","a0a8d8d7":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","b74a0a29":"x = 17","0a7dc3ef":"display(all_metrics[x])","864ddcc3":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","2031696d":"x = 18","33e4f0bf":"display(all_metrics[x])","c7985469":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","23a329a6":"x = 19","8ec06b0a":"display(all_metrics[x])","36f89f94":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","2f1bdc4a":"x = 20","897142a5":"display(all_metrics[x])","12d1628b":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","d62f04e8":"x = 21","6644b687":"display(all_metrics[x])","581dd7c3":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","43a771ee":"x = 22","c4a6cb0a":"display(all_metrics[x])","5fd8959b":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","acae8f65":"x = 23","ef7cc298":"display(all_metrics[x])","79da674f":"bird_spectrograms(df_train_tp, x, indices_to_plot, True, True)","b10c4f04":"# Species 14","05d7c485":"# Species 23","945e88bd":"# Species 6","1168dde0":"# Species 24","4a8c6eba":"# Species 16","a2c23b29":"# Species 2","b2b0bafe":"# Species 10","7c90c37f":"# Species 4","87c33cf1":"# Species 21","590cc685":"A short notebook to explore the spectrograms of the different species. Generates:\n- a \"regular\" spectrogram using matplotlib,\n- a mel-spectrogram using librosa,\n- signal image reversed from the fourier transformations\n- both for the full one minute in the sample, and for cropped signal data containing only the given sample window\n\nI have no experience with audio analysis, spectrograms, etc., so any improvement suggestions are welcome.","c3cc63af":"# Species 19","1191f648":"# Species 11","9499f7cf":"# Species 22","93b56905":"# Species 15","b2dda6fc":"# Species 1","246ae715":"# Species 18","5288dd23":"# Species 5","5a7ebb17":"# Species 7","724f6e90":"# Species 17","ebda47eb":"# Species 12","6d75588f":"# Species 3","e0aa9171":"# Species 9","63b7614f":"# Species 8","299d7e19":"# Species 20","01970b46":"# Species 13"}}