{"cell_type":{"f1eba1a3":"code","cd922da7":"code","f4673159":"code","106f841e":"code","d6e00c37":"code","bf3c74a3":"code","77023276":"code","1aff9e7d":"code","800ff57c":"code","81c4d425":"code","00f135ae":"code","1ba89a4b":"code","dedec58c":"code","6711d884":"code","b072fce3":"code","fd94338c":"code","a4e245ef":"code","db3d8bf1":"code","304162a4":"code","637669b1":"code","10aa58c5":"code","0bc836f7":"code","7e702cbe":"code","31f9c309":"code","9203c4ed":"code","db7398cb":"code","bd0b504e":"code","b0f8bd8c":"code","1f2d6beb":"code","92e7b169":"code","76ef578a":"code","7700e6f2":"code","4902fb67":"code","fcaf79c4":"code","44808e0a":"code","d7e73af0":"code","988fbb75":"code","85d254f2":"code","f7a142ec":"code","b8a3880a":"markdown","3d84a2cb":"markdown","f076ce2d":"markdown","92b48f6a":"markdown","799bceb7":"markdown","fbc6423d":"markdown","1a1ea164":"markdown"},"source":{"f1eba1a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","cd922da7":"import pandas as pd\nimport subprocess\nimport os\n# Data source: https:\/\/www.youtube.com\/watch?v=UqQXp1PnvsU","f4673159":"pip install ibm_watson","106f841e":"# Ignore Code Below (Transforms wav files to mp3 in case we need to & \n# Splits files in case API's have a time limit)\n# Audio files for this project are prepared & ready to go on the Data folder.\n\n# Converts WAV to MP3\n# command = 'ffmpeg -i trumpspeech.wav -vn -ar 44100 -ac 2 -b:a 192k trumpspeech.mp3'\n# subprocess.call(command, shell=True)\n\n# Split up WAV for a selected timestamp & turns to MP3 in case our file is too long. \n# command = 'ffmpeg -i trumpspeech.mp3 -f segment -segment_time 100 -c copy %03d.mp3'\n# subprocess.call(command, shell=True)","d6e00c37":"from ibm_watson import SpeechToTextV1\nfrom ibm_cloud_sdk_core.authenticators import IAMAuthenticator","bf3c74a3":"# apikey= 'your IBM api key'\n# url= 'your IBM url link'","77023276":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\napikey = user_secrets.get_secret(\"apikey\")\nurl = user_secrets.get_secret(\"url\")","1aff9e7d":"# speech=\"Full audiofile directory (IBM API doesn't cap it)\"\nos.chdir('..\/input\/speech-highlights-2-minutes-shilouette-png')\nspeech= 'trumpspeech.mp3'","800ff57c":"authenticator= IAMAuthenticator(apikey)\nstt = SpeechToTextV1(authenticator = authenticator)\nstt.set_service_url(url)","81c4d425":"rawout=[]\nwith open(speech,'rb') as sound:\n    trans=stt.recognize(audio=sound,content_type='audio\/mp3', model='en-US_NarrowbandModel', continuous=True, \\\n                           inactivity_timeout=30).get_result()\n    rawout.append(trans)\n","00f135ae":"ibmtxt=[]\nfor file in rawout:\n    for element in file['results']:\n        ibmtxt.append(element['alternatives'][0]['transcript'])\n\nibmtxt=[x.lower() for x in ibmtxt]\n","1ba89a4b":"model_confidence=[]\nfor file in rawout:\n    for element in file['results']:\n        model_confidence.append(element['alternatives'][0]['confidence'])\n","dedec58c":"import numpy as np","6711d884":"print(\"IBM's SR API's confidence on our audiofile is\",np.array(model_confidence).mean()*100,'%')","b072fce3":"pip install SpeechRecognition","fd94338c":"import speech_recognition as sr\nimport librosa","a4e245ef":"# Already provided on data folder,typed for replicability\n\n# Splits up WAV for a selected timestamp & turns to MP3 in case our file is too long. \n# command = 'ffmpeg -i trumpspeech.wav -f segment -segment_time 30 -c copy %02d.wav'\n# subprocess.call(command, shell=True)","db3d8bf1":"r = sr.Recognizer()","304162a4":"files= []\nfor i in os.listdir():\n    if i.endswith('.wav') and i != 'trumpspeech.wav':\n        files.append(i)\nfiles.sort()","637669b1":"goog=[]\nfor i in files:\n    with sr.AudioFile(f'{i}') as source:\n        audio= r.record(source)\n        audio_length= 30\n        goog.append(r.recognize_google(audio))\n\n\n\n    ","10aa58c5":"goog=[x.lower() for x in goog]","0bc836f7":"# Sends output to txt (Already done on our database)\n\n# with open('IBMresult.txt', 'w') as out:\n#   out.writelines(ibmtxt)\n\n# with open('GOOGLEresult.txt', 'w') as out:\n#    out.writelines(goog)","7e702cbe":"IBM = pd.read_csv('IBMresult.txt', sep='\\n', header=None)\nGOOGLE = pd.read_csv('GOOGLEresult.txt', sep='\\n', header=None)","31f9c309":"# Getting word counts\n\nIBM_words = IBM[0].str.extractall(r'(\\w+)')[0].value_counts()\nGOOGLE_words= GOOGLE[0].str.extractall(r'(\\w+)')[0].value_counts()\n","9203c4ed":"df=pd.merge(IBM_words,GOOGLE_words, left_index=True,right_index=True)\ndf.columns= ['IBM','GOOGLE']","db7398cb":"# Manual translation from youtube video: https:\/\/www.youtube.com\/watch?v=UqQXp1PnvsU\n\nrealspeech= \"are you ready we will build a great wall along the southern border and mexico will pay for the wall on day one we will begin working on an impenetrable physical tall powerfull beautiful southern border wall After meeting with their wonderful wonderful president today i really believe they want to solve this problem along with us and I'm sure they will I am going to create a new special deportation task force focused on Identifying and quickly removing the most dangerous criminal illegal immigrants in america who have evaded justice just like Hillary clinton has evaded justice okay? We are going to suspend the issuance of visas to any place adequate screening cannot occur I call it extreme vetting right? Extreme vetting i want extreme Its going to be so tough and if somebody comes in that's fine but they're going to be good it's extreme countries from which immigration will be suspended would include places like syria and libya another reform involves new screening tests for all applicants that include and this is so important especially if you get the right people and we will get the right people an ideological certification to make sure that those we are admitting to our country share our values and love our people\"\nrealspeech=realspeech.lower()","bd0b504e":"# Already available on our dataset.\n\n# with open('Realspeech.txt', 'w') as out:\n#    out.writelines(realspeech)","b0f8bd8c":"real= pd.read_csv('Realspeech.txt',header=None)","1f2d6beb":"truth=real[0].str.extractall(r'(\\w+)')[0].value_counts()","92e7b169":"df=pd.merge(df,truth,left_index=True,right_index=True)","76ef578a":"df.rename(columns= {0:'REAL'},inplace=True)","7700e6f2":"df","4902fb67":"df= df.reset_index().rename(columns={'index':'WORDS'})","fcaf79c4":"import matplotlib.pyplot as plt \nimport seaborn as sns \n%matplotlib inline ","44808e0a":"corr = df.corr()\n\n# remove the top right triange - duplicate information & set up cmap\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nsns.heatmap(corr,mask=mask,linewidths=1, cmap='YlOrRd',annot=True,lw=1,linecolor='white')","d7e73af0":"plt.figure(figsize=(12,7))\nplt.title('Total Word Count')\nplt.xlim(184,191)\ndf.drop('WORDS',axis=1).sum().sort_values().plot.barh(color=['beige','orange','red'])","988fbb75":"df","85d254f2":"from wordcloud import WordCloud, ImageColorGenerator \nfrom PIL import Image\nfrom matplotlib.colors import LinearSegmentedColormap\n","f7a142ec":"with open('Realspeech.txt') as rawtxt:\n    text= rawtxt.read()\nmy_mask = np.array(Image.open('TOWC.png'))\nwc= WordCloud(background_color='white',\n               mask=my_mask,\n               random_state=0,\n               collocations=True,\n               width=1280,\n               height=1271,\n               contour_width=0,\n               contour_color='gray')\n\nwc.generate(text)\nwc.recolor(color_func= ImageColorGenerator(my_mask))\nplt.figure(figsize=(20, 10))\nplt.imshow(wc, interpolation='bilinear')\nplt.axis('off')\nplt.show()\n\n\n\n","b8a3880a":"## Using Google's SR API (speech_recognition + recognize_google) ##","3d84a2cb":"*Get results & store them for further evaluation*","f076ce2d":"## Creating Wordcloud from the original speech ##","92b48f6a":"*Creating df with IBM,Google & real word counts*","799bceb7":"## **Comparing Predictions & View Through Results** ##","fbc6423d":"# Political Speech to Text # \n*(project doesn't have any intent of evaluating policy or material mentioned in the speech itself)* ","1a1ea164":"## Starting off with IBM's API ##"}}