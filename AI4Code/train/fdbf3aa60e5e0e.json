{"cell_type":{"c26f3065":"code","61a8b48b":"code","73171b9c":"code","f545bedc":"code","13874b50":"code","db002e1d":"code","03dcd013":"code","a45a75e8":"code","f0f76ca9":"code","2cd2cb05":"code","6c310242":"code","58b140dd":"code","73561f40":"code","dfefddfb":"code","0ff942b3":"code","91d33c45":"markdown","ad79ebee":"markdown","3ac28a74":"markdown","4c229bcf":"markdown","e12fb53c":"markdown","c59dca2e":"markdown","f80f0085":"markdown","6dbb8e47":"markdown","53319ade":"markdown","483705e8":"markdown","3f7e11e6":"markdown","11c0e884":"markdown","822ad6f2":"markdown","c0e8be8a":"markdown","53240eaf":"markdown"},"source":{"c26f3065":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","61a8b48b":"import pandas as pd\nimport os\n\n\n\nfiles = os.listdir('..\/input\/among-us-dataset')\ndf = pd.concat([pd.read_csv('..\/input\/among-us-dataset\/' + f) for f in files ])\ndf= df.reset_index(drop=True)\ndf.head(5)\n","73171b9c":"custom_colors = [\"#6b2fbb\",\"#132ed1\",\"#3f47fe\",\"#d6e0f0\",\"#117f2d\",\"#50ef39\",\"#38fedc\",\"#71491e\",\"#c51111\",\"#ed54ba\",\"#ef7d0d\",\"#f5f557\"]\n","f545bedc":"def convertToMinute(col_name):\n    for index, row in df.iterrows():\n        if(df[col_name][index]=='-'): pass\n        else:\n            df[col_name][index]= int(df[col_name][index].split(' ')[0].split('m')[0])*60 + int(df[col_name][index].split(' ')[1].split('s')[0])","13874b50":"convertToMinute('Game Length')\nconvertToMinute('Time to complete all tasks')","db002e1d":"df.head(5)","03dcd013":"df[['Region','Game Code']] = df['Region\/Game Code'].str.split(\"\/\",expand=True)\ndf = df.drop(columns=['Region\/Game Code'])","a45a75e8":"df['Region']=df['Region'].str.strip()","f0f76ca9":"df['Region'].value_counts()","2cd2cb05":"import matplotlib.pyplot as plt  \ndata= {'All Region Mean':df['Game Length'].mean(), 'Europe':df['Game Length'].loc[df['Region']=='Europe'].mean()\n, 'North America':df['Game Length'].loc[df['Region']=='NA'].mean()}\n\ncountries = list(data.keys()) \nmeanTime = list(data.values()) \n   \nfig = plt.figure(figsize = (3, 6)) \n  \n# creating the bar plot \nplt.bar(countries, meanTime, color = [custom_colors[0],custom_colors[1],custom_colors[2]],  \n        width = 0.4) \n  \nplt.xlabel(\"Region\") \nplt.ylabel(\"Average Game Length(In secs)\") \nplt.title(\"Game length in different regions\") \nplt.show() ","6c310242":"from matplotlib import pyplot as plt\nimport numpy as np\nfig = plt.figure()\n\nax1 = fig.add_axes([0,0,1,1])\nax1.axis('equal')\nLabel = ['Imposter', 'Crewmate']\nV = [df['Team'].loc[df['Team']=='Imposter'].shape[0],df['Team'].loc[df['Team']=='Crewmate'].shape[0]]\nax1.pie(V, labels = Label,autopct='%1.2f%%')\n","58b140dd":"import numpy as np\nimport matplotlib.pyplot as plt\ndata = [[df['Team'].loc[(df['Team']=='Imposter') & (df['Outcome']=='Loss')].shape[0],df['Team'].loc[(df['Team']=='Crewmate') & (df['Outcome']=='Loss')].shape[0]] ,\n        [df['Team'].loc[(df['Team']=='Imposter') & (df['Outcome']=='Win')].shape[0],df['Team'].loc[(df['Team']=='Crewmate') & (df['Outcome']=='Win')].shape[0]]\n]\n\nX = np.arange(2)\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nrec1 = ax.bar(X + 0.00, data[0], color = 'b', width = 0.25,label='Loss')\nrec2 = ax.bar(X + 0.25, data[1], color = 'g', width = 0.25,label='Win')\n\nax.set_ylabel('Number of Matches')\nax.set_title('Imposter and Crewmate Win vs Loss')\nax.set_xticks(X)\nax.set_xticklabels(('Imposter', 'Crewmate'))\nax.legend()\n\ndef autolabel(rects):\n    \"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(height),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n\nautolabel(rec1)\nautolabel(rec2)","73561f40":"import matplotlib.pyplot as plt\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\na=df['Sabotages Fixed'].loc[(df['Team']=='Crewmate') & (df['Ejected']=='Yes')].value_counts().tolist()\nlabels= df['Sabotages Fixed'].loc[(df['Team']=='Crewmate') & (df['Ejected']=='Yes')].value_counts().index.values.tolist()\n\nax.bar(labels,a,color = [custom_colors[0],custom_colors[1],custom_colors[2],custom_colors[3]])\nax.set_xlabel('Number of Sabotages Fixed')\nax.set_ylabel('Number of CrewMates Voted pf')\nax.set_title('Relatio between Number of Sabotages fixed vs Crewmate being voted off ')\nax.legend()\n\nplt.show()\n\n","dfefddfb":"import matplotlib.pyplot as plt\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\na=df['Task Completed'].loc[(df['Team']=='Crewmate') & (df['Outcome']=='Win')].value_counts()\nlabels= df['Task Completed'].loc[(df['Team']=='Crewmate') & (df['Outcome']=='Win')].value_counts().index.values.tolist()\n\nax.bar(labels,a,color = custom_colors)\nax.set_xlabel('Number of Sabotages Fixed')\nax.set_ylabel('Number of CrewMates Voted pf')\nax.set_title('Relatio between Number of Sabotages fixed vs Crewmate being voted off ')\nax.legend()\n\nplt.show()\n\n","0ff942b3":"import matplotlib.pyplot as plt\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\na=df['Imposter Kills'].loc[(df['Team']=='Imposter') & (df['Outcome']=='Win')].value_counts().tolist()\nlabels= df['Imposter Kills'].loc[(df['Team']=='Imposter') & (df['Outcome']=='Win')].value_counts().index.values.tolist()\n\nax.bar(labels,a,color = custom_colors)\nax.set_xlabel('Number of Kills')\nax.set_ylabel('Number of Imposters who won the match')\nax.set_title('Relatio between Number of Kills and Imposter Winning ')\nax.legend()\n\nplt.show()\n\n","91d33c45":"\n <h1 style='font-family: \"Times New Roman\"'> Let's split the column Region\/GameCode into 2 seperate columns\n\n<\/h1>\n","ad79ebee":"  <h1 style='font-family: \"Times New Roman\"'> WELCOME TO AMONG US EDA, TIPS AND TRICKS <\/h1> \n  <p> There is a very high chance you have heard of this game if not played it. In case you haven't done either of those- Don't worry. I got you covered <\/p>\n  \n  <p style='font-family: \"Times New Roman\"'>Among Us is a murder mystery puzzler, where you play as a group to complete basic tasks around a spaceship. None of these tasks are particularly difficult - though card swiping can be frustrating - but they\u2019re hampered by the presence of an \u2018Impostor\u2019 - or 'Imposter' depending on who you're talking to. There will be between one and three Impostors each game, and a full crew can be up to ten<\/p>\n  \n  \n  <p style='font-family: \"Times New Roman\"'>The basic overview of Among Us is simple. A crew of 4-10 (usually 10) players are at a location doing tasks while 1-3 impostors (usually 2) are doing everything they can to sabotage their efforts and kill them all. The game ends in one of four ways.\n    <ul>\n        <li> All impostors are dead. (Crew Win) <\/li>\n        <li> All tasks are completed. (Crew Win) <\/li>\n        <li> There are an equal number of crew and impostors. (Impostor Win)<\/li>\n        <li> The crew fail to stop a catastrophic sabotage (Impostor Win) <\/li>\n    <\/ul>\nGames can be longer or shorter based on the number of players, their skills, and the options selected by the play group. When a game starts, you will be assigned a role, either as crew or impostors, and your goals and how you achieve them will change based on that.<\/p>","3ac28a74":"<h1 style='font-family: \"Times New Roman\"'>Lets see the distribution of region here <h2>","4c229bcf":"<h1 style='font-family: \"Times New Roman\"'> WHO HAS A MORE CHANCE OF WINNING?\n <\/h1> ","e12fb53c":"\n<h2 style='font-family: \"Times New Roman\";text-align:\"justify'> Get randomized colors <\/h2>","c59dca2e":"<h2><strong><center>Dataset Description<\/center><\/strong><\/h2>\n<ol>\n  <li>Game Completed Date - Date and Time of game completion<\/li>\n  <li> Team - player is an imposter or crewmate<\/li>\n  <li>Outcome - Fine result of the game - win\/loss<\/li>\n  <li>Task Completed - The number of tasks completed by the crewmate<\/li>\n  <li>All Tasks Completed - Boolean Variable showcasing if all the tasks are completed by the crewmate<\/li>\n    <li>Murdered - Crewmate is mudered or not<\/li>\n    <li>Imposter Kills - Number of kills by the imposter<\/li>\n    <li> Game Lengh - Total duration of the game <\/li>\n    <li>  Ejected - The player is ejected by the fellow players or not <\/li>\n    <li> Sabotages Fixed - Number of sabotages fixed by the crewmates <\/li>\n    <li> Time to complete all tasks - Duration taken by the crewmates to complete the tasks <\/li>\n    <li> Rank Change - Change in rank after the win\/loss of the game <\/li>\n    <li> Region\/Game Code - Server and the game code <\/li>\n<\/ol>\n\n\n(Source: https:\/\/www.kaggle.com\/nitishabharathi\/among-us-the-game-of-covid-era)\n","f80f0085":"> <h1> TIPS FOR CREWMATE<\/h1>","6dbb8e47":"<h2> (2) Okay now being a crewmate is boring- We all get it. However, since you already have become a crewmate- what next to do? Also the tasks are boring :( . Okay enough of my Lara. The best way to win the game is to do tasks ASAP. \n    <\/h2>\n<br>\n<h3> Let  me prove this to you using some data<\/h3>\n\n<h2> Yup, clearly doing more tasks leads to winning. If you see the top 5 in the graph - they all have more number of tasks. So Crewmates-\n    <span style=\"color:blue\">COMPLETE ALL THE TASKS ASAP :p <\/span>\n<\/h2>","53319ade":"\n <h2 style='font-family: \"Times New Roman\"'> Two of our columns are having data related to time in a format which makes interpretation harder( For eg 2m 1s)\n\n<\/h2>\n    <br> <h2  style='font-family: \"Times New Roman\"'> We are going to convert them to seconds <\/h2>\n","483705e8":"<h2> 1) <b> Isn't it annoying when you are voted off when you are not an imposter? Personally i just hate it. Let's try to visualize when a crewmate is kicked  <\/b> \n<\/h2>\n<h3> Lets first see if fixing the sabotages can be of any use <\/h3>\n\n<h2> Clearly People not fixing sabotages are being voted off. So Crewmates-. So Crewmates-\n    <span style=\"color:blue\"> <BR>DONT BE LAZY AND MAKE YOURSELF VISIBLE HELPING TEAM BY FIXING SABOTAGE :p <\/span>\n<\/h2>\n<h3>   <\/h3>","3f7e11e6":" <h1> TIPS FOR IMPOSTER<\/h1>\n \n <h2> 1)  So there are two ways to go about a game being an imposter. First way is to keep killing. However, from experience i feel this would increase your chances of being caught, right? My tactic is to kill 2-3 and then build trust with a few crewmates. And doing that would make sure you have support during Emergency meetings. Let's see i can back this up with any data\n <\/h2>\n \n <h2> Yup, clearly imposters doing fewer kills (1-3) are more likely to win the match according to the dataset. So Imposters -\n    <span style=\"color:blue\"> Target 2 kills and build trust :p <\/span>\n<\/h2>","11c0e884":"<div>\n<center><img src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEhUTExMWFRUVFRgVFxYVFxUVFRcVFxoXFx0XFxUYHSggGBonHRYXITEhJikrLi4uGB8zODMsNygtLisBCgoKDg0OGxAQGi0lICUrLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS8tLS0tLS8tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAJkBSQMBEQACEQEDEQH\/xAAcAAACAgMBAQAAAAAAAAAAAAAEBQMGAQIHAAj\/xABLEAACAQIDBAcEBQkGBAYDAAABAgMAEQQSIQUxQVEGBxMiYXGBMpGhsRRCUnLBI2JzkqKywtHwCDNDU4LhJTSz8RUkNURjg3ST0v\/EABsBAAIDAQEBAAAAAAAAAAAAAAECAAMEBQYH\/8QANxEAAgECBAIIBQQBBQEBAAAAAAECAxEEEiExQVEFEyIyYXGBsZGhwdHwIzNC4XIUFVJi8YI0\/9oADAMBAAIRAxEAPwDhwq0B2DoRjTidntGDeSNWj8dxKfDT0pk9Su2ljl+F2nNA0nZSNGXurFTYkX3XoDJJpATsSbk3J4miMlY1okD9ibLkxUyQRAF3Nhc2GgJJJ4AAGo9BW7K50OLoJPFGP\/MYcAKWayysBxN20vYchVao63uYKkYTld3+QLgUdHkhe2aMi+UkqbgMGUnXKVYGuV0jTy2l6HPxVNQaa4mu19miVDpraqcHiXCShJ6cPArw9d05JlbXY6tESt+0HA7rrvXz5c\/WutKtKDTe3H89zpvFyjUtLb8sICLVuR0CWKVQrqUVi1rOS2ZLG5ygEKb7jmB8LVGmExiHVjdVCCw7oJIuAATdtdSCfWglYhFamIZtUIZtUIetUIO9lkGPK24g2JI3i5IHlvHkeVYpd5hDYTdRcDPott12IuN\/C2vvoEPT4ErwuzH2hoAfHkOQ4+dC5AcYci5Klvzl4+hsfdRIQmC+7fxNiLeAuLk\/96gQTEYS3yB5+fj\/AF4U0ZuL0AAstq1RldXASJASjPdbKyrYkZjmDG4XeR3dTwuOdG+tiW0uazqoZgpzKCQrEZSRfQ5bm1xwvUW2pCO1Eh6oQxUIeqEPUCHqhA\/Y2UOSTbTS9dDovL195Pg7ef8A4UV720GOPcEAA314V18bJOCiuLXuUQTvclg9geVX0+4rgl3iv4oHNfnXkq93UbfHU2U9iC1Ulh6gQ9QIYoEPVCHqhDwqEDcBtSaAOIpGQSLlfKbZl5GiBpMhxMBUi5U3VW7rBh3gGsSNzC9iN4OlRBIaaxDNMAf9CMSI8Ur50SyPZpCAgJU7ydPCgV1VeNjoeK29C6ntMV2g\/wAjBxs5fwMzWCjxuaEqsYq5lcYxV5O3mLoy0ksuIdBG0rAiMahEUBVW\/HRR8a4OPxMarUYu6Ry8XXVSSUdkT3rAZCv4lOznYDQOM48GG\/4W91d3D1OspJvyZui89JN8NPQr3SHCZXzgWVxm8AfrD3\/MVqwk9HTe69uH54HTwdXNCz3WgqtWw2GbVCGbULkPWqXIZC0LhNstC5A7ZuIC3R\/ZYb+IPh\/XzqmquJB06EDtG\/vGtYcNw7luRtry9BVIQrBYi62YZlNwwO8G+qgchypWS4RLhzbMneX3kenH51FLgw2F80OW73uLd4G1yOYtpcfL0oikckZP1D6lbfAmjcImxeCOrDge8u\/L434irKc7aMgFlrRcBi1G5DFqNwE0GCd2jVQC0rZEAZbliQoBF+7qR7Vt9BySIQzRFWKkWKkqRyI0I08aKdyGlqJDFqhD1QhPCEysSWD93IAAVOvezkm40tawNI27g0GGDw7E2b18BXdweFqNpzf9L6XMs5JaoIx2JVe5fU6HwFX43F06f6Ke+jtwX3fyQlODfaIJ8MMt7hl53FVV6NGdPM5Jx5pjxm7i6CVFkBZBIgOqFmUMOWZdR6V5+aT7pqje2oOaWwxgUGQkngZDldWU2BswKmxAINjwIIPkaG5DaHCSOHZEZhGuZyqkhFuBmYj2RcgXPOlIQ2qEPCmINcbsYww4ed5I2TEXIWNw0iBTY51+qeVDUF9bA2KwhC9qqt2LOyIzZbnLY2IB32I8KZcgglOA9RIF7KlyzRsdwYX8riqsRFypSS5FVeOanJeB0PZ6hQw4hiPSuDjW5OMuDR5uo72YSTWISxqTRCKtuLbs35PlPkwt866OAl3o+pqw2uaPNewBtXDdph25owYeR0P4H0rXn6vERfNW+xow08lZeP4ipWrq3OybBaFyBEkgKIoRVKZruL5nzG4za203C1Js27hIgtG5DYJQuE2CULkDNm4YFizaBbfHS\/pvqqpLgGw7jF\/yj6ADS+5Rz8z\/ACqm5DIexvY2YZgBqdNLkcjpu3WoXJYnwM5Gqm5v3hvF+RHusaj1DsS7ReMozDusQR2e8tfTu23\/ANbqCbRNGDBbgGytpvFj7rjWmuAjkhB1XQjha2nIjlUuQR4nAOCSF0zEADXxtVsaqWjJYDK1dcBqVo3AalaNyGpWmuQ1tRuAxaiQwRUIeoMAzxG1TlAXQ21P8q6tXpSbpqFPTTV8fT77meNDW7FjG9co0bHtaFgmtAh6gQ9SsJvPO7nM7MzWAuxLGwAAFzwAAHpQSsQwkrAEBiAwswBIBG+x5i9BohpUsQ9RIZo2Ieo2AepiGaJDKHWo1oAu\/wBPNwY9SyKzagBdOJO43B0rjxpxcEpq+VtHC6hK+bSzdvEaYTE5xqCGG8H5jgR5Vzq1Hq5WW35uZp08r02JiaqFsL9ui8EngAw8wRatOEdqyNOF\/diK9s7VjEXZxG5a1zroN58zW3D4epUq9ZU4GvDYWefNPh+fArIWutc6xsFoXCbhKW5DcJQuE3EdC5DcR0LksG7Lju9jex1sOJG7z31VUfENhzirRWaTV96Rjd95v5+7nVSvLYNrbi6OVgQ8g7slypW1xlOU5QNQButp61Y4f8SBrNCxU5lJ3X1U2PPkf991V9rkGyD4dm6aDUcePqePypc5Mph9mNqVBU8RbunxI\/EfGpnJlI\/oV9GuCNdbbuYYDdRzgyizEbRIgCLGQWLASncwU6sh+3qL8r1ZGnrdkEhjrRcU0KUbkNClG4DQpRuSxNicBkjikzo3a57KrXdMhA\/KL9W97jyqKd21yI42SYGVp7gJcLhu0bLmRO6zXkbKvdBNr\/aNrAcTRcrAB7UxDFqhDFQhLEUytmzZrDJa1r3F81+Fr7uNqV34EIrUSB2ytjzYhssS5iNSdwA5knQVjxWMpYdXmzTh8LUrO0UWIdX01tZY78u8R78tcn\/fqd+67fnidH\/Z5W7wi2xsGfDH8ouh3MDdT68\/CujhsdRxHcephxGCqUd9hVWsyHqhDNEB6mIeokM0xD1QgdgNnNIeQ4mqp1bbblFavGmvEtmBwOgCiyjjz8fE1zq2JjT03fL7nHqVbu8txnDEFFh6nia5VWrKo7yM7be5vVZLCfpNigIzGPaaxPgoN9fM\/jW\/A071M72XubsDTvPM9l7lbwez2kSVlaMdimch3ClhcC0YPttruFdpysduxrNGgYhGLLpqyhTewv3bm2txv131LkMrHS3CSLHQuGxIsdLchKy3toBYAaX1t9Y3O80LhNhFQuSxLBdWDKbEG4NK9VZhNwmZruTqe81szW4m2lzbhcVL22IeSONWvIWEet2UDOdDl0Jtvtp4mpchCsLtYAEEjRVUvMfJB7I86RTlLuK\/jwN3+jhSipYqeS\/DeXw4eoUNmz2AOHxjACwzCYWHIBVsKjo1nyHjiOio8G\/N\/YjeDJ7cGITxPbr8TakdGuuPsaIYjoiX8ber+5j6UjAr20wB3gvmHuN6rtWjukaFhujKvck15O\/3B5YWGoYSKOA0cf6Nx9KthXv3lb2MeI6KlBZqMlJcv5fDj6fAjVQRcag1ouck1aOjcBG0dG5LG+GwZctZkXIjP+UbLmC\/VXmx4Ci5WIlcFlAJJChbm9hew8Bck28zTpikRWjchoVprgNCKa5DUiiA1IokJMPAzsFUXJNrVXVqxpxzSLKVKVSWWJbMF0bVssIGaV9S1zljQb2038hzPhXBr4+SvVbslw5vl+bHdjgoRiqaV5P5LmdB2ds2PDxiOJbKNTzY\/aY8TXma2IqVp55vU61KjGnHLEXbY22kLFd5FsxyuVS+4MVFgTvsTW3CdH1a8c9nb85mavjaFKWSUlcAm2mk8TKyhgw3obi\/C\/Kr44WdCopJ2tzD1kKsNLNHONq4TspGXhw8jur0+HqdZBM81i6PVVGgKr7GYzTAPUSGaZEPUSBuyZIxIO1W6E62vfz0+VZ8TGbh2HqU11NweR6l7wuAUlcgLhrZFUZr33WC+1XDli6rWVKz\/PgcFzm3ZrX5lwwvQHHuubs0TwdwG9wBtSrB1XqaIYCs1e1vMU9JujePwa5zhWlQb3iOcKOZUDPbxtarYYCT7zLodHT\/AJNFehMsqhhKgVhcGNbt720B9Kpl1cG04tvxf2KGqdN2cW34vT5EWP2YvZtlvc6kkkljzJPGr8NiJZsr24eBZSryzq5VhFXXvc7a1LNieieKXZ0OPbKYCxVVA\/KKrsRncgaqWGlybZhupbhEax0rYwdsrZrTzRwpbPK6ot912O8+A3+lC5Bt0q6LS7PnEMrK90Dq6ggMuo3HcQRa3lStkWoqWKhcYuvRrq0xWMhE+dIUb2M4ZmZftWG4HhzqWbFckhV0m6J4jAOEmAKt7EiXKNbeNdzDkfjSvQKaYBszZck80cES5pJDZRuFhqWY8FA1J9NTYVFqF6DbHdBcRh8SIpmUWTtWxABMMUZJByBrZpLggDfx3aUY0ZVJWfd9zYsdQwlFTpK9V8X\/AB8l9fbYZ7P219D0waLEov32AeWQ8XkZuJ5cN1b1TilaxwZTnKWeTuyx9INo7QhjglnljkEy5lUIFKXANiQBfQjWhDLdpIlSEmk5M32R03xc0iwiMSM2gAC2txJuNAOJqOEUrkTqN2T+RaNp9EUxIBliw5Nu9+TBB9408xVSqJFkqM3rexz7bPQHAmRokbsJVIuI3zKLgEHs3O6xB0tTunGavYNPGYihKykVPa\/V\/jMK5MYXFRkZicPdm+92XtA6agXqnqmkaZ4uNSV2ld722ZX8l\/Q2IIIIPIg6g1W7rcZNPVEbRUUyEMqWBPLWmTIPumPQybZy4dpXR\/pCMwyAjIVyEqb7\/bGotuOlMmKVdkpkyEMi2F6a4CwdMehWI2aIfpDRkzAlVQsSuW1w1wN1wL+NSM7gBuiHRDE7Sm7LDqLLq8jXEcY\/OYDeeCjU2PI00ppEOgSdQeIy3XGRFuRjcD9a5+VVqsyWEs3RKTZYtiVAdgzFxrHkXgrcTxPHcPPkYydSrVs1pw8fz+zu9HqlCk5X14+A56OYMpGZGFpJrO196rbuR+gOviTXn8bWzzyraOi+r9fY6mHi0s8t38lwQw2jjOyhkkC5iiFgvMgbqz0KXW1IwvuyytU6um522QNidgzNBGkTCSIqJGmV1K4idxmd73sbXygcAtfQ6MI04KMdkfPqtRym5y3ZVtobCaNrlWjbgbZSfIjRqM6cJq0kNSrTpvNB2K10hiewZ7G3dzWynn3hz361RTw6ovs7M3Txkq6SmtVxEVXFR6mIZAokJ8XhTGQCytdFfuMHADgNYkbmF9RwNSLuRogpiGwqEOz9A1TZGym2riBnlmOXDRMbDvXy25FrMxO\/KtYpQjKd0teYvVxzZranPts9Pdo4py8mLkXXRInMUa+AVD87mrVGCHHnRHrWx+EYCSQ4qLjHK13A\/Ml1YHzuKDinsEu3SnAYWbCrtbBAJFIR9IjAChXZgnaZRorhzla2+9+GvPxdDOsy3RjxeHU45luiq2rl7ao5CKljkAd7bgT8N9d2nK8bnew13BXPoWbY3\/APo1tRgd35wjze+9MXcTgEaXF+dJccunVRgM+04TbSNZJPcpQfF6id2SWxauvDCXbCSeEqE\/qMPkaEwQOdbN2f20sUV7drIsd+NmNjbxtekWrsO9C99ce1mSWHCxyvFHFGHKxMYyWN1QEqb2VVvbxHKpUnNyyQX9HV6NwFKpB1q70vZLn+fjGWy5127saWKQB54rqC3+cgzRyX4XFgSPzqtimlZ7mLExp08R2F2eCZUOpzDCLaEYJJcxyAk3voPZF9wHKstKcqlS\/BHWx+FpYTB5V3pNa8\/LwR0jrQw3aYTtFP9zKMwG6xOQ38iQa6NJ2djytVXV+RyWX2T5H5VqMzOgdZ2kWCXgIz8FQVRS3ZfV2QT0AwyYXBzbQkGpVsnPs0NrD7zj4ChUeaWUNNZY5im4zpJjJZDI2IkUk3AR2VV8FUG1qtUIpWsVOcm9xdiJ2kYu7F3OpZjdid2pprWFeox2X0gxEDAo5NuDa+40Gk9xbWd1oA9O3WeWLFqoXt1eOQAWHaREEHzKsRfwFZq8UkacNJuTTKy0VZkzZYGxEXdPkflTXJY6d143Mezf0cp9csFPcRHJnjophIHivpzIHxFOmA6t\/aMf8ALYNRqRHMbebRgUIMUc7Wxo6O7HihiA+lz3u1h\/eMMzyMOIXRQPu+NDvMhyLZnS\/HpiFl+mz3LguTIzAi+t1a6kW8KNZWpyy72LKKTmlLa503pR0mlxvY4OSJcocTtKCe9HGL2y2sLsQN+vIV56WOlPDOUu9t6v8ArU7ccFCnWSg9Hw8F4+dj164LR10zcGlCCRYBoiWwsrYdiblVs0Dn8+Bu76ix8a6eF6Xr0dJdpeO\/x+5zcV0RQrapWfh9iWbpM6Ds8XgwwtpLh2DK3i2Hk+Nmv4V6PDdK0ayve3gzgV+hK9Puq\/l9jm3TvHRPLlgDCIWIzqyNcgXGVtQo4X5mt8aiqd0zRw86S\/UVmVWnCZVSdBqToBTbEPUSHqJDIqED9i7NbEzxYdPalkWMHfbMbE+gufSkm7Ih9N9KsNgYIO2xUYfDYCMLHCVVlMhAUd06M1iqi+gzt6ZUMcwk65JBpBs7CxpwDXbT\/SFFPl5kHXRbpBhduO+DxeAgjkaNmjmiAzBhyYrmVgDcam9jpSu6IE9SsmSPaOBkUSdhKWyMAQ470bCx01aK\/wDqoPUgB1ibOjTDQ4\/BLlgxAUMN3ZFhplX6t\/ZI4EVjlhYOebhyMjwcXUzcORziDCGQrGN7sqDzchfxrS2b0rH0vLtFRjY8DplfCSSW+68aAfqs3uoicLnz5isAYZHiP+G7J+qSv4VS2Wo6F1M4a02JlI0jhUX++WJ+EYpoMWZN02xgl2LhsU5PdkBPEktnSwHE3tUfairEjpKxUurLDGTamGeTeC7KnBAqMfV+ZqmEs07R2W526uBjhsJKpV772XL++b4bC3rcxxfauIXU5SkYA42RdPea1ZkkZ8PNqlGK9F5ls6iT2OImiY3MsQc8s0baAeADms9Os51HyNHSWAVHDRqPvX19eC8vuz3Q7D9n0jlQ7lOJAtuF8rD4E++tEIxjGyMePqzq0qcnt\/Wh1D6GsyYuE2tIzjfrcqBe3DUaGrW7WZxY65l4nJcfsCRAwZDoCDlN\/hvrWmjG5PYtfWbDmiwjDhG37qGqKO7NNeVkmT9OAYdm4bDp9bsw33UTMf2stCmrzbGqPLBI5uyEbwavKLmtQJmoA12u4GGgvuGMZf14f52qjELsMuw\/7noL3hrn3OhYHmgurbt3qeGlNcljovW+M+F2a\/5rftRxn+GrG9CuO5yx46KYSDstV+8vzFMmA6v1xoG2tstTqC0YI8GxEYNFCiT+0BOzbQhj1yphgy8ru7g\/uLTRaSuyRTbsimp0XkCZpBlLDujQm+8ZuXlXNl0nGcssNludal0daN57j7oMHZHkkYm1okvwRbsQPVh7q5XSrgpqMFbi\/Nm3AKTi5T8vQtANcg6FzcGlGRuppRkJ9vTjMBfRVJPhfX5CulgYWg3z+glRnK9q4kySs\/M6eXAe6vY4Wl1dNI8ljKvWVWwKtBlD9k4xYnMh7QOqExNGwUpNplZrg3Ud7QWOo1pZRbIBMxJudSdSadEPAUSG+WhchfOpLAdrteEndEkkvqFyj4uKpqvQJ0WbaWC2ouP2bNiPo8v0x2jZiAG7MqqlcxswuhBW9+NVbBKrN1J7QB\/JzYWReBLyoSOZXsyB7zRzkLL0K6u5tnTJisZjIUihLSdnGzdmXKNHmZpAo9ljwv40rdwgHV5tZG2\/iWjP5PFNPlO7NY9op9Qrn1oXDbQZbOwxmwG2NntqcPiZni+7n7ZP2lPvpSbWKT0GwfaY\/Crw7ZW\/Uu\/8NInqO9i97Y2pl6Qxtfup2eHPlIp0\/WkHuqN9sCXZEPWJs\/s9oz2GkmSUf6lAP7StVdTRjQ2H3REjD7Jx85NswZbngAgUfFzTQ7rYJd5AeCm7fo5K2WwhlLKDvCrKjAnkcrE+tK1mp5YnRwUXQxlOVVWTV16p2ZXOp+btNrxngIpSP1bfjV8YKmlFFvSmIdVXYv6W4e+1MZK2\/tmVfCwALeelvfWPEVNcq9TodDYXsKvL\/wCfq\/ovAc9V2JttSJRxSRT6re3wp8LTss747B6bqXpZFwabHuzlt0rmH5hP60MZ\/GtXE4E5Xw8fziadFelsy7fxGEkfNFJPOiXAujLmZQG327pFtdSN1HO32WZpYaKXWLiNukXWFDhcZLhcUrWUgqzIGQqwDCzJ3l321B3VbFx52ZknSq72uiybciwuJhw\/aNZXUGIjW4ZRu3MdCKkG03YWqouKT0NemWxTiTGqsAUViBpc3sNAd+6jSla7ZK8XJpIpEmwJBudT53H4GtFzGCYjo9Na5iuPtKdPfpepdDXaAZNhTDcjH0\/lUDn5i7pLs9xg40kUoXxbWDCxH5FgDbzFZsXLLTbOp0RSjWxapvimvkB4N+0jV+JGvgw0Ye8Gua9HYvaa0e\/ExLDRTBYv3T9M+ydnPyEY98J\/lV7fZTK47s5jJFQTGIoou+n30\/eFMmKdA69ZCmOwjr7UcXaL95ZQw+K1ZcVD7pzsv\/xKHCbTwSiZotWj0zPEfaVR\/mIw3Hx4ixpxFLraUoX3LcNV6qopMrGLizoV3G1xmBUg7xmB1HjXlYt0qna4bnprqUbr0IdkYQxRBGtmuzNlvbMxLGxO\/fb0oYmoqlRyW3D0JRi4Qs9wqaYIMzGwFUwpubtEtvYnHPhz4VW1wGRnOACTuGpqKLbshrlK6UTv2cjWsWNiOIU6W91hXoMDCGaMb6Iw4uclSk0UdcmRsxbtLrkAAyEa5sxvcH2bWB47q9NrfTY8sQUwD1EhkVCGwoMhM8jMQWJJACi+tlUBQPIAAUuiCdV\/s8wD6ZiZT9TDgX8GcE\/uVRUfAJzbWZnc2JYvIbkDeSx37zru30eBCWFbCwJA5AkD3UjYwQsWa1+8Ruvc28qpnVUR4wbLT0GHZbSwbX\/xlHjZw0diOHtUIzzWaJJNXTOn7Eiybc2hFwnhV\/cEH8Rpv5WEexVOqXAX2gumkUUjeukY\/eNVw7w8tgDpDMXxmImHCctccMjZQf2RVc5ajxWhbutDDh3w043SREE+VmHwY01bgxafFA234gmwEQ\/40qkjmDIXsfCyillJxo3XE39G0I1sWlJXS1+H9gvQRu32VtSAa2Vz6vFv96fCrMPTcYa8TT0xUTxMWuGnz\/sqfUa19qp+gl9NFqxO7uYcU7xNum75cdij\/wDM3v0rD1eeq4+J6nC1FDBwl4fMx1XN\/wAVw3MmT\/pvXTaSVkcXHy\/Sd92W3APfpbN9y3uw8VVfyOVL9lFC6QY\/6Pt2aa9uzxxc+QfvfC9B7l8VmpWLD\/aBwGXFwYgezNBl8M0bf\/y6+6pMTCy0aGvWCoOzti3\/AMyD9xaZvYoik3K5p167YxEGLw\/YyvH+RYnKdCc3FTpwo53HYFLDU6y7aKFB0\/2gv+MH+\/FGfiFFOq8gy6MpvZjbCdbu0YwADEQOGVre7NYUHWT3Qq6PcdFMmk638e9gRDoQw7p3jcdDRjUV9ET\/AG+Ut5ivafSnE490fEMpyk5Qq5QCRa53km2nvpMR2qTSOx0TglQrqrKV3t8QjYR70sfiJV8n0b9ofGuen2U\/QXpSl1eJlb+Vn9\/mMJIaKZzrF220mfYOHP8Alsg9zNHWhv8ATTKl3zm0kVKmPYzsvDZsRAvOeIftrTpistPXec2PjH2cMvoTJJ\/IVY3qJHYrHRLpdidnOTEQ8TG7wt7DH7QO9H8Rv4g6WZMjR1fZe39nbaXJrDiQNEewk81INpV+XIVmxGFp1l2t+ZdQxNSi+ztyK5trZsmFcpKNN6sPZcc18fDxrzdfCzpTyNeXiegoV4VY5o\/DkUPpD0hAuq6sNABYqnC55v4bh8K6mCwDe+3F8\/BeHuZcVjYwVo6squH2tPEbpK663Nibe46Gu1PBUKi7UUciGMrQd1I6ZsfGHEYVXv32UqSNO+txw3cD614\/EUlQxDjbRP5HpqFTrKSkI8TDnRk+0pHr\/wB66kZZZKSFnHNFx5nP2iNyLHS5NhuA3nyr00JJxTPKVI5ZNEdWCE7SJ2YUIc4Ykvm0KkCy5LaWNze\/GlSd\/AOliIUwDdRSshNCouL3AuLkC5AvqQLi5twpGMdf6jowse05FJIWMKpIsSAsjAkC9j4VTMhyzBREhQBckCw9KDdkMi14HYA0BV5mJ1EauVUH7ovx9o24ab6qcmyHtowSRv3o2jZjYu8bIGK2GZbi2oIJtuIPOqJ0lJ3ZdCo4qyJNjp2eKhIYNlxEfeF7NZ11F9bUyaVhXqdwxezkw+Nm2lLIqxjDrEBxve5J8TZQAOZq1qzzMr3Viq9U8eU4vEEeyg\/icj4CqqXFjz4Ip4XMS2XLm1tcnU6nU79b1muXWLl0yxP\/AAXDz2u0eRVHNzeEA+Ga1\/Kr5LNTTEpxbq5I7t2Xmxb1mn6Ns3Z+HJuQgJPNo41UsfEmQmnnBTcY8N\/gdbopdXKtNPbRerf2AuoaXO+OhP14kP76\/JhV7ephxrvJMV9S2G7LaKX3sJl\/0qpsPgT61kU71rLgdGpQy9HSqPeTT9OH39QHrJ02liV4CS\/6yqa00qai5S5l9Crnw9OPJfM36oFz7WiP2UkPoFI\/GnkznY6V4j7YE2fpVM358q\/qRhfwqv8AkY5K1EofWOP+KY39O\/4UHuaKGsEdA6en6Z0eweK3tD2Yc+Y7Frn7wWi9UZqTy1WjfrFOXZuxr8HhPujWi+AKfekB\/wBoiP8A8zhW5wuPcw\/nQluWYTiclFKbD6Dwm2cLs7YuCnlwwlDxRKQqx3zMpbMS3jf1NPsjmZZTm0mcy6wemWGx\/ZLh8IsAQszNZA7FtMvcHs8d+p8tQnqbKFKUHdsrGDa1\/fV1r6M6VGVmWHAS5cRC3ByYj\/rF1\/aUe+uRDZx5a\/A09NU80IVVzt6Nf0WeSGomeeLdhUz7DmXjGzH3OH+RrVF3pMpffKA0LOVUXY6Ko8OAHhVSZY0FdEsJmx+GUj\/GBP8Aou38NWwd2hJbDTrAwYxe2lw4cKXWGK+\/KLM5NuJsx0q6SbYke6VDpZsFsJi5MMGzhMp7QjLcOoYd0cRe2mmlaqGFlU14FtKlKpqhVDhijK6uyupDKy90qw3EHga6UcDTW+pqWFit2djws425sqWJzlxUI9oaHtALq+n1XAII+9WDE4WEKiUldMzVISoytF6M4HicKy7xV1TDSp7bCVaMou7I8GYhIDMrtHrmWNgjnTSzEEDW3CqNeBQWvq6x\/twE6\/3i\/AMPkffXnOnMPaUaq8md3oqteLp8hptGHJIeR7w9f971mw889NfA6T0ZR9vwtFMzKSokB3Ei6toynmN4Ir0WAqKdPK+B5\/pGk4VMy2YnrfdnNPCiElhC3Ga+W4vlte3G19L2valZDYClbCSqKrlKwyOwdS6n6DtTS10H\/SkqpyuQpWwQ14o1gVDI0cfaBszhXKi+Vhqdb66C26q3qG52Xpl0vXZPZYXDQKzZM12YhVW5FzbV2JBPDib0W7ESuS7VnTamyO2kXsm0c6ZijI1myki5BF7Hk1UVqv6Mpx4FkIWmkym4HA4SJlIiMhDKczm2oINwK4zrVHJNs29XoXPp5g4p540lz6x5lyuwUNc3sN2bxIrXj6s4TVnpYzUY3i2QbOwH0LZeLOYvnLWOXvBSqxi9t9jfWr8PVboObFmrzSKOjILXZRfdqKqbLbFywQTFbJmhUhjFKtwNbEskg18nv61qpq9G35uPhZ9Xioy\/Nir9fuItNhoh9SJj+swHyWtUV2r+Bfgm+pl4sU9QuKy7SZP8zDv6lWQ\/K9KtzPi3ohlsH8htsKdAMVKno2cD5isNPSt6s9Hif1Ojb\/8AWP0F3XTB2e0ZD\/mRRuPcUP7hrpo4+Dn+h62CeoPBZsdNN9WGC1\/zpGFvgjUr3MuMlokDdWuJ7XpA0m\/O+JYeRzW+FVrcWqrUkVrrK\/8AVMZ+mPyFR7ltDuIv3Vsv0zYWOwR1KFynhmUSLp+kVjRWxmr9momR9cEmTZ+yrDVVVvdElSWwaC7bJ\/7QiBkwUw3HtAD94IwqSJhXaTRxk0puZ2brRXsthbOiO+0CkfdhJPx+dM9jDQ1qtnGaU3heGPeHjWhF9N9obzMeyzD2lAcfejIYfKuZJZazXj7nXxMOuwUl\/wBb+q\/8Oh2DqHG5gGHkwv8AjWfZ2PK7lt6Fw9phMXCfrX\/bQj+GtmH7UZRKKmkkznkkVUJlg46tYu02klhdYo5HLeNglh+vvrdSovLnYtSLyXBkn7XpB2v1Ri8gPiqmO3vFdBRzU3ySGjBuk34EfWnFbaUp+0kTemTL\/Ca2YR\/pL1NOF\/aRTZmt4kmwA3kncBWidWNOOaRbUqKEbsv3UdK5xmIW1gIVzAggg59Lg8farnYrERqxSRz69ZVEjne3ZVM06gaCeUDlYO1dBVM1NJrgjR1qlTSsIMRHaufXp5XdGOpG2pnZuMaCVJF3qb25jiD4EXHrWLE0FXpODDhqrpVFJHUZETExq6MLEZlbwO8H+t4rxsJSw9RxkvNHqk1UimhB0iwGHEREs6gjVQozPm5AA7j7q6WDxFZ1F1cH9DLi40nTamyg5F5\/OvS56v8AxPP5KX\/IiFaDOSKKRhJVFVylYIfBEF8+J\/rcKz3CdY6oHDYXaUajUxA879yQVERlV6IzpJisLY754dDv9taUli2db4ttKOQrnCQR5k+0meQ+pG+3HdxquvFyi0nZjU3Z3Y96M7WEux8dIobuCY98byIw17Lc2+NUUcO1RcJPctqVE6ikihx4h5AGMt1OoEXcX9bVviKaGEpR4X8xJYio\/A6R1hYDtZMOyHLKImMbXb2lKHKVGhBzWq6tCMlZlcZuLTQ2WcnZ8BIytIEYryJBcj31zsVDqsLGHj\/Zog81Rsp+N2SIyZIlGU6ugAuPz0\/FfdWGM8ytLfh\/Zpi7BHUttISyY8cHmEi+Ki8W7yRa7eH7KyPgkJiKNqEKy\/k5fK1vqUzrvxGfaLD7Eca+ti\/8QrVF3ua8NDLh0+evuvoAdTBy7ThkO4l4h6xsT8ctZnO1SMR\/9Pnwtaq+FkvRpv7DPrElbDbUkdd6zRzgc7BW+JBo06f6spcjbSmqmAhT53XwH3Xps\/toMNj4u8gGViNbJJ3kY8he482FaNjh4WeRuEiboRhm2VsPE4uUZJZlZ0VhZhcdnED5k5rcmpfEqqS6yrZFH6lP\/VYfuSfuGljuX4lWgLus9bbVxn6W\/vVTUe4+H7hZeoPafZ46SA7p4jb78fet+qX91GO5Vio6Jjb+0RIAcHELABZTYcAMiipMXCq7YbtfBttfo9A8QLzYcKco1YtEGjdLcSVOYDj3aO6Ei+rq6nJ+jHR6bG4lMOkbG7gSGxAjS\/eZz9Wwv66Um5rqVEo3Ohf2gNor2uFwqHSGNnYeL5VW\/ojfrU0jPhVuzktKbieBtx8aui9CyD2H2D1W3iR6Gufi1apfwPQYPWnZ8\/cu3RB8+CivvTNEf\/rYqP2QtZ63fdjyLhkbg+Da+DLh0MxXZYnKd0oyf6hqv4j1q3DTtO3MpqxvErHT3Z7Yed0sVjcl1fcCpJORTzG4+FudbaGFvNylsh6KzrX1H3VtgvouHnx8wyKUtGDoezXW4H5zEAc7Ctk5Z2ooStLrJKKOe4bFNHKk29llEpHMhs5HrrW9JZcq8joZVlyryLz1qbMMwhx0ILxtGFcqL2XVlYgfV7zAnhpVGEnlvBmTCyy3g9yi7FwrMe0RSzljFAFFzn+u624i4UHhc1ViqmepbgjLjamaeVbI6dsjA\/8Ag+z5ZpSPpM1u7e\/fsQkYPG1yxPnWfdme2VHHMRs8G5I1OpZeZ1JPrVkbx20EU5LZivGbPa2neA9\/u41bKtKUbS1LuvurSE8i1WmQiZjzNHq4N3aG6ya0TIjVkUlshHJvcxT3AbLSshIoquT0CdBgwMcNoxHEDGi9rI8ayM0jAE2z3AFzYAcqWyMzk2bnHLuEMJ8Wijv7gulCyIk+ZYuhHSlcLM2bDpkkTK3YoqNpqCdwYakW8aRq5ZF5SzJ0z2dEjTR4Ajs3VLrHApBbQMDfde1I1YsU7uxTumO3Vx2JEyoyARqlmIJupY300+t8Kqk7liC+hfSyHZ8c0M0LyRztnATIRcqFdGDEaEAHjvaopJBtcep072YL22eQLi\/5OAWvpc97dU6xcgZGHbR26uMMbRxuhjzKC2U3LZT3bX3ZR76E2mI91YZbT2yssgw6qwMSKxJtZg2ndseFq5vSE80YpGujGzZDENR51y2XnLurXpAMBL2sisyssqOEtmv2hI0JA3iu71qhVb4WX0OxTwbxPR0IRavdv5sVdNcd9KnmxIBAdiwB1YKAAoNvAAVbQrJyknx1RfWwro4aK3yrX39zbo1P9FkgktcxOrsBxN7sB7zWWVS9TP4muGEthOoe7jr5vV\/MK6wNvR47GNPErKuRUs9s11vc90kW1HHhXUp6rNzORQoSoR6uTvZ8Nhn0E60voUJw+JjaaEE9mUyl0B1yENYMt9RrcX5WtJaHNxNDPLPEW9ZfWK208sUSNFh0OezEZ3e1gWy3AAubC5335WrbuLRoZNWJer\/b6YDGx4mRGdVVwVS2bvKRpmIHxqJ2LK0HONkRdNdrJjcdPiY1ZElKkK9swsirrYkb1v60A0ouMbMh6M7ROExUOJAJ7KQMQN5XcwHmpNQNSOaNiw9Z3SuPac8UkUbokcRS0mXMWLEk2UkWtbjRbuVUKTgtQfoH0yn2ZISo7SF\/7yIm1zp31a3dcDTkePC0TsNVpKa8To+M67MKI2MWFmMpGgfs1TNzZlYkj0o5jMsLLiziu2NoS4maSeZs0kjZmO4cgAOAAsAOQpTbCKirIBqDEkZ0q2Gw8dh9gG0PoayY1axZ3sC7xfoXHoFJdcRH9iYMPKRAfmprHU2i\/D2OBj45cVUXin8Uh3tOYxrddGJsvg32vTfRoU3OaRktfQcYXrCjEYTFwNKy27yhCGI+sVYgK3l8K7MkolNShlfZYm6Y9LmxqiNEMcIIYqxGZyN2a2gA5a61oowtqzRQoZNXuVF1rSmaSxdFOmk2CHZle1huTkJsyk6nI3I8jp5UtSiqmuzKKtBVNdmXLYvTzCyqexw+SUEgxXRX1PtDL7SnmK5sk4ycWcupeDaa1Eu3ZDipM04uVuFXvAIDvAW+\/md9MmZpSfER4vYSnWM5TyNyvv3j40yYMwikwJEiowytmX3EjXxHjTh4FGx7BpHYbi7EeRYmlRojsBsKsQSFhToUxRIbqKVhCcIBnW+7ML+Vxeq5bEex0HbkJGIlW4A7QsAWANjYgkeVTgZlYGTC83Uet6DDcmEqoLJqTvY\/hShtfcawYJhs7Eu1wDYrfjYaH3iqpPgOlrcTqKpNBjExXQ8x3h5ilYUaYfeDwO\/xBpbjls2DjpAghijzSJudjZBGbFWsNS28eNqqqVo012gRpZndFi2XgGQtJI5eV7Zm3AAfVAG4a1yq9d1X4GqMFHYZLVAxyfpRss4bFSLa0crNLCeBDd50+8rE6ciDXShLPBS4rR\/Q7nRGJjl6h7q7Xin9UxJi9Sifaa5+6nePxyj1qyGl5fl2dHEdpwp83d+UdX87L1J3awJ5UIRzSUeZfOWVOQplawJ\/rWu3scKbsmxbIapnuYZHlS9IKTpFUATrDUISLDUAb9jUIYMNQhq0NQhE8NQIO8VQhGq2p4DxHWy209PlVGMXZT8TtdHy1a8PqWzoG9sVMn24Fb1je3yesM\/214P3Od0vG2IUucfZj3bOsgH2V+Lb\/kK2YBbs59NaiV4rseQP\/YVsXamRLNMxItbEy4HdasTIQOtWJhB3TUHUEbiCQwPMEaijKnCou0hJ04zVpIbYPpRPHZZQMQg+33ZAPCQDX1rJPBSWsHf8+HsYauCf8XfwY4wvSLByf4phbTuTCw\/\/AGDQ1malHSSOfOi4vVNAnSnExpD2odSym0eVgxYtcW04fW9Ka+hXGLvY5phME0siRJbM5CLmYKt\/FjoKCdkayDsGZhCqAydoVBB1Ymyhbk5bXBIPjvp721ZLX0ApFIJB3gkHzGlWJisjtTAJEFKwkyjd5gfGqpvQJY4Nrz6AlZbaASoJCAOAbRretV5mJ1aD4dqNxwkTeRkT+KhnJ1fiG4bbDLuweHB4MxdiPK5pXMPV+JJjdpzzi0rjL9iMZEPnxO4aUjYygkRqKRlhOi0rCgWKO1xyJH9elIOPthYns5Y34f3b\/dbQE+TZT76zYiGemxoOzL8BXJNBIoqBBtqbKhxMZinQOl7i+9W3ZkYaq2p1FPTqSpu8WBq5yDbOy0w+MmijkkkWJUQGTKWDMM7LmAGa11F66fWZqadkr66fI7fRMqlWUp1JN5eyr+Or+gDjG7tuZ+WtX4SN6l+R0cZK1O3MV4s6Acz8q6Zxqr0sBqlzWdu7MbeoVHFQAExxUABKQ0SEyweFSzAbdhUsQ8YahLkbQ0CELw0Qg8kVQgMY9aaD1Gi9Q7ZosR6j8aTFL9L1Ov0fLtL1LN0Pa2Oi\/OjmT4K\/8Nc\/em15fYr6aj+3LzXsy37agswf6pGUnkRuJ8DersHVUXlZx4SsxOqaeZJro0tr8x4LS5DItaExwaRatTIDutWJhB3FWpkIXFWIgrxOrGq5O8jJUd5ME7Mb7b\/lXLqyTm7GSW4NMtBMQFkWrEAhCCxu1rC4FicxuNBbdoSbnlTpikNqYgRDEWvYXspY6gaC1zrv3jQa0jITQpcqPzhVU9hhvs8d\/wBDVRGNVFAhKgpWEmQUrCTIKVhCI1pGMRMnfb0Pw\/2pGMg3Cx3up3EUtxi+7HxBkhRzvtZvvL3T8RXHqxyzaL46oYKKQY2eRUUuxsqqWY8lUEk+4Gok27IVuyOFCcylpW9qZ3mN\/wD5GLAegsPSutPR5Vw0+B6no2l1WGinu9fjr7AmNbvW5D51vwcbQvzZXjJXmlyQuxGp8hWmT0OVWlqeijqgzBsUVQAdh4KaMeIUrh6YQ8qsGyMmXCHlUJlkb\/RDyqAyyPHCHlQJlkQvhDyqWRMj5A0uGpcqBYBlhpGrCgkkdRbhQRgl1Hn+FNXV6bOngpWmvMc7COXG4U\/\/ADhf10dPmRXNjtJeBf0xG9CL5SXzTR1Flqho8\/cqYTuiu1SfZRfDuogkWtCYwJOQN9WZ0twOSW4E8w5fKmjVQnWojOorRCVyxNNXBcS1h4mnlKyFqSyoWSLw56VnnPLFsxvRGsqVzEyhgUy1YhWCSCrUKwZxToDI6a4CWJbkDTUgXO4X0uTwFKwh80PZSFSyNkcDMjZkPircRrVM9grYY7OHe9P5VWQaKKUhKgpWFE6ClYSdBSsZBEYpGEysOZ28Av40jHQdBEFBJPmfCkYS47Aw5SFQwsWLOQd4zG4Hna1cuvJSm2i+KshooqoJX+sPFdngJRxmywD\/AOw2b9gNWjCxvUT5a\/AanT62pGnzaX3+RyqtZ7QXSG7E+NdmlHLBLwOLVlmm2CkX9TUm9Dm1HfUJhjqkqD4IqZK4Bxg8Px91Wl0FxG0ODFtaySru\/ZN0aCt2glMGORodfMnUwN\/oa\/0anXTB1MDBwa\/0anXzB1MCKTBDxo\/6iXIPUR5gmJwlhzFW06yk7FdSjlV9xJjMPY081xMU1Zi2aOkFNsMuvqKtmrwfkbsNK0k\/FB6d2WBvs4mBvdKlcqG\/o\/Y6PSivhZeDT+aOuutieNUs8yiqzx5XdeTG3kdR866mHleCNFN6Asq1qTHF+KFtbepou29iuemthfMt+A8xpUtcpeoNnI\/lV1OoyRm4gsxvqasvfUDberNI4tSeWnqf9vnWTFz\/AIIrnyIplrMipgMy1ahQKUVYhWCyCrEKR0wCeNNL3G+1r6+ZHL+RpGEngS58B8T\/ALVTJ3dhh1s6L63oPEUgBgtBkJkFKMbvJl\/lSMKDIqVhCYxSMZBezMHJK7hMmhXRiV4cLA1nq1lB6lsYNq6LLszYQUhpWDkahQLIDzN\/aNYquJclaOhZGFtx8orMOSKKgCg9a+J72Fh\/SznzAEa\/vvWzCrsyl5L6m\/ouGbFJ8k39PqUVzYHyrTBXkl4npZu0W\/Bi3cCa7bOBN2iaItU1NzDIOgSqxGNcFBf+uFWxQ0Fce4KC5vyqqvOysuJuoRu7vgMbWF7XO4AbyToAPEmwrNGN3YsrVlTg5vgXnZXQuFUU4gNLIRdgXYICd6qqkCw3a1qUUtEjzs61SbvKTGI6MYIf+2i\/Vv8AOiVHn6M4M\/8AtYv1APlUuyWFe0ehkJUmDNC9jlAYtGTwDI19L8rUrSe5dTr1Kfdl9vgUcoSCGFmBKsp3qw0IPrWaScJHoKFZVqalz3E2Pw+\/w+VboyzRuZKsLaCOeOq2ZiKJflVy1RqovUJx+iFvs2b9UhvwrlU120js43XDVP8AE67j51RS7bhqbak33WHrSKLbsjypWcfi1dw6qyi1mLW15GwrbRpzpd7YuheLu9iCQVrTLgSZKsWoGrqwrxEdqFrGeUWmAzLR13QjI0izezqefBRzPj4U1SvGnG\/ELaSvx9iR4gosP+55+dc1ycndlDAZ1qxCsAmFWIVgUoq1CsEkFWIBDamATR0rCF4Td\/qNZ2EfYT2F8qAAlaBCZKQYjxHtDypGMhhhPZFKENjpWFDro3\/eP96L5NXPxnA0UtmW9axMckWgElWoA5l1o\/8AOQ\/\/AIx\/6lbsN+0\/P6HU6H\/fn\/j9UVCb2T5GtVH9yPmd6t+3LyYufd6\/zrrnArd02TfVM9zHLcPgpRBzgOPlVq2LaY+wO71rLX7\/AKG6h3PUa7N\/v8P+nT50KPeMnSP7PqjqgrQcQzQIamoyGjUAnL9tf83iv038K1TW3R2OjP235\/QRbQ4+VW4fuepoxPe9Cu4mmluc8Hj\/AANWQNFEl2t\/cyfo2+VcyHfXmdzFf\/lqf4v2Oobe\/wCXHnH81pqP7qPKx3EDbj5GupV7rNU9meG4VXHgMtgeWrkEAxu71ppbFVTYWy1I7lBnZ++T0\/GsWL7yKw3G\/wDLp+kf5LVC3FYinq1CMAmq2IoDNVqFYHJViAQ0xD\/\/2Q==\" width=\"700\" height=\"500\"><\/center>\n<\/div>\n    \n \n\n","822ad6f2":"\n<h2 style='font-family: \"Times New Roman\"'> First let's get merge the dataset <\/h2>","c0e8be8a":"<h1> HOW LONG DOES THE GAME LAST YOU ASK? <\/h1>","53240eaf":"<h1 style='font-family: \"Times New Roman\"'> Okay so if you are new to the game and see that the first few matches you are just a crewmate- dont worry. Thats how the game is supposed to be. Since there are 7 crewmate and 2 imposters in a match generally, the chances of you being an imposter are really really less\n <\/h1>"}}