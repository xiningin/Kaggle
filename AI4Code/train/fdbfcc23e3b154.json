{"cell_type":{"b21f0b52":"code","15c8eaa2":"code","390d57e6":"code","4bebf7bc":"code","d45391f6":"code","62ae686d":"code","8fecdf0d":"code","acea8455":"code","ebc24245":"code","9db0e665":"code","a6a81ca9":"code","9b60ee65":"code","06f012d0":"code","5f105a90":"code","a79ce56f":"code","c6551380":"code","7ba41b4b":"code","6a51c5c8":"code","c145e04d":"code","f33ba3fc":"markdown","53066751":"markdown","35980c84":"markdown","587e2483":"markdown","07101e8a":"markdown"},"source":{"b21f0b52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","15c8eaa2":"!pip install missingno","390d57e6":"import missingno as msno\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize']=[20,8]\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\nplt.style.use(\"ggplot\")","4bebf7bc":"df=pd.read_csv('..\/input\/microsoft-stock-data\/MSFT.csv')\ndf.sample(2)","d45391f6":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","62ae686d":"msno.bar(df)","8fecdf0d":"msno.matrix(df)","acea8455":"df.isnull().count().plot.bar()","ebc24245":"df2=df[['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume']]\nsns.heatmap(df2.corr(),annot=True,cmap='cubehelix_r')","9db0e665":"df.info()","a6a81ca9":"df.describe().style.background_gradient(cmap = 'copper')","9b60ee65":"df.describe(include=object).style.background_gradient(cmap = 'copper')","06f012d0":"# print(df.duplicated().sum())\n# df.drop_duplicates(keep='last', inplace=True)\n\ndef date_column_preprocessing():\n    \n    print('duplicated date found : ',df.duplicated(subset=['Date']).sum())\n    df.drop_duplicates(subset=['Date'],keep='first', inplace=True)\n    \n    ##\n    df.sort_values(by='Date', ascending=True, inplace=True)\n    \n    # changing Date column dtype \n    df[\"Date\"] = pd.to_datetime(df[\"Date\"], yearfirst=True)\n    \n    # years column creating\n    df[\"Year\"] = pd.DatetimeIndex(df[\"Date\"]).year\n    \n    # month column creating\n    df[\"Month\"] = df[\"Date\"].dt.month_name()\n\ndate_column_preprocessing()","5f105a90":"##\ndf['Close_Percentage_change(Return)']=df.Close.pct_change(periods=1) * 100\ndf['Close_difference(Return)']=df.Close.diff(periods=1)\n\n##\nvalues = {\"Close_Percentage_change(Return)\": 0, \"Close_difference(Return)\": 0}\ndf.fillna(value=values, inplace=True)\n\n##\ndf.sample(2)","a79ce56f":"display(df.head())\ndf1=df.head()\ndisplay(df1.shift(periods=-2, axis=0))","c6551380":"# time series\ndates = df[\"Date\"]\nyears = df[\"Year\"]\nmonths = df[\"Month\"]\n\n# numeric info\nlow = df[\"Low\"]\nhigh = df[\"High\"]\nvolume = df[\"Volume\"]\nadj_close = df[\"Adj Close\"]\nclose = df[\"Close\"]\nopen_ = df[\"Open\"]","7ba41b4b":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x = dates, y = open_,\n                         name = \"Open Price\",\n                         line = dict(color = \"DeepPink\", width = 2)))\nfig.add_trace(go.Scatter(x = dates, y = close,\n                         name = \"Close Price\",\n                         line = dict(color = \"green\", width = 2)))\nfig.add_trace(go.Scatter(x = dates, y = adj_close,\n                         name = \"Adj Close Price\",\n                         line = dict(color = \"DarkSlateBlue\", width = 2)))\n\nfig.update_layout(title = \"Open, Close and Adj Close Prices\", legend_title = \"Legend\",\n                  xaxis_title = \"Date\", yaxis_title = \"Price $\")\n\nfig.show()","6a51c5c8":"# Z-score method\n\nhigh_allow=df['Close_Percentage_change(Return)'].mean() + 5*df['Close_Percentage_change(Return)'].std()\nlow_allow=df['Close_Percentage_change(Return)'].mean() - 5*df['Close_Percentage_change(Return)'].std()\nprint(\"Highest allowed\",high_allow)\nprint(\"Lowest allowed\",low_allow)\n\n##Finding the Outliers\noutlier=df[(df['Close_Percentage_change(Return)'] > high_allow) | (df['Close_Percentage_change(Return)'] < low_allow)]\nprint('outlier.shape',outlier.shape)\n\n##Trimming of Outliers\nnew_df = df[(df['Close_Percentage_change(Return)'] < high_allow) & (df['Close_Percentage_change(Return)'] > low_allow)]\nprint('new_df.shape',new_df.shape)","c145e04d":"#Percentile Method\n\nprint('df.shape',df.shape)\n#Finding upper and lower limit\nupper_limit = df['Close_difference(Return)'].quantile(0.99)\nlower_limit = df['Close_difference(Return)'].quantile(0.01)\n\nprint('upper_limit',upper_limit)\nprint('lower_limit',lower_limit)\n\n#Apply trimming\nnew_df1 = df[(df['Close_difference(Return)'] <= upper_limit) & (df['Close_difference(Return)'] >= lower_limit)]\nprint('new_df.shape',new_df1.shape)","f33ba3fc":"# Data Processing ","53066751":"# Outlier's","35980c84":"# Cleaning","587e2483":"# Reference\n\nhttps:\/\/medium.com\/coinmonks\/machine-learning-tutorial-1-preprocessing-d90198e37577\n\nhttps:\/\/www.kaggle.com\/artemborzenko\/eda-and-prediction-of-microsoft-stocks\n\nhttps:\/\/www.kaggle.com\/mohamedbakrey\/eda-for-microsoft-stock-data-using-ml-algo-acc100","07101e8a":"https:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.drop_duplicates.html\n\nhttps:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.duplicated.html\n\nhttps:\/\/towardsdatascience.com\/finding-and-removing-duplicate-rows-in-pandas-dataframe-c6117668631f\n\nhttps:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.pct_change.html\n\nhttps:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.diff.html\n\nhttps:\/\/pandas.pydata.org\/docs\/reference\/api\/pandas.DataFrame.fillna.html\n\nhttps:\/\/www.w3resource.com\/pandas\/dataframe\/dataframe-shift.php"}}