{"cell_type":{"85ec68aa":"code","9a1a04c0":"code","c505d5c2":"code","05187286":"code","d5dba96a":"code","091201a3":"code","2182d950":"code","9548b796":"code","0096f634":"code","5d65da54":"code","eddffa10":"code","72b42e0e":"code","ef45bd3d":"code","5147aa4e":"code","a1fdde72":"code","1968cb1f":"code","2104957f":"code","4ef99c1a":"code","82082d68":"code","03396a5b":"code","c21ccd3d":"code","91314720":"code","2a100ea0":"code","9364d8f3":"code","87fd51dc":"code","8989adba":"code","ecff760f":"code","2d49b1ed":"code","b61551aa":"code","890918d7":"code","1af2204c":"code","c4ecbe23":"code","608b9bf4":"code","b0cf854f":"code","a691ed27":"code","f9269bb7":"markdown","9002aca2":"markdown"},"source":{"85ec68aa":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom scipy.stats import norm\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nfrom scipy.cluster.hierarchy import dendrogram\nimport warnings\n\nwarnings.filterwarnings('ignore')\n%matplotlib inline","9a1a04c0":"data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\n# data.columns","c505d5c2":"data[['Street', 'ExterQual', 'BedroomAbvGr', 'GarageArea', 'OverallCond']].head()","05187286":"qualitative_description_vars = [\n    'MSSubClass', 'MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour',\n    'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n    'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd',\n    'MasVnrType', 'Foundation', 'Heating', 'CentralAir', 'Electrical', 'Functional',\n    'GarageType', 'PavedDrive', 'SaleCondition', 'Fence', 'BsmtExposure', 'GarageFinish',\n    'SaleType'\n]\n\nqualitative_ranking_vars = [\n    'ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC',\n    'KitchenQual', 'FireplaceQu', 'GarageQual', 'GarageCond', 'PoolQC',\n]\n\nquantitative_attribute_vars = [\n    'LotFrontage', 'LotArea', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea',\n    'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea',\n    'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr',\n    'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars',\n    'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch',\n    'PoolArea', 'MoSold', 'YrSold', 'GarageArea'\n]\n\nquantitative_ranking_vars = [\n    'OverallQual', 'OverallCond'\n]\n\nother_vars = ['SalePrice', 'Id', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2', 'BsmtFinSF2', 'MiscFeature', 'MiscVal']","d5dba96a":"# for var in all_vars:\n#     if var not in data.columns:\n#         print(var)\n        \n# for var in data.columns:\n#     if var not in all_vars:\n#         print(var)\n\nall_vars = qualitative_description_vars + qualitative_ranking_vars + quantitative_attribute_vars + quantitative_ranking_vars + other_vars\nset(all_vars) == set(data.columns)","091201a3":"pd.set_option('display.max_columns', None)\ndata.head()","2182d950":"score_dict = {\"Ex\": 5, \"Gd\": 4, \"TA\": 3, \"Fa\": 2, \"Po\": 1, \"NA\": 0}\nqualitative_ranking_score_vars = []\nfor var in qualitative_ranking_vars:\n    data[var].fillna(\"NA\", inplace=True)\n    data[var + \"_score\"] = data[var].apply(lambda s: score_dict[s])\n    qualitative_ranking_score_vars.append(var + \"_score\")","9548b796":"df_list = []\nfor var in qualitative_description_vars:\n    df_list.append(pd.get_dummies(data[var], prefix=var))\ndf_dummies = pd.concat(df_list, axis=1)\ndummy_vars = list(df_dummies.columns)\n\ndata = pd.concat([data, df_dummies], axis=1)","0096f634":"data","5d65da54":"data[quantitative_attribute_vars].describe()","eddffa10":"f, ax = plt.subplots(5, 6, figsize=(30, 25))\nfor i, var in enumerate(quantitative_attribute_vars):\n    g = sns.distplot(data[var], ax=ax[i\/\/6, i%6])\n    g.set(ylabel=None)\n    g.set(xlabel=None)\n    g.set(title=var)","72b42e0e":"f, ax = plt.subplots(5, 6, figsize=(30, 25))\nfor i, var in enumerate(quantitative_attribute_vars):\n    bins = None\n    if len(data[var].unique()) < 20:\n        bins = np.arange(data[var].min(), data[var].max() + 1)\n    g = sns.distplot(data[var], ax=ax[i\/\/6, i%6], bins=bins)\n    g.set(ylabel=None)\n    g.set(xlabel=None)\n    g.set(yticks=[])\n    g.set(title=var)","ef45bd3d":"f, ax = plt.subplots(6, 6, figsize=(36, 20))\nfor i, var in enumerate(qualitative_description_vars):\n    g = sns.barplot(data=pd.DataFrame(data[var].value_counts()).reset_index(), x=\"index\", y=var, ax=ax[i\/\/6, i%6], color=\"tab:blue\")\n    g.set(xlabel=None)\n    g.set(title=var)","5147aa4e":"f, ax = plt.subplots(1, 3, figsize=(25, 8))\nfor i, var in enumerate(['Neighborhood', 'Exterior1st', 'Exterior2nd']):\n    g = sns.barplot(data=pd.DataFrame(data[var].value_counts()).reset_index(), y=\"index\", x=var, ax=ax[i%3], color=\"tab:blue\")\n    g.set(xlabel=None)\n    g.set(title=var)","a1fdde72":"plt.figure(figsize=(10,10))\nlabels = data[\"HouseStyle\"].unique()\nsizes = data[\"HouseStyle\"].value_counts().values\nparcent = 100.*sizes\/sizes.sum()\nlabels = ['{0} - {1:1.1f} %'.format(i,j) for i,j in zip(labels, parcent)]\n\npatches, texts= plt.pie(sizes, shadow=False,startangle=90)\nplt.legend(patches, labels, loc=\"best\")\nplt.title(\"House Style\", fontsize=30)\nplt.show()","1968cb1f":"pair_plot_cols = ['GrLivArea', '1stFlrSF', '2ndFlrSF', 'TotalBsmtSF', 'GarageArea']\nsns.pairplot(data[pair_plot_cols], size = 2.5, diag_kind=\"kde\")\nplt.show()","2104957f":"# plt.subplots(figsize = (10,10))\nplt.figure(figsize=(10,10))\npair_corrmat = data[pair_plot_cols].corr()\nsns.set(font_scale=1.25)\nhm = sns.heatmap(pair_corrmat, cbar=True, annot=True, square=True,cmap='coolwarm', fmt='.2f', annot_kws={'size': 10}, yticklabels=pair_plot_cols, xticklabels=pair_plot_cols, vmin=-1, vmax=1)\nplt.show()","4ef99c1a":"keyword = 'SalePrice'","82082d68":"fig, ax = plt.subplots(1, 3, figsize = (30,20))\n\ncorr_cols = quantitative_attribute_vars + [keyword]\n\ncorrmat = data[corr_cols].corr()[keyword].to_frame(name=\"corr\")\n\nsns.set(font_scale=1.25)\nhm = sns.heatmap(corrmat, annot=True, square=True,cmap='coolwarm', fmt='.2f', annot_kws={'size': 10}, vmin=-1, vmax=1, ax=ax[0], cbar=False)\nhm = sns.heatmap(corrmat.sort_values(by=\"corr\", ascending=False), annot=True, square=True,cmap = 'coolwarm', fmt='.2f', annot_kws={'size': 10}, vmin=-1, vmax=1, ax=ax[1], cbar=False)\n\ncorrmat[\"abs_corr\"] = corrmat[\"corr\"].abs()\ncorrmat = corrmat.sort_values(by=\"abs_corr\", ascending=False)\n\nhm = sns.heatmap(corrmat[\"corr\"].to_frame(), cbar=True, annot=True, square=True,cmap = 'coolwarm', fmt='.2f', annot_kws={'size': 10}, vmin=-1, vmax=1, ax=ax[2])\n\nplt.show()","03396a5b":"plt.figure(figsize = (30,20))\n\ncorrmat = data[qualitative_ranking_score_vars + [\"SalePrice\"]].corr()[\"SalePrice\"].sort_values(ascending=False).to_frame()\n\nsns.set(font_scale=1.25)\nhm = sns.heatmap(corrmat, cbar=True, annot=True, square=True,cmap = 'coolwarm', fmt='.2f', annot_kws={'size': 10}, vmin=-1, vmax=1)\nplt.show()","c21ccd3d":"plt.figure(figsize = (30,20))\n\nsns.set(font_scale=1.25)\n\ncorrmat = data[dummy_vars + [keyword]].corr()[keyword].to_frame(name=\"corr\")\ncorrmat[\"abs_corr\"] = corrmat[\"corr\"].abs()\ncorrmat = corrmat.sort_values(by=\"abs_corr\", ascending=False)\nhm = sns.heatmap(corrmat[\"corr\"][:20].to_frame(), cbar=True, annot=True, square=True,cmap = 'coolwarm', fmt='.2f', annot_kws={'size': 10}, vmin=-1, vmax=1)\nplt.show()","91314720":"corrmat = data[quantitative_ranking_vars + quantitative_attribute_vars + qualitative_ranking_score_vars + dummy_vars + [keyword]].corr()[keyword].to_frame(name=\"corr\")\ncorrmat[\"abs_corr\"] = corrmat[\"corr\"].abs()\ncorrmat = corrmat.sort_values(by=\"abs_corr\", ascending=False)\nimportant_factors = list(corrmat[corrmat[\"abs_corr\"] > 0.5].index)\nprint(corrmat[corrmat[\"abs_corr\"] > 0.5])","2a100ea0":"important_factors.remove(\"SalePrice\")","9364d8f3":"plt.figure(figsize = (10,10))\ncorrmat = data[important_factors].corr()\nsns.set(font_scale=1.25)\nhm = sns.heatmap(corrmat, cbar=True, annot=True, square=True,cmap = 'coolwarm', fmt='.2f', annot_kws={'size': 10}, yticklabels=important_factors, xticklabels=important_factors, vmin=-1, vmax=1)\nplt.show()","87fd51dc":"g = sns.clustermap(data[important_factors], row_cluster=False, metric=\"correlation\", yticklabels=False)\nplt.show()","8989adba":"# sns.clustermap(data[important_factors], row_cluster=False, metric=\"correlation\", standard_scale=1, yticklabels=False)\n# plt.show()","ecff760f":"dgram = g.dendrogram_col.dendrogram\ncols = [important_factors[int(x)] for x in dgram['ivl']]\n\nfig = plt.figure(figsize=(27, 10))\ndn = dendrogram(g.dendrogram_col.linkage) \nlocs, labels = plt.xticks()\nplt.xticks(locs, cols)\nplt.grid(False)\nplt.show()","2d49b1ed":"corr_pairs = []\n\nfor rowIndex, row in corrmat.iterrows(): \n    for columnIndex, value in row.items():\n        if rowIndex < columnIndex:\n            corr_pairs.append([rowIndex, columnIndex, value])\n\npd.set_option('display.max_rows', None)\ncorr_pair_df = pd.DataFrame(corr_pairs, columns = [\"factor_1\", \"factor_2\", \"correlation\"]).sort_values(by=\"correlation\", ascending=False)\n# corr_pair_df","b61551aa":"corr_pair_df","890918d7":"corr_nearest_pairs = []\ncol_dict = {}\n\nfor ix, row in corr_pair_df.iterrows():\n    if (row[0] not in col_dict) or (row[1] not in col_dict):\n            corr_nearest_pairs.append(row)\n            if row[0] not in col_dict:\n                col_dict[row[0]] = row[1]\n            if row[1] not in col_dict:\n                col_dict[row[1]] = row[0]\n                \ncorr_nearest_pair_df = pd.DataFrame(corr_nearest_pairs, columns = [\"factor_1\", \"factor_2\", \"correlation\"]).sort_values(by=\"correlation\", ascending=False)\ncorr_nearest_pair_df","1af2204c":"f, ax = plt.subplots(1, 2, figsize=(10, 5), sharey=True, sharex=True,)\n\ndf_old = data[data[\"YearBuilt\"] < 2000]\ndf_old[\"OverallQual\"].hist(ax=ax[0])\nax[0].set(title=\"Houses built before 2000\")\nax[0].set_xlabel(\"OverallQual\")\n\ndf_new = data[data[\"YearBuilt\"] >= 2000]\ndf_new[\"OverallQual\"].hist(ax=ax[1])\nax[1].set(title=\"Houses built after 2000\")\nax[1].set_xlabel(\"OverallQual\")","c4ecbe23":"# bins=np.arange(data.min(), data.max() + 1)","608b9bf4":"f, ax = plt.subplots(1, 2, figsize=(10, 5), sharey=True, sharex=True)\n\ndf_old = data[data[\"YearBuilt\"] < 2000]\ndf_old[\"OverallQual\"].hist(ax=ax[0], bins=np.arange(df_old[\"OverallQual\"].min(), df_old[\"OverallQual\"].max() + 1))\nax[0].set(title=\"Houses built before 2000\")\nax[0].set_xlabel(\"OverallQual\")\n\ndf_new = data[data[\"YearBuilt\"] >= 2000]\ndf_new[\"OverallQual\"].hist(ax=ax[1], bins=np.arange(df_new[\"OverallQual\"].min(), df_new[\"OverallQual\"].max() + 1))\nax[1].set(title=\"Houses built after 2000\")\nax[1].set_xlabel(\"OverallQual\")\nplt.show()","b0cf854f":"plt.title(f'SalePrice, Skew: {stats.skew(data.SalePrice):.3f}')\nsns.distplot(data.SalePrice)\nplt.axvline(data.SalePrice.mode().to_numpy(), linestyle='--', color='green', label='mode')\nplt.axvline(data.SalePrice.median(), linestyle='--', color='blue', label='median')\nplt.axvline(data.SalePrice.mean(), linestyle='--', color='red', label='mean')\nplt.grid(alpha = 0.3)\nplt.legend()\nplt.show()","a691ed27":"# box plot overallqual\/saleprice\nvar = 'OverallQual'\ndata_sub = pd.concat([data['SalePrice'], data[var]], axis=1)\nf, ax = plt.subplots(2, 1, figsize=(12, 12))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data_sub, ax=ax[0])\nfig = sns.violinplot(x=var, y=\"SalePrice\", data=data_sub, ax=ax[1])\n#fig.axis(ymin=0, ymax=800000);","f9269bb7":"## Data description\n- Qualitative description of the attributes of the housing, e.g. the `Street` indicates the type of road access to property, which contains two values `Grvl`(gravel) and `Pave`(paved)\n- Qualitative evaluation of different aspects of the housing\uff0c e.g. the `ExterQual` denotes the quality of the material on the exterior with `Excellent`, `Good`, `Average`, `Fair` and `Poor`.\n- Quantitative value recording the numeric properties such as the number of bedrooms, the size of garage in square feet and so on.\n- Marks evaluating the housing status, for instance, the `OverallCond` rates the overall condition of the house. \n\n","9002aca2":"### Reference\nhttps:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python  \nhttps:\/\/www.kaggle.com\/arootda\/eda-fe-modeling-for-bigginer-top-5  \nhttps:\/\/www.kaggle.com\/poonaml\/house-prices-data-exploration-and-visualisation  \nhttps:\/\/www.kaggle.com\/tomods\/eda-visuarization-of-houseprice  \nhttps:\/\/www.kaggle.com\/nikitagrec\/house-prices-clustering#9.-Clustering  \nhttps:\/\/www.kaggle.com\/sonalisingh1411\/eda-on-train-test-dataset-price-prediction  \nhttps:\/\/www.kaggle.com\/lynnxy\/house-price-feature-selection-with-eda-r2-88"}}