{"cell_type":{"8328b30c":"code","9dddcdfb":"code","d0f24325":"code","22e23151":"code","c3773a6b":"code","644b4792":"code","c4c01d83":"code","191b10e8":"code","07096aa0":"code","0a8500bd":"code","1066db38":"code","00fb2dab":"code","fcf314c8":"code","64beb696":"code","9b2b133f":"code","f01b464d":"code","68fa2716":"code","12093408":"code","1bf9a093":"code","f0ed1a35":"code","3666c203":"code","805d2703":"code","1af9aa11":"code","a7db32ff":"code","715805d3":"code","f08398f6":"code","53eaec65":"code","91f20df7":"code","adeeb9cd":"code","3f9117ce":"code","7292152e":"code","80b0dfa3":"code","6361c011":"markdown","1fef8a9c":"markdown","f84ca944":"markdown","09c95467":"markdown","5372090d":"markdown","ac2edb49":"markdown","58926851":"markdown","9611769f":"markdown","0b2f3ffc":"markdown","e4a98df1":"markdown","30023b53":"markdown","7b18c174":"markdown","d297af06":"markdown","b3dbb33d":"markdown","104a8b20":"markdown"},"source":{"8328b30c":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plots\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns","9dddcdfb":"# show all columns of data frames\npd.set_option('display.max_columns', None)","d0f24325":"# show files\n!ls -l '..\/input\/tabular-playground-series-feb-2022\/'","22e23151":"# import data\nt1 = time.time()\ndf_train = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/train.csv')\ndf_test = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/test.csv')\ndf_sub = pd.read_csv('..\/input\/tabular-playground-series-feb-2022\/sample_submission.csv')\nt2 = time.time()\nprint('Elapsed time [s]:', np.round(t2-t1,4))","c3773a6b":"# show first few rows\ndf_train.head(10)","644b4792":"# dimensions of train and test set\nprint('Train Set:', df_train.shape)\nprint('Test Set :', df_test.shape)","c4c01d83":"# structure \/ missing values\ndf_train.info(verbose=True, show_counts=True)","191b10e8":"# basic stats\ndf_train.describe()","07096aa0":"# target - basic stats\nprint(df_train.target.value_counts())\ndf_train.target.value_counts().plot(kind='bar')\nplt.grid()\nplt.show()","0a8500bd":"# add numeric version of target\ndf_train['target_num'] = df_train.target.astype('category').cat.codes","1066db38":"# extract features\nfeatures = df_train.columns\nfeatures = features.drop(['row_id','target','target_num'])\nfeatures = features.tolist()","00fb2dab":"fig, axs = plt.subplots(72, 4, figsize=(16,300))\ni = 0\nfor f in features:\n    current_ax = axs.flat[i]\n    current_ax.hist(df_train[f], bins=100)\n    current_ax.set_title(f)\n    current_ax.grid()\n    i = i + 1","fcf314c8":"# plot features using boxplots\ndf_train.boxplot(column=features[0:100], figsize=(16,6))\nplt.xticks(rotation=90)\nplt.title('Boxplot of features - part 1')\nplt.show()","64beb696":"# plot features using boxplots\ndf_train.boxplot(column=features[100:200], figsize=(16,6))\nplt.xticks(rotation=90)\nplt.title('Boxplot of features - part 2')\nplt.show()","9b2b133f":"# plot features using boxplots\ndf_train.boxplot(column=features[200:285+1], figsize=(16,6))\nplt.xticks(rotation=90)\nplt.title('Boxplot of features - part 3')\nplt.show()","f01b464d":"colors = ['red','blue','green','orange','grey',\n          'cyan','magenta','brown','darkgreen','lightblue']","68fa2716":"# pick a few data points for first plot\nplt.figure(figsize=(16,5))\nfor i in range(0,30):\n    plt.plot(df_train.loc[i,features], color=colors[df_train.target_num[i]])\n\nplt.xticks(rotation=90)\nplt.show()","12093408":"# zoom in first features only\nplt.figure(figsize=(16,5))\nfor i in range(0,50):\n    plt.plot(df_train.loc[i,features[0:25]], color=colors[df_train.target_num[i]])\n\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","1bf9a093":"# show more rows\nplt.figure(figsize=(16,5))\nfor i in range(0,2000):\n    plt.plot(df_train.loc[i,features[0:25]], color=colors[df_train.target_num[i]])\n\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","f0ed1a35":"# calc correlation matrix of features\ncorr_pearson = df_train[features].corr(method='pearson')","3666c203":"# plot all correlations\nplt.figure(figsize=(15,15))\nsns.heatmap(corr_pearson, annot=False, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\nplt.show()","805d2703":"# zoom in 1\nplt.figure(figsize=(14,13))\nsns.heatmap(corr_pearson.iloc[0:50,0:50], annot=False, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\nplt.show()","1af9aa11":"# zoom in 2\nplt.figure(figsize=(14,13))\nsns.heatmap(corr_pearson.iloc[50:100,50:100], annot=False, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\nplt.show()","a7db32ff":"# show example of strong positive correlation\ncc = np.corrcoef(df_train.A1T2G6C1, df_train.A1T2G7C0)[0,1]\nplt.scatter(df_train.A1T2G6C1, df_train.A1T2G7C0, alpha=0.05)\nplt.title('Correlation:' + str(np.round(cc,5)))\nplt.grid()\nplt.show()","715805d3":"# zoom in 3\nplt.figure(figsize=(14,13))\nsns.heatmap(corr_pearson.iloc[200:250,50:100], annot=False, cmap='RdYlGn', vmin=-1, vmax=+1)\nplt.title('Pearson Correlation')\nplt.show()","f08398f6":"# show example of strong negative correlation\ncc = np.corrcoef(df_train.A4T4G1C1, df_train.A1T2G4C3)[0,1]\nplt.scatter(df_train.A4T4G1C1, df_train.A1T2G4C3, alpha=0.05)\nplt.title('Correlation:' + str(np.round(cc,5)))\nplt.grid()\nplt.show()","53eaec65":"# create data frame to store all results\nn_features = len(features)\ncorr_stats = pd.DataFrame(data=np.zeros((n_features**2,4)), columns=['x','y','corr','sel'])\ncorr_stats.x = corr_stats.x.astype(str)\ncorr_stats.y = corr_stats.y.astype(str)\n\n# rearrange all correlations in tabular form\nrow = 0\nfor i in range(n_features):\n    # print(np.round(100*i\/n_features,2)) # track progress\n    var_i = features[i]\n    for j in range(n_features):\n        var_j = features[j]\n        corr_x = corr_pearson.iloc[i,j]\n        # store results\n        corr_stats.loc[row,'x'] = var_i\n        corr_stats.loc[row,'y'] = var_j\n        corr_stats.loc[row,'corr'] = corr_x\n        if (i>j):\n            corr_stats.loc[row,'sel'] = 1 # we use this to later remove redundancies\n                \n        row = row + 1\n\n# remove redundancies\ncorr_stats = corr_stats[corr_stats.sel==1] # only select \"i > j\" cases\ncorr_stats = corr_stats.drop(['sel'], axis=1)\n# sort by correlation (descending)\ncorr_stats = corr_stats.sort_values(by=['corr'], ascending=False)\ncorr_stats = corr_stats.reset_index(drop=True)","91f20df7":"# positive correlations\ncorr_stats.head(10)","adeeb9cd":"# negative correlations\ncorr_stats.tail(10)","3f9117ce":"plt.figure(figsize=(8,5))\nplt.plot(corr_stats['corr'])\nplt.title('Feature Correlations - Sorted')\nplt.grid()\nplt.show()","7292152e":"plt.figure(figsize=(8,5))\nplt.hist(corr_stats['corr'],bins=50)\nplt.title('Feature Correlations - Histogram')\nplt.grid()\nplt.show()","80b0dfa3":"# export to file\ncorr_stats.to_csv('corr_stats.csv')\ncorr_pearson.to_csv('corr_pearson.csv')","6361c011":"### Visualize data points as lines colored by target:","1fef8a9c":"### => No missing values, nice!","f84ca944":"#### Let's extract the highest correlations in a systematic way:","09c95467":"#### Export results:","5372090d":"<a id='target'><\/a>\n# Target","ac2edb49":"# Table of Contents\n* [Import and Data Preparation](#import)\n* [Target](#target)\n* [Visualize Features](#features)\n* [Correlation of Features](#correlation)","58926851":"<a id='correlation'><\/a>\n# Correlation of Features","9611769f":"<a id='features'><\/a>\n# Visualize Features","0b2f3ffc":"#### Distribution of correlations:","e4a98df1":"### Plot all feature distributions:","30023b53":"### See also https:\/\/www.kaggle.com\/docxian\/tpg-2022-feb-eda-gbm-starter for a first modeling approach.","7b18c174":"# Import and Data Preparation","d297af06":"### Visualize features via boxplots:","b3dbb33d":"### => Target is well balanced.","104a8b20":"#### Top 10 feature correlations:"}}