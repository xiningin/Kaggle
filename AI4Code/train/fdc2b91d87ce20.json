{"cell_type":{"2293e9dc":"code","3c7d0c45":"code","4866789a":"code","5f0a44c3":"code","03ac15a7":"code","7fc2e6ed":"code","3c772ceb":"code","7d0174d1":"code","a7ae633a":"code","3b1664e3":"code","9f830386":"markdown","698e0e3c":"markdown","71283de1":"markdown","76848d0e":"markdown","4360093d":"markdown","48bbf6cc":"markdown","c959a532":"markdown","f7dd8c2c":"markdown","93bd0e78":"markdown","906ea8a7":"markdown"},"source":{"2293e9dc":"# coding:utf-8\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import utils\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, BatchNormalization, Dense, Flatten, Dropout, MaxPool2D\nfrom keras.callbacks import LearningRateScheduler\nfrom keras.utils import plot_model\n\n\nbatch_size = 64\nnum_classes = 10\nepochs = 45\ninput_shape = (28, 28, 1)","3c7d0c45":"# Input data files are available in the \"..\/input\/\" directory. \n# \u8f93\u5165\u6570\u636e\u6587\u4ef6\u5728\",,\/input\/\"\u76ee\u5f55\u4e0b\u3002\ndata = pd.read_csv('..\/input\/train.csv', sep=',')\n\n# Reordering, this may not be necessary.\n# \u91cd\u65b0\u6392\u5e8f\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u90a3\u4e48\u5fc5\u8981\u3002\ndata = data.reindex(np.random.permutation(data.index))\n\nlabels = data['label']\nlabels = np.array(labels)\nfeatures = data.loc[:, 'pixel0':'pixel783']\nfeatures = np.array(features)\n\n# Change dimension\n# \u66f4\u6539\u7ef4\u5ea6\nfeatures = np.reshape(features, (-1, 28, 28, 1))\n\n# labels to one-hot\n# \u4f7f\u7528\u72ec\u70ed\u7f16\u7801\none_hot_labels = utils.to_categorical(labels, num_classes=num_classes)\n\n# cutting data\n# \u5206\u5272\u6570\u636e\nX_train = features[:38000]\nX_val = features[38000:]\nY_train = one_hot_labels[:38000]\nY_val = one_hot_labels[38000:]\n\n# Test data processing\n# \u6d4b\u8bd5\u6570\u636e\u5904\u7406\ntest_features = pd.read_csv('..\/input\/test.csv', sep=',')\ntest_features = np.array(test_features)\nX_test = np.reshape(test_features, (-1, 28, 28, 1))","4866789a":"plt.figure(figsize=(10, 10))\n \n# figure interval setting.\n# \u8bbe\u7f6efigsize\u95f4\u9694\u3002\nplt.subplots_adjust(top=0.5)\n\nfor i in range(10):\n    plt.subplot(2, 5, i + 1)\n    plt.title('label:{}'.format(labels[i]))\n    plt.imshow(X_train[i].reshape(28, 28))","5f0a44c3":"plt.figure(figsize=(10,10))\nplt.subplots_adjust(top=0.5)\nfor i in range(10):\n    plt.subplot(2, 5, i + 1)\n    plt.imshow(X_test[i].reshape(28, 28))","03ac15a7":"# keras Sequential\n# keras\u987a\u5e8f\u6a21\u578b\nmodel = Sequential()\n\nmodel.add(Conv2D(32, kernel_size=2, activation='relu', input_shape=input_shape))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, kernel_size=3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, kernel_size=4, strides=2, padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(64, kernel_size=3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, kernel_size=3, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, kernel_size=2, activation='relu'))\nmodel.add(MaxPool2D(pool_size=2))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(32, kernel_size=4, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Flatten())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(10, activation='softmax'))\n\n# model compile\n# \u7f16\u8bd1\u6a21\u578b\nmodel.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","7fc2e6ed":"datagen = ImageDataGenerator(\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180) \u968f\u673a\u65cb\u8f6c\u5ea6\u6570\u8303\u56f4\n        zoom_range=0.1,  # Randomly zoom image \u968f\u673a\u7f29\u653e\u8303\u56f4\n        width_shift_range=0.1, \n        height_shift_range=0.1)  ","3c772ceb":"annealer = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)","7d0174d1":"history = model.fit_generator(datagen.flow(X_train, \n                                           Y_train, \n                                           batch_size=batch_size),      \n                              epochs=epochs, \n                              steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                              validation_data=(X_val, Y_val), \n                              callbacks=[annealer], verbose=1)\nmax(history.history['acc'])","a7ae633a":"model.save('CNN_model')\nplot_model(model, to_file='CNN_model.png', show_shapes='true')\nresults = model.predict(X_test)\nresults = np.argmax(results, axis=1)\nresults = pd.Series(results, name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1, 28001), name=\"ImageId\"), results], axis=1)\nsubmission.to_csv(\"Digit_predict.csv\", index=False)","3b1664e3":"plt.figure(figsize=(10,40))\nplt.subplots_adjust(top=0.5)\nfor i in range(40):\n    plt.subplot(8, 5, i + 1)\n    plt.title('label:{}'.format(results[i]))\n    plt.imshow(X_test[i].reshape(28, 28))","9f830386":"## Data processing(\u6570\u636e\u5904\u7406)","698e0e3c":"# Digit Recognizer (kaggle 0.99757)\n![](https:\/\/github.com\/aefuimn\/Digit-Recognier\/blob\/master\/source\/leaderbord.png)\n## Introduce(\u4ecb\u7ecd\uff09\n#### I will explain this project int two languages, Englisth and Chinese.\n#### \u6211\u4f1a\u7528\u82f1\u8bed\u548c\u4e2d\u6587\u89e3\u91ca\u8fd9\u4e2a\u9879\u76ee\uff0c\u56e0\u4e3a\u6211\u60f3\u5b66\u82f1\u8bed\u3002\n\n## Environment(\u73af\u5883)\n#### python 3.6 + keras(backend: Tensorflow)\n\n## Model(\u6a21\u578b)\n#### . CNN(Convolutional Neural Network,  \u5377\u79ef\u795e\u7ecf\u7f51\u7edc)","71283de1":"## Save model and Predict(\u4fdd\u5b58\u6a21\u578b\u4ee5\u53ca\u9884\u6d4b\u6570\u636e)","76848d0e":"## Display some data(\u663e\u793a\u90e8\u5206\u6570\u636e)\n#### Train data(\u8bad\u7ec3\u6570\u636e)","4360093d":"## Training(\u8fdb\u884c\u8bad\u7ec3)","48bbf6cc":"## Optimized learning rate(\u4f18\u5316\u5b66\u4e60\u901f\u7387)","c959a532":"## Data enhancement(\u6570\u636e\u589e\u5f3a)","f7dd8c2c":"## Display result of predict(\u9884\u6d4b\u7ed3\u679c\u53ef\u89c6\u5316)","93bd0e78":"## Model Design(\u6a21\u578b\u8bbe\u8ba1)\n","906ea8a7":"#### Test data(\u6d4b\u8bd5\u6570\u636e)"}}