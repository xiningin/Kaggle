{"cell_type":{"e8817985":"code","17616bb8":"code","c76fc144":"code","559fcb06":"code","a33ff6c0":"code","507008df":"code","3d174d4d":"code","e63d5ffb":"code","d1fd1407":"code","d85a6e31":"code","06250846":"code","aa63261e":"code","65e3e1d2":"code","a2847e94":"code","eb3e74ca":"code","890a7ad9":"code","4d178951":"code","9ded4d87":"code","1d49a147":"code","d0a62edd":"code","4dfe006f":"code","c6ba1b30":"code","d4a531a4":"code","aeeb2d62":"code","cc7bb971":"markdown","6aabab09":"markdown","5a446561":"markdown","c4eb2316":"markdown","87ca1d8d":"markdown","ffab945e":"markdown","1a2d8868":"markdown","01437cca":"markdown","d7c5b04a":"markdown","3e36cd4a":"markdown","1b2f6020":"markdown","e5a4c70e":"markdown","ea4cc92f":"markdown","575a6136":"markdown","8155c8b7":"markdown","25d1bcaf":"markdown","3a27e681":"markdown","41a6fd13":"markdown","719762d0":"markdown","d0039bb0":"markdown","5ffd483c":"markdown","1e4319e7":"markdown","d5ba576e":"markdown","03d8a8d6":"markdown","06de5984":"markdown","48e1465d":"markdown","7d524e98":"markdown"},"source":{"e8817985":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport h2o\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler,RobustScaler,Normalizer\nfrom h2o.estimators.deeplearning import H2OAutoEncoderEstimator\nfrom pylab import rcParams\nrcParams['figure.figsize']=15,10","17616bb8":"student=pd.read_csv('..\/input\/studentDropIndia_20161215.csv', sep=',')\nstudent.isnull().any()","c76fc144":"#student.dtypes\n#student[pd.isnull(student).any(axis=1)]","559fcb06":"student=student.fillna(0)","a33ff6c0":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(student.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","507008df":"labels = ['continue', 'drop']\nsizes = [student['continue_drop'].value_counts()[0],\n         student['continue_drop'].value_counts()[1]\n        ]\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True)\nax1.axis('equal')\nplt.title('Continue vs Dropout Pie Chart', fontsize=20)\nplt.show()","3d174d4d":"predictors=list(range(0,15))\nprint(student.shape)","e63d5ffb":"cols_to_transform = [ 'continue_drop','gender','caste','guardian','internet' ]\nstudent = pd.get_dummies( student,columns = cols_to_transform )\nstudent.head()","d1fd1407":"student = student.drop('student_id', 1)","d85a6e31":"student.dtypes","06250846":"# Copy the original dataset\nscaled_features = student.copy()\n\n# Extract column names to be standardized\ncol_names = ['mathematics_marks','english_marks','science_marks',\n             'science_teacher','languages_teacher','school_id',\n             'total_students','total_toilets','establishment_year'#,\n             #'gender_F','gender_M','caste_BC','caste_OC','caste_SC',\n             #'caste_ST','guardian_father','guardian_mixed','guardian_mother',\n            # 'guardian_other','internet_False','internet_True'\n            ]\n\n# Standardize the columns and re-assingn to original dataframe\nfeatures = scaled_features[col_names]\nscaler = RobustScaler().fit_transform(features.values)\nfeatures = pd.DataFrame(scaler, index=student.index, columns=col_names)\nscaled_features [col_names] = features\nscaled_features.head()","aa63261e":"#student = student.astype(object)\n\ntrain=scaled_features.loc[scaled_features['continue_drop_continue'] == 1]\ntest=scaled_features.loc[scaled_features['continue_drop_drop'] == 1]","65e3e1d2":"# removing the continue_drop_continue and continue_drop_drop columns from training data\npredictors.remove(9)\npredictors.remove(10)\ntrain.columns[predictors]","a2847e94":"h2o.init(nthreads=-1, enable_assertions = False)","eb3e74ca":"train.hex=h2o.H2OFrame(train)\ntest.hex=h2o.H2OFrame(test)","890a7ad9":"model=H2OAutoEncoderEstimator(activation=\"Tanh\",\n                              hidden=[120],\n                              ignore_const_cols=False,\n                              epochs=100\n                             )","4d178951":"model.train(x=predictors,training_frame=train.hex)","9ded4d87":"model._model_json['output']","1d49a147":"test_rec_error=model.anomaly(test.hex)\ntrain_rec_error=model.anomaly(train.hex)","d0a62edd":"test_rec_error_df=test_rec_error.as_data_frame()\ntrain_rec_error_df=train_rec_error.as_data_frame()\nfinal = pd.concat([train_rec_error_df, train_rec_error_df])","4dfe006f":"boxplotEdges=final.quantile(.75)\niqr = np.subtract(*np.percentile(final, [75, 25]))\ntop_whisker=boxplotEdges[0]+(1.5*iqr)\ntop_whisker","c6ba1b30":"train_rec_error_df['id']=train_rec_error_df.index\ntest_rec_error_df['id']=test_rec_error_df.index + 18200 #Count of train data","d4a531a4":"plt.figure(figsize=[10,20])\nplt.scatter(train_rec_error_df['id'],train_rec_error_df['Reconstruction.MSE'],label='Continued Students',s=1)\nplt.axvline(x=18200,linewidth=1)\nplt.scatter(test_rec_error_df['id'],test_rec_error_df['Reconstruction.MSE'],label='Dropped Students',s=1)\nplt.axhline(y=top_whisker,linewidth=1, color='r')\nplt.legend()","aeeb2d62":"h2o.cluster().shutdown()","cc7bb971":"### Split dataset - dropped students as 'test' and continued students as 'train'","6aabab09":"### List column","5a446561":"### Create AutoEncoder Model","c4eb2316":"95.3% Students continued in school, whereas 4.7% dropped","87ca1d8d":"As shown above, *total_toilets *and *establishment_year* have Null values","ffab945e":"### Ensuring all the columns are of numeric datatype","1a2d8868":"## Reference :\nhttps:\/\/charleshsliao.wordpress.com\/2017\/06\/26\/denoise-with-auto-encoder-of-h2o-in-python-for-mnist\/\nhttp:\/\/benalexkeen.com\/feature-scaling-with-scikit-learn\/","01437cca":"### Get anomalous values","d7c5b04a":"### Scatter plot with top whisker","3e36cd4a":"## Output:\n\nWe have trained the model to detel the students who continued in school. From the graph you can see ***all the students who dropped*** have been correctly classfifed as **Outliers**","1b2f6020":"### Students' Marks in Math is absolutely correlated with Science ","e5a4c70e":"## Basic exploratory data analysis","ea4cc92f":"### Convert panda dataframe to H2O dataframe","575a6136":"### Print the output in JSON format","8155c8b7":"### Convert output to dataframe","25d1bcaf":"### Train the model with training dataset","3a27e681":"### Starting H2O cluster","41a6fd13":"### Fill NA with 0","719762d0":"### Calculate top whisker value","d0039bb0":"# Simple Anomaly detection with H2O in Python\n\n### About dataset: \nThis data is a collection of metrics of various students a state of India. The goal was to gather as much information possible to determine if a given student would continue his\/her schooling or dropout. Future dropout rates and ways to minimize this, was the ultimate goal of the data collection.\n\nWe would want Autoencoding and Anomaly detction from H2O, to differentiate the data between students who dropped out and of those who did not. ","5ffd483c":"### Print correlation matrix","1e4319e7":"## H2O Autoencoding and Anomaly detection","d5ba576e":"without continue_drop_continue and continue_drop_drop columns the method doesn't work :(","03d8a8d6":"### H2O cannot use columns with character datatype. Creating Dummy variables instead","06de5984":"### Dropping student_id column","48e1465d":"### Add id column to dataframe ","7d524e98":"### Standardize input data"}}