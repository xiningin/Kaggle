{"cell_type":{"7c98f1e5":"code","08c8cdc2":"code","b28dd126":"code","7c7bb3df":"code","fd5973e0":"code","75f6f016":"code","646cb974":"code","f405b74a":"code","2a5eebd2":"code","cbf1a80c":"code","60de9a7e":"code","1d20954a":"code","5c71268f":"code","71b948f9":"code","719e0431":"code","8e7b5136":"code","570f78e1":"code","0bfd86bd":"code","4ae5cac0":"code","bbb69038":"code","98301c0d":"code","b0835ebc":"code","c9ce41b6":"code","1853772b":"code","724c6dab":"code","2a8985e3":"code","4141d750":"code","4cd889a7":"code","f5010fc2":"code","8d875b10":"code","e7230eda":"code","e922bb8b":"code","402be3a7":"code","9e475e33":"code","ae7a4e91":"code","41ff0662":"code","8bb8c562":"code","5b9661d1":"code","cdd8fd5c":"code","004bddff":"code","9fbe7136":"code","f5e2365c":"code","0763720c":"code","41f997b6":"code","3ba548d1":"code","4974731e":"code","393bd6af":"code","6908cfea":"markdown","bbd0b50c":"markdown","f40cb59c":"markdown","73f80506":"markdown","e15655b0":"markdown","9797ec64":"markdown","cd271fa3":"markdown","b73a870f":"markdown","3e59a605":"markdown","d6fb3b25":"markdown","c4e3a6c9":"markdown","527792e0":"markdown","653bd47e":"markdown","b7bfb937":"markdown","47f75114":"markdown","fedc5cf5":"markdown","f57d3a3f":"markdown","33be688c":"markdown","5c715966":"markdown","a85d66aa":"markdown","681d1805":"markdown","d2f03eeb":"markdown","e19fe0aa":"markdown","d3d37962":"markdown","4d792ce0":"markdown","3a7622dc":"markdown","9d973d35":"markdown","5c107c03":"markdown","571ff7a8":"markdown","871bc3bd":"markdown","f38fcb5a":"markdown","39348fe7":"markdown"},"source":{"7c98f1e5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","08c8cdc2":"#datay\u0131 okuyal\u0131m.\ndata=pd.read_excel(\"..\/input\/datum.xlsx\")","b28dd126":"# datan\u0131n ilk 5 sat\u0131r\u0131..\ndata.head()","7c7bb3df":"# datan\u0131n kolon isimleri ve her bir kolondaki de\u011fisken tipleri ve ka\u00e7ar tane oldu\u011funu a\u015fag\u0131daki kod ile gorebiliriz.\ndata.info()","fd5973e0":"#kategori kolonundaki her bir de\u011fer NaN oldu\u011fu i\u00e7in bu kolonu siliyoruz.\ndata.drop([\"KATEGOR\u0130\"],axis=1,inplace=True)","75f6f016":"# Kurs kolonlar\u0131ndaki ALDI\/ALMADI yerine 1\/0 yazal\u0131m.\ndata[\"Fen kurs\"]=[1 if i==\"ALDI\" else 0 for i in data[\"Fen kurs\"]]\ndata[\"Matematik kurs\"]=[1 if i==\"ALDI\" else 0 for i in data[\"Matematik kurs\"]]\ndata[\"T\u00fcrkce kurs\"]=[1 if i==\"ALDI\" else 0 for i in data[\"T\u00fcrkce kurs\"]]\ndata[\"Yabanc\u0131 dil kurs\"]=[1 if i==\"ALDI\" else 0 for i in data[\"Yabanc\u0131 dil kurs\"]]\ndata[\"Drama kurs\"]=[1 if i==\"ALDI\" else 0 for i in data[\"Drama kurs\"]]\ndata[\"Beden egitimi kurs\"]=[1 if i==\"ALDI\" else 0 for i in data[\"Beden egitimi kurs\"]]\ndata[\"M\u00fczik kurs\"]=[1 if i==\"ALDI\" else 0 for i in data[\"M\u00fczik kurs\"]]\ndata[\"G\u00f6rsel sanatlar kurs\"]=[1 if i==\"ALDI\" else 0 for i in data[\"G\u00f6rsel sanatlar kurs\"]]\ndata[\"Yazarl\u0131k ve yazma becerileri kurs\"]=[1 if i==\"ALDI\" else 0 for i in data[\"Yazarl\u0131k ve yazma becerileri kurs\"]]","646cb974":"# \"oda\" ve \"s\u00fcrekli hastal\u0131k\" kolonlar\u0131 i\u00e7in  Yok\/Var yerine 0\/1 yazal\u0131m.\ndata[\"Oda\"]=[1 if i==\"VAR\" else 0 for i in data[\"Oda\"]]\ndata[\"S\u00fcrekli hastal\u0131k\"]=[1 if i==\"VAR\" else 0 for i in data[\"S\u00fcrekli hastal\u0131k\"]]","f405b74a":"# datan\u0131n son haline bir bakal\u0131m.\ndata.head()","2a5eebd2":"data.GBO.value_counts() # GBO kolonunda hangi degerden kac tane var bunu verir.","cbf1a80c":"data['GBO'].describe()","60de9a7e":"data.corr()['GBO'].sort_values()","1d20954a":"data.corr().abs()['GBO'].sort_values(ascending=False)","5c71268f":"# Ayk\u0131r\u0131 de\u011fer tespiti\nsns.boxplot(x=data['GBO'])\nplt.show()","71b948f9":"# GBO degerlerinin histogram\u0131\ndata.GBO.plot(kind = 'hist',figsize = (8,8))\nplt.xlabel(\"GBO\")\nplt.grid()\nplt.title('GBO  Histogram\u0131',color = 'red',fontsize=15)\nplt.show()","719e0431":"# GBO degerlerinin bar grafigi\nplt.figure(figsize=(15,10))\nplt.bar(data['GBO'].value_counts().index, \n        data['GBO'].value_counts().values,\n         fill = 'navy', edgecolor = 'k', width = 1)\nplt.xlabel('GBO'); plt.ylabel('Count'); plt.title('GBO Dag\u0131l\u0131m\u0131');\nplt.xticks(list(range(31, 100)))\nplt.show()\n","8e7b5136":"plt.figure(figsize=(15,10))\nsns.countplot(data.GBO)\nplt.grid()\nplt.title(\"GBO\",color=\"red\",fontsize=15)","570f78e1":"# GBO degerlerinin histogram\u0131\ndata.GBO.plot(kind = 'hist', bins=4, figsize = (8,8))\nplt.xlabel(\"GBO\")\nplt.grid()\nplt.title('GBO  Histogram\u0131',color = 'red',fontsize=15)\nplt.show()","0bfd86bd":"data[\"Cins\"]=[1 if i==\"E\" else 0 for i in data[\"Cins\"]]\ndata[\"Anne sag\/\u00f6l\u00fc\"]=[1 if i==\"SA\u011e\" else 0 for i in data[\"Anne sag\/\u00f6l\u00fc\"]]\ndata[\"Baba sag\/\u00f6l\u00fc\"]=[1 if i==\"SA\u011e\" else 0 for i in data[\"Baba sag\/\u00f6l\u00fc\"]]\ndata[\"Anne baba birlikte\/ayr\u0131\"]=[1 if i==\"B\u0130RL\u0130KTE\" else 0 for i in data[\"Anne baba birlikte\/ayr\u0131\"]]\ndata[\"Anne cal\u0131sma durumu\"]=[1 if i==\"EVET\" else 0 for i in data[\"Anne cal\u0131sma durumu\"]]\ndata[\"Baba cal\u0131sma durumu\"]=[1 if i==\"EVET\" else 0 for i in data[\"Baba cal\u0131sma durumu\"]]","4ae5cac0":"data.head()\n","bbb69038":"data[\"Aile ile yasama durumu\"].value_counts().unique","98301c0d":"data[\"Anne ogrenim durumu\"].value_counts().unique","b0835ebc":"data[\"Baba ogrenim durumu\"].value_counts().unique","c9ce41b6":"d = {'ANNES\u0130YLE': 0, 'BABASIYLA': 1, 'BABAANNES\u0130YLE': 2, \"A\u0130LES\u0130YLE\": 3}\ndata['Aile ile yasama durumu'] = data['Aile ile yasama durumu'].map(d)\n\nd = {'YOK': 0, \"\u0130LKOKUL\": 1, \"ORTAOKUL\": 2 , 'ORTA': 2, 'L\u0130SE': 3, \"\u00d6NL\u0130SANS\" : 4, \"L\u0130SANS\": 5, \"L\u0130SANS\u00dcST\u00dc\": 6}\ndata['Anne ogrenim durumu'] = data['Anne ogrenim durumu'].map(d)\ndata['Baba ogrenim durumu'] = data['Baba ogrenim durumu'].map(d)\n\n","1853772b":"data.info()","724c6dab":"data.head()","2a8985e3":"data.nunique()","4141d750":"f,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(data.corr(), annot=True, linewidths=.4, fmt= '.1f',ax=ax)\nplt.show()","4cd889a7":"data_new=data.copy()\ndata_new=data_new.loc[:, [\"Yas\",\"Cins\",\"Devam\",\"Anne ogrenim durumu\", \"Baba ogrenim durumu\", \"Kardes\",\"Oda\",\"GBO\"]]\ndata_new.head()","f5010fc2":"def s\u0131rala(item):\n    if 31<=item<= 48:\n        return 1\n    elif 49<=item <= 67:\n        return 2\n    elif 68<=item <= 82:\n        return 3\n    else:\n        return 4\n\ndata_new['GBO'] = data_new['GBO'].apply(s\u0131rala)","8d875b10":"data_new.head()","e7230eda":"f,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(data_new.corr(), annot=True, linewidths=.4, fmt= '.1f',ax=ax)\nplt.show()","e922bb8b":"y = data_new.GBO.values\nx_data = data_new.drop([\"GBO\"],axis=1)","402be3a7":"from sklearn.model_selection import train_test_split\nfrom sklearn import tree\nX_train, X_test, y_train, y_test = train_test_split(x_data, y, test_size=0.3, random_state=100)","9e475e33":"grade_classifier = tree.DecisionTreeClassifier(max_leaf_nodes=len(x_data.columns), random_state=0)\ngrade_classifier.fit(X_train, y_train)","ae7a4e91":"predictions = grade_classifier.predict(X_test)","41ff0662":"from sklearn.metrics import accuracy_score\naccuracy_score(y_true = y_test, y_pred = predictions)","8bb8c562":"from sklearn.ensemble import RandomForestClassifier\n\nrf=RandomForestClassifier(n_estimators=100,random_state=11)\n\nrf.fit(X_train,y_train)\n\nprint(\"random forest algo score: \",rf.score(X_test,y_test))","5b9661d1":"prediction_1=rf.predict(X_test)\nprediction_1","cdd8fd5c":"data1=pd.DataFrame({\"real_values\": y_test, \"prediction_values\": prediction_1})\ndata1.head()","004bddff":"#import train_test_split to find train and test sets\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(x_data, y, test_size=0.25, random_state = 1)","9fbe7136":"print(\"X_train shape: \"+str(X_train.shape))\nprint(\"y_train shape: \"+str(y_train.shape))\nprint(\"X_test shape: \"+str(X_test.shape))\nprint(\"y_test shape: \"+str(y_test.shape))","f5e2365c":"import itertools\n\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.svm import LinearSVC\n\nfrom sklearn import metrics\nfrom sklearn.metrics import precision_recall_fscore_support as score","0763720c":"svm_model = LinearSVC(penalty='l2', random_state=0, tol=0.00001,max_iter=4500)\nsvm_model.fit(X_train,y_train)","41f997b6":"y_predict2 = svm_model.predict(X_test)\n\nprint(\"Accuracy:\\n\", metrics.accuracy_score(y_test,y_predict2))\nprint(\"Confusion Matrix:\\n\",metrics.confusion_matrix(y_test, y_predict2))","3ba548d1":"print(y_predict2)","4974731e":"unique, counts = np.unique(y_test, return_counts=True)\n\nunique, counts","393bd6af":"def plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion Matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()\n    \n# Compute confusion matrix\ncnf_matrix = metrics.confusion_matrix(y_test, y_predict2)\nnp.set_printoptions(precision=2)\n\n# Plot non-normalized confusion matrix\nplt.figure(figsize=(12,6))\nplot_confusion_matrix(cnf_matrix, classes=['1','2', '3', '4'])","6908cfea":"GBO s\u00fct\u00fcnunda bulunan de\u011ferleri sayal\u0131m.","bbd0b50c":"GBO degerlerinin dag\u0131l\u0131m\u0131n\u0131 g\u00f6rmek icin bar grafigi de kullanabiliriz.","f40cb59c":"Burada bir \u0131s\u0131 haritas\u0131 olu\u015fturdum. Kareler i\u00e7erisindeki her bir de\u011fer sat\u0131r s\u00fctundaki de\u011fi\u015fkenler aras\u0131ndaki korelasyon de\u011ferini belirtmektedir. Renkler a\u00e7\u0131ld\u0131k\u00e7a ili\u015fkisellik artmakta, koyula\u015ft\u0131k\u00e7a azalmaktad\u0131r. GBO ile di\u011fer de\u011fi\u015fkenler aras\u0131ndaki korelasyon de\u011ferleri bu \u0131s\u0131 haritas\u0131ndan da g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere olduk\u00e7a d\u00fc\u015f\u00fck. ","73f80506":"x_test degerlerimiz icin tahminde bulunuyoruz.","e15655b0":"Korelasyon degerlerine bak\u0131ld\u0131g\u0131nda baz\u0131 de\u011fi\u015fkenlerin GBO \u00fczerinde etkisinin olmad\u0131g\u0131 gorulmektedir. Bu sebepten veri tablosunu etkisi olmayan degiskenlerden ar\u0131nd\u0131r\u0131p yeni bir dataframe olustural\u0131m.","9797ec64":"Buldugumuz bu degerlerin mutlak degerlerini b\u00fcy\u00fckten k\u00fcc\u00fcge dogru s\u0131ralayal\u0131m.","cd271fa3":"Data \u00fczerinde Karar Agac\u0131 (Decision Tree), Rastgele Orman (Random Forest) ve Lineer SVM algoritmalar\u0131n\u0131 uygulad\u0131k. Bu algortimalar\u0131n tutarl\u0131l\u0131k degerleri s\u0131ras\u0131yla %51, %52 ve %63 olmustur.","b73a870f":"GBO degiskeninin diger degiskenlerle olan korelasyonuna bakal\u0131m.","3e59a605":"GBO degerlerini \u00fcstte olusturdugumuz histograma binaen 4 gruba ay\u0131rd\u0131k. Daha sonra bir fonksiyon yard\u0131m\u0131 ile GBO degerlerini yeniden isimlendirdik. Bu 4 gruba ay\u0131r\u0131rken classwhidth=range\/number_of_classes=17.25 aral\u0131g\u0131 al\u0131nm\u0131st\u0131r.","d6fb3b25":"Dort grup icin tahmin algoritmam\u0131z %51 dogrulukla tahminde bulunuyor.\nNot: Eger GBO degerlerini 4 grup degil de 3 grup yaparsak daha yuksek bir tahmin yuzdesi elde edebiliriz.","c4e3a6c9":"Modelimizi olusturuyoruz.","527792e0":" Rastgele Orman Algoritmas\u0131 %50 dogruluk ile tahminde bulunuyor. ","653bd47e":"y_test degerleri icin algoritma sonucu elde edilen tahminler ile y_test in gercek degerlerini tek bir tabloda gormek istersek, bunlar\u0131 data1 diye isimlendirdigimiz bir dataframe icine yazabiliriz.","b7bfb937":"Ayn\u0131 grafigi Seaborn k\u00fct\u00fcphanesi ile de \u00e7izebiliriz.","47f75114":"Asag\u0131daki GBO degerlerinin histogram\u0131 verilmektedir. Burada Python otomatik olarak bu degerleri 10 par\u00e7aya ay\u0131rm\u0131st\u0131r.","fedc5cf5":"Cins, Anne sag\/\u00f6l\u00fc, baba sag\/\u00f6l\u00fc, Anne baba birlikte\/ayr\u0131, Anne cal\u0131sma durumu, Baba cal\u0131sma durumu degiskenlerini binary (0\/1) yapal\u0131m.","f57d3a3f":"Kar\u0131\u015f\u0131kl\u0131k matrisinin kosegenleri uzerindeki say\u0131lar hangi s\u0131n\u0131ftan ne kadar dogru tahmin yapt\u0131g\u0131m\u0131z\u0131 gosterir. y_test dedigimiz data icerisinde 220 tane deger vard\u0131. Bunlardan 1 s\u0131n\u0131f\u0131na ait hic dogru tahminde bulunamam\u0131s\u0131z. 2 s\u0131n\u0131f\u0131ndan 8, 3 s\u0131n\u0131f\u0131ndan 15, 4 s\u0131n\u0131f\u0131ndan ise 117 tane dogru tahminde bulunmusuz. Matriste bulunan diger degerler ise asl\u0131nda verinin hangi s\u0131n\u0131fta oldugunu ve bizim hangi tahminde bulundugumuzu verir. 1 s\u0131n\u0131f\u0131na ait 5 tane verimiz varm\u0131\u015f, algoritma bunlar\u0131n d\u00f6rd\u00fcn\u00fc 2 s\u0131n\u0131f\u0131, birini ise 3 s\u0131n\u0131f\u0131 olarak tahmin etmis. 2 s\u0131n\u0131f\u0131na ait 7 tane veri 3 s\u0131n\u0131f\u0131nda, 13 tane veri ise 4 s\u0131n\u0131f\u0131nda tahmin edilmis. 3 s\u0131n\u0131f\u0131na ait 2 tane deger 2 s\u0131n\u0131f\u0131nda, 43 tane deger ise 4 s\u0131n\u0131f\u0131nda tahmin edilmi\u015f. 4 s\u0131n\u0131f\u0131na ait 10 veri ise 3 s\u0131n\u0131f\u0131nda tahmin edilmi\u015f.","33be688c":"**shape** komutu X_train, y_train, X_test ve y_test gidrilerimizin bi\u00e7imlerini verir.","5c715966":"Bir \u00f6nceki grafikten dolay\u0131 histogram\u0131m\u0131z\u0131 4 par\u00e7aya ay\u0131rd\u0131k.","a85d66aa":"GBO s\u00fctununun istatiksel de\u011ferlerine bakal\u0131m..","681d1805":"Kar\u0131\u015f\u0131kl\u0131k matrisimizi \u00e7izmek istersek:","d2f03eeb":"Bu asamada GBO degerlerini tahmin etmek icin Karar Agac\u0131 yap\u0131s\u0131n\u0131 kulllanacag\u0131z. ","e19fe0aa":"Anne \u00f6grenim durumu verisinde bir annenin \u00f6grenim durumu sadece ORTA ile ifade edilmektedir. Bu anneye ait ORTA verisi ORTAOKUL ile ayn\u0131 \u015fekilde kodlanm\u0131\u015ft\u0131r.","d3d37962":"# Karar Agac\u0131 (Decision Tree)","4d792ce0":" Oncelikle datay\u0131 egitim\/ test (train\/test) seklinde b\u00f6lecegiz.\n* test_size: datan\u0131n ne kadar\u0131n\u0131 train ne kadar\u0131n\u0131 test olarak ay\u0131racag\u0131m\u0131z\u0131 belirler\n   biz burada %70 train, %30 test olarak ay\u0131r\u0131yoruz. Bu oranlarla istenildigi sekilde oynanabilir.\n* random_state=100: datan\u0131n train ve test olarak ay\u0131r\u0131lmas\u0131 rasgele(random) oldugu i\u00e7in, kodu her cal\u0131st\u0131rd\u0131g\u0131m\u0131zda ayn\u0131 randoml\u0131kta par\u00e7ala demek istiyoruz. 100 degeri degistirilebilir.","3a7622dc":"Burdan sonra elimzdeki data_new dataframe i \u00fczerinde temel Makine Ogrenmesi algoritmalar\u0131n\u0131 deneyecegiz. Bu y\u00fczden oncelikle datay\u0131 egitim\/ test (train\/test) seklinde b\u00f6lecegiz.\n* test_size: datan\u0131n ne kadar\u0131n\u0131 train ne kadar\u0131n\u0131 test olarak ay\u0131racag\u0131m\u0131z\u0131 belirler\n   biz burada %75 train, %25 test olarak ay\u0131r\u0131yoruz. Bu oranlarla istenildigi sekilde oynanabilir.\n* random_state=42: datan\u0131n train ve test olarak ay\u0131r\u0131lmas\u0131 rasgele(random) oldugu i\u00e7in, kodu her cal\u0131st\u0131rd\u0131g\u0131m\u0131zda ayn\u0131 randoml\u0131kta par\u00e7ala demek istiyoruz. 42 degeri degistirilebilir.","9d973d35":"# Lineer SVM (Linear Support Vector Machine)","5c107c03":"\u015eimid ise GBO degerlerini tahmin etmek icin Rastgele Orman Algoritmas\u0131 (Random Forest Algorithm) kullanal\u0131m.","571ff7a8":"# Rastgele Orman Algoritmas\u0131 (Random Forest )","871bc3bd":"G\u00f6r\u00fcld\u00fcg\u00fc gibi algoritma y\u00fczde 63 dogruluk ile \u00e7al\u0131s\u0131yor. Kar\u0131\u015f\u0131kl\u0131 matrisi (Confusion matrix) yap\u0131lan tahminlerde hangi degerden kac tanesi dogru ka\u00e7 tanesi yanl\u0131s tahmin edilmi\u015f bunu g\u00f6sterir.  ","f38fcb5a":"Kategorik degi\u015fkenleri donusturdukten sonra yapt\u0131g\u0131m\u0131z bu d\u00f6n\u00fcs\u00fcmde hata olup olmad\u0131g\u0131n\u0131 asag\u0131daki kod ile kontrol edebiliriz. Mesela \"Aile ile ya\u015fama durumu\" 4 s\u0131n\u0131fa ayr\u0131lm\u0131\u015ft\u0131, bunu kodun \u00e7\u0131kt\u0131s\u0131nda bu \u015fekilde g\u00f6rebiliyoruz.","39348fe7":"SVM genellikle ikili(binary) s\u0131n\u0131fland\u0131rmalar i\u00e7in kullan\u0131lan bir algoritma. Fakat \u00e7oklu s\u0131n\u0131fland\u0131rma yap\u0131lmas\u0131 gereken durumlarda da SVM uygulan\u0131p iyi degerlendirmeler elde edilebiliyor.\nKaynak olarak asag\u0131daki baglant\u0131lar kullan\u0131labilir.\n\nhttps:\/\/ieeexplore.ieee.org\/stamp\/stamp.jsp?arnumber=6046926\n\nhttps:\/\/machinelearningmastery.com\/multi-class-classification-tutorial-keras-deep-learning-library\/  \n\nhttps:\/\/github.com\/topics\/multiclass-classification?o=desc&s=stars"}}