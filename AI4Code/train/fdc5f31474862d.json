{"cell_type":{"e34e4059":"code","3bdafd3d":"code","eb3868be":"code","7ab701c3":"code","6b70467b":"code","c190318b":"code","06a5dd80":"code","edf121d4":"code","4211cbb6":"code","3591ae6f":"code","2dbafdf3":"code","e0163a58":"code","fef0e087":"code","6b376a8c":"code","71d084da":"code","b4e55538":"code","30c756f7":"code","06063a21":"code","6a86165d":"code","6ae87bcb":"code","ced55bd0":"code","52b3e29d":"code","02257fc2":"code","32c9d1c5":"code","3a8671f7":"code","21901e12":"code","eb24d8ce":"code","7f97ad74":"markdown","d25ec361":"markdown","6a736d04":"markdown","8e81d461":"markdown","ba4397d0":"markdown","1fd42f40":"markdown","16882f36":"markdown","b63f27fe":"markdown","d54b4b39":"markdown","573569db":"markdown"},"source":{"e34e4059":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3bdafd3d":"len(filenames)","eb3868be":"from PIL import Image\nfrom numpy import asarray\nimport numpy as np\nfrom numpy import zeros\nfrom numpy import ones\nfrom numpy.random import randn\nfrom numpy.random import randint\nfrom keras.optimizers import Adam\nfrom keras.models import Sequential\nfrom matplotlib import pyplot\nfrom keras.layers import BatchNormalization\nfrom keras.initializers import RandomNormal\nfrom keras.utils.vis_utils import plot_model\nfrom keras.models import Model\nfrom keras.layers import (Input, MaxPooling2D, GlobalAveragePooling2D, \n                          UpSampling2D,Conv2DTranspose,LeakyReLU,Dropout,\n                          Activation,Dense,Flatten,Reshape,Conv2D)","7ab701c3":"dataset_orig = np.empty((len(filenames), 64, 64,3))","6b70467b":"ind=0\nfor i in filenames:\n    image = Image.open(os.path.join(dirname, i))\n    data = asarray(image)\n    dataset_orig[ind]=data\n    ind+=1","c190318b":"dataset_orig.shape","06a5dd80":"width, height, channel = 64, 64, 3\nnp.random.shuffle(dataset_orig)\nX=dataset_orig","edf121d4":"X = (X - 127.5) \/ 127.5","4211cbb6":"X.shape","3591ae6f":"import matplotlib.pyplot as plt\ndef show_data(X, title=\"\"):\n    plt.figure(figsize=(11,11))\n    \n    i = 1\n    for img in X:\n        plt.subplot(10, 10, i)\n        plt.imshow(img.reshape((height, width,channel)))\n        plt.axis('off')\n        i+=1\n        if i>100: break\n\n    plt.suptitle(title, fontsize = 25)\n    plt.show()\n    \nshow_data(X, title=\"Original Dataset\")","2dbafdf3":"gen_optimizer = Adam(0.0001, 0.5)\ndisc_optimizer = Adam(0.0002, 0.5)\nnoise_dim = 100","e0163a58":"def buildGenerator():\n    model = Sequential()\n\n    model.add(Dense(1024, input_dim=noise_dim))\n    model.add(BatchNormalization(momentum=0.8))\n    model.add(Activation(\"relu\"))\n    \n    model.add(Dense(8192, input_dim=noise_dim))\n    model.add(BatchNormalization(momentum=0.8))\n    model.add(Activation(\"relu\"))\n    \n    model.add(Reshape((8, 8, 128)))\n    \n    model.add(UpSampling2D((2, 2)))\n    model.add(Conv2D(64, (2, 2), padding='same', \n                     kernel_initializer=RandomNormal(0, 0.02)))\n    model.add(BatchNormalization(momentum=0.8))\n    model.add(LeakyReLU(0.2))\n    model.add(UpSampling2D((2, 2)))\n    model.add(Conv2D(64, (2, 2), padding='same', \n                     kernel_initializer=RandomNormal(0, 0.02)))\n    model.add(BatchNormalization(momentum=0.8))\n    model.add(LeakyReLU(0.2))\n    model.add(UpSampling2D((2, 2)))\n    model.add(Conv2D(channel, (3, 3), padding='same', activation = \"tanh\", \n                     kernel_initializer=RandomNormal(0, 0.02)))\n    \n    return model","fef0e087":"generator = buildGenerator()\ngenerator.summary()\n# plot the model\nplot_model(generator, to_file='generator_plot.png', show_shapes=True, show_layer_names=True)","6b376a8c":"def buildDiscriminator():\n    model = Sequential()\n    \n    model.add(Conv2D(64, (5, 5), strides=2, padding='same', \n                     kernel_initializer=RandomNormal(0, 0.02), \n                     input_shape=(width, height, channel)))\n    model.add(LeakyReLU(0.2))\n\n\n    model.add(Conv2D(64, (5, 5), strides=2, padding='same', \n                     kernel_initializer=RandomNormal(0, 0.02), \n                     input_shape=(width, height, channel)))\n    model.add(LeakyReLU(0.2))\n    \n    model.add(Conv2D(128, (5, 5), strides=2,padding='same', \n                     kernel_initializer=RandomNormal(0, 0.02)))\n    model.add(LeakyReLU(0.2))\n    \n    model.add(Flatten())\n    \n    model.add(Dense(256))\n    model.add(LeakyReLU(0.2))\n    \n    model.add(Dropout(0.5))\n\n    \n    model.add(Dense(1, activation='sigmoid'))\n    \n    model.compile(loss='binary_crossentropy', optimizer=disc_optimizer)\n    return model","71d084da":"discriminator = buildDiscriminator()\ndiscriminator.summary()\n# plot the model\nplot_model(discriminator, to_file='discriminator_plot.png', show_shapes=True, show_layer_names=True)","b4e55538":"noise = Input(shape=(noise_dim,))\nfake_data = generator(noise)\ndiscriminator.trainable = False\noutput = discriminator(fake_data)\ngan = Model(noise, output)\ngan.compile(loss='binary_crossentropy', optimizer=gen_optimizer)","30c756f7":"gan.summary()\n# plot the model\nplot_model(gan, to_file='gan_plot.png', show_shapes=True, show_layer_names=True)","06063a21":"fixed_noise = np.random.normal(0, 1, size=(100, noise_dim))","6a86165d":"def show_generated_fabric(title, epoch):\n    imgs = generator.predict(fixed_noise)\n    imgs = 0.5 * imgs + 0.5\n    plt.figure(figsize=(11,11))\n    \n    i = 1\n    for img in imgs:\n        plt.subplot(10, 10, i)\n        plt.imshow(img.reshape((height,width,channel)))\n        plt.axis('off')\n        i+=1\n    plt.suptitle(title, fontsize = 25)\n    plt.savefig(str(epoch+1)+\".png\", transparent=True)\n    plt.show()","6ae87bcb":"epochs = 500\nbatch_size = 128\nsteps_per_epoch = len(X)\/\/batch_size","ced55bd0":"for epoch in range(epochs):\n    for batch in range(steps_per_epoch):\n        input_gen = np.random.normal(0, 1, size=(batch_size, noise_dim))\n        fake_data = generator.predict(input_gen)\n        \n        real_data = X[np.random.randint(0, X.shape[0], size=batch_size)]\n        real_data = real_data.reshape((batch_size, width, height, channel))\n        \n        input_disc = np.concatenate((real_data, fake_data))\n\n        label_disc = np.zeros(2*batch_size)\n        label_disc[:batch_size] = 0.9\n        label_disc[batch_size:] = 0.1\n        loss_disc = discriminator.train_on_batch(input_disc, label_disc)\n\n        label_gen = np.ones(batch_size)\n        loss_gen = gan.train_on_batch(input_gen, label_gen)\n\n    print(\"epoch: \", epoch)\n    print(\"discriminator loss: \", loss_disc)\n    print(\"generator loss: \", loss_gen)\n    print(\"-\"*80)\n    \n    if (epoch+1) % 20 == 0:\n        show_generated_fabric(\"Generated Fabric\", epoch)\n        filename = 'generator_model_%03d.h5' % (epoch+1)\n        generator.save(filename)","52b3e29d":"!zip generated_pics.zip *.png","02257fc2":"!zip models.zip *.h5","32c9d1c5":"from keras.models import load_model\nmodel = load_model('generator_model_440.h5')","3a8671f7":"fixed_noise = np.random.normal(0, 1, size=(100, noise_dim))\nimgs = model.predict(fixed_noise)\nimgs = 0.5 * imgs + 0.5\nplt.figure(figsize=(11,11))\ni = 1\nfor img in imgs:\n    plt.subplot(10, 10, i)\n    plt.imshow(img.reshape((height,width,channel)))\n    plt.axis('off')\n    i+=1\nplt.show()","21901e12":"fixed_noise = np.random.normal(0, 1, size=(100, noise_dim))\nimgs = model.predict(fixed_noise)\nimgs = 0.5 * imgs + 0.5\nplt.figure(figsize=(11,11))\ni = 1\nfor img in imgs:\n    plt.subplot(10, 10, i)\n    plt.imshow(img.reshape((height,width,channel)))\n    plt.axis('off')\n    i+=1\nplt.show()","eb24d8ce":"# define the standalone discriminator model\ndef define_discriminator(in_shape=(64,64,3)):\n    # weight initialization\n    init = RandomNormal(0, 0.02)\n\n    model = Sequential()\n    # normal\n    model.add(Conv2D(64, (5,5), padding='same', input_shape=in_shape))\n    #model.add(BatchNormalization())\n    model.add(LeakyReLU(alpha=0.2))\n    # downsample\n    model.add(Conv2D(128, (5,5), strides=(2,2), padding='same'))\n    #model.add(BatchNormalization())\n    model.add(LeakyReLU(alpha=0.2))\n    # downsample\n    model.add(Conv2D(128, (5,5), strides=(2,2), padding='same'))\n    #model.add(BatchNormalization())\n    model.add(LeakyReLU(alpha=0.2))\n    # downsample\n    model.add(Conv2D(128, (5,5), strides=(2,2), padding='same'))\n    #model.add(BatchNormalization())\n    model.add(LeakyReLU(alpha=0.2))\n    # downsample\n    model.add(Conv2D(128, (5,5), strides=(2,2), padding='same'))\n    #model.add(BatchNormalization())\n    model.add(LeakyReLU(alpha=0.2))\n    # classifier\n    model.add(Flatten())\n    model.add(Dropout(0.4))\n    model.add(Dense(1, activation='sigmoid'))\n    # compile model\n    opt = Adam(lr=0.0002, beta_1=0.5)\n    model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])\n    return model\n# define model\nmodel = define_discriminator()\n# summarize the model\nmodel.summary()\n# plot the model\nplot_model(model, to_file='discriminator_plot.png', show_shapes=True, show_layer_names=True)\n\n# define the standalone generator model\ndef define_generator(latent_dim):\n    # weight initialization\n    #init = RandomNormal(stddev=0.02)\n    model = Sequential()\n    # foundation for 4x4 image\n    n_nodes = 4*4*128\n    model.add(Dense(n_nodes, input_dim=latent_dim))\n    model.add(LeakyReLU(alpha=0.2))\n    model.add(Reshape((4, 4, 128)))\n    # upsample to 8x8\n    model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))\n    model.add(BatchNormalization())\n    model.add(LeakyReLU(alpha=0.2))\n    # upsample to 16x16\n    model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))\n    model.add(BatchNormalization())\n    model.add(LeakyReLU(alpha=0.2))\n    # upsample to 32x32\n    model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))\n    model.add(BatchNormalization())\n    model.add(LeakyReLU(alpha=0.2))\n    # upsample to 64x64\n    model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))\n    model.add(BatchNormalization())\n    model.add(LeakyReLU(alpha=0.2))\n    # output layer\n    model.add(Conv2D(3, (5,5), activation='tanh', padding='same'))\n    return model\n# define the size of the latent space\nlatent_dim = 100\n# define the generator model\nmodel = define_generator(latent_dim)\n# summarize the model\nmodel.summary()\n# plot the model\nplot_model(model, to_file='generator_plot.png', show_shapes=True, show_layer_names=True)\n# define the combined generator and discriminator model, for updating the generator\ndef define_gan(g_model, d_model):\n    # make weights in the discriminator not trainable\n    d_model.trainable = False\n    # connect them\n    model = Sequential()\n    # add generator\n    model.add(g_model)\n    # add the discriminator\n    model.add(d_model)\n    # compile model\n    opt = Adam(lr=0.0002, beta_1=0.5)\n    model.compile(loss='binary_crossentropy', optimizer=opt)\n    return model\nlatent_dim = 100\n# create the discriminator\nd_model = define_discriminator()\n# create the generator\ng_model = define_generator(latent_dim)\n# create the gan\ngan_model = define_gan(g_model, d_model)\n# summarize gan model\ngan_model.summary()\n# plot gan model\nplot_model(gan_model, to_file='gan_plot.png', show_shapes=True, show_layer_names=True)","7f97ad74":"# Processing the images","d25ec361":"**I loved model 440th model so I am choosing that model**","6a736d04":"# Training the model","8e81d461":"# Defining the model","ba4397d0":"**Making the range between [-1.1]**","1fd42f40":"# Special Thanks to this github project.\n**I took several idea from here**\nhttps:\/\/github.com\/Suji04\/NormalizedNerd\/tree\/master\/Alphabet%20GAN\n","16882f36":"**Below is the model I first tired but didn't work.Suffered from convergence failure.If anyone know whats wrong with this model,plz let me know**","b63f27fe":"# **Visualizing the dataset.**","d54b4b39":"# **I have recently learned about GAN.So if I made any kind of mistake or if you have any suggestions or want to share great resources about GAN, please let me know. I will be very glad.**","573569db":"# Another model that failed"}}