{"cell_type":{"4a966aad":"code","816cabe9":"code","eac086ad":"code","a49116d4":"code","abd21b4a":"code","3b7adf84":"code","6333f189":"code","f11bacd2":"code","b600f0c2":"code","8587d570":"code","1a1137bd":"code","5a2f434e":"code","f5df3faf":"code","ad4a5c49":"code","d611d222":"code","998f171f":"markdown"},"source":{"4a966aad":"import pandas as pd\nimport numpy as np\nimport pickle\nimport torch\nfrom matplotlib import pyplot as plt\n%matplotlib inline","816cabe9":"with open('..\/input\/fastai-cell-tile-prototyping-3\/tta.pickle', 'rb') as handle:\n    preds = pickle.load(handle)","eac086ad":"class_means = preds.mean(dim=0).numpy()\nlabels = range(19)\nplt.bar(labels, class_means)\nplt.show()","a49116d4":"row_max = preds.max(dim=-1).values.numpy()\nplt.hist(row_max, bins=100)\nplt.show()","abd21b4a":"fig = plt.figure(figsize=(16, 12))\n\nfor i in labels:\n    ax = fig.add_subplot(5,4,i+1)\n    ax.hist(preds[:,i].numpy(), bins=100)\n    ax.set_title(i)\n\nplt.show()","3b7adf84":"cell_df = pd.read_csv('..\/input\/fastai-cell-tile-prototyping-3\/cell_df.csv')\ncell_df.head()\ncell_df['cls'] = ''","6333f189":"threshold = 0.0\n\nfor i in range(preds.shape[0]): \n    p = torch.nonzero(preds[i] > threshold).squeeze().numpy().tolist()\n    if type(p) != list: p = [p]\n    if len(p) == 0: cls = [(preds[i].argmax().item(), preds[i].max().item())]\n    else: cls = [(x, preds[i][x].item()) for x in p]\n    cell_df['cls'].loc[i] = cls","f11bacd2":"def combine(r):\n    cls = r[0]\n    enc = r[1]\n    classes = [str(c[0]) + ' ' + str(c[1]) + ' ' + enc for c in cls]\n    return ' '.join(classes)\n\ncombine(cell_df[['cls', 'enc']].loc[24])","b600f0c2":"cell_df['pred'] = cell_df[['cls', 'enc']].apply(combine, axis=1)\ncell_df.head()","8587d570":"subm = cell_df.groupby(['image_id'])['pred'].apply(lambda x: ' '.join(x)).reset_index()\n# subm = subm.loc[3:]\nsubm.head()","1a1137bd":"sample_submission = pd.read_csv('..\/input\/hpa-single-cell-image-classification\/sample_submission.csv')\nsample_submission.head()","5a2f434e":"sub = pd.merge(\n    sample_submission,\n    subm,\n    how=\"left\",\n    left_on='ID',\n    right_on='image_id',\n)\nsub.head()","f5df3faf":"def isNaN(num):\n    return num != num\n\nfor i, row in sub.iterrows():\n    if isNaN(row['pred']): continue\n    sub.PredictionString.loc[i] = row['pred']","ad4a5c49":"sub = sub[sample_submission.columns]\nsub.head()","d611d222":"sub.to_csv('submission.csv', index=False)","998f171f":"To Rapidly protype a a suitable solution , I have taken this notebook as reference to cultivate later interative solutions\n\n[link](https:\/\/www.kaggle.com\/thedrcat\/fastai-quick-submission-template)\n\n"}}