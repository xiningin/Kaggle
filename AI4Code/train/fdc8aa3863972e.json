{"cell_type":{"c9a8cef1":"code","2b07fdd2":"code","2936b969":"code","2b65438e":"code","c49a353e":"code","23f2dffa":"code","48dc3eb2":"code","2deacbf3":"code","43cbf1be":"code","09801a47":"code","2a98ba6f":"code","39593166":"code","a052aab5":"code","e944b3c0":"code","bbad262a":"code","3d79c60e":"markdown","67bf015e":"markdown","c58d59a8":"markdown","28fd02aa":"markdown","b1724284":"markdown","db6da7b5":"markdown"},"source":{"c9a8cef1":"import numpy as np \nimport pandas as pd \nimport glob\nimport os\nimport matplotlib.pyplot as plt\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot\nimport seaborn as sns","2b07fdd2":"sub_715 = pd.read_csv('..\/input\/brain-tumor-3d-blender-csv\/RSNA_Public\/715.csv')\nsub_684 = pd.read_csv('..\/input\/brain-tumor-3d-blender-csv\/RSNA_Public\/684.csv')\nsub_683 = pd.read_csv('..\/input\/brain-tumor-3d-blender-csv\/RSNA_Public\/683.csv')\nsub_674 = pd.read_csv('..\/input\/brain-tumor-3d-blender-csv\/RSNA_Public\/674.csv')","2936b969":"sub_715=sub_715.sort_values(by=['BraTS21ID'], ascending=True)\nsub_715=sub_715.reset_index(drop=True)\nsub_715.head(3)","2b65438e":"sub_684=sub_684.sort_values(by=['BraTS21ID'], ascending=True)\nsub_684=sub_684.reset_index(drop=True)\nsub_684.head(3)","c49a353e":"sub_683=sub_683.sort_values(by=['BraTS21ID'], ascending=True)\nsub_683=sub_683.reset_index(drop=True)\nsub_683.head(3)","23f2dffa":"sub_674=sub_674.sort_values(by=['BraTS21ID'], ascending=True)\nsub_674=sub_674.reset_index(drop=True)\nsub_674.head(3)","48dc3eb2":"# dict for the dataframes and their names\ndfs = {\"sub_715\" : sub_715, \"sub_684\": sub_684, \"sub_683\" : sub_683, \"sub_674\" : sub_674}\n\n# plot the data\nfig = go.Figure()\nfor i in dfs:\n    fig = fig.add_trace(go.Scatter(x = dfs[i][\"BraTS21ID\"],\n                                   y = dfs[i][\"MGMT_value\"], \n                                   mode=\"markers\",\n                                   name = i))\n    fig = fig.add_trace(\n        go.Scatter(\n            x=[0, 1010],\n            y=[0.5, 0.5],\n            mode=\"lines\",\n            line=go.scatter.Line(color=\"gray\"),\n            showlegend=False)\n    )\n\nfig.update_layout(\n    width = 700,\n    height = 500\n)\nfig.show()\n","2deacbf3":"Finalsubmission = sub_715.copy()\nFinalsubmission['MGMT_value'] =\\\nsub_715['MGMT_value'].values*0.605+\\\nsub_684['MGMT_value'].values*0.185+\\\nsub_683['MGMT_value'].values*0.105+\\\nsub_674['MGMT_value'].values*0.105","43cbf1be":"Finalsubmission['BraTS21ID'] = Finalsubmission['BraTS21ID'].apply(lambda x: str(x).zfill(5))","09801a47":"Finalsubmission.head(3)","2a98ba6f":"Fsubmission = Finalsubmission.set_index('BraTS21ID')\nFsubmissionDict = Fsubmission['MGMT_value'].to_dict()","39593166":"listOfStudyPaths = glob.glob('..\/input\/rsna-miccai-brain-tumor-radiogenomic-classification\/test\/*')\nlistOfStudies = [eachPath.split('\/')[-1] for eachPath in listOfStudyPaths]\n\npredList = []\nfor eachStudy in listOfStudies:\n    if eachStudy not in FsubmissionDict:\n        predList.append('0.500')\n    else:\n        score = float(FsubmissionDict[eachStudy])\n        predList.append(score)\n        \nsubmission = pd.DataFrame({'BraTS21ID':listOfStudies,'MGMT_value':predList})\n","a052aab5":"submission=submission.sort_values(by=['BraTS21ID'], ascending=True)\nsubmission=submission.reset_index(drop=True)\nsubmission.head(5)","e944b3c0":"submission.to_csv('submission.csv', index=False)","bbad262a":"plt.figure(figsize=(5, 5))\nplt.hist(submission[\"MGMT_value\"]);","3d79c60e":"## Other notebooks in this competition\n\n* [Brain Tumor 3D [Training]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/brain-tumor-3d-training) \n* [Brain Tumor 3D [Inference]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/brain-tumor-3d-inference)\n* [Brain Tumor 3D [EDA]](https:\/\/www.kaggle.com\/ammarnassanalhajali\/brain-tumor-3d-eda)\n\n\n## Please if this kernel is useful, <font color='red'>please upvote !!<\/font>","67bf015e":"# blending\nGenerally, blending uses many separate models to compute the initial prediction. the goal of mixing the predictions in some way is to achieve an even better final prediction.","c58d59a8":"# Please if this kernel is useful, <font color='red'>please upvote !!<\/font>","28fd02aa":"#### <font color='red'>Important Note:<\/font> Please don't use this notebook as a final submit, that will lead you to get a low private score because I used a 0.5 as score for all points in the private data.\n### In this notebook, I just want to explain the blending and how it can improve the score.","b1724284":"\n# Solutions for blending\n\n1. https:\/\/www.kaggle.com\/rluethy\/efficientnet3d-with-one-mri-type (Score=0.684)\n1. https:\/\/www.kaggle.com\/ammarnassanalhajali\/brain-tumor-3d-inference (Score=0.683)\n1. https:\/\/www.kaggle.com\/syerwin\/efficientnet3d-with-one-mri-type (Score=0.674)\n1. https:\/\/www.kaggle.com\/hijest\/1-rsna-miccai-not-smart-ensemble  (Score=0.715)\n\n","db6da7b5":"# \ud83e\udde0Brain Tumor 3D blender "}}