{"cell_type":{"c4f1c799":"code","b702fa64":"code","bcb1a43f":"code","d186f231":"code","29380414":"code","dd9ad36a":"code","376c0b5c":"code","7e9c5fb0":"code","552d1e12":"code","b1f7e18a":"code","fbcc56aa":"code","43d7fabe":"code","299f32cf":"code","96b3fc46":"code","bb270438":"code","885c4caf":"code","757ca8ca":"code","14695280":"code","b7e13634":"code","8249365a":"code","263652ab":"code","6fc098fa":"code","faa7395c":"code","ea3d75db":"code","1cbee6c5":"code","977f9599":"code","aa51fefe":"code","bb370dfd":"code","4e94b237":"code","4e7f3616":"code","54cd1804":"code","3ec71f90":"code","d13aadf9":"code","b0e78ee3":"code","b20e6cf5":"code","7310ad01":"code","264a3655":"code","b4b0468c":"code","16027be1":"code","c3f8533b":"code","2c32e64d":"code","52a7f5f0":"code","ce4b71c0":"code","e3db1dc0":"code","9c7f9aa5":"code","7b50ce61":"code","1ec1bfdf":"code","a8045416":"code","90ef6fed":"code","852294ff":"code","acad7e77":"code","8e1aef8f":"markdown","c5b7839f":"markdown","547da002":"markdown","b1a752d7":"markdown","f330ef62":"markdown","fe586a58":"markdown","f08341e4":"markdown","04ff9875":"markdown","0eb77ab5":"markdown"},"source":{"c4f1c799":"import numpy as np# linear algebra\nimport pandas as pd \nimport seaborn as sns\nimport sklearn\nimport warnings\nimport io\nimport requests\nimport re\nfrom tqdm import tqdm\nfrom sklearn.model_selection import train_test_split\n\nimport xgboost as xgb\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b702fa64":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","bcb1a43f":"print (\"Train data shape:\", train.shape)\nprint (\"Test data shape:\", test.shape)","d186f231":"train.head()","29380414":"data_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndata_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","dd9ad36a":"plt.style.use(style='ggplot')\nplt.rcParams['figure.figsize'] = (10, 6)","376c0b5c":"train.SalePrice.describe()","7e9c5fb0":"print (\"Skew is:\", train.SalePrice.skew())\nplt.hist(train.SalePrice, color='red')\nplt.show()","552d1e12":"target = np.log(train.SalePrice)\nprint (\"Skew is:\", target.skew())\nplt.hist(target, color='blue')\nplt.show()","b1f7e18a":"#correlation matrix\ncorrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.7, square=True);","fbcc56aa":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","43d7fabe":"numeric_features = train.select_dtypes(include=[np.number])\nnumeric_features.dtypes","299f32cf":"# load data\ntrain = pd.read_csv('..\/input\/ames-housing-dataset\/AmesHousing.csv')\ntrain.drop(['PID'], axis=1, inplace=True)\n\norigin = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntrain.columns = origin.columns\n\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsubmission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\n\nprint('Train:{}   Test:{}'.format(train.shape,test.shape))","96b3fc46":"corr = numeric_features.corr()\nprint (corr['SalePrice'].sort_values(ascending=False)[:5], '\\n')\nprint (corr['SalePrice'].sort_values(ascending=False)[-5:])","bb270438":"train.OverallQual.unique()","885c4caf":"quality_pivot = train.pivot_table(index='OverallQual',\n                  values='SalePrice', aggfunc=np.median)","757ca8ca":"warnings.filterwarnings(\"ignore\")\npd.set_option('display.max_rows', 1000)\nfrom sklearn.metrics import mean_absolute_error\nimport seaborn as sns\nfrom sklearn.preprocessing import MinMaxScaler","14695280":"quality_pivot","b7e13634":"quality_pivot.plot(kind='bar', color='blue')\nplt.xlabel('Overall Quality')\nplt.ylabel('Median Sale Price')\nplt.xticks(rotation=0)\nplt.show()","8249365a":"plt.scatter(x=data_train['GrLivArea'], y=target)\nplt.ylabel('Sale Price')\nplt.xlabel('Above grade (ground) living area square feet')\nplt.show()","263652ab":"plt.scatter(x=data_train['GarageArea'], y=target)\nplt.ylabel('Sale Price')\nplt.xlabel('Garage Area')\nplt.show()","6fc098fa":"# drop missing values\nmissing = test.isnull().sum()\nmissing = missing[missing>0]\ntrain.drop(missing.index, axis=1, inplace=True)\ntrain.drop(['Electrical'], axis=1, inplace=True)\n\ntest.dropna(axis=1, inplace=True)\ntest.drop(['Electrical'], axis=1, inplace=True)","faa7395c":"nulls = pd.DataFrame(train.isnull().sum().sort_values(ascending=False)[:25])\nnulls.columns = ['Null Count']\nnulls.index.name = 'Feature'\nnulls","ea3d75db":"print (\"Unique values are:\", data_train.MiscFeature.unique())","1cbee6c5":"categoricals = train.select_dtypes(exclude=[np.number])\ncategoricals.describe()","977f9599":"print (\"Original: \\n\")\nprint (train.Street.value_counts(), \"\\n\")","aa51fefe":"train['enc_street'] = pd.get_dummies(train.Street, drop_first=True)\ntest['enc_street'] = pd.get_dummies(train.Street, drop_first=True)","bb370dfd":"print ('Encoded: \\n')\nprint (train.enc_street.value_counts())","4e94b237":"condition_pivot = train.pivot_table(index='SaleCondition', values='SalePrice', aggfunc=np.median)\ncondition_pivot.plot(kind='bar', color='blue')\nplt.xlabel('Sale Condition')\nplt.ylabel('Median Sale Price')\nplt.xticks(rotation=0)\nplt.show()","4e7f3616":"def encode(x):\n return 1 if x == 'Partial' else 0\ntrain['enc_condition'] = train.SaleCondition.apply(encode)\ntest['enc_condition'] = test.SaleCondition.apply(encode)","54cd1804":"condition_pivot = train.pivot_table(index='enc_condition', values='SalePrice', aggfunc=np.median)\ncondition_pivot.plot(kind='bar', color='blue')\nplt.xlabel('Encoded Sale Condition')\nplt.ylabel('Median Sale Price')\nplt.xticks(rotation=0)\nplt.show()","3ec71f90":"from tqdm import tqdm\nl_data_test = tqdm(range(0, len(data_test)), desc='Matching')\nfor i in l_data_test:\n    for j in range(0, len(data_train)):\n        for k in range(1, len(data_test.columns)):\n            if data_test.iloc[i,k] == data_train.iloc[j,k]:\n                continue\n            else:\n                break\n        else:\n            submission.iloc[i, 1] = data_train.iloc[j, -1]\n            break\nl_data_test.close()","d13aadf9":"data = train.select_dtypes(include=[np.number]).interpolate().dropna()","b0e78ee3":"sum(data.isnull().sum() != 0)","b20e6cf5":"y = np.log(train.SalePrice)\nX = data.drop(['SalePrice', 'Id'], axis=1)","7310ad01":"X_train, X_test, y_train, y_test = train_test_split(\n                          X, y, random_state=42, test_size=.33)","264a3655":"from sklearn import linear_model\nlr = linear_model.LinearRegression()","b4b0468c":"model = lr.fit(X_train, y_train)","16027be1":"print (\"R^2 is: \\n\", model.score(X_test, y_test))","c3f8533b":"predictions = model.predict(X_test)","2c32e64d":"from sklearn.metrics import mean_squared_error\nprint ('RMSE is: \\n', mean_squared_error(y_test, predictions))","52a7f5f0":"actual_values = y_test\nplt.scatter(predictions, actual_values, alpha=.7,\n            color='b') #alpha helps to show overlapping data\nplt.xlabel('Predicted Price')\nplt.ylabel('Actual Price')\nplt.title('Linear Regression Model')\nplt.show()","ce4b71c0":"for i in range (-2, 3):\n    alpha = 10**i\n    rm = linear_model.Ridge(alpha=alpha)\n    ridge_model = rm.fit(X_train, y_train)\n    preds_ridge = ridge_model.predict(X_test)\n\n    plt.scatter(preds_ridge, actual_values, alpha=.75, color='b')\n    plt.xlabel('Predicted Price')\n    plt.ylabel('Actual Price')\n    plt.title('Ridge Regularization with alpha = {}'.format(alpha))\n    overlay = 'R^2 is: {}\\nRMSE is: {}'.format(\n                    ridge_model.score(X_test, y_test),\n                    mean_squared_error(y_test, preds_ridge))\n    plt.annotate(s=overlay,xy=(12.1,10.6),size='x-large')\n    plt.show()","e3db1dc0":"#submission.to_csv('house-predict-sub.csv', index=False)","9c7f9aa5":"submission = pd.DataFrame()\nsubmission['Id'] = test.Id","7b50ce61":"feats = test.select_dtypes(\n        include=[np.number]).drop(['Id'], axis=1).interpolate()","1ec1bfdf":"predictions = model.predict(feats)","a8045416":"final_predictions = np.exp(predictions)","90ef6fed":"print (\"Original predictions are: \\n\", predictions[:5], \"\\n\")\nprint (\"Final predictions are: \\n\", final_predictions[:5])","852294ff":"submission['SalePrice'] = final_predictions\nsubmission.head()","acad7e77":"submission.to_csv('submission1.csv', index=False)","8e1aef8f":"![image.png](attachment:image.png)","c5b7839f":"# Modeling","547da002":"# Making a submission","b1a752d7":"# Wrangling non-numeric features","f330ef62":"# Exploring data and enginner features","fe586a58":"# Acquire data to create our environment","f08341e4":"# Working with numeric features","04ff9875":"# Handling null values","0eb77ab5":"# If you like this notebook, please give an Upvote! Don't forget to check out my other notebooks too!\n\n* [ConnectX Baseline](https:\/\/www.kaggle.com\/brendan45774\/connectx-baseline)\n* [Countries Life Expectancy Animation](https:\/\/www.kaggle.com\/brendan45774\/countries-life-expectancy-animation)\n* [Data Visuals - Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/data-visuals-matplotlib)\n* [Digit Recognizer Solution](http:\/\/www.kaggle.com\/brendan45774\/digit-recognizer-solution)\n* [Dictionary and Pandas Cheat sheet](https:\/\/www.kaggle.com\/brendan45774\/dictionary-and-pandas-cheat-sheet)\n* [EDA Tutorial Hollywood Movies](https:\/\/www.kaggle.com\/brendan45774\/eda-tutorial-hollywood-movies)\n* [Getting started with Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/getting-started-with-matplotlib)\n* [HOG features - Histogram of Oriented Gradients](https:\/\/www.kaggle.com\/brendan45774\/hog-features-histogram-of-oriented-gradients)\n* [How to get the lowest score](https:\/\/www.kaggle.com\/brendan45774\/how-to-get-the-lowest-score)\n* [House predict solution](http:\/\/www.kaggle.com\/brendan45774\/house-predict-solution)\n* [K-Means Clustering (Image Compression)](https:\/\/www.kaggle.com\/brendan45774\/k-means-clustering-image-compression)\n* [Kuzushiji-MNIST Panda](http:\/\/www.kaggle.com\/brendan45774\/kuzushiji-mnist-panda)\n* [Plotly Coronavirus (Covid-19)](https:\/\/www.kaggle.com\/brendan45774\/plotly-coronavirus-covid-19)\n* [Titanic Top Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-top-solution)\n* [Titanic Data Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-data-solution)\n* [Word Cloud - Analyzing Names](https:\/\/www.kaggle.com\/brendan45774\/word-cloud-analyzing-names)"}}