{"cell_type":{"4b8d87c0":"code","273f0b58":"code","b9e91d04":"code","90bc2e0c":"code","e149a0b7":"code","2c8cb65b":"code","ecdd498b":"markdown"},"source":{"4b8d87c0":"import numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")   \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go    \n\n!pip install openpyxl","273f0b58":"df = pd.read_excel('\/kaggle\/input\/hex-plot\/hexmap_plots.xlsx', sheet_name='india state')\ndf.loc[df.State == 'Delhi', 'State'] = 'NCT Delhi'\n\ndf.head()","b9e91d04":"df2 = pd.read_csv('\/kaggle\/input\/india-national-family-health-survey-nfhs5\/National Family Health Survey (NFHS-5) 2019-20.csv')\ntuples = [('S.No.',''),\n          ('Indicator_Code',''),\n          ('Indicators',''),\n          ('Sub Indictors',''),\n          ('NFHS-5','Urban'),\n          ('NFHS-5','Rural'),\n          ('NFHS-5','Total'),\n          ('NFHS-4','Total'),\n          ('State\/UT', \"\")]\n           \nFinal=pd.MultiIndex.from_tuples(tuples)\ndf2.columns = Final\ndf2.drop(0, inplace=True)\ndf2.drop('S.No.', inplace=True, axis=1)\ndf2.head(2)","90bc2e0c":"df3 = df2[df2.Indicator_Code == 4.0]\ndf_final = df.merge(df3, right_on='State\/UT', left_on='State', how='left')\ndf_final[('NFHS-5', 'Total')] = df_final[('NFHS-5', 'Total')].astype('float')\ndf_final[('NFHS-4', 'Total')] = df_final[('NFHS-5', 'Total')].astype('float')\nfig1 = go.Figure()\n\nfig1.add_traces(go.Scatter(\n    x=df_final.Column, y = df_final.Row,\n    text = [\"<br>  \".join([str(i), str(j)]) for i, j in zip(df_final.State, df_final[('NFHS-5', 'Total')])],\n    marker_symbol=14,\n    marker_line_color=\"white\",\n    marker_color=df_final[('NFHS-5', 'Total')],\n    hovertemplate = '&nbsp; %{text}<\/b>&nbsp;<extra><\/extra>',\n    marker_colorscale=[[0, 'rgb(211, 234, 231)'], [0.5, 'rgb(57, 121, 173)'], [1, 'rgb(7, 69, 117)']],\n    marker_line_width=0.5, marker_size=50, mode='markers'))\n\nfor i, row in df.iterrows():\n    fig1.add_annotation(\n            x=row['Column'], y = row['Row'],\n            xref=\"x\",yref=\"y\",\n            text=row['ABB'],\n            showarrow=False,\n            font=dict(family=\"Rockwell, monospace\",size=12,color=\"black\"),\n            ax=20, ay=-30,\n            opacity=0.9\n            )\n\nfig1.update_layout(clickmode='event+select',\n                   title = df2[df2.iloc[:,0] == 3.0].iloc[:, 2].unique().tolist()[0],\n                   font=dict(family=\"serif\", size=12, color='white'),\n                  yaxis = dict(autorange=\"reversed\",fixedrange=True,showgrid=False, showticklabels=False, showline=False,\n                              zeroline = False),\n                  xaxis = dict(fixedrange = True,showgrid = False,showticklabels=False, showline=False,zeroline = False),\n                  hoverlabel=dict(bgcolor=\"white\",font_size=15,  font_family=\"Rockwell\"),\n                  margin=dict(t=50, l=0, r=0, b=0, pad = 0),\n                  height=530, width=450,\n                  plot_bgcolor='#2E3D43',paper_bgcolor='#2E3D43', )\nfig1.show()","e149a0b7":"def shift(x, y):\n    if isinstance(x, float):\n        x = x\n    else:\n        x = max(x)\n    return (x-y)*9\/100\n\n\ndef get_graph(df2,code):\n    \n    df2['State\/UT'] = df2['State\/UT'].replace(['Dadra & Nagar Haveli and Daman & Diu', \"Andaman & Nicobar Islands\"], ['DNH & DD', 'AN Islands'])\n    df_indi = df2[df2[('Indicator_Code', '')] == code]\n    df_indi.iloc[:, 5] = df_indi.iloc[:, 5].apply(lambda x: str(x).replace(',', \"\").replace(\"na\", '0').replace(\"*\", '0').replace('(', \"\").replace(')', \"\")).astype('float')\n    df_indi[('NFHS-5', 'Total')] = df_indi[('NFHS-5', 'Total')].astype('float')\n    \n    len_decimal = len(set(df_indi.iloc[:,5].apply(lambda x: str(x).split('.')[-1]).tolist()))\n    if len_decimal == 1:\n        df_indi.iloc[:,5] = df_indi.iloc[:,5].apply(lambda x: int(x))\n\n    \n    fig = go.Figure()\n    \n    if sum(df_indi[('NFHS-4', 'Total')] == 'na') >30:\n        \n        df_final = df_indi.sort_values(('NFHS-5', 'Total'), ascending=True)\n        \n        india_data = df_final[df_final[('State\/UT', \"\")] == 'India']\n        df_final.drop(index = df_final[df_final[('State\/UT', \"\")] == 'India'].index, inplace=True)\n        df_final = pd.concat([df_final, india_data])\n        \n        labels = df_final['State\/UT'].tolist()\n        x_data = df_final.iloc[:, -3].to_numpy()\n        \n        for i in range(0, df_final.shape[0]):\n            fig.add_trace(go.Scatter(\n                x=[x_data[i]],\n                y=[i+1],\n                mode='markers',\n                marker=dict(color=['rgb(137, 123, 211)'], size=10)\n            ))\n            \n        annotations = [] \n        for i in range(0, df_final.shape[0]):\n\n            annotations.append(dict(\n                    text=str((x_data[i])),\n                    y = i+1,\n                    x = x_data[i]+shift(x_data[-2], x_data[0]),\n                    showarrow=False,\n                    font_size=10\n                ))\n            \n        annotations.append(dict(\n                    x=x_data[-1], y = df_final.shape[0], xref=\"x\", yref = 'y', text='NFHS-5<br>(2019-20)', showarrow=True,\n                    font=dict(family=\"serif\", size=12, color=\"rgb(137, 123, 211)\"),\n                    align=\"center\", arrowhead=0, arrowsize=0.3, arrowwidth=2, arrowcolor=\"rgb(137, 123, 211)\",\n                    ax=-30, ay=-35, bordercolor=\"#c7c7c7\", borderwidth=0, borderpad=4))  \n\n        annotations.append(dict(\n                    x=1, y =1.075, xref=\"paper\", yref=\"paper\", text='NFHS-4(2015-16) data not available ', showarrow=False,\n                    font=dict(family=\"serif\", size=12, color=\"rgb(91, 171, 171)\"),\n                    align=\"center\"))  \n\n\n    else:\n        df_indi.iloc[:, 6] = df_indi.iloc[:, 6].apply(lambda x: str(x).replace(',', \"\").replace(\"na\", '0').replace(\"*\", '0').replace('(', \"\").replace(')', \"\")).astype('float')\n        df_indi[('NFHS-4', 'Total')] = df_indi[('NFHS-4', 'Total')].astype('float')\n        len_decimal = len(set(df_indi.iloc[:,6].apply(lambda x: str(x).split('.')[-1]).tolist()))\n        if len_decimal == 1:\n            df_indi.iloc[:,6] = df_indi.iloc[:,6].apply(lambda x: int(x))\n        \n        df_final = df_indi.sort_values(('NFHS-5', 'Total'), ascending=True)\n        india_data = df_final[df_final[('State\/UT', \"\")] == 'India']\n        df_final.drop(index = df_final[df_final[('State\/UT', \"\")] == 'India'].index, inplace=True)\n        df_final = pd.concat([df_final, india_data])\n        labels = df_final['State\/UT'].tolist()\n        x_data = df_final.iloc[:, [-3,-2]].to_numpy()\n        for i in range(0, df_final.shape[0]):\n            if x_data[i][0] > x_data[i][1]:\n                fig.add_trace(go.Scatter(x=x_data[i], y=[i+1, i+1], mode='lines',\n                    name=labels[i],\n                    line=dict(color='rgba(137, 123, 211, 0.5)', width=10),\n                ))\n\n                fig.add_trace(go.Scatter(\n                    x=[x_data[i][0], x_data[i][-1]],\n                    y=[i+1, i+1],\n                    mode='markers',\n                    marker=dict(color=['rgb(137, 123, 211)','rgb(91, 171, 171)' ], size=10)\n                ))\n            else:\n                fig.add_trace(go.Scatter(x=x_data[i], y=[i+1, i+1], mode='lines',\n                    name=labels[i],\n                    line=dict(color='rgba(91, 171, 171, 0.5)', width=10),\n                ))\n\n                # endpoints\n                fig.add_trace(go.Scatter(\n                    x=[x_data[i][0], x_data[i][-1]],\n                    y=[i+1, i+1],\n                    mode='markers',\n                    marker=dict(color=['rgb(137, 123, 211)','rgb(91, 171, 171)' ], size=10)\n                ))\n\n\n\n        annotations = []\n\n\n        for i in range(0, df_final.shape[0]):\n            if x_data[i][0] > x_data[i][-1]:\n\n                annotations.append(dict(\n                        text=str((x_data[i][0])),\n                        y = i+1,\n                        x = x_data[i][0]+shift(x_data[-2], x_data[0][-1]),\n                        showarrow=False,\n                        font_size=11\n                    ))\n                annotations.append(dict(\n                        text=str((x_data[i][-1])),\n                        y = i+1,\n                        x = x_data[i][-1]-shift(x_data[-2],  x_data[0][-1]),\n                        showarrow=False,\n                    font_size=11\n                    ))\n            else:\n                annotations.append(dict(\n                        text=str((x_data[i][0])),\n                        y = i+1,\n                        x = x_data[i][0]-shift(x_data[-2],  x_data[0][-1]),\n                        showarrow=False,\n                    font_size=10\n                    ))\n                annotations.append(dict(\n                        text=str((x_data[i][-1])),\n                        y = i+1,\n                        x = x_data[i][-1]+shift(x_data[-2],  x_data[0][-1]),\n                        showarrow=False,\n                    font_size=10\n                    ))\n        if x_data[-1][1] > x_data[-1][0]:\n\n            annotations.append(dict(\n                    x=x_data[-1][-1], y = df_final.shape[0], xref=\"x\", yref = 'y', text='NFHS-4<br>(2015-16)', showarrow=True,\n                    font=dict(family=\"serif\", size=15, color=\"rgb(91, 171, 171)\"),\n                    align=\"center\", arrowhead=0, arrowsize=0.3, arrowwidth=2, arrowcolor=\"rgb(91, 171, 171)\",\n                    ax=40, ay=-35, bordercolor=\"#c7c7c7\", borderwidth=0, borderpad=4))\n            annotations.append(dict(\n                    x=x_data[-1][0], y = df_final.shape[0], xref=\"x\", yref = 'y', text='NFHS-5<br>(2019-20)', showarrow=True,\n                    font=dict(family=\"serif\", size=15, color=\"rgb(137, 123, 211)\"),\n                    align=\"center\", arrowhead=0, arrowsize=0.3, arrowwidth=2, arrowcolor=\"rgb(137, 123, 211)\",\n                    ax=-40, ay=-35, bordercolor=\"#c7c7c7\", borderwidth=0, borderpad=4))\n        else:\n            annotations.append(dict(\n                    x=x_data[-1][-1], y = df_final.shape[0], xref=\"x\", yref = 'y', text='NFHS-4<br>(2015-16)', showarrow=True,\n                    font=dict(family=\"serif\", size=15, color=\"rgb(91, 171, 171)\"),\n                    align=\"center\", arrowhead=0, arrowsize=0.3, arrowwidth=2, arrowcolor=\"rgb(91, 171, 171)\",\n                    ax=-40, ay=-35, bordercolor=\"#c7c7c7\", borderwidth=0, borderpad=4))\n            annotations.append(dict(\n                    x=x_data[-1][0], y = df_final.shape[0], xref=\"x\", yref = 'y', text='NFHS-5<br>(2019-20)', showarrow=True,\n                    font=dict(family=\"serif\", size=15, color=\"rgb(137, 123, 211)\"),\n                    align=\"center\", arrowhead=0, arrowsize=0.3, arrowwidth=2, arrowcolor=\"rgb(137, 123, 211)\",\n                    ax=40, ay=-35, bordercolor=\"#c7c7c7\", borderwidth=0, borderpad=4))\n\n\n        annotations.append(dict(\n                        x=0.62, y = 1.0175, xref=\"paper\", yref = 'paper', text='Increased', showarrow=True,\n                        font=dict(family=\"serif\", size=16, color=\"rgb(137, 123, 211)\"),\n                        align=\"center\", arrowhead=0, arrowsize=0.3, arrowwidth=10, arrowcolor=\"rgba(137, 123, 211, 0.5)\",\n                        axref=\"pixel\", ayref = 'pixel',\n                        ax=70, ay=0, bordercolor=\"#c7c7c7\", borderwidth=0, borderpad=4))\n        annotations.append(dict(\n                    x=0.82, y = 1.0175, xref=\"paper\", yref = 'paper', text='Decreased', showarrow=True,\n                    font=dict(family=\"serif\", size=16, color=\"rgb(91, 171, 171)\"),\n                    align=\"center\", arrowhead=0, arrowsize=0.3, arrowwidth=10, arrowcolor=\"rgba(91, 171, 171, 0.5)\",\n                    axref=\"pixel\", ayref = 'pixel',\n                    ax=70, ay=0, bordercolor=\"#c7c7c7\", borderwidth=0, borderpad=4))\n\n\n    fig.update_layout(annotations=annotations)\n\n    fig.update_traces(\n       hoverinfo='skip'\n    )\n    fig.update_layout(\n        title = df2[df2.iloc[:,0] == code].iloc[:, 2].unique().tolist()[0],\n        font=dict(family=\"serif\", size=12),\n        plot_bgcolor = 'white', paper_bgcolor = 'white',height=800, width=730,\n        xaxis=dict(\n        fixedrange = True,\n            showline=False,\n            showgrid=False,\n            zeroline=False,\n            showticklabels=False,\n            linecolor='rgb(204, 204, 204)',\n\n        ),\n        yaxis=dict(\n        fixedrange = True,\n            showgrid=True,\n            zeroline=False,\n            showline=True,\n            linecolor=\"#EBEBEB\",\n            showticklabels=True,\n            gridcolor=\"#EBEBEB\",\n            tickmode = 'array',\n            ticktext=labels,\n            tickvals = np.arange(1,38).tolist(),\n        ),\n        margin=dict(\n            l=150,\n            r=0,\n            t=50,\n            b=10\n        ),\n        showlegend=False,\n    )\n\n    return fig\n\nget_graph(df2, 1.0)","2c8cb65b":"get_graph(df2, 100.0)","ecdd498b":"Visualization - [HEROKU APP](https:\/\/abhinavk.herokuapp.com\/apps\/nfhs5)\n\n*if server not running, will take 30 sec to run"}}