{"cell_type":{"c366b0d4":"code","c90224f0":"code","bda1fcce":"code","c5e50837":"code","20e3530b":"code","eabde277":"code","d96e37c7":"code","d1ba9bb3":"code","8fb6d8e1":"code","e6f5ecf9":"code","5c5755d5":"code","0549be5b":"code","746d3c8d":"code","9272ade1":"code","d5be5772":"code","0d40647a":"code","dd0ac8a4":"code","692cc686":"code","de84b061":"code","17c647d7":"code","a83a2e30":"code","a75c42f5":"code","2c86aea4":"code","1bfe0855":"code","b9306e84":"code","a337ac25":"code","88de8fd4":"code","5ec867aa":"code","c8324a31":"code","3f2fff58":"code","10a94ade":"code","cd35381f":"code","539da105":"markdown","d27b3092":"markdown","d68b4483":"markdown","bfdd0143":"markdown","45fbc977":"markdown","3485d260":"markdown","1b99e442":"markdown","8ee351aa":"markdown","490286fb":"markdown","7a05b8db":"markdown"},"source":{"c366b0d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import LabelEncoder","c90224f0":"train = pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/test.csv')\nsamp = pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/sample_submission_UVKGLZE.csv')","bda1fcce":"train.head()\n","c5e50837":"\nl = ['Computer Science', 'Physics', 'Mathematics', 'Statistics', 'Quantitative Biology', 'Quantitative Finance']\n\nfor col in l:\n    print(col,':\\n',train[col].value_counts())","20e3530b":"dic = {'CS' :8594,'Phy' :6013,'Math' :5618,'Stats' :5206,'QB' :587,'QF' :249}\n\nvalues = dic.values()\ntotal = sum(values)\npercent_values = [value * 100. \/ total for value in values]\nprint(percent_values)","eabde277":"test = test.drop(['ID'],axis=1)","d96e37c7":"X = train.loc[:,['TITLE','ABSTRACT']]\ny = train.loc[:,l]\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.16, random_state=42)","d1ba9bb3":"y_test.reset_index(drop=True,inplace=True)\nX_test.reset_index(drop=True,inplace=True)","8fb6d8e1":"y1 = np.array(y_train)\ny2 = np.array(y_test)","e6f5ecf9":"\nX_train.replace('[^a-zA-Z]',' ', regex=True, inplace=True)\nX_test.replace('[^a-zA-Z]',' ', regex=True, inplace=True)\n\ntest.replace('[^a-zA-Z]',' ', regex=True, inplace=True)","5c5755d5":"for index in X_train.columns:\n    X_train[index] = X_train[index].str.lower()\n\nfor index in X_test.columns:\n    X_test[index] = X_test[index].str.lower()\n\nfor index in test.columns:\n    test[index] = test[index].str.lower()","0549be5b":"X_train['ABSTRACT'] = X_train['ABSTRACT'].str.replace(r'\\b\\w\\b', '').str.replace(r'\\s+', ' ')\nX_test['ABSTRACT'] = X_test['ABSTRACT'].str.replace(r'\\b\\w\\b', '').str.replace(r'\\s+', ' ')\n\ntest['ABSTRACT'] = test['ABSTRACT'].str.replace(r'\\b\\w\\b', '').str.replace(r'\\s+', ' ')","746d3c8d":"X_train = X_train.replace('\\s+', ' ', regex=True)\nX_test = X_test.replace('\\s+', ' ', regex=True)\n\ntest = test.replace('\\s+', ' ', regex=True)","9272ade1":"import nltk\nnltk.download('punkt')\nnltk.download('wordnet')\nnltk.download('stopwords')\nnltk.download('averaged_perceptron_tagger')\nfrom nltk import sent_tokenize, word_tokenize\nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.corpus import stopwords","d5be5772":"stop_words = set(stopwords.words('english')) \nlen(stop_words)\nX_train['ABSTRACT'] = X_train['ABSTRACT'].apply(lambda x: ' '.join(term for term in x.split() if term not in stop_words))\nX_test['ABSTRACT'] = X_test['ABSTRACT'].apply(lambda x: ' '.join(term for term in x.split() if term not in stop_words))\n\ntest['ABSTRACT'] = test['ABSTRACT'].apply(lambda x: ' '.join(term for term in x.split() if term not in stop_words))","0d40647a":"X_train['combined'] = X_train['TITLE']+' '+X_train['ABSTRACT']\nX_test['combined'] = X_test['TITLE']+' '+X_test['ABSTRACT']\n\ntest['combined'] = test['TITLE']+' '+test['ABSTRACT']","dd0ac8a4":"X_train = X_train.drop(['TITLE','ABSTRACT'],axis=1)\nX_test = X_test.drop(['TITLE','ABSTRACT'],axis=1)\n\ntest = test.drop(['TITLE','ABSTRACT'],axis=1)","692cc686":"X_train.head()","de84b061":"train_lines = []\nfor row in range(0,X_train.shape[0]):\n    train_lines.append(' '.join(str(x) for x in X_train.iloc[row,:]))\n\ntest_lines = []\nfor row in range(0,X_test.shape[0]):\n    test_lines.append(' '.join(str(x) for x in X_test.iloc[row,:]))\n\npredtest_lines = []\nfor row in range(0,test.shape[0]):\n    predtest_lines.append(' '.join(str(x) for x in test.iloc[row,:]))","17c647d7":"X.replace('[^a-zA-Z]',' ', regex=True, inplace=True)\nfor index in X.columns:\n    X[index] = X[index].str.lower()\nX['ABSTRACT'] = X['ABSTRACT'].str.replace(r'\\b\\w\\b', '').str.replace(r'\\s+', ' ')\nX = X.replace('\\s+', ' ', regex=True)\nX['ABSTRACT'] = X['ABSTRACT'].apply(lambda x: ' '.join(term for term in x.split() if term not in stop_words))\nX['combined'] = X['TITLE']+' '+X['ABSTRACT']","a83a2e30":"X = X.drop(['TITLE','ABSTRACT'],axis=1)","a75c42f5":"X_lines = []\nfor row in range(0,X.shape[0]):\n    X_lines.append(' '.join(str(x) for x in X.iloc[row,:]))","2c86aea4":"from sklearn.feature_extraction.text import CountVectorizer\n\ncountvector = CountVectorizer(ngram_range=(4,8),analyzer='char',lowercase=False,strip_accents='unicode')\nX_train_cv = countvector.fit_transform(train_lines)\nX_test_cv = countvector.transform(test_lines)\n\ntest_cv = countvector.transform(predtest_lines)","1bfe0855":"from sklearn.feature_extraction.text import TfidfVectorizer, TfidfTransformer\n\ntfidfvector = TfidfTransformer(sublinear_tf=True,use_idf=True)\n# smooth_idf=False\nX_train_tf = tfidfvector.fit_transform(X_train_cv)\nX_test_tf = tfidfvector.fit_transform(X_test_cv)\n\ntest_tf = tfidfvector.fit_transform(test_cv)","b9306e84":"X_cv = countvector.transform(X_lines)\n\nX_tf = tfidfvector.fit_transform(X_cv)","a337ac25":"from sklearn.svm import LinearSVC\nfrom sklearn.multioutput import MultiOutputClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\n\nmodel = LinearSVC(class_weight='balanced',loss=\"hinge\",fit_intercept=False)\nmodels = MultiOutputClassifier(model)\n\n# text_clf = Pipeline([('tfidf', TfidfVectorizer(min_df=True,smooth_idf=True,sublinear_tf=True,analyzer='char',strip_accents='ascii',token_pattern=r'(?ui)\\\\b\\\\w*[a-z]+\\\\w*\\\\b')),\n#                          ('clf',LinearSVC(loss=\"hinge\",intercept_scaling=1.05 ,class_weight='balanced')),\n#     ])","88de8fd4":"models.fit(X_tf, y)","5ec867aa":"preds = models.predict(X_test_tf)\npreds","c8324a31":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nprint(classification_report(y2,preds))\nprint(accuracy_score(y2,preds))","3f2fff58":"predssv = models.predict(test_tf)\npredssv","10a94ade":"test1 = pd.read_csv('\/kaggle\/input\/janatahack-independence-day-2020-ml-hackathon\/test.csv')\nsubmit = pd.DataFrame({'ID': test1.ID, 'Computer Science': predssv[:,0],'Physics':predssv[:,1],'Mathematics':predssv[:,2],'Statistics':predssv[:,3],'Quantitative Biology':predssv[:,4],'Quantitative Finance':predssv[:,5]})\nsubmit.head()","cd35381f":"submit.to_csv('submission.csv', index=False)","539da105":"Models Applied :-\n\n<br>\n\n---\n\n\n1.   Deep Learning<br>\n  *   One Layer CNN Model with GloVe ( 0.8029 ) and without GloVe ( 0.7973 ) \n  *   One Layer BiLSTM Model with GloVe ( 0.8083 ) without GloVe ( 0.7974 )\n  *   One Layer BiGRU Model with GloVe ( 0.7924 )\n\n  I could not get past this accuracy with Multiple trials and different hyperparameters. Saw an immense jump of models from around 75% to 80% with text cleaning (Helped convergence of loss of the training set and prevent overfitting) \n\n---\n\n2.   Machine Learning\n  *   Naive Bayes with CountVectorization ( 0.8028 )\n  *   Logistic Regression with TFIDF( Word Level ) ( 0.7989 )\n  *   Linear SVC with TFIDF and fit_intercept_False ( 0.808 ) \n  *   Linear SVC with TFIDF and fit_intercept_False with hinge loss! ( 0.8190 )\n  *   Linear SVC with TFIDF and fit_intercept_False with hinge loss word level n gram! ( 0.8392 )\n\nGot results with hyperParametric tuning of CountVectorizer, TFIDFTransformer and LinearSVC\n\n---\n\n","d27b3092":"## Converting to Vectors and then Transforming.\nHere I have applied char level analyzer with n_gram. Although, most of the times, word level is better than char, but i found it otherwise in this case!","d68b4483":"## Text Cleaning","bfdd0143":"## IMPORTING LIBRARIES","45fbc977":"## Splitting into train and validation set","3485d260":"### Now, we have stored our values in combined, so we remove title and abstract","1b99e442":"# JANATA-HACK INDEPENDENCE DAY ML HACKATHON","8ee351aa":"## LABELWISE COUNT AND PERCENTAGE","490286fb":"## Importing the dataset","7a05b8db":"## Model contains MultiOutputClassifier with LinearSVC"}}