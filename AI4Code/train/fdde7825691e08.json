{"cell_type":{"1913047d":"code","909c5c65":"code","05a28203":"code","f975540c":"code","0530924e":"code","2910c8a2":"code","c6f7230f":"code","2344b027":"code","f135526e":"markdown"},"source":{"1913047d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom PIL import Image, ImageDraw, ImageFont\nimport matplotlib.pyplot as plt\nimport keras\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","909c5c65":"train = pd.read_csv('..\/input\/train.csv')\ntrainX = '..\/input\/train_images'\n\n","05a28203":"#Adding .jpg to the image_id for later use in Keras image generator\ndef function(data):\n    return data + '.jpg'\ntrain['image_id'] = list(map(function, train['image_id']))","f975540c":"train['labels'] = train.labels.astype('str')\n#Converting labels to string so they can be used by ImageGenerator","0530924e":"fontsize = 50\n\n# From https:\/\/www.google.com\/get\/noto\/\n!wget -q --show-progress https:\/\/noto-website-2.storage.googleapis.com\/pkgs\/NotoSansCJKjp-hinted.zip\n!unzip -p NotoSansCJKjp-hinted.zip NotoSansCJKjp-Regular.otf > NotoSansCJKjp-Regular.otf\n!rm NotoSansCJKjp-hinted.zip\n\nfont = ImageFont.truetype('.\/NotoSansCJKjp-Regular.otf', fontsize, encoding='utf-8')","2910c8a2":"# Reference to https:\/\/www.kaggle.com\/anokas\/kuzushiji-visualisation for making this function \n# This function takes in a filename of an image, and the labels in the string format given in train.csv, and returns an image containing the bounding boxes and characters annotated\ndef visualize_training_data(image_fn, labels):\n    # Convert annotation string to array\n    labels = np.array(labels.split(' ')).reshape(-1, 5)\n    \n    # Read image\n    imsource = Image.open(image_fn).convert('RGBA')\n    bbox_canvas = Image.new('RGBA', imsource.size)\n    char_canvas = Image.new('RGBA', imsource.size)\n    bbox_draw = ImageDraw.Draw(bbox_canvas) # Separate canvases for boxes and chars so a box doesn't cut off a character\n    char_draw = ImageDraw.Draw(char_canvas)\n\n    for codepoint, x, y, w, h in labels:\n        x, y, w, h = int(x), int(y), int(w), int(h)\n        char = unicode_map[codepoint] # Convert codepoint to actual unicode character\n\n        # Draw bounding box around character, and unicode character next to it\n        bbox_draw.rectangle((x, y, x+w, y+h), fill=(255, 255, 255, 0), outline=(255, 0, 0, 255))\n        char_draw.text((x + w + fontsize\/4, y + h\/2 - fontsize), char, fill=(0, 0, 255, 255), font=font)\n\n    imsource = Image.alpha_composite(Image.alpha_composite(imsource, bbox_canvas), char_canvas)\n    imsource = imsource.convert(\"RGB\") # Remove alpha for saving in jpg format.\n    return np.asarray(imsource)","c6f7230f":"np.random.seed(1337)\nunicode_map = {codepoint: char for codepoint, char in pd.read_csv('..\/input\/unicode_translation.csv').values}\nfor i in range(5):\n    img, labels = train.values[np.random.randint(len(train))]\n    viz = visualize_training_data('..\/input\/train_images\/{}'.format(img), labels)\n    \n    plt.figure(figsize=(15, 15))\n    plt.title(img)\n    plt.imshow(viz, interpolation='lanczos')\n    plt.show()","2344b027":"#Creating data generator for Keras\ntrain_datagen = ImageDataGenerator(\n        rescale=1.\/255)\ntrain_generator = train_datagen.flow_from_dataframe(train, directory='..\/input\/train_images\/', \n                                                    x_col='image_id', y_col='labels', target_size=(3000,2000), \n                                                    color_mode='rgb', classes=None, class_mode='categorical', batch_size=16, \n                                                    shuffle=True)","f135526e":"* You can try to add a cnn to classify data. \n* I found that the ram was running out to quickly and the kernel would shut down. "}}