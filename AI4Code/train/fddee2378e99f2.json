{"cell_type":{"69a0892d":"code","83b80949":"code","2dbba6ee":"code","d1844a13":"code","dd21e85d":"code","c085660d":"code","06a2267c":"code","201c0055":"code","07db6083":"code","97cf62ed":"markdown","9e3cfb70":"markdown","58408a72":"markdown","37c2ba07":"markdown","cba7bf8f":"markdown","5b091aff":"markdown","117af2e1":"markdown","0412909d":"markdown"},"source":{"69a0892d":"class Class_A:\n    pass","83b80949":"class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    # Objects can also contain methods. Methods in objects are functions that belong to the object.\n    def my_method(self):\n        print(\"Hello my name is \" + self.name)","2dbba6ee":"p1 = Person(\"John\", 36)\n\nprint(p1.name)\nprint(p1.age)\np1.my_method()\n\n# You can modify properties on objects\np1.age = 40\n\n# You can delete properties of objects or objects themselves by using the del keyword\ndel p1.age\ndel p1","d1844a13":"class Student(Person):\n    pass\n\n\nx = Student(\"Mike\", \"Olsen\")\nx.my_method()","dd21e85d":"class Student(Person):\n    def __init__(self, fname, lname):\n        Person.__init__(self, fname, lname)","c085660d":"class Student(Person):\n    def __init__(self, fname, lname):\n        super().__init__(fname, lname)\n        self.student_property = 2019","06a2267c":"class Base:\n\n    # Declaring public method\n    def fun(self):\n        print(\"Public method\")\n\n        # Declaring private method\n\n    def __fun(self):\n        print(\"Private method\")\n\n    # Creating a derived class\n\n\nclass Derived(Base):\n    def __init__(self):\n        # Calling constructor of\n        # Base class\n        Base.__init__(self)\n\n    def call_public(self):\n        # Calling public method of base class\n        print(\"\\nInside derived class\")\n        self.fun()\n\n    def call_private(self):\n        # Calling private method of base class\n        self.__fun()","201c0055":"obj1 = Base()\n\n# Calling public method\nobj1.fun()\n\nobj2 = Derived()\nobj2.call_public()\n\n# Uncommenting obj1.__fun() will\n# raise an AttributeError\n\n# Uncommenting obj2.call_private()\n# will also raise an AttributeError","07db6083":"class A:\n\n    # Declaring public method \n    def fun(self):\n        print(\"Public method\")\n\n        # Declaring private method\n\n    def __fun(self):\n        print(\"Private method\")\n\n        # Calling private method via\n\n    # another method\n    def Help(self):\n        self.fun()\n        self.__fun()\n\n    # Driver's code\n\n\nobj = A()\nobj.Help()","97cf62ed":"# PYTHON CLASSES FUNDAMENTALS\nPython is an object oriented programming language.\nAlmost everything in Python is an object, with its properties and methods.\nA Class is like an object constructor, or a \"blueprint\" for creating objects.\n\n","9e3cfb70":"To create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class","58408a72":"private methods can be accessed by calling the private methods via public methods.","37c2ba07":"class definitions cannot be empty, but if you for some reason have a class definition with no content, put in the\npass statement to avoid getting an error","cba7bf8f":"Python also has a super() function that will make the child class inherit all the methods and properties from its parent","5b091aff":"All classes have a function called __init__(), which is always executed when the class is being initiated.\nUse the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created.\nThe __init__() function is called automatically every time the class is being used to create a new object.\n\nThe self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.\nIt does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class.","117af2e1":"When you add the __init__() function, the child class will no longer inherit the parent's __init__() function.\nNote: The child's __init__() function overrides the inheritance of the parent's __init__() function.\nTo keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function","0412909d":"An object can only call public methods\nto define a private method prefix the member name with double underscore __"}}