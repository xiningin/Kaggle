{"cell_type":{"ffedfcc7":"code","a9f416f7":"code","43ebbc57":"code","1d07a5da":"code","3842dd22":"code","5cad2ee6":"code","eabf4571":"code","ba635cf8":"code","465c9d12":"code","1c52e550":"code","659a5e94":"code","db3f3d31":"code","3706bf3f":"code","f120dc73":"code","d88c63dc":"code","23183e6f":"code","0c0f6fa6":"code","5bca1129":"code","d801cdea":"code","cc957d24":"markdown"},"source":{"ffedfcc7":"!pip install git+https:\/\/github.com\/qubvel\/efficientnet","a9f416f7":"from efficientnet import EfficientNetB3","43ebbc57":"import cv2\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport json\nimport os\nfrom tqdm import tqdm, tqdm_notebook\nfrom keras.models import Model\nfrom keras.layers import Dropout, Flatten, Dense\nfrom keras import optimizers","1d07a5da":"train_dir = \"..\/input\/train\/train\/\"\ntest_dir = \"..\/input\/test\/test\/\"\ntrain_df = pd.read_csv('..\/input\/train.csv')\ntrain_df.head()","3842dd22":"im = cv2.imread(\"..\/input\/train\/train\/01e30c0ba6e91343a12d2126fcafc0dd.jpg\")\nplt.imshow(im)","5cad2ee6":"eff_net = EfficientNetB3(weights='imagenet', include_top=False, input_shape=(32, 32, 3))","eabf4571":"eff_net.trainable = False\n# model.summary()","ba635cf8":"x = eff_net.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\npredictions = Dense(1, activation=\"sigmoid\")(x)\nmodel = Model(input = eff_net.input, output = predictions)\nmodel.compile(optimizers.rmsprop(lr=0.0001, decay=1e-6),loss='binary_crossentropy',metrics=['accuracy'])","465c9d12":"X_tr = []\nY_tr = []\nimges = train_df['id'].values\nfor img_id in tqdm_notebook(imges):\n    X_tr.append(cv2.imread(train_dir + img_id))    \n    Y_tr.append(train_df[train_df['id'] == img_id]['has_cactus'].values[0])  \nX_tr = np.asarray(X_tr)\nX_tr = X_tr.astype('float32')\nX_tr \/= 255\nY_tr = np.asarray(Y_tr)","1c52e550":"batch_size = 111\nnb_epoch = 25","659a5e94":"%%time\n# Train model\nhistory = model.fit(X_tr, Y_tr,\n              batch_size=batch_size,\n              epochs=nb_epoch,\n              validation_split=0.1,\n              shuffle=True,\n              verbose=2)","db3f3d31":"with open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()","3706bf3f":"%%time\nX_tst = []\nTest_imgs = []\nfor img_id in tqdm_notebook(os.listdir(test_dir)):\n    X_tst.append(cv2.imread(test_dir + img_id))     \n    Test_imgs.append(img_id)\nX_tst = np.asarray(X_tst)\nX_tst = X_tst.astype('float32')\nX_tst \/= 255","f120dc73":"# Prediction\ntest_predictions = model.predict(X_tst)","d88c63dc":"sub_df = pd.DataFrame(test_predictions, columns=['has_cactus'])\nsub_df['has_cactus'] = sub_df['has_cactus'].apply(lambda x: 1 if x > 0.75 else 0)","23183e6f":"sub_df['id'] = ''\ncols = sub_df.columns.tolist()\ncols = cols[-1:] + cols[:-1]\nsub_df=sub_df[cols]","0c0f6fa6":"for i, img in enumerate(Test_imgs):\n    sub_df.set_value(i,'id',img)","5bca1129":"sub_df.head()","d801cdea":"sub_df.to_csv('submission.csv',index=False)","cc957d24":"**Simple example of transfer learning from pretrained model using Keras and Efficientnet (https:\/\/pypi.org\/project\/efficientnet\/).**"}}