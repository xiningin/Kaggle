{"cell_type":{"4ab63df0":"code","e5e3af12":"code","509d669f":"code","513fd884":"code","59e53ba3":"code","1471c555":"code","4014bfb5":"code","85b5200c":"code","649d53c1":"code","14c12ae7":"code","04dcbdb8":"code","60b2491a":"code","7dfd9906":"code","4fe86643":"code","618a9e01":"code","f5776359":"code","8322a8a6":"code","18a7db61":"code","eaab4025":"code","302132f7":"code","e5fc38a2":"code","aa653823":"code","2f4549c3":"code","1d8ef337":"code","13fbe887":"code","742af9c6":"code","254b9ac5":"code","a0f7dd16":"code","751c5eb9":"code","4f37b64e":"code","ee98b418":"code","720b4511":"code","ce218b88":"code","1e0f38d4":"code","46e94732":"code","5287ffa2":"code","0c0818b9":"code","fa05ef0a":"code","9b4e5ce4":"code","cf9df36d":"code","cb6eec18":"code","1643f484":"code","5e89d783":"code","205c138f":"code","a8074f54":"code","75f9e276":"code","5222bb01":"code","2c00f6b5":"code","d5022b73":"code","6fcb6d42":"code","3e4d7e01":"code","3ec4ffbb":"code","7f13b0d7":"code","48c2b45c":"code","55484d91":"code","2d549f5c":"code","6bd1bd4a":"markdown"},"source":{"4ab63df0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5e3af12":"import re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import defaultdict","509d669f":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","513fd884":"df.head(5)","59e53ba3":"df.info()","1471c555":"df.describe()","4014bfb5":"df[['Sex','Cabin','Embarked','Name','Ticket']].describe()","85b5200c":"df['sex'] = df['Sex']=='male'\ndf['sex'] = df['sex'].astype('int')","649d53c1":"df['Cabintype'] = df.Cabin.apply(lambda x: str(x)[0])\ndf['Cabintype'].unique()","14c12ae7":"def lastname(name):\n    name = str(name)\n    x = name.split()\n    x.reverse()\n    i = 0\n    if(x[i][-1]==')'):\n        while(x[i][0]!='('):\n            i+=1\n        i+=1\n    return x[i]\n        \n        \ndf['lastName']=df['Name'].apply(lambda x: lastname(x))","04dcbdb8":"for i,j in zip(df.Name.values[0:10],df.lastName.values[0:10]):\n    print(i,\"{}\".format(\" \"*(60 - len(i))),j)","60b2491a":"def ticket_letter(ticket):\n    ticket = str(ticket)\n    letter = re.findall('[A-Za-z]+',ticket)\n    if(letter==[]):\n        letter = 'Num'\n    else:\n        letter=letter[0]\n    return letter\ndf['Ticket_letter'] = df['Ticket'].apply(lambda x: ticket_letter(x))","7dfd9906":"df.head()","4fe86643":"cols = ['Pclass','Age','SibSp','Parch','lastName','Fare','Embarked','sex','Cabintype','Ticket_letter']\nX = df[cols]\ny = df['Survived']","618a9e01":"X.info()","f5776359":"sns.boxplot(X.Age)","8322a8a6":"medianAge = X.Age.median()\nprint(medianAge)\nX.Age.fillna(medianAge,inplace=True)","18a7db61":"modeEmbarked = X.Embarked.mode()\nprint(modeEmbarked[0])\nX.Embarked = X.Embarked.fillna(modeEmbarked[0])","eaab4025":"X.info()","302132f7":"from sklearn.model_selection import train_test_split\nX_train,X_valid,y_train,y_valid = train_test_split(X,y,stratify=y,test_size=0.2,random_state = 31)","e5fc38a2":"from sklearn.preprocessing import LabelEncoder\nembarked_le = LabelEncoder()\nX_train.Embarked = embarked_le.fit_transform(X_train.Embarked)\nX_valid.Embarked = embarked_le.transform(X_valid.Embarked)","aa653823":"cabin_le = LabelEncoder()\nX_train['Cabintype'] = cabin_le.fit_transform(X_train.Cabintype)\nX_valid['Cabintype'] = cabin_le.transform(X_valid.Cabintype)","2f4549c3":"dt = defaultdict(int)\nfor num,i in enumerate(set(X_train.Ticket_letter)):\n    dt[i] = num+1\ndef get_ticket(ticket):\n    return dt[ticket]\nX_train['Ticket_letter'] = X_train.Ticket_letter.apply(get_ticket)\nX_valid['Ticket_letter'] = X_valid.Ticket_letter.apply(get_ticket)","1d8ef337":"dd = defaultdict(int)\nfor num,i in enumerate(set(X_train.lastName)):\n    dd[i] = num+1\ndef getlast(name):\n    return dd[name]\n\nX_train['lastName'] = X_train['lastName'].apply(getlast)\nX_valid['lastName'] = X_valid['lastName'].apply(getlast)","13fbe887":"X_train.head()","742af9c6":"X_valid.head()","254b9ac5":"plt.figure(figsize=(10,8))\nsns.heatmap(X_train.corr(),cmap='coolwarm_r',annot=True)","a0f7dd16":"X_train = X_train[['Pclass','Age','Fare','Embarked','sex','Ticket_letter','Parch']]\nX_valid = X_valid[['Pclass','Age','Fare','Embarked','sex','Ticket_letter','Parch']]","751c5eb9":"X_train = np.array(X_train,dtype = 'float')\nX_valid = np.array(X_valid,dtype = 'float')","4f37b64e":"y_train = np.array(y_train,dtype='float')\ny_train = np.array(y_train,dtype='float')","ee98b418":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(X_train,y_train)\nprint(lr.score(X_train,y_train))\nprint(lr.score(X_valid,y_valid))","720b4511":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\npcavalue = pca.fit_transform(X_train)","ce218b88":"plt.figure(figsize=(12,8))\nsns.scatterplot(x=pcavalue[:,1],y=pcavalue[:,0],hue=y_train,palette = 'rocket')\nplt.xlim([-40,100])\nplt.grid()","1e0f38d4":"plt.figure(figsize=(12,8))\nsns.scatterplot(x=pcavalue[:,1],y=pcavalue[:,0],hue=y_train,palette = 'rocket')\nplt.xlim([-35,0])\nplt.grid()","46e94732":"from lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier","5287ffa2":"model_lgb = LGBMClassifier()\nmodel = XGBClassifier()\nmodel.fit(X_train,y_train)","0c0818b9":"model.score(X_train,y_train)","fa05ef0a":"model.score(X_valid,y_valid)","9b4e5ce4":"full_X,full_y = np.append(X_train,X_valid,axis=0),np.append(y_train,y_valid,axis=0)","cf9df36d":"full_X.shape,full_y.shape,X_train.shape,X_valid.shape,","cb6eec18":"full_y_reshape = full_y.reshape(-1,1)\nfull = np.append(full_X,full_y_reshape,axis=1)","1643f484":"from sklearn.model_selection import cross_val_score\nscore = cross_val_score(model,full_X, full_y, cv=5)\nscore","5e89d783":"test_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n\ntest_df['sex'] = test_df['Sex']=='male'\ntest_df['sex'] = test_df['sex'].astype('int')\n\ntest_df['Cabintype'] = test_df.Cabin.apply(lambda x: str(x)[0])\n\ntest_df['lastName']=test_df['Name'].apply(lambda x: lastname(x))\n\ntest_df['Ticket_letter'] = test_df['Ticket'].apply(lambda x: ticket_letter(x))\n\nX_test = test_df[cols]\n\nX_test.Age.fillna(medianAge,inplace=True)\n\nX_test.Embarked = X_test.Embarked.fillna(modeEmbarked[0])\n\nX_test.fillna(0,inplace=True)\n\nX_test.Embarked = embarked_le.transform(X_test.Embarked)\n\nX_test['Cabintype'] = cabin_le.transform(X_test.Cabintype)\n\nX_test['Ticket_letter'] = X_test.Ticket_letter.apply(get_ticket)\n\nX_test['lastName'] = X_test['lastName'].apply(getlast)\n\nX_test = X_test[['Pclass','Age','Fare','Embarked','sex','Ticket_letter','Parch']]\nX_test = np.array(X_test,dtype = 'float')","205c138f":"from sklearn.model_selection import KFold\nkf = KFold(n_splits=5)\n\nprediction1 = []\nvalid_prediction = np.array([0.]*891)\nfor train_index,valid_index in kf.split(full):\n    model = XGBClassifier()\n    model.fit(full_X[train_index],full_y[train_index])\n    valid_prediction+=model.predict(full_X)\n    print(\"train:  \",model.score(full_X[train_index],full_y[train_index]),\"     valid: \",model.score(full_X[valid_index],full_y[valid_index]))\n    prediction1.append(model.predict(X_test))","a8074f54":"c=0\nic =0\nfor i,j in zip(valid_prediction,full_y):\n    if i==0 or i==1:\n        if(i==j):\n            c+=1\n        else:\n            ic+=1","75f9e276":"c,ic","5222bb01":"from sklearn.model_selection import KFold\nkf = KFold(n_splits=5)\n\nprediction2 = []\nvalid_prediction = np.array([0.]*891)\nfor train_index,valid_index in kf.split(full):\n    model = LGBMClassifier()\n    model.fit(full_X[train_index],full_y[train_index])\n    valid_prediction+=model.predict(full_X)\n    print(\"train:  \",model.score(full_X[train_index],full_y[train_index]),\"     valid: \",model.score(full_X[valid_index],full_y[valid_index]))\n    prediction2.append(model.predict(X_test))\n\nc=0\nic =0\nfor i,j in zip(valid_prediction,full_y):\n    if i==0 or i==1:\n        if(i==j):\n            c+=1\n        else:\n            ic+=1\nc,ic","2c00f6b5":"from sklearn.model_selection import KFold\nkf = KFold(n_splits=5)\n\nprediction3 = []\nvalid_prediction = np.array([0.]*891)\nfor train_index,valid_index in kf.split(full):\n    model = RandomForestClassifier()\n    model.fit(full_X[train_index],full_y[train_index])\n    valid_prediction+=model.predict(full_X)\n    print(\"train:  \",model.score(full_X[train_index],full_y[train_index]),\"     valid: \",model.score(full_X[valid_index],full_y[valid_index]))\n    prediction3.append(model.predict(X_test))\n\nc=0\nic =0\nfor i,j in zip(valid_prediction,full_y):\n    if i==0 or i==1:\n        if(i==j):\n            c+=1\n        else:\n            ic+=1\nc,ic","d5022b73":"prediction1 = np.array(prediction1)\nprediction1 = np.mean(prediction1,axis=0)\nprediction1 = (prediction1>0.5)\nprediction1  =np.array(prediction1,dtype='int64')\n\nprediction2 = np.array(prediction2)\nprediction2 = np.mean(prediction2,axis=0)\nprediction2 = (prediction2>0.5)\nprediction2  =np.array(prediction2,dtype='int64')\n\nprediction3 = np.array(prediction3)\nprediction3 = np.mean(prediction3,axis=0)\nprediction3 = (prediction3>0.5)\nprediction3  =np.array(prediction3,dtype='int64')","6fcb6d42":"from scipy import stats","3e4d7e01":"prediction = []\nfor i,j,k in zip(prediction1,prediction2,prediction3):\n    prediction.append(stats.mode([i,j,k])[0][0])","3ec4ffbb":"prediction[0:10]","7f13b0d7":"from sklearn.model_selection import KFold\nkf = KFold(n_splits=5)\n\nprediction = []\nfor train_index,valid_index in kf.split(full):\n    model = LGBMClassifier()\n    model.fit(full_X[train_index],full_y[train_index])\n    print(\"train:  \",model.score(full_X[train_index],full_y[train_index]),\"     valid: \",model.score(full_X[valid_index],full_y[valid_index]))\n    prediction.append(model.predict(X_test))","48c2b45c":"prediction = np.array(prediction)\nprediction = np.mean(prediction,axis=0)\nprediction = (prediction>0.5)\nprediction  =np.array(prediction,dtype='int64')","55484d91":"submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission.head()","2d549f5c":"submission['Survived'] = prediction\nsubmission.to_csv('submission.csv',index=False)","6bd1bd4a":"# ------------------------"}}