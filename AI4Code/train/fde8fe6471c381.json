{"cell_type":{"fd52c027":"code","31944bbf":"code","6cef41e0":"code","5d3e56f9":"code","e68e10e0":"code","0fa3f643":"code","442bbda9":"code","0c9d7f3d":"code","38fdfe94":"code","30fb5480":"code","790ab7fc":"code","20a7264d":"code","d6a38c77":"code","65d91421":"code","15190798":"code","67c95f3b":"code","5d0ea886":"code","9ad3acde":"code","d506fae7":"code","41830ccf":"code","a129e091":"code","2f38cbbf":"code","81cd6989":"code","e3f6c253":"code","2d060f78":"code","be64f511":"code","d8980e36":"code","c9d9466e":"code","fb9c0725":"code","d5e5d0d2":"code","85d73e08":"code","a1c2725f":"code","7500662c":"code","e1ce8196":"code","a922bd44":"code","874dcf7a":"code","0ea0f6c6":"code","1624f05e":"code","76e10ce5":"code","8e47eee4":"code","b5f4eb1e":"code","44bbe3de":"code","8c73f10b":"code","0d6dec12":"code","e091c1a4":"code","13dae138":"code","05143b28":"code","4aa9cd08":"code","4e5a032b":"code","f0edb63b":"code","44f50d15":"code","ddf42773":"code","101aab1c":"code","1cf3fd54":"code","4503e50c":"code","95cdf522":"code","03b1eadc":"code","8df5d498":"code","e1db41e5":"code","5944d528":"code","9b077458":"code","b0302fb3":"code","d3301927":"code","53f2af54":"code","9c3b6954":"code","87feea66":"code","ceab00fa":"code","af8f2f9d":"code","f7c7a639":"code","63f3b7a6":"code","d9c3a698":"code","5b4f6cc7":"code","0e7d97b6":"code","4267a3d9":"code","5c5ea939":"code","3d763f64":"code","98f8200e":"code","ef40ac9f":"code","0da983f5":"code","eb109a2e":"code","1d1a8af6":"code","8867f841":"code","6b5bb610":"code","5f9d0537":"code","dae15911":"code","8699c8df":"code","fefaa3f5":"code","51e885db":"code","1ee1f9be":"code","ff60966e":"code","2633a966":"code","ed93ff86":"code","fa42f3cc":"code","f824b7cb":"code","b3cbf873":"code","8d94b38e":"code","ca50e71c":"code","4de84098":"markdown","6a038f98":"markdown","25f079c0":"markdown","0827cc8f":"markdown","37da4235":"markdown","a0eb9864":"markdown","09f9cea5":"markdown","679fc245":"markdown","30d1df33":"markdown","cb545396":"markdown","fbde4cfd":"markdown","083cc94e":"markdown","36a94740":"markdown","4957728b":"markdown","14a22414":"markdown","1671bf08":"markdown","80de22f0":"markdown","dbf4b4bc":"markdown","1373a8e3":"markdown","8828bdea":"markdown","551d889e":"markdown","5d6aa9e7":"markdown","ced6e1a7":"markdown","0fd87f5c":"markdown","8ddd31b5":"markdown","3941c086":"markdown","746c7c74":"markdown","66d40dc0":"markdown","38d0be85":"markdown","54e7c080":"markdown","2044c109":"markdown","b12ceb52":"markdown","0707c9d3":"markdown","ab681e7b":"markdown","6b2894e4":"markdown","25cf927e":"markdown","f9dcc445":"markdown","95fc25f7":"markdown","2035c88f":"markdown","68b3f8ac":"markdown","5c58e996":"markdown","0bcfc76d":"markdown","bf4d5e9f":"markdown","1d4a6669":"markdown","b91cdf74":"markdown","deefa48d":"markdown","7299afd8":"markdown","5c7ac61e":"markdown","51f447fd":"markdown","cb6fec78":"markdown","0362649c":"markdown","f2360c1a":"markdown","84bcd767":"markdown","d7a2d958":"markdown","504fabab":"markdown","4b27b3c3":"markdown","925cc06f":"markdown","1e7f9a13":"markdown","8f83870d":"markdown","dcd77f99":"markdown","9cd6d326":"markdown"},"source":{"fd52c027":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31944bbf":"data_types_dict = {\n    'row_id': 'int64',\n    'timestamp': 'int64',\n    'user_id': 'int32',\n    'content_id': 'int16',\n    'content_type_id': 'int8',\n    'task_container_id': 'int16',\n    'user_answer': 'int8',\n    'answered_correctly': 'int8',\n    'prior_question_elapsed_time': 'float16',\n    'prior_question_had_explanation': 'boolean'\n}","6cef41e0":"train_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv',\n                       low_memory=False,\n                       nrows=10**7,\n                       dtype=data_types_dict, \n                      )","5d3e56f9":"train_df","e68e10e0":"# \u6b20\u640d\u5024\nprint('Part of missing values for every column')\nprint(train_df.isnull().sum() \/ len(train_df))","0fa3f643":"train_df.info()","442bbda9":"train_df.describe().T","0c9d7f3d":"cols = train_df.columns\n\nfor col in cols:\n    print(f'Unique values in {col} : {train_df[col].nunique()}')","38fdfe94":"train_df['timestamp'].hist(bins=100);","30fb5480":"grouped_by_user_df = train_df.groupby('user_id')","790ab7fc":"grouped_by_user_df.agg({'timestamp':'max'}).hist(bins=100);","20a7264d":"# \u8b1b\u7fa9\u306e\u5272\u5408  # \u5e73\u5747 -1 (True)\u306e\u5272\u5408\n(train_df['answered_correctly'] == -1).mean()","d6a38c77":"ds = train_df['content_type_id'].value_counts().reset_index()\nds.columns = ['content_type_id', 'percent']\nds['percent'] \/= len(train_df)\n\nfig = px.pie(\n    ds, \n    names='content_type_id', \n    values='percent', \n    title='Lecures & questions', \n    height=500, \n    width=600\n)\n\nfig.show()","65d91421":"train_questions_only_df = train_df[train_df['answered_correctly'] != -1]\ntrain_questions_only_df['answered_correctly'].mean()","15190798":"ds = train_df['answered_correctly'].value_counts().reset_index()\nds.columns = ['answered_correctly', 'percent_of_answers']\nds['percent_of_answers'] \/= len(train_df)\nds = ds.sort_values(['percent_of_answers'])\n\nfig = px.pie(\n    ds, \n    names='answered_correctly', \n    values='percent_of_answers', \n    title='Percent of correct answers', \n    height=500, \n    width=600\n)\n\nfig.show()","67c95f3b":"correct = train_df[train_df.answered_correctly != -1].answered_correctly.value_counts()\n\nfig = plt.figure(figsize=(12,4))\n\ncorrect.plot.barh()\nplt.title(\"Questions answered correctly\")\nplt.xticks(rotation=0)\nplt.show()","5d0ea886":"grouped_by_user_df = train_questions_only_df.groupby('user_id')","9ad3acde":"# \u56de\u7b54\u7387('mean')\u3068\u56de\u7b54\u6570\uff08'count'\uff09\u3067\u5206\u3051\u308b\nuser_answers_df = grouped_by_user_df.agg({'answered_correctly': ['mean', 'count']})\nuser_answers_df[('answered_correctly', 'mean')].hist(bins=100); # bins = \u68d2\u306e\u6570","d506fae7":"user_answers_df","41830ccf":"user_answers_df[('answered_correctly', 'count')].hist(bins=100);","a129e091":"(user_answers_df[('answered_correctly','count')]< 50).mean()","2f38cbbf":"# \u521d\u5fc3\u8005\u306e\u6b63\u7b54\u7387\nuser_answers_df[user_answers_df[('answered_correctly', 'count')] < 50][('answered_correctly', 'mean')].mean()","81cd6989":"user_answers_df[user_answers_df[('answered_correctly', 'count')] < 50][('answered_correctly', 'mean')].hist(bins=100);","e3f6c253":"# \u30a2\u30af\u30c6\u30a3\u30d6\u30e6\u30fc\u30b6\u30fc\u306e\u6b63\u7b54\u7387\nuser_answers_df[user_answers_df[('answered_correctly', 'count')] >= 50][('answered_correctly', 'mean')].mean()","2d060f78":"user_answers_df[user_answers_df[('answered_correctly', 'count')] >= 50][('answered_correctly', 'mean')].hist(bins=100);","be64f511":"# \u30d8\u30d3\u30fc\u30e6\u30fc\u30b6\u30fc\u306e\u5272\u5408 500\u4ee5\u4e0aquestion\u3092\u56de\u7b54\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u5272\u5408\n(user_answers_df[('answered_correctly','count')] >= 500).mean()","d8980e36":"# \u30d8\u30d3\u30fc\u30e6\u30fc\u30b6\u30fc\u306e\u56de\u7b54\u7387\u306e\u5206\u5e03\nuser_answers_df[user_answers_df[('answered_correctly', 'count')] >= 500][('answered_correctly', 'mean')].hist(bins=100);","c9d9466e":"# \u30d8\u30d3\u30fc\u30e6\u30fc\u30b6\u30fc\u306e\u6b63\u7b54\u7387\nuser_answers_df[user_answers_df[('answered_correctly', 'count')] >= 500][('answered_correctly', 'mean')].mean()","fb9c0725":"plt.scatter(x = user_answers_df[('answered_correctly', 'count')], y = user_answers_df[('answered_correctly', 'mean')]);","d5e5d0d2":"grouped_by_content_df = train_questions_only_df.groupby('content_id')","85d73e08":"content_answers_df = grouped_by_content_df.agg({'answered_correctly': ['mean', 'count']})","a1c2725f":"content_answers_df","7500662c":"content_answers_df[('answered_correctly', 'count')].hist(bins=100);","e1ce8196":"content_answers_df[('answered_correctly', 'mean')].hist(bins=100);","a922bd44":"content_answers_df[content_answers_df[('answered_correctly','count')]>50][('answered_correctly','mean')].hist(bins = 100);","874dcf7a":"ds = train_df['user_id'].value_counts().reset_index()\nds.columns = ['user_id', 'count']\n\nds['user_id'] = ds['user_id'].astype(str) + '-'\nds = ds.sort_values(['count'])\n\nfig = px.bar(\n    ds.tail(40),\n    x='count',\n    y='user_id',\n    orientation='h', # horizontal bar char \u6a2a\u6c34\u5e73\u30d0\u30fc\n    title='Top40 users by number of actions',\n    height=900,\n    width=700\n)\n\nfig","0ea0f6c6":"ds = train_df['user_id'].value_counts().reset_index()\nds.columns = ['user_id', 'count']\nds = ds.sort_values('user_id')\n\nfig = px.line(\n    ds, \n    x='user_id', \n    y='count', \n    title='User action distribution', \n    height=600, \n    width=900\n)\n\nfig.show()","1624f05e":"ds = train_df['content_id'].value_counts().reset_index()\nds.columns = ['content_id', 'count']\nds['content_id'] = ds['content_id'].astype(str) + '-'\nds = ds.sort_values(['count'])\n\nfig = px.bar(\n    ds.tail(40), \n    x='count', \n    y='content_id', \n    orientation='h', \n    title='Top40 most useful content_ids', \n    height=900, \n    width=700\n)\n\nfig.show()","76e10ce5":"c_ids = train_df.content_id.value_counts()[:40]\n\nfig = plt.figure(figsize=(12,8))\n\nc_ids.plot.bar()\nplt.title(\"Top 40 most used content id's\")\nplt.xticks(rotation=90)\nplt.show()","8e47eee4":"ds = train_df['content_id'].value_counts().reset_index()\nds.columns = ['content_id', 'count']\nds = ds.sort_values('content_id')\n\nfig = px.line(\n    ds, \n    x='content_id', \n    y='count', \n    title='content_id action distribution', \n    height=600, \n    width=900\n)\n\nfig.show()","b5f4eb1e":"ds = train_df['task_container_id'].value_counts().reset_index()\nds.columns = ['task_container_id', 'count']\nds['task_container_id'] = ds['task_container_id'].astype(str) + '-'\nds = ds.sort_values(['count'])\n\nfig = px.bar(\n    ds.tail(40), \n    x='count', \n    y='task_container_id', \n    orientation='h', \n    title='Top 40 most useful task_container_ids', \n    height=900, \n    width=700\n)\n\nfig.show()","44bbe3de":"ds = train_df['task_container_id'].value_counts().reset_index()\nds.columns = ['task_container_id', 'count']\nds = ds.sort_values('task_container_id')\n\nfig = px.line(\n    ds, \n    x='task_container_id', \n    y='count', \n    title='task_container_id action distribution', \n    height=600, \n    width=800\n)\n\nfig.show()","8c73f10b":"# size() \u5168\u8981\u7d20\u6570\u3092\u53d6\u5f97\ntask_id_correct = train_df[train_df.answered_correctly != -1].\\\ngroupby([\"task_container_id\", 'answered_correctly'], as_index=False).size()\n\ntask_id_correct","0d6dec12":"task_id_correct = task_id_correct.pivot(index='task_container_id',\\\n                                         columns='answered_correctly', values='size')\n\n# \u6b63\u7b54\u7387\ntask_id_correct['Percent Correct'] = round(task_id_correct.iloc[:,1]\/(task_id_correct.iloc[:,0] + task_id_correct.iloc[:,1]),2)\n\n# %\u3054\u3068\u306b\u4e26\u3073\u66ff\u3048\ntask_id_correct = task_id_correct.sort_values(by = \"Percent Correct\", ascending = False)\n\ntask_id_correct","e091c1a4":"ds = task_id_correct['Percent Correct'].value_counts().reset_index()\nds.columns = ['Percent Correct', 'count']\nds = ds.sort_values('Percent Correct')\n\nfig = px.line(\n    ds, \n    x='Percent Correct', \n    y='count', \n    title='Percent Correct action distribution of task_container_id', \n    height=600, \n    width=900\n)\n\nfig.show()","13dae138":"task_id_correct = train_df[train_df.answered_correctly != -1].\\\ngroupby([\"task_container_id\", 'answered_correctly'], as_index=False).size()\n\ntask_id_correct = task_id_correct.pivot(index='task_container_id',\\\n                                         columns='answered_correctly', values='size')\n\ntask_id_correct['Percent Correct'] = round(task_id_correct.iloc[:,1]\/(task_id_correct.iloc[:,0] + task_id_correct.iloc[:,1]),2)\ntask_id_correct = task_id_correct.sort_values(by = \"Percent Correct\", ascending = False)\n\n# task_container_id - %\ntask_id_correct = task_id_correct.iloc[:,2]\n\ntask_id_correct = task_id_correct[:40]\n\nfig = plt.figure(figsize=(12,6))\ntask_id_correct.plot.bar()\nplt.title(\"Top 40 hardest batches of questions\")\nplt.xticks(rotation=90)\nplt.show()","05143b28":"ds = train_df['user_answer'].value_counts().reset_index()\nds.columns = ['user_answer', 'percent_of_answers']\nds['percent_of_answers'] \/= len(train_df)\nds = ds.sort_values(['percent_of_answers'])\n\nfig = px.bar(\n    ds, \n    x='user_answer', \n    y='percent_of_answers', \n    orientation='v', \n    title='Percent of user answers for every option', \n    height=500, \n    width=600\n)\n\nfig.show()","4aa9cd08":"fig = make_subplots(rows=2, cols=3)\n\ntraces = [\n    go.Bar(\n        x=[-1, 0, 1], \n        y=[\n            len(train_df[(train_df['user_answer']==item) & (train_df['answered_correctly'] == -1)]),\n            len(train_df[(train_df['user_answer']==item) & (train_df['answered_correctly'] == 0)]),\n            len(train_df[(train_df['user_answer']==item) & (train_df['answered_correctly'] == 1)])\n        ], \n        name='Option: ' + str(item),\n        text = [\n            str(round(100 * len(train_df[(train_df['user_answer']==item) & (train_df['answered_correctly'] == -1)]) \/ len(train_df[(train_df['user_answer']==item)]), 2)) + '%',\n            str(round(100 * len(train_df[(train_df['user_answer']==item) & (train_df['answered_correctly'] == -0)]) \/ len(train_df[(train_df['user_answer']==item)]), 2)) + '%',\n            str(round(100 * len(train_df[(train_df['user_answer']==item) & (train_df['answered_correctly'] == 1)]) \/ len(train_df[(train_df['user_answer']==item)]), 2)) + '%',\n        ],\n        textposition='auto'\n    ) for item in train_df['user_answer'].unique().tolist()\n]\n\nfor i in range(len(traces)):\n    fig.append_trace(traces[i], (i \/\/ 3) + 1, (i % 3)  +1)\n\nfig.update_layout(\n    title_text='Percent of correct answers for every option',\n    height=600,\n    width=900\n)\n\nfig.show()","4e5a032b":"fig = px.histogram(\n    train_df, \n    x=\"prior_question_elapsed_time\",\n    nbins=100,\n    width=700,\n    height=500,\n    title='prior_question_elapsed_time distribution'\n)\n\nfig.show()","f0edb63b":"questions_df = pd.read_csv('..\/input\/riiid-test-answer-prediction\/questions.csv')","44f50d15":"questions_df","ddf42773":"# \u6b20\u640d\u5024\nprint('Part of missing values for every column')\nprint(questions_df.isnull().sum() \/ len(questions_df))","101aab1c":"print(f\"There are {len(questions_df['part'].unique())} different parts\")","1cf3fd54":"questions_df['tags'].values[-1] # \u306a\u3093\u3067\u6700\u5f8c\u306e\u884c\u306etag\u3092\u53d6\u5f97\u3057\u3066\u308b\u306e\u304b\uff1f \u2192 \u30c7\u30fc\u30bf\u306e\u578b\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b\u3060\u3051","4503e50c":"unique_tags = set().union(*[y.split() for y in questions_df['tags'].astype(str).values])\n\nprint(f\"There are {len(unique_tags)} different tags\")","95cdf522":"# [question_id] content_type_id\u304c\u8cea\u554f(0)\u306e\u3068\u304d\u3001train\/test content_id\u5217\u306e\u5916\u90e8\u30ad\u30fc \/ [bundle_id] \u8cea\u554f\u3068\u4e00\u7dd2\u306b\u63d0\u4f9b\u3055\u308c\u308b\u30b3\u30fc\u30c9\n(questions_df['question_id'] != questions_df['bundle_id']).mean()","03b1eadc":"ds = questions_df['correct_answer'].value_counts().reset_index()\nds.columns = ['correct_answer', 'number_of_answers']\nds['correct_answer'] = ds['correct_answer'].astype(str) + '-'\nds = ds.sort_values(['number_of_answers'])\n\nfig = px.bar(\n    ds, \n    x='number_of_answers', \n    y='correct_answer', \n    orientation='h', \n    title='Number of correct answers per group', \n    height=400, \n    width=700\n)\n\nfig.show()","8df5d498":"ds = questions_df['part'].value_counts().reset_index()\nds.columns = ['part', 'count']\nds['part'] = ds['part'].astype(str) + '-'\nds = ds.sort_values(['count'])\n\nfig = px.bar(\n    ds, \n    x='count', \n    y='part', \n    orientation='h', \n    title='Parts distribution', \n    height=500, \n    width=700\n)\n\nfig.show()","e1db41e5":"# tags\u306e\u500b\u6570\u304c\u4f55\u500b\u3042\u308b\u304b\u3092\u793a\u3059\u30ab\u30e9\u30e0 questions_df_copy\nquestions_df_copy = questions_df\nquestions_df_copy['tag'] = questions_df_copy['tags'].str.split(' ')\nquestions_df_copy = questions_df_copy.explode('tag')\nquestions_df_copy = pd.merge(questions_df_copy, questions_df_copy.groupby('question_id')['tag'].count().reset_index(), on='question_id')\nquestions_df_copy = questions_df_copy.drop(['tag_x'], axis=1)\nquestions_df_copy.columns = ['question_id', 'bundle_id', 'correct_answer', 'part', 'tags', 'tags_number']\nquestions_df_copy = questions_df_copy.drop_duplicates()\n\nquestions_df_copy","5944d528":"ds = questions_df_copy['tags_number'].value_counts().reset_index()\nds.columns = ['tags_number', 'count']\nds['tags_number'] = ds['tags_number'].astype(str) + '-'\nds = ds.sort_values(['tags_number'])\n\nfig = px.bar(\n    ds, \n    x='count', \n    y='tags_number', \n    orientation='h', \n    title='Number tags distribution', \n    height=400, \n    width=700\n)\n\nfig.show()","9b077458":"check = questions_df['tags'].str.split(' ').explode('tags').reset_index()\ncheck = check['tags'].value_counts().reset_index()\n\ncheck.columns = ['tag', 'count']\ncheck['tag'] = check['tag'].astype(str) + '-'\ncheck = check.sort_values(['count'])\n\nfig = px.bar(\n    check.tail(40), \n    x='count', \n    y='tag', \n    orientation='h', \n    title='Top 40 most useful tags', \n    height=900, \n    width=700\n)\n\nfig.show()","b0302fb3":"lectures_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/lectures.csv')\nlectures_df","d3301927":"# \u6b20\u640d\u5024\nprint('Part of missing values for every column')\nprint(lectures_df.isnull().sum() \/ len(lectures_df))","53f2af54":"ds = lectures_df['tag'].value_counts().reset_index()\nds.columns = ['tag', 'count']\nds['tag'] = ds['tag'].astype(str) + '-'\nds = ds.sort_values(['count'])\n\nfig = px.bar(\n    ds.tail(40), \n    x='count', \n    y='tag', \n    orientation='h', \n    title='Top 40 lectures by number of tags', \n    height=800, \n    width=700\n)\n\nfig.show()","9c3b6954":"ds = lectures_df['part'].value_counts().reset_index()\nds.columns = ['part', 'count']\nds['part'] = ds['part'].astype(str) + '-'\nds = ds.sort_values(['count'])\n\nfig = px.bar(\n    ds, \n    x='count', \n    y='part', \n    orientation='h', \n    title='Parts distribution', \n    height=500, \n    width=700\n)\n\nfig.show()","87feea66":"ds = lectures_df['type_of'].value_counts().reset_index()\nds.columns = ['type_of', 'count']\nds = ds.sort_values(['count'])\n\nfig = px.bar(\n    ds, \n    x='count', \n    y='type_of', \n    orientation='h', \n    title='type_of column distribution', \n    height=500, \n    width=700\n)\n\nfig.show()","ceab00fa":"corr = train_df.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(10, 10))\n    ax = sns.heatmap(corr,mask=mask,square=True,linewidths=.8,cmap=\"viridis\",annot=True)","af8f2f9d":"train_df.corr().style.background_gradient(cmap='Oranges')","f7c7a639":"plt.figure(figsize=(20,12))\nsns.set_style('dark')\n\nmini_df = train_df.copy()\nmini_df = mini_df.sort_values(by=['timestamp'])\nmini_df = mini_df.drop_duplicates('timestamp')\n\n# Start\nmin_df = mini_df.head(1000)\nplt.subplot(3, 1, 1);\nsns.pointplot(x=min_df['timestamp'],y=min_df['prior_question_had_explanation'],hue= min_df['answered_correctly'],\n              linestyle='--',color='yellow',markers='x');\nplt.title('Start_time');\nplt.xticks([]);\nplt.yticks([0,1]);\n\n# Mid\nmid_df = mini_df[50000:51100]\nplt.subplot(3, 1, 2);\nsns.pointplot(x=mid_df['timestamp'],y=mid_df['prior_question_had_explanation'],hue= mid_df['answered_correctly'],\n              linestyle='--',color='orange',markers='x');\nplt.title('Middle_time');\nplt.xticks([]);\nplt.yticks([0,1]);\n\n# End\nmax_df = mini_df.tail(1000)\nplt.subplot(3, 1, 3);\nsns.pointplot(x=max_df['timestamp'],y=max_df['prior_question_had_explanation'],hue= max_df['answered_correctly'], \n              linestyle='--',color='red',markers='x');\nplt.title('End_time');\nplt.xticks([]);\nplt.yticks([0,1]);","63f3b7a6":"# sns.set_style('white')\n# plt.figure(figsize=(10,6));\n# sns.set_style('whitegrid');\n# sns.scatterplot(x ='timestamp', y='prior_question_elapsed_time', data = train_df, hue='prior_question_had_explanation',alpha=0.8\n#                 ,linewidth=0,palette='viridis');\n# plt.legend(loc=\"best\");","d9c3a698":"# plt.figure(figsize=(10,6));\n# sns.set_style('darkgrid');\n# sns.scatterplot(x = train_df['task_container_id'], y= train_df['prior_question_elapsed_time'], hue=train_df['user_id'],palette='plasma',linewidth=0, size=train_df['user_id'] ,alpha=1);\n# plt.legend(loc='best');","5b4f6cc7":"user_answers_df.sort_values(('answered_correctly', 'count'), ascending=False)","0e7d97b6":"plt.scatter(x = user_answers_df[('answered_correctly', 'count')], y = user_answers_df[('answered_correctly', 'mean')]);","4267a3d9":"how_good = train_df[train_df['answered_correctly'] != -1].groupby('user_id').mean()","5c5ea939":"plt.figure(figsize = (15,6))\n\nax = sns.distplot(how_good['answered_correctly'], color='darkcyan',bins=50)\n\nax.set_xlabel(\"Plot of the ratio of correct to incorrect answers by user\",fontsize=18)\nax.set_xlim(0,1)\n\nvalues = np.array([rec.get_height() for rec in ax.patches])\n\nnorm = plt.Normalize(values.min(), values.max())\n\ncolors = plt.cm.jet(norm(values))\n\nfor rec, col in zip(ax.patches, colors):\n    rec.set_color(col)\n\nplt.show();","3d763f64":"print(\"The best score is: %.1f\" % (how_good['answered_correctly'].max()*100), \"%\")\nprint(\"The mean score is:  %.1f\" % (how_good['answered_correctly'].mean()*100), \"%\")","98f8200e":"print(\"No of students = \", len(train_df['user_id'].unique()))","ef40ac9f":"# distribution of number of samples per student\nsns.set()\nfig = plt.figure(figsize=(15,6))\nfig = sns.kdeplot(train_df.groupby(by='user_id').count()['row_id'], shade=True, gridsize=50, color='g', legend=False)\nfig.figure.suptitle(\"User_id distribution\", fontsize = 20)\nplt.xlabel('User_id counts', fontsize=16)\nplt.ylabel('Probability', fontsize=16);","0da983f5":"train_df.groupby(by='user_id').count()['row_id'].sort_values()","eb109a2e":"# How many question does each student attempt\ndf = train_df[train_df['content_type_id'] == 0] #\u56de\u7b54\u3057\u305f\u3084\u3064\n\ndf = df.groupby(by='user_id').count()\n\nfig = plt.figure(figsize=(15,6))\nfig = sns.kdeplot(df['row_id'], shade=True, gridsize=50, color='r', legend=False)\nfig.figure.suptitle(\"User attempted questions distribution\", fontsize = 20)\nplt.xlabel('Questions counts', fontsize=16)\nplt.ylabel('Probability', fontsize=16)\nplt.legend(['Questions Attempted','Questions Correctly answered'])","1d1a8af6":"# distribution of correct and incorrect and no answers\ndf = train_df[train_df['content_type_id'] == 0]\n\ndf2 = df[df['answered_correctly'] == 1]\ndf3 = df[df['answered_correctly'] == 0]\n\ndf2 = df2.groupby(by='user_id').count()\ndf3 = df3.groupby(by='user_id').count()\n\nfig = plt.figure(figsize=(15,6))\nfig = sns.kdeplot(df2['row_id'], shade=True, gridsize=50, color='b', legend=False)\nfig = sns.kdeplot(df3['row_id'], shade=True, gridsize=50, color='r', legend=False)\n\nfig.figure.suptitle(\"User attempted questions distribution\", fontsize = 20)\nplt.xlabel('Questions counts', fontsize=16)\nplt.ylabel('Probability', fontsize=16)\nplt.legend(['Correctly answered','Incorrectly answered'])","8867f841":"# What precent of students see explanations\n\nvalues = []\n\ndf = train_df[train_df['content_type_id'] == 0]\n\nfor group, frame in df.groupby(by='user_id'):\n    \n    value = len(frame[frame['prior_question_had_explanation'] == True]) \/ len(frame)\n    values.append(value)","6b5bb610":"values","5f9d0537":"plt.figure(figsize=(10,6))\nsns.distplot(values, kde=False)\nplt.title('Distribution if students who see x percent of explanations')\nplt.xlabel('Percent explanation seen out of attempted questions')\nplt.ylabel('Counts')","dae15911":"# distribution of tags\n\ntotal = []\n\nfor i in questions_df['tags']:\n    for j in str(i).strip().split(' '):\n        total.append(j)\n        \nkeys = set(total)\nfinal = {}\nfor i in keys:\n    final[i] = total.count(i)\n    \nvalues = sorted(final.items(), key=lambda x: x[1], reverse=True)\nd = []\nfor i in values:\n    d.append(i[1])","8699c8df":"plt.figure(figsize=(10,6))\npx.line(d, title='Tags distribution')","fefaa3f5":"from wordcloud import WordCloud\n# Most commmon tags\ntags = WordCloud().generate_from_frequencies(final)\npx.imshow(tags, title='Most frequent Tags')","51e885db":"# we will see first 8 students for trends\nno_students = 8\nscores = []\nuser_ids = []\nquestion_attempted_l = []\ncorrectly_answered_l = []\nprior_questions_explanations = []\n\nfor count, (group, frame) in enumerate(train_df.groupby(by='user_id')):\n    \n    if count == no_students:\n        break\n    \n    frame = frame.sort_values(by='timestamp')\n    \n    percentage = []\n    question_attempted = []\n    correctly_answered = []\n    explanations = []\n    attempted = 0\n    correct_answers = 0\n    explanation = 0\n    \n    df = frame[frame['content_type_id'] == 0]\n    df = df.fillna(0)\n    \n    for answered_correctly, had_explanation in zip(df['answered_correctly'], df['prior_question_had_explanation']):\n        \n        attempted += 1\n        question_attempted.append(attempted)\n        \n        if answered_correctly == 1:\n            correct_answers += 1\n            \n        if had_explanation:\n            explanation += 1\n            \n        correctly_answered.append(correct_answers)\n            \n        percent = correct_answers \/ attempted * 100\n        percentage.append(percent)\n        explanations.append(explanation)\n        \n    \n    scores.append(percentage)\n    user_ids.append(group)\n    question_attempted_l.append(question_attempted)\n    correctly_answered_l.append(correctly_answered)\n    prior_questions_explanations.append(explanations)","1ee1f9be":"# Trend in attempted question and correctly answering\n\nplt.figure(figsize=(15,20))\n\nfor i in range(1,9):\n    plt.subplot(4,2,i)\n    plt.plot(question_attempted_l[i-1], question_attempted_l[i-1], label='Questions attempted')\n    plt.plot(question_attempted_l[i-1], correctly_answered_l[i-1], label='Questions correctly answered')\n    plt.plot(question_attempted_l[i-1], scores[i-1], label='Percentage correctly answered')\n    plt.plot(question_attempted_l[i-1], prior_questions_explanations[i-1], label='Prior_questions_explanations')\n    plt.legend()\n    plt.ylim(0,100)\n    plt.xlim(0,50)\n    plt.tight_layout(pad = 2)\n    plt.title(f'user_id: {user_ids[i-1]}')","ff60966e":"# Does students time spend on answering prior questions\n\nno_students = 8\ntime_spend_l = []\n\nfor count, (group, frame) in enumerate(train_df.groupby(by='user_id')):\n    \n    if count == no_students:\n        break\n    \n    frame = frame.sort_values(by='timestamp')\n    total_time_spends = []\n    time_spends = 0\n    \n    for time_spend in frame['prior_question_elapsed_time'][frame['content_type_id'] == 0]:\n        \n        if time_spend > 0:\n            time_spends += time_spend\n            total_time_spends.append(time_spends)\n        \n    \n    time_spend_l.append(total_time_spends)","2633a966":"time_spend_l = np.array(time_spend_l)\nfor index, value in enumerate(time_spend_l):\n    time_spend_l[index] = np.array(time_spend_l[index]) \/ 10000","ed93ff86":"# Trend in time spend with percentage\n\nplt.figure(figsize=(15,20))\n\nfor i in range(1,9):\n    plt.subplot(4,2,i)\n    plt.plot(question_attempted_l[i-1], correctly_answered_l[i-1], label='Questions correctly answered')\n    plt.plot(question_attempted_l[i-1][1:], time_spend_l[i-1], label='time spend in 10000')\n    plt.plot(question_attempted_l[i-1], scores[i-1], label='Percentage correctly answered')\n    plt.legend()\n    plt.ylim(0,100)\n    plt.xlim(0,50)\n    plt.tight_layout(pad = 2)\n    plt.title(f'user_id: {user_ids[i-1]}')","fa42f3cc":"train_df.groupby(['user_id'])['timestamp'].max().sort_values(ascending=False).head(20)","f824b7cb":"train_df['content_id'].value_counts()","b3cbf873":"train_df.loc[train_df['content_id'] == 6116]","8d94b38e":"train_df.loc[train_df['content_id'] == 6116, 'user_answer'].value_counts()","ca50e71c":"questions_df.loc[questions_df['question_id'] == 6116]","4de84098":"### Parts distribution Part\u306e\u5206\u5e03","6a038f98":"### Answers by content","25f079c0":"# train.csv","0827cc8f":"### Number tags distribution tags\u306e\u6570\u306e\u5206\u5e03\n\ntags: one or more detailed tag codes for the question. The meaning of the tags will not be provided, but these codes are sufficient for clustering the questions together.\n\ntags \u610f\u5473\u306f\u7279\u306b\u306a\u3044\u3051\u3069\u3001\u3053\u308c\u3089\u306e\u30b3\u30fc\u30c9\u306f\u8cea\u554f\u3068\u4e00\u7dd2\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u969b\u306b\u52b9\u679c\u7684\u3089\u3057\u3044\u3002","37da4235":"timestamp\u30fb\u30fb\u30fb\u30e6\u30fc\u30b6\u30fc\u3068\u306e\u5bfe\u8a71\u304b\u3089\u305d\u306e\u30a4\u30d9\u30f3\u30c8\u7d42\u4e86\u307e\u3067\u306e\u6642\u9593\n\ntimestamp is defined as \"the time between this user interaction and the first event from that user\"\n\nprior_question_elapsed_time is defined as \"How long it took a user to answer their previous question bundle, ignoring any lectures in between. The value is shared across a single question bundle, and is null for a user's first question bundle or lecture. Note that the time is the total time a user took to solve all the questions in the previous bundle\"\n\nThe timestamp column shows when an activity is finished, not when it started. \n\nThe timestamp timer starts after first question is answered or lecture is finished.\n\nprior_question_elapsed_time timer starts when the user starts doing the previous question and it ends when the user moves to another question.\n\nmaybe timestamp is miliseconds. it cannot be seconds.\n\nhttps:\/\/www.kaggle.com\/c\/riiid-test-answer-prediction\/discussion\/189351","a0eb9864":"#### content_id\nId of the content - question or lecture","09f9cea5":"### Answers by users","679fc245":"\u30a2\u30af\u30c6\u30a3\u30d6\u30e6\u30fc\u30b6\u30fc\u306f\u3001\u521d\u5fc3\u8005\u3088\u308a\u3082\u306f\u308b\u304b\u306b\u512a\u308c\u3066\u3044\u308b\u3002\n\n\u5168\u4f53\u306e\u5e73\u574766%\u3000\u3057\u304b\u3057\u3001\u5e73\u5747\u30e6\u30fc\u30b6\u30fc\u30b9\u30b3\u30a2\u306f\u3001\u6b63\u89e3\u306e\u5168\u4f53\u306e66\uff05\u3088\u308a\u3082\u4f4e\u304f\u306a\u3063\u3066\u3044\u308b\u3002\u2192\u3053\u308c\u306f\u3001\u30d8\u30d3\u30fc\u30e6\u30fc\u30b6\u30fc\u306e\u30b9\u30b3\u30a2\u304c\u3055\u3089\u306b\u9ad8\u304f\u306a\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u3002\n\nWe can see that active users do much better than novices. But anyway average user score is lower than the overall % of correct answers. It means heavy users have even better scores. Let's look at them.","30d1df33":"### Parts distribution\n\npart: top level category code for the lecture.","cb545396":"### answered_correctly\u306e\u4e0a\u4f4d\u3068\u4e0b\u4f4d\u3092\u6bd4\u8f03\u3057\u305f\u3044\u3002","fbde4cfd":"\u5e73\u5747\u3057\u3066\u3001\u30e6\u30fc\u30b6\u30fc\u306f\u6700\u5927\uff16\uff16\uff05\u306e\u8cea\u554f\u306b\u6b63\u3057\u304f\u7b54\u3048\u3066\u3044\u308b\u3002 \u2192\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u3069\u306e\u304f\u3089\u3044\u9055\u3046\u304b\u3082\u898b\u3066\u307f\u308b\n\nOn average users answer ~66% questions correctly. Let's look how it is different from user to user.\n\n\u300c\u8b1b\u7fa9\u300d\u3092\u9664\u5916\u3057\u305f\u3001answered_correctly\u3092\u307f\u3066\u307f\u308b\u3068\u3001\uff11\uff0f\uff13\u306f\u8cea\u554f\u306b\u9593\u9055\u3048\u3066\u3044\u308b\u3002\n\nWhen looking at the numbers of answered_correctly, we see the same number of missing answers. Without looking at the lecture interactions, we see about 1\/3 of the questions was answered incorrectly.","083cc94e":"\u300c\u9078\u629e\u80a2\u300d\u3054\u3068\u306e\u6b63\u7b54\u7387\n\n* option0 65.93%\n* option1 64.93%\n* option2 66.95%\n* option3 66.00%\n* option-1 NaN","36a94740":"prior_question_had_explanation\n\n0: \u56de\u7b54\u3057\u305f\u3042\u3068\u3001\u30e6\u30fc\u30b6\u30fc\u306f\u7121\u8996\u3057\u3066\u3044\u308b\u3002 \u4e0d\u771f\u9762\u76ee\uff1f\u3000\u30fb\u30fb\u30fb\u3000\u3067\u3082\u3001\u56de\u7b54\u306b(\u7c21\u5358\u3059\u304e\u3066)\u6b63\u89e3\u3057\u305f\u3089\u3001\u56de\u7b54\u5f8c\u306b\u89e3\u8aac\u3092\u78ba\u8a8d\u3057\u306a\u3044\u3002\u5fa9\u7fd2\u3067\u3001\u305d\u306e\u8cea\u554f\u306b\u4f55\u56de\u304b\u7b54\u3048\u3066\u3044\u305f\u3089\u3001\u89e3\u8aac\u3092\u98db\u3070\u3059\u3088\u306d\u3002\n\n1: \u56de\u7b54\u3057\u305f\u3042\u3068\u3001\u30e6\u30fc\u30b6\u30fc\u306f\u89e3\u8aac\u3092\u898b\u3066\u3044\u308b\u3002\u3000\u771f\u9762\u76ee\uff1f\n\nprior_question_had_explanation\n\n\u30e6\u30fc\u30b6\u30fc\u304c\u3001(\u524d\u306e\u8cea\u554f\u30d0\u30f3\u30c9\u30eb\u306b\"\u7b54\u3048\u305f\"\u5f8cor\u8cea\u554f\u9593\u306e\"\u8b1b\u7fa9\"\u3092\u7121\u8996\u3057\u305f\u5f8c)\u8aac\u660e\u3092\u307f\u305f\u304b\u2252\u6b63\u3057\u3044\u53cd\u5fdc\u3092\u3057\u305f\u304b\u3069\u3046\u304b\u3002\u203bnull\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u3068\u3063\u3066\u6700\u521d\u306e\u8cea\u554for\u8b1b\u7fa9\u3067\u3042\u308b\u3002\u57fa\u672c\u306f\u3001\u6700\u521d\u8b1b\u7fa9\u3089\u3057\u3044\u3002(\u901a\u5e38\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u8868\u793a\u3055\u308c\u308b\u6700\u521d\u306e\u3044\u304f\u3064\u304b\u306e\u8cea\u554f\u306f\u3001\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u304c\u5f97\u3089\u308c\u306a\u304b\u3063\u305f\u8a3a\u65ad\u30c6\u30b9\u30c8\u306e\u4e00\u90e8)\n\n(bool) Whether or not the user saw an explanation and the correct response(s) after answering the previous question bundle, ignoring any lectures in between. The value is shared across a single question bundle, and is null for a user's first question bundle or lecture. Typically the first several questions a user sees were part of an onboarding diagnostic test where they did not get any feedback.\n\n* \u30103\u3064\u306e\u30d7\u30ed\u30c3\u30c8\u304b\u3089\u63a8\u6e2c\u3067\u304d\u308b\u3053\u3068\u3011\n\n\u30b9\u30bf\u30fc\u30c8: prior_explanation \u306a\u3044 0\u3000\u30fb\u30fb\u30fb\u3000\u6700\u521d\u306e\u8cea\u554f\u3060\u304b\u30890\u3060\u3068\u601d\u308f\u308c\u308b\u3002\u30fb\u30fb\u30fb\u305d\u308c\u306b\u3057\u3066\u3082\u3001\u7d50\u69cb\u56de\u7b54\u3092\u9593\u9055\u3048\u3066\u3044\u308b0\u30e6\u30fc\u30b6\u30fc\u304c\u591a\u3044\u3002\n\n\u30df\u30c9\u30eb: prior_explanation \u306a\u30440\u3000\u4e00\u90e8\u3042\u308b1\u3000\u30fb\u30fb\u30fb\u3000\u307b\u3068\u3093\u3069\u6b63\u89e31\u3057\u3066\u3044\u308b\u3002(\u89e3\u8aac\u3092\u632f\u308a\u8fd4\u3089\u306a\u304f\u3066\u3082\u3044\u3044\u307b\u3069)\u7c21\u5358\u306a\u554f\u984c\u306a\u306e\u304b\uff1f\u3000\u4e00\u90e8\u3001\u304d\u3061\u3093\u3068\u89e3\u8aac\u3092\u898b\u3066\u308b(\u771f\u9762\u76ee!!)\n\n\u30d5\u30a1\u30a4\u30ca\u30eb: prior_explanation \u307b\u3068\u3093\u3069\u5168\u90e8\u3042\u308b1\u3000\u30fb\u30fb\u30fb\u3000(\u307e\u3041\u3001\u307b\u3068\u3093\u3069\u6b63\u89e31\u3057\u3066\u3044\u308b\u304c\u3001)\u307f\u3093\u306a\u56de\u7b54\u5f8c\u306b\u3001(\u6b63\u89e31\u3057\u3066\u3082)\u89e3\u8aac\u306e\u8aac\u660e\u3092\u898b\u3066\u3044\u308b\uff01 (\u306a\u3093\u3067\u3060\uff1f)\n\n\u2192\u3000timestamp\u6642\u9593\u304c\u7d4c\u3064\u307b\u3069\u3001\u30e6\u30fc\u30b6\u30fc\u306f\u56de\u7b54\u5f8c\u306e\u89e3\u8aac\u3092\u898b\u3066\u3044\u308b(\u307b\u3068\u3093\u3069\u6b63\u89e31\u3057\u3066\u3044\u308b\u3051\u3069)\u30fb\u30fb\u30fb\u554f\u984c\u304c\u96e3\u3057\u3044\u306e\u304b\u306a\uff1f\n\n\u203b\u3000\u6ce8\u610f\u3068\u3057\u3066\u3001\u5168\u3066\u306e\u8cea\u554f\u306b\u3001\u300c\u56de\u7b54\u5f8c\u306e\u89e3\u8aac\u300d\u304c\u3042\u308b\u8a33\u3067\u306f\u306a\u3044\u3002(\u3068\u601d\u308f\u308c\u308b)\n\nThere are many things that can be inferred from the above 3 plots\n\n\u30fbFirst thing you can see that in the early stages there are no prior_explanation.\n\n\u30fbIn the final stages you can see almost all had prior_explanation.\n\n\u30fbNotice that in starting time there are a lot of question that are answered incorrectly (marked by black x)\n\n\u30fbIn the middle time session the questions that did not have prior explanation were answered wrong (look bottom of chart-2)\n\n\u30fbFinal stages had nearly all answers correct","4957728b":"### \u9069\u5f53\u306b8\u4eba\u306e\u5b66\u751f\u306e\u50be\u5411\u3092\u8ffd\u3063\u3066\u307f\u308b\u3002","14a22414":"\u2191\u5404\u30e6\u30fc\u30b6\u30fc\u306e\u6700\u5927\u306etimestamp\u306e\u5206\u5e03\u30fb\u30fb\u30fb\u307b\u3068\u3093\u3069\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u3059\u3050\u306b\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u96e2\u308c\u308b\u3088\u3046\u3060\u3002\n\nThe distribution of the max timestamp for each user looks similar. It seems most users leave the platform quite soon (at least based on partial data we analyze).","1671bf08":"# Questions.csv","80de22f0":"prior_question_elapsed_time \u306f\u3001\u524d\u306e\u8cea\u554f\u306e\u56de\u7b54\u306b\u3069\u306e\u304f\u3089\u3044\u306e\u6642\u9593\u3092\u8981\u3057\u305f\u304b\u3002\n\nThere is mostly a linear increase in prior question time elapsed.","dbf4b4bc":"\u5272\u5408\u7684\u306b\u306f\u3001prior explanations(\u4e8b\u524d\u306e\u8aac\u660e)\u3092\u898b\u305f\u3053\u3068\u304c\u306a\u304f\u3001\u6b63\u89e3\u3057\u305f\u751f\u5f92\u304c\u304b\u306a\u308a\u3044\u307e\u3059\u3002\u3053\u308c\u4ee5\u4e0a\u306e\u8aad\u307f\u53d6\u308a\u306f\u3001timestamp\u306e\u5074\u9762\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\nThere is a considerable amount of students who never watched prior explanations and yet answered correctly. Any further than this we will need to use timestamps or other files.","1373a8e3":"### Answered correctly\n \u30e6\u30fc\u30b6\u30fc\u304c\u6b63\u3057\u304f\u5fdc\u7b54\u3057\u305f\u304b\u3069\u3046\u304b\u3002\u8b1b\u7fa9\u3068\u8cea\u554f\u304c\u3042\u308b\u3002\u8b1b\u7fa9\uff08lectures\uff09\u306e\u5834\u5408\u306f\u3001-1\u3092null\u3068\u3057\u3066\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\u8cea\u554f\u306e\u5834\u5408\u306f\u3001\u6b63\u7b54\uff11\u3001\u8aa4\u7b54\uff10","8828bdea":"### task_container_id action distribution","551d889e":"We can see that a lot of people made mistakes answering this question.","5d6aa9e7":"### \u3053\u308c\u307e\u3067\u306e\u307e\u3068\u3081\n\u30fbTimestamp, \u30fb\u30a2\u30af\u30c6\u30a3\u30d6\u30e6\u30fc\u30b6\u30fc\u306e\u5e73\u5747\u30b9\u30b3\u30a2, \u30fb\u56de\u7b54\u3055\u308c\u305f\u8cea\u554f\u306e\u6570\u3001\u306f\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306e\u4f5c\u6210\u306b\u5f79\u7acb\u3061\u305d\u3046\u3002\n\nTimestamp, the average score for the active user, and the number of questions answered can be useful for baseline.","ced6e1a7":"### Top 40 users by number of actions","0fd87f5c":"#### timestamp \u306b\u3064\u3044\u3066\n\nIt is imprtant to remember that this is the time between this user interaction and the first event from that user. So starting time could be different for each user","8ddd31b5":"Some users have really huge activity time!","3941c086":"\u30bf\u30b0\u306e\u5206\u5e03\u306f\u3001\u975e\u5e38\u306b\u504f\u3063\u3066\u3044\u308b\u300280\uff05\u3092\u8d85\u3048\u308b\u5272\u5408\u3067\u767a\u751f\u3059\u308b\u30bf\u30b0\u306f40\u500b\u3060\u3051\u3067\u3059\u3002\n\nThe distribution of tags is very skewed. Only 40 tags occur almost > 80% of time. If we want to decrease the sparcity of our data we could use only the top 100 tags and it would be more than 95% of total tags with only 50% sparcity.","746c7c74":"### \u5b66\u751f\u3054\u3068\u306b\u3001\u3069\u306e\u304f\u3089\u3044\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u89e3\u8aac\u3092\u898b\u3066\u3044\u308b\u304b","66d40dc0":"\u975e\u5e38\u306b\u591a\u304f\u306e\u50be\u5411\u3068\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308b\u3002\n\n\u8cea\u554f\u306e\u56de\u7b54\u6570\u304c\u591a\u304f\u306a\u308b\u304b\u3089\u3068\u3044\u3063\u3066\u3001\u6b63\u7b54\u7387\u304c\u4e0a\u304c\u308b\u3068\u306f\u3044\u3048\u306a\u3044\u3002\n\n\nSo much to see. So much trends and patterns. Well those who had prior explanation had better results. So the trend has many types. sudden spikes(+ve, -ve), consistency, continuous increment, decrement.\nBad Students: Almost no one started watching explanations until they started performing bad.","38d0be85":"\u30e6\u30fc\u30b6\u30fc\u306e54\uff05\u304c\u300150\u672a\u6e80\u306e\u8cea\u554f\u306b\u56de\u7b54\u3002 \u2192 \u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u300c\u521d\u5fc3\u8005\u300d\u3068\u300c\u30a2\u30af\u30c6\u30a3\u30d6\u30e6\u30fc\u30b6\u30fc\u300d\u306b\u5206\u3051\u3066\u307f\u308b\u3002\n\n54% of users answered less than 50 questions. Let's divide all users into novices and active users.","54e7c080":"### timestamp","2044c109":"### Top 40 most useful content_ids","b12ceb52":"train\u30c7\u30fc\u30bf\u306e\u7d042%\u306f\u3001\u300c\u8b1b\u7fa9\u300d\u3067\u3042\u308b\u3002\u2192\u56de\u7b54\u5206\u6790\u304b\u3089\u9664\u5916\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n2% of activities are lectures, we should exclude them for answers analysis.","0707c9d3":"### Top 40 lectures by number of tags \u8b1b\u7fa9\u30bf\u30b0\u306e\u6570\u30e9\u30f3\u30ad\u30f3\u30b0","ab681e7b":"\u8cea\u554f(content_id)\u304c\u7570\u306a\u308c\u3070\u3001answered_correctly\u3082\u7570\u306a\u308b\u305f\u3081\u3001\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306b\u4f7f\u3048\u305d\u3046\u3002\n\nDifferent questions have different popularity and complexity, and it can also be used in the baseline.","6b2894e4":"10k = 10,000 miliseconds = 10 seconds(\u79d2)\n\n\u5206\u5e03\u898b\u305f\u611f\u3058\u300116~25\u79d2\u304f\u3089\u3044\u304c\u30dc\u30ea\u30e5\u30fc\u30e0\u30be\u30fc\u30f3","25cf927e":"part5\u306equestion\u304c\u591a\u3044\u3002","f9dcc445":"\u307b\u3068\u3093\u3069\u306e\u5b66\u751f\u304c\u30012000\u672a\u6e80\u306e\u30c7\u30fc\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u3002\u3000train\u5185\u3067\u767b\u5834\u3059\u308b\u56de\u6570\u3092\u3001\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u30ab\u30a6\u30f3\u30c8","95fc25f7":"\u56de\u7b54\u304c\u6b63\u89e3\u306b\u306a\u308a\u3084\u3059\u3044\u8cea\u554f\u305f\u3061(\u7c21\u5358\u306a\u554f\u984c\uff1f\uff09\u306e\u5272\u5408\n\nyou can see the Top-40 of question batches with the highest percentage of questions answered correct.","2035c88f":"-1 \u306f\u3001lecture(\u8b1b\u7fa9)\u306e\u305f\u3081\u3001null\u6271\u3044","68b3f8ac":"### Percent of user answers for every option \u30e6\u30fc\u30b6\u30fc\u304c\u56de\u7b54\u3057\u305f\u300c\u9078\u629e\u80a2\u300d\u306e\u5272\u5408","5c58e996":"### Top 40 most useful tags tags\u306e\u51fa\u73fe\u56de\u6570","0bcfc76d":"### Top 40 most useful task_container_id\n\ntask_container_id: (int16) Id code for the batch of questions or lectures. For example, a user might see three questions in a row before seeing the explanations for any of them. Those three would all share a task_container_id.\n\n\u8cea\u554f\u3084\u8b1b\u7fa9\u306e\u3072\u3068\u304b\u305f\u307e\u308a\u3092\u8868\u3057\u305fID\u30b3\u30fc\u30c9\n\n\u4f8b\uff1a\u3000\u8aac\u660e\u3092\u898b\u308b\u524d\u306b\u30013\u3064\u306e\u8cea\u554f\u3092\u898b\u305f\u3089\u305d\u308c\u3089\u3092task_container_id\u3068\u3057\u3066\u30b7\u30a7\u30a2\u3057\u3066\u304a\u304f\u3002\n\n\u21e8\u3064\u307e\u308a\u3001train\u306e\u300cuser_answer(\u30e6\u30fc\u30b6\u30fc\u306e\u56de\u7b54)\u300d\u3060\u3051\u3067\u306f\u306a\u304f\u3001(\u305d\u306e\u7b54\u3048\u308b\u6642\u306b\u300c\u4ed6\u306e\u9078\u629e\u80a2\u300d\u3082\u542b\u3093\u3060)\u304c\u308f\u304b\u308bID\u30ab\u30e9\u30e0(\u5916\u90e8\u30ad\u30fc)","bf4d5e9f":"### Number of correct answers per group \u6b63\u89e3\u306e\u30ca\u30f3\u30d0\u30fc\u306e\u5272\u5408","1d4a6669":"# lectures.csv\n\n\u8b1b\u7fa9\u5185\u5bb9\u306e\u8a73\u7d30\u30c7\u30fc\u30bf","b91cdf74":"### \u5b66\u751f\u3054\u3068\u306b\u30b5\u30f3\u30d7\u30eb\u306e\u6570\u306e\u5206\u5e03\u3092\u898b\u308b","deefa48d":"task_container_id \u304c\u5c0f\u3055\u3044\u307b\u3069\u3001\u30c7\u30fc\u30bf\u306e\u51fa\u73fe\u56de\u6570\u3082\u591a\u3044\u3002","7299afd8":"\u307b\u3068\u3093\u3069\u306e\u8cea\u554f\u304c\u3001\u89e3\u8aac\u3064\u304d\u3067\u3042\u308b\u3002\u3000\u53f3\u4e0b\u306e\u30d7\u30ed\u30c3\u30c8\u306e\u584a\u306f\u3001\u304a\u305d\u3089\u304f\u5927\u52e2\u306e\u751f\u5f92\u304c\u540c\u6642\u306b\u3001\u300c\u8a66\u9a13\u300d\u3092\u3057\u305f\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u3060\u308d\u3046\u3002\n\nFrom the above plot we can see most of the questions had an explanation. Also we can see near right bottom some points in groups. This maybe because a large number of students took their test at the same time.\n\n\u30d6\u30eb\u30fc\u306e\u30e9\u30a4\u30f3(x\u8ef8\u304c0)\u306f\u3001timestamp\u304c0\u3060\u304b\u3089\uff1d\u6700\u521d\u306e\u3084\u3064\u306fprior explanations\u304c0\u3067\u3042\u308b\u6c7a\u307e\u308a\u306a\u306e\u3067\u3002\n\nAnother thing that we can notice is a faint blue line along the y-axis where x is 0. This is where the timestamp is 0 and there were no prior explanations.\n\nhttps:\/\/www.kaggle.com\/nitindatta\/eda-with-r3-id","5c7ac61e":"### prior_question_had_explanation\u3068\u6642\u9593(timestamp)\u306e\u6d41\u308c\n\nprior_question_had_explanation: (bool) Whether or not the user saw an explanation and the correct response(s) after answering the previous question bundle, ignoring any lectures in between. The value is shared across a single question bundle, and is null for a user's first question bundle or lecture. Typically the first several questions a user sees were part of an onboarding diagnostic test where they did not get any feedback.\n\n### prior_question_had_explanation(\u30e6\u30fc\u30b6\u30fc\u306e\u8cea\u554f\u56de\u7b54\u5f8c\u306e\u53cd\u5fdc)\u3068answaered_correctly(\u6b63\u89e3\u304b)\u306e\u95a2\u4fc2\u3092\u898b\u308b","51f447fd":"### content_id action distribution","cb6fec78":"### \u5b66\u751f\u306e\u6570","0362649c":"timestamp represents the time from the first user interaction to the current one. It is expected that the distribution looks like this.","f2360c1a":"### prior_question_elapsed_time distribution\n\nprior_question_elapsed_time: (float32) The average time in milliseconds it took a user to answer each question in the previous question bundle, ignoring any lectures in between. Is null for a user's first question bundle or lecture. Note that the time is the average time a user took to solve each question in the previous bundle.\n\n\u524d\u306e\u8cea\u554f\u306b\u56de\u7b54\u3057\u3066\u304b\u3089\u3001\u3069\u306e\u304f\u3089\u3044\u30df\u30ea\u30bb\u30ab\u30f3\u30c9\u79d2\u7d4c\u3063\u305f\u304b\u3002 NULL = \u8b1b\u7fa9\u304b\u521d\u3081\u3066\u306e\u8cea\u554f\u306e\u5834\u5408\u3002 \u3053\u306e\u30ab\u30e9\u30e0\u306f\u3001\u300c\u524d\u306e\u8cea\u554f\u306b\u3069\u306e\u304f\u3089\u3044\u89e3\u6c7a\u6642\u9593\u3092\u8981\u3057\u305f\u304b\u300d\u306e\u53c2\u8003\u306b\u306a\u308b","84bcd767":"### Percent of correct answers for every option \u300c\u9078\u629e\u80a2\u300d\u3054\u3068\u306e\u56de\u7b54\u6b63\u89e3\u7387\n\n\u3053\u308c\u307e\u3067\u306e\u3084\u3064\n\n* [\u5168\u4f53] \u5e73\u5747\u3057\u3066\u3001\u30e6\u30fc\u30b6\u30fc\u306f\u6700\u5927\uff16\uff16\uff05\u306e\u8cea\u554f\u306b\u6b63\u3057\u304f\u7b54\u3048\u3066\u3044\u308b\u3002\n* [\u521d\u5fc3\u8005] \u6b63\u89e3\u7387 \u7d0448%\n* [\u30a2\u30af\u30c6\u30a3\u30d6\u30e6\u30fc\u30b6\u30fc] \u6b63\u89e3\u7387 \u7d0462%","d7a2d958":"### User action distribution","504fabab":"### \u5b66\u751f\u3054\u3068\u306b\u3001\u3069\u306e\u304f\u3089\u3044\u8cea\u554f\u306b\u56de\u7b54\u3092\u8a66\u307f\u305f\u304b\u5206\u5e03\u3092\u898b\u308b","4b27b3c3":"correctly answered \u306e\u6b63\u89e3\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306e\u65b9\u304c\u3001\u5168\u4f53\u7684\u306b\u8cea\u554f\u306b\u56de\u7b54\u3057\u3066\u3044\u308b\u5272\u5408\u304c\u591a\u3044\u3068\u898b\u308c\u308b\u3002","925cc06f":"### type_of column distribution \u8b1b\u7fa9(\u7a2e\u985e\u30fb\u5185\u5bb9)\u306e\u5185\u8a33","1e7f9a13":"\u3053\u306e\u4e2d\u3067\u9ad8\u3081\u306a\u76f8\u95a2\u304c\u3042\u3063\u305f\u306e\u306f\u3001[task_container_id - timestamp] \u3068 [content_type_id - answered_correctly]\n\n\u3068\u306f\u3044\u3048\u3001\u6709\u52b9\u305d\u3046\u306a\u76f8\u95a2\u306f\u306a\u3044\u3063\u3066\u611f\u3058\u3002\n\nwe can see 2 correlations which have some high values:\n\n* task_container_id is correlated with the timestamp.\n\ntask_container_id\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u5358\u8abf\u306b\u5897\u3048\u3066\u3044\u308b\u304b\u3089\u3001timestamp\u3068\u76f8\u95a2\u304c\u9ad8\u3081\u306b\u3067\u308b\u3002\n\n(task_container_id: Id code for the batch of questions or lectures. For example, a user might see three questions in a row before seeing the explanations for any of them. Those three would all share a task_container_id. Monotonically\uff08\u5358\u8abf\u306b\uff09 increasing for each user.)\n\nThis might help us explain why it has a good correlation with the timestamp\n\n* content_type_id is correlated with answered_correctly\n(content_type_id: 0 if the event was a question being posed to the user, 1 if the event was the user watching a lecture.)\n\n0: \u8cea\u554f 1: \u8b1b\u7fa9\n\n\u8b1b\u7fa9\u3092\u307f\u305f\u30e6\u30fc\u30b6\u30fc\u306e\u65b9\u304c\u3001\u56de\u7b54\u7387\u304c\u9ad8\u3044\u306e\u306f\u60f3\u50cf\u3064\u304f\u304b\u3089\u3001\u3053\u308c\u306f\u3044\u3044\u76f8\u95a2\u3067\u3042\u308b\n\nIf the user watched the lecture then chances of answering correctly increases so there is a good correlation I assume.","8f83870d":"\u4e00\u756a\u591a\u3044\u30e6\u30fc\u30b6\u30fc\u3067\u300115,871\u56de\u30c7\u30fc\u30bf\u51fa\u73fe\u3057\u3066\u3044\u308b\u3002","dcd77f99":"categorical\u30ab\u30c6\u30b4\u30ea\u5909\u6570\n\ncontent_type_id, user_answer , answered_correctly ,prior_question_had_explanation\n\nnow we can see that there are some very low integer we convert the columns content_type_id, user_answer , answered_correctly ,prior_question_had_explanation to categorical format when we train a model","9cd6d326":"\u5b66\u751f\u3054\u3068\u306b\u30b5\u30f3\u30d7\u30eb\u306e\u6570\u306e\u5206\u5e03\u3068\u4f3c\u3066\u3044\u308b\u3002\u3000\u307b\u3068\u3093\u3069\u306e\u5b66\u751f\u304c\u30012000\u672a\u6e80\u306e\u8cea\u554f\u306b\u56de\u7b54\u3057\u3066\u3044\u308b\u3002"}}