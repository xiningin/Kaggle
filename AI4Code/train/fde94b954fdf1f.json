{"cell_type":{"66b8fe28":"code","500cc212":"code","c1bb9b21":"code","9f3d5ab0":"code","ac7cc870":"code","a28e9fd3":"code","66c5e125":"code","b90b24d4":"code","8ffca3a1":"code","9c6541f3":"code","7cab2216":"code","1ccb7eda":"code","603dc01d":"code","7b213f85":"code","9fefc340":"code","324807c4":"code","09772675":"code","8abb431e":"code","2f814903":"code","70f69043":"code","983fbfe9":"code","944602e4":"code","1f731e9c":"code","988f5e2d":"code","9aff3511":"code","ca641c0f":"code","ed3056a8":"code","c1847581":"code","714c740f":"code","de1816bd":"code","c91e11ba":"code","7d534479":"code","e9e0d861":"code","178f6502":"code","7f2e9a79":"code","28a16941":"code","6933f669":"code","ee10648a":"code","d506227a":"code","fcbdc238":"code","fdd9ba71":"code","07460cef":"code","ea9e4ba1":"code","8a7d32ed":"code","506e5648":"code","2a5290eb":"code","75829618":"code","2752055f":"code","2d0853f0":"code","b6b1cfef":"markdown","1c68dcc3":"markdown","ad63168d":"markdown","a1974e0c":"markdown","600b2b30":"markdown","d84cb438":"markdown","52e633b5":"markdown"},"source":{"66b8fe28":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom bokeh.io import show,output_notebook\nfrom bokeh.layouts import column\nfrom bokeh.plotting import figure\nfrom bokeh.models import ColumnDataSource, HoverTool, CustomJS, TextInput\noutput_notebook()","500cc212":"def process_df(df):\n    df['SubmissionDate'] = pd.to_datetime(df['SubmissionDate'])\n    df['Rank'] = df['Score'].rank()\n    df['Rank'] = df['Rank'].max() - df['Score'].rank() + 1\n    df['SubmissionDays'] = (df['SubmissionDate'].max() - df['SubmissionDate']).dt.days\n    firstScoreDate = df.groupby('Score')['SubmissionDate'].transform('min')\n    uniqueScore = df.groupby('Score')['SubmissionDate'].transform('count') == 1\n    df['color'] = 'red'\n    df.loc[uniqueScore, 'color'] = 'blue'\n    df.loc[firstScoreDate < df['SubmissionDate'], 'color'] = 'yellow'","c1bb9b21":"# Load data and prepare position for teams\n\nleaderboard_public = pd.read_csv('..\/input\/jane-street-market-prediction-leaderboards\/jane-street-market-prediction-publicleaderboard.csv')\n\nprocess_df(leaderboard_public)\nleaderboard_public.head()","9f3d5ab0":"# Check distributions of scores\n\nleaderboard_public['Score'].plot.hist(bins=50, color='green', figsize=(10,3));","ac7cc870":"# count of unique cases and ratio of unique cases\n\nleaderboard_public['Score'].nunique(), leaderboard_public['Score'].nunique() \/ len(leaderboard_public)","a28e9fd3":"# count of cases with Score > 10000 and ratio of unique cases with Score > 10000\n\ntopscores = leaderboard_public[leaderboard_public['Score'] > 10000]['Score']\n\nlen(topscores), topscores.nunique(), topscores.nunique() \/ len(topscores)","66c5e125":"# Check distributions of top scores\n\nleaderboard_public.where(leaderboard_public['Score']>10000)['Score'].plot.hist(bins=50, color='green', figsize=(10,3));","b90b24d4":"# unique days\nleaderboard_public['SubmissionDays'].unique()","8ffca3a1":"# Check distributions of SubmissionDays\n\nleaderboard_public['SubmissionDays'].plot.hist(bins=25, color='green', figsize=(10,3), xlim=(leaderboard_public['SubmissionDays'].max(), leaderboard_public['SubmissionDays'].min()));","9c6541f3":"# scatter of Date and Score\nleaderboard_public.plot.scatter(x='SubmissionDate', y='Score', c='color', alpha=0.3, figsize=(10,10));","7cab2216":"# top 20 the most frequent scores\nleaderboard_public['Score'].value_counts().head(20)","1ccb7eda":"# scatter of Date and Rank\nleaderboard_public.plot.scatter(x='SubmissionDate', y='Rank', c='color', alpha=0.3, figsize=(10,10), ylim=(leaderboard_public['Rank'].max(), leaderboard_public['Rank'].min()));","603dc01d":"# Load data and prepare position for teams\n\nprivate1 = pd.read_csv('..\/input\/jane-street-market-prediction-leaderboards\/jane-street-market-prediction-20200305.csv')\n\nprocess_df(private1)\nprivate1.head()","7b213f85":"# Check distributions of scores\n\nprivate1['Score'].plot.hist(bins=50, color='green', figsize=(10,3));","9fefc340":"# count of unique cases and ratio of unique cases\n\nprivate1['Score'].nunique(), private1['Score'].nunique() \/ len(private1)","324807c4":"# count of cases with Score > 4000 and ratio of unique cases with Score > 4000\n\ntopscores = private1[private1['Score'] > 4000]['Score']\n\nlen(topscores), topscores.nunique(), topscores.nunique() \/ len(topscores)","09772675":"# top 20 the most frequent scores\nprivate1['Score'].value_counts().head(20)","8abb431e":"private1['PastScore'] = private1['TeamId'].map(leaderboard_public.set_index('TeamId')['Score'])\nprivate1['PastRank'] = private1['TeamId'].map(leaderboard_public.set_index('TeamId')['Rank'])\nprivate1['PastSubmissionDate'] = private1['TeamId'].map(leaderboard_public.set_index('TeamId')['SubmissionDate'])\nprivate1['PastSubmissionDays'] = private1['TeamId'].map(leaderboard_public.set_index('TeamId')['SubmissionDays'])","2f814903":"# scatter of New\/Past Scores\nprivate1.plot.scatter(x='PastScore', y='Score', c='color', alpha=0.3, figsize=(10,10));","70f69043":"# scatter of New\/Past Rank\nprivate1.plot.scatter(x='PastRank', y='Rank', c='color', alpha=0.3, figsize=(10,10), ylim=(private1['Rank'].max(), private1['Rank'].min()), xlim=(private1['PastRank'].max(), private1['PastRank'].min()));","983fbfe9":"# scatter of Past Submission Date \/ Score\nprivate1.plot.scatter(x='SubmissionDate', y='Score', c='color', alpha=0.3, figsize=(10,10));","944602e4":"private1['PastScoreMin'] = private1['PastScore'].cummin()\nprivate1['PastRankMax'] = private1['PastRank'].cummax()\nprivate1['PastSubmissionDaysMax'] = private1['SubmissionDays'].cummax()\n\nprivate1.head()","1f731e9c":"# What is minimum score public Score you should have for getting high score\nprivate1.plot(x='Score', y='PastScoreMin');","988f5e2d":"# What is minimum score public Rank you should have for getting high rank\nprivate1.plot(x='Score', y='PastRankMax', ylim=(private1['PastRankMax'].max()+200, private1['PastRankMax'].min()-200));","9aff3511":"# What is maximum days for getting high score?\nprivate1.plot(x='Score', y='PastSubmissionDaysMax');","ca641c0f":"# Corr matrix\nprivate1[['Score', 'PastScore']].corr()","ed3056a8":"# Corr matrix\nprivate1[['Rank', 'PastRank']].corr()","c1847581":"# Corr matrix\nprivate1[['Score', 'PastSubmissionDays']].corr()","714c740f":"# Bokeh visualization of Private\/Public Scores\n\nsource = ColumnDataSource(private1)\nsource_visible = ColumnDataSource(private1)\n\nplot = figure(\n    x_axis_label = \"Public Score\",\n    y_axis_label = \"Private Score\",\n    tools=\"pan,wheel_zoom,zoom_in,zoom_out,box_zoom,reset\",\n    plot_width=800,\n    plot_height=1000,\n)\nplot.circle(x=\"PastScore\",y=\"Score\",source = source_visible, radius=3, alpha=0.5, color='color')\nplot.text(x='PastScore',y='Score', text='TeamName',source  = source_visible,\n       text_baseline=\"middle\", text_align=\"left\", text_font_size='8pt', text_font='Arial', alpha=0.5)\n\nhover = HoverTool(tooltips = [\n    ('Team', '@TeamId \/ @TeamName'), \n    ('Public Score\/ Private Score', '@PastScore{i} \/ @Score{i}')])\nplot.add_tools(hover)\n\ncallback = CustomJS(args=dict(source_visible=source_visible,\n              source=source), code=\"\"\"\n        var f = cb_obj.value\n        var data = source.data;\n        \n        var data_visible = {'SubmissionDate': [], TeamId':[], 'TeamName': [], 'Score': [], 'PastScore': [], 'color': []}\n        \n        for (var i = 0; i < data['TeamId'].length; i++) {\n            if (data['TeamName'][i].includes(f)) {\n                data_visible['SubmissionDate'].push(data['SubmissionDate'][i])\n                data_visible['TeamId'].push(data['TeamId'][i])\n                data_visible['TeamName'].push(data['TeamName'][i])\n                data_visible['Score'].push(data['Score'][i])\n                data_visible['PastScore'].push(data['PastScore'][i])\n                data_visible['color'].push(data['color'][i])\n            }\n        }\n        \n        source_visible.data = data_visible\n        source_visible.change.emit();\n    \"\"\")\n\ntext_input = TextInput(value=\"\", title=\"Filter by TeamName:\")\ntext_input.js_on_change(\"value\", callback)\n\nshow(column(text_input, plot))","de1816bd":"private1.groupby('TeamId').size().value_counts()","c91e11ba":"# Load data and prepare position for teams\n\nprivate2 = pd.read_csv('..\/input\/jane-street-market-prediction-leaderboards\/jane-street-market-prediction-20210317.csv')\n\nprocess_df(private2)\nprivate2.head()","7d534479":"# Check distributions of scores\n\nprivate2['Score'].plot.hist(bins=50, color='green', figsize=(10,3));","e9e0d861":"# top 20 the most frequent scores\nprivate2['Score'].value_counts().head(20)","178f6502":"private1['LastScore'] = private1['TeamId'].map(private2.set_index('TeamId')['Score'])\nprivate1['LastRank'] = private1['TeamId'].map(private2.set_index('TeamId')['Rank'])\n\nprivate1['ScoreDiff'] =  private1['LastScore'] - private1['Score']\nprivate1['RankDiff'] =  private1['LastRank'] - private1['Rank']","7f2e9a79":"# How many teams have decreased Score?\n(private1['ScoreDiff']<0).sum()","28a16941":"# scatter of First\/Last Scores\nprivate1.plot.scatter(x='Score', y='LastScore', c='color', alpha=0.3, figsize=(10,10));","6933f669":"# scatter of First\/Last Rank\nprivate1.plot.scatter(x='Rank', y='LastRank', c='color', alpha=0.3, figsize=(10,10), ylim=(private1['LastRank'].max(), private1['LastRank'].min()), xlim=(private1['Rank'].max(), private1['Rank'].min()));","ee10648a":"# scatter of LastScore\/Diff\nprivate1.plot.scatter(x='LastScore', y='ScoreDiff', c='color', alpha=0.3, figsize=(10,10));","d506227a":"# RankDiff distribution\nprivate1['RankDiff'].plot.hist(bins=200, figsize=(15,3))","fcbdc238":"# ScoreDiff distribution\nprivate1['ScoreDiff'].plot.hist(bins=200, figsize=(15,3))","fdd9ba71":"private1['ScoreDiff'].apply(['min', 'mean', 'median', 'max'])","07460cef":"# Teams with highest diff (looks like the had some failed kernels in the first run)\nprivate1.sort_values('ScoreDiff', ascending=False).head(20)","ea9e4ba1":"# Teams with lowest diff (looks like the have some failed kernels in the last run)\nprivate1.sort_values('ScoreDiff', ascending=False).tail(20)","8a7d32ed":"# Top 200 ScoreDiff distribution\nprivate1['ScoreDiff'].head(200).plot.hist(bins=20, figsize=(15,3))","506e5648":"private1['ScoreDiff'].head(200).apply(['min', 'mean', 'median', 'max'])","2a5290eb":"private1.sort_values('LastRank').head(50)","75829618":"rolling_mean = private1['ScoreDiff'].rolling(50, center=True, min_periods=1).mean()\nrolling_std = private1['ScoreDiff'].rolling(50, center=True, min_periods=1).std()\nhigh_level = rolling_mean + 0.5*rolling_std\nlow_level = rolling_mean - 0.5*rolling_std\n\nprivate1['ScoreDiff_cutted'] = private1['ScoreDiff']\nprivate1.loc[private1['ScoreDiff'] > high_level, 'ScoreDiff_cutted'] = high_level[private1['ScoreDiff'] > high_level]\nprivate1.loc[private1['ScoreDiff'] < low_level, 'ScoreDiff_cutted'] = low_level[private1['ScoreDiff'] < low_level]\nprivate1.loc[private1['ScoreDiff_cutted'].isnull(), 'ScoreDiff_cutted'] = 0\n\nprivate1['Score12runs'] = np.maximum(private1['Score'].fillna(0), private1['LastScore'].fillna(0) - private1['ScoreDiff_cutted'])  + 12 * private1['ScoreDiff_cutted']","2752055f":"private1.sort_values('Score12runs', ascending=False).head(50).style.bar(subset=['Rank', 'LastRank', 'Score', 'LastScore', 'Score12runs'], color='#d65f5f')","2d0853f0":"# scatter of First\/Predicted Scores\nprivate1.plot.scatter(x='Score', y='Score12runs', c='color', alpha=0.3, figsize=(10,10));","b6b1cfef":"# Corr matrixes","1c68dcc3":"# Latest Private LB (2021-03-17)","ad63168d":"# Public EDA","a1974e0c":"# First\/Last Private Analysis","600b2b30":"# 2021-03-05 (First Private LB)","d84cb438":"# Naive score prediction after 12 reruns (6 months = 24 weeks = 12 runs) :)","52e633b5":"# Private\/Public results"}}