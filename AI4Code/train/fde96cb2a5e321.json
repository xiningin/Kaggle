{"cell_type":{"5cc3a09f":"code","0163d4a8":"code","7671f0b6":"code","4983c73e":"code","5b184cbd":"code","59488ad4":"code","52c68279":"code","8db1f29b":"code","6d1b3ff9":"code","e15322c3":"code","e206358a":"code","724eca81":"code","c16a1b2b":"code","b37c407f":"code","1636dbf9":"code","cff4baed":"code","304baa0b":"markdown","9da6fa8e":"markdown"},"source":{"5cc3a09f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0163d4a8":"import pandas as pd\nimport numpy as np","7671f0b6":"df= pd.read_csv(\"\/kaggle\/input\/food-demand-forecasting\/train.csv\")\nmeal_df = pd.read_csv(\"\/kaggle\/input\/food-demand-forecasting\/meal_info.csv\")\ncenter_df = pd.read_csv(\"\/kaggle\/input\/food-demand-forecasting\/fulfilment_center_info.csv\")\ndata= df.merge(center_df,left_on = 'center_id', right_on = 'center_id',how=\"left\")\ndata= data.merge(meal_df,left_on = 'meal_id', right_on = 'meal_id',how=\"left\")\ndata.head()","4983c73e":"import seaborn as sns\nimport matplotlib.pyplot as plt","5b184cbd":"plt.figure(figsize=(14, 10))\nsns.lineplot(data=data, x=\"week\", y=\"num_orders\",ci=None)","59488ad4":"region_table = pd.pivot_table(data, values='num_orders', index=['week'],\n                    columns=['region_code'], aggfunc=np.sum)\nplt.figure(figsize=(14, 10))\nsns.lineplot(data=region_table.rolling(window=4).mean()).set(title='4 week moving average of number of orders by week and region code')\nplt.ylabel('num_orders')","52c68279":"cuisine_table = pd.pivot_table(data, values='num_orders', index=['week'],\n                    columns=['cuisine'], aggfunc=np.sum)\nplt.figure(figsize=(14, 10))\nsns.lineplot(data=cuisine_table.rolling(window=4).mean()).set(title='4 week moving average of number of orders by week and cuisine')\nplt.ylabel('num_orders')","8db1f29b":"center_type_data = data.groupby(['center_type'])['num_orders'].mean()\ncenter_type_data = pd.DataFrame({ 'center_type': center_type_data.index, 'num_orders': center_type_data.values })\nsns.barplot(data=center_type_data,x=\"center_type\",y=\"num_orders\").set(title='Average num of orders by center type')","6d1b3ff9":"cuisine_table = pd.pivot_table(data, values='num_orders', index=['cuisine'],\n                    columns=['emailer_for_promotion'], aggfunc=np.average)\ncuisine_table.plot(kind='bar',stacked=True,legend=True,title=\"avg num of orders with promotion\")","e15322c3":"cuisine_table = pd.pivot_table(data, values='num_orders', index=['cuisine'],\n                    columns=['homepage_featured'], aggfunc=np.average)\ncuisine_table.plot(kind='bar',stacked=True,legend=True,title=\"avg num of orders with homepage_featured\")","e206358a":"operation_area= data.groupby(['city_code'])['op_area'].sum()\nnum_orders= data.groupby(['city_code'])['num_orders'].sum()\noperation_area = pd.DataFrame({ 'city_code': operation_area.index, 'operation_area':operation_area.values , 'num_orders': num_orders.values })\noperation_area= operation_area.merge(center_df[[\"city_code\",\"region_code\"]],left_on = 'city_code', right_on = 'city_code',how=\"left\")\nsns.relplot(x=\"city_code\", y=\"num_orders\",hue=\"region_code\", size=\"operation_area\",\n            sizes=(1, 2000), palette=\"muted\",height=8, data=operation_area).set(title=\"operaion area vs num of orders\")","724eca81":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import OneHotEncoder","c16a1b2b":"def one_hot_encode(features_to_encode, dataset):\n    encoder = OneHotEncoder(sparse=False)\n    encoder.fit(dataset[features_to_encode])\n\n    encoded_cols = pd.DataFrame(encoder.transform(dataset[features_to_encode]),columns=encoder.get_feature_names())\n    dataset = dataset.drop(columns=features_to_encode)\n    for cols in encoded_cols.columns:\n        dataset[cols] = encoded_cols[cols]\n    return dataset","b37c407f":"data = data.drop([\"id\"],axis=1)\nfeatures_to_encode = ['meal_id','city_code',\"center_id\",'center_type', 'category', 'cuisine']\ndata = one_hot_encode(features_to_encode, data)\ny = data[\"num_orders\"]\nX= data.drop([\"num_orders\"],axis = 1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","1636dbf9":"RF_pipe = make_pipeline(StandardScaler(),RandomForestRegressor())\nRF_pipe.fit(X_train, y_train)\nRF_train_y_pred = RF_pipe.predict(X_test)\nprint(RF_pipe.score(X_test, y_test))\nprint('RMSLE:', 100*np.sqrt(metrics.mean_squared_log_error(y_test, RF_train_y_pred)))","cff4baed":"RF_pipe = make_pipeline(StandardScaler(),RandomForestRegressor(n_estimators = 200))\nRF_pipe.fit(X_train, y_train)\nRF_train_y_pred = RF_pipe.predict(X_test)\nprint(RF_pipe.score(X_test, y_test))\nprint('RMSLE:', 100*np.sqrt(metrics.mean_squared_log_error(y_test, RF_train_y_pred)))","304baa0b":"# Model","9da6fa8e":"# Explore data"}}