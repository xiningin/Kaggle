{"cell_type":{"b80fc467":"code","c718d759":"code","32d56058":"code","43d3ab49":"code","1a3f0e25":"code","4d874403":"code","8686261f":"code","76c644b1":"code","8d346e3b":"code","1168cfc7":"code","92f8de09":"code","f34220e2":"code","bb898893":"code","9de233cc":"markdown","b91e7cd2":"markdown"},"source":{"b80fc467":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c718d759":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import datasets\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')","32d56058":"df=pd.read_csv('..\/input\/wine.csv')","43d3ab49":"df.head()","1a3f0e25":"df.class_name.unique()","4d874403":"X= df.drop('class_name',axis=1).values\ny= df.class_name.values\nprint(X.shape,y.shape)","8686261f":"from sklearn.cluster import KMeans\n\n# Create a KMeans instance with 3 clusters: model\nmodel = KMeans(n_clusters=3)\n\n# Fit model to points\nmodel.fit(X)\n\n# Determine the cluster labels of new_points: labels\nlabels = model.predict(X)","76c644b1":"df1=pd.DataFrame({'labels':labels,'varieties':y})","8d346e3b":"ct=pd.crosstab(df1['labels'],df1.varieties)\nprint(ct)","1168cfc7":"df.head()","92f8de09":"df.describe()","f34220e2":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\nscaler= StandardScaler()\nkmeans= KMeans(n_clusters=3)\npipeline= make_pipeline(scaler,kmeans)\npipeline.fit(X)\noutcome= pipeline.predict(X)","bb898893":"df2=pd.DataFrame({'labels':outcome,'varieties':y})\nct=pd.crosstab(df2['labels'],df2.varieties)\nprint(ct)","9de233cc":"thus incorporating standardization gives better clustering with kmeans","b91e7cd2":"Kmeans cluster dontrcorrespond well with the wine varieties\nTis is because of higher variance difference bw the features"}}