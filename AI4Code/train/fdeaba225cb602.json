{"cell_type":{"6458e5ae":"code","073f88a7":"code","be2b7fc5":"code","e2d5b051":"code","fe515872":"code","fa6af33e":"code","bc3033d5":"code","e7145f20":"code","fd6333ae":"code","6b20514b":"code","07735af6":"code","c7ae8ee3":"code","05ab5364":"code","4abf751d":"code","c22ca5a6":"code","023cf2a4":"code","09e88ecf":"code","baa473ad":"code","79ae2d88":"code","430915ae":"code","548d48d0":"code","14496ecf":"code","701cb46d":"code","966ef2fb":"code","e4a23d49":"code","0a2b8bb9":"code","cc6d1813":"code","d471d9cb":"code","cbc40a25":"code","51e7a811":"code","3eaa8923":"code","58e6e645":"code","2a21782e":"markdown","8eb7e1d8":"markdown"},"source":{"6458e5ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport keras,os\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPool2D , Flatten\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","073f88a7":"train_images = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv')\ntest_images = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_test.csv')","be2b7fc5":"train_labels = train_images['label']\ntrain_images = train_images.drop('label',axis = 1)\ntest_labels = test_images['label']\ntest_images = test_images.drop('label',axis = 1)","e2d5b051":"class_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","fe515872":"train_images.shape","fa6af33e":"train_images = train_images.values.reshape(-1,28,28,1)\ntest_images = test_images.values.reshape(-1,28,28,1)\ntrain_images.shape","bc3033d5":"datagen = ImageDataGenerator(horizontal_flip=True,rescale=1\/255)\nit = datagen.flow(train_images, train_labels)","e7145f20":"imgs, labels = next(it)","fd6333ae":"imgs = imgs.reshape(-1,28,28)\nimgs.shape","6b20514b":"plt.imshow(imgs[1], cmap=plt.cm.binary)\nplt.xlabel(class_names[labels[1]])","07735af6":"train_images = train_images.reshape(-1,28,28)\ntrain_images.shape","c7ae8ee3":"len(train_labels)","05ab5364":"train_labels","4abf751d":"test_images.shape","c22ca5a6":"len(test_labels)","023cf2a4":"plt.figure()\nplt.imshow(train_images[0])\nplt.colorbar()\nplt.grid(False)\nplt.show()","09e88ecf":"train_images = train_images \/ 255.0\ntest_images = test_images \/ 255.0","baa473ad":"plt.figure(figsize=(10,10))\nfor i in range(25):\n    plt.subplot(5,5,i+1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(train_images[i], cmap=plt.cm.binary)\n    plt.xlabel(class_names[train_labels[i]])\nplt.show()","79ae2d88":"model = tf.keras.models.Sequential()\nmodel.add(tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28,28,1),padding='same'))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.MaxPooling2D((2, 2)))\nmodel.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu',padding='same'))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.MaxPooling2D((2, 2)))\nmodel.add(tf.keras.layers.Conv2D(64, (3, 3), activation='relu',padding='same'))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dropout(0.5))\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.Dense(64, activation='relu'))\nmodel.add(tf.keras.layers.BatchNormalization())\nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\nmodel.summary()","430915ae":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","548d48d0":"model.fit(it, epochs=35)","14496ecf":"test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)\nprint('\\nTest accuracy:', test_acc)","701cb46d":"probability_model = tf.keras.Sequential([model,tf.keras.layers.Softmax()])","966ef2fb":"predictions = probability_model.predict(test_images)","e4a23d49":"predictions[0]","0a2b8bb9":"np.argmax(predictions[0])","cc6d1813":"test_labels[0]","d471d9cb":"test_images = test_images.reshape(-1,28,28)\ntest_images.shape","cbc40a25":"def plot_image(i, predictions_array, true_label, img):\n  true_label, img = true_label[i], img[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n\n  plt.imshow(img, cmap=plt.cm.binary)\n\n  predicted_label = np.argmax(predictions_array)\n  if predicted_label == true_label:\n    color = 'blue'\n  else:\n    color = 'red'\n\n  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n  true_label = true_label[i]\n  plt.grid(False)\n  plt.xticks(range(10))\n  plt.yticks([])\n  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n  plt.ylim([0, 1])\n  predicted_label = np.argmax(predictions_array)\n\n  thisplot[predicted_label].set_color('red')\n  thisplot[true_label].set_color('blue')","51e7a811":"i = 0\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()","3eaa8923":"i = 14\nplt.figure(figsize=(6,3))\nplt.subplot(1,2,1)\nplot_image(i, predictions[i], test_labels, test_images)\nplt.subplot(1,2,2)\nplot_value_array(i, predictions[i],  test_labels)\nplt.show()","58e6e645":"# Plot the first X test images, their predicted labels, and the true labels.\n# Color correct predictions in blue and incorrect predictions in red.\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions[i], test_labels, test_images)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions[i], test_labels)\nplt.tight_layout()\nplt.show()","2a21782e":"# CNN Fashion Classifier w\/ Data Augmentation","8eb7e1d8":"Consider upvoting :)"}}