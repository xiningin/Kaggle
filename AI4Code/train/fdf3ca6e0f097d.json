{"cell_type":{"d51249fe":"code","1a098661":"code","744610ff":"code","d30cc916":"code","a4c88564":"code","47f2fa9c":"code","ef2e5a88":"code","e0739f0a":"code","ae7554eb":"code","226d1991":"code","ca3ce0a0":"code","b950d677":"code","a30dacc5":"code","66b400d7":"code","3b3c24cb":"code","353524d8":"code","a4a00ea7":"code","33be614b":"code","a82ecdde":"code","1ea55024":"code","6edc4403":"code","5182212d":"code","f7941892":"code","ac3fac14":"code","7d6a8aa2":"code","a4f6a9dc":"code","b8f8fa6a":"code","1a597319":"code","a4c1f16c":"code","df0ce7f4":"code","92cabf70":"code","e73f5bac":"code","d03af677":"markdown","4c7cbfda":"markdown","08664346":"markdown","3811ff28":"markdown","12af0288":"markdown","bcbb1c29":"markdown","9089ba8f":"markdown","dec21b2d":"markdown","382251b9":"markdown","f099bff3":"markdown","72bcb48f":"markdown","c7b9d4de":"markdown","dc9c2e4b":"markdown","90d89c28":"markdown","3fff7f8a":"markdown","edb88374":"markdown","1534c37a":"markdown","efc66957":"markdown","cb380ddd":"markdown","dbe64b3b":"markdown","c02666b5":"markdown","14be3f66":"markdown","9c7d2516":"markdown"},"source":{"d51249fe":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math\nfrom scipy import stats","1a098661":"# basicDrinkingWaterServices.csv -> En az\u0131ndan temel i\u00e7me suyu hizmetlerini kullanan n\u00fcfus (%)\n\nTemizSu\u0130mkan\u0131 = pd.read_csv(\"..\/input\/who-worldhealth-statistics-2020-complete\/basicDrinkingWaterServices.csv\")\nTemizSu\u0130mkan\u0131 = TemizSu\u0130mkan\u0131.drop('Indicator',1)\nTemizSu\u0130mkan\u0131.columns = [\"Lokasyon\", \"Periyot\", \"Su_Imkan\u0131\"]\nTemizSu\u0130mkan\u0131 = TemizSu\u0130mkan\u0131[TemizSu\u0130mkan\u0131.Periyot>2016]\nTemizSu\u0130mkan\u0131 = TemizSu\u0130mkan\u0131[TemizSu\u0130mkan\u0131.Periyot<2018]\nTemizSu\u0130mkan\u0131.reset_index(drop=True)","744610ff":"len(TemizSu\u0130mkan\u0131.Lokasyon.unique()) # 190 Ayr\u0131 lokasyonda veri var.","d30cc916":"plt.hist(TemizSu\u0130mkan\u0131.Su_Imkan\u0131) # Su imkan\u0131n\u0131n histogramda da\u011f\u0131l\u0131m\u0131","a4c88564":"# \u00c7ocuk \u00d6l\u00fcm Oranlar\u0131\n# neonatalMortalityRate.csv -> \u00c7ocuklar\u0131n ya\u015fam\u0131n ilk 28 g\u00fcn\u00fcnde \u00f6lme olas\u0131l\u0131\u011f\u0131.","47f2fa9c":"\u00c7ocuk\u00d6l\u00fcmOran\u0131 = pd.read_csv(\"..\/input\/who-worldhealth-statistics-2020-complete\/neonatalMortalityRate.csv\")\n\u00c7ocuk\u00d6l\u00fcmOran\u0131 = \u00c7ocuk\u00d6l\u00fcmOran\u0131.drop('Indicator',1)\n\u00c7ocuk\u00d6l\u00fcmOran\u0131 = \u00c7ocuk\u00d6l\u00fcmOran\u0131.drop('Dim1',1)\n\u00c7ocuk\u00d6l\u00fcmOran\u0131.columns = [\"Lokasyon\", \"Periyot\", \"Cocuk_Olum_Oran\u0131\"]\n\u00c7ocuk\u00d6l\u00fcmOran\u0131 = \u00c7ocuk\u00d6l\u00fcmOran\u0131[\u00c7ocuk\u00d6l\u00fcmOran\u0131.Periyot>2016]\n\u00c7ocuk\u00d6l\u00fcmOran\u0131 = \u00c7ocuk\u00d6l\u00fcmOran\u0131[\u00c7ocuk\u00d6l\u00fcmOran\u0131.Periyot<2018]\n\u00c7ocuk\u00d6l\u00fcmOran\u0131.reset_index(drop=True)","ef2e5a88":"# Bebek \u00d6l\u00fcm Oranlar\u0131n\u0131 float hale \u00e7evirme\n\ndef fonksiyon(\u00c7ocuk\u00d6l\u00fcmOran\u0131):\n    return \u00c7ocuk\u00d6l\u00fcmOran\u0131['Cocuk_Olum_Oran\u0131'].split(\"[\")[0]\n\n\u00c7ocuk\u00d6l\u00fcmOran\u0131['Cocuk_Olum_Oran\u0131'] = \u00c7ocuk\u00d6l\u00fcmOran\u0131.apply(fonksiyon, axis=1)\n\u00c7ocuk\u00d6l\u00fcmOran\u0131['Cocuk_Olum_Oran\u0131'] = \u00c7ocuk\u00d6l\u00fcmOran\u0131['Cocuk_Olum_Oran\u0131'].astype(float)","e0739f0a":"Analiz_1 = pd.merge(\u00c7ocuk\u00d6l\u00fcmOran\u0131,TemizSu\u0130mkan\u0131, on='Lokasyon') # 2017 Y\u0131l\u0131 Su imkan\u0131na ula\u015f\u0131m ve \u00e7ocuk \u00f6l\u00fcmleri aras\u0131 korelasyon analizi\nAnaliz_1 = Analiz_1.drop('Periyot_x',1)\nAnaliz_1 = Analiz_1.drop('Periyot_y',1)","ae7554eb":"Analiz_1.Su_Imkan\u0131 = (Analiz_1.Su_Imkan\u0131 - Analiz_1.Su_Imkan\u0131.min() )\/ (Analiz_1.Su_Imkan\u0131.max() - Analiz_1.Su_Imkan\u0131.min())\nAnaliz_1.Cocuk_Olum_Oran\u0131 = (Analiz_1.Cocuk_Olum_Oran\u0131 - Analiz_1.Cocuk_Olum_Oran\u0131.min() )\/ (Analiz_1.Cocuk_Olum_Oran\u0131.max() - Analiz_1.Cocuk_Olum_Oran\u0131.min())","226d1991":"Analiz_1.Su_Imkan\u0131 = Analiz_1.Su_Imkan\u0131[Analiz_1.Su_Imkan\u0131<0.92]\n#Analiz_1.Su_Imkan\u0131 = Analiz_1.Su_Imkan\u0131[Analiz_1.Su_Imkan\u0131>0]\n\nAnaliz_1.Cocuk_Olum_Oran\u0131 = Analiz_1.Cocuk_Olum_Oran\u0131[Analiz_1.Cocuk_Olum_Oran\u0131<0.90]\nAnaliz_1.Cocuk_Olum_Oran\u0131 = Analiz_1.Cocuk_Olum_Oran\u0131[Analiz_1.Cocuk_Olum_Oran\u0131>0.04]\n\n\nAnaliz_1.dropna(inplace=True)\nAnaliz_1.reset_index(drop=True)\n","ca3ce0a0":"# 45 adet \u00fclkeyi verimizin normal da\u011f\u0131l\u0131ma sahip olmas\u0131 i\u00e7in analizimizin d\u0131\u015f\u0131nda tuttuk. \n# \u00c7ok fazla temel su imkan\u0131na sahip olan \u00fclke var olmas\u0131, verinin da\u011f\u0131l\u0131m\u0131n\u0131 bozuyordu.\n\nAnaliz_1.drop([0,1,2,23,32,34,36,45,47,48,51,66,67,71,74,77,81,84,89,91,93,97,99,101,103,104,109,113,116,119,121,124,130,131,136,137,139,148,154,155,157,159,161,171,176], axis=0, inplace=True)","b950d677":"Analiz_1.reset_index(drop=True)\nAnaliz_1.head()","a30dacc5":"plt.scatter(Analiz_1.Su_Imkan\u0131.values,Analiz_1.Cocuk_Olum_Oran\u0131.values)\nplt.xlabel('x')\nplt.ylabel('Y')\nplt.title('X y aras\u0131ndaki ili\u015fki')","66b400d7":"Analiz_1.describe().T","3b3c24cb":"# Histogram plot parametreleri\n_, bins, _ = plt.hist(Analiz_1.Cocuk_Olum_Oran\u0131, bins = 9,\n                      density = 1, alpha = 0.5,\n                      ec= 'black' )\n\n# \u00c7an e\u011frisi i\u00e7in en uygun de\u011ferler\nmu, sigma = stats.norm.fit(Analiz_1.Cocuk_Olum_Oran\u0131)\nbest_fit_line = stats.norm.pdf(bins, mu, sigma)\n\n# \u00c7an e\u011frisi g\u00f6sterimi\nplt.plot(bins, best_fit_line, 'g-o')\nplt.xlabel(\"\u00c7ocuk \u00d6l\u00fcm Oranlar\u0131\")\nplt.ylabel(\"Frekans\")\nplt.show()","353524d8":"# Histogram plot parametreleri\n_, bins, _ = plt.hist(Analiz_1.Su_Imkan\u0131, bins = 9,\n                      density = 1, alpha = 0.5,\n                      ec= 'black' )\n\n# \u00c7an e\u011frisi i\u00e7in en uygun de\u011ferler\nmu, sigma = stats.norm.fit(Analiz_1.Su_Imkan\u0131)\nbest_fit_line = stats.norm.pdf(bins, mu, sigma)\n\n# \u00c7an e\u011frisi g\u00f6sterimi\nplt.plot(bins, best_fit_line, 'g-o')\nplt.xlabel(\"Su \u0130mkan\u0131 Oran\u0131\")\nplt.ylabel(\"Frekans\")\nplt.show()","a4a00ea7":"# 6'a 3'l\u00fck bir alan i\u00e7in grafik sahas\u0131 olu\u015fturuyoruz\nplt.figure(figsize=(6, 3))\n\nplt.subplot(121)\nplt.boxplot(Analiz_1.Su_Imkan\u0131)\nplt.title(\"Su \u0130mkan\u0131\")\n\nplt.subplot(122)\nplt.boxplot(Analiz_1.Cocuk_Olum_Oran\u0131)\nplt.title(\"\u00c7ocuk \u00d6l\u00fcm Oran\u0131\")\n\n\nplt.show()","33be614b":"Analiz_1.plot.kde()","a82ecdde":"# Skewness (\u00c7arp\u0131kl\u0131k) ve kurtosis (Bas\u0131kl\u0131k) de\u011ferleri\n\nm = Analiz_1.Cocuk_Olum_Oran\u0131\ni = Analiz_1.Su_Imkan\u0131\n\nprint(\"\u00c7ocuk \u00d6l\u00fcm Oran\u0131\")\nprint(f\"Skewness: {stats.skew(m)} Kurtosis: {stats.kurtosis(m)}\")\nprint(\"Su \u0130mkan\u0131 Oran\u0131\")\nprint(f\"Skewness: {stats.skew(i)} Kurtosis: {stats.kurtosis(i)}\")","1ea55024":"m = Analiz_1.Cocuk_Olum_Oran\u0131\ni = Analiz_1.Su_Imkan\u0131\n\nprint(\"\u00c7ocuk \u00d6l\u00fcm Oran\u0131\")\nprint(f\"T: {stats.shapiro(m)[0]} P-Value: {stats.shapiro(m)[1]}\")\nprint(\"Su \u0130mkan\u0131 Oran\u0131\")\nprint(f\"T: {stats.shapiro(i)[0]} P-Value: {stats.shapiro(i)[1]}\")","6edc4403":"# Kolmogorov\u2013Smirnov test\nm = Analiz_1.Cocuk_Olum_Oran\u0131\ni = Analiz_1.Su_Imkan\u0131\n\nm_kstest = stats.kstest(m, 'norm',\n                         args=(m.mean(),\n                               m.std()))\ni_kstest = stats.kstest(i, 'norm',\n                         args=(i.mean(),\n                               i.std()))\n\nprint(\"\u00c7ocuk \u00d6l\u00fcm Oran\u0131\")\nprint(f\"T: {m_kstest[0]} P-Value: {m_kstest[1]}\")\nprint(\"Su \u0130mkan\u0131 Oran\u0131\")\nprint(f\"T: {i_kstest[0]} P-Value: {i_kstest[1]}\")","5182212d":"Analiz_1.corr()","f7941892":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error","ac3fac14":"X = Analiz_1.Su_Imkan\u0131\ny = Analiz_1.Cocuk_Olum_Oran\u0131","7d6a8aa2":"plt.scatter(X.values,y.values)\nplt.xlabel('Su Imkan\u0131')\nplt.ylabel('\u00c7ocuk \u00d6l\u00fcm Oran\u0131')","a4f6a9dc":"lineer_regresyon = LinearRegression()\nlineer_regresyon.fit(X.values.reshape(-1,1),y.values.reshape(-1,1))","b8f8fa6a":"print(lineer_regresyon.intercept_)\nprint(lineer_regresyon.coef_)","1a597319":"print(\"Elde edilen regresyon modeli: Y={}+{}X\".format(lineer_regresyon.intercept_,lineer_regresyon.coef_[0]))","a4c1f16c":"y_predicted = lineer_regresyon.predict(X.values.reshape(-1,1))\nr2_score(y,y_predicted)","df0ce7f4":"print(\"Ortalama Mutlak Hata: {} \\nOrtalama Karesel Hata: {}\".format(\n    mean_absolute_error(y, y_predicted), mean_squared_error(y, y_predicted)))","92cabf70":"random_x = np.array([0, 0.5, 0.99])\nplt.scatter(X.values, y.values)\nplt.plot(random_x,\n         lineer_regresyon.intercept_[0] +\n         lineer_regresyon.coef_[0][0] * random_x,\n         color='red',\n         label='regresyon grafi\u011fi')\nplt.xlabel('x')\nplt.ylabel('Y')\nplt.title('X y regresyon analiz')","e73f5bac":"g = sns.jointplot(Analiz_1.Su_Imkan\u0131,Analiz_1.Cocuk_Olum_Oran\u0131,\n                  size=5,\n                  kind=\"reg\", color=\"r\")","d03af677":"### Temel \u0130\u00e7me Suyu Verisinin D\u00fczenlenmesi","4c7cbfda":"### Kernel Density Estimation (KDE)","08664346":"# \u00dclkeler baz al\u0131nd\u0131\u011f\u0131nda Temel \u0130\u00e7me Suyuna Sahip Olman\u0131n, \u00c7ocuklar\u0131n \u00d6l\u00fcm\u00fc \u00dczerine Etkisi","3811ff28":"### Veri Normalize","12af0288":"## 1-Verilerin D\u00fczenlenmesi","bcbb1c29":"### Ayk\u0131r\u0131 de\u011ferleri Temizleme","9089ba8f":"### R2 De\u011feri","dec21b2d":"### Verileri Birle\u015ftirme","382251b9":"### Di\u011fer G\u00f6rselle\u015ftirme Y\u00f6ntemleri ile Nomral Da\u011f\u0131l\u0131m\u0131 \u0130nceleme","f099bff3":"### Shapiro-Wilk Testi","72bcb48f":"## 2- Verinin Normal Da\u011f\u0131l\u0131m\u0131n\u0131n \u0130ncelenmesi\n\n### Betimleyici \u0130statistik Y\u00f6ntemleri ile Normal Da\u011f\u0131l\u0131m\u0131 \u0130nceleme\n\n","c7b9d4de":"Normal da\u011f\u0131l\u0131m s\u0131namas\u0131 i\u00e7in Shapiro-Wilk ve Kolmogorov-Smirnov en yayg\u0131n olarak kullan\u0131lan testler olup temelde hipotezleri ayn\u0131d\u0131r.\n\n* H0: De\u011fi\u015fken normal da\u011f\u0131l\u0131ma sahiptir. p-value > 0.05\n* H1: De\u011fi\u015fken normal da\u011f\u0131l\u0131ma sahip de\u011fildir. p-value < 0.05","dc9c2e4b":"### G\u00f6rselle\u015ftirme Y\u00f6ntemleri ile Normal Da\u011f\u0131l\u0131m\u0131 \u0130nceleme\n\nBins metodu k\u0131sacas\u0131 frekansa g\u00f6re say\u0131sal verileri gruplara b\u00f6ler. BINS = 9 i\u00e7in histogram olu\u015ftural\u0131m ve da\u011f\u0131l\u0131ma g\u00f6re en uygun \u00e7an e\u011frisini (bell curve) \u00e7izdirerek de\u011ferlendirelim.","90d89c28":"## 3- Verinin Basit Regresyon Analizinin Yap\u0131lmas\u0131","3fff7f8a":"### \u00c7ocuk \u00d6l\u00fcm\u00fc Oranlar\u0131 Verilerini D\u00fczenleme","edb88374":"### Ortalama Mutlak ve Ortalama Karesel Hata De\u011ferleri","1534c37a":"\u0130nceledi\u011finiz kaggle not defteri sadece kodlar\u0131 i\u00e7ermektedir.\n\nAnaliz \u00fczerine yorumlar Medium hikayemde bulunmaktad\u0131r.\n\nMedium Hikayem : https:\/\/16savasselim.medium.com\/%C3%BClkeler-baz-al%C4%B1nd%C4%B1%C4%9F%C4%B1nda-temel-i%CC%87%C3%A7me-suyuna-sahip-olman%C4%B1n-%C3%A7ocuklar%C4%B1n-%C3%B6l%C3%BCm%C3%BC-%C3%BCzerine-etkisi-78befdb2f0f8\n\nGithub: https:\/\/github.com\/SelimSavas\/SuImkaniveCocukOlumOraniRegresyonAnalizi","efc66957":"## \u0130\u00e7indekiler\n\n1.  Verilerin D\u00fczenlenmesi\n2.  Normal Da\u011f\u0131l\u0131m\u0131n\u0131n \u0130ncelenmesi\n3.  Basit Regresyon Analizi","cb380ddd":"* Her bir de\u011fi\u015fken i\u00e7in sonu\u00e7lar\u0131 incelerken hipotez reddi\/kab\u00fclu i\u00e7in p-value\u2019ya bakmam\u0131z yeterlidir. Buna g\u00f6re;\n\n* \u00c7ocuk \u00d6l\u00fcm Oranlar\u0131'n\u0131n ve Su \u0130mkan\u0131 Oranlar\u0131'n\u0131n p-value de\u011ferlerine bakt\u0131\u011f\u0131m\u0131zda 0.05 de\u011ferinden b\u00fcy\u00fck oldu\u011fu i\u00e7in H0 hipotezini kabul etmi\u015f oluyoruz.","dbe64b3b":"### Normallik Varsay\u0131m Testlerini Python ile inceleme","c02666b5":"### K\u00fct\u00fcphaneler","14be3f66":"### Kolmogorov-Smirnov\nShapiro-Wilk testi, normalli\u011fi belirlemek i\u00e7in pop\u00fclerdir ve genellikle \u00e7ok iyi performans g\u00f6sterir, ancak evrensel olarak en iyisi de\u011fildir. Bir de\u011fi\u015fkeni incelerken tek bir teste ba\u011fl\u0131 kalmadan sonu\u00e7lar\u0131n\u0131z\u0131 do\u011frulamak i\u00e7in ek y\u00f6ntemler kullanman\u0131z gerekir. Bunun i\u00e7in Kolmagorov-Smirnov testi uygulanabilir.","9c7d2516":"### Regresyon G\u00f6sterimi"}}