{"cell_type":{"97c1d4ed":"code","07ef4c32":"code","f3f6ddfd":"code","cf53df9b":"code","f49ba4f4":"code","86bfaa7b":"code","0a80cf2c":"code","3964cbae":"code","7ae5a423":"code","d3d7b3d1":"code","c625ac18":"code","24f1ca0c":"code","d61efb6c":"code","03fae21c":"code","c72d0a54":"code","56186880":"code","975d23e6":"code","50d5220f":"code","e06f0296":"code","ee343159":"code","02f5deac":"code","85a5d3c0":"code","39fd7241":"code","4515f3aa":"code","c1d4d9f8":"code","97fced7d":"code","20869107":"code","3d23f53e":"code","ff09bc71":"code","2bbd67b6":"code","947c48a6":"code","70a8c6d9":"code","63b0608e":"code","f630c83d":"code","ec5c11b4":"code","4cbae493":"code","152e6cde":"code","692cd4fc":"code","65251060":"code","20a4ab0e":"code","2c1a21bb":"code","685dd3da":"code","b40e6ab4":"code","6c3a2784":"code","02af9770":"code","585547a2":"code","e4a8ff0c":"code","1eb4939c":"code","dd2e0de4":"code","a5346fe1":"code","761fbcb9":"code","ae5ca51d":"code","6ab3af65":"code","e092d9c1":"code","2a4e6ef1":"code","ca5d588c":"code","296b63e3":"code","7f0b8fd3":"code","353328ee":"code","77db3a5d":"code","6f198028":"code","3f698038":"code","331957ee":"code","7ab5dc2d":"code","8a07173c":"code","735b4f98":"code","8bbe2c89":"code","69a83cab":"code","0366bbff":"code","0aa64034":"code","84f7474a":"code","1463c726":"code","184271f1":"code","a8536761":"code","da528149":"code","c7ff0f2a":"code","dad0e708":"code","e98086be":"code","8d27f044":"code","478b339a":"code","20c747f2":"code","77ce794a":"code","d2ce3fae":"code","3eadba1d":"markdown","ebdd6311":"markdown","9328de43":"markdown","b11d0a03":"markdown","082663ac":"markdown","507311a2":"markdown","188118bd":"markdown","c6f52808":"markdown","52c3bd03":"markdown","39a9b4e8":"markdown","174062d7":"markdown","771dc536":"markdown","5a7d7902":"markdown","28889bce":"markdown","6849329c":"markdown","86e37fcd":"markdown","5fa22cc3":"markdown","e950ead1":"markdown","bf327a4c":"markdown","1be81960":"markdown","e2732c7f":"markdown","258842f6":"markdown","b66f580e":"markdown","a65f5a01":"markdown","403e1cd7":"markdown"},"source":{"97c1d4ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","07ef4c32":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use(\"fivethirtyeight\")\n%matplotlib inline\n\nfrom sklearn.impute import KNNImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom imblearn.over_sampling import RandomOverSampler, SMOTE\nfrom imblearn.under_sampling import NearMiss\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.neural_network import MLPClassifier\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix","f3f6ddfd":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","cf53df9b":"df_train.head()","f49ba4f4":"df_train.info()","86bfaa7b":"df_train.describe()","0a80cf2c":"df_train.isnull().sum()","3964cbae":"df_test.head()","7ae5a423":"df_test.info()","d3d7b3d1":"df_test.describe()","c625ac18":"df_test.isnull().sum()","24f1ca0c":"df_train['set'] = 'train'\ndf_test['set'] = 'test'\ndf = pd.concat([df_train, df_test], axis = 0, ignore_index = True)  # for easier manipulation\ndf.head()","d61efb6c":"df.drop('PassengerId', axis = 1, inplace = True)\ndf_train.drop('PassengerId', axis = 1, inplace = True)\ndf_test.drop('PassengerId', axis = 1, inplace = True)\n","03fae21c":"df.shape","c72d0a54":"df_train.Sex.value_counts()\nlabels = ['male', 'female']\nsizes = [df_train.Sex.value_counts()[0], df_train.Sex.value_counts()[1]]\nplt.pie(x = sizes, labels= labels, autopct= '%0.2f%%')\nplt.show()","56186880":"g = sns.catplot(x = 'Sex', data=df_train, kind= 'count', hue = 'Survived')","975d23e6":"df_train.groupby(['Sex','Survived']).size()","50d5220f":"df.isnull().sum()","e06f0296":"labels = ['S', 'C', 'Q']\nsize = [df_train.Embarked.value_counts()[0], df_train.Embarked.value_counts()[1], df_train.Embarked.value_counts()[2]]\nplt.pie(x = size, labels=labels, autopct= '%0.2f%%')\nplt.show()","ee343159":"g = sns.catplot(x = 'Embarked', hue='Survived',data=df_train, kind= 'count', palette = 'Dark2')","02f5deac":"df.Embarked.isnull().sum()","85a5d3c0":"df.Embarked.fillna(df.Embarked.mode()[0], inplace= True)","39fd7241":"df.Embarked.isnull().sum()","4515f3aa":"df[df.Age.isnull()].head()","c1d4d9f8":"X_age = df[['Age','Survived']]\nimputer = KNNImputer(n_neighbors= 2)\nimpute_with_2 = imputer.fit_transform(X_age)\nage = impute_with_2[:,0]","97fced7d":"df['Age'] = age\ndf.head()","20869107":"df.Age.isnull().sum()","3d23f53e":"df[df.Cabin.isnull()]","ff09bc71":"(df.Cabin.isnull().sum()\/df.shape[0]) * 100","2bbd67b6":"df.Cabin.unique()","947c48a6":"df.Cabin = df.Cabin.apply(lambda x: str(x)[:1])\ndf.Cabin = df.Cabin.replace({'n': np.nan})\ndf.Cabin","70a8c6d9":"df.Cabin.value_counts()","63b0608e":"df.groupby(['Cabin','Survived']).size()","f630c83d":"g = sns.catplot(x = 'Cabin', hue ='Survived', data=df, kind ='count')","ec5c11b4":"labels = [i for i in df.Cabin.value_counts().index]\nsize = [j for j in df.Cabin.value_counts().values]\nplt.pie(x = size, labels = labels, autopct = '%0.2f%%',)\nplt.show()","4cbae493":"g = sns.catplot(x=\"Pclass\", hue=\"Cabin\", col=\"Survived\", data=df, kind=\"count\", palette='CMRmap')","152e6cde":"df.Sex = df.Sex.map({'male':1,'female':0})\ndf.Sex","692cd4fc":"df.info()","65251060":"df.Ticket.unique()","20a4ab0e":"df.Ticket.nunique()","2c1a21bb":"df.Ticket = df.Ticket.apply(lambda x: str(x)[:1])","685dd3da":"df.Ticket","b40e6ab4":"df.Ticket.unique()","6c3a2784":"g = sns.catplot(x = 'Ticket', data= df, kind ='count')","02af9770":"top_7 = df.Ticket.value_counts().head(7)\ntop_7","585547a2":"def ticket_encode(column):\n    if column=='A':\n        return 1\n    elif column=='C':\n        return 2\n    elif column=='P':\n        return 3\n    elif column=='S':\n        return 4\n    elif column=='1':\n        return 5\n    elif column=='2':\n        return 6\n    elif column=='3':\n        return 7\n    else:\n        return 0\n    \ndf.Ticket = df.Ticket.apply(ticket_encode)","e4a8ff0c":"df.Ticket.value_counts()","1eb4939c":"g = sns.catplot(x='Ticket', data=df, kind ='count', hue='Survived', palette='viridis')","dd2e0de4":"g = sns.catplot(x='Ticket', data=df,col='Survived', kind ='count', hue='Pclass', palette='viridis')","a5346fe1":"df.info()","761fbcb9":"df.Embarked.value_counts()","ae5ca51d":"df['embarked_S'] = np.where(df.Embarked=='S',1,0)\ndf['embarked_C'] = np.where(df.Embarked=='C',1,0)\ndf['embarked_Q'] = np.where(df.Embarked=='Q',1,0)\ndf.drop('Embarked',axis = 1, inplace= True)\ndf.head()","6ab3af65":"df.Name.nunique()","e092d9c1":"def name_func(column):\n    return column.split()[1].replace(\".\",\"\")\n\ndf.Name = df.Name.apply(name_func)","2a4e6ef1":"df.Name.value_counts().head(5)","ca5d588c":"plt.figure(figsize=(15,7))\nsns.countplot(x='Name', data=df)\nplt.show()","296b63e3":"df['name_mr'] = np.where(df.Name=='Mr',1,0)\ndf['name_miss'] = np.where(df.Name=='Miss',1,0)\ndf['name_mrs'] = np.where(df.Name=='Mrs',1,0)\ndf['name_master'] = np.where(df.Name=='Master',1,0)\ndf.drop('Name', axis=1, inplace=True)","7f0b8fd3":"df.head()","353328ee":"df['family_members'] = df['SibSp'] + df['Parch']\ndf.head()","77db3a5d":"sns.displot(x = df.Age,kde=True)","6f198028":"loga = np.log10(df.Age)\nsns.displot(x = loga,kde=True)","3f698038":"sq = np.sqrt(df.Age)\nsns.displot(x = sq,kde=True)","331957ee":"df.Age.describe()","7ab5dc2d":"def age_bin(column):\n    if column < 12:\n        return 0\n    elif (column >= 12) & (column < 18):\n        return 1\n    elif (column >= 18) & (column < 30):\n        return 2\n    elif (column >= 30) & (column < 45):\n        return 3\n    elif (column >= 45) & (column <55):\n        return 4\n    elif (column >=55) & (column < 70):\n        return 5\n    else:\n        return 6\n\ndf['age_bin'] = df['Age'].apply(age_bin)\ndf.head()","8a07173c":"plt.figure(figsize=(15,7))\n\nsns.heatmap(df.corr(),annot=True)","735b4f98":"df_train = df[df.set == 'train']\ndf_test = df[df.set == 'test']\ndf_test.drop(['set','Survived'], axis=1, inplace = True)","8bbe2c89":"X = df_train[['Pclass','Sex','Fare','name_mr','name_miss','embarked_C','embarked_S','name_mrs']]\ny = df_train.Survived\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 42, stratify=y)\nrf1= RandomForestClassifier(n_estimators=200)\nrf1.fit(X_train, y_train)\ny_pred = rf1.predict(X_test)\nprint(accuracy_score(y_pred, y_test))\nprint(confusion_matrix(y_pred, y_test))","69a83cab":"df_test = df_test[['Pclass','Sex','Fare','name_mr','name_miss','embarked_C','embarked_S','name_mrs']]","0366bbff":"df_test.fillna(df_test.median(),inplace=True)","0aa64034":"df_test.isnull().sum()","84f7474a":"from sklearn.model_selection import RandomizedSearchCV\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt','log2']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(10, 1000,10)]\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10,14]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 4,6,8]\n# Create the random grid\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n              'criterion':['entropy','gini']}\nprint(random_grid)","1463c726":"rf=RandomForestClassifier()\nrf_randomcv=RandomizedSearchCV(estimator=rf,param_distributions=random_grid,n_iter=100,cv=3,verbose=2,\n                               random_state=100,n_jobs=-1)\n### fit the randomized model\nrf_randomcv.fit(X_train,y_train)","184271f1":"rf_randomcv.best_params_\n","a8536761":"rf_randomcv","da528149":"best_random_grid=rf_randomcv.best_estimator_\n","c7ff0f2a":"y_pred=best_random_grid.predict(X_test)\nprint(accuracy_score(y_pred, y_test))\nprint(confusion_matrix(y_pred, y_test))\n    \n","dad0e708":"rf_randomcv.best_params_\n","e98086be":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'criterion': [rf_randomcv.best_params_['criterion']],\n    'max_depth': [rf_randomcv.best_params_['max_depth']],\n    'max_features': [rf_randomcv.best_params_['max_features']],\n    'min_samples_leaf': [rf_randomcv.best_params_['min_samples_leaf'], \n                         rf_randomcv.best_params_['min_samples_leaf']+2, \n                         rf_randomcv.best_params_['min_samples_leaf'] + 4],\n    'min_samples_split': [rf_randomcv.best_params_['min_samples_split'] - 2,\n                          rf_randomcv.best_params_['min_samples_split'] - 1,\n                          rf_randomcv.best_params_['min_samples_split'], \n                          rf_randomcv.best_params_['min_samples_split'] +1,\n                          rf_randomcv.best_params_['min_samples_split'] + 2],\n    'n_estimators': [rf_randomcv.best_params_['n_estimators'] - 200, rf_randomcv.best_params_['n_estimators'] - 100, \n                     rf_randomcv.best_params_['n_estimators'], \n                     rf_randomcv.best_params_['n_estimators'] + 100, rf_randomcv.best_params_['n_estimators'] + 200]\n}\n\nprint(param_grid)","8d27f044":"rf=RandomForestClassifier()\ngrid_search=GridSearchCV(estimator=rf,param_grid=param_grid,cv=10,n_jobs=-1,verbose=2)\ngrid_search.fit(X_train,y_train)","478b339a":"grid_search.best_estimator_\n","20c747f2":"best_grid=grid_search.best_estimator_\n","77ce794a":"y_pred=best_grid.predict(X_test)\nprint(accuracy_score(y_pred, y_test))\nprint(confusion_matrix(y_pred, y_test))","d2ce3fae":"submission = pd.DataFrame({ 'PassengerId' : pd.read_csv('..\/input\/titanic\/test.csv')['PassengerId'], \n                           'Survived': best_grid.predict(df_test)})\nsubmission.Survived = submission.Survived.astype(int)\nsubmission.to_csv('submission_hypsel2.csv', index=False)","3eadba1d":"### Testing dataset","ebdd6311":"## Ticket","9328de43":"# Loading dataset","b11d0a03":"Out of 314 female passengers, 233 survived and 81 died\n\nOut of 577 male passengers, 109 survived and 468 died","082663ac":"## Name","507311a2":"## ","188118bd":"## Age","c6f52808":"This shows that Ticket starting with 3 had most number of non-survivals which implies that ticket number 3 can be 3rd class and they were unable to get on the life boats.","52c3bd03":"# Exploratory data analysis","39a9b4e8":"As the number of passengers embarked from the port of Southampton is maximum, so passengers surviving the crash and also not surviving the crash is greater in the case of Southampton.","174062d7":"Percentage of male passengers (64.76%) are more than that of female passengers (35.24%). ","771dc536":"A, B and C cabin decks were only for 1st class passengers. D and E cabin decks were for all class passengers. F, G were for 2nd and 3rd class passengers. \n\nMost of the passengers from 1st class survived the crash which plays an important role in determining the survivals. ","5a7d7902":"## Cabin","28889bce":"Passenger Id is not a useful variable hence dropping it\n","6849329c":"# Model Building","86e37fcd":"# Glimpse of the dataset","5fa22cc3":"# Handling missing values","e950ead1":"In the testing data, Age, Cabin and Fare variables are having null values.","bf327a4c":"72.44% of total passengers embarked from Southampton, 18.9% from Cherbourg and 8.66% from Queenstown.\n\nSo if a passenger is selected at random there is a huge chance that their port of embarkment if Southampton.","1be81960":"## Embarked","e2732c7f":"## Embarked","258842f6":"## Sex","b66f580e":"In the training data, Age, Cabin and Embarked variables are having null values.","a65f5a01":"### Training datset","403e1cd7":"More than half female passengers survived whereas in the case of male, about 25% only survived."}}