{"cell_type":{"65ab10dd":"code","58bdeb0d":"code","09b29aa9":"code","569c469a":"code","31d56c42":"code","1e25e7dc":"code","1445be15":"code","13edaeaa":"code","7de69ebf":"code","2d835e44":"code","5a9eca6b":"code","ba3be2a4":"code","d57d66d4":"code","989fb73a":"code","1546fce2":"code","5042ca57":"code","8bd2a2d2":"code","7ce992e2":"code","e2903aec":"code","761d5730":"code","be2e23a2":"code","4342a077":"code","2dd0dd43":"code","aa641641":"code","76a4c42d":"code","38834f52":"code","2c314fd9":"code","67436229":"code","b4fe4890":"code","59b59d14":"code","ae757880":"code","41c5f248":"code","a395f8fe":"code","09c9f7e4":"code","4e15f98c":"code","6be3f2f4":"code","188671c4":"code","cb0909e2":"code","cd147bba":"markdown","fed6554f":"markdown","46b58004":"markdown","278d7d28":"markdown","c98e00d1":"markdown","9a0b0ce9":"markdown","ec2e58ef":"markdown","3567af13":"markdown","0efcb877":"markdown","3d05f514":"markdown","26f32d6c":"markdown","611d3637":"markdown","1964e28a":"markdown","7a06a092":"markdown","5d1f057a":"markdown","d72e7d6f":"markdown","e65837d1":"markdown","b85eebaa":"markdown","5f916912":"markdown","bc479294":"markdown","c4423ef2":"markdown","0b04d02a":"markdown","60da0957":"markdown","0e6b9359":"markdown","1ca3846a":"markdown","b17b3a17":"markdown","7aafed24":"markdown","29b9e546":"markdown","2d357ec4":"markdown","a8f63888":"markdown","4fcd670b":"markdown","09b286e9":"markdown","d4e15c0c":"markdown","fd93c965":"markdown","dcf8a902":"markdown","f88c223e":"markdown","43a0c2f0":"markdown","fab5dafb":"markdown","8377d16c":"markdown","7cf5e49b":"markdown","a5456391":"markdown","ddb39690":"markdown","75387cd9":"markdown","c76bda4e":"markdown","d1337580":"markdown","051c55d4":"markdown","e6d086b1":"markdown","8de19a58":"markdown","5f55b2f2":"markdown","a577c5b4":"markdown","d72db053":"markdown","d9712fb9":"markdown","4f617da6":"markdown","cc0f2fe1":"markdown","4fcbec87":"markdown","046f0e24":"markdown","fd941e18":"markdown","f11027b1":"markdown","779b2b8d":"markdown","27bf607e":"markdown","981cf407":"markdown","d06c9ce2":"markdown","a380db9a":"markdown","5c01017e":"markdown","b2df9bb2":"markdown","88144cc7":"markdown","2dc62fd0":"markdown","40560f91":"markdown","73281580":"markdown"},"source":{"65ab10dd":"from plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","58bdeb0d":"# Import project libraries\n\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom random import sample\nimport matplotlib.colors as pltc\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","09b29aa9":"# Import Dataset\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ninput_data = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv\")\ninput_data.head(5)","569c469a":"# Import  Population Data\n\ncountry_pop = pd.read_csv(\"\/kaggle\/input\/population-by-country-2020\/population_by_country_2020.csv\")\ncountry_pop = country_pop[['Country (or dependency)', 'Population (2020)']]\ncountry_pop.columns = ['Country', 'Country_Population']\n\n# rename values to match competition dataset\ncountry_pop['Country'] = country_pop['Country'].replace({'Iran' : 'Iran, Islamic Republic of...',\n                        'United States' :  'United States of America',\n                        'Vietnam' : 'Viet Nam' ,\n                        'United Kingdom' : 'United Kingdom of Great Britain and Northern Ireland',\n                        'Czech Republic (Czechia)' : 'Czech Republic' ,\n                        'Hong Kong' : 'Hong Kong (S.A.R.)' })\n\ncountry_pop.head(5)","31d56c42":"# Import  Continent Data\n\ncountry_list = ['Nigeria','Morocco','Kenya','Ghana','Egypt','Algeria','Tunisia','South Africa','Uganda','Ethiopia','Pakistan','Turkey','Iran, Islamic Republic of...','China','India','Indonesia','Bangladesh','Sri Lanka','Malaysia','Thailand','Japan','Philippines','Viet Nam','South Korea','Taiwan','Saudi Arabia','Nepal','Singapore','United Arab Emirates','Kazakhstan','Iraq','Israel','Hong Kong (S.A.R.)','Russia','Ukraine','Spain','Germany','Austria','United Kingdom of Great Britain and Northern Ireland','Belgium','Portugal','France','Italy','Norway','Poland','Netherlands','Belarus','Greece','Denmark','Czech Republic','Romania','Switzerland','Ireland','Sweden','Canada','United States of America','Mexico','Australia','Brazil','Colombia','Argentina','Chile','Peru','Ecuador']\ncontinent_list = ['Africa','Africa','Africa','Africa','Africa','Africa','Africa','Africa','Africa','Africa','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Asia','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','Europe','North America','North America','North America','Oceania','South America','South America','South America','South America','South America','South America']\n\ngeorespondent_data = {'Country':country_list,'Continent':continent_list}\ngeorespondent_data = pd.DataFrame.from_dict(georespondent_data)\n\ngeorespondent_data.head(5)","1e25e7dc":"# Part 2 - Data Prep respondent level \n\n\n#Step 1 - Keep only respondent_data pertaining to our metrics. \nrespondent_data = input_data[['Q1','Q2', 'Q3','Q4','Q5','Q6','Q7_Part_1','Q7_Part_2','Q7_Part_3','Q7_Part_4','Q7_Part_5','Q7_Part_6','Q7_Part_7','Q7_Part_8','Q7_Part_9','Q7_Part_10','Q7_Part_11','Q7_Part_12','Q7_OTHER', 'Q25', 'Q15']]\n\n\n# Step 2 - Rename Columns for ease of interpretability \nrespondent_data.columns = ['Age_Range', 'Gender', 'Country', 'Education_Level','Work_Title','Coding_Years','Python','R','SQL','C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB','Lang_None','Lang_Other', 'USD_Salary','Years_of_ML']\n\n\n# Step 3 - Remove first row (with question string)\nrespondent_data = respondent_data.iloc[1: , :]\n\n\n# Step 4 - Count Polyglot level for ease respondent\nlang_cols = ['Python','R','SQL','C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB','Lang_None','Lang_Other']\nrespondent_data[lang_cols] = respondent_data[lang_cols].notna().astype('int')\nrespondent_data['Polygot_Level'] = respondent_data['Python'] + respondent_data['R'] + respondent_data['SQL'] + respondent_data['C'] + respondent_data['C++'] + respondent_data['Java'] + respondent_data['Javascript'] + respondent_data['Julia'] + respondent_data['Swift'] + respondent_data['Bash'] + respondent_data['MATLAB'] + respondent_data['Lang_None'] + respondent_data['Lang_Other']\nrespondent_data = respondent_data.drop(lang_cols, axis = 1)\n\n\n# Step 5 - Drop citizens of the universe i.e. those which respond with \"I do not wish to disclose my location\"\nrespondent_data = respondent_data[respondent_data.Country != \"I do not wish to disclose my location\"]\nrespondent_data = respondent_data[respondent_data.Country != \"Other\"]\n\n\n# Step 6 - Create Continent column by merging with georespondent_data respondent_dataset\nrespondent_data = pd.merge(respondent_data, georespondent_data, on = \"Country\", how = \"inner\")\nrespondent_data.head(5)","1445be15":"# Part 2 - Data Prep responent level \n\n\n#Step 1 - Keep only respondent_data pertaining to our metrics. \nrespondent_data = input_data[['Q1','Q2', 'Q3','Q4','Q5','Q6','Q7_Part_1','Q7_Part_2','Q7_Part_3','Q7_Part_4','Q7_Part_5','Q7_Part_6','Q7_Part_7','Q7_Part_8','Q7_Part_9','Q7_Part_10','Q7_Part_11','Q7_Part_12','Q7_OTHER', 'Q25', 'Q15']]\n\n\n# Step 2 - Rename Columns for ease of interpretability \nrespondent_data.columns = ['Age_Range', 'Gender', 'Country', 'Education_Level','Work_Title','Coding_Years','Python','R','SQL','C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB','Lang_None','Lang_Other', 'USD_Salary','Years_of_ML']\n\n\n# Step 3 - Remove first row (with question string)\nrespondent_data = respondent_data.iloc[1: , :]\n\n\n# Step 4 - Count Polyglot level for ease respondent\nlang_cols = ['Python','R','SQL','C','C++','Java','Javascript','Julia','Swift','Bash','MATLAB','Lang_Other']\nrespondent_data[lang_cols] = respondent_data[lang_cols].notna().astype('int')\nrespondent_data['Polygot_Level'] = respondent_data['Python'] + respondent_data['R'] + respondent_data['SQL'] + respondent_data['C'] + respondent_data['C++'] + respondent_data['Java'] + respondent_data['Javascript'] + respondent_data['Julia'] + respondent_data['Swift'] + respondent_data['Bash'] + respondent_data['MATLAB'] +  respondent_data['Lang_Other']\nrespondent_data = respondent_data.drop(lang_cols, axis = 1)\n\n\n# Step 5 - Drop citizens of the universe i.e. those which respond with \"I do not wish to disclose my location\" or as \"other\"\nrespondent_data = respondent_data[respondent_data.Country != \"I do not wish to disclose my location\"]\nrespondent_data = respondent_data[respondent_data.Country != \"Other\"]\n\n\n# Step 6 - Create Continent column by merging with georespondent_data respondent_dataset\nrespondent_data = pd.merge(respondent_data, georespondent_data, on = \"Country\", how = \"inner\")\n\n\n# Step 7 - Create Under 25 column\nunder_25 = pd.DataFrame({'under_25': ['18-21', '22-24']})\nrespondent_data['Under_25'] = respondent_data.Age_Range.isin(under_25.under_25).astype('int')\n\n\n# Step 8 - Create Female and LGBTQ+ Column\nfemale_lgbtq_plus = pd.DataFrame({'female_lgbtq_plus': ['Woman', 'Nonbinary', 'Prefer to self-describe']})\nrespondent_data['Gender_Inclusive'] = respondent_data.Gender.isin(female_lgbtq_plus.female_lgbtq_plus).astype('int')\n\n\n# Step 9 - Create 3 year +  Machine Learning Experience Column\nrespondent_data['Years_of_ML'] =  respondent_data['Years_of_ML'].fillna(\"I do not use machine learning methods\") #  note if respondent has left this blank, one has imputed this as \"I do not use machine learning methods\"\nML_3year_plus = pd.DataFrame({'ML_3year_plus': ['3-4 years', '4-5 years', '5-10 years', '10-20 years', '20 or more years']})\nrespondent_data['ML_3year_Plus'] = respondent_data.Years_of_ML.isin(ML_3year_plus.ML_3year_plus).astype('int')\n\n\n# Step 10 - Save Prepped Respondent Data\nprepped_respondent_data = respondent_data[['Country', 'Continent', 'Gender_Inclusive', 'Under_25', 'ML_3year_Plus', 'Polygot_Level']]\nprepped_respondent_data.head(5)\n\n","13edaeaa":"# Create Metrics by Continent\n\n#Step One - Make column aggregations\ncontinent_data = prepped_respondent_data.groupby(['Continent']).agg({ 'Country':'size' , 'Gender_Inclusive' : 'sum', 'Under_25' : 'sum', 'ML_3year_Plus':'sum', 'Polygot_Level':'mean'})\ncontinent_data.reset_index(inplace=True)\n\n\n# Step Two - Rename columns\ncontinent_data.columns = ['Continent', 'Total_Respondents', 'Total_Gender_Inclusive', 'Total_Under_25', 'Total_ML_3Year_Plus', 'Mean_Polygot_Level']\ncontinent_data['Mean_Polygot_Level'] = round((continent_data['Mean_Polygot_Level']), 2)\n\n# Step Three - Create percentage columns that respondents that represent  each metric\ncontinent_data['Percent_Gender_Inclusive'] = round(((continent_data['Total_Gender_Inclusive'] \/ continent_data['Total_Respondents']) *100), 2)\ncontinent_data['Percent_Under_25'] = round(((continent_data['Total_Under_25'] \/ continent_data['Total_Respondents']) *100), 2)\ncontinent_data['Percent_ML_3Year_Plus'] = round(((continent_data['Total_ML_3Year_Plus'] \/ continent_data['Total_Respondents']) *100), 2)\n\n#Step Four - Create Rank Colummns to view how each Continent performed against the rest\n\ncontinent_data[\"Total_Respondents_Rank\"] = continent_data[\"Total_Respondents\"].rank(ascending=False) \ncontinent_data[\"Gender_Inclusive_Rank\"] = continent_data[\"Percent_Gender_Inclusive\"].rank(ascending=False) \ncontinent_data[\"Under_25_Rank\"] = continent_data[\"Percent_Under_25\"].rank(ascending=False)  \ncontinent_data[\"ML_3Year_Plus_Rank\"] = continent_data[\"Percent_ML_3Year_Plus\"].rank(ascending=False)\ncontinent_data[\"Polygot_Rank\"] = (12 - continent_data[\"Mean_Polygot_Level\"]).rank() \n#floor the result\ncontinent_data[\"Total_Respondents_Rank\"] = np.floor(continent_data[\"Total_Respondents_Rank\"])\ncontinent_data[\"Gender_Inclusive_Rank\"] = np.floor(continent_data[\"Gender_Inclusive_Rank\"])\ncontinent_data[\"Under_25_Rank\"] = np.floor(continent_data[\"Under_25_Rank\"])\ncontinent_data[\"ML_3Year_Plus_Rank\"] = np.floor(continent_data[\"ML_3Year_Plus_Rank\"])\ncontinent_data[\"Polygot_Rank\"] = np.floor(continent_data[\"Polygot_Rank\"])\n\n\n#Step  5 - Rank the 2021 Kaggle Survey Data Overall Geographic Showdown Country Champions!!! Drumroll... \ncontinent_data[\"Continent_Total_Score\"] = continent_data[\"Total_Respondents_Rank\"] + continent_data[\"Gender_Inclusive_Rank\"] + continent_data[\"Under_25_Rank\"] + continent_data[\"ML_3Year_Plus_Rank\"] + continent_data[\"Polygot_Rank\"]  # calculate the country score, by adding each rank they recieved for each metric\ncontinent_data[\"Continent_Award\"] = continent_data[\"Continent_Total_Score\"].rank()\ncontinent_data[\"Continent_Award\"] = np.floor(continent_data[\"Continent_Award\"])\n\n\n# Step 6 - Create Continent Leaderboards\n\ncontinent_total_respondents_data = continent_data[['Continent' , 'Total_Respondents', 'Total_Respondents_Rank']]\ncontinent_total_respondents_data = continent_total_respondents_data.sort_values(by='Total_Respondents_Rank')\ncontinent_total_respondents_data\n\n\n\ncontinent_gender_inclusive_data = continent_data[['Continent' , 'Total_Respondents', 'Total_Gender_Inclusive', 'Percent_Gender_Inclusive', 'Gender_Inclusive_Rank']]\ncontinent_gender_inclusive_data = continent_gender_inclusive_data.sort_values(by='Gender_Inclusive_Rank')\ncontinent_gender_inclusive_data\n\ncontinent_under_25_data = continent_data[['Continent' , 'Total_Respondents', 'Total_Under_25', 'Percent_Under_25', 'Under_25_Rank']]\ncontinent_under_25_data = continent_under_25_data.sort_values(by='Under_25_Rank')\ncontinent_under_25_data\n\ncontinent_ML_3year_plus_data = continent_data[['Continent' , 'Total_Respondents', 'Total_ML_3Year_Plus', 'Percent_ML_3Year_Plus', 'ML_3Year_Plus_Rank']]\ncontinent_ML_3year_plus_data = continent_ML_3year_plus_data.sort_values(by='ML_3Year_Plus_Rank')\ncontinent_ML_3year_plus_data\n\ncontinent_polygot_data = continent_data[['Continent' , 'Total_Respondents', 'Mean_Polygot_Level', 'Polygot_Rank']]\ncontinent_polygot_data = continent_polygot_data.sort_values(by='Polygot_Rank')\ncontinent_polygot_data\n\ncontinent_final_leaderboard = continent_data[['Continent' , 'Total_Respondents_Rank', 'Gender_Inclusive_Rank', 'Under_25_Rank', 'ML_3Year_Plus_Rank', 'Polygot_Rank', 'Continent_Total_Score', 'Continent_Award']]\ncontinent_final_leaderboard = continent_final_leaderboard.sort_values(by='Continent_Award')\ncontinent_data","7de69ebf":"# Create Metrics by Country\n\n#Step 1 - Make column aggregations\ncountry_data = prepped_respondent_data.groupby(['Country']).agg({ 'Continent':'size' , 'Gender_Inclusive' : 'sum', 'Under_25' : 'sum', 'ML_3year_Plus':'sum', 'Polygot_Level':'mean'})\ncountry_data.reset_index(inplace=True)\n\n\n\n# Step 2 - Rename columns\ncountry_data.columns = ['Country', 'Total_Respondents', 'Total_Gender_Inclusive', 'Total_Under_25', 'Total_ML_3Year_Plus', 'Mean_Polygot_Level']\ncountry_data['Mean_Polygot_Level'] = round((country_data['Mean_Polygot_Level']), 3)\n\n\n# Step 3 - Create Population column\ncountry_data = pd.merge(country_data, country_pop, on = \"Country\", how = \"inner\")\n\n\n# Step 4 - Create percentage columns that respondents that represent  each metric\ncountry_data['Respondents_per_Capita'] = country_data['Total_Respondents'] \/ country_data['Country_Population']\ncountry_data['Percent_Gender_Inclusive'] = round(((country_data['Total_Gender_Inclusive'] \/ country_data['Total_Respondents']) *100), 2)\ncountry_data['Percent_Under_25'] = round(((country_data['Total_Under_25'] \/ country_data['Total_Respondents']) *100), 2)\ncountry_data['Percent_ML_3Year_Plus'] = round(((country_data['Total_ML_3Year_Plus'] \/ country_data['Total_Respondents']) *100), 2)\n\n\n#Step 5 - Create Rank Colummns to view how each country performed against the rest\n\nmax_country_repondents = country_data['Total_Respondents'].max()\n\ncountry_data[\"Total_Respondents_Rank\"] = country_data[\"Total_Respondents\"].rank(ascending=False) \ncountry_data[\"Respondents_per_Capita_Rank\"] = country_data[\"Respondents_per_Capita\"].rank(ascending=False) \ncountry_data[\"Gender_Inclusive_Rank\"] = country_data[\"Percent_Gender_Inclusive\"].rank(ascending=False) \ncountry_data[\"Under_25_Rank\"] = country_data[\"Percent_Under_25\"].rank(ascending=False) \ncountry_data[\"ML_3Year_Plus_Rank\"] = country_data[\"Percent_ML_3Year_Plus\"].rank(ascending=False) \ncountry_data[\"Polygot_Rank\"] = (12 - country_data[\"Mean_Polygot_Level\"]).rank() \n\n#floor the result\ncountry_data[\"Total_Respondents_Rank\"] = np.floor(country_data[\"Total_Respondents_Rank\"])\ncountry_data[\"Gender_Inclusive_Rank\"] = np.floor(country_data[\"Gender_Inclusive_Rank\"])\ncountry_data[\"Under_25_Rank\"] = np.floor(country_data[\"Under_25_Rank\"])\ncountry_data[\"ML_3Year_Plus_Rank\"] = np.floor(country_data[\"ML_3Year_Plus_Rank\"])\ncountry_data[\"Polygot_Rank\"] = np.floor(country_data[\"Polygot_Rank\"])\n\n\n#Step  6 - Rank the 2021 Kaggle Survey Data Overall Geographic Showdown Country Champions!!! Drumroll... \ncountry_data[\"Country_Total_Score\"] = country_data[\"Total_Respondents_Rank\"] + country_data[\"Respondents_per_Capita_Rank\"] + country_data[\"Gender_Inclusive_Rank\"] + country_data[\"Under_25_Rank\"] + country_data[\"ML_3Year_Plus_Rank\"] + country_data[\"Polygot_Rank\"]  # calculate the country score, by adding each rank they recieved for each metric\ncountry_data[\"Country_Award\"] = country_data[\"Country_Total_Score\"].rank()\ncountry_data[\"Country_Award\"] = np.floor(country_data[\"Country_Award\"])\n\ncountry_data.head(5)\n\n#Step 7 - Create Continent Lookup\ncountry_data = pd.merge(country_data, georespondent_data, on = \"Country\", how = \"inner\")\n\n\n\n# Step 7 - Create Country Leaderboards\n\ncountry_total_respondents_data = country_data[['Total_Respondents_Rank', 'Country' , 'Total_Respondents']]\ncountry_total_respondents_data = country_total_respondents_data.sort_values(by='Total_Respondents_Rank')\ncountry_total_respondents_data\n\ncountry_respondents_per_Capita_data = country_data[['Respondents_per_Capita_Rank', 'Country' , 'Total_Respondents', 'Country_Population', 'Respondents_per_Capita']]\ncountry_respondents_per_Capita_data = country_respondents_per_Capita_data.sort_values(by='Respondents_per_Capita_Rank')\ncountry_respondents_per_Capita_data\n\ncountry_gender_inclusive_data = country_data[['Gender_Inclusive_Rank', 'Country' , 'Total_Respondents', 'Total_Gender_Inclusive', 'Percent_Gender_Inclusive']]\ncountry_gender_inclusive_data = country_gender_inclusive_data.sort_values(by='Gender_Inclusive_Rank')\ncountry_gender_inclusive_data\n\ncountry_under_25_data = country_data[['Under_25_Rank', 'Country' , 'Total_Respondents', 'Total_Under_25', 'Percent_Under_25']]\ncountry_under_25_data = country_under_25_data.sort_values(by='Under_25_Rank')\ncountry_under_25_data\n\ncountry_ML_3year_plus_data = country_data[['ML_3Year_Plus_Rank', 'Country' , 'Total_Respondents', 'Total_ML_3Year_Plus', 'Percent_ML_3Year_Plus']]\ncountry_ML_3year_plus_data = country_ML_3year_plus_data.sort_values(by='ML_3Year_Plus_Rank')\ncountry_ML_3year_plus_data\n\ncountry_polygot_data = country_data[['Country' , 'Total_Respondents', 'Mean_Polygot_Level', 'Polygot_Rank']]\ncountry_polygot_data = country_polygot_data.sort_values(by='Polygot_Rank')\ncountry_polygot_data\n\nfinal_leaderboard = country_data[['Country_Award', 'Country' , 'Total_Respondents_Rank', 'Respondents_per_Capita_Rank', 'Gender_Inclusive_Rank', 'Under_25_Rank', 'ML_3Year_Plus_Rank', 'Polygot_Rank', 'Country_Total_Score']]\nfinal_leaderboard = final_leaderboard.sort_values(by='Country_Award')\n\ncountry_data.head(5)\n","2d835e44":"#Import gapminder data (for iso_alpha data)\ngapminder = px.data.gapminder().query(\"year==2007\")\ngapminder_data = gapminder[['country', 'iso_alpha']]\ngapminder_data.columns = ['Country', 'iso_alpha']\n\n\n#Step 2 - Add missing data\nrussia = {'Country':'Russia', 'iso_alpha':'RUS'}\nuae = {'Country': 'United Arab Emirates', 'iso_alpha':'ARE'}\nukraine = {'Country': 'Ukraine', 'iso_alpha':'UKR'}\nbelarus = {'Country': 'Belarus', 'iso_alpha':'BLR'}\nkazakhstan = {'Country': 'Kazakhstan', 'iso_alpha':'KAZ'}\n\ngapminder_data = gapminder_data.append(russia, ignore_index=True)\ngapminder_data = gapminder_data.append(uae, ignore_index=True)\ngapminder_data = gapminder_data.append(ukraine, ignore_index=True)\ngapminder_data = gapminder_data.append(belarus, ignore_index=True)\ngapminder_data = gapminder_data.append(kazakhstan, ignore_index=True)\n\n#Step 3 - Rename to match competition data\n\ngapminder_data['Country'] = gapminder_data['Country'].replace({'Iran' : 'Iran, Islamic Republic of...',\n                        'United States' :  'United States of America',\n                        'Vietnam' : 'Viet Nam' ,\n                        'United Kingdom' : 'United Kingdom of Great Britain and Northern Ireland',\n                        'Korea, Rep.':'South Korea',\n                        'Hong Kong, China' : 'Hong Kong (S.A.R.)' })\ngeodata = pd.merge(final_leaderboard, gapminder_data, on = \"Country\", how = \"inner\")\ngeodata.head(5)\n\n","5a9eca6b":"# Create Sankey Diagram showing total repondents in each continent\n\n# Step 1 - Create Sankey data\nsankeydata = country_data[['Country', 'Continent', 'Total_Respondents']]\n\n# Step 2 -  Create continent code and colour lookup\ncontintent_list = ['Africa','Asia','Europe','North America','Oceania','South America']\ncontinent_color_list = ['coral','lightpink','paleturquoise','palegoldenrod','mediumpurple', 'aquamarine']\ncontinent_code_list = [0,1,2,3,4,5]\ncolor_lookup = {'Continent':contintent_list,'Link_Color':continent_color_list, 'Continent_Code': continent_code_list}\ncolor_lookup = pd.DataFrame.from_dict(color_lookup)\nsankeydata = pd.merge(sankeydata, color_lookup, on = \"Continent\", how = \"inner\")\n\n\n# Step 3 - Sort\nsankeydata = sankeydata.sort_values(by='Continent_Code', ascending = True)\n \n# Step 4 - Create country code\nsankeydata['Country_Code'] = range(6, 70)\n\n# Step 5 - Create country code\nsankeydata.sort_values(['Country','Total_Respondents'],ascending=False).groupby('Continent').head(3)\n\n#  Step 6 - Create Link lists\nlink_country_list = sankeydata['Continent_Code'].values.tolist()\nlink_continent_list = sankeydata['Country_Code'].values.tolist()\nlink_total_respondents = sankeydata['Total_Respondents'].values.tolist()\nlink_color = sankeydata['Link_Color'].values.tolist()\n\n#  Step 7 - Create node lists \ncountry_list = sankeydata['Country'].values.tolist()\nnode_area_list = contintent_list\nfor i in country_list:\n     node_area_list.append(i)\n\n#  Step 8 - Create node colour list\nnode_color_list = ['coral','lightpink','paleturquoise','palegoldenrod','mediumpurple', 'aquamarine', 'palevioletred', 'chocolate','moccasin', 'snow','forestgreen','indianred','mediumturquoise','brown','mintcream','oldlace','paleturquoise','crimson','coral','orange', 'lightsalmon','floralwhite','lavenderblush','limegreen','palegreen','hotpink','purple','blue','peachpuff','midnightblue','darkmagenta','lightyellow','salmon','tan','lightslategray','slategrey','rosybrown','cornflowerblue', 'mediumorchid', 'lemonchiffon', 'violet', 'chartreuse','green','powderblue', 'darkblue','darkorchid','thistle','dodgerblue','antiquewhite','mediumslateblue', 'darkred','lightblue','darkgoldenrod', 'seagreen', 'darkkhaki', 'mediumvioletred', 'darkcyan', 'lightsteelblue', 'wheat', 'greenyellow', 'darkseagreen', 'beige', 'indigo', 'honeydew', 'darkgrey', 'lavender', 'lightgray', 'deeppink', 'mediumblue', 'azure']\nnode = {'Country':node_area_list,'Node_Color':node_color_list}\n\n#  Step 9 - Create node df\nnode = pd.DataFrame.from_dict(node)\nnode['Node_Code'] = range(0, 70)\n\n\n#  Step 10 - Create Plot \nfig = go.Figure(data=[go.Sankey(\n    node = dict(\n      pad = 15,\n      thickness = 20,\n      line = dict(color = \"black\", width = 0.5),\n      label =  node['Country'].dropna(axis=0, how='any'),\n      color = node_color_list\n\n    ),\n    link = dict(\n      source = link_country_list, # indices correspond to labels, eg A1, A2, A1, B1, ...\n      target = link_continent_list,\n      value = link_total_respondents,\n      color = link_color))])\n\nfig.update_layout(title_text=\"Sankey Diagram Showing Total Repondents from Each Continent\", font_size=10, height =1000)\n\n#  Step 11 - Show Plot \nfig.show()\n\n","ba3be2a4":"# Sunburst Chart Total Respondents\n\ndf = country_data\ndf = df.rename(columns={'Total_Respondents_Rank': 'Total Respondents Rank '})\nfig = px.sunburst(df, path= ['Continent','Country'], values='Total Respondents Rank ',\n                  color='Total Respondents Rank ', hover_data=['Country'], title = \"Sunburst Chart - Total Respondents Award\",\n                  color_continuous_scale='Turbo')\n                  \nfig.show()","d57d66d4":"# Create Total Respondent Country Leaderboard\n\ncountry_total_respondents_data['color'] =  np.where((country_total_respondents_data['Total_Respondents_Rank'] ==1),'gold','whitesmoke') \ncountry_total_respondents_data['color'] =  np.where((country_total_respondents_data['Total_Respondents_Rank'] ==2),'silver',country_total_respondents_data['color']) \ncountry_total_respondents_data['color'] =  np.where((country_total_respondents_data['Total_Respondents_Rank'] ==3),'burlywood',country_total_respondents_data['color']) \n\nheader = ['Total Respondents Award Rank', 'Country', 'Total Respondents']\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=header,fill_color='turquoise',align='center', font=dict(color='black', size=12)),\n\n    cells=dict(values=[country_total_respondents_data.Total_Respondents_Rank, country_total_respondents_data.Country, country_total_respondents_data.Total_Respondents],\n               fill_color=[country_total_respondents_data.color],align='center'))\n])\n\nfig.show()","989fb73a":"# Plot 3D Globe - Total Respondents\nfig = px.choropleth(geodata, locations=\"iso_alpha\",\n                    color=\"Total_Respondents_Rank\", \n                    hover_name=\"Country\", \n                    title=\"Total Respondents Award Rankings\",  labels={'Total_Respondents_Rank': 'Total Respondents Award Ranking'}, \n                    color_continuous_scale=px.colors.diverging.Temps)\n\n\nfig.update_geos(projection_type=\"orthographic\", projection_rotation=dict(lon=78, lat=15, roll=0), showocean = True , showlakes = True, showrivers = True,rivercolor = 'turquoise',oceancolor = 'turquoise',lakecolor = 'turquoise',showcountries =True) \nfig.update_layout(template=\"plotly_dark\")\nfig.show()\n","1546fce2":"# Bubble Chart - Respondents per Capita\nfig = px.scatter(country_data, x=\"Country_Population\", y=\"Total_Respondents\",\n         size=\"Respondents_per_Capita\", color=\"Continent\", title = \"Bubble Chart - Respondents per Capita\",\n                 hover_name=\"Country\", labels={ \"Country_Population\": \"Country Population\", \"Total_Respondents\": \"Total Respondents\",\n                     \"Respondents_per_Capita\": \"Respondents per Capita\", \"Respondents_per_Capita\":\"Respondents per Capita\"})\nfig.show()","5042ca57":"# Sunburst Chart - Respondents per Capita Award\ndf = country_data\ndf = df.rename(columns={'Respondents_per_Capita_Rank': 'Respondents per Capita Rank '})\nfig = px.sunburst(df, path=['Continent','Country'], values='Respondents per Capita Rank ',\n                  color='Respondents per Capita Rank ', hover_data=['Country'],\n                  title = \"Sunburst Chart - Respondents per Capita Award\",\n                  color_continuous_scale='Turbo')\n\nfig.show()","8bd2a2d2":"# Create Respondents per Capita Country Leaderboard\n\ndf = country_respondents_per_Capita_data\ndf['color'] =  np.where((df['Respondents_per_Capita_Rank'] ==1),'gold','whitesmoke') \ndf['color'] =  np.where((df['Respondents_per_Capita_Rank'] ==2),'silver',df['color']) \ndf['color'] =  np.where((df['Respondents_per_Capita_Rank'] ==3),'burlywood',df['color']) \n\nheader = ['Respondents per Capita Award Rank', 'Country', 'Total Respondents', 'Country Population', 'Respondents per Capita']\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=header,fill_color='yellow',align='center', font=dict(color='black', size=12)),\n\n    cells=dict(values=[df.Respondents_per_Capita_Rank, df.Country, df.Total_Respondents, df.Country_Population, df.Respondents_per_Capita],\n               fill_color=[df.color],align='center'))\n])\n\nfig.show()","7ce992e2":"# Plot 3D Globe - Respondents per Capita\nfig = px.choropleth(geodata, locations=\"iso_alpha\",\n                    color=\"Respondents_per_Capita_Rank\",\n                    hover_name=\"Country\", \n                    title=\"Respondents Per Capita Award Rankings\", labels={'Respondents_per_Capita_Rank': 'Respondents per Capita Award Ranking'}, \n                    color_continuous_scale=px.colors.diverging.Temps)\n\n\nfig.update_geos(projection_type=\"orthographic\", projection_rotation=dict(lon=104, lat=1, roll=0), showocean = True , showlakes = True, showrivers = True,rivercolor = 'yellow',oceancolor = 'yellow',lakecolor = 'yellow',showcountries =True) \nfig.update_layout(template=\"plotly_dark\")\nfig.show()","e2903aec":"# Bubble Chart Gender Award \nfig = px.scatter(country_data, x=\"Percent_Gender_Inclusive\", y=\"Total_Respondents\",\n         size=\"Percent_Gender_Inclusive\", color=\"Continent\", title = \"Bubble Chart - Gender Inclusivity  Award\",\n                 hover_name=\"Country\", size_max=15, labels={ \"Country_Population\": \"Country Population\", \"Total_Respondents\": \"Total Respondents\",\n                     \"Percent_Gender_Inclusive\": \"Percentage of Respondents Which Identify as either 'Woman', 'Non - Binary' or 'Prefer to Self-Describe'.\",\"Gender_Inclusive_Rank\":\"Gender Inclusive Rank\"})\nfig.show()","761d5730":"# Sunburst Chart Gender Inclusivity \n\ndf = country_data\ndf = df.rename(columns={'Gender_Inclusive_Rank': 'Gender Inclusive Rank '})\nfig = px.sunburst(df, path=['Continent', 'Country'], values='Gender Inclusive Rank ',\n                  color='Gender Inclusive Rank ', hover_data=['Country'], title = \"Sunburst Chart - Gender Inclusivity Award\",\n                  color_continuous_scale='Turbo')\n                  \nfig.show()","be2e23a2":"# Create Gender Inclusivity Country Leaderboard\n\ndf = country_gender_inclusive_data\ndf['color'] =  np.where((df['Gender_Inclusive_Rank'] ==1),'gold','whitesmoke') \ndf['color'] =  np.where((df['Gender_Inclusive_Rank'] ==2),'silver',df['color']) \ndf['color'] =  np.where((df['Gender_Inclusive_Rank'] ==3),'burlywood',df['color']) \n\nheader = ['Gender Inclusivity Award Rank', 'Country', 'Total Respondents', 'No. of Respondents in Gender Inclusive Cateogory', 'Percentage of Respondents in Gender Inclusive Category']\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=header,fill_color='fuchsia',align='center', font=dict(color='white', size=12)),\n\n    cells=dict(values=[df.Gender_Inclusive_Rank, df.Country, df.Total_Respondents, df.Total_Gender_Inclusive, df.Percent_Gender_Inclusive],\n               fill_color=[df.color],align='center'))\n])\n\nfig.show()","4342a077":"# Plot 3D Globe Gender Inclusivity\nfig = px.choropleth(geodata, locations=\"iso_alpha\",\n                    color=\"Gender_Inclusive_Rank\", \n                    hover_name=\"Country\", \n                    title=\"Gender Inclusivity Award Rankings\", labels={'Gender_Inclusive_Rank': 'Gender Inclusivity Award Ranking'}, \n                    color_continuous_scale=px.colors.diverging.Temps)\n\n\nfig.update_geos(projection_type=\"orthographic\", projection_rotation=dict(lon=7, lat=30, roll=0), showocean = True , showlakes = True, showrivers = True,rivercolor = 'fuchsia',oceancolor = 'fuchsia',lakecolor = 'fuchsia',showcountries =True) \nfig.update_layout(template=\"plotly_dark\")\nfig.show()","2dd0dd43":"# Bubble Chart Machine Learning \n\nfig = px.scatter(country_data, x=\"Percent_ML_3Year_Plus\", y=\"Total_Respondents\",\n         size=\"Percent_ML_3Year_Plus\", color=\"Continent\", title = \"Bubble Chart - Machine Learning Award\",\n                 hover_name=\"Country\", size_max=15, labels={ \"Country_Population\": \"Country Population\", \"Total_Respondents\": \"Total Respondents\",\n                     \"Percent_ML_3Year_Plus\": \"Percentage of Respondents Which State They Have 3 or More Years of Machine Learning Experience.\", \"ML_3Year_Plus_Rank\":\"ML 3 Year Plus Rank\"\n                                                        })\nfig.show()","aa641641":"# Sunburst Chart Machine Learning\n\ndf = country_data\ndf = df.rename(columns={'ML_3Year_Plus_Rank': 'Machine Learning Award Rank '})\n\nfig = px.sunburst(df, path=['Continent','Country'], values='Machine Learning Award Rank ',\n                  color='Machine Learning Award Rank ', hover_data=['Country'],\n                  title = \"Sunburst Chart -  Machine Learning Award\",\n                  color_continuous_scale='Turbo'\n                  )\nfig.show()","76a4c42d":"# Create Machine Learning Country Leaderboard\n\ndf = country_ML_3year_plus_data\ndf['color'] =  np.where((df['ML_3Year_Plus_Rank'] ==1),'gold','whitesmoke') \ndf['color'] =  np.where((df['ML_3Year_Plus_Rank'] ==2),'silver',df['color']) \ndf['color'] =  np.where((df['ML_3Year_Plus_Rank'] ==3),'burlywood',df['color']) \n\nheader = ['ML_3Year_Plus_Rank', 'Country', 'Total_Respondents', 'Total_ML_3Year_Plus', 'Percent_ML_3Year_Plus']\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=header,fill_color='grey',align='center', font=dict(color='white', size=12)),\n\n    cells=dict(values=[df.ML_3Year_Plus_Rank, df.Country, df.Total_Respondents, df.Total_ML_3Year_Plus, df.Percent_ML_3Year_Plus],\n               fill_color=[df.color],align='center'))\n])\n\nfig.show()","38834f52":"# Plot 3D Globe Machine Learning Award\nfig = px.choropleth(geodata, locations=\"iso_alpha\",\n                    color=\"ML_3Year_Plus_Rank\",\n                    hover_name=\"Country\", \n                    title=\"Machine Learning Award Rankings\", labels={'ML_3Year_Plus_Rank': 'Machine Learning Award Ranking'},                   \n                    color_continuous_scale=px.colors.diverging.Temps)\n\n\nfig.update_geos(projection_type=\"orthographic\", projection_rotation=dict(lon=6, lat=46, roll=0),showocean = True , showlakes = True, showrivers = True,rivercolor = 'grey',oceancolor = 'grey',lakecolor = 'grey',showcountries =True) \nfig.update_layout(template=\"plotly_dark\")\nfig.show()","2c314fd9":"# Bubble Chart Future Talent \n\nfig = px.scatter(country_data, x=\"Percent_Under_25\", y=\"Total_Respondents\",\n         size=\"Percent_Under_25\", color=\"Continent\", title = \"Bubble Chart -  Future Talent Award\",\n                 hover_name=\"Country\", size_max=15, labels={ \"Country_Population\": \"Country Population\", \"Total_Respondents\": \"Total Respondents\",\n                     \"Percent_Under_25\": \"Percentage of Respondents Which State They Are Under 25 Years of Age.\", \"Under_25_Rank\":\"Under 25 Rank\"\n                                                        })\nfig.show()","67436229":"# Sunburst Chart Future Talent\n\ndf = country_data\ndf = df.rename(columns={'Under_25_Rank': 'Future Talent Award Rank '})\n\nfig = px.sunburst(df, path=['Continent','Country'], values='Future Talent Award Rank ',\n                  color='Future Talent Award Rank ', hover_data=['Country'],\n                  title = \"Sunburst Chart -  Future Talent Award\",\n                  color_continuous_scale='Turbo'\n                  )\nfig.show()","b4fe4890":"# Create Future Talent Country Leaderboard\n\ndf = country_under_25_data\ndf['color'] =  np.where((df['Under_25_Rank'] ==1),'gold','whitesmoke') \ndf['color'] =  np.where((df['Under_25_Rank'] ==2),'silver',df['color']) \ndf['color'] =  np.where((df['Under_25_Rank'] ==3),'burlywood',df['color']) \n\nheader = ['Future Talent Award Rank', 'Country', 'Total Respondents', 'No. of Respondents Under 25', 'Percent of Respondents Under 25']\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=header,fill_color='orange',align='center', font=dict(color='white', size=12)),\n\n    cells=dict(values=[df.Under_25_Rank, df.Country, df.Total_Respondents, df.Total_Under_25, df.Percent_Under_25],\n               fill_color=[df.color],align='center'))\n])\n\nfig.show()","59b59d14":"# Plot 3D Globe - Future Talent\nfig = px.choropleth(geodata, locations=\"iso_alpha\",\n                    color=\"Under_25_Rank\", \n                    hover_name=\"Country\", \n                    title=\"Future Talent Award Rankings\", labels={'Under_25_Rank': 'Future Talent Award Ranking'},                   \n                    color_continuous_scale=px.colors.diverging.Temps)\n\n\nfig.update_geos(projection_type=\"orthographic\",projection_rotation=dict(lon=105, lat=10, roll=0), showocean = True , showlakes = True, showrivers = True,rivercolor = 'orange',oceancolor = 'orange',lakecolor = 'orange',showcountries =True) \nfig.update_layout(template=\"plotly_dark\")\nfig.show()","ae757880":"df = country_data.sort_values(['Mean_Polygot_Level'], ascending=False)\n\nfig = px.bar(df, x=\"Mean_Polygot_Level\", y=\"Country\", color=\"Mean_Polygot_Level\",   \n             height=1200, width=900, labels=dict(Country=\"Country\", Mean_Polygot_Level=\"Mean\"),\n             color_continuous_scale=px.colors.diverging.RdYlGn, title=\"Average Number of Computer Languages of Each Respondent By Country\")\n\nfig.show()","41c5f248":"# Sunburst Chart Mean Polyglot Level\ndf = country_data\ndf = df.rename(columns={'Polygot_Rank': 'Polygot Award Rank '})\nfig = px.sunburst(df, path=['Continent', 'Country'], values='Polygot Award Rank ',\n                  color='Polygot Award Rank ', hover_data=['Country'],\n                  title = \"Sunburst Chart - Mean Polyglot Level\" ,\n                  color_continuous_scale='Turbo'\n                  )\nfig.show()","a395f8fe":"# Create Polygot Country Leaderboard\n\ndf = country_polygot_data\ndf['color'] =  np.where((df['Polygot_Rank'] ==1),'gold','whitesmoke') \ndf['color'] =  np.where((df['Polygot_Rank'] ==2),'silver',df['color']) \ndf['color'] =  np.where((df['Polygot_Rank'] ==3),'burlywood',df['color']) \n\nheader = ['Polyglot Award Rank', 'Country', 'Total Respondents', ' Mean Polyglot Level of Respondents']\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=header,fill_color='blueviolet',align='center', font=dict(color='white', size=12)),\n\n    cells=dict(values=[df.Polygot_Rank, df.Country, df.Total_Respondents, df.Mean_Polygot_Level],\n               fill_color=[df.color],align='center'))\n])\n\nfig.show()","09c9f7e4":"# Plot 3D Globe - Polyglot\nfig = px.choropleth(geodata, locations=\"iso_alpha\",\n                    color=\"Polygot_Rank\", \n                    hover_name=\"Country\", \n                    title=\"Polyglot Award Rankings\", labels={'Polygot_Rank': 'Polygot Award Ranking'},\n                    color_continuous_scale=px.colors.diverging.Temps)\n\n\nfig.update_geos(projection_type=\"orthographic\", projection_rotation=dict(lon=7, lat=30, roll=0),showocean = True , showlakes = True, showrivers = True,rivercolor = 'blueviolet',oceancolor = 'blueviolet',lakecolor = 'blueviolet',showcountries =True) \nfig.update_layout(template=\"plotly_dark\")\nfig.show()","4e15f98c":"# Create polar bar plot showing continent rankings\n\n\n#Step 1 - Data Prep - Create  rankings results for each continent\ncontinent_data_rankings = continent_data[[ 'Total_Respondents_Rank', 'Gender_Inclusive_Rank', 'ML_3Year_Plus_Rank', 'Under_25_Rank', 'Polygot_Rank', 'Continent_Award']]\n#Extract Continents Rankings\nafrica = continent_data_rankings[:1].values.tolist()\nasia = continent_data_rankings[1:2].values.tolist()\neurope= continent_data_rankings[2:3].values.tolist()\nnorth_america = continent_data_rankings[3:4].values.tolist()\noceania = continent_data_rankings[4:5].values.tolist()\nsouth_america = continent_data_rankings[5:6].values.tolist()\n#Unnest\nafrica_rank_list = africa[0]\nasia_rank_list = asia[0]\neurope_rank_list = europe[0]\nnorth_america_rank_list = north_america[0]\noceania_rank_list = oceania[0]\nsouth_america_rank_list = south_america[0]\n\n\n# Step 2 - Create label list\naward_list  = ['Total Resp.', 'Gender', 'ML', 'Future', 'Polygot', 'Overall Award']\n\n#Step 3 - Create colour list\naward_color_list = [\"turquoise\",  'fuchsia', 'grey', 'orange', 'blueviolet', 'blue']\n# Create continent ranking lists\n\n\n#Create polor bar sub plots\nfig = make_subplots( \n    rows=3, cols=2, horizontal_spacing=0.2, vertical_spacing= 0.2,\n    subplot_titles=( \"North America\", \"Europe\", \"Asia\", \"Africa\", \"South America\", \"Oceania\"),\n    specs=[[{\"type\": \"barpolar\"}, {\"type\": \"barpolar\"}],\n           [{\"type\": \"barpolar\"}, {\"type\": \"barpolar\"}],\n           [{\"type\": \"barpolar\"}, {\"type\": \"barpolar\"}]],)\n\nfig.add_trace(go.Barpolar(theta=award_list, r=north_america_rank_list,  marker_color= award_color_list, subplot = \"polar\"),row=1, col=1)\n\nfig.add_trace(go.Barpolar(theta=award_list, r=europe_rank_list,   marker_color= award_color_list,  subplot = \"polar1\"), row=1, col=2)\n\nfig.add_trace(go.Barpolar(theta=award_list, r=asia_rank_list,  marker_color= award_color_list, subplot = \"polar2\"),row=2, col=1)\n\nfig.add_trace(go.Barpolar(theta=award_list, r=africa_rank_list,  marker_color= award_color_list, subplot = \"polar3\"),row=2, col=2)\n\nfig.add_trace(go.Barpolar(theta=award_list, r=south_america_rank_list,  marker_color= award_color_list, subplot = \"polar4\"), row=3, col=1)\n\nfig.add_trace(go.Barpolar(theta=award_list, r=oceania_rank_list,  marker_color= award_color_list, subplot = \"polar5\"),row=3, col=2)\n\nfig.update_layout(height=1000, width = 700, showlegend=False, title_text=\"Polar Bar Subplots Showing the Award Ranking Each Continent Achieved\")\n\nfig.update_layout(\n   polar = dict(radialaxis_range =  [0,  6]),\n   polar1 = dict(radialaxis_range = [0, 6]),\n   polar2 = dict(radialaxis_range = [0, 6]),\n   polar3 = dict(radialaxis_range = [0, 6]),\n   polar4 = dict(radialaxis_range = [0, 6]),\n   polar5 = dict(radialaxis_range = [0, 6])\n)\n\nfig.show()","6be3f2f4":"#Create Country Award Facet Plot\n\n# Step 1 - Data prep to suit facet chart \naward1 = country_data[['Country', 'Total_Respondents_Rank']]\naward1.columns = ['Country', 'Rank']\naward1.insert(2, 'Award', 'Total Respondent Award')\n\naward2 = country_data[['Country', 'Respondents_per_Capita_Rank']]\naward2.columns = ['Country', 'Rank']\naward2.insert(2, 'Award', 'Respondent per Capita Award')\n\naward3 = country_data[['Country', 'Gender_Inclusive_Rank']]\naward3.columns = ['Country', 'Rank']\naward3.insert(2, 'Award', 'Gender Inclusitvty Award')\n\naward4 = country_data[['Country', 'Under_25_Rank']]\naward4.columns = ['Country', 'Rank']\naward4.insert(2, 'Award', 'Future Talent Award')\n\naward5 = country_data[['Country', 'ML_3Year_Plus_Rank']]\naward5.columns = ['Country', 'Rank']\naward5.insert(2, 'Award', 'Machine Learning Award')\n\naward6 = country_data[['Country', 'Polygot_Rank']]\naward6.columns = ['Country', 'Rank']\naward6.insert(2, 'Award', 'Polygot Award')\n\naward7 = country_data[['Country', 'Country_Award']]\naward7.columns = ['Country', 'Rank']\naward7.insert(2, 'Award', 'Final Award')\n\ncountry_data_facet_df = pd.concat([award1, award2, award3, award4, award5, award6, award7 ], ignore_index=True)\ncountry_data_facet_df\n\n\n#Step 2 - Order plot by final award leaders\ncountry_order = final_leaderboard['Country'].values.tolist()\n\n\n#Step 3 - Create facet plot\nfig = px.bar(country_data_facet_df, x=\"Country\", y=\"Rank\", facet_col = 'Award', color=\"Rank\", facet_col_wrap=1, \n              facet_row_spacing=0.1,facet_col_spacing=0.04,height=900, width=1200,\n             category_orders={\"Country\": country_order},color_continuous_scale=px.colors.diverging.Temps, title=\"Full Country Awards\")\nfig.update_layout(template=\"seaborn\")\n\n#Step 4 - Format axis labels\nfor a in fig.layout.annotations:\n    a.text = a.text.split(\"=\")[1]\n\nfig.show()\n\n","188671c4":"# Create Total_Respondents_Rank Table\n\ndf = final_leaderboard\ndf['color'] =  np.where((df['Country_Award'] ==1),'gold','whitesmoke') \ndf['color'] =  np.where((df['Country_Award'] ==2),'silver',df['color']) \ndf['color'] =  np.where((df['Country_Award'] ==3),'burlywood',df['color']) \n\nheader = ['Geographic Champion Award Rank', 'Country', 'Total Respondents Award Rank', 'Respondents per Capita Award Rank', 'Gender Inclusivity Award Rank', 'Future Talent Award Rank', 'Machine Learning Award Rank', 'Polygot Award Rank', 'Overall Geographic Champion Score']\n\nfig = go.Figure(data=[go.Table( \n    header=dict(values=header,fill_color='blue',align='center', font=dict(color='white', size=12)),\n\n    cells=dict(values=[df.Country_Award, df.Country, df.Total_Respondents_Rank, df.Respondents_per_Capita_Rank, df.Gender_Inclusive_Rank, df.Under_25_Rank, df.ML_3Year_Plus_Rank, df.Polygot_Rank, df.Country_Total_Score ],\n               fill_color=[df.color],align='center'))\n])\n\nfig.show()","cb0909e2":"# Plot 3D Globe - 2021 Kaggle Survey Overall Geographic Champions!\nfig = px.choropleth(geodata, locations=\"iso_alpha\", \n                    color=\"Country_Award\", \n                    hover_name=\"Country\",  labels={'Country_Award': 'Geographic Champion Ranking'},\n                    title = \"Overall 2021 Geographic Champions Rankings!\",\n                    color_continuous_scale=px.colors.diverging.Temps)\n\n\n\nfig.update_geos(projection_type=\"orthographic\",projection_rotation=dict(lon=121, lat=22, roll=0), showocean = True , showlakes = True, showrivers = True,rivercolor = 'blue',oceancolor = 'blue',lakecolor = 'blue',showcountries =True) \nfig.update_layout(template=\"plotly_dark\")\nfig.show()","cd147bba":"\n<div style=\"color:blueviolet;\n           display:fill;\n           border-radius:5px;\n           background-color:blueviolet;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:blueviolet;\">\n\n<\/p>\n<\/div>","fed6554f":"# The 2021 Kaggle Geographic Showdown!\n\n","46b58004":"# Future Talent Award","278d7d28":"The gold medal goes to Switzerland where 43.66% of the respondents have 3 or more years of experience of machine learning methods. \n\nThe silver medal is awarded to The Netherlands with 40.52%. \n\nAnd the Bronze medal goes to The Czech Republic coming in third place with 39.68%.\n\nThe countries performance can be viewed on the globe below:\n","c98e00d1":"\n<div style=\"color:orange;\n           display:fill;\n           border-radius:5px;\n           background-color:orange;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:orange;\">\n\n<\/p>\n<\/div>","9a0b0ce9":"The worst performing countries include Peru, Ethiopia, Japan, Ghana, and Chile, where their gender inclusive percentages range from 4.27% to 8.82%. \n\nThis is concerning, as it is estimated 50% of the world\u2019s population is female, and greater if you include the gender minorities. \n\nJapan\u2019s performance is particularly concerning, as it has the 3rd highest number of total  respondents of any country, at 971. However only 8% state they are female, non-binary or prefer to self describe. \n\nThese countries performance is concerning as it may allude to bias in these areas against woman, nonbinary or those which prefer to self describe, and may allude to challenges for them to access education and opportunities to enter the world of data. \n\nBelow you can see a leader board on how each country performed in this award. \n","ec2e58ef":"# Part 1 - Import The Dataset","3567af13":"The lowest ranking countries for the Respondents per Capita Award are shown in maroon and dark red in the Sunburst chart above. Ethiopia, China and the Philippines are the most concerning. With Africa and Asia being the continents, which overall perform the most poorly. \n\nThe leader board below allows you to view how each country performed in this award!\n","0efcb877":"If we pay attention to the Overall Award, we can see that North America has ranked the best out of all six continents! Awesome! Followed by Europe and Asia.\n\nWith Oceania appearing with the largest segment, it has overall performed the poorest. \n\nHowever, we have seen throughout the Geographic Showdown some areas perform badly in one metric but great in another. Below is a facet bar chart to show how each country performed in each metric. And shows the Overall 2021 Kaggle Survey Country Geographic Champions!","3d05f514":"## Congratulations North America! \n\n## And Congratulations Taiwan!  \u606d\u559c\u53f0\u7063\uff01\n","26f32d6c":"Below we have six polar bar charts totalling all the awards such as the Machine Learning Award (ML), Gender Award (Gender), Total Respondents Award (Total Resp.), the Polyglot Award (Polyglot) and the Future Award (Future). \n\nThese results all create an Overall Award represented by the dark blue segment for each continent.","611d3637":"# Part 3 - The Awards Ceremony!\n\n\n","1964e28a":"# Overall 2021 Kaggle Survey Data Geographic Champions","7a06a092":"### Exciting! Let the games begin!","5d1f057a":"# Awards Discussion","d72e7d6f":"\n<div style=\"color:blue;\n           display:fill;\n           border-radius:5px;\n           background-color:blue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:blue;\">\n\n<\/p>\n<\/div>","e65837d1":"<div style=\"width:100%;text-align: center;\"> <img align=middle  src=\"http:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/7\/7c\/Kaggle_logo.png\/640px-Kaggle_logo.png\" width=\"200\">\n    ","b85eebaa":"The gold medal in The Kaggle Survey Geographic Showdown goes to Taiwan!!!!!\n\nThe Silver Medal goes to India!!\n\nAnd the Bronze Medal goes to The United States of America!\n\nTaiwan has an Overall Geographic Champion Score that is the lowest out of every country in the Kaggle Survey data with 103. Their best category was the Respondents per Capita Award where they placed fourth and had tenth place in the Gender Inclusivity Award. Each other category scored higher than average with their Machine learning Award being their weakest. \n\nCongratulations to our silver medallist India! Scoring 116 in the Overall Geographic Champion Score and is second place. India best performance was in the Total Respondents award where they score the number 1 in the data and came in second for the Future Talent Award. Overall, India scored highly in most categories however their Machine Learning Award ranking was towards the end of the list at 51. This is still an incredible achievement for India!\n\nOur final bronze medal goes to the United States of America who made it third in our Geographic Champion Award with a score of 118. The US have ranked the second in the world for the Total Respondents Award and score eleventh and twelve for Gender Inclusivity and Machine Learning. However, scored low in the Future Talent Award compared to their other categories with a rank of 48.\n\nCountries that could improve on for next year would be Ethiopia at lowest with an Overall Geographic Champion Score of 318, Ghana with a score of 294, and Kazakhstan with a score of 281.  Ethiopia interestingly does have a very low average of 63 for every award but is third highest ranked for the Polyglot Award. This proves how every country has talent in their own way and have so much potential going forward. \n\n","5f916912":"From the Bubble Chart above we can see Singapore has the highest respondents\u2019 per capita value of 0.000031 of its population completing the survey! This means 182 people out of their population of over 5.58 million submitted the survey. Although this is a very small percentage it is the top performing country. The country with the lowest respondent\u2019s per capita value is Ethiopia with 0.000000372 of their population of 115.43 million completing the 2021 Kaggle Survey data. We can see all countries of concern in the Sunburst Chart below:","bc479294":"This sunburst chart shows the country\u2019s most in need to improve their pool of future talent. These include Chile, Ethiopia, Switzerland, Sweden and The United Arab Emirates. \n These are countries different continents however and it is clear the continent with the most countries of concern are within Europe. \n \nThe leader board below shows how each country faired in this metric!","c4423ef2":"\n<div style=\"color:fuchsia;\n           display:fill;\n           border-radius:5px;\n           background-color:fuchsia;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:fuchsia;\">\n\n<\/p>\n<\/div>","0b04d02a":"This workbook uses responses from the 2021 Kaggle Machine Learning & Data Science Survey dataset. Using in particular the country response. To analyse which country and continent should win the 2021 Kaggle Survey Geographic Showdown! \n\nGold, Silver and Bronze Medals will be rewarded to the countries and continents which perform the best in different metrics, and then the countries and continents which perform the best will be crowned the 2021 Kaggle Geographic Showdown Medallists and Champions! \n\n\nAwards Include: \n\n* Absolute Number of Respondents Award\n\n* Respondents per Capita Award\n\n* Women and LGBTQ+ Inclusivity Award\n\n* Machine Learning Award\n\n* Future Talent Award\n\n* Polyglot Award\n\n\nEach of these shall be weight equally, to give the Overall 2021 Kaggle Survey Geographic Showdown Champions!\n\nLet the games begin!\n\nThis project begins with providing more information on the awards, and methods used. Then the data preparation section, which holds the code on how the awards were calculated, annotated with comments throughout. Then finally the Award Ceremony section begins were the workbook showcases the results.","60da0957":"As previously mentioned the Gold medal for the Gender Inclusivity Award goes to Tunisia!  The Silver medal is awarded to Sri Lanka and the Bronze medal is awarded to Saudi Arabia :) \n\nWe can see on the globe below how  each country ranked!","0e6b9359":"\n<div style=\"width:100%;text-align: center;\"> <img align=middle  src=\"http:\/\/c.pxhere.com\/images\/e0\/bd\/f691722cf0194775cf5169458c59-1446831.jpg!d\" width=\"200\">","1ca3846a":"Most of the countries respondents state they regularly use between 2 and 3 programming languages. \n\nNigeria is the lowest with a mean of 1.809 languages, followed by Kazakhstan and Ghana\n\nOnly 4 countries have an average greater than 3. These include Algeria, Ethiopia, Morocco, and Tunisia. With the Gold Medal going to Tunisia! Where the respondents have a mean polyglot level of 3.321. \n\nOverall, we can see that each country does have similar levels of expertise in multiple programming languages. \n\nWe can focus on countries in need of most improvement with the sunburst chart below. \n","b17b3a17":"How well did your country perform? \n\nPlease comment with your country flag emoji in the section below\n\nDo you agree with each of our metrics? Are there any others which you would include? Please comment below if you think so. One which we thought could be useful, but data was not included in the survey was race, so one could make a metric of race diversity. \n\nFinally we hope you enjoyed our 2021 Kaggle geographic showdown project! :)  Please like if so, and we can try use this analysis each year to see how the data community evolves through time!\n\n\nWe hope you enjoyed our analysis and had interactive fun along the way! ","7aafed24":"Here are some of links to sources we used during the project, or one we thought were particulary useful!\n\n##### \n## Gifs and Images\n##### Links to all Gifs and Images can be found under their code cell\n##### \n## Dataset\n##### Population Dataset https:\/\/www.kaggle.com\/tanuprabhu\/population-by-country-2020\/metadata\n##### \n## Recommended Reads and References\n##### Analytics Insight - Countries Which Hold the Greatest Opportunities for Data Scientists: https:\/\/www.analyticsinsight.net\/countries-which-hold-the-greatest-opportunities-for-data-scientists\/\n##### Book of Achievers - Siddharth Srivastav Pilli: https:\/\/bookofachievers.com\/articles\/siddharth-srivastav-pilli\n##### Business Clusters Advantages - http:\/\/ithuteng.ub.bw\/handle\/10311\/866\n##### How to build a Sankey Chart https:\/\/stackoverflow.com\/questions\/50486767\/plotly-how-to-draw-a-sankey-diagram-from-a-dataframe\n##### How to Lie with Maps https:\/\/www.goodreads.com\/book\/show\/1005549.How_to_Lie_with_Maps\n##### Oxford Insights - Government AI Readiness Index 2020: https:\/\/www.oxfordinsights.com\/government-ai-readiness-index-2020\n##### Polar Charts https:\/\/plotly.com\/python\/polar-chart\/https:\/\/plotly.com\/python\/polar-chart\/\n##### Plotly Chart Examples https:\/\/plotly.com\/python\/\n##### Sankey Chart Plotly https:\/\/plotly.com\/python\/sankey-diagram\/\n##### Stitch Data - The State of Data Science: https:\/\/www.stitchdata.com\/resources\/the-state-of-data-science\/\n##### Towards Data Science - Top 10 in Demand Programming Languages to Learn in 2020:https:\/\/towardsdatascience.com\/top-10-in-demand-programming-languages-to-learn-in-2020-4462eb7d8d3e\n##### World Economic Forum - Global Gender Gap Report: (https:\/\/www3.weforum.org\/docs\/WEF_GGGR_2020.pdf)\n\n","29b9e546":"The Respondent per Capita metric was made by dividing the total number of respondents by the country\u2019s population, taken from a dataset available in Kaggle. This award was created to give merit to areas which have a high enthusiasm for data! This metric also avoids bias to countries which have a large population. \n\nAccording to Analytics Insight, the demand for data science professionals in countries such as the United States, China, United Kingdom, Sweden, and India is significant. This award will help explore these countries and continents to provide a better understanding of the supply of data science skills worldwide. \n\nThe Bubble Chart below represents the number of respondents per capita, for each country. Like every plot, this is interactive which means that you can zoom in and hover your mouse to find out more details! The colour of each bubble represents the continent it belongs to. And the larger the size of bubble, shows the larger the respondents\u2019 per capita value is. \n","2d357ec4":"<div style=\"width:100%;text-align: center;\"> <img align=middle  src=\"http:\/\/upload.wikimedia.org\/wikipedia\/commons\/d\/d7\/Flag-globe-2.gif\" width=\"200\">\n\n","a8f63888":"Now, to view the leader board to view all the data how each country ranked in the Total Respondents Award!  ","4fcd670b":"In the bubble chart above, we can see that The Gold medal for the Gender Inclusivity Award goes to Tunisia! :)With 38.53% of the respondents in the survey identifying as a woman, non - binary or prefer to self-describe.\n\n The Silver medal is awarded to Sri Lanka for 33.96% of its  respondents identifying woman, non - binary or prefer to self-describe.\n\nThe Bronze medal is awarded to Saudi Arabia with 30.34% of its respondents being women, non - binary or prefer to self-describe.\n\nWe can now focus on the countries of concern with the sunburst chart below:\n","09b286e9":"To import the dataset, we did the following:\n\n- Import project libraries\n- Import Dataset 'kaggle-survey-2021'\n- Import 'population-by-country-2020'\n- Create continent and country lookup\n\nFeel free to expand the code to see the details!","d4e15c0c":"# Conclusion","fd93c965":"\n<div style=\"width:100%;text-align: center;\"> <img align=middle  src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAMAAAAJbSJIAAABoVBMVEX\/\/\/9OVV2RmKBpcHi6wcdPVF3+\/vxLUllJUFZ6foJ+h46CjJTX2dy0t75pcHZpcHr3+PVMUl9ocmXP6ILJ4n1UXGGLkpvf4eP5+PlCTFWoqq2wxXeRom5vdn5dZm\/CxMny7uxFS1tJV1z\/kwDChGVcVlsAAADQZy2bnKD\/nWPhkGV5ZF\/wlmJJVl9mZlTp6+2xe2X\/5S5gYVf02y+s1f3\/wjU0UGObX0WRj5A9UFx\/uO+rYEKjbz\/\/Z2ZSZHJHTF6Evv+8dy3hiRj8o6LtxGC0yt9vfIqVbUf0jgdCRUyWbV5ycHEiICGEgoP2wUzFvsLfsLl6rN34rAC8Z3LNni1hg67wZmlNVlLMgSYwLi++wcy3xcX0pqnlw276wT7\/wRi2xrreaG6rbHS4kUDfnjPPoB1lf55+bHPqqwBgh5y+njBtcISeuyx4iEhcZUzB2IFnckmwzQ2GmTiDkkWGYUuMnjPxmgA7TGhrdkfIZTdsW1lyfWt4hmSSqy21gCp7ZUNnX0+rwx1+ZU3djXbXxUKypEOgsnVLS26UczzLaTS2XULxw0xdAAAM7klEQVR4nO2dj2PbxBXHLdLrnY1s9+hUWYJa9g0ZA1XdZaPIBSZgW4tR1UBhiCQbjP1g3WjS9AdrKIUOBmPwV++dZMuSo9KkPcWyuU9rW1IcW18\/3bv33t05lYpEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCIRTUctA50CFepHysCgcIUbG0uu0NoEhZuTt5uotZZH4dofIt7646UPLl269MHGryJ+t0wKfxPx1m8\/fAH48MhY4eEJPDyFL0QKN5Ze4fLbUCpcaIUfcIWby6cQOvwNftu0NqMeYiPqGg8zCChc4eaRzU24bfwpVmVZhx3iFB+1HdmIA7fYhMkbb+adzWIpPFrR62VgAGdSlEKrWps\/VbUwhZWKVXt8\/tSKU3i0op54bP6c0H8CCouiPAqX34ZSoVQoFc4ZqVAqlArnj1QoFUqF80cqlAqXSuHRg7GACpfehq2DYy2SwqOt2smDs1I4NYEKq40mvGKzudKINhoxcKCZ2k1TvDzxCkFLrLA5VrQS62jGepr8A4CnxBuHIlCwwpVIEFcGIn4NfNJsNtK2zLBoCivHqmCqlY9i\/vyXv3Le\/dvH596OOH9IggpWuNL4+3uvRLzz7uWIK79\/9dy5c3A7fzitrmCF0OpOvjKj8B9cIWg8PyeBohU299rw3FjhctiwmXOVSoWLpXCvp7m8fAo\/ei\/inX9evnL5ypUr0FvEnM+JaQpHvELo3+NYxm8+0fQhrmk+8Ukj6t0n77fgNowjtsbKJyAIbnGUGmleafBQ7bARr5DLiQwGQmPb+XwnDlbnhcC4lMc0JUSkDdsEl5CTAm3YJmVEnEJuQzAif9H4XjjjV92\/+cQrnLxyyIq43BBVHuZ1xSpUYmghIAUrk3fYL\/A7QtshvD8KiaKwJ4pBowcUCIi1IfPw9tUtT6HXflYEx58ywChorgop5QoZu3a8EJ7y8JwVUgXz9sK8UNGKIGTztiGCNug4cBrgEhDGDJNhCmPoPJIvJeBMD6pPtEJCQ28nTNwBQ2cyvMkOenoCEGxDRHeu36ATiQydejbN097CK6SaEt7Y9rRE4XMZziy+DYlCnS5N9VrDLCCaNyTGSc4AK6k9gDkH7dYPU6HHuDPNeyNijCEaRsYU8E24a2TJf4VSKMQUaTd2vDwbJGsbahALp5Y6PI5xY3b5gynSiILbIeOexstpbihZGX7CwNXUQvG+gRuzi8frZVao4B2cc5Eh1H+sH+Nj0oCHyW6VsHY\/2ufvFR+uCRQo+irVKKIs1wKQqMWNDDuOQ6atksC+Abtk2jIJKbFCcJQQseXg\/DoNHIiisLaGmdJut7U2nMk4MmMHjloOUyFVwtWvtvI0Om+fS\/FxSGsWp4+dhrUJG5pjmNGRulADCleIFbp9fSvP2dNzr6b4mBhu5FNMg8Z+pk2pGXuZciukCvM8g+bZMHOVQvqhtTkaZSzaAPcbH2kL7e6FKyS8HUKXsfd9ULZAZTDo5SH5MCCj7FJn2OVViuEQU4IFN0PhNkR4O9fTKLVarak47VowodbAyL4wCwnLrRDzHv9mXgbBe3yXOG6mr3du\/XyG11leuFAihXB5hp\/u5kWVCNwkKIw9aEyf0Of\/9UaW16nozkJ8O6T5kTcyyIgghEdTIF12bp+dwcm\/xkujEHtRrSHHDA6vbjiMwT3c8QfKnJAY2aK2Mb4rsULw+Vs7OQqx8tIsLypU6Zv5lFghpbvXP83zNPSZWT6DFmfd55upSqxQoThViULIGW859q0XZ7hlO3iSYMxSYoUaxXQalGigMXkj8EBnnQyQahl5lLodgr6UK0VUmRgRgYcJlaivG1dlWFz6RHsQKU+4QqrQ1atbHhoXbh37uVMpnj0zTFTAjUbyBOspWiEP2r6CmGZ85sx+LlsvXYJqogduhlA8sU34fIY7zgPOpvwKMTQ8xGNn2uUSIcJJORY6zAsFDkPhiQfw+AHaIWbeKoLY8vO7GtV4c5yHpizEtR7Ifr+fJho\/3L1+kyr42vG7xvzFRRjmPk9\/XwoxIuEXux7FT167KzyVfUi4wgcuT9q\/wpB6HnQWCDpGuFazrnNOVywoFLao6VgbURziaRGDUi89LnMWixyPOIBCYXAbKsrWajJOS8IzT6eZywipWIVU8XYgt5hEpg6ZGSHtLrxCpIR0dzXxMUy7jw2jjpFG4\/0LphAyiJB4dCLERtkB0qQdhswBVwShD4\/FIcXAzoEnO81JIaEhvY21HKeJlbh8wRghkEWCPyIsBFWEH+GzufjhBVBIw+9OQ3+YKJx6FqSqOiTvOtzpDex9GVXWLhBc0\/kxgkf88CIoZHT7+k0vz4aDKQ129v2oOvoyJidag05nYChEHZzkCsVni6LbIaIaxnmdQjXg365X5f8V7Ny7d+vehQv\/pliDg0EVPoFqTVsEG+LQC6GvyCtFjcc+MR8TxZQN2dDrOhRjYuBo1JQY6H5zocqkkAuEDDHvnOJVv22saNV4s3qyyrc0BTUfsFS4TAohIYQcP7foDc2t0zlmElw91om2Y1oNMrI6P8ZgUCaF0FmsfrFL89qhrg90vWMa+CQ8Jgw6bUzqg4E+uB\/6QNVyXm5eChUGsXf+4Iqm8BY1rlE58G\/sJ0MWlaXw3prbtGpVIoXQCDVPybMhylREEaM81+BxDrWFjxgWqRAiUm9nO\/dDz4xLQMd54bWYe47QOV6FK1To7vUb3Zz3QbxjjwHvUaXha+Mx0Qs0t9mWViHS0NZ27hgw\/xbk+K8dWEesJqMvvx\/zdegs1FWKoYVRNL3skvoh9OzhdN4TdJhON843aNHFDeFxKfKMZGyGsnA4HtuNHEuek0W04Cqq6Bwfhzd2kxyfof+kxy1OnUnXvCeVf1ZwaUPwVUr57Mvu5Cql9rSKcQr+Pe2kuzmmHMrQjOgMmOLTKHGOIXszw\/M0M3x4X+Nl4tpHDb1F21DBLEzOHDl8otPQGA4d4niQS7D0Qi2F8jmZ+cmEuNRCeFzqEa+bXHg0jGaqNdoNhdLV0zOsQp7RaOcBCtvTnzxieUN0boFPp+ZEYS2OqDvHVln3m1\/M8K1Hqq1OXrTdxiM1iQ\/0Rwu8xfcWq1fTc6LUcQrRpt9988sZvu1m84wpbTSykh21VO2Q0JB5bDoNGo\/nWEZp1Z3VLHz2U941qrXBxWpaslsqhRRh2lWUqRHjTAKOGl0+37IbAY\/gaAjfA\/eTg8eZ2TceNjAQHXlD6B0mM2idaNJTX8HO7OSnKqGNpw7E3e5DzngT7Gk0nJl9iXVIJHQcP6YxR\/Tu8QOtH712uxQ2hPQ+vLEz7S60aAxZU8jMqLLaJ\/TzJw\/Ef42HHHIVnh8yj0ybIR63Q2SMkvy+OxpGq51Q3NygwXkJqc0Zug8doAuuJkKg4nlhNhxjPPgErdGkUkNxHHL7bGrYdOho8Y9G8DEUUBQW3VsocJV6M2WJKM4ezzq0CEavp3njS0qn66BKr5ByT3Pju4nXoygZiMDjGqlOGH0jM7X7yy6tHpvURkUvthCukJcLd8IkI2IsqTKhycotysj\/Xk5zjzlt+Fm0uuux0tsQI4w8mpQHqUPj9aIQ5sTTnBH\/ygDPYVOoRzHrRku94CZeoPgeH+PpKlk7DMNsdTcMHSdENk0dYZAoa8MCpBWjENHtr7aSJRPU\/mzP5OevFfpiZjL0WRQ+81KB04tEZ8B49erNpDE5exR+\/8wdOswo\/GEYht\/\/UGCtRng7pKnVCMhZtWe4A8F55sAqRY5tF1gzFdwfIoWl5nk7CqIsA\/wYscT9cJCCbIcWOOtE8NiTkhmJn9lN5j\/nDNXff+jpURCs8GissGyIVfhIX11SEEIVutUScrIuTmFxfyWxJBzwzwYcFiIVCnwtiUQikUgkEolEIpFI9tKabCx1CqqvrQ2mUpePVtAbjXruEisMLqqW1e+58z6PwlB7qt1b7\/V7+rzPpCj6ttXr2H5nXeAYRLkIfOti369U7KW9TPsjvbduresXl9aGes+82Ou59d5+v6Jj0WhV+r2g1TF7S2tCwFzv9ZbFz7TyI5eWrrcyz1oGlkPFDPV6paJZ\/Whbz3QN1Wxn7y6cz1kL\/IHbCtZsfzCy6qrd7\/h+oPqm6vuu33J91VQDX61WXNXv892LpmWvqb7r+nql5cPv+mt+YM1bxY\/huvXArqyvBVbVNt2Rbrqu6dq6bWqua1tBte\/XbfgUTH9kjtxAXbPV0cA2fX09UCv9ft1dV+FZAr9rRzxuAIKsi3XfDEAhUd2+2w9sFUSY8N8GW9V9NbB66sh0zcCq29ZIJ6bbcgNXhSPueiWA55VZYT8IOnU423510FfXdN9sBf01vWrqdUs19cA0TdUcmBW3ogZwlQaDumv5lroGn4wKF3fQciuW65e6NzHV\/Tzrx7yrFdodMedSOJMOsTU9kPOc\/N+USH5S\/B+5CNCRePXxjAAAAABJRU5ErkJggg==\" width=\"200\">\n\n","dcf8a902":"\n<div style=\"width:100%;text-align: center;\"> <img align=middle  src=\"http:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/7\/7a\/Anatomy-1751201_1280.png\/640px-Anatomy-1751201_1280.png\" width=\"200\">","f88c223e":"# Polyglot Award","43a0c2f0":" We can see the final leader board below showing all the rank values for each award with the Final Overall Geographic Champion Score. The best performing country will have the lowest score and has been sorted into descending order and ranked to create the results.\n \nAnd the winner is...\n ","fab5dafb":"### Which Continent and Country Will Win The 2021 Kaggle Geographic Showdown?!?!","8377d16c":"The Gender Inclusivity metric was created to show what areas had the highest proportion of its respondents that reported their gender as either \u201cwoman\u201d, \u201cnon \u2013 binary\u201d or \u201cprefer to self-describe\u201d.\n\nThe World Economic Forum\u2019s 2020 Global Gender Gap Report discuss how their findings reveals that women make up only 26% of professionals in Data and AI. \n \nThis award gives merit to areas that have the highest proportion of respondents that identified as one of those 3 categories. We gave merit to countries that have the highest gender inclusivity, as we assumed diversity in the workplace would bring value to the data team and help challenge potential bias in models.\n\nThe data for this award was collected from a question stating, \u201cWhat is your gender?\u201d, where the following options were able to be selected from a list: Man, Woman, Prefer not to say, Nonbinary and Prefer to self-describe.  We are aware survey respondents may identify from other genders were not available in the survey list, such as Gender Fluid and Transgender. Therefore, unfortunately bias is inherited from this survey.\n\nThe Bubble chart belows shows how each country performed in this metric.\n","7cf5e49b":"From the Leader board, our gold medal for the Total Respondents Award goes to India with overall 7,434 respondents in the Kaggle Surveys. The silver medal goes to the United States of America with 2,650 respondents and Japan has the bronze medal with 921 respondents. Each country can be seen in the globe below:","a5456391":"# Respondents Per Capita Award\n","ddb39690":"\n<div style=\"width:100%;text-align: center;\"> <img align=middle  src=\"https:\/\/www.advocate.com\/sites\/default\/files\/styles\/amp_metadata_content_image_min_696px_wide\/public\/prideflag.png\" width=\"200\">","75387cd9":"\n<div style=\"width:100%;text-align: center;\"> <img align=middle  src=\"https:\/\/freesvg.org\/img\/population.png\" width=\"200\">\n    ","c76bda4e":"# Machine Learning Award\n","d1337580":"#  Gender Inclusivity Award\n","051c55d4":"\nThe Future Talent Award gives merit to areas with the highest number of respondents that are under 25 years old. As these areas may have an exciting future ahead of them!\n\nSiddharth Srivastav Pilli was named the youngest data scientist according to the Book of Achiever in 2021 at only 12 years old. Siddharth was born in India and has become a great example of the future talent within the data science community. The Future Talent Award looks at what areas have the youngest talent that are going forward to thrive. Each area is ranked by the proportion of respondents which state they are under 25 years old. \n\nThe bubble chart below shows the percentage of respondents which state are under 25 years old \ud83d\ude0a\n","e6d086b1":"The Machine Learning Award gives merit to areas with the highest proportion of respondents that state they have 3 or more years experience with machine learning methods. This award highlights concentration of advanced data skillsets! \n\n\nOxford Insights perform a metric where they rank 194 countries and territories according to their infrastructure to implement AI in the delivery of public services and internal operations. Oxford Insights found that the US, UK, Finland, Germany, and Sweden ranked the highest in their index. This will be fun to compare with 2021 Kaggle Survey dataset! \ud83d\ude0a  \n\nThe Bubble Chart below shows the total respondents within each country that have machine learning methods with over 3 years\u2019 experience.\n","8de19a58":"# Sources\n","5f55b2f2":"# Total Respondents Award","a577c5b4":"<div style=\"width:100%;text-align: center;\"> <img align=middle  src=\"http:\/\/upload.wikimedia.org\/wikipedia\/commons\/c\/c9\/Bg.gif \" width=\"400\">","d72db053":"# Part 2 - Data Prep","d9712fb9":"The gold medal in this award goes to India with over 7400 respondents! \n\nWe can see from the diagram above that Africa has 10 countries within the dataset. With Nigeria being the African country with the largest number of respondents, at 702!\n\nOut of the 20 European countries in the dataset, The United Kingdom of Great Britain and Northern Ireland has the highest total number of respondents at 550!\n\nThe United States of America has the second highest number of respondents globally at around 2650. The highest number of respondents from any of the three countries within North America!\n\nSouth America has 5 countries within the dataset, with Brazil containing the highest number of respondents with 751.\n\nOceania has only one country with data included in the survey, Australia, with 264 respondents. This understandably means this continent has the lowest number of respondents over all continents. \n\n##### \n\n\nThe Sunburst Chart below focuses on the ranking of the award each country received. It highlights the most concerning countries and continents in terms of the total number of respondents in the 2021  Kaggle Survey dataset. Where one can see Ethiopia and Iraq perform the worst in this award. ","4f617da6":"The countries with the lowest rank for the Polyglot Award was Nigeria Ghana, Kazakhstan and Singapore. In terms of continents Africa is the most concerning overall, as it has the highest total rank sum of each continent with North America and Oceania performing the best. \n\nThe leader board below shows how each country performed!\n","cc0f2fe1":"Now for the overall champion! \n\nEach award has been accounted for in this final ranking to calculate the winner of the 2021 Kaggle Survey Geographic Showdown!  \n\nTo recap, The Overall Winners were calculated by adding the rank they scored in each category together, with equal weighting given to each.  With the winner being the areas that scored the overall lowest total score. \n\n","4fcbec87":"The largest sized bubble in the data is the Gold Medal winner for this award Switzerland! With 43% of respondents stating they have 3 or more years of machine learning methods experience. Whereas the lowest scoring country is Ghana with only 2 out of 99 respondents holding this level of experience.\n\nWe can see the countries of most concern more clearly in the Sunburst Chart below:\n","046f0e24":"\nTo prepare the data, we create the following data frames:\n\n- Respondent level data frame\n- Country level results data frame\n- Continent level results data frame \n \nFeel free to expand the code to see the step-by-step details of how these were created!\n","fd941e18":"* Total Respondents Award\n\nThis metric shows the total number of respondents to the 2021 Kaggle survey each geographic area had. The metric ranks each area, with merit given to the areas with the highest number of respondents. \n\nThis metric was selected with the hypothesis that a \u2018Kaggle hub talent cluster' may bring similar benefits as those documented in research papers about business clusters. \n\n##### \n*  Respondents per Capita Award\n\nThe Respondent per Capita metric was created to the number of 2021 Kaggle survey respondents, for the geographic area population. This metric avoids bias to countries which have a large population.\n\nThe metric gives merit to areas that have the highest respondents per head. As this could indicate the area has a high enthusiasm for data!\n##### \n* Gender Inclusivity Award\n\nThe Gender Inclusivity metric was created to show what areas had the highest number of respondents to the 2021 Kaggle survey that reported their gender as woman, non - binary and prefer to self-describe. \n\nThis metric gave merit to areas which had the highest proportion of respondents that identified as one of those 3 categories. This metric was to countries that had the highest gender inclusivity, as we assumed diversity in the workplace would bring value to the data team. Particularly in the data industry, where bias in models is important. \n##### \n* Machine Learning Award\n\nThis metric shows of the respondents for an area stated they had 3+ years of experience using machine learning methods. This method was selected to show areas which have a high proportion of highly talented data expertise. \n\nThis metric gave merit to areas that had the highest proportion of respondents that reported this level of expertise.\n##### \n* Future Talent Award\n\nThis metric was created to show what areas had the highest number of respondents for that area that were under 25 years old. This metric gave merit to those which had the highest proportion of respondents under the age of 25. \n\nThis metric was created, as areas with a high concentration of young talent, may develop talent of the future. \n\n##### \n* Polyglot Award\n\nThe final metric create was the polyglot award. A polyglot being those which have multiple programming languages skills. This metric gave preference to areas with the highest mean polyglot levels. \n\nThis metric was selected to compare how adaptable the skillset of an area is. Where the metric give merit to areas with the highest mean polyglot level. \n##### \n* Overall, 2021 Kaggle Survey Geographic Showdown Champions\n\nFinally, we reach the stage to analyse who the winners of the overall 2021 Kaggle survey data geographic champions are! How exciting! \n\nThe winners were calculated by adding the rank they scored in each category together, with equal weighting given to each.  With the winner being the areas that scored the overall lowest total score. \n\nWho shall it be? Keep scrolling to find out! :)\n","f11027b1":"The first award will go to the country and continent with the highest number of total respondents. The award was created to give credit to countries with the most absolute respondents.  With gold medal position (rank 1) being awarded to the country with the most respondents. Hence the higher the rank the worse a country has performed. Just like golf! \ud83d\ude0a \n\n A report by Stitch Data stated that globally around 11,4000 data scientists are currently employed by companies on LinkedIn with around 60,2000 associated records of professional experiences and an estimate of 254,600 records of skills within data science. Lets see how this is reflected in the 2021 Kaggle Survey!\n\nThe country response was taken from the survey question \u201cIn which country do you currently reside?\u201d. Where the respondents were given a list of countries to select from. However, not all countries in the world were listed here, therefore some answered with \u201cOther\u201d, and some respondents did not provide a response. Therefore, we referred to these respondents as Citizens of The Universe! And excluded them from our analysis. \nEach country was then matched to a continent. With countries that have areas which fall into two continents, such as Russia. To avoid overcounting we made the decision to allocate the country to the continent where the majority of the country\u2019s landmass lied. As we did not have further details into the area of the country the respondents report to be in. \n\nThe Sankey Diagram below shows the total number of respondents of the Kaggle Survey per continent and country! There are 6 Continents represented within the diagram: Africa, Asia, Europe, North America, Oceania, and South America. The Sankey Diagram shows the total number of respondents in each continent and country. Fascinating! The plot is interactive, like all in our analysis. This means that if you hover your mouse over different sections of this diagram more information is revealed. Please hover over and play about to find out further details of the countries!\n\n","779b2b8d":"The Bubble Chart above shows the Gold Medal winner for this award is Vietnam! With 60% of their respondents considered future talent. \n\nWith Asian and African countries perform well, while Oceania and European countries perform poorer.\n\nThe weaker countries are further explored below in the Sunburst Chart.\n","27bf607e":"\n<div style=\"color:turquoise;\n           display:fill;\n           border-radius:5px;\n           background-color:turquoise;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:turquoise;\">\n\n<\/p>\n<\/div>","981cf407":"Asia and Africa are home to the countries with the least experience of machine learning experience. With Ghana, Uganda, Ethiopia, and Bangladesh being the lowest ranking countries. \n\nWe can see that Oceania is the best ranked continent with Europe also scoring highly in this category.\n\nThe leader board below shows show each country performed in this award!\n","d06c9ce2":"# Methodology Explanation","a380db9a":"\nAs previously mentioned, Vietnam receives the Gold Medal as 62.09% of their respondents stating they were under 25. \n\nIndia is awarded with a Silver Medal with 60.72% of their respondents stating they were under 25.\n\nAnd the Bronze Medal is awarded to China with 59.09% of their respondents stating they were under 25.\n\nAll the countries can be seen on the globe with their ranking to see how each country faired in the Future Talent Award!\n","5c01017e":"This Polyglot award gives merit to areas with the highest mean number of computer languages their respondents state to hold. As this indicates the area has a pool of diversly talented data professionals. \n\nAccording to Towards Data Science over 600 programming languages are used within the data industry.\n \nThis award was created using the responses from the survey question \u201cWhat programming languages do you use on a regular basis? (Select all that apply)\u201d.  The options included in our metric were: Python, R, SQL, C, C++, Java, JavaScript, Julia, Swift, Bash, MATLAB and Other. \n\nTo calculate the Mean Polyglot Level, we first one hot encoded the responses, then aggregated the total programming languages each respondent stated. Then the mean for the area was calculated to give us the Mean Polyglot Level for that area. \n\nThe bar chart below shows the Mean Polyglot Level of each Country, colour coded to show the lowest (Nigeria), in dark red and the highest (Tunisia) in dark green.\n","b2df9bb2":"The gold medal for the Respondents per Capita Award goes to Singapore with  0.000031 of their population completed the Kaggle survey! The silver medal goes to Ireland, and the bronze goes to Israel. \ud83d\ude0a \n\nThese rankings can be view in the globe below:\n","88144cc7":"\n<div style=\"color:gray;\n           display:fill;\n           border-radius:5px;\n           background-color:gray;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:gray;\">\n\n<\/p>\n<\/div>","2dc62fd0":"The Gold Medal as previously discussed goes to Tunisia with an average of 3.321 programming languages amongst their Kaggle respondents. Amazing!\n\nThe Silver Medal goes to Morocco with an average of 3.3.\n\nAnd the Bronze Medal goes to Ethiopia with an average of 3.279. \n\nAll countries respondents are on average a polyglot, apart from Nigeria. \n\nThe rank for each country can also be see in the interactive globe below. \ud83d\ude0a \n","40560f91":"\n<div style=\"color:yellow;\n           display:fill;\n           border-radius:5px;\n           background-color:yellow;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;\n              color:yellow;\">\n\n<\/p>\n<\/div>","73281580":"\nBefore we jump in its time to lay out the nitty-gritty detail of our choice of methods on how this project was completed. Fun. \n\nThis project was completed in python, to allow for reproducible results. \n\nThe result of each award is shown with leader boards. Where each award has its own leader board, and the Overall 2021 Kaggle Geographic Champion leader board is shown at the end. These leader boards show the rank each country achieved in the competition. In total there are 64 countries in the 2021 Kaggle Survey Dataset. The countries which perform the best will rank the highest. Therefore, a rank of 1 show cases they are gold medallist for this award. Each leader board is designed to show-off the gold, silver and bronze awardees with the use of colour. \n\nOur analysis makes use of sunburst charts, to visualise countries which preform poorly in a particular award. The outside circle of the sunburst shows all the countries, and the inner circle shows the continents. Where the countries with the largest wedge perform the worst. A colour scheme is also used, so that the poorer the ranking the warmer the colour becomes, with dark maroon being the worst ranking. The sunburst charts are used to help visualize countries that have room for improvement \ud83d\ude0a.\n\nThe project results are also displayed on interactive globes, which were created with Plotly. Where a user can spin and play with the globe to view the results. As well as being fun, the decision to plot the results on a globe was taken to avoid bias. This is due to the cartographic design challenge of plotting the Earth, an ellipsoid object, on a 2D plane such as a piece of paper. As depending on the projection one can increase the look of the size of an area, but on the same effect decrease the size of another. Historically, maps emphasised the United Kingdom, during the British Empire, whilst making countries closer to the equator seem smaller. Bringing bias to how data is represented. Which of course we try to mitigate and to challenge techniques with may induce it. A good book to read on this is \u2018How to Lie with Maps\u2019 by Mark Monmonier. For this project we opted to centre the globe on the winning country for the award. \n\nThe project also uses a variety of other types of visualisations throughout, which are explained, as we go. \ud83d\ude0a So let\u2019s go! \n"}}