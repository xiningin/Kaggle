{"cell_type":{"91173c94":"code","e8baf9e3":"code","1b3d8c5f":"code","49b72e8e":"code","bb39a7fb":"code","cef86847":"code","d489ecce":"code","0a110488":"code","faf5929b":"code","a770aa49":"code","b3119ad5":"code","fe91917a":"code","af9e7c49":"code","a2de3513":"markdown","e276b2b5":"markdown","2af52b1e":"markdown","18ef3ea8":"markdown","b0e7fe1d":"markdown","fd292a51":"markdown","18fe92e8":"markdown"},"source":{"91173c94":"import os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set_style(\"darkgrid\")\n\nimport numpy as np\nimport pandas as pd \nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom sklearn.preprocessing import RobustScaler","e8baf9e3":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Device:', tpu.master())\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept:\n    strategy = tf.distribute.get_strategy()\nprint('Number of replicas:', strategy.num_replicas_in_sync)","1b3d8c5f":"train = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/train.csv\", index_col=[0])\ntest = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/test.csv\", index_col=[0])\nsample_submission = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/sample_submission.csv\")","49b72e8e":"feature_cols = [\"R\",\"C\", \"u_in\", \"u_out\"]","bb39a7fb":"train[feature_cols+[\"pressure\"]].hist(bins=10, figsize=(20,3), layout=(1,5))\nplt.show()","cef86847":"idx = 1\ndf_plot = train[train.breath_id==idx]\n\nplt.figure(figsize=(10,5))\nsns.lineplot(y=df_plot[\"u_in\"], x=df_plot[\"time_step\"])\nsns.lineplot(y=df_plot[\"u_out\"], x=df_plot[\"time_step\"])\nsns.lineplot(y=df_plot[\"pressure\"], x=df_plot[\"time_step\"])\nplt.legend([\"u_in\",\"u_out\", \"pressure\"])\nplt.ylabel(\"\")\nplt.xlabel(\"Time Steps\")\nplt.show()","d489ecce":"RS = RobustScaler()\ntrain[feature_cols] = RS.fit_transform(train[feature_cols])\ntest[feature_cols] = RS.transform(test[feature_cols])","0a110488":"n_steps = 80\nn_features = len(feature_cols)\n\ny = train.pop(\"pressure\").values.reshape(-1,n_steps)\nX = train[feature_cols].values.reshape(-1,n_steps,n_features)\nprint(X.shape, y.shape)","faf5929b":"def get_model():\n    act = \"swish\"\n    model = tf.keras.Sequential([\n        layers.InputLayer(input_shape=(n_steps,n_features)),\n        layers.Bidirectional(layers.LSTM(150, return_sequences=True)),\n        layers.Bidirectional(layers.LSTM(150, return_sequences=True)),\n        layers.Bidirectional(layers.LSTM(150, return_sequences=True)),\n        layers.Bidirectional(layers.LSTM(150, return_sequences=True)),\n        layers.Dropout(0.2),\n        layers.Flatten(),\n        layers.Dense(128, activation=act),\n        layers.Dense(256, activation=act),\n        layers.Dense(512, activation=act),\n        layers.Dense(80)\n    ])\n    return model\n\nwith strategy.scope():\n    model = get_model()\n    model.compile(optimizer=\"adam\", loss=\"mae\")\n\nmodel.summary()","a770aa49":"scheduler = tf.keras.optimizers.schedules.ExponentialDecay(initial_learning_rate=1e-3, decay_steps=1e4, decay_rate=1e-5)\ncb_lr = tf.keras.callbacks.LearningRateScheduler(scheduler)\ncb_es = tf.keras.callbacks.EarlyStopping(monitor=\"val_loss\", patience=10, restore_best_weights=True)\n\nhistory = model.fit(X, y, validation_split=0.2, epochs=200, batch_size=512, callbacks=[cb_es, cb_lr])","b3119ad5":"plt.figure(figsize=(16,7))\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs=range(1,len(loss)+1)\n\nplt.plot(epochs, loss, 'r')\nplt.plot(epochs, val_loss, 'b')\nplt.legend([\"Training\", \"Validation\" ])\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.title('Training and validation loss')\n\nplt.show()","fe91917a":"preds = model.predict(test[feature_cols].values.reshape(-1,n_steps,n_features))\nsample_submission[\"pressure\"] = preds.reshape(-1)\nsample_submission.to_csv(\"submission.csv\", index=False)","af9e7c49":"idx = 1\ndf_plot = train[train.breath_id==idx]\np = model.predict(df_plot[feature_cols].values.reshape(-1,n_steps,n_features))\nx = range(80)\nplt.figure(figsize=(10,5))\nsns.lineplot(y=y[idx-1],x=x)\nsns.lineplot(y=p.reshape(-1),x=x)\nplt.legend([\"Ground Truth\",\"Predicted\"])\nplt.ylabel(\"Pressure\")\nplt.xlabel(\"Time Steps\")\nplt.show()","a2de3513":"# Reshape to prepare them as Time Series","e276b2b5":"# Plot Metrics","2af52b1e":"# Train Model","18ef3ea8":"### Plot ","b0e7fe1d":"# Define Model","fd292a51":"# Submission","18fe92e8":"# Prepare Data"}}