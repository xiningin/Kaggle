{"cell_type":{"b0464d16":"code","83789245":"code","6851384a":"code","37a0e3bb":"code","0c29447e":"code","59a30f38":"code","6467144e":"code","7301bcdd":"code","807d5fa8":"code","b8b69f5c":"code","eb8c4e4c":"code","2aefebe8":"code","cca15bea":"code","f7991998":"code","3df586d4":"code","17ff3339":"code","a8afe2c8":"code","2c878701":"code","5832db7d":"code","7ed29b7f":"code","fbd59997":"code","503da25d":"code","0fba4f76":"code","e0d7106a":"code","97258ccb":"markdown","680c02fc":"markdown","b1ab731c":"markdown","902fae9e":"markdown","bc4e3f05":"markdown","330032e5":"markdown","9c2687f8":"markdown","494b11a0":"markdown","9f3797a5":"markdown","2874d71c":"markdown","df2ac66c":"markdown","1a2a67b3":"markdown"},"source":{"b0464d16":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Conv2D,MaxPool2D,Flatten,Dropout\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau","83789245":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","6851384a":"train.head()","37a0e3bb":"test.head()","0c29447e":"y_train = train[\"label\"]\nx_train = train.drop(labels=[\"label\"],axis=1)","59a30f38":"x_train.head()","6467144e":"y_train[0:5]","7301bcdd":"y_train.value_counts()","807d5fa8":"sns.countplot(x = y_train, palette  = \"dark\")","b8b69f5c":"img = x_train.iloc[0].values\nimg = img.reshape(28,28)\nplt.imshow(img, cmap=\"brg\")\nplt.axis(\"off\")\nplt.title(train.iloc[0,0])\nplt.show()","eb8c4e4c":"img = x_train.iloc[100].values\nimg = img.reshape(28,28)\nplt.imshow(img,cmap=\"gist_gray_r\")\nplt.title(train.iloc[100,0])\nplt.axis(\"off\")\nplt.show()","2aefebe8":"#In this study, the images will be used as gray scaled.\n\nimg = x_train.iloc[900].values\nimg = img.reshape(28,28)\nplt.imshow(img,cmap=\"gray\")\nplt.title(train.iloc[900,0])\nplt.axis(\"off\")\nplt.show()","cca15bea":"x_train = x_train \/ 255.0\ntest = test \/ 255.0","f7991998":"x_train = x_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \", x_train.shape)\nprint(\"test shape: \", test.shape)","3df586d4":"y_train = to_categorical(y_train,num_classes = 10)","17ff3339":"x_train,x_val,y_train,y_val = train_test_split(x_train,y_train,test_size = 0.1,random_state = 2)\nprint(\"x_train shape :\",x_train.shape)\nprint(\"x_val shape :\",x_val.shape)\nprint(\"y_train shape :\",y_train.shape)\nprint(\"y_val shape :\",y_val.shape)","a8afe2c8":"model = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5), activation = \"relu\", padding = \"Same\", input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size = (2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters = 16, kernel_size = (5,5), activation = \"relu\", padding = \"Same\"))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256,activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10,activation = \"softmax\"))\n\n","2c878701":"model.compile(optimizer = \"RMSprop\",\n              loss = \"categorical_crossentropy\", \n              metrics = [\"accuracy\"])","5832db7d":"epochs = 10\nbatch_size = 250","7ed29b7f":"datagen=ImageDataGenerator(\n featurewise_center=False,\n samplewise_center=False,\n featurewise_std_normalization=False,\n samplewise_std_normalization=False,\n zca_whitening=False,\n rotation_range=0.5,\n zoom_range=0.5,\n width_shift_range=0.5,\n height_shift_range=0.5,\n horizontal_flip=False,\n vertical_flip=False)\n\n\ndatagen.fit(x_train)","fbd59997":"model.summary()","503da25d":"hist = model.fit(datagen.flow(x_train, y_train, batch_size = batch_size),\n                      epochs = epochs,\n                      validation_data = (x_val, y_val),\n                      steps_per_epoch = x_train.shape[0] \/\/ batch_size)","0fba4f76":"\nfig, ax = plt.subplots(2,1)\nax[0].plot(hist.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(hist.history['val_loss'], color='r', label=\"Validation loss\",axes =ax[0])\nlegend = ax[0].legend()\n\n\nax[1].plot(hist.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(hist.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend()","e0d7106a":"from sklearn.metrics import confusion_matrix\ny_predict=model.predict(x_val)\ny_predict_classes=np.argmax(y_predict,axis=1)\ny_true=np.argmax(y_val,axis=1)\nconfusion_mtx=confusion_matrix(y_true,y_predict_classes)\nf,ax=plt.subplots(figsize=(8,8))\nsns.heatmap(confusion_mtx,annot=True,linewidths=0.01,cmap=\"Purples\",linecolor=\"gray\",fmt=\".1f\",ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","97258ccb":"## Loading Data & Data Preparation","680c02fc":"### Label Encoding","b1ab731c":"## Evaluate the Model","902fae9e":"### Reshape","bc4e3f05":"### Train-Test Split","330032e5":"### Normalization","9c2687f8":"### Confusion Matrix","494b11a0":"## Digit Recognizer ","9f3797a5":"## Import Libraries","2874d71c":"## Model Fitting","df2ac66c":"## Convolutional Neural Network ","1a2a67b3":"### Data Augmentation"}}