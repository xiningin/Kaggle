{"cell_type":{"556c0b94":"code","d34e4eee":"code","082abea6":"code","149a63f6":"code","85e03b00":"code","0236976b":"code","26a28c96":"code","64494852":"markdown","c7d336ae":"markdown","e0e3846e":"markdown","d86d2bc1":"markdown","b1d50bc5":"markdown","9ebe947c":"markdown"},"source":{"556c0b94":"import os\nimport gc\nimport itertools\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom pprint import pprint\nfrom tqdm import tqdm","d34e4eee":"%%time\ntrain_transaction = pd.read_csv('..\/input\/train_transaction.csv', index_col='TransactionID')\ntest_transaction = pd.read_csv('..\/input\/test_transaction.csv', index_col='TransactionID')\n\ntrain_identity = pd.read_csv('..\/input\/train_identity.csv', index_col='TransactionID')\ntest_identity = pd.read_csv('..\/input\/test_identity.csv', index_col='TransactionID')\n\nsample_submission = pd.read_csv('..\/input\/sample_submission.csv', index_col='TransactionID')\n\ntrain = train_transaction.merge(train_identity, how='left', left_index=True, right_index=True)\ntest = test_transaction.merge(test_identity, how='left', left_index=True, right_index=True)\n\nprint(train.shape)\nprint(test.shape)\n\ny_train = train['isFraud'].copy()\ndel train_transaction, train_identity, test_transaction, test_identity\n\n# Drop target, fill in NaNs\nX_train = train.drop(['isFraud', 'TransactionDT'], axis=1)\nX_test = test.drop(['TransactionDT'], axis=1)\ndel train, test\n\nX_train = X_train.fillna(-999)\nX_test = X_test.fillna(-999)\n\n# Label Encoding\nfor f in X_train.columns:\n    if X_train[f].dtype=='object' or X_test[f].dtype=='object': \n        lbl = preprocessing.LabelEncoder()\n        lbl.fit(list(X_train[f].values) + list(X_test[f].values))\n        X_train[f] = lbl.transform(list(X_train[f].values))\n        X_test[f] = lbl.transform(list(X_test[f].values))   ","082abea6":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n","149a63f6":"%%time\nX_train = reduce_mem_usage(X_train)\nX_test = reduce_mem_usage(X_test)","85e03b00":"class XGBGridSearch:\n    \"\"\"\n    Source:\n    https:\/\/www.kaggle.com\/xhlulu\/ieee-fraud-efficient-grid-search-with-xgboost\n    \"\"\"\n    def __init__(self, param_grid, cv=3, verbose=0, \n                 shuffle=False, random_state=2019):\n        self.param_grid = param_grid\n        self.cv = cv\n        self.random_state = random_state\n        self.verbose = verbose\n        self.shuffle = shuffle\n        \n        self.average_scores = []\n        self.scores = []\n    \n    def fit(self, X, y):\n        self._expand_params()\n        self._split_data(X, y)\n            \n        for params in tqdm(self.param_list, disable=not self.verbose):\n            avg_score, score = self._run_cv(X, y, params)\n            self.average_scores.append(avg_score)\n            self.scores.append(score)\n        \n        self._compute_best()\n\n    def _run_cv(self, X, y, params):\n        \"\"\"\n        Perform KFold CV on a single set of parameters\n        \"\"\"\n        scores = []\n        \n        for train_idx, val_idx in self.splits:\n            clf = xgb.XGBClassifier(**params)\n\n            X_train, X_val = X.iloc[train_idx, :], X.iloc[val_idx, :]\n            y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n            \n            clf.fit(X_train, y_train)\n            \n            y_val_pred = clf.predict_proba(X_val)[:, 1]\n            \n            score = roc_auc_score(y_val, y_val_pred)\n            scores.append(score)\n            \n            gc.collect()\n        \n        avg_score = sum(scores) \/ len(scores)\n        return avg_score, scores\n            \n    def _split_data(self, X, y):\n        kf = KFold(n_splits=self.cv, \n                   shuffle=self.shuffle, \n                   random_state=self.random_state)\n        self.splits = list(kf.split(X, y))\n            \n    def _compute_best(self):\n        \"\"\"\n        Compute best params and its corresponding score\n        \"\"\"\n        idx_best = np.argmax(self.average_scores)\n        self.best_score_ = self.average_scores[idx_best]\n        self.best_params_ = self.param_list[idx_best]\n\n    def _expand_params(self):\n        \"\"\"\n        This method expands a dictionary of lists into\n        a list of dictionaries (each dictionary is a single\n        valid params that can be input to XGBoost)\n        \"\"\"\n        keys, values = zip(*self.param_grid.items())\n        self.param_list = [\n            dict(zip(keys, v)) \n            for v in itertools.product(*values)\n        ]","0236976b":"param_grid = {\n    'n_estimators': [500],\n    'missing': [-999],\n    'random_state': [2019],\n    'n_jobs': [1],\n    'tree_method': ['gpu_hist'],\n    'max_depth': [9],\n    'learning_rate': [0.048, 0.05],\n    'subsample': [0.85, 0.9],\n    'colsample_bytree': [0.85, 0.9],\n    'reg_alpha': [0, 0.1],\n    'reg_lambda': [1, 0.9]\n}\n\ngrid = XGBGridSearch(param_grid, cv=4, verbose=1)\ngrid.fit(X_train, y_train)\n\nprint(\"Best Score:\", grid.best_score_)\nprint(\"Best Params:\", grid.best_params_)","26a28c96":"clf = xgb.XGBClassifier(**grid.best_params_)\nclf.fit(X_train, y_train)\n\nsample_submission['isFraud'] = clf.predict_proba(X_test)[:,1]\nsample_submission.to_csv('simple_xgboost.csv')","64494852":"# Basic Preprocessing","c7d336ae":"# Training\n\nYou will find below the `param_grid` with the default input parameters to XGBoost. Please add more element to the desired list in order to run the model.","e0e3846e":"# RAM Optimization","d86d2bc1":"## Refit and Submit","b1d50bc5":"# About this Kernel\n\nThe goal with this kernel is to share a simple, reusable, and sklearn-like class for you to use grid search on XGBoost, **without running out of RAM**. The difference between `XGBGridSearch` and scikit-learn's `GridSearchCV` is that my class does not make multiple copies of the data, and is more aggressive in terms of memory management (it calls `gc.collect()` after every run). **Otherwise, it should feel just like `GridSearchCV`.**\n\n## Credits\n\nI'd be happy if you would like to fork, modify and share this kernel. If you do so, or if you are copying a certain function or class from here, please do cite or link to this kernel directly. This would be highly appreciated, since I spent a lot of time working on this.\n\n## References\n* [KFold CV + RAM Optimization](https:\/\/www.kaggle.com\/artkulak\/ieee-fraud-simple-baseline-0-9383-lb)\n* [Using XGBoost with GPU](https:\/\/www.kaggle.com\/xhlulu\/ieee-fraud-xgboost-with-gpu-fit-in-40s)\n* [Freeing up memory from GPU](https:\/\/github.com\/dmlc\/xgboost\/issues\/3045)","9ebe947c":"# XGBGridSearch Class"}}