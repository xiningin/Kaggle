{"cell_type":{"9c393bb3":"code","4a60a35d":"code","1640c834":"code","9846755f":"code","1fac8aab":"code","f589e472":"code","870462c8":"code","d11c3880":"code","98462a38":"code","e4edbd5a":"code","4cd93253":"code","0d3d232a":"code","8f93c3dc":"code","0f724888":"code","e261a89d":"code","045c3d03":"code","f4efd852":"code","5ca7b7b0":"code","6a6a706f":"code","f1b49bc9":"code","4ef62d98":"code","296d22a1":"markdown","3e0dc62f":"markdown","f090ef0e":"markdown","923385a4":"markdown","44609139":"markdown","6af6bc2e":"markdown","30ae16a0":"markdown","3111ce75":"markdown","6cf12b30":"markdown","91c9dfd6":"markdown","360def97":"markdown","a68e8b4f":"markdown","fc994974":"markdown","ee13049c":"markdown","e3aa6334":"markdown","4904bc9a":"markdown","20755d5a":"markdown","d9e37a84":"markdown","d39119d9":"markdown","d358ed19":"markdown","c3507938":"markdown","e8601596":"markdown","d9efb68a":"markdown","d72816e7":"markdown","fbf8f992":"markdown","6be0e8ad":"markdown","3f9ec1ea":"markdown","83ea7c2e":"markdown"},"source":{"9c393bb3":"import numpy as np\nimport pandas as pd\nfrom scipy.optimize import curve_fit\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\n%matplotlib inline\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.figure_factory as ff","4a60a35d":"us_videos = pd.read_csv('..\/input\/USvideos.csv')\nus_videos_categories = pd.read_json('..\/input\/US_category_id.json')","1640c834":"us_videos.head(1)","9846755f":"us_videos.info()","1fac8aab":"# Transforming Trending date column to datetime format\nus_videos['trending_date'] = pd.to_datetime(us_videos['trending_date'], format='%y.%d.%m').dt.date\n\n# Transforming Trending date column to datetime format and splitting into two separate ones\npublish_time = pd.to_datetime(us_videos['publish_time'], format='%Y-%m-%dT%H:%M:%S.%fZ')\nus_videos['publish_date'] = publish_time.dt.date\nus_videos['publish_time'] = publish_time.dt.time\nus_videos['publish_hour'] = publish_time.dt.hour","f589e472":"us_videos.head(1)","870462c8":"# We'll use a very nice python featur - dictionary comprehension, to extract most important data from US_category_id.json\ncategories = {category['id']: category['snippet']['title'] for category in us_videos_categories['items']}\n\n# Now we will create new column that will represent name of category\nus_videos.insert(4, 'category', us_videos['category_id'].astype(str).map(categories))","d11c3880":"us_videos['dislike_percentage'] = us_videos['dislikes'] \/ (us_videos['dislikes'] + us_videos['likes'])","98462a38":"# Helper function\ndef numberOfUpper(string):\n    i = 0\n    for word in string.split():\n        if word.isupper():\n            i += 1\n    return(i)\n\nus_videos[\"all_upper_in_title\"] = us_videos[\"title\"].apply(numberOfUpper)","e4edbd5a":"us_videos['likes_log'] = np.log(us_videos['likes'] + 1)\nus_videos['views_log'] = np.log(us_videos['views'] + 1)\nus_videos['dislikes_log'] = np.log(us_videos['dislikes'] + 1)\nus_videos['comment_log'] = np.log(us_videos['comment_count'] + 1)","4cd93253":"us_videos_last = us_videos.drop_duplicates(subset=['video_id'], keep='last', inplace=False)\nus_videos_first = us_videos.drop_duplicates(subset=['video_id'], keep='first', inplace=False)","0d3d232a":"print(\"us_videos dataset contains {} videos\".format(us_videos.shape[0]))\nprint(\"us_videos_first dataset contains {} videos\".format(us_videos_first.shape[0]))\nprint(\"us_videos_last dataset contains {} videos\".format(us_videos_last.shape[0]))","8f93c3dc":"us_videos_first[\"time_to_trend\"] = (us_videos_first.trending_date - us_videos_first.publish_date) \/ np.timedelta64(1, 'D')","0f724888":"# Initialization of the list storing counters for subsequent publication hours\npublish_h = [0] * 24\n\nfor index, row in us_videos_first.iterrows():\n    publish_h[row[\"publish_hour\"]] += 1\n    \nvalues = publish_h\nind = np.arange(len(values))\n\n\n# Creating new plot\nfig = plt.figure(figsize=(20,10))\nax = fig.add_subplot(111)\nax.yaxis.grid()\nax.xaxis.grid()\nbars = ax.bar(ind, values)\n\n# Sampling of Colormap\nfor i, b in enumerate(bars):\n    b.set_color(plt.cm.viridis((values[i] - min(values))\/(max(values)- min(values))))\n    \nplt.ylabel('Number of videos that got trending', fontsize=20)\nplt.xlabel('Time of publishing', fontsize=20)\nplt.title('Best time to publish video', fontsize=35, fontweight='bold')\nplt.xticks(np.arange(0, len(ind), len(ind)\/6), [0, 4, 8, 12, 16, 20])\n\nplt.show()","e261a89d":"from IPython.display import HTML, display\n\n# We choose the 10 most trending videos\nselected_columns = ['title', 'channel_title', 'thumbnail_link', 'publish_date', 'category']\n\nmost_frequent = us_videos.groupby(selected_columns)['video_id'].agg(\n    {\"code_count\": len}).sort_values(\n    \"code_count\", ascending=False\n).head(10).reset_index()\n\n# Construction of HTML table with miniature photos assigned to the most popular movies\ntable_content = ''\nmax_title_length = 50\n\nfor date, row in most_frequent.T.iteritems():\n    HTML_row = '<tr>'\n    HTML_row += '<td><img src=\"' + str(row[2]) + '\"style=\"width:100px;height:100px;\"><\/td>'\n    HTML_row += '<td>' + str(row[1]) + '<\/td>'\n    HTML_row += '<td>' + str(row[0])  + '<\/td>'\n    HTML_row += '<td>' + str(row[4]) + '<\/td>'\n    HTML_row += '<td>' + str(row[3]) + '<\/td>'\n    \n    table_content += HTML_row + '<\/tr>'\n\ndisplay(HTML(\n    '<table><tr><th>Photo<\/th><th>Channel Name<\/th><th style=\"width:250px;\">Title<\/th><th>Category<\/th><th>Publish Date<\/th><\/tr>{}<\/table>'.format(table_content))\n)","045c3d03":"max_title_length = 30\nnumber_of_creators = 25\n\ntop_creators = us_videos.groupby(['channel_title'])['channel_title'].agg(\n    {\"code_count\": len}).sort_values(\n    \"code_count\", ascending=False\n).head(number_of_creators).reset_index()\n\ntrace1 = go.Bar(\n    y = [(x if len(x) <= max_title_length else x[:max_title_length] + \"...\") for x in top_creators.channel_title.values][::-1],\n    x = top_creators['code_count'].tolist()[::-1],\n    name = \"Top creators\",\n    orientation = 'h',\n    marker=dict(\n        color='rgba(55, 128, 191, 0.7)',\n        line=dict(\n            color='rgba(55, 128, 191, 1.0)',\n            width=2,\n        )\n    ),\n)\n\ndata = [trace1]\n\nlayout = go.Layout(\n    title = 'Most influential creators',\n    width=900,\n    height=600,\n    margin=go.Margin(\n        l=180,\n        r=50,\n        b=80,\n        t=80,\n        pad=10\n    ),\n    paper_bgcolor='rgb(244, 238, 225)',\n    plot_bgcolor='rgb(244, 238, 225)',\n    yaxis = dict(\n        anchor = 'x',\n        rangemode='tozero',\n        tickfont=dict(\n            size=10\n        ),\n        ticklen=1\n    ), \n    xaxis = dict(\n        title= 'Number of times video made by creator got trending',\n        anchor = 'x',\n        rangemode='tozero'\n    ), \n    legend=dict(x=0.6, y=0.07)\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","f4efd852":"max_title_length = 30\nnumber_of_creators = 10\n\ntop_creators = us_videos.groupby(['category'])['category'].agg(\n    {\"code_count\": len}).sort_values(\n    \"code_count\", ascending=False\n).head(number_of_creators).reset_index()\n\ntrace1 = go.Bar(\n    y = [(x if len(x) <= max_title_length else x[:max_title_length] + \"...\") for x in top_creators.category.values][::-1],\n    x = top_creators['code_count'].tolist()[::-1],\n    name = \"Top categories\",\n    orientation = 'h',\n    marker=dict(\n        color='rgba(55, 128, 191, 0.7)',\n        line=dict(\n            color='rgba(55, 128, 191, 1.0)',\n            width=2,\n        )\n    ),\n)\n\ndata = [trace1]\n\nlayout = go.Layout(\n    title = 'Most popular categories',\n    width=900,\n    height=600,\n    margin=go.Margin(\n        l=180,\n        r=50,\n        b=80,\n        t=80,\n        pad=10\n    ),\n    paper_bgcolor='rgb(244, 238, 225)',\n    plot_bgcolor='rgb(244, 238, 225)',\n    yaxis = dict(\n        anchor = 'x',\n        rangemode='tozero',\n        tickfont=dict(\n            size=10\n        ),\n        ticklen=1\n    ), \n    xaxis = dict(\n        title= 'The number of times the video of a given category was trending',\n        anchor = 'x',\n        rangemode='tozero'\n    ), \n    legend=dict(x=0.6, y=0.07)\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","5ca7b7b0":"max_title_length = 20\nnumber_of_late_bloomers = 20\n\nlate_bloomers = us_videos_first.sort_values([\"time_to_trend\"], ascending=False).head(number_of_late_bloomers)\nlate_bloomers_title = [(x if len(x) <= max_title_length else x[:max_title_length] + \"...\") for x in late_bloomers.title.values]\nlate_bloomers_days = late_bloomers.time_to_trend.values\nlate_bloomers_views = late_bloomers.views.values\n\ntrace1 = go.Bar(\n    x = late_bloomers_title,\n    y = late_bloomers_days,\n    name='Number of days',\n    marker=dict(\n        color='rgba(55, 128, 191, 0.7)',\n        line=dict(\n            color='rgba(55, 128, 191, 1.0)',\n            width=2,\n        )\n    )\n)\ntrace2 = go.Bar(\n    x = late_bloomers_title,\n    y = late_bloomers_views,\n    name='total views',\n    marker=dict(\n        color='rgba(219, 64, 82, 0.7)',\n        line=dict(\n            color='rgba(219, 64, 82, 1.0)',\n            width=2,\n        )\n    ),\n    yaxis='y2'\n)\n\n\ndata = [trace1, trace2]\nlayout = go.Layout(\n    barmode='group',\n    title = 'Late bloomers',\n    width=900,\n    height=500,\n    margin=go.Margin(\n        l=75,\n        r=75,\n        b=120,\n        t=80,\n        pad=10\n    ),\n    paper_bgcolor='rgb(244, 238, 225)',\n    plot_bgcolor='rgb(244, 238, 225)',\n    yaxis = dict(\n        title= 'Number of days until becoming trending',\n        anchor = 'x',\n        rangemode='tozero'\n    ),   \n    yaxis2=dict(\n        title='Total number of views',\n        titlefont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        tickfont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        overlaying='y',\n        side='right',\n        anchor = 'x',\n        rangemode = 'tozero',\n        dtick = 61000\n    ),\n    #legend=dict(x=-.1, y=1.2)\n    legend=dict(x=0.1, y=0.05)\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","6a6a706f":"max_title_length = 20\nnumber_of_late_bloomers = 10\n\nmost_disliked = us_videos_first.sort_values([\"dislikes\"], ascending=False).head(number_of_late_bloomers)\nmost_disliked_title = [(x if len(x) <= max_title_length else x[:max_title_length] + \"...\") for x in late_bloomers.title.values]\nmost_disliked_l_number = most_disliked.likes.values\nmost_disliked_dl_number = most_disliked.dislikes.values\nmost_disliked_dl_percentage = most_disliked.dislike_percentage.values\n\ntrace1 = go.Bar(\n    x = most_disliked_title,\n    y = most_disliked_l_number,\n    name='Number of likes',\n    marker=dict(\n        color='rgba(55, 128, 191, 0.7)',\n        line=dict(\n            color='rgba(55, 128, 191, 1.0)',\n            width=2,\n        )\n    )\n)\ntrace2 = go.Bar(\n    x = most_disliked_title,\n    y = most_disliked_dl_number,\n    name='Number of dislikes',\n    marker=dict(\n        color='rgba(219, 64, 82, 0.7)',\n        line=dict(\n            color='rgba(219, 64, 82, 1.0)',\n            width=2,\n        )\n    )\n)\n\ntrace3 = go.Scatter(\n    x = most_disliked_title,\n    y = most_disliked_dl_percentage,\n    name='Dislike percentage',\n    mode = 'markers',\n    marker=dict(\n        symbol=\"hexagon-dot\",\n        size=15\n    ),\n    yaxis='y2'\n)\n\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n    barmode='group',\n    title = 'No such thing as bad press, right?',\n    width=900,\n    height=500,\n    margin=go.Margin(\n        l=75,\n        r=75,\n        b=120,\n        t=80,\n        pad=10\n    ),\n    paper_bgcolor='rgb(244, 238, 225)',\n    plot_bgcolor='rgb(244, 238, 225)',\n    yaxis = dict(\n        title= 'Number of likes\/dislikes',\n        anchor = 'x',\n        rangemode='tozero'\n    ),   \n    yaxis2=dict(\n        title='Dislike percentage',\n        titlefont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        tickfont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        overlaying='y',\n        side='right',\n        anchor = 'x',\n        rangemode = 'tozero',\n        dtick = 0.165\n    ),\n    legend=dict(x=0.75, y=1)\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","f1b49bc9":"plt.figure(figsize=(16,8))\nsns.set_style(\"whitegrid\")\nplt.title('Videos vews according to their Likes and Dislikes', fontsize=20, fontweight='bold', y=1.05,)\nplt.xlabel('Likes', fontsize=15)\nplt.ylabel('Dislkes', fontsize=15)\n\nlikes = us_videos_first[\"likes\"].values\ndislikes = us_videos_first[\"dislikes\"].values\nviews = us_videos_first[\"views\"].values\n\nplt.scatter(likes, dislikes, s = views\/10000, edgecolors='black')\nplt.show()","4ef62d98":"hist_data = [us_videos_first[\"dislikes_log\"].values, us_videos_first[\"likes_log\"].values]\n\ngroup_labels = ['Dislikes log distribution', 'Likes log distribution']\ncolors = ['#A6ACEC', '#63F5EF']\n\n# Create distplot with curve_type set to 'normal'\nfig = ff.create_distplot(hist_data, group_labels, colors=colors,\n                         bin_size=0.5, show_rug=False)\n\n# Add title\nfig['layout'].update(title='Likes vs dislikes', legend=dict(x=0.65, y=0.8))\n\n# Plot!\npy.iplot(fig, filename='Hist and Curve')","296d22a1":"### 1.4.7. Time to trend\n<a id=\"time_to_trend\"><\/a>","3e0dc62f":"# Table of Contents\n\n* [1. Importing dataset and data preprocessing](#importing_dataset_and_data_preprocessing) <br>\n * [1.1. Importing essential libraries](#importing_essential_libraries) <br>\n * [1.2. Importing datasets](#importing_datasets) <br>\n * [1.3. Let's summarize the datasets](#lets_summarize_the_dataset) <br>\n * [1.4. Data preprocessing and feature engineering](#data_preprocessing_and_feature_engineering) <br>\n   * [1.4.1. Datetime format of Trending date and Publish time](#datetime_format_of_trending_date_and_publish_time) <br>\n   * [1.4.2. Assignment of the film category](#assignment_of_the_film_category) <br>\n   * [1.4.3. Dislike percentage](#dislike_percentage) <br>\n   * [1.4.4. Number of words with all upper case in title](#number_of_words_with_all_upper_case_in_title) <br>\n   * [1.4.5. Distribution of basic parameters](#distribution_of_basic_parameters) <br>\n   * [1.4.6. What about duplicates?](#what_about_duplicates) <br>\n   * [1.4.7. Time to trend](#time_to_trend) <br>\n<br>\n* [2. Data Visualization](#data_visualization) <br>\n * [2.1. Best time to publish video](#best_time_to_publish_video) <br>\n * [2.2. It got viral](#it_got_viral) <br>\n * [2.3. Most influential creators](#most_influential_creators) <br>\n * [2.4. Variety of topics](#variety_of_topics) <br>\n * [2.5. Late bloomers](#late_bloomers) <br>\n * [2.6. No such thing as bad press, right?](#no_such_thing_as_bad_press_right) <br>\n * [2.7. Likes vs dislikes distribution!](#likes_vs_dislikes_distribution) <br>","f090ef0e":"### 2.5. Late bloomers\n<a id=\"late_bloomers\"><\/a>\nThis section dedicated to videos that waited the longest before they became trending. I also checked how many views they had when they hit the YouTube home page.","923385a4":"## 2. Data Visualization\n<a id=\"data_visualization\"><\/a>","44609139":"<b>NOTE:<\/b> We also count what percentage of assessments are negative ratings.","6af6bc2e":"<b>NOTE:<\/b> We immediately see, that in the first place we have to process the raw data loaded from the file. Firstly we will transform ```trending_date``` as well as ```publish_time``` from string to datetime format. This will allow us to easily perform arithmetic operations and compare these values. ```publish_time``` column will be divided into two separate ones ```publish_date``` and ```publish_time```. I am also curious what time it is best to publish videos to increase the likelihood of treanding. For this reason, I will create an additional column storing the time of publication - ```publish_hour``` .","30ae16a0":"<img src='https:\/\/upload.wikimedia.org\/wikipedia\/commons\/e\/e1\/Logo_of_YouTube_%282015-2017%29.svg'>","3111ce75":"### 1.4.6. What about duplicates?\n<a id=\"what_about_duplicates\"><\/a>","6cf12b30":"### 1.3. Let's summarize the dataset\n<a id=\"lets_summarize_the_dataset\"><\/a>","91c9dfd6":"<b>NOTE:<\/b> Lastly we will create new feature ```time to trend``` representing the time (in days) between publication and the day when it became trending.","360def97":"### 1.4.3. Dislike percentage\n<a id=\"dislike_percentage\"><\/a>","a68e8b4f":"### 2.6. No such thing as bad press, right?\n<a id=\"no_such_thing_as_bad_press_right\"><\/a>\nThis section dedicated to videos that has gained popularity on YT by being disliked.","fc994974":"## 1. Importing dataset and data preprocessing\n<a id=\"importing_dataset_and_data_preprocessing\"><\/a>","ee13049c":"### 2.3. Most influential creators\n<a id=\"most_influential_creators\"><\/a>","e3aa6334":"### 1.4.4. Number of words with all upper case in title\n<a id=\"number_of_words_with_all_upper_case_in_title\"><\/a>","4904bc9a":"<b>NOTE:<\/b> Because many of the films have been trending you several times, we will create a separate datasets in which we will get rid of repetitions. Still, we leave the original dataset, because there is a lot of interesting information in it.","20755d5a":"# Trending YouTube Video Statistics\n### Data Exploration and Visualization With Python\n***","d9e37a84":"### 1.4. Data preprocessing and feature engineering\n<a id=\"data_preprocessing_and_feature_engineering\"><\/a>","d39119d9":"### 1.4.1. Datetime format of Trending date and Publish time\n<a id=\"datetime_format_of_trending_date_and_publish_time\"><\/a>","d358ed19":"### 1.2. Importing dataset\n<a id=\"importing_datasets\"><\/a>","c3507938":"### 2.1. Best time to publish video\n<a id=\"best_time_to_publish_video\"><\/a>","e8601596":"<b>NOTE:<\/b> Next we will connect the films with the categories they belong to. We will associate the information in two files: ```USvideos.csv``` and ```US_category_id.json``` .","d9efb68a":"### 1.1. Importing essential libraries\n<a id=\"importing_essential_libraries\"><\/a>","d72816e7":"### 2.4. Variety of topics\n<a id=\"variety_of_topics\"><\/a>","fbf8f992":"### 1.4.5. Distribution of basic parameters\n<a id=\"distribution_of_basic_parameters\"><\/a>","6be0e8ad":"### 2.7. Likes vs dislikes distribution!\n<a id=\"likes_vs_dislikes_distribution\"><\/a>","3f9ec1ea":"### 1.4.2. Assignment of the film category\n<a id=\"assignment_of_the_film_category\"><\/a>","83ea7c2e":"### 2.2. It got viral\n<a id=\"it_got_viral\"><\/a>"}}