{"cell_type":{"76104394":"code","a72a316c":"code","c59c8da0":"code","36a772b1":"code","7f9fb8f7":"code","3b650e59":"code","9b0fb584":"code","c4bb5d56":"code","baf1e524":"code","85c1831c":"code","65f05521":"code","5e080844":"code","f8a6ce3e":"code","a60e57f2":"code","5d7e5413":"code","6919de9b":"code","ed6f2b0d":"code","4e25b384":"code","db13787a":"code","689dc979":"code","d3200fcc":"code","f1ac6efc":"code","aed6c9eb":"code","d9d75ff3":"code","1724f73e":"code","a50562af":"code","5243855d":"code","8d12ec75":"code","c86c6ce4":"code","d454795b":"code","029b977c":"code","f061fc7b":"code","db2c972d":"code","0cbba26b":"code","04bdd83f":"code","defce3f1":"code","323a44ca":"code","7de2c3f7":"code","f783c24f":"code","84118ba6":"code","7ca04fe5":"code","304a73cd":"code","f08a9ee4":"code","afaa2e24":"code","9d5541ae":"code","fa21c773":"code","1c3e8c1a":"code","e9c0e30a":"code","ee7e40ac":"code","bce5aebd":"code","c76c57de":"code","d691950e":"code","efc99704":"code","2df9fc96":"code","b28c5df6":"markdown","72be4842":"markdown","77b4a03b":"markdown","11ad3213":"markdown","92582427":"markdown","143309bb":"markdown","aed29828":"markdown","9bc36d14":"markdown","7ec8c582":"markdown","272027b7":"markdown","4fe17438":"markdown","8932917c":"markdown","82320ac2":"markdown","2a8191b5":"markdown"},"source":{"76104394":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n## Use this code block for before and after data work\n##print('Old size: %d' % len(df_train))\n##print('New size: %d' % len(df_train))\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport calendar\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nPATH = '..\/input\/train.csv'\n\n# Any results you write to the current directory are saved as output.","a72a316c":"%%time\n\n# Method 1, using file.readlines. Takes about 20 seconds.\nwith open(PATH) as file:\n    n_rows = len(file.readlines())\n\nprint (f'Exact number of rows: {n_rows}')","c59c8da0":"# read data in pandas dataframe\ndf_train =  pd.read_csv('..\/input\/train.csv', nrows = 50_000, parse_dates=[\"pickup_datetime\"])\ndf_test =  pd.read_csv('..\/input\/test.csv')","36a772b1":"df_train.head()\n","7f9fb8f7":"df_test.head()","3b650e59":"df_train.describe()","9b0fb584":"df_test.describe()","c4bb5d56":"# list first few rows (datapoints)\ndf_train.dtypes","baf1e524":"df_train.info()","85c1831c":"df_test.info()","65f05521":"df_train['pickup_datetime']=pd.to_datetime(df_train['pickup_datetime'],format='%Y-%m-%d %H:%M:%S UTC')\n\ndf_test['pickup_datetime']=pd.to_datetime(df_test['pickup_datetime'],format='%Y-%m-%d %H:%M:%S UTC')","5e080844":"df_train.head()","f8a6ce3e":"df_test.head()","a60e57f2":"#train data\ndf_train['pickup_date']= df_train['pickup_datetime'].dt.date\ndf_train['pickup_day']=df_train['pickup_datetime'].apply(lambda x:x.day)\ndf_train['pickup_hour']=df_train['pickup_datetime'].apply(lambda x:x.hour)\ndf_train['pickup_day_of_week']=df_train['pickup_datetime'].apply(lambda x:calendar.day_name[x.weekday()])\ndf_train['pickup_month']=df_train['pickup_datetime'].apply(lambda x:x.month)\ndf_train['pickup_year']=df_train['pickup_datetime'].apply(lambda x:x.year)\ndf_train.head()","5d7e5413":"#test data\ndf_test['pickup_date']= df_test['pickup_datetime'].dt.date\ndf_test['pickup_day']=df_test['pickup_datetime'].apply(lambda x:x.day)\ndf_test['pickup_hour']=df_test['pickup_datetime'].apply(lambda x:x.hour)\ndf_test['pickup_day_of_week']=df_test['pickup_datetime'].apply(lambda x:calendar.day_name[x.weekday()])\ndf_test['pickup_month']=df_test['pickup_datetime'].apply(lambda x:x.month)\ndf_test['pickup_year']=df_test['pickup_datetime'].apply(lambda x:x.year)\ndf_test.head()","6919de9b":"print(df_train.isnull().sum())","ed6f2b0d":"print(df_test.isnull().sum())","4e25b384":"print('Old size: %d' % len(df_train))\ndf_train = df_train.dropna(how = 'any', axis = 'rows')\ndf_test = df_test.dropna(how = 'any', axis = 'rows')\nprint('New size: %d' % len(df_train))","db13787a":"# Given a dataframe, add two new features 'abs_diff_longitude' and\n# 'abs_diff_latitude' reprensenting the \"Manhattan vector\" from\n# the pickup location to the dropoff location.\ndef add_travel_vector_features(df):\n    df['abs_diff_longitude'] = (df.dropoff_longitude - df.pickup_longitude).abs()\n    df['abs_diff_latitude'] = (df.dropoff_latitude - df.pickup_latitude).abs()\n\nadd_travel_vector_features(df_train)","689dc979":"# Given a dataframe, add two new features 'abs_diff_longitude' and\n# 'abs_diff_latitude' reprensenting the \"Manhattan vector\" from\n# the pickup location to the dropoff location.\ndef add_travel_vector_features(df_2):\n    df_2['abs_diff_longitude'] = (df_2.dropoff_longitude - df_2.pickup_longitude).abs()\n    df_2['abs_diff_latitude'] = (df_2.dropoff_latitude - df_2.pickup_latitude).abs()\n\nadd_travel_vector_features(df_test)","d3200fcc":"plot = df_train.iloc[:2000].plot.scatter('abs_diff_longitude', 'abs_diff_latitude')","f1ac6efc":"plot = df_test.iloc[:2000].plot.scatter('abs_diff_longitude', 'abs_diff_latitude')","aed6c9eb":"print('Old size: %d' % len(df_train))\ndf_train_2 = df_train[(df_train.abs_diff_longitude < 0.25) & (df_train.abs_diff_latitude < 0.25)]\ndf_test_2 = df_test[(df_test.abs_diff_longitude < 0.25) & (df_test.abs_diff_latitude < 0.25)]\nprint('New size: %d' % len(df_train))","d9d75ff3":"df_test.head()","1724f73e":"df_train.shape","a50562af":"df_test.shape","5243855d":"plt.figure(figsize=(12,5))\nsns.kdeplot(df_train_2['fare_amount']).set_title(\"Distribution of Trip Fare\")","8d12ec75":"df_train_2=df_train_2.loc[df_train_2['fare_amount']>1]\ndf_train_2=df_train_2.loc[df_train_2['fare_amount']<75]\ndf_train_2.shape\n\n#other option\n#df_train = df_train[df_train.fare_amount > 0.0]","c86c6ce4":"df_train_2.head()","d454795b":"df_test_2.head()","029b977c":"df_test_2.shape","f061fc7b":"plot = df_train_2.iloc[:2000].plot.scatter('abs_diff_longitude', 'abs_diff_latitude')","db2c972d":"#calculate trip distance in miles\ndef distance(lat1, lat2, lon1,lon2):\n    p = 0.017453292519943295 # Pi\/180\n    a = 0.5 - np.cos((lat2 - lat1) * p)\/2 + np.cos(lat1 * p) * np.cos(lat2 * p) * (1 - np.cos((lon2 - lon1) * p)) \/ 2\n    return 0.6213712 * 12742 * np.arcsin(np.sqrt(a))","0cbba26b":"df_train_2['trip_distance']=df_train_2.apply(lambda row:distance(row['pickup_latitude'],row['dropoff_latitude'],row['pickup_longitude'],row['dropoff_longitude']),axis=1)\ndf_test_2['trip_distance']=df_test_2.apply(lambda row:distance(row['pickup_latitude'],row['dropoff_latitude'],row['pickup_longitude'],row['dropoff_longitude']),axis=1)","04bdd83f":"df_train_2.head()","defce3f1":"df_test_2.head()","323a44ca":"plot = df_train_2.iloc[:2000].plot.scatter('fare_amount', 'trip_distance')","7de2c3f7":"ax = sns.scatterplot(x=\"fare_amount\", y=\"trip_distance\", data=df_train_2)","f783c24f":"df_train_3=df_train_2.loc[df_train_2['trip_distance']>0]\ndf_test_3=df_test_2.loc[df_test_2['trip_distance']>0]\nax = sns.scatterplot(x=\"fare_amount\", y=\"trip_distance\",hue=\"passenger_count\", data=df_train_3)\ndf_train_3.describe()\n","84118ba6":"df_train_3.columns","7ca04fe5":"df_test_3.columns","304a73cd":"df_train_4 = df_train_3.drop(['key','pickup_datetime','pickup_day_of_week','pickup_date','pickup_year','abs_diff_longitude', 'abs_diff_latitude'], axis = 1)\ndf_test_4 = df_test_3.drop(['key','pickup_datetime','pickup_day_of_week','pickup_date','pickup_year','abs_diff_longitude', 'abs_diff_latitude'], axis = 1)","f08a9ee4":"df_train_4.columns","afaa2e24":"df_test_4.columns","9d5541ae":"x_train = df_train_4.iloc[:,df_train_4.columns!='fare_amount']\ny_train = df_train_4['fare_amount'].values\nx_test = df_test_4","fa21c773":"y_train.shape","1c3e8c1a":"x_train.info()","e9c0e30a":"x_test.info()","ee7e40ac":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators=10,random_state=0)\nrf.fit(x_train, y_train)\nrf_predict = rf.predict(x_test)\n","bce5aebd":"print(rf_predict)","c76c57de":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission.info()\nsubmission.head()","d691950e":"submission['fare_amount'] = rf_predict\n","efc99704":"submission.head()","2df9fc96":"submission.to_csv('submission_2.csv', index=False)\nsubmission.head(20)","b28c5df6":"Scoring time!","72be4842":"Convert Dates and Time Stamp","77b4a03b":"Data Types ","11ad3213":"Dataset is huge, so limiting rows input","92582427":"Fare Dist Scatterplot","143309bb":"One degree is about 69 miles, so lets just make this the NY area only so we dont have to worry about outliers.","aed29828":"Lets look at fare distribution","9bc36d14":"**Predictive Modelling Time!! **\n","7ec8c582":"Lets delete fares that are less than 0!","272027b7":"Dont know how many rows exactly, so good practice to load how many rows are first in dataset.","4fe17438":"Validate we have the right columns","8932917c":"Find NULLS","82320ac2":"There shouldnt be 0 distance and high fares, lets delete this data","2a8191b5":"Delete long distances\n"}}