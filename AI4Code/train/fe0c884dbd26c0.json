{"cell_type":{"4427bacf":"code","a5eb673e":"code","921f9a24":"code","6c121d17":"code","ce62b24e":"code","3758a159":"code","79e7fb3c":"code","bdfa9e9f":"code","b12d4bef":"code","b8697697":"code","27d76edc":"code","666e756f":"code","3f0f7f4f":"code","0bc0c5d5":"code","5e603483":"code","1f49ab4d":"code","3b8bb2ac":"code","ba71f062":"code","437fc94f":"code","cef8b223":"code","e00beb10":"code","b2ce1176":"code","b4f2cbcd":"code","8b3c6046":"code","c647793a":"code","87318880":"code","f8b2a36d":"code","b0885217":"code","0e88af69":"code","50ff41ab":"code","ba083391":"code","3d78a977":"code","9c390d07":"code","48a3b74c":"code","f63dde32":"code","fc248137":"code","edfd1e35":"code","6f54f141":"code","b7c57831":"code","ca262558":"code","8db3cbd8":"code","a2a865e6":"code","af9421a8":"code","4f8777f4":"code","b57a58e7":"code","e0dadd95":"code","72b7ee00":"code","b2d8592b":"code","a6e4df32":"code","cc1fcae6":"code","0f17857e":"code","d3bc18b6":"code","1cbef9ee":"code","f66163bc":"code","c89a7669":"code","01fef24a":"code","e6bdec4b":"code","5a067f77":"code","bdf7190c":"code","c3508052":"code","15f3e499":"code","2655b300":"code","a8688251":"code","a553e8aa":"code","1efe8329":"code","4a3de49b":"code","c86b4d22":"code","bb8f4e9f":"code","f59f46a3":"code","7ae9a6bf":"code","e96da641":"code","5c1731c2":"code","9423fa57":"code","cf2a7c34":"code","6b74ecbd":"code","b25ac883":"code","6066f02f":"code","84d0264f":"code","cabd20c2":"code","66b3d659":"code","b3757cab":"markdown","dc14a8a3":"markdown","277682a7":"markdown","a564cd41":"markdown","12892057":"markdown","97ba96b2":"markdown","788e083f":"markdown","4fbf54a5":"markdown","117f6ffa":"markdown","4b290e6c":"markdown","69c6f219":"markdown","7402c8a6":"markdown","490a65d7":"markdown","4b6015cd":"markdown"},"source":{"4427bacf":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt \nfrom matplotlib.colors import ListedColormap\nimport seaborn as sns \n\nimport sklearn\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n","a5eb673e":"dataset = pd.read_csv('\/kaggle\/input\/social-network-ads\/Social_Network_Ads.csv')","921f9a24":"type(dataset)","6c121d17":"dataset.shape","ce62b24e":"dataset.dtypes","3758a159":"dataset.head()","79e7fb3c":"dataset.tail()","bdfa9e9f":"dataset.info()","b12d4bef":"dataset.describe()","b8697697":"dataset.isnull().sum()","27d76edc":"sns.catplot(x=\"Purchased\", y=\"Age\", data=dataset)\nplt.show()","666e756f":"sns.catplot(x=\"Purchased\", y=\"Age\", hue=\"Gender\",data=dataset )\nplt.show()","3f0f7f4f":"sns.stripplot(x=dataset[\"Purchased\"])\nplt.show()","0bc0c5d5":"sns.stripplot(y=dataset[\"Age\"])\nplt.show()","5e603483":"sns.stripplot(x=\"Purchased\", y=\"Age\", data=dataset)\nplt.show()","1f49ab4d":"sns.stripplot(x=\"Purchased\", y=\"Age\", hue=\"Gender\",data=dataset )\nplt.show()","3b8bb2ac":"sns.swarmplot(x=dataset[\"Purchased\"])\nplt.show()","ba71f062":"sns.swarmplot(y=dataset[\"Age\"])\nplt.show()","437fc94f":"sns.swarmplot(x=\"Purchased\", y=\"Age\", data=dataset)\nplt.show()","cef8b223":"sns.swarmplot(x=\"Purchased\", y=\"Age\", hue=\"Gender\",data=dataset )\nplt.show()","e00beb10":"sns.boxplot(x=dataset[\"Purchased\"])\nplt.show()","b2ce1176":"sns.boxplot(y=dataset[\"Age\"])\nplt.show()","b4f2cbcd":"sns.boxplot(x=\"Purchased\", y=\"Age\", data=dataset)\nplt.show()\n","8b3c6046":"sns.boxenplot(x=\"Purchased\", y=\"Age\", hue=\"Gender\",data=dataset )\nplt.show()","c647793a":"sns.violinplot(x=dataset[\"Purchased\"])\nplt.show()","87318880":"sns.violinplot(y=dataset[\"Age\"])\nplt.show()","f8b2a36d":"sns.violinplot(x=\"Purchased\", y=\"Age\", data=dataset)\nplt.show()","b0885217":"sns.violinplot(x=\"Purchased\", y=\"Age\", hue=\"Gender\",data=dataset )\nplt.show()","0e88af69":"sns.boxenplot(x=dataset[\"Purchased\"])\nplt.show()","50ff41ab":"sns.boxenplot(y=dataset[\"Age\"])\nplt.show()","ba083391":"sns.boxenplot(x=\"Purchased\", y=\"Age\",data=dataset )\nplt.show()","3d78a977":"sns.boxenplot(x=\"Purchased\", y=\"Age\", hue=\"Gender\",data=dataset )\nplt.show()","9c390d07":"sns.pointplot(x=dataset[\"Purchased\"])\nplt.show()","48a3b74c":"sns.pointplot(y=dataset[\"Age\"])\nplt.show()","f63dde32":"sns.pointplot(x=\"Purchased\", y=\"Age\", data=dataset)\nplt.show()","fc248137":"sns.pointplot(x=\"Purchased\", y=\"Age\",hue='Gender', data=dataset)\nplt.show()","edfd1e35":"sns.barplot(x=dataset[\"Purchased\"])\nplt.show()","6f54f141":"sns.barplot(y=dataset[\"Purchased\"])\nplt.show()","b7c57831":"sns.barplot(x=\"Purchased\", y=\"Age\", data=dataset)\nplt.show()","ca262558":"sns.barplot(x=\"Purchased\", y=\"Age\",hue='Gender', data=dataset)\nplt.show()","8db3cbd8":"sns.countplot(x=dataset[\"Age\"])\nplt.show()","a2a865e6":"sns.countplot(y=dataset[\"Purchased\"])\nplt.show()","af9421a8":"sns.countplot(x=\"Purchased\",data=dataset)\nplt.show()","4f8777f4":"sns.countplot(y=\"Age\",data=dataset)\nplt.show()","b57a58e7":"sns.countplot(x= 'Purchased', hue= 'Gender', data=dataset)\nplt.show()","e0dadd95":"sns.countplot(y= 'Age', hue= 'Gender', data=dataset)\nplt.show()","72b7ee00":"dataset['Age'].plot.hist()\nplt.show()","b2d8592b":"sns.pairplot(dataset, hue = 'Gender')\nplt.show()","a6e4df32":"X = dataset.iloc[:, 2:-1].values   # features\ny = dataset.iloc[:, -1].values     # targe","cc1fcae6":"X.shape","0f17857e":"y.shape","d3bc18b6":"# from sklearn.model_selection import train_test_split","1cbef9ee":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.3, random_state =0)","f66163bc":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","c89a7669":"print(X_train[:5])","01fef24a":"print(y_train)","e6bdec4b":"print(X_test[:5])","5a067f77":"print(y_test)","bdf7190c":"from sklearn.preprocessing import StandardScaler","c3508052":"StandardScaler()","15f3e499":"sc = StandardScaler()","2655b300":"X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","a8688251":"print(X_train[:5])","a553e8aa":"print(X_test[:5])","1efe8329":"# from sklearn.linear_model import LinearRegression","4a3de49b":"model = LogisticRegression()","c86b4d22":"model.fit(X_train, y_train)","bb8f4e9f":"y_pred = model.predict(X_test)","f59f46a3":"print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1))","7ae9a6bf":"# single prediction \n# -----------------\n\n\nprint(model.predict(sc.transform([[30, 87000]])))","e96da641":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report","5c1731c2":"print(accuracy_score(y_test, y_pred))","9423fa57":"cm = confusion_matrix(y_test, y_pred)\nprint(cm)","cf2a7c34":"# Visualizing Confusion_matrix by using heartmaop","6b74ecbd":"# create heatmap\n# --------------\n\nsns.heatmap(cm, annot=True, square=True, fmt='g', cmap=\"Blues\")\nplt.title('Confusion Matri ')\nplt.xlabel('Predicted Label')\nplt.ylabel('Actual Label')\nplt.show()","b25ac883":"print(classification_report(y_test, y_pred))","6066f02f":"# from matplotlib.colors import ListedColormap","84d0264f":"X_set, y_set = sc.inverse_transform(X_train), y_train\n\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\n\nplt.contourf(X1, X2, model.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('green', 'yellow')))\n\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\n\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'blue'))(i), label = j)\n\nplt.title('Logistic Regression (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","cabd20c2":"# from matplotlib.colors import ListedColormap","66b3d659":"X_set, y_set = sc.inverse_transform(X_test), y_test\n\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),\n                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))\n\nplt.contourf(X1, X2, model.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('green', 'yellow')))\n\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\n\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'blue'))(i), label = j)\n\nplt.title('Logistic Regression (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","b3757cab":"##### A confusion matrix is a table that is used to evaluate the performance of a classification model. You can also visualize the performance of an algorithm. The fundamental of a confusion matrix is the number of correct and incorrect predictions are summed up class-wise.","dc14a8a3":"#### Logistic Regression produces results in a binary format which is used to predict the outcome of a categorical dependent variable. So the outcome should be discrete\/categorical such as: 0 or 1, Yes or No, True or False, High or Low.","277682a7":"#### 5- Model Development and Prediction","a564cd41":"#### 3- EDA","12892057":"#### 8 - Visualising the Training set results","97ba96b2":"### Logistic Regression - Social Network Ads Dataset","788e083f":"#### 4- Separating data inti Training and Testing ","4fbf54a5":"#### 1- Importing Liberaries","117f6ffa":"## Machine Learning Algorithm - Classification","4b290e6c":"#### 2 - Importing the dataset","69c6f219":"#### 9 - Visualising the Test set results","7402c8a6":"##### Here, you can see the confusion matrix in the form of the array object. The dimension of this matrix is 2*2 because this model is binary classification. You have two classes 0 and 1. Diagonal values represent accurate predictions, while non-diagonal elements are inaccurate predictions. In the output, 74 and 30 are actual predictions, and 5 and 11 are incorrect predictions.","490a65d7":"#### 5 - Feature Scaling\u00b6","4b6015cd":"#### 7- Model Evaluation"}}