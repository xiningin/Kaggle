{"cell_type":{"b9ef7ad3":"code","40396085":"code","db0300d3":"code","655bfadb":"code","72acfd91":"code","ef935398":"markdown","48922e19":"markdown","43ef0e5a":"markdown","b01e3cdb":"markdown"},"source":{"b9ef7ad3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40396085":"train = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/liverpool-ion-switching\/sample_submission.csv')","db0300d3":"print(train.head(2), '\\n', test.head(2), '\\n', submission.head(2))","655bfadb":"import math\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.linear_model import LinearRegression\n\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\npd.set_option(\"display.precision\", 8)\n\nDIR_INPUT = '\/kaggle\/input\/liverpool-ion-switching'","72acfd91":"print(train.shape, test.shape, submission.shape)\nprint(train.columns,'\\n', test.columns,'\\n', submission.columns)","ef935398":"#### Columns in Train set\n* time<br>\ntotal 5,000,000 rows(time points): 50 seconds long 10kHz samples (500,000 rows per batch). So there are 10 batches. Data is continuous in each batch but discontinuous between batches.\n* signal<br>\nelectrophysiological signal data\n* open channels<br>\n11 possible values (0~10)","48922e19":"# ION Switching\n### Identify the # of channels open at each time point\n#### Competition Intro\n> Many diseases, including cancer, are believed to have a *contributing factor in common.* <br>\n> **Ion channels** are pore-forming proteins present in animals and plants. They encode learning and memory, help fight infections, enable pain signals, and stimulate muscle contraction. If scientists  ion ccould better studyhannels, which may be possible with the aid of machine learning, it could have a far-reaching impact. <br>\n> When ion channels open, they** pass electric currents**. ... Scientists hope that technology could enable **rapid automatic detection of ion channel current events in raw data.** <br>\n> ... use **ion channel data** to better model **automatic identification** methods. If successful, you\u2019ll be able to **detect individual ion channel events in noisy raw signals.** The data is simulated and injected with real world noise to emulate what scientists observe in laboratory experiments.\n\n#### Evaluation\n- [macro F1 score](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.f1_score.html)\n- In \"macro\" F1 a separate F1 score is calculated for each open_channels value and then averaged.\n- Submission: **For each time value** in the test set, you must **predict open_channels**. The files must have a header and should look like the following:\n","43ef0e5a":"# EDA\n### Reference: [EDA-Ion Switching by Peter](https:\/\/www.kaggle.com\/pestipeti\/eda-ion-switching)","b01e3cdb":"### Data Description\n- will be predicting the number of open_channels present, based on **electrophysiological signal data**\n- While the time series appears continuous, the data is **from discrete batches of 50 seconds long 10 kHz samples** (500,000 rows per batch). In other words, the *data from 0.0001 - 50.0000 is a different batch than 50.0001 - 100.0000*, and *thus discontinuous between 50.0000 and 50.0001*.\n- [Deep-Channel uses deep neural networks to detect single-molecule events from patch-clamp data](https:\/\/www.nature.com\/articles\/s42003-019-0729-3)"}}