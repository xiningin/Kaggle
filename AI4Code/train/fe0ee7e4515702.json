{"cell_type":{"3879a5e9":"code","b4f99efd":"code","ed67bc3b":"code","c12fb738":"code","ba747fea":"code","19aaf789":"code","9993074e":"code","7ae988b1":"code","633a751d":"code","42fdb2dc":"code","2c526f53":"code","d3e68cef":"code","5f4a8008":"code","27284520":"code","7570dd7b":"code","9972031b":"code","8f9e2827":"code","2383562d":"markdown"},"source":{"3879a5e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4f99efd":"import matplotlib.pyplot as plt\nfrom matplotlib import style\n\nstyle.use('fivethirtyeight')\n\nfont = {'family':'sans-serif',\n        'weight':'bold',\n        'size':18}\nplt.rc('font', **font)\nplt.rcParams['figure.figsize'] = (15, 8)","ed67bc3b":"aapl = pd.read_csv('\/kaggle\/input\/stock-time-series-20050101-to-20171231\/AAPL_2006-01-01_to_2018-01-01.csv', parse_dates = ['Date'])","c12fb738":"aapl.head()","ba747fea":"aapl.Date","19aaf789":"aapl.isna().sum()","9993074e":"(aapl.Date - aapl.Date[0])","7ae988b1":"df = aapl.copy()\ndf.set_index('Date', inplace = True)\n#reindex = df.reindex(dates)\ndf['Volume'] = df['Volume'] \/ 10 ** 7\nroll_mean = df.Volume.rolling(100, min_periods=1).mean()\newma = df.Volume.ewm(100).mean()","633a751d":"roll_mean","42fdb2dc":"ewma","2c526f53":"plt.scatter(df.index, df.Volume, color = 'grey')","d3e68cef":"plt.scatter(df.index, df.Volume, color = 'grey')\nplt.plot(roll_mean, color = 'blue')\nplt.xlabel('Years')","5f4a8008":"plt.scatter(df.index, df.Volume, color = 'grey')\nplt.plot(ewma, color = 'blue')","27284520":"def SerialCorrelation(series, lag = 1):\n    xs = series[lag:]\n    ys = series.shift(lag)[lag:]\n    corr = correlation(xs, ys)\n    return corr\n\ndef correlation(x, y):\n    return covariance(x, y) \/ (np.std(x) * np.std(y))\n\ndef covariance(x, y):\n    xbar = np.mean(x)\n    ybar = np.mean(y)\n    n = len(x)\n    \n    xs = [x_i - xbar for x_i in x]\n    ys = [y_i - ybar for y_i in y]\n    \n    return np.dot(xs, ys) \/ n","7570dd7b":"lags = [1, 7, 30, 365]\nitems = ['day', 'week', 'month', 'year']\n\nfor i, j in zip(lags, items):\n    corr = SerialCorrelation(df['Volume'], lag = i)\n    print('{}: {}'.format(j, corr))","9972031b":"lags = range(1, 41)\ncorr1 = []\n#corr2 = []\n\nfor i in lags:\n    cor1 = SerialCorrelation(df['Volume'], lag = i)\n    #cor2 = SerialCorrelation(df['Open'], lag = i)\n    corr1.append(cor1)\n    #corr2.append(cor2)\n    \nplt.plot(lags, corr1, label = 'Volume')\n#plt.plot(lags, corr2, label = 'Open')\nplt.legend()","8f9e2827":"from pandas.plotting import autocorrelation_plot\n\nautocorrelation_plot(df['Volume'])","2383562d":"# Serial Correlation"}}