{"cell_type":{"bafed5c2":"code","ed8ddded":"code","1d51632e":"code","964c49c4":"code","57a35e9f":"code","9683955a":"code","61d9e4b5":"code","7fe26acb":"code","3e10c02c":"code","51760657":"code","e31b01f5":"code","b1a78350":"code","dd2b36d5":"code","0963cdfd":"code","5b114750":"code","98cda483":"code","2af7081e":"code","c4ec58bc":"code","cc256579":"code","cf40f0ad":"code","8e5083b3":"markdown","82b1c57d":"markdown","e2526368":"markdown","445fbea9":"markdown","50c90f7f":"markdown","12f59a97":"markdown","e87caf23":"markdown","8ebc40f2":"markdown","72b464c5":"markdown","3ecf1530":"markdown"},"source":{"bafed5c2":"import numpy as np\nimport pandas as pd\nimport datetime","ed8ddded":"def parser(x):\n    return datetime.datetime.strptime('190'+x, '%Y-%m')\n\n# set \"squeeze=True\" to return a Series instead of a DataFrame\nseries = pd.read_csv('..\/input\/shampoo.csv', parse_dates=[0], date_parser=parser, index_col=0, squeeze=True)","1d51632e":"series","964c49c4":"series.plot()","57a35e9f":"def difference(dataset, interval=1):\n    diff = list()\n    for i in range(interval, len(dataset)):\n        value = dataset[i] - dataset[i - interval]\n        diff.append(value)\n    return pd.Series(diff)\n\nraw_values = series.values\ndiff_values = difference(raw_values, 1)","9683955a":"diff_values","61d9e4b5":"def timeseries_to_supervised(data, lag=1):\n    df = pd.DataFrame(data)\n    columns = [df.shift(i) for i in range(1, lag+1)]\n    columns.append(df)\n    df = pd.concat(columns, axis=1)\n    df.fillna(0, inplace=True)\n    return df\n\nsupervised = timeseries_to_supervised(diff_values, 1)","7fe26acb":"supervised","3e10c02c":"supervised_values = supervised.values\ntrain, test = supervised_values[0:-12], supervised_values[-12:]","51760657":"train","e31b01f5":"test","b1a78350":"from sklearn.preprocessing import MinMaxScaler\n\ndef scale(train, test):\n    # fit scaler\n    scaler = MinMaxScaler(feature_range=(-1, 1))\n    scaler = scaler.fit(train)\n    # transform train\n    #train = train.reshape(train.shape[0], train.shape[1])\n    train_scaled = scaler.transform(train)\n    # transform test\n    #test = test.reshape(test.shape[0], test.shape[1])\n    test_scaled = scaler.transform(test)\n    return scaler, train_scaled, test_scaled\n\nscaler, train_scaled, test_scaled = scale(train, test)","dd2b36d5":"train_scaled","0963cdfd":"test_scaled","5b114750":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM\n\ndef fit_lstm(train, batch_size, nb_epoch, neurons):\n    X, y = train[:, 0:-1], train[:, -1]\n    X = X.reshape(X.shape[0], 1, X.shape[1])  # i.e. (n_sample, n_time_step, n_feature)\n    model = Sequential()\n    # State in the LSTM layer between batches is cleared by default, therefore we must make the LSTM stateful. \n    model.add(LSTM(neurons, batch_input_shape=(batch_size, X.shape[1], X.shape[2]), stateful=True))\n    # Add a single neuron in the output layer with a linear activation to predict the sales at the next time step.\n    model.add(Dense(1))\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    for i in range(nb_epoch):\n        # By default, the samples within an epoch are shuffled prior to being exposed to the network.\n        # Since we want the network to build up state as it learns across the sequence of observations,\n        # we can disable the shuffling of samples by setting \u201cshuffle\u201d to \u201cFalse\u201c.\n        model.fit(X, y, epochs=1, batch_size=batch_size, verbose=0, shuffle=False)\n        # Reset the internal state at the end of the training epoch, ready for the next training iteration.\n        model.reset_states()\n    return model","98cda483":"# The batch_size must be set to 1, because it must be a factor of the size of the training and test datasets.\nlstm_model = fit_lstm(train_scaled, batch_size=1, nb_epoch=3000, neurons=4)","2af7081e":"train_reshaped = train_scaled[:, 0].reshape(len(train_scaled), 1, 1)\n# The batch_size must be set to 1 because we are interested in making one-step forecasts on the test data.\n# Seed the initial state by making a prediction on all samples in the training dataset. In theory, the internal state should be set up ready to forecast the next time step.\nlstm_model.predict(train_reshaped, batch_size=1)","c4ec58bc":"def forecast_lstm(model, batch_size, X):\n    X = X.reshape(1, 1, len(X))  # len(X): n_feature\n    yhat = model.predict(X, batch_size=batch_size)\n    return yhat[0,0]\n\ndef invert_scale(scaler, X, value):\n    new_row = [x for x in X] + [value]\n    array = np.array(new_row)\n    array = array.reshape(1, len(array))\n    inverted = scaler.inverse_transform(array)\n    return inverted[0, -1]\n\ndef inverse_difference(history, yhat, interval=1):\n    return yhat + history[-interval]\n\npredictions = list()\nfor i in range(len(test_scaled)):\n    # make one-step forecast\n    X, y = test_scaled[i, 0:-1], test_scaled[i, -1]\n    yhat = forecast_lstm(lstm_model, 1, X)\n    # invert scaling\n    yhat = invert_scale(scaler, X, yhat)\n    # invert differencing\n    yhat = inverse_difference(raw_values, yhat, len(test_scaled)+1-i)\n    # store forecast\n    predictions.append(yhat)\n    expected = raw_values[len(train) + i + 1]\n    print('Month=%d, Predicted=%f, Expected=%f' % (i+1, yhat, expected))","cc256579":"from math import sqrt\nfrom sklearn.metrics import mean_squared_error\n\nrmse = sqrt(mean_squared_error(raw_values[-12:], predictions))\nprint('Test RMSE: %.3f' % rmse)","cf40f0ad":"from matplotlib import pyplot\n\npyplot.plot(raw_values[-12:])\npyplot.plot(predictions)","8e5083b3":"# Load the data","82b1c57d":"# Split data into train and test-sets","e2526368":"# Fit the model","445fbea9":"# Predict","50c90f7f":"# Transform data to be supervised learning","12f59a97":"# Transform the scale of the data","e87caf23":"# Build LSTM network","8ebc40f2":"Reference: [Time Series Forecasting with the Long Short-Term Memory Network in Python](http:\/\/machinelearningmastery.com\/time-series-forecasting-long-short-term-memory-network-python\/)","72b464c5":"# Transform data to be stationary","3ecf1530":"# Evaluate"}}