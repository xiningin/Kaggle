{"cell_type":{"fa2755de":"code","6ccb3121":"code","28d568b9":"code","f30613eb":"code","32acd0d2":"code","1462f9a3":"code","d10fe449":"code","fcddc4d4":"code","7db306d0":"code","51077162":"code","dcd68f9b":"code","06f8c87a":"code","db835693":"code","c3b0c384":"code","3ea79708":"code","ad97e895":"code","e9ac0bbf":"code","fda5d9d1":"code","d249c0a0":"code","680a8c06":"code","7e1e89ed":"code","b73b17fa":"code","952a82f6":"code","e5ced2c7":"code","781e2ba7":"code","dd5b82d9":"code","87645387":"code","75433035":"code","3abba589":"code","07a405df":"code","99e9bc58":"code","8c0d167f":"code","93dc8ea2":"code","7097dbbb":"code","b6568cc4":"code","60b9e3c9":"code","efacaf9a":"code","d3731729":"code","0a76c32e":"code","18a471d9":"markdown","457e1971":"markdown","48396116":"markdown","971a19ce":"markdown","cbb82e52":"markdown","4edc4f38":"markdown","84b822a6":"markdown","f8cbbd15":"markdown","63fa03e8":"markdown","96f94c29":"markdown","2a7631e2":"markdown","541cc525":"markdown","4ba346c7":"markdown","105a5e89":"markdown","ba458a8b":"markdown","da03e76b":"markdown","b58db9d2":"markdown","a5b61d2d":"markdown","d2d4215d":"markdown","8a0ffa9a":"markdown","e503a486":"markdown","18b7fa75":"markdown","1eaafa08":"markdown","b5224743":"markdown","2a721e5f":"markdown","798f9b58":"markdown","d5e82461":"markdown","931fcc6e":"markdown","1d6535ee":"markdown"},"source":{"fa2755de":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6ccb3121":"!pip install xlrd\n","28d568b9":"!pip install openpyxl","f30613eb":"import numpy as np\nimport pandas as pd\nimport datetime as dt","32acd0d2":"\ndf_ = pd.read_excel(\"..\/input\/uci-online-retail-ii-data-set\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\" ) \ndf = df_.copy()\ndf.head()","1462f9a3":"df.info()","d10fe449":"df.isnull().sum()","fcddc4d4":"df[\"StockCode\"].nunique()","7db306d0":"df[\"StockCode\"].value_counts().head()","51077162":"df.groupby(\"StockCode\").agg({\"Quantity\": \"sum\"}).sort_values(\"Quantity\", ascending=False).head","dcd68f9b":"df[\"Invoice\"].nunique()","06f8c87a":"df.dropna(inplace=True)","db835693":"df.isnull().sum()","c3b0c384":"df=df[~df[\"Invoice\"].str.contains(\"C\", na=False)]","3ea79708":"df= df[(df[\"Quantity\"]>0)]","ad97e895":"df.describe().T","e9ac0bbf":"df[\"TotalPrice\"]=df[\"Quantity\"]*df[\"Price\"]","fda5d9d1":"df.head()","d249c0a0":"df[\"InvoiceDate\"].max()","680a8c06":"today_date = dt.datetime(2011, 12, 11)","7e1e89ed":"rfm = df.groupby('Customer ID').agg({'InvoiceDate': lambda date: (today_date - date.max()).days,\n                                     'Invoice': lambda num: num.nunique(),\n                                     'TotalPrice': lambda TotalPrice: TotalPrice.sum()})","b73b17fa":"rfm.columns = ['Recency', 'Frequency', 'Monetary']","952a82f6":"rfm = rfm[(rfm[\"Monetary\"]) > 0 & (rfm[\"Frequency\"] > 0)]","e5ced2c7":"rfm","781e2ba7":"rfm[\"RecencyScore\"] = pd.qcut(rfm['Recency'], 5, labels=[5, 4, 3, 2, 1])","dd5b82d9":"rfm[\"FrequencyScore\"] = pd.qcut(rfm['Frequency'].rank(method=\"first\"), 5, labels=[1, 2, 3, 4, 5])","87645387":"rfm[\"MonetaryScore\"] = pd.qcut(rfm['Monetary'], 5, labels=[1, 2, 3, 4, 5])","75433035":"rfm[\"RFM_SCORE\"] = (rfm['RecencyScore'].astype(str) +\n                    rfm['FrequencyScore'].astype(str) +\n                    rfm['MonetaryScore'].astype(str))","3abba589":"rfm","07a405df":"seg_map = {\n    r'[1-2][1-2]': 'Hibernating',\n    r'[1-2][3-4]': 'At_Risk',\n    r'[1-2]5': 'Cant_Loose',\n    r'3[1-2]': 'About_to_Sleep',\n    r'33': 'Need_Attention',\n    r'[3-4][4-5]': 'Loyal_Customers',\n    r'41': 'Promising',\n    r'51': 'New_Customers',\n    r'[4-5][2-3]': 'Potential_Loyalists',\n    r'5[4-5]': 'Champions'\n}","99e9bc58":"rfm['Segment'] = rfm['RecencyScore'].astype(str) + rfm['FrequencyScore'].astype(str)","8c0d167f":"rfm['Segment'] = rfm['Segment'].replace(seg_map, regex=True)","93dc8ea2":"rfm","7097dbbb":"rfm[[\"Segment\", \"Recency\", \"Frequency\", \"Monetary\"]].groupby(\"Segment\").agg([\"mean\", \"count\"])","b6568cc4":"rfm[[\"Segment\", \"Recency\", \"Frequency\", \"Monetary\"]].groupby(\"Segment\").agg([\"mean\", \"count\",\n                                                                             \"min\", \"median\", \"max\"])","60b9e3c9":"#new_df = pd.DataFrame()","efacaf9a":"#new_df[\"Loyal_Customers\"] = rfm[rfm[\"Segment\"] == \"Loyal_Customers\"].index","d3731729":"#new_df[\"Loyal_Customers\"] = rfm[rfm[\"Loyal_customers\"].astype(int)","0a76c32e":"#new_df.to_excel(\"Loyal_Customers.xlsx\")","18a471d9":"Invocies starting with \"C\" are either cancelled or returned goods so we are dropping out the item from the data set.","457e1971":"# Data Preprocessing","48396116":"After calculating  RFM scores, we  combine scores as a new column","971a19ce":"Total number of unique items","cbb82e52":"We also clear any items Quantity less than 1","4edc4f38":"We are forming a Data Frame for Customer ID withthe variables of InvoiceDate(will be changed to Rececny in next step), Invoice number(will be changed to \"Frequency\") and Total sum of transactions(will be changed to \"Monetary\")","84b822a6":"Firs step is importing needed libraries: numpy, pandas and datetime\n","f8cbbd15":"Total quantity for each item","63fa03e8":"## Recency\n","96f94c29":"After getting familiar with the dataset, we are preparing data for analysis. For this case we are going to drop null values, clear out thereturned items. For this analysis outliers are neglected so we are not going to do any operation about outliers. ","2a7631e2":"We can expoert desired segments and customer number as csv w\u0131th following codes","541cc525":"General statistics for each segment","4ba346c7":"After loading data set, we are trying to get general information about our dataset.","105a5e89":"To calculate Recency value, we nned last transaction date. \nWe fix the analysis date 2 days after the last transaction date to get resanable recency values. ","ba458a8b":"# RFM","da03e76b":"We create segment table.","b58db9d2":"We reassing the column names in previous cell. \nRecency: We subtracted today's date from the last transation date to calculate recency\nFrequency: We counted invoiced per each customer. Since each invoice refers to one transaction we can use them as frequency.\nMonetary: We sum up all transations per each customer as their monetary value.","a5b61d2d":"Dropping out null values","d2d4215d":"In order to import excel files xlrd and opepyxl shoud be installed. By using pip indtall you can isntall them ","8a0ffa9a":"We are startig with addin TotalPrice column","e503a486":"We add a new column to rfm dataframe as \"Segment\"","18b7fa75":"To avoid miscalculation we run a acheck querry to eleminate 0 values in Monetary and Frequency","1eaafa08":"We divide all the score into 5 categories with qcut function where 5 is the best and 1 is the worst.\nFor Frequency most recent transaction is the best.","b5224743":"Then loading the dataset.","2a721e5f":"Items ordered most","798f9b58":"Total number of invoices","d5e82461":"Last transaction date","931fcc6e":"Total Number of missing values","1d6535ee":"A UK based e-commerce company want to divide their customer into egments and develop marketing strategies according to this segmentation results. \nData Set Story:\n\nhttps:\/\/archive.ics.uci.edu\/ml\/datasets\/Online+Retail+II \n\nThis Online Retail II data set contains all the transactions occurring for a UK-based and registered, non-store online retail between 01\/12\/2009 and 09\/12\/2011.\n\nItem listed are souvenirs and gift item.\n\nMajority of the customers  are wholesale traders.\n\nAttribute Information:\n\n    \u2022 InvoiceNo: Invoice number. Nominal. A 6-digit integral number uniquely assigned to each transaction. If this code starts with the letter 'c', it indicates a cancellation.\\n\n    \u2022 StockCode: Product (item) code. Nominal. A 5-digit integral number uniquely assigned to each product.\\n\n    \u2022 Description: Item name and description. Nominal.\\n\n    \u2022 Quantity: The quantities of each  item per transaction. Numeric.\\n\n    \u2022 InvoiceDate: Invoice date and time. Numeric.\\n\n    \u2022 UnitPrice: Unit price. Numeric. Product price per unit (\u00a3).\\n\n    \u2022 CustomerID: Customer number. Nominal. A 5-digit  number uniquely assigned to each customer.\\n\n    \u2022 Country: Country name. Nominal. The name of the country where a customer resides."}}