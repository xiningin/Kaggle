{"cell_type":{"1e0a4c29":"code","b2b1692e":"code","58a6cdd9":"code","daf1f6ad":"code","1c66b03e":"code","ef357663":"code","caec6011":"code","966af40a":"code","3109e92c":"code","581fc370":"code","7654109f":"code","a9461cd7":"code","baac2903":"code","7bc1382e":"code","87eec3fd":"code","036ac427":"code","7dbfe92b":"code","73788b3c":"code","ad80f237":"code","3ac7f7a0":"code","e27350e5":"code","7ba765bd":"code","03c35e72":"code","e0799bfb":"code","6bc2e49f":"code","ea3e0b1e":"code","58d25786":"code","b7583c8a":"code","a0ed3949":"code","47349c0f":"code","bc14ea42":"code","6b030f00":"code","12f4c265":"code","dd4fabc5":"code","9b4906f1":"code","bd069db2":"code","ab4c2961":"code","a1ba33f5":"code","0725f0d7":"code","bb2d589d":"code","3c93c288":"code","58bf6bd1":"code","8dd05e23":"code","2e277bdb":"code","25279b35":"code","e915fccd":"code","7c6e1c63":"code","44340661":"code","cb6a779f":"code","441d56ea":"code","106bae08":"code","40af7656":"code","8508d78d":"code","0d2afbf5":"code","32db5c92":"code","04d448fb":"code","2cedb699":"code","02dd834a":"code","4a0c6e90":"code","90f636e9":"code","f0ce841a":"code","80aadf8f":"code","c696e9a8":"code","7f95dfd6":"code","08f8125d":"code","82936a33":"code","c1ffbe34":"code","31709953":"code","90bde528":"code","625b1475":"code","301e9b48":"code","4a03b454":"code","c9b718ca":"code","1951fd4f":"code","2a0a98ec":"code","f6a100eb":"code","d8ac2333":"code","ef869eab":"code","f4874a77":"code","fccb4f09":"code","9ccbc1b0":"code","4ae45d50":"code","e333dc61":"code","61605963":"code","fd44b12a":"code","b965127a":"code","0c048b2d":"code","6220701d":"code","6692a5f6":"code","86ac428e":"code","5defb2bc":"markdown","7be79266":"markdown","1bb5e699":"markdown","a1062b41":"markdown","a069ce36":"markdown","af01c729":"markdown","8c71ddc9":"markdown","1e5a8a78":"markdown","a67d01be":"markdown","f703c303":"markdown","567e86f1":"markdown","5a5e2b1d":"markdown","11789a59":"markdown","7e965e87":"markdown","5fe6ac50":"markdown","26b45a60":"markdown","a81b9f2a":"markdown","1ab369d7":"markdown","9e44cd14":"markdown","46843883":"markdown","436d32aa":"markdown","584802ea":"markdown","16c8dd87":"markdown","430f9c9e":"markdown","c2759528":"markdown","5e7b5c75":"markdown","ebce6239":"markdown","bd022712":"markdown","aa48cfab":"markdown","5cf0723d":"markdown","597b4535":"markdown","958e03de":"markdown","653c1612":"markdown","6bcd9774":"markdown","44773e59":"markdown","4f20841a":"markdown","95168830":"markdown","0201b502":"markdown","fdfadfb3":"markdown","c60c7a40":"markdown"},"source":{"1e0a4c29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2b1692e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings   # remove all warnings from the output\nwarnings.filterwarnings(\"ignore\")\npd.set_option(\"display.max_columns\", 500)  ## this will display all the columns in the output of .csv file\npd.set_option(\"display.max_rows\", 500)","58a6cdd9":"def null(df, feature, plot=False):\n    t = df[feature].isna().mean() * 100\n    print(f'% of null --> {t}')\n    if plot:\n        sns.countplot(dataset[feature], palette='cool')","daf1f6ad":"train_path = '..\/input\/house-prices-advanced-regression-techniques\/train.csv'\ntest_path = \"..\/input\/house-prices-advanced-regression-techniques\/test.csv\"","1c66b03e":"train_data = pd.read_csv(train_path)\ntrain_data.head()","ef357663":"train_data.info()","caec6011":"dataset = train_data.copy()  # copying the data, so that if bymistakely we did something wrong which cannot be revert,\n                             # then we can simply run this cell and we get back our origional data.\ndataset.tail()","966af40a":"dataset.isnull().sum()","3109e92c":"null_feat = [i for i in dataset.columns if dataset[i].isnull().sum() != 0]\nnull_feat","581fc370":"for i in null_feat:\n    print(f\"{i} --> {dataset[i].unique()}\")","7654109f":"dataset['LotFrontage'].fillna(dataset['LotFrontage'].mean(), inplace=True)\ndataset['LotFrontage'].isnull().sum()","a9461cd7":"dataset['Alley'].value_counts()","baac2903":"null(dataset, 'Alley', True) ## --> 93.7671% are missing.","7bc1382e":"dataset.drop('Alley', axis=1, inplace = True)","87eec3fd":"null(dataset, 'MasVnrType', True)","036ac427":"dataset['MasVnrType'].fillna('None', inplace=True)","7dbfe92b":"dataset['MasVnrArea'].unique()","73788b3c":"null(dataset, 'MasVnrArea')","ad80f237":"dataset['MasVnrArea'].fillna(dataset['MasVnrArea'].mean(), inplace=True)","3ac7f7a0":"null(dataset, 'BsmtQual', True)","e27350e5":"dataset['BsmtQual'].fillna('TA', inplace=True)","7ba765bd":"null(dataset, 'BsmtCond', True)","03c35e72":"dataset['BsmtCond'].fillna('TA', inplace=True)","e0799bfb":"null_feat","6bc2e49f":"null(dataset, 'BsmtExposure', True)","ea3e0b1e":"dataset['BsmtExposure'].fillna('No', inplace=True)","58d25786":"null(dataset, 'BsmtFinType1', True)","b7583c8a":"dataset['BsmtFinType1'].fillna('Unf', inplace=True)","a0ed3949":"null(dataset, 'BsmtFinType2', True)","47349c0f":"dataset['BsmtFinType2'].fillna('Unf', inplace=True)","bc14ea42":"null(dataset, 'Electrical', True)","6b030f00":"dataset['Electrical'].unique()","12f4c265":"dataset['Electrical'].fillna('SBrkr', inplace=True)","dd4fabc5":"null(dataset, \"FireplaceQu\", True)","9b4906f1":"dataset['FireplaceQu'].fillna('None', inplace=True)","bd069db2":"null(dataset, 'GarageType', True)","ab4c2961":"val = dataset['GarageType'].unique()[0]\ndataset['GarageType'].fillna(val, inplace=True)","a1ba33f5":"null(dataset, 'GarageYrBlt')","0725f0d7":"plt.figure(figsize=(18,8))\nsns.countplot(dataset['GarageYrBlt'], palette='rainbow')\nplt.xticks(rotation=45)\nplt.show()","bb2d589d":"dataset['GarageYrBlt'].fillna('2005.0', inplace= True)","3c93c288":"null(dataset, 'GarageFinish', True)","58bf6bd1":"dataset['GarageFinish'].fillna(dataset['GarageFinish'].unique()[1], inplace=True)","8dd05e23":"null(dataset, 'GarageQual', True)","2e277bdb":"dataset['GarageQual'].fillna(dataset['GarageQual'].unique()[0], inplace=True)","25279b35":"null(dataset, 'GarageCond', True)","e915fccd":"dataset['GarageCond'].fillna(dataset['GarageCond'].unique()[0], inplace=True)","7c6e1c63":"null(dataset, 'PoolQC', True)","44340661":"dataset.drop('PoolQC', axis=1, inplace= True)","cb6a779f":"null(dataset, 'Fence', True)","441d56ea":"dataset['Fence'].fillna('None', inplace=True)","106bae08":"null(dataset, 'MiscFeature', True)","40af7656":"dataset.drop('MiscFeature', axis=1, inplace=True)","8508d78d":"dataset.head(2)","0d2afbf5":"dataset.shape","32db5c92":"dropped_col = list(set(train_data.columns) - set(dataset.columns))\ndropped_col","04d448fb":"plt.scatter(dataset['LotFrontage'], dataset['SalePrice'])","2cedb699":"plt.scatter(dataset['MasVnrArea'], dataset['SalePrice'])","02dd834a":"plt.scatter(dataset['GarageCond'], dataset['SalePrice'])","4a0c6e90":"dataset['GarageCond'].value_counts()","90f636e9":"num_feat = [i for i in dataset.columns if dataset[i].dtypes != 'O']\nlen(num_feat)","f0ce841a":"dataset[set(dataset.columns) - set(num_feat)].head(2)","80aadf8f":"dataset[set(dataset.columns) - set(num_feat)].dtypes","c696e9a8":"dataset['GarageYrBlt'] = dataset['GarageYrBlt'].astype(float)\ndataset['GarageYrBlt'] = dataset['GarageYrBlt'].astype(int)","7f95dfd6":"cat_feat = dataset[set(dataset.columns) - set(num_feat)]","08f8125d":"dataset[num_feat].head(2)","82936a33":"float_feat = [i for i in num_feat if dataset[i].dtypes == 'float']\nfloat_feat","c1ffbe34":"for i in cat_feat:\n    print(i)\n    print(dataset[i].unique())\n    print(\"------------------------------------\")","31709953":"from sklearn.preprocessing import LabelEncoder\nlabel = LabelEncoder()\nfor i in cat_feat:\n    dataset[i] = label.fit_transform(dataset[i])","90bde528":"dataset.head(2)","625b1475":"dataset.dtypes","301e9b48":"dataset.to_csv('final_dataset',header=True, index=False)","4a03b454":"final_dataset = pd.read_csv('.\/final_dataset')\nfinal_dataset.head(2)","c9b718ca":"X_train = final_dataset.drop('SalePrice', axis=1)\ny_train = final_dataset['SalePrice']","1951fd4f":"columns = X_train.columns\nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\nscaled = scale.fit(X_train)\nX_train_scaled = pd.DataFrame(scale.transform(X_train), columns=columns)","2a0a98ec":"X_train_scaled.head(2)","f6a100eb":"test_data = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest_data.head(2)","d8ac2333":"test_data.drop(dropped_col, axis=1, inplace=True)","ef869eab":"label = LabelEncoder()\nfor i in cat_feat:\n    test_data[i] = label.fit_transform(test_data[i])","f4874a77":"test_data.head()","fccb4f09":"test_data['LotFrontage'].fillna(test_data['LotFrontage'].mean(), inplace=True)\n\ntest_data['MasVnrType'].fillna('None', inplace=True)\n\ntest_data['MasVnrArea'].fillna(test_data['MasVnrArea'].mean(), inplace=True)\n\ntest_data['BsmtQual'].fillna('TA', inplace=True)\n\ntest_data['BsmtCond'].fillna('TA', inplace=True)\n\ntest_data['BsmtExposure'].fillna('No', inplace=True)\n\ntest_data['BsmtFinType1'].fillna('Unf', inplace=True)\n\ntest_data['BsmtFinType2'].fillna('Unf', inplace=True)\n\ntest_data['Electrical'].fillna('SBrkr', inplace=True)\n\ntest_data['FireplaceQu'].fillna('None', inplace=True)\n\nval = test_data['GarageType'].unique()[0]\ntest_data['GarageType'].fillna(val, inplace=True)\n\ntest_data['GarageYrBlt'].fillna('2005.0', inplace= True)\n\ntest_data['GarageFinish'].fillna(test_data['GarageFinish'].unique()[1], inplace=True)\n\ntest_data['GarageQual'].fillna(test_data['GarageQual'].unique()[0], inplace=True)\n\ntest_data['GarageCond'].fillna(test_data['GarageCond'].unique()[0], inplace=True)\n\ntest_data['Fence'].fillna('None', inplace=True)","9ccbc1b0":"test_data.isnull().sum()","4ae45d50":"test_null = [i for i in test_data.columns if test_data[i].isnull().sum() > 0]\ntest_null","e333dc61":"test_data[test_null].dtypes","61605963":"for i in test_null:\n    test_data[i].fillna(test_data[i].mean(), inplace = True)","fd44b12a":"test_data.isnull().sum()","b965127a":"test_data.shape","0c048b2d":"X_test = scale.fit(test_data)\nX_test_scaled = pd.DataFrame(scale.transform(test_data), columns=columns)","6220701d":"X_test_scaled.head(2)","6692a5f6":"from sklearn.ensemble import AdaBoostRegressor\nlin_reg = AdaBoostRegressor(random_state = 24, n_estimators = 35)\nmodel = lin_reg.fit(X_train_scaled, y_train)\nmodel.score(X_train_scaled, y_train)","86ac428e":"sample = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ny_pred = model.predict(X_test_scaled)\nresult = pd.DataFrame({sample.columns[0] : sample['Id'],\n                        sample.columns[1] : y_pred})\nresult.to_csv('submission.csv', index=False)","5defb2bc":"#### droping...","7be79266":"### 'Electrical'","1bb5e699":"### GarageCond","a1062b41":"### Looking into the data","a069ce36":"## Feature Engineering","af01c729":"## Extrapolatory Data Analysis","8c71ddc9":"### BsmtCond","1e5a8a78":"### MiscFeature","a67d01be":"### 'BsmtFinType2'","f703c303":"### GarageYrBlt","567e86f1":"### LotFrontage","5a5e2b1d":"### Drop this column is good bcz it is 93% null","11789a59":"## Encoding categorical data\n##### Beacause machine learning algorithm are compatible with numerical data only.","7e965e87":"### BsmtFinType1","5fe6ac50":"#### basically we have two types of columns 1.Numerical 2.Categorical.\n#### putting all numerical columns into a list","26b45a60":"### BsmtExposure","a81b9f2a":"### Alley","1ab369d7":"### GarageType","9e44cd14":"## Variable Seperation","46843883":"### MasVnrArea","436d32aa":"## Scaling the data","584802ea":"### Looking into each feature containing null values","16c8dd87":"### GarageQual","430f9c9e":"## Model Fitting","c2759528":"### PoolQC","5e7b5c75":"#### Time to work with categorical data","ebce6239":"### put nan as 'None'","bd022712":"### GarageFinish","aa48cfab":"## Importing Libraries","5cf0723d":"#### features which contains null values","597b4535":"##### This is a helper function which plot countplot and percentage of null values available in a feature.","958e03de":"## dropped columns are : ['Alley', 'MiscFeature', 'PoolQC']","653c1612":"### FireplaceQu","6bcd9774":"### MasVnrType","44773e59":"### BsmtQual","4f20841a":"## Submission","95168830":"### Fence","0201b502":"### Looking for null values","fdfadfb3":"## Working with Test Data","c60c7a40":"#### droping..."}}