{"cell_type":{"cea016e9":"code","82f7e26e":"code","9c7562ef":"code","3c9f4df0":"code","0b53a2fc":"code","97c38e64":"code","6dffed3d":"code","7b316799":"code","a8fe9128":"code","51b204c6":"code","649c74ef":"code","3c14a17e":"code","618ca58a":"code","fbe3ecea":"code","39fddf7c":"code","52dfa07f":"code","738f1a8e":"code","5f6fa87a":"code","b54f36f4":"code","dd9483da":"code","77fcccb1":"code","42dbff6f":"code","a5efba17":"code","74f29307":"code","e9e11d46":"code","8b72aff4":"code","4ac25333":"code","7a6ec87b":"code","a32d0560":"code","c9b5c0e7":"code","7091db76":"code","dcc68e36":"code","c3f54b33":"code","aa0c6c7f":"code","6a147362":"code","fb91693e":"code","6208dd41":"code","43756454":"code","8a703a05":"code","e65d997d":"code","140d6f5f":"code","46f5e46b":"markdown","d0661fbf":"markdown","f8f5e9bb":"markdown","00f07d8b":"markdown"},"source":{"cea016e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\ndf = pd.read_csv('..\/input\/stock-price-data-for-forecasting-problems\/stock_price_dada.csv')","82f7e26e":"#Importing important libraries for Data fetching, Logic Building and Visualization\nimport math\nimport matplotlib.pyplot as plt\nimport keras\nimport pandas as pd\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nfrom keras.layers import *\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom keras.callbacks import EarlyStopping","9c7562ef":"df.head()","3c9f4df0":"def SimpleMovingAverage(data, window):\n    sma = data.rolling(window = window).mean()\n    return sma\n\ndf['sma_14'] = SimpleMovingAverage(df['Close'], 20)","0b53a2fc":"df.head()","97c38e64":"df['sma_14'] = df['sma_14'].fillna(0)","6dffed3d":"df.head()","7b316799":"data = df.sort_index(ascending=True, axis=0)\nnew_data = pd.DataFrame(index=range(0,len(df)),columns=['Date', 'Close'])\nfor i in range(0,len(data)):\n    new_data['Date'][i] = data['Date'][i]\n    new_data['Close'][i] = data['Close'][i]\n\n#setting index\nnew_data.index = new_data.Date\nnew_data.drop('Date', axis=1, inplace=True)\n\n#creating train and test sets\ndataset = new_data.values\n\ntrain = dataset[0:987,:]\nvalid = dataset[987:,:]\n\n#converting dataset into x_train and y_train\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled_data = scaler.fit_transform(dataset)\n\nx_train, y_train = [], []\nfor i in range(60,len(train)):\n    x_train.append(scaled_data[i-60:i,0])\n    y_train.append(scaled_data[i,0])\nx_train, y_train = np.array(x_train), np.array(y_train)\n\nx_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))\n\n# create and fit the LSTM network\nmodel = Sequential()\n\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1],1)))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dense(1))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(x_train, y_train, epochs=1, batch_size=1, verbose=2)\n\n#predicting 246 values, using past 60 from the train data\ninputs = new_data[len(new_data) - len(valid) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs  = scaler.transform(inputs)\n\nX_test = []\nfor i in range(60,inputs.shape[0]):\n    X_test.append(inputs[i-60:i,0])\nX_test = np.array(X_test)\n\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\nclosing_price = model.predict(X_test)\nclosing_price = scaler.inverse_transform(closing_price)","a8fe9128":"#for plotting\nplt.figure(figsize=(14,5))\ntrain = new_data[:987]\nvalid = new_data[987:]\nvalid['Predictions'] = closing_price\nplt.plot(train['Close'])\nplt.plot(valid[['Close','Predictions']])\nplt.show()","51b204c6":"plt.figure(figsize=(14,5))\n\nplt.plot(valid['Close'], color = 'blue', label = 'TATA Stock Price')\n\nplt.plot(valid['Predictions'], color = 'red', label = 'Predicted TATA Stock Price')\n\nplt.title('TATA Stock Price Prediction')\n\nplt.xlabel('Time')\n\nplt.ylabel('TATA Stock Price')\n\nplt.legend()\n\nplt.show()","649c74ef":"rms=np.sqrt(np.mean(np.power((valid-closing_price),2)))\nrms","3c14a17e":"trainScore = model.evaluate(x_train, y_train, verbose=0)\nprint('Train Score: %.8f MSE (%.8f RMSE)' % (trainScore, math.sqrt(trainScore)))\n","618ca58a":"df = pd.read_csv('..\/input\/stock-price-data-for-forecasting-problems\/stock_price_dada.csv')","fbe3ecea":"def bollinger_bands(dataset, n):\n    \n    MA = pd.Series(dataset['Close'].rolling(window=n, min_periods=n).mean())\n    MSD = pd.Series(dataset['Close'].rolling(window=n, min_periods=n).std())\n    b1 = 4 * MSD \/ MA\n    B1 = pd.Series(b1, name='BollingerB_' + str(n))\n    dataset = dataset.join(B1)\n    b2 = (dataset['Close'] - MA + 2 * MSD) \/ (4 * MSD)\n    B2 = pd.Series(b2, name='Bollinger%b_' + str(n))\n    dataset = dataset.join(B2)\n    return dataset\n\nfor i in np.array([30,40,50]):\n    df = bollinger_bands(df, i)","39fddf7c":"df.head()","52dfa07f":"df = df.fillna(0)","738f1a8e":"df.head()","5f6fa87a":"df.head()","b54f36f4":"data = df.sort_index(ascending=True, axis=0)\nnew_data = pd.DataFrame(index=range(0,len(df)),columns=['Date', 'Close'])\nfor i in range(0,len(data)):\n    new_data['Date'][i] = data['Date'][i]\n    new_data['Close'][i] = data['Close'][i]\n\n#setting index\nnew_data.index = new_data.Date\nnew_data.drop('Date', axis=1, inplace=True)\n\n#creating train and test sets\ndataset = new_data.values\n\ntrain = dataset[0:987,:]\nvalid = dataset[987:,:]\n\n#converting dataset into x_train and y_train\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled_data = scaler.fit_transform(dataset)\n\nx_train, y_train = [], []\nfor i in range(60,len(train)):\n    x_train.append(scaled_data[i-60:i,0])\n    y_train.append(scaled_data[i,0])\nx_train, y_train = np.array(x_train), np.array(y_train)\n\nx_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))\n\n# create and fit the LSTM network\nmodel = Sequential()\n\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1],1)))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dense(1))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(x_train, y_train, epochs=1, batch_size=1, verbose=2)\n\n#predicting 246 values, using past 60 from the train data\ninputs = new_data[len(new_data) - len(valid) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs  = scaler.transform(inputs)\n\nX_test = []\nfor i in range(60,inputs.shape[0]):\n    X_test.append(inputs[i-60:i,0])\nX_test = np.array(X_test)\n\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\nclosing_price = model.predict(X_test)\nclosing_price = scaler.inverse_transform(closing_price)","dd9483da":"plt.figure(figsize=(14,5))\ntrain = new_data[:987]\nvalid = new_data[987:]\nvalid['Predictions'] = closing_price\nplt.plot(train['Close'])\nplt.plot(valid[['Close','Predictions']])\nplt.show()","77fcccb1":"plt.figure(figsize=(14,5))\nplt.plot(valid['Close'], color = 'blue', label = 'TATA Stock Price')\nplt.plot(valid['Predictions'], color = 'red', label = 'Predicted TATA Stock Price')\nplt.title('TATA Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('TATA Stock Price')\nplt.legend()\nplt.show()","42dbff6f":"rms=np.sqrt(np.mean(np.power((valid-closing_price),2)))\nrms","a5efba17":"trainScore = model.evaluate(x_train, y_train, verbose=0)\nprint('Train Score: %.8f MSE (%.8f RMSE)' % (trainScore, math.sqrt(trainScore)))","74f29307":"df = pd.read_csv('..\/input\/stock-price-data-for-forecasting-problems\/stock_price_dada.csv')","e9e11d46":"def stochastics( dataframe, low, high, close, k, d ):\n\n    lowest_minimum  = dataframe[low].rolling( window = k ).min()\n    highest_maximum = dataframe[high].rolling( window = k ).max()\n\n    dataframe['%k'] = 100 * (dataframe[close] - lowest_minimum)\/(highest_maximum - lowest_minimum)\n    dataframe['%d'] = dataframe['%k'].rolling(window = d).mean()\n\n    return dataframe\n\nstochs = stochastics( df, 'Low', 'High', 'Close', 14, 3 )\ndf.head()","8b72aff4":"df = df.fillna(0)","4ac25333":"df.head()","7a6ec87b":"data = df.sort_index(ascending=True, axis=0)\nnew_data = pd.DataFrame(index=range(0,len(df)),columns=['Date', 'Close'])\nfor i in range(0,len(data)):\n    new_data['Date'][i] = data['Date'][i]\n    new_data['Close'][i] = data['Close'][i]\n\n#setting index\nnew_data.index = new_data.Date\nnew_data.drop('Date', axis=1, inplace=True)\n\n#creating train and test sets\ndataset = new_data.values\n\ntrain = dataset[0:987,:]\nvalid = dataset[987:,:]\n\n#converting dataset into x_train and y_train\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled_data = scaler.fit_transform(dataset)\n\nx_train, y_train = [], []\nfor i in range(60,len(train)):\n    x_train.append(scaled_data[i-60:i,0])\n    y_train.append(scaled_data[i,0])\nx_train, y_train = np.array(x_train), np.array(y_train)\n\nx_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))\n\n# create and fit the LSTM network\nmodel = Sequential()\n\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1],1)))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dense(1))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(x_train, y_train, epochs=1, batch_size=1, verbose=2)\n\n#predicting 246 values, using past 60 from the train data\ninputs = new_data[len(new_data) - len(valid) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs  = scaler.transform(inputs)\n\nX_test = []\nfor i in range(60,inputs.shape[0]):\n    X_test.append(inputs[i-60:i,0])\nX_test = np.array(X_test)\n\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\nclosing_price = model.predict(X_test)\nclosing_price = scaler.inverse_transform(closing_price)","a32d0560":"plt.figure(figsize=(14,5))\ntrain = new_data[:987]\nvalid = new_data[987:]\nvalid['Predictions'] = closing_price\nplt.plot(train['Close'])\nplt.plot(valid[['Close','Predictions']])\nplt.show()","c9b5c0e7":"plt.figure(figsize=(14,5))\nplt.plot(valid['Close'], color = 'blue', label = 'TATA Stock Price')\nplt.plot(valid['Predictions'], color = 'red', label = 'Predicted TATA Stock Price')\nplt.title('TATA Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('TATA Stock Price')\nplt.legend()\nplt.show()","7091db76":"rms=np.sqrt(np.mean(np.power((valid-closing_price),2)))\nrms","dcc68e36":"trainScore = model.evaluate(x_train, y_train, verbose=0)\nprint('Train Score: %.8f MSE (%.8f RMSE)' % (trainScore, math.sqrt(trainScore)))","c3f54b33":"df = pd.read_csv('..\/input\/stock-price-data-for-forecasting-problems\/stock_price_dada.csv')","aa0c6c7f":"df.head()","6a147362":"def get_macd(dataframe, price, slow, fast, smooth):\n    exp1 = price.ewm(span = fast, adjust = False).mean()\n    exp2 = price.ewm(span = slow, adjust = False).mean()\n    dataframe['macd'] = pd.DataFrame(exp1 - exp2)\n    dataframe['Signal'] =(dataframe['macd'].ewm(span = smooth, adjust = False).mean())\n    dataframe['Histogram'] = (dataframe['macd'] - dataframe['Signal'])    \n    return dataframe\n\ndf = get_macd(df,df['Close'], 26, 12, 9)\ndf.head()","fb91693e":"df = df.fillna(0)","6208dd41":"data = df.sort_index(ascending=True, axis=0)\nnew_data = pd.DataFrame(index=range(0,len(df)),columns=['Date', 'Close'])\nfor i in range(0,len(data)):\n    new_data['Date'][i] = data['Date'][i]\n    new_data['Close'][i] = data['Close'][i]\n\n#setting index\nnew_data.index = new_data.Date\nnew_data.drop('Date', axis=1, inplace=True)\n\n#creating train and test sets\ndataset = new_data.values\n\ntrain = dataset[0:987,:]\nvalid = dataset[987:,:]\n\n#converting dataset into x_train and y_train\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled_data = scaler.fit_transform(dataset)\n\nx_train, y_train = [], []\nfor i in range(60,len(train)):\n    x_train.append(scaled_data[i-60:i,0])\n    y_train.append(scaled_data[i,0])\nx_train, y_train = np.array(x_train), np.array(y_train)\n\nx_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))\n\n# create and fit the LSTM network\nmodel = Sequential()\n\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1],1)))\n\nmodel.add(LSTM(units=50))\nmodel.add(Dense(1))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(x_train, y_train, epochs=1, batch_size=1, verbose=2)\n\n#predicting 246 values, using past 60 from the train data\ninputs = new_data[len(new_data) - len(valid) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs  = scaler.transform(inputs)\n\nX_test = []\nfor i in range(60,inputs.shape[0]):\n    X_test.append(inputs[i-60:i,0])\nX_test = np.array(X_test)\n\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\nclosing_price = model.predict(X_test)\nclosing_price = scaler.inverse_transform(closing_price)","43756454":"plt.figure(figsize=(14,5))\ntrain = new_data[:987]\nvalid = new_data[987:]\nvalid['Predictions'] = closing_price\nplt.plot(train['Close'])\nplt.plot(valid[['Close','Predictions']])\nplt.show()","8a703a05":"plt.figure(figsize=(14,5))\nplt.plot(valid['Close'], color = 'blue', label = 'TATA Stock Price')\nplt.plot(valid['Predictions'], color = 'red', label = 'Predicted TATA Stock Price')\nplt.title('TATA Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('TATA Stock Price')\nplt.legend()\nplt.show()","e65d997d":"rms=np.sqrt(np.mean(np.power((valid-closing_price),2)))\nrms","140d6f5f":"trainScore = model.evaluate(x_train, y_train, verbose=0)\nprint('Train Score: %.8f MSE (%.8f RMSE)' % (trainScore, math.sqrt(trainScore)))","46f5e46b":"# **stochastics**","d0661fbf":"# **Simple Moving Average**","f8f5e9bb":"# **Bollinger_bands**","00f07d8b":"# **macd**"}}