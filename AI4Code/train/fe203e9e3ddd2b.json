{"cell_type":{"2a34e173":"code","e3d118a1":"code","f26d5b03":"code","8ca547eb":"code","53c012b5":"code","4a8a39da":"code","7f5d699a":"code","2dfc1889":"code","111e14d0":"code","53da206f":"code","865ae339":"code","871937d1":"code","b37a8412":"code","b7603d88":"code","4f4ea56c":"code","6a9638a5":"code","eaa2e46b":"code","e8d4d35f":"code","6740522b":"code","1983250c":"code","665eb01b":"code","a8b7e44d":"code","85ab22f1":"code","48219381":"code","62e6e8bc":"code","ffac9298":"code","d2a8e233":"code","e3438f65":"markdown","c9483cf6":"markdown","31210720":"markdown","e4091b29":"markdown","a3334de0":"markdown","9fb95e36":"markdown","b4102118":"markdown","d058522b":"markdown","17eeee81":"markdown","827ebf8a":"markdown","b1dc5c58":"markdown","d661c19a":"markdown","8ff1d12e":"markdown","f422ad94":"markdown","e8e53b7d":"markdown","6522f19a":"markdown","b0b8cb5d":"markdown","10ae120e":"markdown","8e3697ff":"markdown","9f92c10a":"markdown","06dd1a32":"markdown","d9371185":"markdown","5792559d":"markdown","4e8a1f1a":"markdown"},"source":{"2a34e173":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra (lineer Cebir)\nimport pandas as pd # data processing (veri i\u015fleme), CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # visualization library (G\u00f6rselle\u015ftirme k\u00fct\u00fcphanesi)\nimport matplotlib.pyplot as plt # visualization library (G\u00f6rselle\u015ftirme k\u00fct\u00fcphanesi)\nimport plotly.plotly as py # visualization library (G\u00f6rselle\u015ftirme k\u00fct\u00fcphanesi)\nfrom plotly.offline import init_notebook_mode, iplot # plotly offline mode (plotly \u00e7evrimd\u0131\u015f\u0131 mod)\ninit_notebook_mode(connected=True) \nimport plotly.graph_objs as go # plotly graphical object (plotly grafiksel nesne)\n\n# Input data files are available in the \"..\/input\/\" directory. (Giri\u015f veri dosyalar\u0131 \"..\/input\/\" dizininde mevcuttur.)\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory  (\u00d6rne\u011fin, bunu \u00e7al\u0131\u015ft\u0131rmak i\u00e7in (\u00e7al\u0131\u015ft\u0131r'\u0131 t\u0131klatarak veya Shift+Enter tu\u015flar\u0131na basarak) giri\u015f dizinindeki dosyalar\u0131 listeleyecektir.)\n\nimport os\nprint(os.listdir(\"..\/input\"))\n# import warnings library (warnings k\u00fct\u00fcphanesini i\u00e7e aktar)\nimport warnings        \n# ignore filters (filtreleri yoksay)\nwarnings.filterwarnings(\"ignore\") # if there is a warning after some codes, this will avoid us to see them. (baz\u0131 kodlardan sonra bir uyar\u0131 geliyorsa bu onlar\u0131 g\u00f6rmemizi engelleyecektir.)\nplt.style.use('ggplot') # style of plots. ggplot is one of the most used style, I also like it.(plot tarz\u0131. ggplot en \u00e7ok kullan\u0131lan stillerden biri, ben de be\u011fendim.)\n# Any results you write to the current directory are saved as output. (# Ge\u00e7erli dizine yazd\u0131\u011f\u0131n\u0131z t\u00fcm sonu\u00e7lar \u00e7\u0131kt\u0131 olarak kaydedilir.)\n","e3d118a1":"# bombing data\naerial = pd.read_csv(\"..\/input\/world-war-ii\/operations.csv\")\n# first weather data that includes locations like country, latitude and longitude. (\u00fclke, enlem ve boylam gibi konumlar\u0131 i\u00e7eren ilk hava durumu verileri.)\nweather_station_location = pd.read_csv(\"..\/input\/weatherww2\/Weather Station Locations.csv\")\n# Second weather data that includes measured min, max and mean temperatures (# \u00d6l\u00e7\u00fclen minimum, maksimum ve ortalama s\u0131cakl\u0131klar\u0131 i\u00e7eren ikinci hava durumu verileri)\nweather = pd.read_csv(\"..\/input\/weatherww2\/Summary of Weather.csv\")","f26d5b03":"# drop countries that are NaN (NaN olan \u00fclkeleri b\u0131rak)\naerial = aerial[pd.isna(aerial.Country)==False]\n# drop if target longitude is NaN ( hedef boylam NaN ise b\u0131rak)\naerial = aerial[pd.isna(aerial['Target Longitude'])==False]\n# Drop if takeoff longitude is NaN(Kalk\u0131\u015f boylam\u0131 NaN ise b\u0131rak)\naerial = aerial[pd.isna(aerial['Takeoff Longitude'])==False]\n# drop unused features (kullan\u0131lmayan \u00f6zellikleri b\u0131rak)\ndrop_list = ['Mission ID','Unit ID','Target ID','Altitude (Hundreds of Feet)','Airborne Aircraft',\n             'Attacking Aircraft', 'Bombing Aircraft', 'Aircraft Returned',\n             'Aircraft Failed', 'Aircraft Damaged', 'Aircraft Lost',\n             'High Explosives', 'High Explosives Type','Mission Type',\n             'High Explosives Weight (Pounds)', 'High Explosives Weight (Tons)',\n             'Incendiary Devices', 'Incendiary Devices Type',\n             'Incendiary Devices Weight (Pounds)',\n             'Incendiary Devices Weight (Tons)', 'Fragmentation Devices',\n             'Fragmentation Devices Type', 'Fragmentation Devices Weight (Pounds)',\n             'Fragmentation Devices Weight (Tons)', 'Total Weight (Pounds)',\n             'Total Weight (Tons)', 'Time Over Target', 'Bomb Damage Assessment','Source ID']\naerial.drop(drop_list, axis=1,inplace = True)\naerial = aerial[ aerial.iloc[:,8]!=\"4248\"] # drop this takeoff latitude \naerial = aerial[ aerial.iloc[:,9]!=1355]   # drop this takeoff longitude","8ca547eb":"aerial.info()","53c012b5":"# what we will use only (sadece ne kullanaca\u011f\u0131z bakal\u0131m)\nweather_station_location = weather_station_location.loc[:,[\"WBAN\",\"NAME\",\"STATE\/COUNTRY ID\",\"Latitude\",\"Longitude\"] ]\nweather_station_location.info()","4a8a39da":"# what we will use only\nweather = weather.loc[:,[\"STA\",\"Date\",\"MeanTemp\"] ]\nweather.info()","7f5d699a":"# country (\u00dclke)\nprint(aerial['Country'].value_counts())\nplt.figure(figsize=(22,10))\nsns.countplot(aerial['Country'])\nplt.show()","2dfc1889":"# Top target countries\nprint(aerial['Target Country'].value_counts()[:10])\nplt.figure(figsize=(22,10))\nsns.countplot(aerial['Target Country'])\nplt.xticks(rotation=90)\nplt.show()","111e14d0":"# Aircraft Series U\u00e7ak Serisi\ndata = aerial['Aircraft Series'].value_counts()\nprint(data[:10])\ndata = [go.Bar(\n            x=data[:10].index,\n            y=data[:10].values,\n            hoverinfo = 'text',\n            marker = dict(color = 'rgba(177, 14, 22, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n    )]\n\nlayout = dict(\n    title = 'Aircraft Series',\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","53da206f":"aerial.iloc","865ae339":"# ATTACK\naerial[\"color\"] = \"\" # bir feature olu\u015fturuyoruz ve datasete ekliyoruz \naerial.color[aerial.Country == \"USA\"] = \"rgb(0,116,217)\"\naerial.color[aerial.Country == \"GREAT BRITAIN\"] = \"rgb(255,65,54)\"\naerial.color[aerial.Country == \"NEW ZEALAND\"] = \"rgb(133,20,75)\"\naerial.color[aerial.Country == \"SOUTH AFRICA\"] = \"rgb(255,133,27)\"\n\ndata = [dict(\n    type='scattergeo',\n    lon = aerial['Takeoff Longitude'],\n    lat = aerial['Takeoff Latitude'],\n    hoverinfo = 'text',\n    text = \"Country: \" + aerial.Country + \" Takeoff Location: \"+aerial[\"Takeoff Location\"]+\" Takeoff Base: \" + aerial['Takeoff Base'],# sald\u0131r\u0131 yapan u\u00e7a\u011f\u0131n kakt\u0131\u011f\u0131 \u00fclke+kalkt\u0131\u011f\u0131 b\u00f6lge+kalt\u0131\u011f\u0131 havaalan\u0131\n    mode = 'markers', \n    marker=dict(\n        sizemode = 'area',\n        sizeref = 1,\n        size= 10 ,\n        line = dict(width=1,color = \"white\"),\n        color = aerial[\"color\"],\n        opacity = 0.7),\n)]\nlayout = dict(\n    title = 'Countries Take Off Bases ', #ba\u015fl\u0131k \u00fclekelerin \u00fcsleri\n    hovermode='closest',\n    geo = dict(showframe=True, showland=True, showcoastlines=True, showcountries=True,\n               countrywidth=1, projection=dict(type='Mercator'),\n              landcolor = 'rgb(217, 217, 217)',\n              subunitwidth=1,\n              showlakes = True,\n              lakecolor = 'rgb(255, 255, 255)',\n              countrycolor=\"rgb(5, 5, 5)\")\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","871937d1":"aerial.head()","b37a8412":"# Bombing paths (bombalama yollar\u0131)\n# trace1\nairports = [ dict(\n        type = 'scattergeo',\n        lon = aerial['Takeoff Longitude'],\n        lat = aerial['Takeoff Latitude'],\n        hoverinfo = 'text',\n        text = \"Country: \" + aerial.Country + \" Takeoff Location: \"+aerial[\"Takeoff Location\"]+\" Takeoff Base: \" + aerial['Takeoff Base'],\n        mode = 'markers',\n        marker = dict( \n            size=5, \n            color = aerial[\"color\"],\n            line = dict(\n                width=1,\n                color = \"white\"\n            )\n        ))]\n# trace2\ntargets = [ dict(\n        type = 'scattergeo',\n        lon = aerial['Target Longitude'],\n        lat = aerial['Target Latitude'],\n        hoverinfo = 'text',\n        text = \"Target Country: \"+aerial[\"Target Country\"]+\" Target City: \"+aerial[\"Target City\"],\n        mode = 'markers',\n        marker = dict( \n            size=1, \n            color = \"red\",\n            line = dict(\n                width=0.5,\n                color = \"red\"\n            )\n        ))]\n        \n# trace3\nflight_paths = []\nfor i in range( len( aerial['Target Longitude'] ) ):\n    flight_paths.append(\n        dict(\n            type = 'scattergeo',\n            lon = [ aerial.iloc[i,9], aerial.iloc[i,16] ],\n            lat = [ aerial.iloc[i,8], aerial.iloc[i,15] ],\n            mode = 'lines',\n            line = dict(\n                width = 0.7,\n                color = 'black',\n            ),\n            opacity = 0.6,\n        )\n    )\n    \nlayout = dict(\n    title = 'Bombing Paths from Attacker Country to Target ', #ba\u015fl\u0131k: sald\u0131r\u0131 yapan \u00fclke ile hedef \u00fclke aras\u0131ndaki bombalama yollar\u0131\n    hovermode='closest',\n    geo = dict(showframe=False, showland=True, showcoastlines=True, showcountries=True,\n               countrywidth=1, projection=dict(type='Mercator'),\n              landcolor = 'rgb(217, 217, 217)',\n              subunitwidth=1,\n              showlakes = True,\n              lakecolor = 'rgb(255, 255, 255)',\n              countrycolor=\"rgb(5, 5, 5)\")\n)\n    \nfig = dict( data=flight_paths + airports+targets, layout=layout )\niplot( fig )","b7603d88":"#Theater of Operations(Operasyon g\u00f6sterimi)\nprint(aerial['Theater of Operations'].value_counts())\nplt.figure(figsize=(22,10))\nsns.countplot(aerial['Theater of Operations'])\nplt.show()","4f4ea56c":"# weather station locations (Hava istasyonu yerleri )\n\ndata = [dict(\n    type='scattergeo',\n    lon = weather_station_location.Longitude,\n    lat = weather_station_location.Latitude,\n    hoverinfo = 'text',\n    text = \"Name: \" + weather_station_location.NAME + \" Country: \" + weather_station_location[\"STATE\/COUNTRY ID\"],\n    mode = 'markers',\n    marker=dict(\n        sizemode = 'area',\n        sizeref = 1,\n        size= 8 ,\n        line = dict(width=1,color = \"white\"),\n        color = \"blue\",\n        opacity = 0.7),\n)]\nlayout = dict(\n    title = 'Weather Station Locations ',\n    hovermode='closest',\n    geo = dict(showframe=False, showland=True, showcoastlines=True, showcountries=True,\n               countrywidth=1, projection=dict(type='Mercator'),\n              landcolor = 'rgb(217, 217, 217)',\n              subunitwidth=1,\n              showlakes = True,\n              lakecolor = 'rgb(255, 255, 255)',\n              countrycolor=\"rgb(5, 5, 5)\")\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","6a9638a5":"# Bindukuri \u015fehrinin ikinci d\u00fcnya sava\u015f\u0131ndaki hava durumu\nweather_station_id = weather_station_location[weather_station_location.NAME == \"BINDUKURI\"].WBAN \nweather_bin = weather[weather.STA == 32907]\nweather_bin[\"Date\"] = pd.to_datetime(weather_bin[\"Date\"])\nplt.figure(figsize=(22,10))\nplt.plot(weather_bin.Date,weather_bin.MeanTemp)\nplt.title(\"Mean Temperature of Bindukuri Area\") #bindukurideki ortalama s\u0131cakl\u0131k\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature\")\nplt.show()\n","eaa2e46b":"aerial = pd.read_csv(\"..\/input\/world-war-ii\/operations.csv\")\naerial[\"year\"] = [ each.split(\"\/\")[2] for each in aerial[\"Mission Date\"]]\naerial[\"month\"] = [ each.split(\"\/\")[0] for each in aerial[\"Mission Date\"]]\naerial = aerial[aerial[\"year\"]>=\"1943\"]\naerial = aerial[aerial[\"month\"]>=\"8\"]\n\naerial[\"Mission Date\"] = pd.to_datetime(aerial[\"Mission Date\"])\n\nattack = \"USA\"\ntarget = \"BURMA\"\ncity = \"KATHA\"\n\naerial_war = aerial[aerial.Country == attack]\naerial_war = aerial_war[aerial_war[\"Target Country\"] == target]\naerial_war = aerial_war[aerial_war[\"Target City\"] == city]\n","e8d4d35f":"# I get very tired while writing this part, so sorry for this dummy code But I guess you got the idea(Bu k\u0131sm\u0131 yazarken \u00e7ok yoruldum, bu kukla kod i\u00e7in \u00e7ok \u00f6z\u00fcr dilerim ama san\u0131r\u0131m anlad\u0131n\u0131z)\n\nliste = []\naa = []\nfor each in aerial_war[\"Mission Date\"]:\n    dummy = weather_bin[weather_bin.Date == each]\n    liste.append(dummy[\"MeanTemp\"].values)\naerial_war[\"dene\"] = liste\nfor each in aerial_war.dene.values:\n    aa.append(each[0])\n\n# Create a trace\ntrace = go.Scatter(\n    x = weather_bin.Date,\n    mode = \"lines\",\n    y = weather_bin.MeanTemp,\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n    name = \"Mean Temperature\"\n)\ntrace1 = go.Scatter(\n    x = aerial_war[\"Mission Date\"],\n    mode = \"markers\",\n    y = aa,\n    marker = dict(color = 'rgba(16, 0, 200, 1)'),\n    name = \"Bombing temperature\"\n)\nlayout = dict(title = 'Mean Temperature --- Bombing Dates and Mean Temperature at this Date')\ndata = [trace,trace1]\n\nfig = dict(data = data, layout = layout)\niplot(fig)\n\n\n","6740522b":"# Mean temperature of Bindikuri area\nplt.figure(figsize=(22,10))\nplt.plot(weather_bin.Date,weather_bin.MeanTemp)\nplt.title(\"Mean Temperature of Bindukuri Area\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature\")\nplt.show()\n\n# lets create time series from weather \ntimeSeries = weather_bin.loc[:, [\"Date\",\"MeanTemp\"]]\ntimeSeries.index = timeSeries.Date\nts = timeSeries.drop(\"Date\",axis=1)\n","1983250c":"# adfuller library \nfrom statsmodels.tsa.stattools import adfuller\n# check_adfuller\ndef check_adfuller(ts):\n    # Dickey-Fuller test\n    result = adfuller(ts, autolag='AIC')\n    print('Test statistic: ' , result[0])\n    print('p-value: '  ,result[1])\n    print('Critical Values:' ,result[4])\n# check_mean_std\ndef check_mean_std(ts):\n    #Rolling statistics\n    rolmean = pd.rolling_mean(ts, window=6)\n    rolstd = pd.rolling_std(ts, window=6)\n    plt.figure(figsize=(22,10))   \n    orig = plt.plot(ts, color='red',label='Original')\n    mean = plt.plot(rolmean, color='black', label='Rolling Mean')\n    std = plt.plot(rolstd, color='green', label = 'Rolling Std')\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Mean Temperature\")\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.legend()\n    plt.show()\n    \n# check stationary: mean, variance(std)and adfuller test\ncheck_mean_std(ts)\ncheck_adfuller(ts.MeanTemp)\n","665eb01b":"# Moving average method\nwindow_size = 6\nmoving_avg = pd.rolling_mean(ts,window_size)\nplt.figure(figsize=(22,10))\nplt.plot(ts, color = \"red\",label = \"Original\")\nplt.plot(moving_avg, color='black', label = \"moving_avg_mean\")\nplt.title(\"Mean Temperature of Bindukuri Area\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature\")\nplt.legend()\nplt.show()","a8b7e44d":"ts_moving_avg_diff = ts - moving_avg\nts_moving_avg_diff.dropna(inplace=True) # first 6 is nan value due to window size\n\n# check stationary: mean, variance(std)and adfuller test\ncheck_mean_std(ts_moving_avg_diff)\ncheck_adfuller(ts_moving_avg_diff.MeanTemp)","85ab22f1":"# differencing method\nts_diff = ts - ts.shift()\nplt.figure(figsize=(22,10))\nplt.plot(ts_diff)\nplt.title(\"Differencing method\") \nplt.xlabel(\"Date\")\nplt.ylabel(\"Differencing Mean Temperature\")\nplt.show()","48219381":"ts_diff.dropna(inplace=True) # due to shifting there is nan values\n# check stationary: mean, variance(std)and adfuller test\ncheck_mean_std(ts_diff)\ncheck_adfuller(ts_diff.MeanTemp)","62e6e8bc":"# ACF and PACF \nfrom statsmodels.tsa.stattools import acf, pacf\nlag_acf = acf(ts_diff, nlags=20)\nlag_pacf = pacf(ts_diff, nlags=20, method='ols')\n# ACF\nplt.figure(figsize=(22,10))\n\nplt.subplot(121) \nplt.plot(lag_acf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(ts_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(ts_diff)),linestyle='--',color='gray')\nplt.title('Autocorrelation Function')\n\n# PACF\nplt.subplot(122)\nplt.plot(lag_pacf)\nplt.axhline(y=0,linestyle='--',color='gray')\nplt.axhline(y=-1.96\/np.sqrt(len(ts_diff)),linestyle='--',color='gray')\nplt.axhline(y=1.96\/np.sqrt(len(ts_diff)),linestyle='--',color='gray')\nplt.title('Partial Autocorrelation Function')\nplt.tight_layout()","ffac9298":"# ARIMA L\u0130BRARY\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom pandas import datetime\n\n# fit model\nmodel = ARIMA(ts, order=(1,0,1)) # (ARMA) = (1,0,1)\nmodel_fit = model.fit(disp=0)\n\n# predict\nstart_index = datetime(1944, 6, 25)\nend_index = datetime(1945, 5, 31)\nforecast = model_fit.predict(start=start_index, end=end_index)\n\n# visualization\nplt.figure(figsize=(22,10))\nplt.plot(weather_bin.Date,weather_bin.MeanTemp,label = \"original\")\nplt.plot(forecast,label = \"predicted\")\nplt.title(\"Time Series Forecast\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature\")\nplt.legend()\nplt.show()","d2a8e233":"# predict all path\nfrom sklearn.metrics import mean_squared_error\n# fit model\nmodel2 = ARIMA(ts, order=(1,0,1)) # (ARMA) = (1,0,1)\nmodel_fit2 = model2.fit(disp=0)\nforecast2 = model_fit2.predict()\nerror = mean_squared_error(ts, forecast2)\nprint(\"error: \" ,error)\n# visualization\nplt.figure(figsize=(22,10))\nplt.plot(weather_bin.Date,weather_bin.MeanTemp,label = \"original\")\nplt.plot(forecast2,label = \"predicted\")\nplt.title(\"Time Series Forecast\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Mean Temperature\")\nplt.legend()\nplt.savefig('graph.png')\n\nplt.show()","e3438f65":"<a id=\"8\"><\/a> <br>\n### Make a Time Series Stationary?\n* As we mentioned before, there are 2  reasons behind non-stationarity of time series\n    * Trend: varying mean over time. We need constant mean for stationary of time series.\n    * Seasonality: variations at specific time. We need constant variations for stationary of time series.\n* First solve **trend(constant mean)** problem\n    * Most popular method is moving average.\n        * Moving average: We have window that take the average over the past 'n' sample. 'n' is window size.","c9483cf6":"* Two dotted lines are the confidence interevals. We use these lines to determine the \u2018p\u2019 and \u2018q\u2019 values\n    * Choosing p: The lag value where the PACF chart crosses the upper confidence interval for the first time. p=1.\n    * Choosing q: The lag value where the ACF chart crosses the upper confidence interval for the first time. q=1.\n* Now lets use (1,0,1) as parameters of ARIMA models and predict  \n    * ARIMA: from statsmodels libarary\n    * datetime: we will use it start and end indexes of predict method","31210720":"<a id=\"10\"><\/a> <br>\n# Conclusion\n* In this tutorial, I want ot make tutorial about ARIMA and make some visualization before it.\n* We learn how to make map plots with pyplot. \n* We learn how to make time series forecast.\n","e4091b29":"<a id=\"7\"><\/a> <br>\n### Stationarity of a Time Series\n* There are three basic criterion for a time series to understand whether it is stationary series or not.\n    * Statistical properties of time series such as mean, variance should remain constant over time to call **time series is stationary**\n        * constant mean\n        * constant variance\n        * autocovariance that does not depend on time. autocovariance is covariance between time series and lagged time series.\n* Lets visualize and check seasonality trend of our time series.","a3334de0":"As you ca see from bombing paths, most of the bombing attack is done in Mediterranean theater of operations.(Bombalama yollar\u0131ndan da g\u00f6rebilece\u011finiz gibi, bombalama sald\u0131r\u0131lar\u0131n\u0131n \u00e7o\u011fu Akdeniz harekat senaryosu yap\u0131l\u0131yor.)\n**Theater of Operations:**\n* ETO: European Theater of Operations (ETO: Avrupa Operasyon G\u00f6sterimi)\n* PTO: Pasific Theater of Operations   (PTO: Pasifik Operasyon G\u00f6sterimi)         \n* MTO: Mediterranean Theater of Operations ( MTO: Akdeniz Harekat G\u00f6sterimi)         \n* CBI: China-Burma-India Theater of Operations (CBI: \u00c7in-Burma-Hindistan Operasyon G\u00f6sterimi)               \n* EAST AFRICA: East Africa Theater of Operations  (DO\u011eU AFR\u0130KA: Do\u011fu Afrika Operasyon G\u00f6sterimi) \n<a href=\"http:\/\/imgbb.com\/\"><img src=\"http:\/\/image.ibb.co\/bYvFzx\/mto.png\" alt=\"mto\" border=\"0\"><\/a>","9fb95e36":"<a id=\"6\"><\/a> <br>\n### What is time series?\n* Time series is a collection of data points that are collected at constant time intervals.\n* It is time dependent.\n* Most of time series have some form of **seasonality trends**. For example, if we sale ice cream, most probably there will be higher sales in summer seasons. Therefore, this time series has seasonality trends.\n* Another example, lets think we dice one time every day during 1 year. As you guess, there will be no scenario like that number six is appeared mostly in summer season or number five is mostly appeared in January. Therefore, this time series does not have seasonality trends.\n","b4102118":"* Weather station locations are in below (Hava istasyonu yerleri a\u015fa\u011f\u0131dad\u0131r)","d058522b":"# INTRODUCTION\n<a href=\"http:\/\/ibb.co\/hxXdKx\"><img src=\"http:\/\/preview.ibb.co\/cgA9Rc\/ww2.png\" alt=\"ww2\" border=\"0\"><\/a>\n* Hi guys, I hope you are doing fine. \n* In this kernel, we use multipla data sources that are **aerial bombing  operations** and **weather conditions in world war 2**.\n* After this point, I will use acronym ww2 for world war 2.\n* We will start with **data description and cleaning**, then we will visualize our data to understand better. These processes can be called **EDA (Exploratory Data Analysis)**.\n* After that, we will focus on **time series prediction** to predict when bombing operations are done. \n* For time series prediction, we will use **ARIMA** method that will be a tutorial. \n \n <br> <font color='blue'> Content: \n    * [Load the Data](#1)\n    * [Data Description](#2)\n    * [Data Cleaning](#3)\n    * [Data Visualization](#4)\n    * [Time Series Prediction with ARIMA](#5)\n        * [ What is Time Series ?](#6)\n        * [Stationarity of a Time Series](#7)\n        * [Make a Time Series Stationary](#8)\n            * Moving Average method\n            * Differencing method\n        * [Forecasting a Time Series](#9)\n    * [Conclusion](#10)\n    \n# TURKISH \n    \n    \n<a href=\"http:\/\/ibb.co\/hxXdKx\"><img src=\"http:\/\/preview.ibb.co\/cgA9Rc\/ww2.png\" alt=\"ww2\" border=\"0\"><\/a>\n\n* Merhaba arkada\u015flar, umar\u0131m iyisinizdir.\n* Bu \u00e7ekirdekte, **havadan bombalama operasyonlar\u0131** ve **2. d\u00fcnya sava\u015f\u0131ndaki hava ko\u015fullar\u0131** olan \u00e7oklu veri kaynaklar\u0131 kullan\u0131yoruz.\n* Bu noktadan sonra 2. d\u00fcnya sava\u015f\u0131 i\u00e7in ww2 k\u0131saltmas\u0131n\u0131 kullanaca\u011f\u0131m.\n* **Veri a\u00e7\u0131klamas\u0131 ve temizleme** ile ba\u015flayaca\u011f\u0131z, ard\u0131ndan daha iyi anlamak i\u00e7in verilerimizi g\u00f6rselle\u015ftirece\u011fiz. Bu s\u00fcre\u00e7ler **EDA (Ke\u015fif Verileri Analizi)** olarak adland\u0131r\u0131labilir.\n* Bundan sonra, bombalama operasyonlar\u0131n\u0131n ne zaman yap\u0131ld\u0131\u011f\u0131n\u0131 tahmin etmek i\u00e7in **zaman serisi tahminine** odaklanaca\u011f\u0131z.\n* Zaman serisi tahmini i\u00e7in \u00f6\u011fretici olacak **ARIMA** y\u00f6ntemini kullanaca\u011f\u0131z.\n \n <br> <font color='blue'> \u0130\u00e7erik:\n    * [Verileri Y\u00fckle](#1)\n    * [Veri A\u00e7\u0131klamas\u0131](#2)\n    * [Veri Temizleme](#3)\n    * [Veri G\u00f6rselle\u015ftirme](#4)\n    * [ARIMA ile Zaman Serisi Tahmini](#5)\n        * [Zaman Serisi Nedir?](#6)\n        * [Bir Zaman Serisinin Dura\u011fanl\u0131\u011f\u0131](#7)\n        * [Bir Zaman Serisini Dura\u011fan Hale Getirin](#8)\n            * Hareketli Ortalama y\u00f6ntemi\n            * Farkl\u0131la\u015ft\u0131rma y\u00f6ntemi\n        * [Bir Zaman Serisini \u00d6ng\u00f6rme](#9)\n    * [Sonu\u00e7](#10)\n","17eeee81":"<a id=\"1\"><\/a> <br>\n## Load the Data\n* As I mentioned at introduction, we use multiple data sources.\n    * Aerial Bombing Operations in WW2\n        * Shortly, this data includes bombing operations. For example, USA who use ponte olivo airfield bomb Germany (Berlin) with A36 air craft in 1945.\n    * Wether Conditions in WW2\n        * Shortly, weather conditions during ww2. For example, according to george town weather station, average temperature is 23.88 in 1\/7\/1942. \n        * This data set has 2 subset in it. First one includes weather station locations like country, latitude and longitude.\n        * Second one includes measured min, max and mean temperatures from weather stations.\n        \n        \n  \n## Verileri Y\u00fckle (TURKISH)\n* Giri\u015fte belirtti\u011fim gibi, birden fazla veri kayna\u011f\u0131 kullan\u0131yoruz.\n    * 2. D\u00fcnya Sava\u015f\u0131'nda Havadan Bombalama Operasyonlar\u0131\n        *K\u0131sacas\u0131 bu veriler bombal\u0131 operasyonlar\u0131 i\u00e7ermektedir. \u00d6rne\u011fin, 1945 y\u0131l\u0131nda ponte olivo havaalan\u0131 bombas\u0131n\u0131 Almanyada (Berlin) kullanan ABD, A36 hava arac\u0131 ile.\n    * \u0130kinci D\u00fcnya Sava\u015f\u0131'ndaki Hava Ko\u015fullar\u0131\n        * K\u0131saca, 2. d\u00fcnya sava\u015f\u0131 s\u0131ras\u0131ndaki hava ko\u015fullar\u0131. \u00d6rne\u011fin, george Town meteoroloji istasyonuna g\u00f6re, 1\/7\/1942'de ortalama s\u0131cakl\u0131k 23.88'dir.\n        * Bu veri seti i\u00e7erisinde 2 adet alt k\u00fcme bulunmaktad\u0131r. Birincisi \u00fclke, enlem ve boylam gibi hava durumu istasyonu konumlar\u0131n\u0131 i\u00e7erir.\n        * \u0130kincisi, meteoroloji istasyonlar\u0131ndan \u00f6l\u00e7\u00fclen minimum, maksimum ve ortalama s\u0131cakl\u0131klar\u0131 i\u00e7erir.","827ebf8a":"<a id=\"9\"><\/a> <br>\n### Forecasting a Time Series\n* We learn two different methodsthat are **moving average and differencing** methods to avoid trend and seasonality problem\n* For prediction(forecasting) we will use ts_diff time series that is result of differencing method. There is no reason I only choose it.\n* Also prediction method is ARIMA that is Auto-Regressive Integrated Moving Averages.\n    * AR: Auto-Regressive (p): AR terms are just lags of dependent variable. For example lets say p is 3, we will use  x(t-1), x(t-2) and x(t-3) to predict x(t)\n    * I: Integrated (d): These are the number of nonseasonal differences. For example, in our case we take the first order difference. So we pass that variable and put d=0 \n    * MA: Moving Averages (q): MA terms are lagged forecast errors in prediction equation.\n* (p,d,q) is parameters of ARIMA model.\n* In order to choose p,d,q parameters we will use two different plots.\n    * Autocorrelation Function (ACF): Measurement of the correlation between time series and lagged version of time series. \n    * Partial Autocorrelation Function (PACF): This measures the correlation between the time series and lagged version of time series but after eliminating the variations already explained by the intervening comparisons. ","b1dc5c58":"<a id=\"2\"><\/a> <br>\n## Data Description\nI only explain data features that we will use in this kernel.\n* **Aerial bombing Data description:**\n    * Mission Date: Date of mission\n    * Theater of Operations: Region in which active military operations are in progress; \"the army was in the field awaiting action\"; Example: \"he served in the Vietnam theater for three years\"\n    * Country: Country that makes mission or operation like USA\n    * Air Force: Name or id of air force unity like 5AF\n    * Aircraft Series: Model or type of aircraft like B24\n    * Callsign: Before bomb attack, message, code, announcement, or tune that is broadcast by radio.\n    * Takeoff Base: Takeoff airport name like Ponte Olivo Airfield \n    * Takeoff Location: takeoff region Sicily\n    * Takeoff Latitude: Latitude of takeoff region\n    * Takeoff Longitude: Longitude of takeoff region\n    * Target Country: Target country like Germany\n    * Target City: Target city like Berlin\n    * Target Type: Type of target like city area\n    * Target Industry: Target industy like town or urban\n    * Target Priority: Target priority like 1 (most)\n    * Target Latitude: Latitude of target \n    * Target Longitude: Longitude of target\n* **Weather Condition data description:**\n    * Weather station location:\n        * WBAN: Weather station number\n        * NAME: weather station name\n        * STATE\/COUNTRY ID: acronym of countries\n        * Latitude: Latitude of weather station\n        * Longitude: Longitude of weather station\n    * Weather:\n        * STA: eather station number (WBAN)\n        * Date: Date of temperature  measurement \n        * MeanTemp: Mean temperature\n        \n        \n        \n## Veri tan\u0131mlamas\u0131(TURKISH)\nBen sadece bu kernelde kullanaca\u011f\u0131m\u0131z data \u00f6zelliklerini anlat\u0131yorum.\n* **Havadan bombalama Veri a\u00e7\u0131klamas\u0131:**\n    * G\u00f6rev Tarihi: G\u00f6rev tarihi\n    * Harekat Tiyatrosu: Aktif askeri harekat\u0131n devam etti\u011fi b\u00f6lge; \"ordu sahada harekete ge\u00e7meyi bekliyordu\"; \u00d6rnek: \"Vietnam tiyatrosunda \u00fc\u00e7 y\u0131l g\u00f6rev yapt\u0131\"\n    * \u00dclke: ABD gibi misyon veya operasyon yapan \u00fclke\n    * Hava Kuvvetleri: 5AF gibi hava kuvvetleri birli\u011finin ad\u0131 veya kimli\u011fi\n    * U\u00e7ak Serisi: B24 gibi u\u00e7ak modeli veya tipi\n    * \u00c7a\u011fr\u0131 \u0130\u015fareti: Radyodan yay\u0131nlanan bombal\u0131 sald\u0131r\u0131, mesaj, kod, duyuru veya melodi \u00f6ncesi.\n    * Kalk\u0131\u015f \u00dcss\u00fc: Ponte Olivo Havaalan\u0131 gibi Kalk\u0131\u015f havaalan\u0131 ad\u0131\n    * Kalk\u0131\u015f Yeri: Kalk\u0131\u015f b\u00f6lgesi Sicilya\n    * Kalk\u0131\u015f Enlemi: Kalk\u0131\u015f b\u00f6lgesinin enlemi\n    * Kalk\u0131\u015f Boylam\u0131: Kalk\u0131\u015f b\u00f6lgesinin boylam\u0131\n    * Hedef \u00dclke: Almanya gibi hedef \u00fclke\n    * Hedef \u015eehir: Berlin gibi hedef \u015fehir\n    * Hedef T\u00fcr\u00fc: \u015eehir alan\u0131 gibi hedef t\u00fcr\u00fc\n    * Hedef End\u00fcstri: \u015eehir veya \u015fehir gibi end\u00fcstriyi hedefleyin\n    * Hedef \u00d6nceli\u011fi: 1 (en \u00e7ok) gibi hedef \u00f6nceli\u011fi\n    * Hedef Enlem: Hedefin enlemi\n    * Hedef Boylam\u0131: Hedefin Boylam\u0131\n* **Hava Durumu veri a\u00e7\u0131klamas\u0131:**\n    * Hava istasyonu konumu:\n        * WBAN: Hava durumu istasyonu numaras\u0131\n        * ADI: meteoroloji istasyonu ad\u0131\n        * DEVLET\/\u00dcLKE Kimli\u011fi: \u00fclkelerin k\u0131saltmas\u0131\n        * Enlem: Hava istasyonunun enlemi\n        * Boylam: Meteoroloji istasyonunun boylam\u0131\n    * Hava:\n        * STA: hava istasyonu numaras\u0131 (WBAN)\n        * Tarih: S\u0131cakl\u0131k \u00f6l\u00e7\u00fcm tarihi\n        * OrtalamaS\u0131cakl\u0131k: Ortalama s\u0131cakl\u0131k","d661c19a":"* Constant mean criteria: mean looks like constant as you can see from plot(black line) above . (yes stationary)\n* Second one is constant variance. It looks like constant. (yes stationary)\n* The test statistic is smaller than the 1% critical values so we can say with 99% confidence that this is a stationary series. (yes stationary)","8ff1d12e":"* Constant mean criteria: mean looks like constant as you can see from plot(black line) above . (yes stationary)\n* Second one is constant variance. It looks like constant. (yes stationary)\n* The test statistic is smaller than the 1% critical values so we can say with 99% confidence that this is a stationary series. (yes stationary)\n* We achieve stationary time series. However lets look at one more method to avoid trend and seasonality.\n    * Differencing method: It is one of the most common method. Idea is that take difference between time series and shifted time series. \n","f422ad94":"<a id=\"3\"><\/a> <br>\n## Data Cleaning\n* Aerial  Bombing data includes a lot of NaN value. Instead of usign them, I drop some NaN values. It does not only remove the uncertainty but it also easa visualization process.\n    * Drop countries that are NaN\n    * Drop if target longitude is NaN\n    * Drop if takeoff longitude is NaN\n    * Drop unused features\n* Weather Condition data does not need any cleaning. According to exploratory data analysis and visualization, we will choose certain location to examine deeper. However, lets put our data variables what we use only. \n\n## Veri temizleme(TURKISH)\n* Hava Bombalama verileri \u00e7ok say\u0131da NaN de\u011feri i\u00e7erir. Bunlar\u0131 kullanmak yerine baz\u0131 NaN de\u011ferlerini b\u0131rak\u0131yorum. Belirsizli\u011fi ortadan kald\u0131rmakla kalmaz, ayn\u0131 zamanda g\u00f6rselle\u015ftirme s\u00fcrecini de kolayla\u015ft\u0131r\u0131r.\n    * NaN olan \u00fclkeleri b\u0131rak\u0131n\n    * Hedef boylam NaN ise b\u0131rak\n    * Kalk\u0131\u015f boylam\u0131 NaN ise b\u0131rak\n    * Kullan\u0131lmayan \u00f6zellikleri b\u0131rak\n* Hava Durumu verilerinin herhangi bir temizli\u011fe ihtiyac\u0131 yoktur. Ke\u015fifsel veri analizine ve g\u00f6rselle\u015ftirmeye g\u00f6re, daha derine inmek i\u00e7in belirli bir yeri se\u00e7ece\u011fiz. Ancak, veri de\u011fi\u015fkenlerimizi sadece kulland\u0131\u011f\u0131m\u0131z\u0131 koyal\u0131m.","e8e53b7d":"* As you can see from plot above, our time series has seasonal variation. In summer, mean temperature is higher and in winter mean temperature is lower for each year.\n* Now lets check stationary of time series. We can check stationarity using the following methods: \n    * Plotting Rolling Statistics: We have a window lets say window size is 6 and then we find rolling mean and variance to check stationary.\n    * Dickey-Fuller Test: The test results comprise of a **Test Statistic** and some **Critical Values** for difference confidence levels. If the **test statistic** is less than the **critical value**, we can say that time series is stationary.","6522f19a":"* Lets focus **USA and BURMA war (ABD ve BURMA sava\u015f\u0131na odaklanal\u0131m)**\n* In this war USA bomb BURMA( KATHA city) from 1942 to 1945.(Bu sava\u015fta ABD, 1942'den 1945'e kadar BURMA'y\u0131 (KATHA \u015fehri) bombalad\u0131.)\n* The closest weather station to this war is **BINDUKURI** and it has temperature record from 1943 to 1945.( Bu sava\u015fa en yak\u0131n meteoroloji istasyonu **B\u0130NDUKURI** olup, 1943'ten 1945'e kadar s\u0131cakl\u0131k rekoruna sahiptir.)\n* Now lets visualize this situation. But before visualization, we need to make date features date time object.( \u015eimdi bu durumu g\u00f6rselle\u015ftirelim. Ancak g\u00f6rselle\u015ftirmeden \u00f6nce date \u00f6zelliklerini string yapmam\u0131z gerekiyor.)","b0b8cb5d":"<a id=\"5\"><\/a> <br>\n## Time Series Prediction with ARIMA( ARIMA ile Zaman Serisi Tahmini)\n* We will use most used method ARIMA (En \u00e7ok kullan\u0131lan ARIMA y\u00f6ntemini kullanaca\u011f\u0131z)\n* ARIMA :  AutoRegressive Integrated Moving Average. I will explain it detailed  at next parts.(ARIMA : Otoregresif Entegre Hareketli Ortalama. \u0130leriki b\u00f6l\u00fcmlerde detayl\u0131 anlataca\u011f\u0131m.)\n* The way that we will follow (\u0130zleyece\u011fimiz yol):  \n    * What is Time Series ?(Zaman Serisi nedir?)\n    * Stationarity of a Time Series(Bir Zaman Serisinin Dura\u011fanl\u0131\u011f\u0131)\n    * Make a Time Series Stationary?(Bir Zaman Serisini Dura\u011fan Hale Getirmek?)\n    * Forecasting a Time Series (Bir Zaman Serisini \u00d6ng\u00f6rme)","10ae120e":"<a id=\"4\"><\/a> <br>\n## Data Visualization\n* Lets start with basics of visualization that is understanding data.\n    * How many country which attacks\n    * Top target countries\n    * Top 10 aircraft series\n    * Takeoff base locations (Attack countries)\n    * Target locations (If you do not understand methods of pyplot look at my pyplot tutorial: https:\/\/www.kaggle.com\/kanncaa1\/plotly-tutorial-for-beginners)\n    * Bombing paths\n    * Theater of Operations\n    * Weather station locations\n    \n    \n    \n## Veri g\u00f6rselle\u015ftirme (Turk\u0131sh)\n* Verileri anlamak olan g\u00f6rselle\u015ftirmenin temelleri ile ba\u015flayal\u0131m.\n    * Sald\u0131ran ka\u00e7 \u00fclke var\n    * En \u00e7ok hedeflenen \u00fclkeler\n    * En iyi 10 u\u00e7ak serisi\n    * Kalk\u0131\u015f \u00fcss\u00fc konumlar\u0131 (Attack \u00fclkeleri)\n    * Hedef konumlar (Pyplot y\u00f6ntemlerini anlam\u0131yorsan\u0131z, pyplot \u00f6\u011freticime bak\u0131n: https:\/\/www.kaggle.com\/abdurrahmanplat\/plotly)\n    * Bombalama yollar\u0131\n    * Operasyon Tiyatrosu\n    * Hava istasyonu yerleri","8e3697ff":"* **Most used air craft: A36**\n    * <a href=\"http:\/\/imgbb.com\/\"><img src=\"http:\/\/image.ibb.co\/b3x66c\/a36.png\" alt=\"a36\" border=\"0\"><\/a>\n* Now lets visualize take off bases of countries who attack ( \u015eimdi sald\u0131ran \u00fclkelerin kalk\u0131\u015f \u00fcslerini g\u00f6rselle\u015ftirelim)\n    \n    * In plot below, blue color draw the attention, it is USA and red color is Great Britain (A\u015fa\u011f\u0131daki grafikte mavi renk dikkat \u00e7ekiyor, Amerika Birle\u015fik Devletleri ve k\u0131rm\u0131z\u0131 renk B\u00fcy\u00fck Britanya)","9f92c10a":"* As you can see, we have temperature measurement from 1943 to 1945.(G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi 1943'ten 1945'e kadar s\u0131cakl\u0131k \u00f6l\u00e7\u00fcmlerimiz var.)\n* Temperature ossilates between 12 and 32 degrees. ( S\u0131cakl\u0131k 12 ile 32 derece aras\u0131nda sal\u0131n\u0131m yapar.)\n* Temperature of  winter months is colder than  temperature of  summer months.(* K\u0131\u015f aylar\u0131n\u0131n s\u0131cakl\u0131\u011f\u0131 yaz aylar\u0131na g\u00f6re daha d\u00fc\u015f\u00fckt\u00fcr)","06dd1a32":"* lets predict and visualize all path and find mean squared error","d9371185":"* Our first criteria for stationary is constant mean. So we fail because mean is not constant as you can see from plot(black line) above . (no stationary)\n* Second one is constant variance. It looks like constant. (yes stationary)\n* Third one is that If the **test statistic** is less than the **critical value**, we can say that time series is stationary. Lets look:\n    * test statistic = -1.4 and critical values = {'1%': -3.439229783394421, '5%': -2.86545894814762, '10%': -2.5688568756191392}. Test statistic is bigger than the critical values. (no stationary)\n* As a result, we sure that our time series is not stationary.\n* Lets make time series stationary at the next part.","5792559d":"* Green line is mean temperature that is measured in Bindukuri. (Ye\u015fil \u00e7izgi Bindukuri cinsinden \u00f6l\u00e7\u00fclen ortalama s\u0131cakl\u0131kt\u0131r.)\n* Blue markers are bombing dates and bombing date temperature.(Mavi i\u015faretler bombalama tarihleri \u200b\u200bve bombalama tarihi s\u0131cakl\u0131\u011f\u0131d\u0131r.)\n* As it can be seen from plot, USA bomb at high temperatures.(Plottan da anla\u015f\u0131laca\u011f\u0131 gibi, y\u00fcksek s\u0131cakl\u0131klarda ABD bombalama yapm\u0131\u015ft\u0131r)\n    * The question is that can we predict future weather and according to this prediction can we know whether bombing will be done or not.(Soru \u015fu ki, gelecekteki hava durumunu tahmin edebilir miyiz ve bu tahmine g\u00f6re bombalaman\u0131n yap\u0131l\u0131p yap\u0131lmayaca\u011f\u0131n\u0131 bilebiliriz.)\n    * In order to answer this question lets first start with time series prediction.(Bu soruyu cevaplamak i\u00e7in \u00f6nce zaman serisi tahmini ile ba\u015flayal\u0131m.)\n  ","4e8a1f1a":"* Okey, now lets visualize bombing paths which country from which take off base bomb the which countries and cities.\n( Tamam, \u015fimdi hangi \u00fclkenin hangi \u00fclke ve \u015fehirleri bombalad\u0131\u011f\u0131 bombalama yollar\u0131n\u0131 g\u00f6rselle\u015ftirelim.)"}}