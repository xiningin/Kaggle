{"cell_type":{"ff9d382e":"code","2ea37a4f":"code","ad78fdbf":"code","f997c04f":"code","26fcf464":"code","37b829c1":"code","88af46ff":"code","16fd3e2b":"code","d4ff3140":"code","1279ce39":"code","6840f722":"code","d2414e3a":"code","58833579":"code","f89eab44":"code","ec39226a":"code","a17493b6":"code","a8a3defc":"code","ce8c71f8":"code","0f3207b1":"code","5abf4358":"code","ab19b493":"code","691de28b":"code","97b5d5e6":"code","180d1545":"code","477d9078":"code","1cbb7dc8":"code","2ee81388":"code","95fda8c2":"code","fab26a20":"code","92586d76":"code","f92375d7":"code","1f5f851d":"code","5f58736f":"code","9db86359":"markdown","7ca7cc1e":"markdown","92efdec1":"markdown","bb9f4993":"markdown","516eae63":"markdown","a1c99f88":"markdown"},"source":{"ff9d382e":"#import required libraries\nfrom sklearn.model_selection import train_test_split \nfrom sklearn import preprocessing\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","2ea37a4f":"df=pd.read_csv(\"..\/input\/cleaning-feature-engg-eda-rossmann-sales\/final_RossmannSales.csv\", index_col=0)","ad78fdbf":"df.head()","f997c04f":"#encoding State variables\np=0\nfor j in df[\"State\"].unique():\n   df[\"State\"]=np.where(df[\"State\"]==j,p,df[\"State\"])\n   p=p+1\ndf[\"State\"]=df[\"State\"].astype(int)","26fcf464":"#Splitting of time series dataset\ndf = df.sort_values(by=\"Date\")","37b829c1":"df.shape","88af46ff":"X_train=df[:int(df.shape[0]*80\/100)].drop(columns=[\"Date\",\"Sales\",\"CompetitionOpenSince\"])\nY_train=df[:int(df.shape[0]*80\/100)][\"Sales\"]\nX_test=df[int(df.shape[0]*80\/100):].drop(columns=[\"Date\",\"Sales\",\"CompetitionOpenSince\"])\nY_test=df[int(df.shape[0]*80\/100):][\"Sales\"]","16fd3e2b":"print(X_train.shape, Y_train.shape, X_test.shape, Y_test.shape)","d4ff3140":"from sklearn.linear_model import LinearRegression","1279ce39":"linear_reg_model=LinearRegression()\nlinear_reg_model.fit(X_train,Y_train)","6840f722":"y_pred=linear_reg_model.predict(X_test)\npred_df=pd.DataFrame({'Predictions':y_pred,'Actual':Y_test})\npred_df=pred_df.reset_index(drop=True)\npred_df.head()","d2414e3a":"plt.figure(figsize=(10,10))\npred_df[\"Actual\"][:25,].plot.line()\npred_df[\"Predictions\"][:25,].plot.line()\nplt.legend()\nplt.show()","58833579":"linear_reg_model.score(X_test,Y_test)","f89eab44":"from sklearn.linear_model import Lasso\nLasso_reg_model = Lasso(alpha=2)\nLasso_reg_model.fit(X_train,Y_train)","ec39226a":"y_pred=Lasso_reg_model.predict(X_test)\npred_df=pd.DataFrame({'Predictions':y_pred,'Actual':Y_test})\npred_df=pred_df.reset_index(drop=True)\npred_df.head()","a17493b6":"plt.figure(figsize=(10,10))\npred_df[\"Actual\"][:25,].plot.line()\npred_df[\"Predictions\"][:25,].plot.line()\nplt.legend()\nplt.show()","a8a3defc":"Lasso_reg_model.score(X_test,Y_test)","ce8c71f8":"import lightgbm as lgb\nbase_lgb_model = lgb.LGBMRegressor(n_leaves=50,\n                               n_estimators=700, \n                               max_depth=-1,  \n                               learning_rate=0.3, #0.1\n                               subsample=1,\n                               colsample_bytree=0.8,\n                               reg_alpha=0.1,\n                               reg_lambda=1)\n\nbase_lgb_model.fit(X_train, Y_train)","0f3207b1":"y_pred=base_lgb_model.predict(X_test)\npred_df=pd.DataFrame({'Predictions':y_pred,'Actual':Y_test})\npred_df=pred_df.reset_index(drop=True)\npred_df.head()","5abf4358":"plt.figure(figsize=(10,10))\npred_df[\"Actual\"][:25,].plot.line()\npred_df[\"Predictions\"][:25,].plot.line()\nplt.legend()\nplt.show()","ab19b493":"base_lgb_model.score(X_test,Y_test)","691de28b":"import random\ntime_features=df[[\"Year\",\"Month\",\"Day\",\t\"Week\",\t\"Season\", \"Promo\", \"Open\",\"Store\",\"Sales\",\"Date\"]]\n#Choose a random store\nx=random.randint(1,1115)\nprint(x)\ntime_features=time_features.loc[time_features['Store'] == x]","97b5d5e6":"plt.figure(figsize=(15,15))\nsns.set(style=\"whitegrid\")\nsns.lineplot(x=\"Month\", y=\"Sales\", data=time_features.loc[time_features['Year'] == 2013])","180d1545":"plt.figure(figsize=(15,15))\nsns.set(style=\"whitegrid\")\nsns.lineplot(x=\"Month\", y=\"Sales\", data=time_features.loc[time_features['Year'] == 2014])","477d9078":"plt.figure(figsize=(15,15))\nsns.set(style=\"whitegrid\")\nsns.lineplot(x=\"Month\", y=\"Sales\", data=time_features.loc[time_features['Year'] == 2015])","1cbb7dc8":"import tensorflow as tf\nimport keras\nimport keras.backend as kb","2ee81388":"time_target=time_features[\"Sales\"]\ntime_features=time_features.drop(columns=[\"Sales\",\"Date\"])","95fda8c2":"X_train=time_features[:int(time_features.shape[0]*80\/100)]\nY_train=time_target[:int(time_target.shape[0]*80\/100)]\nX_test=time_features[int(time_features.shape[0]*80\/100):int(df.shape[0]*95\/100)]\nY_test=time_target[int(time_target.shape[0]*80\/100):int(df.shape[0]*95\/100)]\nX_val=time_features[int(time_features.shape[0]*95\/100):]\nY_val=time_target[int(time_target.shape[0]*95\/100):]","fab26a20":"time_model=keras.models.Sequential()\ntime_model.add(keras.layers.Embedding(input_dim=2500, output_dim=4, input_length=8))\ntime_model.add(keras.layers.LSTM(256, return_sequences=True))\ntime_model.add(keras.layers.LSTM(256, return_sequences=True))\ntime_model.add(keras.layers.Dense(64, activation=\"relu\")) \ntime_model.add(keras.layers.Dense(1))","92586d76":"time_model.compile(optimizer=\"adam\",metrics=[\"mean_absolute_error\"],loss=\"mean_squared_error\")","f92375d7":"hist=time_model.fit(X_train,Y_train,batch_size=50,epochs=30,validation_data=(X_val,Y_val))","1f5f851d":"results=time_model.evaluate(X_test,Y_test)\nfor i in range(len(time_model.metrics_names)):\n  print(time_model.metrics_names[i],\":\",results[i])","5f58736f":"plt.plot(hist.history['loss'][:30])\nplt.plot(hist.history['val_loss'][:30])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Val'], loc='upper right')\nplt.show()","9db86359":"## Using Gradient Boosted Decision Trees to predict 'Sales'","7ca7cc1e":"## Time Series Analysis","92efdec1":"This is part 2 of predicting Rossmann Sales. It only deals with finding the best models for Rossmann Sales prediction.\n\n\nTo know more about the preprocessing steps, checkout https:\/\/www.kaggle.com\/amithanayak\/cleaning-feature-engg-eda-rossmann-sales","bb9f4993":"## Using Linear Regression to predict 'Sales'","516eae63":"## Using Lasso Regression to predict 'Sales'","a1c99f88":"as there are no clear cyclic trends of Sales against Time series, making RNN seems like a moot point"}}