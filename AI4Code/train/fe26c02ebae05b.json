{"cell_type":{"03d6ea87":"code","1369b686":"code","bc9dc8a9":"code","6198b2bc":"code","6d966136":"code","a64f3852":"code","158cf5ea":"code","a74ec953":"code","22c50894":"code","6f64af2a":"code","9ed3e4b6":"code","f5f830a4":"code","17c86e00":"code","629f0ce4":"code","8f5e5dab":"code","493503b3":"code","3a8d29bc":"code","f3a8b6f6":"code","b4cecc0f":"code","5a4cee68":"code","31555fb8":"code","8c7af6c0":"code","804e0536":"code","3874b32c":"code","4c84a3e0":"code","1dcbad5b":"code","98c009ff":"code","ee728718":"code","8176b85e":"code","8725cb83":"code","61d2e00c":"code","04b2c397":"code","38c93d83":"code","1b822ca6":"markdown","fa3f8891":"markdown","2ea19c7d":"markdown","e3948ad4":"markdown","52153a70":"markdown","c3a46e09":"markdown","7447b0a0":"markdown","dc79c661":"markdown","ebe16f0f":"markdown","a3116f5e":"markdown","020ee3db":"markdown","d22f346c":"markdown","21df2b95":"markdown","1f766b9e":"markdown","796eb3e5":"markdown","eb2e4794":"markdown"},"source":{"03d6ea87":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\nimport time \nfrom tqdm import tqdm\nfrom itertools import cycle\npd.set_option('max_columns', 50)\nplt.style.use('bmh')\ncolor_pal = plt.rcParams['axes.prop_cycle'].by_key()['color']\ncolor_cycle = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])","1369b686":"!ls -GFlash --color ..\/input\/m5-forecasting-accuracy\/","bc9dc8a9":"# Read in the data\nINPUT_DIR = '..\/input\/m5-forecasting-accuracy'\ncal = pd.read_csv(f'{INPUT_DIR}\/calendar.csv')\nstv = pd.read_csv(f'{INPUT_DIR}\/sales_train_validation.csv')\nss = pd.read_csv(f'{INPUT_DIR}\/sample_submission.csv')\nsellp = pd.read_csv(f'{INPUT_DIR}\/sell_prices.csv')","6198b2bc":"ss.head()","6d966136":"stv.head()","a64f3852":"d_cols = [c for c in stv.columns if 'd_' in c] # sales data columns\n\n# \u041d\u0438\u0436\u0435 \u043c\u044b \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438 \u0432 pandas:\n# 1. \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0442\u043e\u0432\u0430\u0440\n# 2. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430, \u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u0445\n# 3. \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0439\u0442\u0435 \u0442\u0430\u043a, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0441\u044f \u0441\u0442\u043e\u043b\u0431\u0435\u0446\n# 4. \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nstv.loc[stv['id'] == 'FOODS_3_090_CA_3_validation'] \\\n    .set_index('id')[d_cols] \\\n    .T \\\n    .plot(figsize=(15, 5),\n          title='FOODS_3_090_CA_3 sales by \"d\" number',\n          color=next(color_cycle))\nplt.legend('')\nplt.show()","158cf5ea":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044f \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c (\u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u044b \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442)\ncal[['d','date','event_name_1','event_name_2',\n     'event_type_1','event_type_2', 'snap_CA']].head()","a74ec953":"# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043e \u043d\u0430\u0448\u0438\u0445 \u0442\u043e\u0432\u0430\u0440\u0430\u0445\nexample = stv.loc[stv['id'] == 'FOODS_3_090_CA_3_validation'][d_cols].T\nexample = example.rename(columns={8412:'FOODS_3_090_CA_3'}) # \u041d\u0430\u0437\u043e\u0432\u0435\u043c \u0438\u0445 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\nexample = example.reset_index().rename(columns={'index': 'd'}) # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \"d\" \u0438\u043d\u0434\u0435\u043a\u0441\nexample = example.merge(cal, how='left', validate='1:1')\nexample.set_index('date')['FOODS_3_090_CA_3'] \\\n    .plot(figsize=(15, 5),\n          color=next(color_cycle),\n          title='FOODS_3_090_CA_3 sales by actual sale dates')\nplt.show()\n\n# \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0430\u043c\u044b\u0445 \u043f\u0440\u043e\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432\nexample2 = stv.loc[stv['id'] == 'HOBBIES_1_234_CA_3_validation'][d_cols].T\nexample2 = example2.rename(columns={6324:'HOBBIES_1_234_CA_3'}) # \u041d\u0430\u0437\u043e\u0432\u0435\u043c \u0438\u0445 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\nexample2 = example2.reset_index().rename(columns={'index': 'd'}) # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \"d\" \u0438\u043d\u0434\u0435\u043a\u0441\nexample2 = example2.merge(cal, how='left', validate='1:1')\n\nexample3 = stv.loc[stv['id'] == 'HOUSEHOLD_1_118_CA_3_validation'][d_cols].T\nexample3 = example3.rename(columns={6776:'HOUSEHOLD_1_118_CA_3'}) # \u041d\u0430\u0437\u043e\u0432\u0435\u043c \u0438\u0445 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\nexample3 = example3.reset_index().rename(columns={'index': 'd'}) # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \"d\" \u0438\u043d\u0434\u0435\u043a\u0441\nexample3 = example3.merge(cal, how='left', validate='1:1')","22c50894":"examples = ['FOODS_3_090_CA_3','HOBBIES_1_234_CA_3','HOUSEHOLD_1_118_CA_3']\nexample_df = [example, example2, example3]\nfor i in [0, 1, 2]:\n    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 3))\n    example_df[i].groupby('wday').mean()[examples[i]] \\\n        .plot(kind='line',\n              title='average sale: day of week',\n              lw=5,\n              color=color_pal[0],\n              ax=ax1)\n    example_df[i].groupby('month').mean()[examples[i]] \\\n        .plot(kind='line',\n              title='average sale: month',\n              lw=5,\n              color=color_pal[4],\n\n              ax=ax2)\n    example_df[i].groupby('year').mean()[examples[i]] \\\n        .plot(kind='line',\n              lw=5,\n              title='average sale: year',\n              color=color_pal[2],\n\n              ax=ax3)\n    fig.suptitle(f'Trends for item: {examples[i]}',\n                 size=20,\n                 y=1.1)\n    plt.tight_layout()\n    plt.show()","6f64af2a":"twenty_examples = stv.sample(20, random_state=529) \\\n        .set_index('id')[d_cols] \\\n    .T \\\n    .merge(cal.set_index('d')['date'],\n           left_index=True,\n           right_index=True,\n            validate='1:1') \\\n    .set_index('date')","9ed3e4b6":"fig, axs = plt.subplots(10, 2, figsize=(15, 20))\naxs = axs.flatten()\nax_idx = 0\nfor item in twenty_examples.columns:\n    twenty_examples[item].plot(title=item,\n                              color=next(color_cycle),\n                              ax=axs[ax_idx])\n    ax_idx += 1\nplt.tight_layout()\nplt.show()","f5f830a4":"stv['cat_id'].unique()","17c86e00":"stv.groupby('cat_id').count()['id'] \\\n    .sort_values() \\\n    .plot(kind='barh', figsize=(15, 5), title='Count of Items by Category')\nplt.show()","629f0ce4":"past_sales = stv.set_index('id')[d_cols] \\\n    .T \\\n    .merge(cal.set_index('d')['date'],\n           left_index=True,\n           right_index=True,\n            validate='1:1') \\\n    .set_index('date')\n\n\nfor i in stv['cat_id'].unique():\n    items_col = [c for c in past_sales.columns if i in c]\n    past_sales[items_col] \\\n        .sum(axis=1) \\\n        .plot(figsize=(15, 5),\n              alpha=0.8,\n              title='Total Sales by Item Type')\nplt.legend(stv['cat_id'].unique())\nplt.show()","8f5e5dab":"past_sales_clipped = past_sales.clip(0, 1)\nfor i in stv['cat_id'].unique():\n    items_col = [c for c in past_sales.columns if i in c]\n    (past_sales_clipped[items_col] \\\n        .mean(axis=1) * 100) \\\n        .plot(figsize=(15, 5),\n              alpha=0.8,\n              title='Inventory Sale Percentage by Date',\n              style='.')\nplt.ylabel('% of Inventory with at least 1 sale')\nplt.legend(stv['cat_id'].unique())\nplt.show()","493503b3":"store_list = sellp['store_id'].unique()\nfor s in store_list:\n    store_items = [c for c in past_sales.columns if s in c]\n    past_sales[store_items] \\\n        .sum(axis=1) \\\n        .rolling(90).mean() \\\n        .plot(figsize=(15, 5),\n              alpha=0.8,\n              title='Rolling 90 Day Average Total Sales (10 stores)')\nplt.legend(store_list)\nplt.show()","3a8d29bc":"fig, axes = plt.subplots(5, 2, figsize=(15, 10), sharex=True)\naxes = axes.flatten()\nax_idx = 0\nfor s in store_list:\n    store_items = [c for c in past_sales.columns if s in c]\n    past_sales[store_items] \\\n        .sum(axis=1) \\\n        .rolling(7).mean() \\\n        .plot(alpha=1,\n              ax=axes[ax_idx],\n              title=s,\n              lw=3,\n              color=next(color_cycle))\n    ax_idx += 1\n# plt.legend(store_list)\nplt.suptitle('Weekly Sale Trends by Store ID')\nplt.tight_layout()\nplt.show()","f3a8b6f6":"# ----------------------------------------------------------------------------\n# Author:  Nicolas P. Rougier\n# License: BSD\n# ----------------------------------------------------------------------------\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\n\ndef calmap(ax, year, data):\n    ax.tick_params('x', length=0, labelsize=\"medium\", which='major')\n    ax.tick_params('y', length=0, labelsize=\"x-small\", which='major')\n\n    # Month borders\n    xticks, labels = [], []\n    start = datetime(year,1,1).weekday()\n    for month in range(1,13):\n        first = datetime(year, month, 1)\n        last = first + relativedelta(months=1, days=-1)\n\n        y0 = first.weekday()\n        y1 = last.weekday()\n        x0 = (int(first.strftime(\"%j\"))+start-1)\/\/7\n        x1 = (int(last.strftime(\"%j\"))+start-1)\/\/7\n\n        P = [ (x0,   y0), (x0,    7),  (x1,   7),\n              (x1,   y1+1), (x1+1,  y1+1), (x1+1, 0),\n              (x0+1,  0), (x0+1,  y0) ]\n        xticks.append(x0 +(x1-x0+1)\/2)\n        labels.append(first.strftime(\"%b\"))\n        poly = Polygon(P, edgecolor=\"black\", facecolor=\"None\",\n                       linewidth=1, zorder=20, clip_on=False)\n        ax.add_artist(poly)\n    \n    ax.set_xticks(xticks)\n    ax.set_xticklabels(labels)\n    ax.set_yticks(0.5 + np.arange(7))\n    ax.set_yticklabels([\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"])\n    ax.set_title(\"{}\".format(year), weight=\"semibold\")\n    \n    # Clearing first and last day from the data\n    valid = datetime(year, 1, 1).weekday()\n    data[:valid,0] = np.nan\n    valid = datetime(year, 12, 31).weekday()\n    # data[:,x1+1:] = np.nan\n    data[valid+1:,x1] = np.nan\n\n    # Showing data\n    ax.imshow(data, extent=[0,53,0,7], zorder=10, vmin=-1, vmax=1,\n              cmap=\"RdYlBu_r\", origin=\"lower\", alpha=.75)","b4cecc0f":"print('The lowest sale date was:', past_sales.sum(axis=1).sort_values().index[0],\n     'with', past_sales.sum(axis=1).sort_values().values[0], 'sales')\nprint('The lowest sale date was:', past_sales.sum(axis=1).sort_values(ascending=False).index[0],\n     'with', past_sales.sum(axis=1).sort_values(ascending=False).values[0], 'sales')","5a4cee68":"from sklearn.preprocessing import StandardScaler\nsscale = StandardScaler()\npast_sales.index = pd.to_datetime(past_sales.index)\nfor i in stv['cat_id'].unique():\n    fig, axes = plt.subplots(3, 1, figsize=(20, 8))\n    items_col = [c for c in past_sales.columns if i in c]\n    sales2013 = past_sales.loc[past_sales.index.isin(pd.date_range('31-Dec-2012',\n                                                                   periods=371))][items_col].mean(axis=1)\n    vals = np.hstack(sscale.fit_transform(sales2013.values.reshape(-1, 1)))\n    calmap(axes[0], 2013, vals.reshape(53,7).T)\n    sales2014 = past_sales.loc[past_sales.index.isin(pd.date_range('30-Dec-2013',\n                                                                   periods=371))][items_col].mean(axis=1)\n    vals = np.hstack(sscale.fit_transform(sales2014.values.reshape(-1, 1)))\n    calmap(axes[1], 2014, vals.reshape(53,7).T)\n    sales2015 = past_sales.loc[past_sales.index.isin(pd.date_range('29-Dec-2014',\n                                                                   periods=371))][items_col].mean(axis=1)\n    vals = np.hstack(sscale.fit_transform(sales2015.values.reshape(-1, 1)))\n    calmap(axes[2], 2015, vals.reshape(53,7).T)\n    plt.suptitle(i, fontsize=30, x=0.4, y=1.01)\n    plt.tight_layout()\n    plt.show()","31555fb8":"fig, ax = plt.subplots(figsize=(15, 5))\nstores = []\nfor store, d in sellp.query('item_id == \"FOODS_3_090\"').groupby('store_id'):\n    d.plot(x='wm_yr_wk',\n          y='sell_price',\n          style='.',\n          color=next(color_cycle),\n          figsize=(15, 5),\n          title='FOODS_3_090 sale price over time',\n         ax=ax,\n          legend=store)\n    stores.append(store)\n    plt.legend()\nplt.legend(stores)\nplt.show()","8c7af6c0":"sellp['Category'] = sellp['item_id'].str.split('_', expand=True)[0]\nfig, axs = plt.subplots(1, 3, figsize=(15, 4))\ni = 0\nfor cat, d in sellp.groupby('Category'):\n    ax = d['sell_price'].apply(np.log1p) \\\n        .plot(kind='hist',\n                         bins=20,\n                         title=f'Distribution of {cat} prices',\n                         ax=axs[i],\n                                         color=next(color_cycle))\n    ax.set_xlabel('Log(price)')\n    i += 1\nplt.tight_layout()","804e0536":"sell_prices = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')\ncalendar = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv')\nsales_train_validation = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_evaluation.csv')","3874b32c":"sales_data = pd.DataFrame(sales_train_validation).reset_index()\nfor i in range(1942, 1972):\n    sales_data['d_' + str(i)] = 0","4c84a3e0":"sell_prices = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv')\nsell_prices['id'] = sell_prices['item_id'] + '_' + sell_prices['store_id']\nsell_prices = sell_prices.pivot(index='id', columns = 'wm_yr_wk', values = 'sell_price').reset_index()\nsell_prices = sell_prices.fillna(method='bfill', axis=1)\ntest = sales_data['item_id'] + '_' + sales_data['store_id']\nsell_prices = sell_prices.set_index('id')\nsell_prices = sell_prices.reindex(test)\nsell_prices = sell_prices.reset_index()","1dcbad5b":"labels = calendar[['d', 'event_name_1', 'event_name_2', 'snap_CA', 'snap_TX', 'snap_WI', 'wday', 'month', 'year', 'wm_yr_wk']].reset_index()\nlabels = labels.fillna(0)\n#labels['wm_yr_wk'] = int(labels['wm_yr_wk'])\nlabels['event_name_1'] = labels['event_name_1'].astype('str')\nlabels['event_name_2'] = labels['event_name_2'].astype('str')","98c009ff":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder=LabelEncoder()\nlabel_encoder = label_encoder.fit(labels['event_name_1'])\nlabel_encoded_event1 = label_encoder.transform(labels['event_name_1'])\nlabel_encoder = label_encoder.fit(labels['event_name_2'])\nlabel_encoded_event2 = label_encoder.transform(labels['event_name_2'])\nlabels['event_name_1_encode'] = label_encoded_event1\nlabels['event_name_2_encode'] = label_encoded_event2","ee728718":"#lgbm Model\nparams = {\n\n#         'boosting_type': 'gbdt',\n        'metric': 'rmse',\n        'objective': 'poisson',\n        'n_jobs': -1,\n        'seed': 20,\n        'learning_rate': 0.1,\n        'alpha': 0.1,\n        'lambda': 0.1,\n        'bagging_fraction': 0.66,\n        'bagging_freq': 2, \n        'colsample_bytree': 0.77\n}","8176b85e":"results = []\nss = pd.DataFrame(sample_submission)","8725cb83":"ss","61d2e00c":"import lightgbm as lgb","04b2c397":"for i in tqdm(range(0, len(sales_data))):\n    temp = pd.DataFrame(sales_data.loc[i][7:]).reset_index()\n    temp = temp.rename(columns = {\"index\": \"d\", i: \"sales\"})\n    sales_all = labels.merge(temp, on=[\"d\"])\n    sales_all = sales_all.merge(sell_prices.reset_index().loc[i], on=['wm_yr_wk'])\n\n    sales_all['lag_28'] = sales_all['sales'].shift(28)\n    \n    sales_all['rolling_std_t7'] = sales_all[i].transform(lambda x: x.rolling(7).std())\n    sales_all['rolling_std_t30'] = sales_all[i].transform(lambda x: x.rolling(30).std())\n    \n    sales_all['rolling_mean_7'] = sales_all['sales'].transform(lambda x: x.shift(28).rolling(7).mean())\n    sales_all['rolling_mean_30'] = sales_all['sales'].transform(lambda x: x.shift(28).rolling(30).mean())\n    sales_all['rolling_mean_60'] = sales_all['sales'].transform(lambda x: x.shift(28).rolling(60).mean())\n    \n    sales_all['lag_price_t1'] = sales_all[i].transform(lambda x: x.shift(1))   \n    sales_all['price_change_t1'] = (sales_all['lag_price_t1'] - sales_all[i]) \/ sales_all['lag_price_t1']\n    \n    sales_all.drop(['lag_price_t1'], inplace = True, axis = 1)\n    \n    features = ['event_name_1_encode', 'event_name_2_encode', 'snap_' + sales_data['state_id'][i]\n                , 'wday','month', 'year'\n                , 'lag_28'\n                , 'rolling_std_t7', 'rolling_std_t30'\n                , 'rolling_mean_7', 'rolling_mean_30', 'rolling_mean_60'\n                , 'price_change_t1', i]\n    features_sales = ['event_name_1_encode', 'event_name_2_encode', 'snap_' + sales_data['state_id'][i]\n                , 'wday','month', 'year'\n                , 'lag_28'\n                , 'rolling_std_t7', 'rolling_std_t30'\n                , 'rolling_mean_7', 'rolling_mean_30', 'rolling_mean_60'\n                , 'price_change_t1',i, 'sales']\n    \n    sales_all[features_sales] = sales_all[features_sales].applymap(float)\n\n    X_train = lgb.Dataset(sales_all[features][0:1940]\n                      , label = sales_all[['sales']][0:1940])\n    clf = lgb.train(params, X_train)\n    y_pred = clf.predict(sales_all[features][1941:])\n   \n    ss.loc[i+30490, 1:] = y_pred","38c93d83":"ss.to_csv(\"submission.csv\", index=False)","1b822ca6":"\u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0432\u043e\u0434 \u043f\u043e \u044d\u0442\u0438\u043c heapmap'\u0430\u043c:\n- \u0412 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0441\u044f\u0446\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043a\u0443\u043f\u043e\u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u043f\u0438\u0442\u0430\u043d\u0438\u044f, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442\u0441\u044f. \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c, \u044d\u0442\u043e \u043f\u043e\u0442\u043e\u043c\u0443, \u0447\u0442\u043e \u043b\u044e\u0434\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0443 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043c\u0435\u0441\u044f\u0446\u0430?\n- Household and Hobby \u0442\u043e\u0432\u0430\u0440\u044b \u043f\u0440\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u0432 \u044f\u043d\u0432\u0430\u0440\u0435 - \u043f\u043e\u0441\u043b\u0435 \u043e\u043a\u043e\u043d\u0447\u0430\u043d\u0438\u044f \u043a\u0443\u0440\u043e\u0440\u0442\u043d\u043e\u0433\u043e \u0441\u0435\u0437\u043e\u043d\u0430.","fa3f8891":"# Data Files\n- `calendar.csv` - \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0430\u0442\u0430\u0445 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0442\u043e\u0432\u0430\u0440\u043e\u0432.\n- `sales_train_validation.csv` - \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u0445 \u0437\u0430 \u0434\u0435\u043d\u044c \u043f\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0443 \u0438 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0443 [d_1 - d_1913]\n- `sample_submission.csv` - \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430\n- `sell_prices.csv` - \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0446\u0435\u043d\u0435 \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0445 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u0438 \u0434\u0430\u0442\u0435.\n- `sales_train_evaluation.csv` - \u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0441 [d_1 - d_1941] (labels used for the Public leaderboard)","2ea19c7d":"## \u0421\u043c\u0435\u0440\u0436\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0434\u0430\u0442\u0430\u043c\u0438\n- \u041d\u0430\u043c \u0434\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044c \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0438 \u0431\u0443\u0434\u0443\u0449\u0438\u0445 \u0434\u0430\u0442\u0430\u0445.\n- \u0414\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u043b\u0435\u043d\u0434\u0430\u0440\u044f \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043d\u0430\u0448\u0438\u0445 \u0434\u043d\u0435\u0439\n- \u041e\u0442\u0441\u044e\u0434\u0430 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043d\u0430\u0439\u0442\u0438 \u0435\u0436\u0435\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0438 \u0433\u043e\u0434\u043e\u0432\u044b\u0435 \u0442\u0435\u043d\u0434\u0435\u043d\u0446\u0438\u0438.","e3948ad4":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b-\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432\n- \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0441\u043e\u0431\u0435\u0440\u0435\u043c \u0432\u0441\u0435 \u0432\u043c\u0435\u0441\u0442\u0435, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c 20 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043e\u0432 \u0438 \u0438\u0445 \u043f\u0440\u043e\u0434\u0430\u0436\u0438.\n- \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0441 \u044d\u0442\u0438\u0445 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432:\n    - \u041e\u0431\u044b\u0447\u043d\u043e \u0442\u043e\u0432\u0430\u0440 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d \u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0438\u043e\u0434\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438.\n    - \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b \u043f\u0440\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e 1 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u0432 \u0434\u0435\u043d\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0445 \u043e\u0447\u0435\u043d\u044c \u0441\u043b\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c.\n    - \u041d\u0430 \u0434\u0440\u0443\u0433\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u0432\u0441\u043f\u043b\u0435\u0441\u043a \u0438\u0445 \u0441\u043f\u0440\u043e\u0441\u0430. \u041a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043d\u0430\u043c \"\u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f\" \u043c\u043e\u0433\u0443\u0442 \u043f\u043e\u043c\u043e\u0447\u044c \u0441 \u044d\u0442\u0438\u043c.","52153a70":"# Heatmap Calendar \u043f\u0440\u043e\u0434\u0430\u0436","c3a46e09":"# \u0426\u0435\u043d\u044b \u043f\u0440\u043e\u0434\u0430\u0436\u0438\n\u041d\u0430\u043c \u0434\u0430\u043d\u044b \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0446\u0435\u043d\u044b \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438. \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0430\u0448 \u043f\u0440\u0438\u043c\u0435\u0440 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0440\u0430\u043d\u0435\u0435.\n- \u041a\u0430\u0436\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0446\u0435\u043d\u0430 \u043d\u0430 \u044d\u0442\u043e\u0442 \u0442\u043e\u0432\u0430\u0440 \u0440\u0430\u0441\u0442\u0435\u0442.\n- \u0412 \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u0445 \u0440\u0430\u0437\u043d\u044b\u0435 \u0446\u0435\u043d\u044b.","7447b0a0":"\u041f\u043e\u0445\u043e\u0436\u0435, \u0447\u0442\u043e \u0432 \u0434\u0435\u043d\u044c \u0420\u043e\u0436\u0434\u0435\u0441\u0442\u0432\u0430 \u0432\u043e\u043b\u043c\u0430\u0440\u0442\u044b \u0437\u0430\u043a\u0440\u044b\u0442\u044b. \u0421\u0430\u043c\u044b\u0439 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0441\u043f\u0440\u043e\u0441 \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0448\u0435\u043b\u0441\u044f \u043d\u0430 \u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435, 6 \u043c\u0430\u0440\u0442\u0430 2016 \u0433\u043e\u0434\u0430. \u0427\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u0432 \u044d\u0442\u043e\u0442 \u0434\u0435\u043d\u044c?[\u0441\u0435\u0434\u044c\u043c\u044b\u0435 \u0434\u0435\u0431\u0430\u0442\u044b \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432 \u0432 \u043f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u044b \u043e\u0442 \u0414\u0435\u043c\u043e\u043a\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u0430\u0440\u0442\u0438\u0438, \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 CNN \u0432\u043e \u0424\u043b\u0438\u043d\u0442\u0435, \u0448\u0442\u0430\u0442 \u041c\u0438\u0447\u0438\u0433\u0430\u043d] (https: \/\/ www.onthisday.com\/date\/2016\/march\/6)","dc79c661":"# \u041f\u0440\u043e\u0434\u0430\u0436\u0438 \u043f\u043e \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u043c\n\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e 10 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u043c. \u041a\u0430\u043a\u043e\u0432\u044b \u043e\u0431\u0449\u0438\u0435 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u043f\u043e \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u043c?\n- \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u043e\u0434\u043d\u0438 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b, \u0447\u0435\u043c \u0434\u0440\u0443\u0433\u0438\u0435.\n- \u041a\u0430\u0436\u0435\u0442\u0441\u044f \u0447\u0442\u043e CA_2 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u043f\u043e\u0441\u043b\u0435 2015 \u043f\u043e\u0439\u0434\u0443\u0442 \u0432\u0432\u0435\u0440\u0445","ebe16f0f":"# M5 Forecasting Challenge\n\u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043c\u0435\u0442\u043a\u0438:\n- \u0415\u0441\u0442\u044c \u0434\u0432\u0430 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442 Wal-Mart: **Accuracy** and **Uncertainty**\n    - \u0410ccuracy \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0443: **Weighted Root Mean Squared Scaled Error** (RMSSE)\n    - Uncertainty \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0443: **Weighted Scaled Pinball Loss** (WSPL)\n- \u041d\u0430\u043c \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u0445 Wal-Mart\n- \u0414\u0430\u043d\u043d\u044b\u0435 \u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b \u0432 \u0442\u0440\u0435\u0445 \u0448\u0442\u0430\u0442\u0430\u0445 \u0421\u0428\u0410 (\u041a\u0430\u043b\u0438\u0444\u043e\u0440\u043d\u0438\u044f, \u0422\u0435\u0445\u0430\u0441 \u0438 \u0412\u0438\u0441\u043a\u043e\u043d\u0441\u0438\u043d) \u0438 \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0442\u043e\u0432\u0430\u0440\u0430, \u043e\u0442\u0434\u0435\u043b, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432 \u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u0445.\n- \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0443 \u043d\u0435\u0433\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u044f\u0441\u043d\u044f\u044e\u0449\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0446\u0435\u043d\u0430, \u0430\u043a\u0446\u0438\u0438, \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 \u0438 \u043e\u0441\u043e\u0431\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f.","a3116f5e":"# \u0427\u0442\u043e \u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c?\n\u041c\u044b \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 28 \u0434\u043d\u0435\u0439. \u0421\u0430\u0431\u043c\u0438\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435:\n- \u0421\u0442\u043e\u043b\u0431\u0446\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 28 \u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430. \u041c\u044b \u043d\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u044d\u0442\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043d\u044b\u0435 \u0434\u043d\u0438 \u043d\u0430\u0448\u0438\u043c\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430\u043c\u0438.\n- \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442. \u042d\u0442\u043e\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u043e\u0431\u0449\u0430\u0435\u0442 \u043d\u0430\u043c \u0442\u0438\u043f, \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430. \u041c\u044b \u043d\u0435 \u0437\u043d\u0430\u0435\u043c, \u0447\u0442\u043e \u0438\u043c\u0435\u043d\u043d\u043e \u044d\u0442\u043e \u0437\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b.","020ee3db":"\u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u0438\u0441\u0442\u043e\u0440\u0438\u044f \u043f\u0440\u043e\u0434\u0430\u0436 \u0432  `sales_train_validation` \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435.\n- \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u0442 \u0438\u0437 \u0434\u043d\u0435\u0439 d_1 to d_1913. \u041d\u0430\u043c \u0434\u0430\u0435\u0442\u0441\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u0434\u0435\u043b\u0430, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438, \u0448\u0442\u0430\u0442\u0430 \u0438 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430.\n- d_1914 - d_1941 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 `validation` \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u044d\u0442\u0430\u043f\u0435 1\n- d_1942 - d_1969 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 `evaluation` \u0441\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u0441\u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c \u0434\u043b\u044f \u043e\u043a\u043e\u043d\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0430\u0447\u0435\u0442\u0430 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0439.","d22f346c":"# \u041f\u0440\u043e\u0434\u0430\u0436\u0438 \u0441 \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u043e\u0439 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c\n- \u0422\u0435\u043f\u0435\u0440\u044c, \u043a\u043e\u0433\u0434\u0430 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043d\u0430\u0448 \u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u043e\u0432\u0430\u0440\u0430, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043e\u043d \u043f\u0440\u043e\u0434\u0430\u0435\u0442\u0441\u044f:\n    - \u0414\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438\n    - \u041c\u0435\u0441\u044f\u0446\n    - \u0413\u043e\u0434","21df2b95":"# \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0432\u043e\u0434\u044b \u043f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443\n- \u041c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c, \u0447\u0442\u043e \u0432 \u043f\u043e\u0441\u0442\u0430\u0432\u043a\u0443 \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u043d\u044c\u0448\u0435 \u043d\u0435 \u0431\u044b\u043b\u043e. \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u044e\u0442 \u043f\u0440\u043e\u0434\u0430\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e.\n- \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u043f\u0440\u043e\u0434\u0430\u0436, \u043d\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u0442\u043e\u0432\u0430\u0440 \u043f\u0440\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0438\u043b\u0438 \u043d\u0435 \u043f\u0440\u043e\u0434\u0430\u0435\u0442\u0441\u044f (0 -> \u043d\u0435 \u043f\u0440\u043e\u0434\u0430\u0435\u0442\u0441\u044f, >0 -> \u043f\u0440\u043e\u0434\u0430\u0435\u0442\u0441\u044f)\n- \u042d\u0442\u043e\u0442 \u0433\u0440\u0430\u0444\u0438\u043a \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u043c, \u0447\u0442\u043e \u043c\u043d\u043e\u0433\u0438\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u043e \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0438\u043d\u0432\u0435\u043d\u0442\u0430\u0440\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043d\u043e\u0433\u0438\u0435 \u0438\u0437 \u043d\u0438\u0445 \u043d\u0435 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u044e\u0442 \u043f\u0440\u043e\u0434\u0430\u0436\u0443 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.","1f766b9e":"# \u041a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0441 \u0442\u0435\u0447\u0435\u043d\u0438\u0435\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u043e \u0442\u0438\u043f\u0443\n- \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0438\u043f\u043e\u0432 \u0442\u043e\u0432\u0430\u0440\u043e\u0432:\n    - Hobbies\n    - Household\n    - Foods\n- \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u043e\u0431\u0449\u0435\u0433\u043e \u0441\u043f\u0440\u043e\u0441\u0430 \u0441 \u0442\u0435\u0447\u0435\u043d\u0438\u0435\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430","796eb3e5":"\u0412\u0437\u0433\u043b\u044f\u043d\u0443\u0432 \u043d\u0430 \u0442\u0435 \u0436\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u043a\u043e\u043b\u044c\u0437\u044f\u0449\u0438\u0439 7-\u0434\u043d\u0435\u0432\u043d\u044b\u0439 \u043e\u0431\u0449\u0438\u0439 \u043e\u0431\u044a\u0435\u043c \u0441\u043f\u0440\u043e\u0441\u0430 \u043f\u043e \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u043c. \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0432 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u0445 \u0440\u0435\u0437\u043a\u043e \u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u043f\u0440\u043e\u0441: \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043c\u0430\u0433\u0430\u0437\u0438\u043d \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u043b\u0441\u044f \u0438\u043b\u0438 \u043f\u043e\u0431\u043b\u0438\u0437\u043e\u0441\u0442\u0438 \u043f\u043e\u044f\u0432\u0438\u043b\u0441\u044f \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442. \u0412 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u044d\u0442\u043e \u0432\u0430\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0441\u043f\u0440\u043e\u0441\u0430.","eb2e4794":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0437 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u0430\n- \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0442\u043e\u0432\u0430\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0434\u0430\u0435\u0442\u0441\u044f, \u0438 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0435\u0433\u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.\n- `FOODS_3_090_CA_3_validation` \u043f\u0440\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043c\u043d\u043e\u0433\u043e\n- \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u0434\u043d\u0438, \u043a\u043e\u0433\u0434\u0430 \u0442\u043e\u0432\u0430\u0440 \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d, \u0430 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u044e\u0442\u0441\u044f."}}