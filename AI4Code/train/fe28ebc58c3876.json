{"cell_type":{"b7b70b59":"code","98726560":"code","ee8c1e50":"code","a9318050":"code","c393be3d":"code","fc7608cf":"code","dc3c2206":"code","02a272d5":"code","4798ad3a":"code","b81eb83c":"code","4ebd4e69":"code","ddde9f10":"code","dd1349df":"code","02ead452":"code","851d3570":"code","3f687b9f":"code","e5369b30":"code","bbd745dd":"code","cbfb8206":"code","3b0070a1":"code","9ce0f496":"markdown","c09b2067":"markdown","e43d80a6":"markdown","3fcb4ccc":"markdown","5e006e08":"markdown","1d0c780e":"markdown","6600abcb":"markdown","0b7d1433":"markdown","11720572":"markdown","0f543b4d":"markdown","4177f0b2":"markdown"},"source":{"b7b70b59":"import pandas as pd\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns","98726560":"movies = pd.read_csv('\/kaggle\/input\/movie-lens-small-latest-dataset\/movies.csv')\nratings = pd.read_csv('\/kaggle\/input\/movie-lens-small-latest-dataset\/ratings.csv')","ee8c1e50":"movies.head()","a9318050":"ratings.head()","c393be3d":"#CREATING NEW DATASET\ndf = ratings.pivot(index = 'movieId', columns = 'userId', values = 'rating')\ndf.head()","fc7608cf":"#filling null values\ndf = df.fillna(0)\ndf.head()","dc3c2206":"no_user_voted = ratings.groupby('movieId')['rating'].agg('count')\nno_user_voted","02a272d5":"no_movies_voted = ratings.groupby('userId')['rating'].agg('count')\nno_movies_voted","4798ad3a":"# setting movie rating threshold \nplt.figure(figsize = (10,10))\nsns.FacetGrid(df, size = 8)\nv = sns.scatterplot(x = no_user_voted.index,y = no_user_voted,palette = \"flare\")\nv.axhline(y= 10, linewidth=4, color='r', linestyle= '--')\nplt.show()","b81eb83c":"#setting movie_Rating threshold 10\ndf = df.loc[no_user_voted[no_user_voted > 10].index, :]\ndf","4ebd4e69":"#user rating threshold\nplt.figure(figsize = (10,10))\nsns.FacetGrid(df, size = 8)\nv = sns.scatterplot(x = no_movies_voted.index,y = no_movies_voted,palette = \"flare\")\nv.axhline(y= 50, linewidth=4, color='r', linestyle= '--')\nplt.show()","ddde9f10":"#setting user_rating threshold\ndf = df.loc[:, no_movies_voted[no_movies_voted > 50].index]\ndf","dd1349df":"df1 = df\ndf1","02ead452":"#remove sparsity\ndf2 = csr_matrix(df.values)\ndf.reset_index(inplace = True)","851d3570":"#creating model using knn\nfrom sklearn.neighbors import NearestNeighbors\nknn = NearestNeighbors(metric = 'cosine', algorithm = 'brute', n_neighbors = 20, n_jobs = -1)\nknn.fit(df2)","3f687b9f":"#creating function for recommendation\nglobal df\ndef recommend(movie_name):\n    movies_to_recommend = 10\n    movie_list = movies[movies['title'].str.contains(movie_name)]\n    if len(movie_list):\n        movie_id = movie_list.iloc[0]['movieId']\n        movie_id = df1[df1['movieId'] == movie_id].index[0]\n        \n        distances, indices = knn.kneighbors(df2[movie_id], n_neighbors = movies_to_recommend +1)\n        movie_indices = sorted(list(zip(indices.squeeze().tolist(), distances.squeeze().tolist())), key = lambda x :x[1])[:0:-1]\n        \n         \n        recommend_frame = []\n        for i in movie_indices:\n            movie_id = df1.iloc[i[0]]['movieId']\n            id_ = movies[movies['movieId'] == movie_id].index\n            \n            recommend_frame.append({'Title': movies.iloc[id_]['title'].values[0], 'distance': i[1]})\n            \n        df = pd.DataFrame(recommend_frame, index=range(1, movies_to_recommend+1))\n        return df\n    else:\n        return 'No movies found. Check input.'\n        \n    \n    ","e5369b30":"recommend('Iron Man 2')","bbd745dd":"recommend('Ant-Man')","cbfb8206":"recommend('Doctor Strange')","3b0070a1":"recommend('Beauty and the Beast')","9ce0f496":"- SETTING USER THRESHOLD TO 50.","c09b2067":"CREATING NEW DATASET, WHICH ONLY INVOLVES *'movieId'* , *'userId'*, *'rating'*.","e43d80a6":"- THESE ARE SOME MOVIE RECOMMENDATION ILLUSTRATION USING RECOMMEND FUNCTION.","3fcb4ccc":"# IMPORTING LIBRARIES","5e006e08":"- SETTING MOVING THRESHOLD TO 10.","1d0c780e":"# IMPORTING DATASET","6600abcb":"CREATING FUNCTION FOR RECOMMENDING MOVIES","0b7d1433":"APPLYING  *knn* ALGORITHM TO COMPUTE SIMILARITY WITH *cosine distance *  METRIC WHICH QUICK AND MORE PREFERABLE THAN  \n*pearson coefficient*","11720572":"REMOVING SPARSITY.\n\n- HERE, THE COLLUMN 2121 * 378 . WE ARE USING SMALL DATASET AND IT CONSTAINS 1000 FEATRUES DUE TO WHICH OUR SYSTEM MAY RUN OUT OF THE COMPUTATIONAL RESOURCES WHEN THAT IS FEED TO MODEL.\n\n\n\n\n\n- TO REDUCE THE SPARSITY WE'LL BE USING *' csr_matrix '* FROM SCIPY.","0f543b4d":"REMOVE NOISE \n\n- We wouldn't want movies that were rated by a smattering user's, In veiw of the fact that it is not feasible.\n\n- likewise, User's who have rated a handful number of movies should not be taken into account.\n\nSo taking these points into consideration, we need to set a threshold to remove noise.\n   \n   - to qualify a movie, minimum 10 user should have voted a movie\n    \n   - to qualify a user, minimum 50 movies should have voted by user.\n\n\n\n","4177f0b2":"- THUS, THE FOLLOWING STEPS MENTIONED ABOVE ARE USED TO BUILD MOVIE RECOMMEND SYSTEM. THANK YOU."}}