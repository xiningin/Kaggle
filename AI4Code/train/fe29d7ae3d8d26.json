{"cell_type":{"2f278f30":"code","089de722":"code","0ff54d55":"code","65f49013":"code","9d6acc0b":"code","b9362f90":"code","0c7b120b":"code","0d9bc4e7":"markdown","1b6bae77":"markdown","758bdc96":"markdown","7ae5b791":"markdown"},"source":{"2f278f30":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","089de722":"def plot_correlation(df, cmap='RdBu_r'):\n    size = len(df.columns)\n    fig, ax = plt.subplots(figsize=(1.3 * size, 1. * size))\n    corr = df.corr()\n\n    im = ax.matshow(corr, cmap=cmap)\n    for (i, j), z in np.ndenumerate(corr):\n        ax.text(j, i, '{:0.2f}'.format(z), ha='center', va='center',\n                bbox=dict(boxstyle='round', facecolor='white', edgecolor='0.3'))\n\n    plt.xticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14, rotation=90)\n    plt.yticks(range(df.select_dtypes(['number']).shape[1]), df.select_dtypes(['number']).columns, fontsize=14)\n    cb = plt.colorbar(im)\n    ax.tick_params(labelsize=14)\n    plt.show()","0ff54d55":"df = pd.read_csv('..\/input\/depression-anxiety-stress-scales\/DASS_data_21.02.19\/data.csv', error_bad_lines=False, warn_bad_lines=False, sep=r'\\t')","65f49013":"DASS_keys = {'Depression': [3, 5, 10, 13, 16, 17, 21, 24, 26, 31, 34, 37, 38, 42],\n             'Anxiety': [2, 4, 7, 9, 15, 19, 20, 23, 25, 28, 30, 36, 40, 41],\n             'Stress': [1, 6, 8, 11, 12, 14, 18, 22, 27, 29, 32, 33, 35, 39]}\n\nDASS_bins = {'Depression': [(0, 10), (10, 14), (14, 21), (21, 28)],\n             'Anxiety': [(0, 8), (8, 10), (10, 15), (15, 20)],\n             'Stress': [(0, 15), (15, 19), (19, 26), (26, 34)]}\n             \n\nfor name, keys in DASS_keys.items():\n    # Subtract one to match definition of DASS score in source\n    df[name] = (df.filter(regex='Q(%s)A' % '|'.join(map(str, keys))) - 1).sum(axis=1)\n    \n    bins = DASS_bins[name]\n    bins.append( (DASS_bins[name][-1][-1], df[name].max() + 1) )\n    bins = pd.IntervalIndex.from_tuples(bins, closed='left')\n    df[name + '_cat'] = np.arange(len(bins))[pd.cut(df[name], bins=bins).cat.codes]\n    \ndass = df[DASS_keys.keys()]\ndass_cat = df[[k + '_cat' for k in DASS_keys.keys()]]","9d6acc0b":"# Add personality types to data\npersonality_types = ['Extraversion', 'Agreeableness', 'Conscientiousness', 'EmotionalStability', 'Openness']\n\n# Invert some entries\ntipi = df.filter(regex='TIPI\\d+').copy()\ntipi_inv = tipi.filter(regex='TIPI(2|4|6|8|10)').apply(lambda d: 7 - d)\ntipi[tipi.columns.intersection(tipi_inv.columns)] = tipi_inv\n\n# Calculate scores\nfor idx, pt in enumerate( personality_types ):\n    df[pt] = tipi[['TIPI{}'.format(idx + 1), 'TIPI{}'.format(6 + idx)]].mean(axis=1)\n\npersonalities = df[personality_types]","b9362f90":"character = pd.concat([dass, personalities], axis=1)\nplot_correlation(character, cmap='viridis')","0c7b120b":"# Drop test data\ndf_select = df[df.columns.drop(list(df.filter(regex='(Q\\d+[AIE])|(TIPI\\d+)|(VCL\\d+)')))]\ndf_select = df_select.drop(columns=['source', 'introelapse', 'testelapse', 'surveyelapse'])\n\n# Categorize\nobject_cols = df_select.columns[df_select.dtypes == object]\ndf_select[object_cols] = df_select[object_cols].astype('category').apply(lambda x: x.cat.codes)\n\nplot_correlation(df_select, cmap='viridis')","0d9bc4e7":"## Correlation of personal data","1b6bae77":"## Combination of DASS and personality","758bdc96":"## DASS results\nCalculate DASS score and categories according to:  \nhttps:\/\/www.psytoolkit.org\/survey-library\/depression-anxiety-stress-dass.html  \n\nSeverites of depression, anxiety and stress are categorized to:\n- 0 - Normal\n- 1 - Mild\n- 2 - Moderate\n- 3 - Severe\n- 4 - Extremely severe","7ae5b791":"## Personality results\nCalculation of the big five personality attributes according to:  \nhttp:\/\/gosling.psy.utexas.edu\/wp-content\/uploads\/2014\/09\/JRP-03-tipi.pdf"}}