{"cell_type":{"20f22d68":"code","40a20e04":"code","13b6b25e":"code","ae34da28":"code","d709d1df":"code","2c32cd49":"code","43bf1aaa":"code","94f61312":"code","5853372d":"code","8565dff8":"code","43715e7f":"code","82d8e28e":"code","8102ee91":"code","41342bf1":"code","c5f776cc":"code","e25a6086":"code","769d3778":"code","caecdb03":"code","29afd192":"code","b8bc108a":"code","fe639551":"code","56938cd9":"code","2c0ee6a5":"code","f4235cfe":"code","2e16fb65":"code","8486fa16":"code","6da3072a":"code","d1d9a65d":"code","33568cd4":"code","99527145":"code","6fc93c27":"code","a4e91a6e":"code","0191bb7d":"code","e1a0452a":"code","fda410a5":"code","6766d5b1":"code","8dba8b9b":"code","876da66c":"markdown"},"source":{"20f22d68":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pickle","40a20e04":"dataPath = \"\/kaggle\/input\/m5-forecasting-accuracy\/\"\ntimesteps = 14\nstartDay = 403","13b6b25e":"# read data files\ncalendar = pd.read_csv(dataPath + '\/calendar.csv')\nsales_train_val = pd.read_csv(dataPath + '\/sales_train_validation.csv')\nsample_submission = pd.read_csv(dataPath + '\/sample_submission.csv')","ae34da28":"NUM_ITEMS = sales_train_val.shape[0]  # 30490\nDAYS_PRED = sample_submission.shape[1] - 1  # 28","d709d1df":"# keep a multiple of DAYS_PRED days (columns) for convenience\nncols = sales_train_val.shape[1] - sales_train_val.shape[1] % DAYS_PRED\nsales_train_val = sales_train_val.iloc[:, -ncols:]","2c32cd49":"# Take the transpose so that we have one day for each row, and 30490 items' sales as columns\nsales_train_val = sales_train_val.T","43bf1aaa":"# get seasonal data in same format as sales_train_val\ndef reformat(fit_forecast):\n    fit_forecast = np.concatenate(fit_forecast)\n    fit_forecast = fit_forecast.reshape(-1, NUM_ITEMS, order='F')\n    fit = fit_forecast[:-DAYS_PRED, :]\n    forecast = fit_forecast[-DAYS_PRED:, :]\n    return fit, forecast","94f61312":"# load pre-calculate yearly seasonal fit & forecast \nfile = open('\/kaggle\/input\/seasonalities\/seasonality\/yearly_seasonal.pkl', 'rb')\nfit_forecast1 = pickle.load(file)\nfile.close()","5853372d":"# get fit1 and forecast1\nfit1, forecast1 = reformat(fit_forecast1)","8565dff8":"# remove trend and first seasonal component from sales\nsales_train_val = sales_train_val - fit1","43715e7f":"# remove first 28-day period as we have no fit\nsales_train_val = sales_train_val.iloc[28:, :]","82d8e28e":"# the first year looks atypical so we will delete it\nsales_train_val = sales_train_val.iloc[365:, :]","8102ee91":"# load pre-calculated dow seasonality\nfile = open('\/kaggle\/input\/seasonalities\/seasonality\/dow_seasonal.pkl', 'rb')\nfit_forecast2 = pickle.load(file)\nfile.close()","41342bf1":"# get fit2 and forecast2\nfit2, forecast2 = reformat(fit_forecast2)","c5f776cc":"# remove trend and first seasonal component from sales\nsales_train_val = sales_train_val - fit2","e25a6086":"# we have no fit for the first day\nsales_train_val = sales_train_val.iloc[1:, :]","769d3778":"# load pre-calculated event and snap effects\nfile = open('\/kaggle\/input\/seasonalities\/seasonality\/events_snap_dm.pkl', 'rb')\nfit_forecast3 = pickle.load(file)\nfile.close()","caecdb03":"# get fit3 and forecast3\nfit3, forecast3 = reformat(fit_forecast3)","29afd192":"# remove latest fit from sales\nsales_train_val = sales_train_val - fit3","b8bc108a":"# load pre-calculated day-in-month fit & forecast\nfile = open('\/kaggle\/input\/seasonalities\/seasonality\/dayinmonth.pkl', 'rb')\nfit_forecast4 = pickle.load(file)\nfile.close()","fe639551":"# get fit4 and forecast4\nfit4, forecast4 = reformat(fit_forecast4)","56938cd9":"# remove latest fit from sales\nsales_train_val = sales_train_val - fit4","2c0ee6a5":"#Create dataframe with zeros for 1969 days in the calendar\ndaysBeforeEvent = pd.DataFrame(np.zeros((1969,1)))","f4235cfe":"# \"1\" is assigned to the days before the event_name_1. Since \"event_name_2\" is rare, it was not added.\nfor x,y in calendar.iterrows():\n    if((pd.isnull(calendar[\"event_name_1\"][x])) == False):\n           daysBeforeEvent[0][x-1] = 1 \n            #if first day was an event this row will cause an exception because \"x-1\".\n            #Since it is not i did not consider for now.","2e16fb65":"#\"calendar\" won't be used anymore. \ndel calendar","8486fa16":"#\"daysBeforeEventTest\" will be used as input for predicting (We will forecast the days 1913-1941)\ndaysBeforeEventTest = daysBeforeEvent[1913:1941]\n#\"daysBeforeEvent\" will be used for training as a feature.\ndaysBeforeEvent = daysBeforeEvent[startDay:1913]","6da3072a":"#Before concatanation with our main data \"dt\", indexes are made same and column name is changed to \"oneDayBeforeEvent\"\ndaysBeforeEvent.columns = [\"oneDayBeforeEvent\"]\ndaysBeforeEvent.index = sales_train_val.index","d1d9a65d":"sales_train_val = pd.concat([sales_train_val, daysBeforeEvent], axis = 1)","33568cd4":"#Feature Scaling\n#Scale the features using min-max scaler in range 0-1\nfrom sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0, 1))\ndt_scaled = sc.fit_transform(sales_train_val)","99527145":"X_train = []\ny_train = []\nfor i in range(timesteps, 1913 - startDay):\n    X_train.append(dt_scaled[i-timesteps:i])\n    y_train.append(dt_scaled[i][0:30490]) ","6fc93c27":"del dt_scaled","a4e91a6e":"#Convert to np array to be able to feed the LSTM model\nX_train = np.array(X_train)\ny_train = np.array(y_train)\nprint(X_train.shape)\nprint(y_train.shape)","0191bb7d":"# Importing the Keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\n\n# Initialising the RNN\nregressor = Sequential()\n\n# Adding the first LSTM layer and some Dropout regularisation\nlayer_1_units=50\nregressor.add(LSTM(units = layer_1_units, return_sequences = True, input_shape = (X_train.shape[1], X_train.shape[2])))\nregressor.add(Dropout(0.2))\n\n# Adding a second LSTM layer and some Dropout regularisation\nlayer_2_units=400\nregressor.add(LSTM(units = layer_2_units, return_sequences = True))\nregressor.add(Dropout(0.2))\n\n# Adding a third LSTM layer and some Dropout regularisation\nlayer_3_units=400\nregressor.add(LSTM(units = layer_3_units))\nregressor.add(Dropout(0.2))\n\n# Adding the output layer\nregressor.add(Dense(units = NUM_ITEMS))\n\n# Compiling the RNN\nregressor.compile(optimizer = 'adam', loss = 'mean_squared_error')\n\n# Fitting the RNN to the Training set\nepoch_no=32\nbatch_size_RNN=44\nregressor.fit(X_train, y_train, epochs = epoch_no, batch_size = batch_size_RNN)","e1a0452a":"# inputs for prediction\ninputs = sales_train_val[-timesteps:]\ninputs = sc.transform(inputs)","fda410a5":"X_test = []\nX_test.append(inputs[0:timesteps])\nX_test = np.array(X_test)\npredictions = []\n\nfor j in range(timesteps,timesteps + 28):\n#X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\n    predicted_stock_price = regressor.predict(X_test[0,j - timesteps:j].reshape(1, timesteps, 30491))\n    testInput = np.column_stack((np.array(predicted_stock_price), daysBeforeEventTest[0][1913 + j - timesteps]))\n    X_test = np.append(X_test, testInput).reshape(1,j + 1,30491)\n    predicted_stock_price = sc.inverse_transform(testInput)[:,0:30490]\n    predictions.append(predicted_stock_price)","6766d5b1":"# reformat predictions and add forecasts\nsubmission = pd.DataFrame(data=np.array(predictions).reshape(28,30490))\nsubmission = submission + forecast1 + forecast2 + forecast3 + forecast4","8dba8b9b":"# reformat submission\nsubmission = submission.T\nsubmission = pd.concat((submission, submission), ignore_index=True)\nsample_submission = pd.read_csv(dataPath + \"\/sample_submission.csv\")\nidColumn = sample_submission[[\"id\"]]\nsubmission[[\"id\"]] = idColumn  \ncols = list(submission.columns)\ncols = cols[-1:] + cols[:-1]\nsubmission = submission[cols]\ncolsdeneme = [\"id\"] + [f\"F{i}\" for i in range (1,29)]\nsubmission.columns = colsdeneme\nsubmission.to_csv(\"submission.csv\", index=False)","876da66c":"Forked from [Baseline LSTM with Keras < 0.7](https:\/\/www.kaggle.com\/bountyhunters\/baseline-lstm-with-keras-0-7**) and combining with data from [State Space Model](https:\/\/www.kaggle.com\/robertburbidge\/state-space-model)"}}