{"cell_type":{"a201a683":"code","2d5c0db0":"code","dd547320":"code","32192bee":"code","283a0dbe":"code","558b34c4":"code","a58a94d0":"code","fb93d286":"code","aa9ece85":"code","089bd4bd":"code","2b55bd4c":"code","be36d99a":"code","d07d6e79":"code","c9bfdd0a":"code","202d9e8b":"code","4fa97161":"code","55b9fcff":"code","27249e4f":"code","8b2f5451":"code","2351bcc6":"code","8ae9f310":"code","8fc9cacc":"code","7c19f99e":"code","90156f4d":"code","ebcd3bf9":"code","038920ef":"markdown","fa136949":"markdown","c41adf7d":"markdown","2c32b148":"markdown","9f50a2c6":"markdown","cc00442f":"markdown","353e71ec":"markdown","46512a7a":"markdown","b579f273":"markdown","062bd0bd":"markdown","f519db75":"markdown","64dd66b6":"markdown","85b77257":"markdown","9a4a070a":"markdown","c2590b60":"markdown","41c2263a":"markdown"},"source":{"a201a683":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d5c0db0":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","dd547320":"dataset = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv')","32192bee":"dataset","283a0dbe":"dataset.info()","558b34c4":"dataset.isnull().sum()","a58a94d0":"sns.countplot(x= 'Species', data= dataset)","fb93d286":"dataset.Species.value_counts()","aa9ece85":"plt.figure(figsize=(10,10))\nplt.title(\"Sepal length of each flower with Species Type\")\nsns.scatterplot(x=dataset.index,y=dataset[\"SepalLengthCm\"], hue=dataset[\"Species\"],palette=(\"red\",\"cyan\",\"purple\"))","089bd4bd":"sns.heatmap(data= dataset.corr(), annot= True)","2b55bd4c":"x = dataset.iloc[:, 1:-1].values\ny = dataset.iloc[:, -1].values","be36d99a":"x","d07d6e79":"y","c9bfdd0a":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state= 0)","202d9e8b":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","4fa97161":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","55b9fcff":"from sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import cross_val_score","27249e4f":"models = []\nmodels.append(['Logistic Regreesion', LogisticRegression(random_state=0)])\nmodels.append(['SVM', SVC(random_state=0)])\nmodels.append(['KNeighbors', KNeighborsClassifier()])\nmodels.append(['Naive Bayes', GaussianNB()])\nmodels.append(['Decision Tree', DecisionTreeClassifier(random_state=0)])\nmodels.append(['Random Forest', RandomForestClassifier(random_state=0)])\nmodels.append(['XGBoost', XGBClassifier()])\n\nlst_1= []\n\nfor m in range(len(models)):\n  lst_2= []\n  model = models[m][1]\n  model.fit(x_train, y_train)\n  y_pred = model.predict(x_test)\n  cm = confusion_matrix(y_test, y_pred)\n  accuracies = cross_val_score(estimator = model, X = x_train, y = y_train, cv = 10)\n  print(models[m][0])\n  print(cm)\n  print('Accuracy Score',accuracy_score(y_test, y_pred))\n  print('')\n  print(\"Mean Accuracy: {:.2f} %\".format(accuracies.mean()*100))\n  print('')\n  print(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))\n  print('')\n  print('-----------------------------------')\n  print('')\n  lst_2.append(models[m][0])\n  lst_2.append((accuracy_score(y_test, y_pred))*100) \n  lst_2.append(accuracies.mean()*100)\n  lst_2.append(accuracies.std()*100)\n  lst_1.append(lst_2)","8b2f5451":"df = pd.DataFrame(lst_1, columns= ['Model', 'Accuracy', 'Mean Accuracy', 'Std. Deviation'])","2351bcc6":"df.sort_values(by= ['Accuracy', 'Mean Accuracy'], inplace= True, ascending= False)","8ae9f310":"df","8fc9cacc":"lr = LogisticRegression()\nsvm = SVC()\nknn = KNeighborsClassifier()","7c19f99e":"data = [(lr, [{'C': [0.01, 0.1, 0.5, 1.0], 'random_state':[0]}]),\n        (svm, [{'C': [0.1, 0.5, 1.0], 'kernel': ['linear', 'rbf'], 'random_state':[0]}]),\n        (knn, [{'n_neighbors': [2, 3, 5, 7, 10], 'metric': ['euclidean', 'manhattan', 'chebyshev', 'minkowski']}])]","90156f4d":"from sklearn.model_selection import GridSearchCV","ebcd3bf9":"for i,j in data:\n  grid = GridSearchCV(estimator = i , param_grid = j , scoring = 'accuracy',cv = 10)\n  grid.fit(x_train,y_train)\n  best_accuracy = grid.best_score_\n  best_parameters = grid.best_params_\n  print('{} \\nBestAccuracy : {:.2f}%'.format(i,best_accuracy*100))\n  print('BestParameters : ',best_parameters)\n  print('')","038920ef":"# **Summary**","fa136949":"# **Data Preprocessing**","c41adf7d":"# **Heat Map Correlation**","2c32b148":"# **Feature Scaling**","9f50a2c6":"**Below shows the values of models in Descending Order.**","cc00442f":"# **Importing Libraries**","353e71ec":"# **Splitting dataset into Train and Test set**","46512a7a":"# **Selection of Models**","b579f273":"**Therefore, after applying GridSearch we can confirm that LogisticRegression and KNeighborsClassifier is best suited model for the dataset and both gives the accuracy of 95.00%.**","062bd0bd":"# **Grid Search**","f519db75":"# **Importing Dataset**","64dd66b6":"# **Count Plot for species in Iris**","85b77257":"**Applying Grid Search on Top 3 above models for best parameters and model selection.**\n\n1. Logistic Regression\n2. SVM\n3. KNeighbors\n","9a4a070a":"**Making Data Frame.**","c2590b60":"**Checking if there are any NULL values.**","41c2263a":"# **Sepal Length with Scatter Plot**"}}