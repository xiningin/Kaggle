{"cell_type":{"1328643a":"code","3862cad0":"code","9a356453":"code","ef225343":"code","2aa6c221":"code","46142470":"code","71af4bb5":"code","9f8c43ed":"code","b6e117f2":"code","21d1e010":"markdown","8c474075":"markdown","1a65686b":"markdown","70e2ca08":"markdown","8367c5a7":"markdown","a56d52f3":"markdown","f755cd7a":"markdown","0ea5f5e2":"markdown"},"source":{"1328643a":"# Enter app store id here: \n# https:\/\/itunes.apple.com\/us\/app\/name\/id{app_store_id}?mt=8\napp_store_id = '334989259'","3862cad0":"import pprint\nimport time\nimport typing\nimport csv\nimport requests\nimport sys\nimport numpy as np\nimport pandas as pd\n\ndef is_error_response(http_response, seconds_to_sleep: float = 1) -> bool:\n    if http_response.status_code == 503:\n        time.sleep(seconds_to_sleep)\n        return False\n\n    return http_response.status_code != 200\n\n\ndef get_json(url) -> typing.Union[dict, None]:\n    response = requests.get(url)\n    if is_error_response(response):\n        return None\n    json_response = response.json()\n    return json_response\n\ndef write_to_csv(row_array, app_id):\n    csv_name = 'data\/raw\/app_store_reviews_%s_%s.csv' % (app_id, time.time())\n    print('Saved to: ' + csv_name)\n    with open(csv_name, mode='w') as csv_file:\n        fieldnames = ['review_id', 'title', 'author', 'author_url', 'version', 'rating', 'review', 'vote_count']\n        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)\n\n        writer.writeheader()\n\n        for row in row_array:\n            writer.writerow(row)\n\n\ndef get_reviews(app_id, page=1) -> typing.List[dict]:\n    reviews: typing.List[dict] = []\n\n    while True:\n        url = ('https:\/\/itunes.apple.com\/rss\/customerreviews\/id=%s\/page=%s\/sortby=mostrecent\/json' % (app_id, page))\n        json = get_json(url)\n\n        if not json:\n            return reviews\n\n        data_feed = json.get('feed')\n\n        if not data_feed.get('entry'):\n            get_reviews(app_id, page + 1)\n\n        reviews += [\n            {\n                'review_id': entry.get('id').get('label'),\n                'title': entry.get('title').get('label'),\n                'author': entry.get('author').get('name').get('label'),\n                'author_url': entry.get('author').get('uri').get('label'),\n                'version': entry.get('im:version').get('label'),\n                'rating': entry.get('im:rating').get('label'),\n                'review': entry.get('content').get('label'),\n                'vote_count': entry.get('im:voteCount').get('label')\n            }\n            for entry in data_feed.get('entry')\n            if not entry.get('im:name')\n        ]\n\n        page += 1\n\n\nreview_dict = get_reviews(app_store_id)\n    \nprint('Found ' + str(len(review_dict)) + ' reviews')\n# write_to_csv(reviews, app_store_id)","9a356453":"# df = pd.read_csv(reviews) # for use with csv\ndf = pd.DataFrame(review_dict)\n\ntitles = np.array(df['title'])\nreviews = np.array(df['review'])\nratings = np.array(df['rating'])\nversions = np.array(df['version'])\nsize = (len(df))\nprint('Review count: ' + str(size))\nprint('Versions count: ' + str(len(np.unique(versions, return_counts=False))))","ef225343":"from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\nanalyzer = SentimentIntensityAnalyzer()\npos_reviews = ''\nneg_reviews = ''\nconcat_reviews = ''\nscore_arr = []\nfor i in range(size):\n    sentence = reviews[i]\n    concat_reviews += ' %s' % sentence\n    vs = analyzer.polarity_scores(sentence)\n    if vs.get('compound') >= 0:\n        pos_reviews += ' %s' % sentence\n    else:\n        neg_reviews += ' %s' % sentence\n    score_arr.append(vs.get('compound'))\n    \nscores = np.vstack([versions,score_arr])\nprint(str(scores[1][:5]) + ' ...')","2aa6c221":"import matplotlib.pyplot as plt\n\n# Prepare plot\nunique_versions = np.unique(scores[0], return_counts=True)[0] # Versions\nunique_review_count = np.unique(scores[0], return_counts=True)[1]\nsum_arr = []\nsum_vers = []\nfor version in unique_versions:\n    version_sum = 0\n    count = 0\n    for i in range(len(scores[1])):\n        if version == scores[0][i]:\n            version_sum += scores[1][i]\n            count += 1;\n            \n    sum_arr.append(version_sum \/ count )#unique_review_count[np.where(unique_versions==version)[0][0]] also works\n    sum_vers.append(version)\n    \nprint(sum_vers)\nprint(sum_arr)","46142470":"plt.figure(figsize=(20,8))\nplt.bar(sum_vers, sum_arr, align='center', alpha=0.5)\n\nplt.xlabel(\"Version\",fontsize=16)\nplt.ylabel(\"$Sentiment$\",fontsize=16)\nplt.title(\"Sentiment per Version - App Store Reviews\")\nplt.ylim(-1, 1)\n\nplt.show()","71af4bb5":"plt.figure(figsize=(20,8))\nplt.bar(sum_vers, unique_review_count, align='center', alpha=0.5)\n\nplt.xlabel(\"Version\",fontsize=16)\nplt.ylabel(\"$Count$\",fontsize=16)\nplt.title(\"Count per Version - App Store Reviews\")\n\nplt.show()","9f8c43ed":"from wordcloud import WordCloud, STOPWORDS\n\nstopwords = set(STOPWORDS)\nstopwords.add('app')\n\ndef generate_wordcloud(text): # optionally add: stopwords=STOPWORDS and change the arg below\n    wordcloud = WordCloud(relative_scaling = 1.0,\n                          scale=3,\n                          stopwords = stopwords\n                          ).generate(text)\n    plt.figure(figsize=(20,20))\n    plt.imshow(wordcloud)\n    plt.axis(\"off\")\n    plt.show()\n\ngenerate_wordcloud(neg_reviews)","b6e117f2":"generate_wordcloud(pos_reviews)","21d1e010":"## Graph Sentiment","8c474075":"## Prepare graph","1a65686b":"## App Store Review Sentiment Analysis\n\nThis notebook runs a sentiment analysis on the last 500 reviews in the app store and averages them per release version. \n\nThe sentiment analysis model is a **rule based** model called [VADER](\nhttps:\/\/github.com\/cjhutto\/vaderSentiment) (Valence Aware Dictionary and sEntiment Reasoner). \n\nAn **ML based model** is planned as future work.\n\nSentiment scores are \"compound\" on a scale from -1 to 1:\n\n- Greater than 0.5 = positive sentiment\n- -0.5  to 0.5 = neutral\n- Less than -0.5 = negative sentiment\n\nThe notebook will also create a graph of review volume per version, and a wordcloud of both the positive and negative reviews.","70e2ca08":"# Get the 500 most recent reviews\n\nApple's public api is limited to only 10 pages of 50 reviews.","8367c5a7":"## Build wordcloud","a56d52f3":"## Calculate sentiment","f755cd7a":"# Load data","0ea5f5e2":"## Graph review volume"}}