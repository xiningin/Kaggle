{"cell_type":{"f8026448":"code","646fdef3":"code","1a10b0ff":"code","b0dc7436":"code","4eb05da2":"code","4d395bf4":"code","e0ad3d7b":"code","795fa512":"code","4bf1b264":"code","cd15b9db":"code","749ac120":"code","fa90a211":"code","906f1914":"code","ef880588":"code","7d7028b2":"code","1f8dd02d":"code","eba073db":"code","fa0ec38c":"code","11b55caf":"code","0456a9d6":"code","12eae453":"code","ad2c6560":"code","f5daf72b":"code","22108e73":"code","77293c80":"code","5c4fbbb9":"markdown","875ae28e":"markdown","3d8b5052":"markdown","62144134":"markdown"},"source":{"f8026448":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n# Author: Deepak Khatri\n# Based on ECG Classification notebook from Gregoire DC.\n# Some terms are taken from harmanbhutani's fork of Gregoire DC's notebook.","646fdef3":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.utils import class_weight\nimport warnings\nwarnings.filterwarnings('ignore')","1a10b0ff":"# import dataset\ntrain_df = pd.read_csv(\"\/kaggle\/input\/heartbeat\/mitbih_train.csv\", header = None)\ntest_df = pd.read_csv(\"\/kaggle\/input\/heartbeat\/mitbih_test.csv\", header = None)","b0dc7436":"# Value of each class\ntrain_df[187].value_counts()","4eb05da2":"# representation of classes % wise\nper_class = train_df[187].value_counts()\nplt.figure(figsize=(20,10))\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(per_class, labels=['normal beat','unknown Beats','Ventricular ectopic beats','Supraventricular ectopic beats','Fusion Beats'], colors=['tab:blue','tab:orange','tab:purple','tab:olive','tab:green'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","4d395bf4":"from sklearn.utils import resample\ndf_1=train_df[train_df[187]==1]\ndf_2=train_df[train_df[187]==2]\ndf_3=train_df[train_df[187]==3]\ndf_4=train_df[train_df[187]==4]\ndf_0=(train_df[train_df[187]==0]).sample(n=20000,random_state=42)\n\ndf_1_upsample=resample(df_1,replace=True,n_samples=20000,random_state=123)\ndf_2_upsample=resample(df_2,replace=True,n_samples=20000,random_state=124)\ndf_3_upsample=resample(df_3,replace=True,n_samples=20000,random_state=125)\ndf_4_upsample=resample(df_4,replace=True,n_samples=20000,random_state=126)\n\ntrain_df=pd.concat([df_0,df_1_upsample,df_2_upsample,df_3_upsample,df_4_upsample])","e0ad3d7b":"# representation of classes % wise\nper_class = train_df[187].value_counts()\nplt.figure(figsize=(20,10))\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\nplt.pie(per_class, labels=['normal beat','unknown Beats','Ventricular ectopic beats','Supraventricular ectopic beats','Fusion Beats'], colors=['tab:blue','tab:orange','tab:purple','tab:olive','tab:green'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","795fa512":"# randomly sampling from each class\nclasses=train_df.groupby(187,group_keys=False).apply(lambda train_df : train_df.sample(1))","4bf1b264":"# peek on classes\nclasses","cd15b9db":"# plotting classes ECG\nplt.figure(figsize=(16,8))\n# normal\nplt.subplot(2, 3, 1)  \nplt.plot(classes.iloc[0,:186])\nplt.title('normal beat')\n# unknown\nplt.subplot(2, 3, 2)  \nplt.plot(classes.iloc[1,:186])\nplt.title('unknown Beat')\n# veb\nplt.subplot(2, 3, 3)  \nplt.plot(classes.iloc[2,:186])\nplt.title('Ventricular ectopic beat')\n# seb\nplt.subplot(2, 3, 4)  \nplt.plot(classes.iloc[3,:186])\nplt.title('Supraventricular ectopic beat')\n# fusion\nplt.subplot(2, 3, 5)  \nplt.plot(classes.iloc[4,:186])\nplt.title('Fusion Beat')\n# show plot\nplt.show()","749ac120":"def plot_hist(class_number,size,min_):\n    # get the class data\n    img=train_df.loc[train_df[187]==class_number].values\n    # crop it\n    img=img[:,min_:size]\n    # creates a continous steam of data\n    img_flatten=img.flatten()\n    \n    final1=np.arange(min_,size)\n    for i in range (img.shape[0]-1):\n        tempo1=np.arange(min_,size)\n        final1=np.concatenate((final1, tempo1), axis=None)\n    print(len(final1))\n    print(len(img_flatten))\n    plt.hist2d(final1,img_flatten, bins=(80,80),cmap=plt.cm.jet)\n    plt.show()","fa90a211":"# Normal Beat\nplt.figure(figsize=(12,4))\nplt.subplot(1, 2, 1)  \nplt.plot(classes.iloc[0,:186])\nplt.title('Normal beat')\nplt.subplot(1, 2, 2)  \nplot_hist(0,70,5)","906f1914":"# unknown\nplt.figure(figsize=(12,4))\nplt.subplot(1, 2, 1)\nplt.plot(classes.iloc[1,:186])\nplt.title('unknown Beat')\nplt.subplot(1, 2, 2)  \nplot_hist(1,50,5)","ef880588":"# veb\nplt.figure(figsize=(12,4))\nplt.subplot(1, 2, 1)  \nplt.plot(classes.iloc[2,:186])\nplt.title('Ventricular ectopic beat')\nplt.subplot(1, 2, 2) \nplot_hist(2,60,30)","7d7028b2":"# seb\nplt.figure(figsize=(12,4))\nplt.subplot(1, 2, 1) \nplt.plot(classes.iloc[3,:186])\nplt.title('Supraventricular ectopic beat')\nplt.subplot(1, 2, 2) \nplot_hist(3,60,25)","1f8dd02d":"# fusion\nplt.figure(figsize=(12,4))\nplt.subplot(1, 2, 1)   \nplt.plot(classes.iloc[4,:186])\nplt.title('Fusion Beat')\nplt.subplot(1, 2, 2) \nplot_hist(4,50,18)","eba073db":"def add_gaussian_noise(signal):\n    noise=np.random.normal(0,0.05,186)\n    return (signal+noise)","fa0ec38c":"tempo=classes.iloc[0,:186]\nbruiter=add_gaussian_noise(tempo)\n\nplt.subplot(2,1,1)\nplt.plot(classes.iloc[0,:186])\n\nplt.subplot(2,1,2)\nplt.plot(bruiter)\n\nplt.show()","11b55caf":"target_train=train_df[187]\ntarget_test=test_df[187]\ny_train=to_categorical(target_train)\ny_test=to_categorical(target_test)","0456a9d6":"X_train=train_df.iloc[:,:186].values\nX_test=test_df.iloc[:,:186].values\n#for i in range(len(X_train)):\n#    X_train[i,:186]= add_gaussian_noise(X_train[i,:186])\nX_train = X_train.reshape(len(X_train), X_train.shape[1],1)\nX_test = X_test.reshape(len(X_test), X_test.shape[1],1)","12eae453":"# Network\ndef network(X_train,y_train,X_test,y_test):\n    im_shape=(X_train.shape[1],1)\n    inputs_cnn=Input(shape=(im_shape), name='inputs_cnn')\n    conv1_1=Convolution1D(64, (6), activation='relu', input_shape=im_shape)(inputs_cnn)\n    conv1_1=BatchNormalization()(conv1_1)\n    pool1=MaxPool1D(pool_size=(3), strides=(2), padding=\"same\")(conv1_1)\n    conv2_1=Convolution1D(64, (3), activation='relu', input_shape=im_shape)(pool1)\n    conv2_1=BatchNormalization()(conv2_1)\n    pool2=MaxPool1D(pool_size=(2), strides=(2), padding=\"same\")(conv2_1)\n    conv3_1=Convolution1D(64, (3), activation='relu', input_shape=im_shape)(pool2)\n    conv3_1=BatchNormalization()(conv3_1)\n    pool3=MaxPool1D(pool_size=(2), strides=(2), padding=\"same\")(conv3_1)\n    flatten=Flatten()(pool3)\n    dense_end1 = Dense(64, activation='relu')(flatten)\n    dense_end2 = Dense(32, activation='relu')(dense_end1)\n    main_output = Dense(5, activation='softmax', name='main_output')(dense_end2)\n    \n    \n    model = Model(inputs= inputs_cnn, outputs=main_output)\n    model.compile(optimizer='adam', loss='categorical_crossentropy',metrics = ['accuracy'])\n    \n    \n    callbacks = [EarlyStopping(monitor='val_loss', patience=8),\n             ModelCheckpoint(filepath='best_model.h5', monitor='val_loss', save_best_only=True)]\n\n    history=model.fit(X_train, y_train,epochs=5,callbacks=callbacks, batch_size=32,validation_data=(X_test,y_test))\n    model.load_weights('best_model.h5')\n    return(model,history)","ad2c6560":"def evaluate_model(history,X_test,y_test,model):\n    scores = model.evaluate((X_test),y_test, verbose=0)\n    print(\"Accuracy: %.2f%%\" % (scores[1]*100))\n    \n    print(history)\n    fig1, ax_acc = plt.subplots()\n    plt.plot(history.history['accuracy'])\n    plt.plot(history.history['val_accuracy'])\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.title('Model - Accuracy')\n    plt.legend(['Training', 'Validation'], loc='lower right')\n    plt.show()\n    \n    fig2, ax_loss = plt.subplots()\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.title('Model- Loss')\n    plt.legend(['Training', 'Validation'], loc='upper right')\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.show()\n    target_names=['0','1','2','3','4']\n    \n    y_true=[]\n    for element in y_test:\n        y_true.append(np.argmax(element))\n    prediction_proba=model.predict(X_test)\n    prediction=np.argmax(prediction_proba,axis=1)\n    cnf_matrix = confusion_matrix(y_true, prediction)","f5daf72b":"from keras.layers import Dense, Convolution1D, MaxPool1D, Flatten, Dropout\nfrom keras.layers import Input\nfrom keras.models import Model\nfrom keras.layers.normalization import BatchNormalization\nimport keras\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\n\nmodel,history=network(X_train,y_train,X_test,y_test)","22108e73":"evaluate_model(history,X_test,y_test,model)\ny_pred=model.predict(X_test)","77293c80":"import itertools\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_test.argmax(axis=1), y_pred.argmax(axis=1))\nnp.set_printoptions(precision=2)\n\n# Plot non-normalized confusion matrix\nplt.figure(figsize=(10, 10))\nplot_confusion_matrix(cnf_matrix, classes=['N', 'S', 'V', 'F', 'Q'],normalize=True,\n                      title='Confusion matrix, with normalization')\nplt.show()","5c4fbbb9":"## Classes","875ae28e":"## Resampling for balacing the dataset","3d8b5052":"## Signal heatmap","62144134":"## Pretreat"}}