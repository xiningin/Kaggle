{"cell_type":{"df749382":"code","ce8a5212":"code","93b14a7c":"code","20f132a8":"code","0b2fd525":"code","443a07c3":"code","c8f8361a":"code","4044676c":"code","ed80d833":"code","47b0c4b9":"code","805c1762":"code","aa61384f":"code","5c9be6b0":"code","c241a480":"code","fe2b7ddf":"code","577f1660":"code","a8607b1a":"code","eb6b0145":"code","66d68e38":"code","3e1189b8":"code","86ff120d":"code","7f1f177d":"code","dd57a88b":"code","7dca20a9":"code","b7d68400":"code","4523c38f":"code","c23d38a5":"code","33e71ee5":"code","6fe792ca":"code","88d6149a":"markdown","b53e967b":"markdown","a40e7d78":"markdown","54127aac":"markdown","699866f9":"markdown","cc8b0c31":"markdown","f9bb4199":"markdown","da6f5524":"markdown","d5dbc07e":"markdown","e31a2f1c":"markdown","c44eaf79":"markdown","d671db91":"markdown"},"source":{"df749382":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt \nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce8a5212":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntest_PassengerId = test_df[\"PassengerId\"]","93b14a7c":"train_df.columns","20f132a8":"train_df.head()","0b2fd525":"train_df.describe()","443a07c3":"train_df.info()","c8f8361a":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n\n    ","4044676c":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","ed80d833":"category2 = [\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\" .format(train_df[c].value_counts()))","47b0c4b9":"def plot_hist(variable):\n    plt.figure(figsize=(12,5))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequence\")\n    plt.title(\"{} distribution with hist\" .format(variable))\n    plt.show()","805c1762":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","aa61384f":"# PClass vs Survived \n\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","5c9be6b0":"train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","c241a480":"train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","fe2b7ddf":"train_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\", ascending = False)","577f1660":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features : \n        \n        #1st quartile \n        Q1 = np.percentile(df[c],25)\n        \n        #3rd quartile \n        Q3 = np.percentile(df[c],75)\n        \n        #IQR\n        \n        IQR = Q3-Q1\n        \n        #outlier step \n        outlier_step = IQR*1.5\n        \n        \n        #detect outlier and their indeces \n        outlier_list_col = df[(df[c]< Q1 - outlier_step) | (df[c] > Q3+outlier_step)].index\n        \n        \n        #stop indeces \n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list( i for i, v in outlier_indices.items() if v > 2 )\n    \n    return multiple_outliers","a8607b1a":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","eb6b0145":"# drop outliers\n\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]), axis = 0).reset_index(drop=True)","66d68e38":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df], axis = 0).reset_index(drop=True)","3e1189b8":"train_df.head()","86ff120d":"train_df.columns[train_df.isnull().any()]","7f1f177d":"train_df.isnull().sum()","dd57a88b":"train_df[train_df[\"Embarked\"].isnull()]","7dca20a9":"train_df.boxplot(column=\"Fare\", by=\"Embarked\")\nplt.show()","b7d68400":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","4523c38f":"train_df[train_df[\"Fare\"].isnull()]","c23d38a5":"train_df[train_df[\"Pclass\"]==3]","33e71ee5":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] ==3][\"Fare\"]))","6fe792ca":"train_df[train_df[\"Fare\"].isnull()]","88d6149a":"<a id=\"1\"><\/a><br>\n\n# 1.Load and Check Data","b53e967b":"<a id=\"5\"><\/a><br>\n## Numerical Variable","a40e7d78":"<a id=\"8\"><\/a><br>\n# Missing Value\n\n Find Missing Value\n \n Fill Missing Value ","54127aac":"<a id=\"7\"><\/a><br>\n# Outlier Detection ","699866f9":"<a id=\"3\"><\/a><br>\n# Univeriate Variable Analysis\n\n * Categorical Variable : Survive, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n \n \n * Numerical Variable   : Age, PassengerId and Fare ","cc8b0c31":"<a id=\"4\"><\/a><br>\n## Categorical Variable ","f9bb4199":"<a id=\"9\"><\/a><br>\n## Find Missing Value","da6f5524":"<a id=\"2\"><\/a><br>\n\n# 2.Variable Describtion \n\n  1. PassengerId : unique \u0131d number to each passenger.\n  1. Survived    : passenger survive(1) or died(0)\n  1. Pclass      : passenger class\n  1. Name        : name\n  1. Sex         : gender of passenger\n  1. Age         : age of passenger \n  1. SibSp       : number of siblings\/spouses \n  1. Parch       : number of parents \/ children \n  1. Ticket      : ticket number \n  1. Fare        : amount of money spent on ticker \n  1. Cabin       : cabin category \n  1. Embarked    : port where passenger embarked( C = Cherbourg, Q = Queenstown, S = Southampton ) ","d5dbc07e":"<a id=\"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived \n* SibSp - Survived \n* Parch - Survived \n","e31a2f1c":"<a id=\"10\"><\/a><br>\n## Fill Missing Value\n\n * Embarked has 2 missing value \n * Fare has 1 missing value","c44eaf79":"# Introduction \n  \n  The sinkng of itanicis one of the most notorious shipwrecks in history. In 1912, during her voyage, the titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. \n  <font color='blue'>\n  \n  Content : \n   \n  1.[Load and Check Data](#1)\n  \n  2.[Variable describtion](#2)\n    \n   * [Univeriate Variable Analysis](#3)\n      * [Categorical Variable Analysis](#4)\n    \n      * [Numerical Variable Analysis](#5)\n    \n 3. [Basic Data Analysis](#6)\n    \n 4. [Outlier Detection](#7)\n \n 5. [Missing Value](#8)\n    \n      *  [Find Missing Value](#9)\n    \n      *  [Fill Missing Value](#10)\n    ","d671db91":" * float64(2) : Fare and Age \n \n * int64(5)   : Pclass, sibsp, passengerId and survived \n \n * object(5)  : Cabin, embarked, ticker, name and sex "}}