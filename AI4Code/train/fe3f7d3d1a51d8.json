{"cell_type":{"e2157871":"code","09473d8b":"code","4ad8ec5c":"code","4540c771":"code","8c3760c6":"code","18b3af5b":"code","220fea03":"code","0a08cc26":"code","2354756f":"code","480fad16":"code","905ecc5b":"code","ee341d84":"code","bad1aad5":"code","1e18f509":"code","70bb8ef1":"code","c15d8dfe":"code","d13b257a":"code","2c8b0ad5":"code","4806c651":"code","a96c249d":"code","b4d691c9":"code","fc74f7af":"code","2590809e":"code","6ffd75f2":"code","7f397b0b":"code","b68cafe0":"code","01cd9de7":"code","ca8e8625":"code","8c4614f2":"code","7fef65b0":"code","4e69c744":"code","2c53f5a8":"code","703f5b70":"code","094483cd":"code","05c5016b":"code","11bff98e":"code","20722aae":"code","244c5cd5":"code","19a44af3":"code","598ebe83":"code","ee9e53ce":"code","d09269f4":"code","3799d6ca":"code","ff8432de":"code","4d7f5721":"code","b82393c9":"code","a34670b9":"code","891629bd":"code","92cc6462":"code","7c97e67e":"code","ad17655e":"code","dc83d9a2":"code","24817ef6":"code","355ce580":"code","c850b54c":"code","686b6352":"code","ac2eab8c":"code","9b06068b":"code","593621dd":"code","b3394af0":"code","b6b0aaf1":"code","20dda414":"code","367786f6":"code","394bc4f8":"code","35f04529":"code","aabd9eae":"code","f86b24da":"code","b8603f58":"code","f8cd83cc":"code","bfe7c8a2":"code","cda3344f":"code","e1f08382":"code","c308b271":"code","e8a67716":"code","d0e461fd":"code","e606da04":"code","d420efb8":"code","e31b0cc4":"code","d75a26a7":"code","532eb97c":"code","ab28398c":"code","aeda63e1":"code","d9b60aeb":"code","2a134123":"code","91a8694b":"code","95ea0f8b":"code","bc6ec1ad":"code","0695080b":"code","a25371cb":"code","170c3a32":"code","69005ccf":"code","36e3caef":"code","6ccc74c9":"code","42260c8c":"code","0d05cc68":"code","abdb2b83":"code","55de9e3a":"code","2d917b3f":"code","1c958b37":"code","ca48cba3":"code","8076c914":"code","06ab1499":"code","d2ec49c3":"code","743b39a7":"code","b8c71b4f":"code","ba2f495b":"code","eeb8ffe7":"code","c5eb9cc8":"code","cc0451a5":"code","4948dda1":"code","8987ccd4":"code","179bef6f":"code","56879058":"markdown","73605e6d":"markdown","2051dfa9":"markdown","67ef35c4":"markdown","4aec1b47":"markdown","818b934c":"markdown","8d7ddb5e":"markdown","7658376f":"markdown","18d83659":"markdown","3014473b":"markdown","0af1f3c4":"markdown","48af8660":"markdown","f3cb4956":"markdown","a16f6a30":"markdown","e0c64661":"markdown","662e8623":"markdown","eef5e5bd":"markdown","546d4fa9":"markdown","1118d539":"markdown","69c02976":"markdown","1eced290":"markdown","1aeb5aa4":"markdown","8e28a3f6":"markdown","dc155d4b":"markdown","dc813e5e":"markdown","c9c1ddb1":"markdown","4ea7bcd9":"markdown","c9510210":"markdown","f5a85347":"markdown","b7e3b9bf":"markdown","ff4c981e":"markdown","0d356918":"markdown","d4562fc1":"markdown","80ece129":"markdown","71a5e10a":"markdown","0f8c4972":"markdown"},"source":{"e2157871":"import numpy as np\nimport pandas as pd\nimport math","09473d8b":"import matplotlib.pyplot as plt\nimport seaborn as sns","4ad8ec5c":"%matplotlib inline","4540c771":"df=pd.read_csv('..\/input\/cristiano7\/data.csv',index_col=0)","8c3760c6":"plt.figure(figsize=(10,10))\nsns.heatmap(df.isnull())","18b3af5b":"# sns.pairplot(df, hue='is_goal')","220fea03":"sns.boxplot(x='is_goal',y=\"remaining_min\",data=df)","0a08cc26":"def append_remaining_min(dis):\n    if math.isnan(dis[0]):\n        if dis[1]>=2 and dis[1]<=8:\n            return dis[1]\n        else:\n            return 4\n    else:\n        return dis[0]\n    \ndf['remaining_min']=df[['remaining_min','remaining_min.1']].apply(append_remaining_min,axis=1)","2354756f":"sns.boxplot(x='is_goal',y=\"power_of_shot\",data=df)","480fad16":"def append_power(dis):\n    if math.isnan(dis[0]):\n        if dis[1]>=1 and dis[1]<=4:\n            return dis[1]\n        else:\n            return 2\n    else:\n        return dis[0]\n        \n    \ndf['power_of_shot']=df[['power_of_shot','power_of_shot.1']].apply(append_power,axis=1)","905ecc5b":"#Value of column knockout_match\ndf['knockout_match'].value_counts()","ee341d84":"def append_ko(dis):\n    if math.isnan(dis[0]):\n        if dis[1]>=0 and dis[1]<=1:\n            return dis[1]\n        else:\n            return 0\n    else:\n        return dis[0]\n        \n    \ndf['knockout_match']=df[['knockout_match','knockout_match.1']].apply(append_ko,axis=1)","bad1aad5":"sns.boxplot(x='is_goal',y=\"remaining_sec\",data=df)","1e18f509":"def append_sec(dis):\n    if math.isnan(dis[0]):\n        if dis[1]>=12 and dis[1]<=42:\n            return dis[1]\n        else:\n            return 28\n    else:\n        return dis[0]\n        \n    \ndf['remaining_sec']=df[['remaining_sec','remaining_sec.1']].apply(append_sec,axis=1)","70bb8ef1":"sns.boxplot(x='is_goal',y=\"distance_of_shot\",data=df)","c15d8dfe":"def append_dist(dis):\n    if math.isnan(dis[0]):\n        if dis[1]>=20 and dis[1]<=42:\n            return dis[1]\n        else:\n            return 28\n    else:\n        return dis[0]\n        \ndf['distance_of_shot']=df[['distance_of_shot',\"distance_of_shot.1\"]].apply(append_dist,axis=1)","d13b257a":"def lat(st):\n    if st == 'nan':\n        return\n    else:\n        return float(st.split(',')[0])\n\ndef lng(st):\n    if st == 'nan':\n        return\n    else:\n        return float(st.split(',')[1])\n\ndf['lat']=pd.Series(map(lambda x:lat(str(x)),df.loc[:,'lat\/lng']))\ndf['lng']=pd.Series(map(lambda x:lng(str(x)),df.loc[:,'lat\/lng']))","2c8b0ad5":"def aw(st):\n    if len(st.split()) == 3:\n        return st.split()[2]\n\ndf['away']=pd.Series(map(lambda x:aw(str(x)),df['home\/away']))","4806c651":"#list of cloumns with their index\n\ncols=list(df.columns)\n\nfor x in cols:\n    print(cols.index(x),\" \",x)","a96c249d":"sns.stripplot(df['location_x'],df['location_y'],hue=df['area_of_shot'],cmap='rainbow')","b4d691c9":"train_area=df[df['shot_basics'].isnull()==False][['location_x','location_y','shot_basics']]\ntest_area=df[df['shot_basics'].isnull()][['location_x','location_y','shot_basics']]\n\nsns.stripplot(train_area['location_x'],train_area['location_y'],hue=train_area['shot_basics'],cmap='rainbow')","fc74f7af":"#filling missing values of coloumn location_x using shot_basic and area_of_shot\n\ndef locx(ax):\n    ax[0]=float(ax[0])\n    if math.isnan(ax[0]):\n        return df[ (df['area_of_shot']==ax[1]) | (df['shot_basics']==ax[2]) ]['location_x'].mean()\n    else:\n        return ax[0]\n    \ndf['location_x']= df[['location_x','area_of_shot','shot_basics']].apply(locx,axis=1)","2590809e":"#filling missing values of coloumn location_y using shot_basic and area_of_shot\n\ndef locy(ax):\n    ax[0]=float(ax[0])\n    if math.isnan(ax[0]):\n        return df[ (df['area_of_shot']==ax[1])  | (df['shot_basics']==ax[2])]['location_y'].mean()\n    else:\n        return ax[0]\n    \ndf['location_y']= df[['location_y','area_of_shot','shot_basics']].apply(locy,axis=1)","6ffd75f2":"#filling missing values of coloumn away using match_event_id\n\n\ndef func2(ax):\n    if ax[0] == 'nan':\n        return df[df['match_event_id']==ax[1]]['away'].mode().values\n    else:\n        return ax[0]\n    \n\ndf['away']= df[['away','match_event_id']].astype('str').apply(func2,axis=1)    ","7f397b0b":"#filling missing values of coloumn date_of_game using match_event_id and match_id\n\n\ndef func3(ax):\n    t=df[ (df['match_event_id']==ax[1]) | (df['match_id']==ax[2])]['date_of_game'].mode().values\n    if ax[0] == 'nan':\n        if not t:\n            return \n        else:\n            return t\n    else:\n        return ax[0]\n    \n\ndf['date_of_game']= df[['date_of_game','match_event_id','match_id']].astype('str').apply(func3,axis=1)    ","b68cafe0":"#filling missing values of coloumn lat(latitude) using match_event_id and match_id\n\n\ndef func4(ax):\n    if ax[0] == 'nan':\n        if len(df[df['match_event_id']==ax[1]]['lat'].mode().values)==1:\n            return (df[df['match_event_id']==ax[1]]['lat'].mode().values)[0]\n        else:\n            return (df[df['match_event_id']==ax[1]]['lat'].mode().values)\n    else:\n        return ax[0]\n    \n\ndf['lat']= df[['lat','match_event_id']].astype('str').apply(func4,axis=1)   ","01cd9de7":"#filling missing values of coloumn lng(longitude) using match_event_id and match_id\n\n\ndef func5(ax):\n    if ax[0] == 'nan':\n        if len(df[df['match_event_id']==ax[1]]['lng'].mode().values)==1:\n            return (df[df['match_event_id']==ax[1]]['lng'].mode().values)[0]\n        else:\n            return (df[df['match_event_id']==ax[1]]['lng'].mode().values)\n    else:\n        return ax[0]\n    \n\ndf['lng']= df[['lng','match_event_id']].astype('str').apply(func5,axis=1)   ","ca8e8625":"len(df[df.away.isnull()])","8c4614f2":"len(df[df['location_y'].isnull()])","7fef65b0":"len(df[df['location_x'].isnull()])","4e69c744":"#filling those 5 missing values of column location_x and location_y\n\ndef rett(a,b):\n    if math.isnan(a):\n        return df.iloc[:,b].mean()\n    else:\n        return a","2c53f5a8":"df['location_x']=list(map(lambda x:rett(x,1),df['location_x']))","703f5b70":"df['location_y']=list(map(lambda x:rett(x,2),df['location_y']))","094483cd":"plt.figure(figsize=(22,10))\nsns.heatmap(df.isnull())","05c5016b":"train_area=df[df['area_of_shot'].isnull()==False][['location_x','location_y','area_of_shot']]\ntest_area=df[df['area_of_shot'].isnull()][['location_x','location_y','area_of_shot']]","11bff98e":"sns.stripplot(df['location_x'],df['location_y'],hue=df['area_of_shot'],cmap='rainbow')","20722aae":"#scaling the data for KNN\n\nfrom sklearn.preprocessing import StandardScaler\n\nn=df[['location_x','location_y','area_of_shot']]\n\nscaler = StandardScaler()\n\nscaler.fit(n.drop('area_of_shot',axis=1))\n\nscaled_features = scaler.transform(n.drop('area_of_shot',axis=1))\n\ndf_feat = pd.DataFrame(scaled_features,columns=['location_x','location_y'])","244c5cd5":"#splitting the data into training and testing\n\nnewdp=pd.concat([df_feat,n['area_of_shot']],axis=1)\n\nX_train=newdp[newdp['area_of_shot'].isnull()==False][['location_x','location_y']]\ny_train=newdp[newdp['area_of_shot'].isnull()==False][['area_of_shot']]\nX_test=newdp[newdp['area_of_shot'].isnull()][['location_x','location_y']]\ny_test=newdp[newdp['area_of_shot'].isnull()][['area_of_shot']]","19a44af3":"from sklearn.neighbors import KNeighborsClassifier","598ebe83":"knn = KNeighborsClassifier(n_neighbors=5)","ee9e53ce":"knn.fit(X_train,y_train)","d09269f4":"y_test=list(knn.predict(X_test))","3799d6ca":"qq = list(df[df['area_of_shot'].isnull()].index)","ff8432de":"#filling the predicted values into the dataset for the column area_of_shot\n\n\nfor x in qq:\n    df.loc[x,'area_of_shot']=y_test[qq.index(x)]","4d7f5721":"train_area=df[df['shot_basics'].isnull()==False][['location_x','location_y','shot_basics']]\ntest_area=df[df['shot_basics'].isnull()][['location_x','location_y','shot_basics']]\n\nsns.stripplot(train_area['location_x'],train_area['location_y'],hue=train_area['shot_basics'],cmap='rainbow')","b82393c9":"#scaling the data before applying KNN\n\nfrom sklearn.preprocessing import StandardScaler\n\nn=df[['location_x','location_y','shot_basics']]\n\nscaler = StandardScaler()\n\nscaler.fit(n.drop('shot_basics',axis=1))\n\nscaled_features = scaler.transform(n.drop('shot_basics',axis=1))\n\ndf_feat = pd.DataFrame(scaled_features,columns=['location_x','location_y'])","a34670b9":"#splitting the data into traing and testing \n\nnewdp=pd.concat([df_feat,n['shot_basics']],axis=1)\n\nX_train=newdp[newdp['shot_basics'].isnull()==False][['location_x','location_y']]\ny_train=newdp[newdp['shot_basics'].isnull()==False][['shot_basics']]\nX_test=newdp[newdp['shot_basics'].isnull()][['location_x','location_y']]\ny_test=newdp[newdp['shot_basics'].isnull()][['shot_basics']]","891629bd":"from sklearn.neighbors import KNeighborsClassifier","92cc6462":"knn = KNeighborsClassifier(n_neighbors=3)","7c97e67e":"knn.fit(X_train,y_train)","ad17655e":"y_test=list(knn.predict(X_test))","dc83d9a2":"qq = list(df[df['shot_basics'].isnull()].index)","24817ef6":"#filling the misssing value for the column shot_basic using prediction\n\nfor x in qq:\n    df.loc[x,'shot_basics']=y_test[qq.index(x)]","355ce580":"plt.figure(figsize=(10,7))\nsns.stripplot(x='distance_of_shot',y='location_y',data=df,hue='range_of_shot')","c850b54c":"#scaling the data for KNN\n\nfrom sklearn.preprocessing import StandardScaler\n\nn=df[['location_y','distance_of_shot','range_of_shot']]\n\nscaler = StandardScaler()\n\nscaler.fit(n.drop('range_of_shot',axis=1))\n\nscaled_features = scaler.transform(n.drop('range_of_shot',axis=1))\n\ndf_feat = pd.DataFrame(scaled_features,columns=['location_y','distance_of_shot'])","686b6352":"#splitting the data into train and test\n\nnewdp=pd.concat([df_feat,n['range_of_shot']],axis=1)\n\nX_train=newdp[newdp['range_of_shot'].isnull()==False][['location_y','distance_of_shot']]\ny_train=newdp[newdp['range_of_shot'].isnull()==False][['range_of_shot']]\nX_test=newdp[newdp['range_of_shot'].isnull()][['location_y','distance_of_shot']]\ny_test=newdp[newdp['range_of_shot'].isnull()][['range_of_shot']]","ac2eab8c":"from sklearn.neighbors import KNeighborsClassifier","9b06068b":"knn = KNeighborsClassifier(n_neighbors=3)","593621dd":"knn.fit(X_train,y_train)","b3394af0":"y_test=list(knn.predict(X_test))","b6b0aaf1":"qq = list(df[df['range_of_shot'].isnull()].index)","20dda414":"#filling the values of column range_of_shot using prediction\n\nfor x in qq:\n    df.loc[x,'range_of_shot']=y_test[qq.index(x)]","367786f6":"plt.figure(figsize=(10,7))\nsns.stripplot(x='match_id',y='game_season',data=df)","394bc4f8":"n=df[['match_id','game_season']]","35f04529":"X_train=n[n['game_season'].isnull()==False][['match_id']]\ny_train=n[n['game_season'].isnull()==False][['game_season']]\nX_test=n[n['game_season'].isnull()][['match_id']]\ny_test=n[n['game_season'].isnull()][['game_season']]","aabd9eae":"knn=KNeighborsClassifier()","f86b24da":"knn.fit(X_train,y_train)","b8603f58":"y_test=list(knn.predict(X_test))","f8cd83cc":"qq = list(df[df['game_season'].isnull()].index)","bfe7c8a2":"#filling the knn predictions into the column game_season\n\nfor x in qq:\n    df.loc[x,'game_season']=y_test[qq.index(x)]","cda3344f":"plt.figure(figsize=(22,10))\nsns.heatmap(df.isnull())","e1f08382":"#moving on to next step","c308b271":"fd=df[df['type_of_shot'].isnull()==False]\n\nsns.stripplot(fd['area_of_shot'],fd['location_x'],hue=fd['type_of_shot'],cmap='rainbow')","e8a67716":"#we can evidentlly see a pattern of relationship of type_of_combined_shot with (location_x,location_y)","d0e461fd":"ff=df[df['type_of_combined_shot'].isnull()==False]\n\nsns.stripplot(ff['location_y'],ff['location_x'],hue=ff['type_of_combined_shot'],cmap='rainbow')","e606da04":"# value counts for the column type_of_combined_shot\nff['type_of_combined_shot'].value_counts()","d420efb8":"from sklearn.preprocessing import StandardScaler\n\nn=df[['location_x','location_y','type_of_combined_shot']]\n\nscaler = StandardScaler()\n\nscaler.fit(n.drop('type_of_combined_shot',axis=1))\n\nscaled_features = scaler.transform(n.drop('type_of_combined_shot',axis=1))\n\ndf_feat = pd.DataFrame(scaled_features,columns=['location_x','location_y'])","e31b0cc4":"newdp=pd.concat([df_feat,n['type_of_combined_shot']],axis=1)\n\nX_train=newdp[newdp['type_of_combined_shot'].isnull()==False][['location_x','location_y']]\ny_train=newdp[newdp['type_of_combined_shot'].isnull()==False][['type_of_combined_shot']]\nX_test=newdp[newdp['type_of_combined_shot'].isnull()][['location_x','location_y']]\ny_test=newdp[newdp['type_of_combined_shot'].isnull()][['type_of_combined_shot']]","d75a26a7":"from sklearn.neighbors import KNeighborsClassifier","532eb97c":"knn = KNeighborsClassifier(n_neighbors=4)","ab28398c":"knn.fit(X_train,y_train)","aeda63e1":"y_test=list(knn.predict(X_test))","d9b60aeb":"qq = list(df[df['type_of_combined_shot'].isnull()].index)","2a134123":"#filling in the predicted values for the column type_of_combined_shot\n\nfor x in qq:\n    df.loc[x,'type_of_combined_shot']=y_test[qq.index(x)]","91a8694b":"def aw(st):\n    if len(st.split('-')) == 2:\n        return st.split('-')[1]\n\ndf['type_shot']=pd.Series(map(lambda x:aw(str(x)),df['type_of_shot']))","95ea0f8b":"def funbun(x):\n    if x!=None:\n        return int(x)\n        ","bc6ec1ad":"df['type_shot']=df['type_shot'].apply(funbun)","0695080b":"#plotting the new created column (tye_shot)\n\n\nfd=df[df['type_shot'].isnull()==False]\nplt.figure(figsize=(15,10))\nsns.stripplot(fd['power_of_shot'],fd['distance_of_shot'],hue=fd['type_shot'])","a25371cb":"plt.figure(figsize=(22,10))\nsns.heatmap(df.isnull())","170c3a32":"season= pd.get_dummies(df['game_season'],drop_first=True)","69005ccf":"shot_area= pd.get_dummies(df['area_of_shot'],drop_first=True)","36e3caef":"basic = pd.get_dummies(df['shot_basics'],drop_first=True)","6ccc74c9":"ranges =  pd.get_dummies(df['range_of_shot'],drop_first=True)","42260c8c":"com =  pd.get_dummies(df['type_of_combined_shot'],drop_first=True)","0d05cc68":"df.drop(['match_event_id','lat\/lng','team_id', 'remaining_min.1', 'power_of_shot.1',\n       'knockout_match.1', 'remaining_sec.1', 'distance_of_shot.1', 'away',\n       'type_shot','team_name','home\/away'],axis=1,inplace=True)","abdb2b83":"df","55de9e3a":"df=pd.concat([df[['location_x', 'location_y','remaining_sec', 'distance_of_shot']]\n              ,ranges,basic,shot_area,season,df[['is_goal','shot_id_number']]],axis=1)","2d917b3f":"from keras.models import Sequential\nfrom keras.layers import Dense,Dropout,LeakyReLU\nfrom keras.layers import Activation, Dense","1c958b37":"model=Sequential()\nmodel.add(Dense(64,input_shape=(38,)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(60))\nmodel.add(Activation('relu'))\nmodel.add(Dense(40))\nmodel.add(Activation('relu'))\nmodel.add(Dense(20))\nmodel.add(Activation('relu'))\nmodel.add(Dense(10))\nmodel.add(Activation('relu'))\nmodel.add(Dense(5))\nmodel.add(Activation('relu'))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\nmodel.summary()","ca48cba3":"#splitting the dataset\n\nxmos=df[df['is_goal'].isnull()==False]\nymos=df[df['is_goal'].isnull()==True]","8076c914":"from sklearn.model_selection import train_test_split","06ab1499":"X_train, X_test, y_train, y_test = train_test_split(xmos.drop(['is_goal','shot_id_number'],axis=1),xmos[['is_goal','shot_id_number']] , test_size=0.33)","d2ec49c3":"model.compile(optimizer='adam',loss='mean_squared_error',metrics=['accuracy'])","743b39a7":"#fitting the model\n#with 40  epoch\n\nmodel.fit(X_train,y_train['is_goal'],10,40,validation_data=(X_test,y_test['is_goal']))","b8c71b4f":"X_train=xmos.drop(['is_goal','shot_id_number'],axis=1)\ny_train=xmos[['is_goal','shot_id_number']]\nX_test=ymos.drop(['is_goal','shot_id_number'],axis=1)\ny_test=ymos[['is_goal','shot_id_number']]","ba2f495b":"model.compile(optimizer='adam',loss='mean_squared_error',metrics=['accuracy'])","eeb8ffe7":"model.fit(X_train,y_train['is_goal'],10,20,validation_data=(X_test,y_test['is_goal']))","c5eb9cc8":"#predicting\n\nval=pd.DataFrame(model.predict(X_test),columns=['is_goal'])","cc0451a5":"y_test.drop('is_goal',axis=1,inplace=True)\nval.index=y_test.index","4948dda1":"#filling the Y-test column\n\ny_test=pd.concat([val,y_test['shot_id_number']],axis=1)","8987ccd4":"y_mux=pd.concat([X_test,y_test],axis=1)\nx_mux=pd.concat([X_train,y_train],axis=1)","179bef6f":"#final DataFrame\ntotal=pd.concat([x_mux,y_mux],axis=0)","56879058":"####  using game_id column to fill the values of column game_season","73605e6d":"###  relationship between columns","2051dfa9":"### Moving to our prediction model","67ef35c4":"#### we can see most of the relevant columns are filled now ","4aec1b47":"####  Usning KNN to predict the values of range_of_shot ","818b934c":"###  filling values of 'remaining_min' column using remaining_min.1 column","8d7ddb5e":"###  finding degree of missing values in the dataset","7658376f":"###  filling the column 'knockout_match' using values of 'knockout_match.1'","18d83659":"### end of data pre-processing section","3014473b":"#### Creating a 7 Layered Artificial Neural Network for prediction","0af1f3c4":"###  filling the column ' power_of_shot' using values of 'power_of_shot.1'","48af8660":"#####  Plotting relational trend of column type_of combined_shot","f3cb4956":"### spliting column 'lat\/lng' into two float columns i.e - lat and lng","a16f6a30":"#### Dropping all the unnecessary columns from the dataframe","e0c64661":"####  predicting value for column shot_basic using (location_x,location_y) by KNN algorithm","662e8623":"####  Plotting relationship between (distance_of_shot,location_y) and range_of_shot","eef5e5bd":"#### relationship between (location_x,location_y) and area_of_shot","546d4fa9":"###  we can see a relationship between columns\n####     1.  (location_x,location_y) and shot_basics\n####     2.  (location_x,location_y) and area_of_shot\n####     3.  match_event_id and away\n####     4.  match_event_id and date_of_game","1118d539":"#### Using KNN to predict the missing values of column type_of_combined shot","69c02976":"### concatenating Dummy columns with the main dataframe","1eced290":"###  filling values in cloumn 'remaining _sec' using column 'remaining_sec.1'","1aeb5aa4":"### As home values is same in all columns i.e- MANU\n### creating a new relevant column away with split function","8e28a3f6":"###  Now filling categorical column using KNN algorithm","dc155d4b":"### value distribution of column 'remaing_sec'","dc813e5e":"#### converting type_of_shot from categorical column to a regressive column","c9c1ddb1":"### Splitting categorical column into Dummy column for prediction ease ","4ea7bcd9":"### finding relevant range of 'power_of_shot' column to fill ","c9510210":"##### no null value left in column- away\n\n##### 5 missing values in column - location_x, location_y ","f5a85347":"#### Plotting relationship between game_season and match_id","b7e3b9bf":"###  filling values in column 'distance_of_shot' using 'distance_of_shot.1'","ff4c981e":"###  plotting value distribution of column 'distance_of_shot'","0d356918":"####  plotting relationship between (location_x,location_y) and shot_basics","d4562fc1":"### finding relevant range of 'remaining_min ' column to fill ","80ece129":"###  prediction senction","71a5e10a":"#####  dataset after filling some values","0f8c4972":"#####  plotting the relationship for type_of_shot\n\n#####  we see no definative pattern hence we discard the column"}}