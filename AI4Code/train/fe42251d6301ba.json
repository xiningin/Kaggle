{"cell_type":{"64e4d087":"code","12d6c61d":"code","b86b9a01":"code","e71b4b14":"code","3b10bff4":"code","eca8c834":"code","c89adb09":"code","aa271ed8":"code","0651dae8":"code","8736840d":"code","0c3ff89d":"code","256e8644":"code","4725915b":"code","e46227ab":"code","ba5ad5ff":"code","64e18368":"code","57f0bff1":"code","c125bfc7":"code","c5482ba1":"code","7205d042":"code","a96fa74d":"code","1f8a216e":"code","880d1757":"code","6e670991":"code","f79b8b3f":"code","3d5e8ccc":"code","3c1287e1":"code","288acc5e":"code","af9630fe":"code","58b65108":"code","c6315a93":"code","ae68aab9":"code","3c65abfc":"code","6781491e":"code","0526c029":"code","fcb7975e":"code","dbb7e45b":"code","d34a0347":"code","45faeb38":"code","ff05fd82":"code","6e725a56":"code","bb8261f1":"code","bc9e6d7e":"code","b0b93593":"code","297fdca3":"code","a9dec0dd":"code","2dc468c8":"code","c1582c52":"code","bea4dea9":"code","653c52de":"code","63a3ab60":"code","0d2cdc1f":"code","66891d70":"code","78372e9d":"code","0158e881":"code","8d9777d8":"code","011f8b89":"code","7f46f18c":"code","fa106de7":"code","4cdcabef":"code","bdb648f7":"markdown","7e930aa7":"markdown","32c18038":"markdown","5345038a":"markdown","cba6c488":"markdown","d66c320d":"markdown","d9efdcd8":"markdown","73f9cfc5":"markdown","21cc0f35":"markdown","05ed1ec0":"markdown","ec704d11":"markdown","8b0ef939":"markdown","0698ae03":"markdown","f601306a":"markdown","586565f1":"markdown","5efc29a4":"markdown","c1686a00":"markdown","9bb4c230":"markdown","cb21977c":"markdown","d41682b7":"markdown","aa40513a":"markdown","85ac96b2":"markdown","314323c7":"markdown","968ab4a8":"markdown"},"source":{"64e4d087":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","12d6c61d":"train = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv')","b86b9a01":"train.head()","e71b4b14":"len(train.Hospital_code.unique())","3b10bff4":"plt.figure(figsize=(12, 6))\nsns.countplot(train.Hospital_type_code)","eca8c834":"plt.figure(figsize=(12, 6))\nsns.countplot(train.City_Code_Hospital)","c89adb09":"plt.figure(figsize=(12, 6))\nsns.countplot(train.Hospital_region_code)","aa271ed8":"plt.figure(figsize=(12, 6))\nsns.countplot(train['Available Extra Rooms in Hospital']) ","0651dae8":"plt.figure(figsize=(12, 6))\nsns.countplot(train.Department) ","8736840d":"plt.figure(figsize=(12, 6))\nsns.countplot(train.Ward_Type) ","0c3ff89d":"plt.figure(figsize=(12, 6))\nsns.countplot(train.Ward_Facility_Code) ","256e8644":"plt.figure(figsize=(12, 6))\nsns.countplot(train['Bed Grade'])","4725915b":"len(train.patientid.unique())","e46227ab":"plt.figure(figsize=(12, 6))\nsns.countplot(train['Type of Admission'])","ba5ad5ff":"plt.figure(figsize=(12, 6))\nsns.countplot(train['Severity of Illness'])","64e18368":"plt.figure(figsize=(12, 6))\nsns.countplot(train['Visitors with Patient'])","57f0bff1":"plt.figure(figsize=(12, 6))\ntrain.groupby('Age')['patientid'].count().plot()","c125bfc7":"plt.figure(figsize=(12, 6))\nsns.distplot(train.Admission_Deposit)","c5482ba1":"# Almost perfect normal distribution","7205d042":"plt.figure(figsize=(15, 6))\nsns.countplot(train.Stay)","a96fa74d":"train.isnull().sum()","1f8a216e":"# we will remove the City_Code_Patient column and replace rows where Bed Grade is null by most frequent","880d1757":"sns.catplot(x=\"Stay\", y=\"Bed Grade\", kind=\"bar\", data=train, aspect=2.5)","6e670991":"# Not a lot of differences for between the stay days for the bed grades","f79b8b3f":"# Convert categorical feature for observation\n\ntype_ad = train[['Type of Admission', 'Stay']]\n\ntype_ad['Type of Admission_cat'] = type_ad['Type of Admission'].astype('category').cat.codes","3d5e8ccc":"type_ad[['Type of Admission', 'Type of Admission_cat']].drop_duplicates()","3c1287e1":"type_ad = type_ad.sort_values('Stay')","288acc5e":"sns.catplot(x=\"Stay\", y=\"Type of Admission_cat\", kind=\"bar\", data=type_ad, aspect=2.5)","af9630fe":"# More emergencies for patients staying 0-10 days, otherwise quite homogene","58b65108":"# Convert categorical feature for observation\n\nill = train[['Severity of Illness', 'Stay']]\n\n# Order of severity\nill['Severity of Illness_cat'] = ill['Severity of Illness'].map({'Minor':0, 'Moderate':1, 'Extreme':2})","c6315a93":"ill[['Severity of Illness', 'Severity of Illness_cat']].drop_duplicates()","ae68aab9":"ill = ill.sort_values('Stay')","3c65abfc":"sns.catplot(x=\"Stay\", y=\"Severity of Illness_cat\", kind=\"bar\", data=ill, aspect=2.5)","6781491e":"# Number of stay days increase with the severity of the illness ","0526c029":"# Convert categorical feature for observation\n\nage = train[['Age', 'Stay']]\n\nage['Age_cat'] = age['Age'].astype('category').cat.codes","fcb7975e":"age[['Age', 'Age_cat']].drop_duplicates()","dbb7e45b":"age = age.sort_values('Stay')","d34a0347":"sns.catplot(x=\"Stay\", y=\"Age_cat\", kind=\"bar\", data=age, aspect=2.5)","45faeb38":"# Number of stay days increase with the age ","ff05fd82":"train = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv')","6e725a56":"test = pd.read_csv('\/kaggle\/input\/av-healthcare-analytics-ii\/healthcare\/test_data.csv')","bb8261f1":"test.isnull().sum()","bc9e6d7e":"# Replace rows with null values\ntrain['Bed Grade'] = train['Bed Grade'].fillna(train['Bed Grade'].mode().values[0])\ntest['Bed Grade'] = test['Bed Grade'].fillna(train['Bed Grade'].mode().values[0])","b0b93593":"# Remove City_Code_Patient\ntrain = train.drop('City_Code_Patient', axis=1)\ntest = test.drop('City_Code_Patient', axis=1)","297fdca3":"# Convert categorical features\n\n# TRAIN\ntrain['Hospital_type_code'] = train.Hospital_type_code.astype('category').cat.codes\ntrain['City_Code_Hospital'] = train.City_Code_Hospital.astype('category').cat.codes\ntrain['Hospital_region_code'] = train.Hospital_region_code.astype('category').cat.codes\ntrain['Department'] = train.Department.astype('category').cat.codes\ntrain['Ward_Type'] = train.Ward_Type.astype('category').cat.codes\ntrain['Ward_Facility_Code'] = train.Ward_Facility_Code.astype('category').cat.codes\ntrain['Type of Admission'] = train['Type of Admission'].astype('category').cat.codes\ntrain['Severity of Illness'] = train['Severity of Illness'].astype('category').cat.codes\ntrain['Age'] = train['Age'].astype('category').cat.codes\ntrain['Stay'] = train['Stay'].astype('category').cat.codes\n\n#TEST\ntest['Hospital_type_code'] = test.Hospital_type_code.astype('category').cat.codes\ntest['City_Code_Hospital'] = test.City_Code_Hospital.astype('category').cat.codes\ntest['Hospital_region_code'] = test.Hospital_region_code.astype('category').cat.codes\ntest['Department'] = test.Department.astype('category').cat.codes\ntest['Ward_Type'] = test.Ward_Type.astype('category').cat.codes\ntest['Ward_Facility_Code'] = test.Ward_Facility_Code.astype('category').cat.codes\ntest['Type of Admission'] = test['Type of Admission'].astype('category').cat.codes\ntest['Severity of Illness'] = test['Severity of Illness'].astype('category').cat.codes\ntest['Age'] = test['Age'].astype('category').cat.codes","a9dec0dd":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import tree\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier","2dc468c8":"train.head()","c1582c52":"train.columns","bea4dea9":"a = train[['Available Extra Rooms in Hospital',\n       'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade',\n       'Type of Admission', 'Severity of Illness',\n       'Visitors with Patient', 'Age', 'Admission_Deposit', 'Stay']]","653c52de":"X = a.drop(\"Stay\", axis=1)\nY = a[\"Stay\"]","63a3ab60":"# Split 20% test, 80% train\n\nX_train, X_val, Y_train, Y_val = train_test_split(X, Y, test_size = 0.2, random_state=0)","0d2cdc1f":"# Logistic Regression\n\nlog = LogisticRegression(max_iter=100)\nlog.fit(X_train, Y_train)\nY_pred_log = log.predict(X_val)\nacc_log = accuracy_score(Y_pred_log, Y_val)\nacc_log","66891d70":"# Logistic RegressionCV\n\nlogcv = LogisticRegressionCV(cv=10, random_state=0)\nlogcv.fit(X_train, Y_train)\nY_pred_log = logcv.predict(X_val)\nacc_logcv = accuracy_score(Y_pred_log, Y_val)\nacc_logcv","78372e9d":"neigh = KNeighborsClassifier(n_neighbors=11) # 11 different values of Stay\nneigh.fit(X_train, Y_train)\nY_pred_neigh = neigh.predict(X_val)\n# get the accuracy score\nacc_neigh = accuracy_score(Y_pred_neigh, Y_val)\nprint(acc_neigh)","0158e881":"clf_rf = RandomForestClassifier(n_estimators=200, max_depth=15)\n\nclf_rf.fit(X_train, Y_train)\n\nY_pred_rf = clf_rf.predict(X_val)\n# get the accuracy score\nacc_rf = accuracy_score(Y_pred_rf, Y_val)\nprint(acc_rf)","8d9777d8":"clf_xgb = XGBClassifier(learning_rate=0.02, n_estimators=200, max_depth = 15)\n\nclf_xgb.fit(X_train, Y_train)\n\nY_pred_xgb = clf_xgb.predict(X_val)\n# get the accuracy score\nacc_xgb = accuracy_score(Y_pred_xgb, Y_val)\nprint(acc_xgb)","011f8b89":"# LGBM Classifier\n\nlgbm = LGBMClassifier(random_state=0)\nlgbm.fit(X_train, Y_train)\nY_pred_lgbm = lgbm.predict(X_val)\nacc_lgbm = accuracy_score(Y_pred_lgbm, Y_val)\nacc_lgbm","7f46f18c":"test = test[['Available Extra Rooms in Hospital', 'Department', 'Ward_Type',\n       'Ward_Facility_Code', 'Bed Grade', 'Type of Admission',\n       'Severity of Illness', 'Visitors with Patient', 'Age',\n       'Admission_Deposit']]","fa106de7":"# Best accuracy with LGBM\n\nlgbm = LGBMClassifier(random_state=0)\nlgbm.fit(X_train, Y_train)\nY_test = lgbm.predict(test)","4cdcabef":"Y_test","bdb648f7":"### Number of patients","7e930aa7":"### Department overlooking the case","32c18038":"### Types of hospitals","5345038a":"### Age of the patients","cba6c488":"# Data Featuring","d66c320d":"### Codes for the Ward Facilities","d9efdcd8":"### Number of hospitals","73f9cfc5":"# Data Exploration","21cc0f35":"### Stay Days by the patients","05ed1ec0":"### Severity of the illness recorded at the time of admission","ec704d11":"### Available extra rooms in hospitals","8b0ef939":"### Deposits at the Admission Time","0698ae03":"### Type of Admission x Stay","f601306a":"### Age x Stay","586565f1":"### City codes of hospitals","5efc29a4":"# Data Prediction","c1686a00":"### Codes for the Ward types","9bb4c230":"### Admission Types registered by the Hospitals","cb21977c":"# Creating the model","d41682b7":"### Bed Grade x Stay","aa40513a":"### Region codes of the hospitals","85ac96b2":"### Number of Visitors with the patient","314323c7":"### Conditions of Beds in the Wards","968ab4a8":"### Severity of Illness x Stay"}}