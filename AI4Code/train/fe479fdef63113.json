{"cell_type":{"acdbbd34":"code","b753bf9d":"code","790b3260":"code","bdb61fc9":"code","2768b7af":"code","ac147c84":"code","350f7d14":"code","f74ff83a":"code","96797294":"code","61ba9077":"code","6aab4304":"code","9b517ed6":"code","411b8a85":"code","6ad69f96":"code","9b329fac":"code","7d37dc36":"code","e048be22":"code","2fe131c5":"code","95292ca3":"code","97ef3da9":"code","dcaecaf0":"code","d3687eb6":"code","b0b1608c":"code","f719e435":"code","2cc1b322":"code","1c4e4f24":"code","d50ba415":"code","a1ddd67a":"code","92680938":"code","9f44ad69":"code","eeed4f93":"code","7b988154":"code","002c67a3":"code","fe2d0529":"code","25f57036":"code","0b16a905":"code","17ce75f3":"markdown","7ac9523c":"markdown"},"source":{"acdbbd34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.linear_model import LogisticRegression\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b753bf9d":"data = pd.read_csv('..\/input\/busara.csv')","790b3260":"data.head()","bdb61fc9":"data['survey_date'] = pd.to_datetime(data['survey_date'])\ndata['month'] = data['survey_date'].dt.strftime('%m')\ndata['year'] = data['survey_date'].dt.strftime('%Y')\ndata['day'] = data['survey_date'].dt.strftime('%w')\n\n","2768b7af":"data.head()","ac147c84":"data['year'] = pd.get_dummies(data['year'])","350f7d14":"data.head()","f74ff83a":"s  = ['survey_date']\ndata = data.drop(s,axis=True)","96797294":"data = data.dropna(axis=1)","61ba9077":"data.info()","6aab4304":"x = data.drop(['depressed'], axis=1)\ny = data.depressed","9b517ed6":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x,y, test_size=0.1)","411b8a85":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nsc.fit(X_train)\nX_train_std = sc.transform(X_train)\nX_test_std = sc.transform(X_test)","6ad69f96":"rf = LogisticRegression(C = 1000.0,random_state = 0)\nrf.fit(X_train_std, y_train)","9b329fac":"#rf.fit(x,y)","7d37dc36":"from sklearn.metrics import mean_absolute_error\npred_train = rf.predict(X_train_std)\nprint (mean_absolute_error(pred_train,y_train))","e048be22":"test = pd.read_csv('..\/input\/test.csv')","2fe131c5":"test.head()","95292ca3":"import seaborn as sns\nsns.heatmap(test.isnull(),cbar=False, cmap='viridis')","97ef3da9":"test = test.dropna(axis=1)","dcaecaf0":"test.head()","d3687eb6":"sns.heatmap(test.isnull(),cbar=False, cmap='viridis')","b0b1608c":"test['survey_date'] = pd.to_datetime(test['survey_date'])\ntest['month'] = test['survey_date'].dt.strftime('%m')\ntest['year'] = test['survey_date'].dt.strftime('%Y')\ntest['day'] = test['survey_date'].dt.strftime('%w')\n","f719e435":"test['year'] = pd.get_dummies(test['year'])","2cc1b322":"test = test.drop(s, axis=True)","1c4e4f24":"test.info()","d50ba415":"test.columns","a1ddd67a":"q = ['fs_adskipm_often', 'asset_niceroof', 'cons_allfood',\n       'cons_ed', 'med_vacc_newborns','ent_nonagbusiness',\n       'cons_other','early_survey']\ntest = test.drop(q, axis=True)","92680938":"x_test = test.drop(['surveyid'], axis=1)\ntest_pred = rf.predict(x_test)","9f44ad69":"from sklearn.model_selection import train_test_split\nX_trains, X_tests, y_trains, y_tests = train_test_split(x_test,test_pred, test_size=0.33)","eeed4f93":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nsc.fit(X_trains)\nX_train_st = sc.transform(X_trains)\nX_test_st = sc.transform(X_tests)","7b988154":"rl = LogisticRegression(C = 1000.0,random_state = 0)\nrl.fit(X_train_st, y_trains)","002c67a3":"from sklearn.metrics import mean_absolute_error\npred_trains = rl.predict(X_train_st)\nprint (mean_absolute_error(pred_trains,y_trains))","fe2d0529":"q = {'surveyid': test[\"surveyid\"], 'depressed': test_pred}\npred = pd.DataFrame(data=q)\npred = pred[['surveyid','depressed']]","25f57036":"pred.head","0b16a905":"pred.to_csv('pred_set13.csv', index=False) #save to csv file","17ce75f3":"test","7ac9523c":"Training the model"}}