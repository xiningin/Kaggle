{"cell_type":{"c94366d6":"code","f61f445a":"code","c6703a08":"code","110f6101":"code","dece89f1":"code","ca9b9541":"code","fefa8dc1":"code","bc905afb":"code","e90a7c89":"code","be72c6e0":"code","d64ebc35":"code","0bd48397":"code","d5b14a62":"code","ae1994a0":"code","66703a4b":"markdown","f203aed2":"markdown","28ad563c":"markdown","37c399bd":"markdown","89d9fc33":"markdown","24826d53":"markdown","5681bd18":"markdown","6de8bd07":"markdown","38218c7f":"markdown","7c138b98":"markdown","0ca17ed3":"markdown","df5e0ab7":"markdown","57040729":"markdown","53997e60":"markdown","1e753cf0":"markdown","29cfd37e":"markdown"},"source":{"c94366d6":"import keras \nimport numpy as np\nimport keras.layers as L\nimport keras.models as M\nimport tensorflow as tf\nfrom keras.datasets.mnist import load_data\nimport imageio\nimport matplotlib.pyplot as pyplot\nimport os","f61f445a":"def make_d_model(in_shape=(28,28,1)):\n    model=M.Sequential()\n    model.add(L.Conv2D(filters=64,kernel_size=(3,3),activation=L.LeakyReLU(alpha=0.2),input_shape=in_shape,padding='same'))\n    model.add(L.Dropout(0.4))\n    model.add(L.Conv2D(filters=64,kernel_size=(3,3),activation=L.LeakyReLU(alpha=0.2),input_shape=in_shape,padding='same'))\n    model.add(L.Dropout(0.4))\n    model.add(L.Flatten())\n    model.add(L.Dense(1,'sigmoid'))\n    opt=keras.optimizers.Adam(lr=0.0001, beta_1=0.5)\n    model.compile(loss='binary_crossentropy',optimizer=opt,metrics=['accuracy'])\n    return model","c6703a08":"def get_data():\n    train,test=load_data()\n    X=train[0]\n    X=np.expand_dims(X,axis=-1)\n    X=X.astype('float32')\n    X=X\/255\n    return X","110f6101":"def make_real_samples(dataset,n_samples):\n    ix=np.random.randint(0,dataset.shape[0],n_samples)\n    X=dataset[ix]\n    y=np.ones((n_samples,1))\n    return X,y","dece89f1":"def make_latent_points(latent_dim,n_samples):\n    latent=np.random.randn(latent_dim*n_samples)\n    latent=latent.reshape(n_samples,latent_dim)\n    return latent","ca9b9541":"# Transpose works like input+kernel_size*strides-1 ===> output\ndef make_generator_model(latent_dim):\n    model=M.Sequential()\n    model.add(L.Dense(128*7*7,input_dim=latent_dim,activation=L.LeakyReLU(alpha=0.2)))\n    model.add(L.Reshape((7,7,128)))\n    model.add(L.Conv2DTranspose(128,kernel_size=(4,4),strides=(2,2),padding='same',activation=L.LeakyReLU(alpha=0.2)))\n    model.add(L.Conv2DTranspose(128,kernel_size=(4,4),strides=(2,2),padding='same',activation=L.LeakyReLU(alpha=0.2)))\n    model.add(L.Conv2D(1,kernel_size=(7,7),activation='sigmoid',padding='same'))\n    return model\n","fefa8dc1":"def make_fake_samples(generator,latent_dim,n_samples):\n    X=make_latent_points(latent_dim,n_samples)\n    predictions=generator.predict(X)\n    y=np.zeros((n_samples,1))\n    return predictions,y","bc905afb":"# Define the gan model\ndef make_gan_model(g_model,d_model):\n    d_model.trainable=False\n    model=M.Sequential()\n    model.add(g_model)\n    model.add(d_model)\n    opt=keras.optimizers.Adam(lr=0.0002,beta_1=0.5)\n    model.compile(loss='binary_crossentropy',optimizer=opt,metrics=['accuracy'])\n    return model\n    ","e90a7c89":"def summarize_performance(epoch,g_model,d_model,dataset,latent_dim,n_samples=100):\n    X_real,y_real=make_real_samples(dataset,n_samples)\n    _,real_acc=d_model.evaluate(X_real,y_real,verbose=0)\n    X_fake,y_fake=make_fake_samples(g_model,latent_dim,n_samples)\n    _,fake_acc=d_model.evaluate(X_fake,y_fake,verbose=0)\n    print('For Epoch:',epoch,'   Real Accuracy:',real_acc,'  Fake Accuracy:',fake_acc)\n    save_plot(X_fake,epoch)","be72c6e0":"def train_gan (g_model,d_model,gan_model,dataset,epochs=100,batch_size=256,latent_dim=100,n_samples=100,n_timer=10):\n    size=batch_size\/\/2\n    for i in range(epochs):\n        X_real,y_real=make_real_samples(dataset,n_samples)\n        X_fake,y_fake=make_fake_samples(g_model,latent_dim,n_samples)\n        X, y = np.vstack((X_real, X_fake)), np.vstack((y_real, y_fake))\n        d_loss,_=d_model.train_on_batch(X,y)\n        X_gan=make_latent_points(latent_dim,batch_size)\n        y_gan=np.ones((batch_size,1))\n        g_loss,_=gan_model.train_on_batch(X_gan,y_gan)\n        print('Epoch :',i,'d_loss:',d_loss , '  gan loss:',g_loss)\n        if i%n_timer==0:\n            summarize_performance(i,g_model,d_model,dataset,latent_dim,n_samples)\n            ","d64ebc35":"# create and save a plot of generated images (reversed grayscale)\ndef save_plot(examples, epoch, n=8):\n    # plot images\n    \n    for i in range(n * n):\n    # define subplot\n        pyplot.subplot(n, n, 1 + i)\n        # turn off axis\n        pyplot.axis('off')\n        # plot raw pixel data\n        pyplot.imshow(examples[i, :, :, 0], cmap='gray_r')\n    # save plot to file\n    filename = 'generated_plot_e%03d.png' % (epoch+1)\n    pyplot.savefig(filename,dpi=100)\n    pyplot.close()\n","0bd48397":"latent_dim=100\nd_model=make_d_model()\ng_model=make_generator_model(latent_dim)\ngan_model=make_gan_model(g_model,d_model)\ndataset=get_data()","d5b14a62":"train_gan(g_model,d_model,gan_model,dataset,epochs=1000)","ae1994a0":"path='.\/'\nimport glob\nfrom PIL import Image\n\n# filepaths\nfp_in = \".\/*.png\"\nfp_out = \".\/imag2.gif\"\n\n# https:\/\/pillow.readthedocs.io\/en\/stable\/handbook\/image-file-formats.html#gif\nimg, *imgs = [Image.open(f) for f in sorted(glob.glob(fp_in))]\nimg.save(fp=fp_out, format='GIF', append_images=imgs,\n         save_all=True, duration=100, loop=0)","66703a4b":"# Calling Functions","f203aed2":"![](.\/imag2.gif)","28ad563c":"# Making Function to create fake sample using generator and Latent points","37c399bd":"# Making function to get MNIST data","89d9fc33":"# Making Generator model","24826d53":"# This is a simple model . I will try to explore it more in the further versions :)\n\n\n# Thank you :)","5681bd18":"# Making discriminator model","6de8bd07":"# Function to train GAN","38218c7f":"# Function to show result after certain no. of epochs","7c138b98":"# GAN ON MNIST","0ca17ed3":"# Making function to get real sample data","df5e0ab7":"# Function to make random latent points","57040729":"# Importing the packages","53997e60":"# Function to save result of generator ","1e753cf0":"# The result for 1000 epochs is :\n\n![](.\/imag2.gif)","29cfd37e":"# Making GAN Model"}}