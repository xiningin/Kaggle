{"cell_type":{"74859415":"code","14d2e2c8":"code","0af84fdd":"code","a337fbf7":"code","c837d21f":"code","a0fc80f0":"code","afc7ab43":"code","f24c996a":"code","7d5f7f28":"code","72bf85b3":"code","b06cb391":"code","a817f586":"code","02883d63":"code","2d1fd801":"code","50d33c7d":"code","3ae79ab7":"code","986355db":"code","5a8cb322":"code","2ab25cfb":"code","67c65b47":"code","d9db0716":"code","5111c87e":"code","38a28483":"code","fd8692df":"code","fa8b1270":"code","235a1fac":"code","8bcc89bd":"code","1bfb1c62":"markdown","5d448806":"markdown","ff6d1b92":"markdown"},"source":{"74859415":"import os\nimport glob\n\nfiles = glob.glob(r'\/output\/kaggle\/working\/*')\nfor items in files:\n    os.remove(items)","14d2e2c8":"import pandas as pd\nimport numpy as np\nimport os\nimport requests\nimport json\nimport datetime\nimport time","0af84fdd":"MIN_FINAL_RATING = 1450 # top submission in a match must have reached this score\nnum_api_calls_today = 0\nNUM_TEAMS = 1\nEPISODES = 50","a337fbf7":"BUFFER = 1\n\nbase_url = \"https:\/\/www.kaggle.com\/requests\/EpisodeService\/\"\nget_url = base_url + \"GetEpisodeReplay\"\nlist_url = base_url + \"ListEpisodes\"","c837d21f":"# inital team list\n\nr = requests.post(list_url, json = {\"teamId\":5653767}) # arbitrary ID, change to leading ID during challenge\nrj = r.json()\nteams_df = pd.DataFrame(rj['result']['teams'])","a0fc80f0":"teams_df.sort_values('publicLeaderboardRank', inplace = True)\n# Selecting the top 10\nteams_df = teams_df.iloc[:1,:]\nteams_df","afc7ab43":"def getTeamEpisodes(team_id,teams_df):\n\n    r = requests.post(list_url, json = {\"teamId\":  int(team_id)})\n    rj = r.json()\n\n    # update teams list\n    # global teams_df\n    teams_df_new = pd.DataFrame(rj['result']['teams'])\n\n    if len(teams_df.columns) == len(teams_df_new.columns) and (teams_df.columns == teams_df_new.columns).all():\n        teams_df = pd.concat( (teams_df, teams_df_new.loc[[c for c in teams_df_new.index if c not in teams_df.index]] ) )\n        teams_df.sort_values('publicLeaderboardRank', inplace = True)\n    else:\n        print('teams dataframe did not match')\n\n    # make df\n    team_episodes = pd.DataFrame(rj['result']['episodes'])\n    team_episodes['avg_score'] = -1;\n\n    agents = []\n    for i in range(len(team_episodes)):\n        agents.append(team_episodes['agents'].loc[i])\n    not_none_agents = []\n    for i in range(len(agents)):\n        l = [a['updatedScore'] for a in agents[i] if a['updatedScore'] is not None]\n        if l:\n            not_none_agents.append(agents[i])\n            \n    for i in range(len(not_none_agents)):\n        agents = not_none_agents[i]\n        agent_scores = [a['updatedScore'] for a in agents if a['updatedScore'] is not None]\n        team_episodes.loc[i, 'submissionId'] = max([a['submissionId'] for a in agents])\n        team_episodes.loc[i, 'updatedScore'] = max([a['updatedScore'] for a in agents]) \n    \n    team_episodes['final_score'] = team_episodes['updatedScore']\n    team_episodes.sort_values('final_score', ascending = False, inplace=True)\n    \n    return rj, team_episodes","f24c996a":"def saveEpisode(epid, rj):\n    # request\n    re = requests.post(get_url, json = {\"EpisodeId\": int(epid)})\n        \n    # save replay\n    with open('{}.json'.format(epid), 'w') as f:\n        f.write(re.json()['result']['replay'])","7d5f7f28":"global num_api_calls_today\n\npulled_teams = {}\npulled_episodes = []\nstart_time = datetime.datetime.now()\nr = BUFFER;","72bf85b3":"while num_api_calls_today < EPISODES:\n    # pull team\n    top_teams = [i for i in teams_df.id if i not in pulled_teams]\n    if len(top_teams) > 0:\n        team_id = top_teams[0]\n    else:\n        break;\n        \n    # get team data\n    team_json, team_df = getTeamEpisodes(team_id,teams_df); r+=1;\n    \n    num_api_calls_today+=1\n    \n    print('{} games for {}'.format(len(team_df), teams_df.loc[teams_df.id == team_id].iloc[0].teamName))\n\n    \n    team_df = team_df[  (MIN_FINAL_RATING is None or (team_df.final_score > MIN_FINAL_RATING))]\n    \n    print('   {} in score range from {} submissions'.format(len(team_df), len(team_df.submissionId.unique() ) ) )\n    \n    team_df = team_df[~team_df.id.isin(pulled_episodes)]        \n    print('      {} remain to be downloaded\\n'.format(len(team_df)))\n        \n    # pull games\n    target_team_games = int(np.ceil(EPISODES \/ NUM_TEAMS))\n    if target_team_games + len(pulled_episodes) > EPISODES:\n        target_team_games = EPISODES - len(pulled_episodes)\n     \n    pulled_teams[team_id] = 0\n    \n    i = 0\n    while i < len(team_df) and pulled_teams[team_id] < target_team_games:\n        epid = team_df.id.iloc[i]\n        if not (epid in pulled_episodes):\n            try:\n                saveEpisode(epid, team_json); r+=1;\n                num_api_calls_today+=1\n            except:\n                time.sleep(20)\n                i+=1;\n                continue;\n                \n            pulled_episodes.append(epid)\n            pulled_teams[team_id] += 1\n            try:\n                size = os.path.getsize('{}.json'.format(epid)) \/ 1e6\n                print(str(num_api_calls_today) + ': Saved Episode #{} @ {:.1f}MB'.format(epid, size))\n            except:\n                print('  file {}.json did not seem to save'.format(epid))    \n            if r > (datetime.datetime.now() - start_time).seconds:\n                time.sleep( r - (datetime.datetime.now() - start_time).seconds)\n                \n\n        i+=1;\n    print(); print()","b06cb391":"import os\nimport pandas as pd\na = ['WeKick']\n\njson_paths = []\npaths = ['\/kaggle\/working']\nfor path in paths:\n    for dirname, _, filenames in os.walk(path):\n        for filename in filenames:\n            if len(filename) < 14:\n                json_paths.append(os.path.join(dirname, filename))\n                print('added')","a817f586":"import os\n\nprint(os.getcwd())","02883d63":"from zipfile import ZipFile \nimport os \n  \ndef get_all_file_paths(directory): \n  \n    # initializing empty file paths list \n    file_paths = [] \n  \n    # crawling through directory and subdirectories \n    for root, directories, files in os.walk(directory): \n        for filename in files: \n            # join the two strings in order to form the full filepath. \n            filepath = os.path.join(root, filename) \n            file_paths.append(filepath) \n  \n    # returning all file paths \n    return file_paths         \n  \ndef zip(): \n    # path to folder which needs to be zipped \n    directory = '\/kaggle\/working'\n  \n    # calling function to get all file paths in the directory \n    file_paths = get_all_file_paths(directory) \n  \n    # printing the list of all files to be zipped \n    print('Following files will be zipped:') \n    for file_name in file_paths:\n        if file_name.endswith('.json'):\n            print(file_name) \n  \n    # writing files to a zipfile \n    with ZipFile('my_python_files.zip','w') as zip: \n        # writing each file one by one \n        for file in file_paths:\n            if file.endswith('.json'):\n                zip.write(file) \n  \n    print('All files zipped successfully!')         \n  \nzip()","2d1fd801":"def json_to_v115(json_path):\n    raw_data = pd.read_json(json_path,\n                        lines=True,\n                        orient='columns')\n    \n    if ((raw_data['info'][0][\"TeamNames\"][0]) =='WeKick'):\n            \n        print('WeKick - correct')\n            \n    else:\n        print('Return - skipping')\n        return\n    # Getting the final rewards of each player\n    rewards = pd.DataFrame([_ for _ in raw_data.rewards])\n    # Checking if there is an ERROR\n    if rewards.iloc[0,0] is not None and rewards.iloc[0,1] is not None:\n        # Getting steps features\n        steps = pd.DataFrame([_ for _ in raw_data.steps])\n        print(raw_data['info'][0][\"TeamNames\"][0])\n        \n        \n        split_players = []\n        for i in range(3002):\n            temp = pd.DataFrame([_ for _ in steps[i]])\n            split_players.append(temp)\n        split_players = pd.concat(split_players)\n        print(rewards.iloc[0,0])\n        print(rewards.iloc[0,1])\n        \n        # Getting the winning player point of view\n        if rewards.iloc[0,0] > rewards.iloc[0,1]:\n            play1_feedback = split_players[0]  \n        else:\n            play1_feedback = split_players[1]\n        print(play1_feedback.name)\n\n        play1_feedback = play1_feedback.apply(pd.Series)\n        \n        # Getting player action\n        play1_action = pd.DataFrame([_ for _ in play1_feedback.action])\n        play1_action = play1_action.fillna(0)\n        play1_action = play1_action.astype(int)\n        play1_action = play1_action.rename(columns={play1_action.columns[0]: \"Action\"})\n        \n        # Getting player observations\n        play1_obs = pd.DataFrame([_ for _ in play1_feedback.observation])\n\n        play1_obs_raw = pd.DataFrame([_ for _ in play1_obs.players_raw])\n\n        play1_obs_raw2 = pd.Series(play1_obs_raw[0], index=play1_obs_raw.index)\n        obs_final = []\n        for i,_ in play1_obs_raw2.items():\n            temp = pd.DataFrame.from_dict(_,orient='index')\n            obs_final.append(temp)\n        obs_final = pd.concat(obs_final,axis=1)\n        \n        # Dropping unnecessary features\n\n        obs_final = obs_final.drop(['designated', 'left_team_yellow_card','left_team_active','right_team_yellow_card','right_team_active','ball_owned_player',\n                                'right_team_tired_factor','left_team_tired_factor','steps_left','score',\n                                'right_team_roles','left_team_roles','sticky_actions','ball_rotation'], axis=0)\n\n        obs_final = obs_final.transpose()\n        \n        # Extracting and adding necessary features\n\n        ball = obs_final\n        ball[['ball_x','ball_y','ball_z']] = pd.DataFrame(obs_final.ball.tolist(),index=obs_final.index)\n\n        ball_dir = obs_final\n        ball_dir[['ball_x_dir','ball_y_dir','ball_z_dir']] = pd.DataFrame(obs_final.ball_direction.tolist(),index=obs_final.index)\n\n        left_coor = obs_final\n        left_coor[['left1_coor','left2_coor','left3_coor','left4_coor','left5_coor','left6_coor','left7_coor','left8_coor','left9_coor',\n                   'left10_coor','left11_coor']] = pd.DataFrame(obs_final.left_team.tolist(),index=obs_final.index)\n        left_coor.head()\n\n        left_coor[['left1_x','left1_y']] = pd.DataFrame(obs_final.left1_coor.tolist(),index=obs_final.index)\n        left_coor[['left2_x','left2_y']] = pd.DataFrame(obs_final.left2_coor.tolist(),index=obs_final.index)\n        left_coor[['left3_x','left3_y']] = pd.DataFrame(obs_final.left3_coor.tolist(),index=obs_final.index)\n        left_coor[['left4_x','left4_y']] = pd.DataFrame(obs_final.left4_coor.tolist(),index=obs_final.index)\n        left_coor[['left5_x','left5_y']] = pd.DataFrame(obs_final.left5_coor.tolist(),index=obs_final.index)\n        left_coor[['left6_x','left6_y']] = pd.DataFrame(obs_final.left6_coor.tolist(),index=obs_final.index)\n        left_coor[['left7_x','left7_y']] = pd.DataFrame(obs_final.left7_coor.tolist(),index=obs_final.index)\n        left_coor[['left8_x','left8_y']] = pd.DataFrame(obs_final.left8_coor.tolist(),index=obs_final.index)\n        left_coor[['left9_x','left9_y']] = pd.DataFrame(obs_final.left9_coor.tolist(),index=obs_final.index)\n        left_coor[['left10_x','left10_y']] = pd.DataFrame(obs_final.left10_coor.tolist(),index=obs_final.index)\n        left_coor[['left11_x','left11_y']] = pd.DataFrame(obs_final.left11_coor.tolist(),index=obs_final.index)\n\n        left_coor_dir = obs_final\n        left_coor_dir[['left1_coor_dir','left2_coor_dir','left3_coor_dir','left4_coor_dir','left5_coor_dir','left6_coor_dir','left7_coor_dir','left8_coor_dir','left9_coor_dir',\n                   'left10_coor_dir','left11_coor_dir']] = pd.DataFrame(obs_final.left_team_direction.tolist(),index=obs_final.index)\n\n\n        left_coor_dir[['left1_x_dir','left1_y_dir']] = pd.DataFrame(obs_final.left1_coor_dir.tolist(),index=obs_final.index)\n        left_coor_dir[['left2_x_dir','left2_y_dir']] = pd.DataFrame(obs_final.left2_coor_dir.tolist(),index=obs_final.index)\n        left_coor_dir[['left3_x_dir','left3_y_dir']] = pd.DataFrame(obs_final.left3_coor_dir.tolist(),index=obs_final.index)\n        left_coor_dir[['left4_x_dir','left4_y_dir']] = pd.DataFrame(obs_final.left4_coor_dir.tolist(),index=obs_final.index)\n        left_coor_dir[['left5_x_dir','left5_y_dir']] = pd.DataFrame(obs_final.left5_coor_dir.tolist(),index=obs_final.index)\n        left_coor_dir[['left6_x_dir','left6_y_dir']] = pd.DataFrame(obs_final.left6_coor_dir.tolist(),index=obs_final.index)\n        left_coor_dir[['left7_x_dir','left7_y_dir']] = pd.DataFrame(obs_final.left7_coor_dir.tolist(),index=obs_final.index)\n        left_coor_dir[['left8_x_dir','left8_y_dir']] = pd.DataFrame(obs_final.left8_coor_dir.tolist(),index=obs_final.index)\n        left_coor_dir[['left9_x_dir','left9_y_dir']] = pd.DataFrame(obs_final.left9_coor_dir.tolist(),index=obs_final.index)\n        left_coor_dir[['left10_x_dir','left10_y_dir']] = pd.DataFrame(obs_final.left10_coor_dir.tolist(),index=obs_final.index)\n        left_coor_dir[['left11_x_dir','left11_y_dir']] = pd.DataFrame(obs_final.left11_coor_dir.tolist(),index=obs_final.index)\n\n        right_coor = obs_final\n        right_coor[['right1_coor','right2_coor','right3_coor','right4_coor','right5_coor','right6_coor','right7_coor','right8_coor','right9_coor',\n                   'right10_coor','right11_coor']] = pd.DataFrame(obs_final.right_team.tolist(),index=obs_final.index)\n\n\n        right_coor[['right1_x','right1_y']] = pd.DataFrame(obs_final.right1_coor.tolist(),index=obs_final.index)\n        right_coor[['right2_x','right2_y']] = pd.DataFrame(obs_final.right2_coor.tolist(),index=obs_final.index)\n        right_coor[['right3_x','right3_y']] = pd.DataFrame(obs_final.right3_coor.tolist(),index=obs_final.index)\n        right_coor[['right4_x','right4_y']] = pd.DataFrame(obs_final.right4_coor.tolist(),index=obs_final.index)\n        right_coor[['right5_x','right5_y']] = pd.DataFrame(obs_final.right5_coor.tolist(),index=obs_final.index)\n        right_coor[['right6_x','right6_y']] = pd.DataFrame(obs_final.right6_coor.tolist(),index=obs_final.index)\n        right_coor[['right7_x','right7_y']] = pd.DataFrame(obs_final.right7_coor.tolist(),index=obs_final.index)\n        right_coor[['right8_x','right8_y']] = pd.DataFrame(obs_final.right8_coor.tolist(),index=obs_final.index)\n        right_coor[['right9_x','right9_y']] = pd.DataFrame(obs_final.right9_coor.tolist(),index=obs_final.index)\n        right_coor[['right10_x','right10_y']] = pd.DataFrame(obs_final.right10_coor.tolist(),index=obs_final.index)\n        right_coor[['right11_x','right11_y']] = pd.DataFrame(obs_final.right11_coor.tolist(),index=obs_final.index)\n\n        right_coor_dir = obs_final\n        right_coor_dir[['right1_coor_dir','right2_coor_dir','right3_coor_dir','right4_coor_dir','right5_coor_dir','right6_coor_dir','right7_coor_dir','right8_coor_dir','right9_coor_dir',\n                   'right10_coor_dir','right11_coor_dir']] = pd.DataFrame(obs_final.right_team_direction.tolist(),index=obs_final.index)\n\n\n        right_coor_dir[['right1_x_dir','right1_y_dir']] = pd.DataFrame(obs_final.right1_coor_dir.tolist(),index=obs_final.index)\n        right_coor_dir[['right2_x_dir','right2_y_dir']] = pd.DataFrame(obs_final.right2_coor_dir.tolist(),index=obs_final.index)\n        right_coor_dir[['right3_x_dir','right3_y_dir']] = pd.DataFrame(obs_final.right3_coor_dir.tolist(),index=obs_final.index)\n        right_coor_dir[['right4_x_dir','right4_y_dir']] = pd.DataFrame(obs_final.right4_coor_dir.tolist(),index=obs_final.index)\n        right_coor_dir[['right5_x_dir','right5_y_dir']] = pd.DataFrame(obs_final.right5_coor_dir.tolist(),index=obs_final.index)\n        right_coor_dir[['right6_x_dir','right6_y_dir']] = pd.DataFrame(obs_final.right6_coor_dir.tolist(),index=obs_final.index)\n        right_coor_dir[['right7_x_dir','right7_y_dir']] = pd.DataFrame(obs_final.right7_coor_dir.tolist(),index=obs_final.index)\n        right_coor_dir[['right8_x_dir','right8_y_dir']] = pd.DataFrame(obs_final.right8_coor_dir.tolist(),index=obs_final.index)\n        right_coor_dir[['right9_x_dir','right9_y_dir']] = pd.DataFrame(obs_final.right9_coor_dir.tolist(),index=obs_final.index)\n        right_coor_dir[['right10_x_dir','right10_y_dir']] = pd.DataFrame(obs_final.right10_coor_dir.tolist(),index=obs_final.index)\n        right_coor_dir[['right11_x_dir','right11_y_dir']] = pd.DataFrame(obs_final.right11_coor_dir.tolist(),index=obs_final.index)\n        \n        # One-Hot Encoding \n\n        ball_owning_labels = ['left_team_owning_ball','none_owning_ball','right_team_owning_ball']\n        obs_final['ball_owning_cat'] = pd.cut(obs_final['ball_owned_team'],3,labels=ball_owning_labels)\n        ball_owning_oh = pd.get_dummies(obs_final['ball_owning_cat'])\n\n        active_labels = ['player0','player1','player2','player3','player4','player5','player6','player7','player8','player9','player10']\n        obs_final['active_cat'] = pd.cut(obs_final['active'],11,labels=active_labels)\n        active_oh = pd.get_dummies(obs_final['active_cat'])\n\n        game_mode_labels = ['Normal','KickOff','GoalKick','FreeKick','Corner','ThrowIn','Penalty']\n        obs_final['game_mode_cat'] = pd.cut(obs_final['game_mode'],7,labels=game_mode_labels)\n        game_mode_oh = pd.get_dummies(obs_final['game_mode_cat'])\n        \n        # Dropping unnecessary features\n\n        right_coor_drop = ['right1_coor','right1_coor','right2_coor','right3_coor','right4_coor','right5_coor','right6_coor','right7_coor','right8_coor','right9_coor','right10_coor','right11_coor']\n        right_coor_dir_drop = ['right1_coor_dir','right1_coor_dir','right2_coor_dir','right3_coor_dir','right4_coor_dir','right5_coor_dir','right6_coor_dir','right7_coor_dir','right8_coor_dir','right9_coor_dir','right10_coor_dir','right11_coor_dir']\n        left_coor_drop = ['left1_coor','left1_coor','left2_coor','left3_coor','left4_coor','left5_coor','left6_coor','left7_coor','left8_coor','left9_coor','left10_coor','left11_coor']\n        left_coor_dir_drop = ['left1_coor_dir','left1_coor_dir','left2_coor_dir','left3_coor_dir','left4_coor_dir','left5_coor_dir','left6_coor_dir','left7_coor_dir','left8_coor_dir','left9_coor_dir','left10_coor_dir','left11_coor_dir']\n        others_drop = ['right_team','right_team_direction','left_team','left_team_direction','active_cat','ball','game_mode_cat','ball_owning_cat','ball_direction','ball_owned_team','active','game_mode']\n        obs_final = obs_final.drop(right_coor_drop,axis=1)\n        obs_final = obs_final.drop(right_coor_dir_drop,axis=1)\n        obs_final = obs_final.drop(left_coor_drop,axis=1)\n        obs_final = obs_final.drop(left_coor_dir_drop,axis=1)\n        obs_final = obs_final.drop(others_drop,axis=1)\n\n        obs_final = pd.concat([obs_final,ball_owning_oh,active_oh,game_mode_oh],axis=1)\n        obs_final.index = range(3002)\n        obs_final = obs_final.join(play1_action)\n        cols = ['left1_x','left1_y','left2_x','left2_y','left3_x','left3_y','left4_x','left4_y','left5_x','left5_y','left6_x','left6_y','left7_x','left7_y','left8_x','left8_y','left9_x','left9_y','left10_x','left10_y','left11_x','left11_y', \n                'left1_x_dir','left1_y_dir','left2_x_dir','left2_y_dir','left3_x_dir','left3_y_dir','left4_x_dir','left4_y_dir','left5_x_dir','left5_y_dir','left6_x_dir','left6_y_dir','left7_x_dir','left7_y_dir','left8_x_dir','left8_y_dir','left9_x_dir','left9_y_dir','left10_x_dir','left10_y_dir','left11_x_dir','left11_y_dir',\n                'right1_x','right1_y','right2_x','right2_y','right3_x','right3_y','right4_x','right4_y','right5_x','right5_y','right6_x','right6_y','right7_x','right7_y','right8_x','right8_y','right9_x','right9_y','right10_x','right10_y','right11_x','right11_y',\n                'right1_x_dir','right1_y_dir','right2_x_dir','right2_y_dir','right3_x_dir','right3_y_dir','right4_x_dir','right4_y_dir','right5_x_dir','right5_y_dir','right6_x_dir','right6_y_dir',\n                'right7_x_dir','right7_y_dir','right8_x_dir','right8_y_dir','right9_x_dir','right9_y_dir','right10_x_dir','right10_y_dir','right11_x_dir','right11_y_dir', \n                'ball_x','ball_y','ball_z','ball_x_dir','ball_y_dir','ball_z_dir',\n                'left_team_owning_ball','none_owning_ball','right_team_owning_ball',\n                'player0','player1','player2','player3','player4','player5','player6','player7','player8','player9','player10',\n                'Normal','KickOff','GoalKick','FreeKick','Corner','ThrowIn','Penalty','Action'\n                ]\n        obs_final = obs_final[cols]\n\n        return obs_final\n   \n    else:\n        return pd.DataFrame() ","50d33c7d":"data = []\nc = 0\nfor _ in json_paths:\n    print(c)\n\n    if c<EPISODES:\n        pass\n    else:\n        break\n    try:\n        to_app = json_to_v115(_)\n        if to_app.empty:\n            print('NoneType')\n        else:\n            c = c+1\n            print('count :', c)\n            data.append(to_app)\n    except:\n        pass\n\ndata = pd.concat(data,axis=0)\ndata","3ae79ab7":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n","986355db":"df = data","5a8cb322":"df.to_csv('115boosted.csv')","2ab25cfb":"def dst(x1,y1,x2,y2):\n    dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    dist = round(dist,3)\n    return dist ","67c65b47":"import math\n\nfor index in range(0, 44, 2 ):\n\n#print('Column Number : ', index)\n    colname = df.columns[index]\n    colname2 = df.columns[index+1]\n#print(len(df.columns))\n    df['new_column_name'+str(index)] = df.apply(lambda x: dst(x['ball_x'], x['ball_y'],x[colname], x[colname2]), axis=1)\n\nfor index in range(2, 22, 2 ):\n\n    #print('Column Number : ', index)\n    colname = df.columns[index]\n    colname2 = df.columns[index+1]\n        #print(len(df.columns))\nfor index1 in range(24, 44, 2 ):\n          # print('Column Number : ', index)\n    colname3 = df.columns[index1]\n    colname4 = df.columns[index1+1]\n            #print(len(df.columns))\n    df['new_column_name2'+str(index)+str(index1)] = df.apply(lambda x: dst(x[colname], x[colname2],x[colname3], x[colname4]), axis=1)","d9db0716":"X = df.drop(['Action'],axis=1).values\n\ny = df['Action'].values\ny = y.astype(np.int32)\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.02,random_state=42)","5111c87e":"clf = RandomForestClassifier()\nmodel=clf.fit(X_train,y_train)\nclf.score(X_test,y_test)","38a28483":"# Install:\n# Kaggle environments.\n#!git clone https:\/\/github.com\/Kaggle\/kaggle-environments.git\n#!cd kaggle-environments && pip install .\n\n# GFootball environment.\n!apt-get update -y\n!apt-get install -y libsdl2-gfx-dev libsdl2-ttf-dev\n\n# Make sure that the Branch in git clone and in wget call matches !!\n!git clone -b v2.6 https:\/\/github.com\/google-research\/football.git\n!mkdir -p football\/third_party\/gfootball_engine\/lib\n\n!wget https:\/\/storage.googleapis.com\/gfootball\/prebuilt_gameplayfootball_v2.6.so -O football\/third_party\/gfootball_engine\/lib\/prebuilt_gameplayfootball.so\n!cd football && GFOOTBALL_USE_PREBUILT_SO=1 pip3 install .\n\n!mkdir \/kaggle_simulations\n!mkdir \/kaggle_simulations\/agent\n!mkdir \/kaggle_simulations\/agent\/saved_model","fd8692df":"# save the model to disk\nimport pickle\nfilename = '\/kaggle_simulations\/agent\/saved_model\/model.sav'\npickle.dump(model, open(filename, 'wb'))\n\n# some time later...\n \n# load the model from disk\n#loaded_model = pickle.load(open(filename, 'rb'))\n#result = loaded_model.score(X_test, y_test)\n#print(result)","fa8b1270":"%%writefile \/kaggle_simulations\/agent\/main.py\nfrom kaggle_environments.envs.football.helpers import *\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport pickle\nimport math\n\n# load the model from disk\nfilename = '\/kaggle_simulations\/agent\/saved_model\/model.sav'\nloaded_model = pickle.load(open(filename, 'rb'))\n#result = loaded_model.score(X_test, y_test)\n#print(result)\n\ndirections = [[Action.TopLeft, Action.Top, Action.TopRight],\n[Action.Left, Action.Idle, Action.Right],\n[Action.BottomLeft, Action.Bottom, Action.BottomRight]]\n\n#track raw data to troubleshoot...\ntrack_raw_data=[]\n\nperfectRange = [[0.7, 0.95], [-0.12, 0.12]]\n\ndef inside(pos, area):\n    return area[0][0] <= pos[0] <= area[0][1] and area[1][0] <= pos[1] <= area[1][1]\n\ndef get_distance(pos1,pos2):\n    return ((pos1[0]-pos2[0])**2+(pos1[1]-pos2[1])**2)**0.5\n\ndef get_heading(pos1,pos2):\n    raw_head=math.atan2(pos1[0]-pos2[0],pos1[1]-pos2[1])\/math.pi*180\n\n    if raw_head<0:\n        head=360+raw_head\n    else:\n        head=raw_head\n    return head\n\ndef get_action(action_num):\n    if action_num==0:\n        return Action.Idle\n    if action_num==1:\n        return Action.Left\n    if action_num==2:\n        return Action.TopLeft\n    if action_num==3:\n        return Action.Top\n    if action_num==4:\n        return Action.TopRight\n    if action_num==5:\n        return Action.Right\n    if action_num==6:\n        return Action.BottomRight\n    if action_num==7:\n        return Action.Bottom\n    if action_num==8:\n        return Action.BottomLeft\n    if action_num==9:\n        return Action.LongPass\n    if action_num==10:\n        return Action.HighPass\n    if action_num==11:\n        return Action.ShortPass\n    if action_num==12:\n        return Action.Shot\n    if action_num==13:\n        return Action.Sprint\n    if action_num==14:\n        return Action.ReleaseDirection\n    if action_num==15:\n        return Action.ReleaseSprint\n    if action_num==16:\n        #return Action.Sliding\n        return Action.Idle\n    if action_num==17:\n        return Action.Dribble\n    if action_num==18:\n        #return Action.ReleaseDribble\n        return Action.Idle\n    return Action.Right\n\n@human_readable_agent\ndef agent(obs):\n    controlled_player_pos = obs['left_team'][obs['active']]\n    x = controlled_player_pos[0]\n    y = controlled_player_pos[1]\n    pactive=obs['active']\n    \n    if obs[\"game_mode\"] == GameMode.Penalty:\n        return Action.Shot\n    if obs[\"game_mode\"] == GameMode.Corner:\n        if controlled_player_pos[0] > 0:\n            return Action.Shot\n    if obs[\"game_mode\"] == GameMode.FreeKick:\n        return Action.Shot\n    \n    # Make sure player is running.\n    if  0 < controlled_player_pos[0] < 0.6 and Action.Sprint not in obs['sticky_actions']:\n        return Action.Sprint\n    elif 0.6 < controlled_player_pos[0] and Action.Sprint in obs['sticky_actions']:\n        return Action.ReleaseSprint\n    \n    #if we have the ball\n    if obs['ball_owned_player'] == obs['active'] and obs['ball_owned_team'] == 0:\n        dat=[]\n        to_append=[]\n        #return Action.Right\n        #get controller player pos\n        controlled_player_pos = obs['left_team'][obs['active']]\n        \n        if inside(controlled_player_pos, perfectRange) and controlled_player_pos[0] < obs['ball'][0]:\n            return Action.Shot\n        \n        goalx=0.0\n        goaly=0.0\n\n        sidelinex=0.0\n        sideliney=0.42\n        \n        goal_dist=get_distance((x,y),(goalx,goaly))\n        sideline_dist=get_distance((x,y),(sidelinex,sideliney))\n        to_append.append(goal_dist)\n        to_append.append(sideline_dist)\n        \n        for i in range(len(obs['left_team'])):\n            x=obs['left_team'][i][0]\n            y=obs['left_team'][i][1]\n            to_append.append(x)\n            to_append.append(y)\n            \n        for i in range(len(obs['right_team'])):\n            x=obs['right_team'][i][0]\n            y=obs['right_team'][i][1]\n            to_append.append(x)\n            to_append.append(y)\n        \n        dat.append(to_append)\n        \n        predicted=loaded_model.predict(dat)\n        \n        do=get_action(predicted)\n        \n        if do == None:\n            return Action.Right\n        else:\n            return do\n    \n    # if we don't have ball run to ball\n    else:\n        dirsign = lambda x: 1 if abs(x) < 0.01 else (0 if x < 0 else 2)\n        #where ball is going\n        ball_targetx=obs['ball'][0]+(obs['ball_direction'][0]*5)\n        ball_targety=obs['ball'][1]+(obs['ball_direction'][1]*5)\n        \n        e_dist=get_distance(obs['left_team'][obs['active']],obs['ball'])\n        \n        if e_dist >.01:\n            # Run where ball will be\n            xdir = dirsign(ball_targetx - controlled_player_pos[0])\n            ydir = dirsign(ball_targety - controlled_player_pos[1])\n            return directions[ydir][xdir]\n        else:\n            # Run towards the ball.\n            xdir = dirsign(obs['ball'][0] - controlled_player_pos[0])\n            ydir = dirsign(obs['ball'][1] - controlled_player_pos[1])\n            return directions[ydir][xdir]\n        ","235a1fac":"# Set up the Environment.\nfrom kaggle_environments import make\nenv = make(\"football\", configuration={\"save_video\": True, \"scenario_name\": \"11_vs_11_kaggle\", \"running_in_notebook\": True})\noutput = env.run([\"\/kaggle_simulations\/agent\/main.py\", \"do_nothing\"])[-1]\nprint('Left player: reward = %s, status = %s, info = %s' % (output[0]['reward'], output[0]['status'], output[0]['info']))\nprint('Right player: reward = %s, status = %s, info = %s' % (output[1]['reward'], output[1]['status'], output[1]['info']))\nenv.render(mode=\"human\", width=800, height=600)","8bcc89bd":"!cd \/kaggle_simulations\/agent && tar -czvf \/kaggle\/working\/submit.tar.gz main.py saved_model","1bfb1c62":"More work can be done to improve that expansions.\nGenerate vector line between ball and each player and between current player and each player, shortest distance from side lines and end lines and goal posts etc.\nBased on those vectors you can calculate min and max distnace of each player to those lines.","5d448806":"Hi EVERYONE,\n\nEpisode scraper of top team + feature expansion - distances etc\nFeature expansion code can be used by EVERYONE as supplement to your mini maps or 115v2 as it speeds up any kind of training no matter how advanced your network is.\n\nMore work can be done to improve that expansions.\nGenerate vector line between ball and each player and between current player and each player, shortest distance from side lines and end lines and goal posts etc.\nBased on those vectors you can calculate min and max distnace of each player to those lines.","ff6d1b92":"Calculates distances between ball and each player, distances between each player"}}