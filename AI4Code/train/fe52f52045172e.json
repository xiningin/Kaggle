{"cell_type":{"aa5562ab":"code","3b825909":"code","3df181f8":"code","2560c805":"code","a78830d2":"code","77eb1a07":"code","f8933f20":"code","b73dfdde":"code","0f001977":"code","2dfb9eaf":"code","10976080":"code","84f4f494":"code","bc870fb2":"code","e1c3b9f8":"code","7b68bfc4":"code","19efa2c4":"code","e04b8bc0":"code","e6d466da":"code","64c3256b":"code","32bcda60":"code","d7c15e4b":"code","8fe40382":"code","e3aa025c":"code","dd51f80c":"code","9e5e3b82":"code","15de329c":"code","57dd5934":"code","e62edbfb":"code","22eda291":"markdown","c43c6e8f":"markdown","cb2e4d07":"markdown","339c9be1":"markdown","3a6f737a":"markdown","b6107a19":"markdown","c672f0a2":"markdown","6fddc301":"markdown","0f83c1ec":"markdown"},"source":{"aa5562ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b825909":"import scipy.stats as stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV","3df181f8":"Y_moa_df = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\nprint(Y_moa_df.shape)\nX_moa_df = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\nprint(X_moa_df.shape)\nX_test_moa_df = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv').set_index('sig_id')\nprint(X_test_moa_df.shape)","2560c805":"df_anova = pd.DataFrame()\n\ncolumns = [col for col in X_moa_df.columns if col.startswith(('g-','c-'))]\n\nfor col in columns:\n    F, p = stats.f_oneway(X_moa_df[col][X_moa_df['cp_type'] == 'ctl_vehicle'],\n                          X_moa_df[col][X_moa_df['cp_type'] == 'trt_cp'])\n    \n    frame = {'feature': col, 'F-statistics': F, 'p-value': p}\n    \n    df_anova = df_anova.append(pd.DataFrame(data=frame, dtype=object, index=[col]))\n    \ndf_anova = df_anova.reset_index(drop=True)","a78830d2":"df_bad_columns = (df_anova.where(df_anova['p-value'] >= 0.01).dropna(how='all'))\ndf_bad_columns.shape","77eb1a07":"good_columns = list(X_moa_df.columns.difference(df_bad_columns['feature'].values))\nlen(good_columns)","f8933f20":"#X_train, X_test = train_test_split(X_moa_df[good_columns], test_size=0.25, random_state=10)\n\n#print(X_train.shape)\n#print(X_test.shape)","b73dfdde":"#Y_train = (Y_moa_df.where(Y_moa_df['sig_id'].isin(X_train['sig_id'].values))\n#           .dropna(how='all')\n#           .set_index('sig_id'))\n#Y_train = Y_train.astype(int)\n\n#Y_test = (Y_moa_df.where(Y_moa_df['sig_id'].isin(X_test['sig_id'].values))\n#          .dropna(how='all')\n#          .set_index('sig_id'))\n#Y_test = Y_test.astype(int)\n\n#print(Y_train.shape)\n#print(Y_test.shape)","0f001977":"#Y_train.head()","2dfb9eaf":"#X_train = X_train.set_index('sig_id')\nX_train = X_moa_df[good_columns].set_index('sig_id')\n#X_test = X_test.set_index('sig_id')\nY_train = Y_moa_df.set_index('sig_id')\nY_train = Y_train.astype(int)\n\nprint(X_train.shape)\nprint(Y_train.shape)","10976080":"def get_cols_pair(col, template):\n    exceptions = ['cp_time', 'cp_type', 'cp_dose']\n    reverse_flg = False\n    \n    if template == '_':\n        for exception in exceptions:\n            if col.startswith(exception):\n                reverse_flg = True\n            \n    if reverse_flg:\n        i = col.rfind(template, 0)\n    else:\n        i = col.find(template, 0)\n        \n    col_first = col[:i]\n    col_second = col[i+len(template):]\n    \n    return (col_first, col_second)\n\n\ndef pow10(val):\n    return pow(10, val)\n\n\ndef get_features_df(corr_df, target_list, corr_threshold):\n    df = pd.DataFrame()\n\n    for col in target_list:\n        cor_target = abs(corr_df[col])\n\n        relevant_features = cor_target[cor_target >= corr_threshold]\n\n        # Remove the same feature, if exists\n        try:\n            relevant_features.drop(labels=col, inplace=True)\n        except:\n            pass\n\n        targets = [col for item in relevant_features.index]\n        target_flags = [1 if item in target_list else 0 for item in relevant_features.index]\n\n        frame = {'target': targets, \n                 'relevant_feature': relevant_features.index,\n                 'target_flg': target_flags,\n                 'corr_val': relevant_features.values}\n\n        df = df.append(pd.DataFrame(data=frame, dtype=object))\n\n    df = df.reset_index(drop=True)\n    \n    return df\n\n\ndef get_features_tgt_df(df_features):\n    df_target = (df_features.where(df_features['target_flg'] == 1).dropna(how='all'))\n    \n    return df_target\n    \n    \ndef get_target_grp_df(df_target):    \n    df_target_grp = (df_target[['target','relevant_feature']]\n                     .where(df_target['target_flg'] == 1)\n                     .groupby('target')\n                     .count()\n                     .reset_index())\n    df_target_grp.rename(columns={'relevant_feature': 'cnt'}, inplace=True)\n    df_target_grp.sort_values(by=['cnt','target'], axis=0, ascending=[False,True], inplace=True)\n    df_target_grp = df_target_grp.reset_index(drop=True)\n    \n    return df_target_grp\n\n\ndef get_inverse_tgt_df(df_target):\n    df_inverse = pd.DataFrame()\n    target_list = []\n    \n    df_target_grp = get_target_grp_df(df_target=df_target)\n\n    for item_outer, row_outer in df_target_grp.iterrows():\n\n        df_childs = (df_target.where((df_target['target'] == row_outer['target']) & (df_target['target_flg'] == 1))\n                     .dropna(how='all'))\n        target_list.append(row_outer['target'])\n\n        for item, row in df_childs.iterrows():\n            df_inverse_tmp = df_target.where((df_target['target'] == row['relevant_feature']) & \n                                             (df_target['relevant_feature'] == row_outer['target']) &\n                                             (~df_target['target'].isin(target_list))).dropna(how='all')\n\n            df_inverse = pd.concat([df_inverse, df_inverse_tmp])\n        \n    return df_inverse\n\n\ndef get_unique_feature_pairs(df):\n    \n    df_target = get_features_tgt_df(df_features=df)\n    df_inverse = get_inverse_tgt_df(df_target=df_target)\n    df_unique = pd.concat([df, df_inverse]).drop_duplicates(keep=False)\n    \n    return df_unique\n\n\ndef get_features_list(target_name, df_features, corr_threshold):\n    \n    relevant_features = list(df_features['relevant_feature']\n                             .where((df_features['target'] == target_name) & (df_features['corr_val'] >= corr_threshold))\n                             .dropna(how='all')\n                             .unique())\n    return relevant_features","84f4f494":"X_train_enc = pd.get_dummies(X_train)\n#X_test_enc = pd.get_dummies(X_test)\nX_test_enc = pd.get_dummies(X_test_moa_df)","bc870fb2":"new_features_list = ['c-10_-_c-31', 'c-12_+_g-157', 'c-13_-_c-91', 'c-15_-_g-203', 'c-18_-_c-80', 'c-21_+_g-157', \n                     'c-21_-_g-91', 'c-26_+_g-157', 'c-26_-_c-91', 'c-27_-_g-20', 'c-33_-_c-31', 'c-63_+_g-157', \n                     'c-65_-_c-26', 'c-65_-_c-45', 'c-65_-_c-51', 'c-6_-_g-91', 'c-92_+_g-157', 'c-98_+_g-60', \n                     'c-98_-_c-51', 'c-98_-_c-62', 'c-98_-_c-67', 'c-9_+_g-157', 'g-100_+_g-406', 'g-107_+_g-409', \n                     'g-110_+_g-476', 'g-113_-_g-640', 'g-119_+_g-202', 'g-125_-_c-65', 'g-125_-_c-98', \n                     'g-140_-_g-157', 'g-146_+_g-178', 'g-152_-_c-65', 'g-157_-_c-65', 'g-162_-_g-100', \n                     'g-165_-_g-207', 'g-165_-_g-48', 'g-166_-_g-628', 'g-167_-_g-202', 'g-16_+_g-100', \n                     'g-16_-_g-640', 'g-178_-_c-65', 'g-178_-_c-98', 'g-178_-_g-206', 'g-181_-_g-100', \n                     'g-186_+_g-157', 'g-189_-_g-202', 'g-18_+_g-48', 'g-195_+_g-157', 'g-201_+_g-203', \n                     'g-201_-_g-181', 'g-201_-_g-476', 'g-202_-_g-100', 'g-202_-_g-48', 'g-207_+_c-65', \n                     'g-207_+_g-202', 'g-207_-_g-165', 'g-209_-_g-202', 'g-20_+_g-476', 'g-20_+_g-90', \n                     'g-210_-_g-100', 'g-215_+_g-157', 'g-228_+_g-157', 'g-22_-_c-65', 'g-22_-_g-202', \n                     'g-22_-_g-253', 'g-254_-_g-100', 'g-257_+_g-157', 'g-260_+_g-202', 'g-263_-_g-476', \n                     'g-269_+_g-100', 'g-269_+_g-253', 'g-274_-_g-628', 'g-277_+_g-100', 'g-279_+_g-202', \n                     'g-280_-_g-157', 'g-282_-_c-98', 'g-283_+_g-202', 'g-28_-_c-65', 'g-409_+_g-107', \n                     'g-410_+_g-90', 'g-410_-_g-107', 'g-410_-_g-628', 'g-414_+_g-202', 'g-414_-_g-640', \n                     'g-418_-_g-100', 'g-418_-_g-206', 'g-420_-_g-628', 'g-424_+_c-65', 'g-431_+_c-65', \n                     'g-431_-_g-202', 'g-435_+_g-157', 'g-435_-_c-65', 'g-440_+_g-202', 'g-441_-_g-202', \n                     'g-447_-_g-100', 'g-451_-_g-253', 'g-455_-_g-476', 'g-459_-_c-65', 'g-47_+_g-48', \n                     'g-47_-_g-202', 'g-47_-_g-476', 'g-480_-_g-157', 'g-489_+_g-157', 'g-603_+_c-98', \n                     'g-603_+_g-211', 'g-604_+_g-48', 'g-615_+_g-476', 'g-619_-_g-476', 'g-620_+_c-65', \n                     'g-620_-_g-157', 'g-621_-_c-65', 'g-626_+_g-635', 'g-626_-_c-98', 'g-626_-_g-202', \n                     'g-628_+_g-0', 'g-628_-_g-274', 'g-628_-_g-636', 'g-634_+_c-65', 'g-636_-_g-628', \n                     'g-639_-_c-98', 'g-642_-_c-65', 'g-656_-_g-157', 'g-659_+_g-165', 'g-65_+_g-640', \n                     'g-677_+_g-100', 'g-68_+_g-20', 'g-84_+_g-640', 'g-90_+_g-20', 'g-94_-_g-157', \n                     'g-95_+_c-65', 'g-99_-_c-48', 'max_c-30_g-165', 'max_c-8_g-628', 'max_g-101_g-178', \n                     'max_g-125_g-157', 'max_g-183_g-157', 'max_g-22_g-178', 'max_g-278_g-178', \n                     'max_g-435_g-178', 'max_g-448_g-157', 'min_g-100_g-157', 'min_g-110_g-253', \n                     'min_g-162_g-219', 'min_g-409_g-628', 'min_g-439_g-202', 'min_g-447_g-202', \n                     'min_g-628_g-229', 'min_g-89_g-476', 'min_g-91_g-640']\nlen(new_features_list)","e1c3b9f8":"features_pow_ss_list = ['c-6_-_g-91', 'g-487', 'g-615', 'g-78', 'g-351', 'g-250', 'g-476', 'g-736', 'g-162', 'g-42', 'g-645', 'g-200', 'g-70', 'g-148', 'g-295', 'g-339', 'g-517', 'g-544', 'g-553', 'g-589', 'g-691', 'g-433', 'g-489', 'g-84', 'g-146_+_g-178', 'g-489_+_g-157', 'g-626_-_c-98', 'g-119', 'g-19', 'g-22', 'g-321', 'g-529', 'g-152_-_c-65', 'g-22_-_c-65', 'g-22_-_g-202', 'g-623', 'c-1', 'c-25', 'c-27', 'c-34', 'c-39', 'c-59', 'c-64', 'c-73', 'c-8', 'g-392', 'g-405', 'g-420', 'g-73', 'g-620_+_c-65', 'g-65', 'c-65_-_c-51', 'g-375', 'g-391', 'g-330', 'g-89', 'g-175', 'g-421', 'g-274_-_g-628', 'g-410_-_g-628', 'g-390', 'c-21_+_g-157', 'g-442', 'g-327', 'c-16', 'c-53', 'g-122', 'g-195', 'g-597', 'g-657', 'g-684', 'g-726', 'c-65_-_c-26', 'g-165_-_g-48', 'c-23', 'c-32', 'c-61', 'c-66', 'c-79', 'g-14', 'g-141', 'g-178', 'g-256', 'g-26', 'g-263', 'g-267', 'g-319', 'g-347', 'g-353', 'g-451', 'g-521', 'g-543', 'g-578', 'g-598', 'g-619', 'g-639', 'g-8', 'max_g-101_g-178', 'max_g-22_g-178', 'max_g-278_g-178', 'max_g-435_g-178', 'c-27_-_g-20', 'c-98_-_c-51', 'c-98_-_c-62', 'g-178_-_g-206', 'g-159', 'g-183', 'g-233', 'g-40', 'g-430', 'g-48', 'g-166_-_g-628', 'g-420_-_g-628', 'g-410', 'g-473', 'g-280_-_g-157', 'g-257_+_g-157', 'c-13_-_c-91', 'c-65_-_c-45', 'g-369', 'g-432', 'g-470', 'g-533', 'g-621', 'c-18_-_c-80', 'g-253', 'g-272', 'g-329', 'g-527', 'g-572', 'g-663', 'g-75', 'g-431_+_c-65', 'g-370', 'g-679', 'g-574', 'g-614', 'g-394', 'g-57', 'g-193', 'g-317', 'g-53', 'g-110', 'g-158', 'g-161', 'g-713', 'g-88', 'g-202_-_g-100', 'g-210_-_g-100', 'g-113', 'g-360', 'g-735', 'g-279_+_g-202', 'g-290', 'g-118', 'g-114', 'g-495', 'g-441_-_g-202', 'g-139', 'g-214', 'g-216', 'g-296', 'g-355', 'g-372', 'g-373', 'g-384', 'g-412', 'g-415', 'g-446', 'g-465', 'g-471', 'g-481', 'g-507', 'g-535', 'g-542', 'g-546', 'g-551', 'g-62', 'g-66', 'g-678', 'g-681', 'g-702', 'g-733', 'g-98', 'c-19', 'g-757', 'g-765', 'g-524', 'c-26_+_g-157', 'c-9_+_g-157', 'g-186_+_g-157', 'g-195_+_g-157', 'g-41', 'g-549', 'g-185', 'g-190', 'g-207', 'g-217', 'g-312', 'g-538', 'g-652', 'g-20_+_g-476', 'g-628_-_g-636', 'g-292', 'g-557']\nlen(features_pow_ss_list)","7b68bfc4":"columns_all = new_features_list\n\nX_train_all = X_train_enc.copy()\nX_test_all = X_test_enc.copy()\n\n# Maximum\ntemplate = 'max_'\ncolumns_max = [get_cols_pair(col[4:], '_') for col in columns_all if col.startswith(template)]\n\nfor col in columns_max:\n    X_train_all[template + col[0] + '_' + col[1]] = X_train_enc[[col[0], col[1]]].max(axis=1)\n    X_test_all[template + col[0] + '_' + col[1]] = X_test_enc[[col[0], col[1]]].max(axis=1)\n                                                            \n# Minimum\ntemplate = 'min_'\ncolumns_min = [get_cols_pair(col[4:], '_') for col in columns_all if col.startswith(template)]\n\nfor col in columns_min:\n    X_train_all[template + col[0] + '_' + col[1]] = X_train_enc[[col[0], col[1]]].min(axis=1)\n    X_test_all[template + col[0] + '_' + col[1]] = X_test_enc[[col[0], col[1]]].min(axis=1)                                                             \n\n# Addition\ntemplate = '_+_'\ncolumns_add = [get_cols_pair(col, template) for col in columns_all if col.find(template) != -1]\n\nfor col in columns_add:\n    X_train_all[col[0] + template + col[1]] = X_train_enc[col[0]] + X_train_enc[col[1]]\n    X_test_all[col[0] + template + col[1]] = X_test_enc[col[0]] + X_test_enc[col[1]]\n    \n# Subtraction\ntemplate = '_-_'\ncolumns_sub = [get_cols_pair(col, template) for col in columns_all if col.find(template) != -1]\n\nfor col in columns_sub:\n    X_train_all[col[0] + template + col[1]] = X_train_enc[col[0]] - X_train_enc[col[1]]\n    X_test_all[col[0] + template + col[1]] = X_test_enc[col[0]] - X_test_enc[col[1]]\n    \nprint(X_train_all.shape)\nprint(X_test_all.shape)","19efa2c4":"tr = StandardScaler()\n_suffix = '_pow_ss'\n\nX_train_all_pow = pd.DataFrame(X_train_all[features_pow_ss_list]).applymap(pow10)\nX_train_all_tr = pd.DataFrame(data=tr.fit_transform(X_train_all_pow), index=X_train_all_pow.index, \n                              columns=features_pow_ss_list)\nX_train_all_tr = X_train_all_tr.add_suffix(_suffix)\n\nX_test_all_pow = pd.DataFrame(X_test_all[features_pow_ss_list]).applymap(pow10)\nX_test_all_tr = pd.DataFrame(data=tr.transform(X_test_all_pow), index=X_test_all_pow.index, \n                             columns=features_pow_ss_list)\nX_test_all_tr = X_test_all_tr.add_suffix(_suffix)\n\nprint(X_train_all_tr.shape)\nprint(X_test_all_tr.shape)","e04b8bc0":"columns_old = list(X_train_all.columns.difference(features_pow_ss_list))\n\nX_train_all = pd.merge(X_train_all[columns_old], X_train_all_tr, how='inner', left_index=True, right_index=True)\nmoa_train_df_all = pd.merge(X_train_all, Y_train, how='inner', left_index=True, right_index=True)\n\nX_test_all = pd.merge(X_test_all[columns_old], X_test_all_tr, how='inner', left_index=True, right_index=True)\n#moa_test_df_all = pd.merge(X_test_all, Y_test, how='inner', left_index=True, right_index=True)\n\nprint(moa_train_df_all.shape)\nprint(X_test_all.shape)\n#print(moa_test_df_all.shape)","e6d466da":"cor_all = moa_train_df_all.corr()\ncor_all.shape","64c3256b":"features_df = get_features_df(corr_df=cor_all, target_list=Y_train.columns, corr_threshold=0.1)\nfeatures_df = get_unique_feature_pairs(features_df)\nprint(features_df.shape)","32bcda60":"targets_chain_list = ['5-alpha_reductase_inhibitor', 'acat_inhibitor', 'acetylcholine_receptor_agonist', 'acetylcholine_receptor_antagonist', 'acetylcholinesterase_inhibitor', 'adenosine_receptor_agonist', 'adenosine_receptor_antagonist', 'adenylyl_cyclase_activator', 'adrenergic_receptor_agonist', 'adrenergic_receptor_antagonist', 'akt_inhibitor', 'aldehyde_dehydrogenase_inhibitor', 'alk_inhibitor', 'ampk_activator', 'analgesic', 'androgen_receptor_antagonist', 'anesthetic_-_local', 'angiotensin_receptor_antagonist', 'anti-inflammatory', 'antiarrhythmic', 'antibiotic', 'anticonvulsant', 'antifungal', 'antihistamine', 'antimalarial', 'antioxidant', 'antiprotozoal', 'antiviral', 'atm_kinase_inhibitor', 'atp-sensitive_potassium_channel_antagonist', 'atp_synthase_inhibitor', 'atr_kinase_inhibitor', 'aurora_kinase_inhibitor', 'autotaxin_inhibitor', 'bacterial_30s_ribosomal_subunit_inhibitor', 'bacterial_50s_ribosomal_subunit_inhibitor', 'bacterial_antifolate', 'bacterial_cell_wall_synthesis_inhibitor', 'bacterial_dna_gyrase_inhibitor', 'bacterial_dna_inhibitor', 'bacterial_membrane_integrity_inhibitor', 'benzodiazepine_receptor_agonist', 'beta_amyloid_inhibitor', 'bromodomain_inhibitor', 'btk_inhibitor', 'calcineurin_inhibitor', 'calcium_channel_blocker', 'cannabinoid_receptor_agonist', 'cannabinoid_receptor_antagonist', 'carbonic_anhydrase_inhibitor', 'casein_kinase_inhibitor', 'catechol_o_methyltransferase_inhibitor', 'cc_chemokine_receptor_antagonist', 'cck_receptor_antagonist', 'cdk_inhibitor', 'chelating_agent', 'chk_inhibitor', 'cholesterol_inhibitor', 'cholinergic_receptor_antagonist', 'coagulation_factor_inhibitor', 'cyclooxygenase_inhibitor', 'cytochrome_p450_inhibitor', 'dihydrofolate_reductase_inhibitor', 'dipeptidyl_peptidase_inhibitor', 'diuretic', 'dna_alkylating_agent', 'dopamine_receptor_agonist', 'egfr_inhibitor', 'elastase_inhibitor', 'erbb2_inhibitor', 'estrogen_receptor_antagonist', 'faah_inhibitor', 'farnesyltransferase_inhibitor', 'fatty_acid_receptor_agonist', 'focal_adhesion_kinase_inhibitor', 'free_radical_scavenger', 'fungal_squalene_epoxidase_inhibitor', 'gaba_receptor_agonist', 'gaba_receptor_antagonist', 'gamma_secretase_inhibitor', 'glutamate_inhibitor', 'glutamate_receptor_agonist', 'glutamate_receptor_antagonist', 'gonadotropin_receptor_agonist', 'gsk_inhibitor', 'hcv_inhibitor', 'hdac_inhibitor', 'histamine_receptor_agonist', 'histamine_receptor_antagonist', 'histone_lysine_demethylase_inhibitor', 'histone_lysine_methyltransferase_inhibitor', 'hiv_inhibitor', 'hmgcr_inhibitor', 'hsp_inhibitor', 'igf-1_inhibitor', 'imidazoline_receptor_agonist', 'immunosuppressant', 'insulin_secretagogue', 'insulin_sensitizer', 'integrin_inhibitor', 'jak_inhibitor', 'laxative', 'leukotriene_inhibitor', 'leukotriene_receptor_antagonist', 'lipase_inhibitor', 'lxr_agonist', 'mdm_inhibitor', 'mek_inhibitor', 'membrane_integrity_inhibitor', 'mineralocorticoid_receptor_antagonist', 'monoacylglycerol_lipase_inhibitor', 'monoamine_oxidase_inhibitor', 'monopolar_spindle_1_kinase_inhibitor', 'mucolytic_agent', 'neuropeptide_receptor_antagonist', 'nicotinic_receptor_agonist', 'nitric_oxide_production_inhibitor', 'nitric_oxide_synthase_inhibitor', 'opioid_receptor_agonist', 'opioid_receptor_antagonist', 'orexin_receptor_antagonist', 'p-glycoprotein_inhibitor', 'parp_inhibitor', 'pdk_inhibitor', 'phosphodiesterase_inhibitor', 'phospholipase_inhibitor', 'pi3k_inhibitor', 'potassium_channel_activator', 'potassium_channel_antagonist', 'ppar_receptor_antagonist', 'progesterone_receptor_agonist', 'prostaglandin_inhibitor', 'prostanoid_receptor_antagonist', 'proteasome_inhibitor', 'protein_kinase_inhibitor', 'protein_phosphatase_inhibitor', 'protein_synthesis_inhibitor', 'protein_tyrosine_kinase_inhibitor', 'radiopaque_medium', 'raf_inhibitor', 'ras_gtpase_inhibitor', 'retinoid_receptor_agonist', 'retinoid_receptor_antagonist', 'rho_associated_kinase_inhibitor', 'ribonucleoside_reductase_inhibitor', 'rna_polymerase_inhibitor', 'serotonin_receptor_agonist', 'serotonin_receptor_antagonist', 'serotonin_reuptake_inhibitor', 'sigma_receptor_antagonist', 'smoothened_receptor_antagonist', 'sodium_channel_inhibitor', 'sphingosine_receptor_agonist', 'steroid', 'syk_inhibitor', 'tachykinin_antagonist', 'tgf-beta_receptor_inhibitor', 'thrombin_inhibitor', 'tlr_agonist', 'tlr_antagonist', 'tnf_inhibitor', 'topoisomerase_inhibitor', 'transient_receptor_potential_channel_antagonist', 'tropomyosin_receptor_kinase_inhibitor', 'trpv_antagonist', 'tubulin_inhibitor', 'ubiquitin_specific_protease_inhibitor', 'vitamin_b', 'vitamin_d_receptor_agonist', 'wnt_inhibitor', '11-beta-hsd1_inhibitor', 'angiogenesis_inhibitor', 'aromatase_inhibitor', 'chloride_channel_blocker', 'progesterone_receptor_antagonist', 'fgfr_inhibitor', 'glucocorticoid_receptor_agonist', 'ikk_inhibitor', 'mtor_inhibitor', 'nfkb_inhibitor', 'nitric_oxide_donor', 'p38_mapk_inhibitor', 'vegfr_inhibitor', 'pkc_inhibitor', 'estrogen_receptor_agonist', 'sigma_receptor_agonist', 'src_inhibitor', 'thymidylate_synthase_inhibitor', 'trpv_agonist', 'tyrosine_kinase_inhibitor', 'pdgfr_inhibitor', 'androgen_receptor_agonist', 'bcl_inhibitor', 'caspase_activator', 'dna_inhibitor', 'dopamine_receptor_antagonist', 'kit_inhibitor', 'lipoxygenase_inhibitor', 'atpase_inhibitor', 'norepinephrine_reuptake_inhibitor', 'bcr-abl_inhibitor', 'corticosteroid_agonist', 'flt3_inhibitor', 'ppar_receptor_agonist', 'nrf2_activator', 'apoptosis_stimulant']\nprint(len(targets_chain_list))","d7c15e4b":"def get_param_value(target_name):\n    \n    if target_name in ['dopamine_receptor_antagonist','acetylcholine_receptor_antagonist','adrenergic_receptor_antagonist',\n                      'calcium_channel_blocker','cyclooxygenase_inhibitor']:\n        c = 0.06\n    elif target_name in ['dna_inhibitor']:\n        c = 0.07\n    elif target_name in ['potassium_channel_antagonist','estrogen_receptor_agonist','androgen_receptor_antagonist',\n                        'bacterial_cell_wall_synthesis_inhibitor','cc_chemokine_receptor_antagonist','cytochrome_p450_inhibitor',\n                        'dopamine_receptor_agonist','elastase_inhibitor','gaba_receptor_antagonist']:\n        c = 0.08\n    elif target_name in ['protein_synthesis_inhibitor','tyrosine_kinase_inhibitor','prostanoid_receptor_antagonist']:\n        c = 0.09\n    elif target_name in ['vegfr_inhibitor','opioid_receptor_antagonist','acetylcholinesterase_inhibitor',\n                        'adenosine_receptor_agonist','protein_kinase_inhibitor','acetylcholine_receptor_agonist',\n                        'adenosine_receptor_antagonist','anesthetic_-_local','bacterial_dna_gyrase_inhibitor',\n                        'cannabinoid_receptor_antagonist','chelating_agent','cholinergic_receptor_antagonist',\n                        'glutamate_receptor_agonist']:\n        c = 0.10\n    elif target_name in ['immunosuppressant','bcl_inhibitor','pi3k_inhibitor','membrane_integrity_inhibitor',\n                        'adrenergic_receptor_agonist','antioxidant','lipoxygenase_inhibitor','cholesterol_inhibitor',\n                        'nitric_oxide_production_inhibitor','gaba_receptor_agonist','potassium_channel_activator']:\n        c = 0.11\n    elif target_name in ['atpase_inhibitor','anti-inflammatory','androgen_receptor_agonist']:\n        c = 0.12\n    elif target_name in ['ppar_receptor_agonist','src_inhibitor','thymidylate_synthase_inhibitor','antibiotic',\n                        'dna_alkylating_agent']:\n        c = 0.13\n    elif target_name in ['pdgfr_inhibitor','bromodomain_inhibitor','aromatase_inhibitor','trpv_antagonist']:\n        c = 0.14\n    elif target_name in ['cdk_inhibitor','aurora_kinase_inhibitor','acat_inhibitor','antiprotozoal','angiogenesis_inhibitor',\n                        'opioid_receptor_agonist','bacterial_30s_ribosomal_subunit_inhibitor',\n                        'bacterial_50s_ribosomal_subunit_inhibitor','bacterial_dna_inhibitor',\n                        'antiviral','benzodiazepine_receptor_agonist','cannabinoid_receptor_agonist',\n                        'carbonic_anhydrase_inhibitor','casein_kinase_inhibitor','faah_inhibitor']:\n        c = 0.15\n    elif target_name in ['corticosteroid_agonist','phospholipase_inhibitor','chloride_channel_blocker']:\n        c = 0.16\n    elif target_name in ['tubulin_inhibitor','jak_inhibitor','akt_inhibitor','estrogen_receptor_antagonist','ikk_inhibitor',\n                        'rna_polymerase_inhibitor','insulin_secretagogue']:\n        c = 0.17\n    elif target_name in ['egfr_inhibitor','topoisomerase_inhibitor','hdac_inhibitor','bcr-abl_inhibitor','fgfr_inhibitor',\n                        'gsk_inhibitor','tnf_inhibitor','sigma_receptor_agonist']:\n        c = 0.18\n    elif target_name in ['p38_mapk_inhibitor','pkc_inhibitor']:\n        c = 0.19\n    elif target_name in ['mek_inhibitor','angiotensin_receptor_antagonist','nitric_oxide_donor','beta_amyloid_inhibitor',\n                        'antifungal','bacterial_antifolate','cck_receptor_antagonist','fatty_acid_receptor_agonist',\n                        'gamma_secretase_inhibitor']:\n        c = 0.20\n    elif target_name in ['mtor_inhibitor','ribonucleoside_reductase_inhibitor','syk_inhibitor']:\n        c = 0.21\n    elif target_name in ['11-beta-hsd1_inhibitor']:\n        c = 0.22\n    elif target_name in ['bcl_inhibitor','alk_inhibitor','dihydrofolate_reductase_inhibitor']:\n        c = 0.23\n    elif target_name in ['antihistamine','antimalarial','dipeptidyl_peptidase_inhibitor','free_radical_scavenger',\n                        'fungal_squalene_epoxidase_inhibitor']:\n        c = 0.25\n    elif target_name in ['hmgcr_inhibitor']:\n        c = 0.28\n    elif target_name in ['hsp_inhibitor']:\n        c = 0.29\n    elif target_name in ['ampk_activator','analgesic','anticonvulsant','bacterial_membrane_integrity_inhibitor',\n                        'btk_inhibitor']:\n        c = 0.30\n    elif target_name in ['5-alpha_reductase_inhibitor','autotaxin_inhibitor','catechol_o_methyltransferase_inhibitor']:\n        c = 0.35\n    elif target_name in ['antiarrhythmic','diuretic','glutamate_inhibitor']:\n        c = 0.45\n    elif target_name in ['glucocorticoid_receptor_agonist']:\n        c = 0.49\n    elif target_name in ['atr_kinase_inhibitor','coagulation_factor_inhibitor']:\n        c = 0.5\n    elif target_name in ['mdm_inhibitor']:\n        c = 0.56\n    elif target_name in ['raf_inhibitor']:\n        c = 0.58\n    elif target_name in ['calcineurin_inhibitor','chk_inhibitor']:\n        c = 0.75\n    elif target_name in ['kit_inhibitor','vitamin_d_receptor_agonist']:\n        c = 0.79\n    elif target_name in ['nfkb_inhibitor']:\n        c = 0.83\n    elif target_name in ['focal_adhesion_kinase_inhibitor']:\n        c = 1.0\n    elif target_name in ['flt3_inhibitor']:\n        c = 1.16\n    elif target_name in ['adenylyl_cyclase_activator','aldehyde_dehydrogenase_inhibitor','farnesyltransferase_inhibitor']:\n        c = 1.50\n    elif target_name in ['atm_kinase_inhibitor']:\n        c = 2.0\n    elif target_name in ['proteasome_inhibitor']:\n        c = 2.04\n    elif target_name in ['atp_synthase_inhibitor']:\n        c = 5.0\n    elif target_name in ['apoptosis_stimulant']:\n        c = 29.18\n    else:\n        c = 0.20\n        \n    return c","8fe40382":"df_pred = pd.DataFrame(data=X_test_all.index, index=X_test_all.index)\ndf_prob = pd.DataFrame(data=X_test_all.index, index=X_test_all.index)\n\narr = np.zeros((X_test_all.shape[0], 1))\ni = 0\n\nfor moa_target in targets_chain_list:\n    if moa_target in ['cdk_inhibitor','flt3_inhibitor','kit_inhibitor','glucocorticoid_receptor_agonist','apoptosis_stimulant']:\n        input_cols = get_features_list(moa_target, features_df, 0.1)\n    elif moa_target == 'proteasome_inhibitor':\n        input_cols = get_features_list(moa_target, features_df, 0.4)\n    elif moa_target == 'nfkb_inhibitor':\n        input_cols = get_features_list(moa_target, features_df, 0.7)\n    else:\n        input_cols = X_train_all.columns\n    \n    if len(input_cols) > 0:\n        try:\n            model_code = 'LR'\n            \n            c = get_param_value(moa_target)\n\n            moa_lr = LogisticRegression(penalty='l1', C=c, solver='liblinear', max_iter=100)\n            moa_lr.fit(moa_train_df_all[input_cols], moa_train_df_all[moa_target])\n\n            y_pred_lr = moa_lr.predict(X_test_all[input_cols])\n            pp_lr = moa_lr.predict_proba(X_test_all[input_cols])\n\n            X_test_all[moa_target] = y_pred_lr.astype(int)\n\n            df_pred[moa_target] = y_pred_lr.astype(int)\n            df_prob[moa_target] = pp_lr[:, 1]\n            \n            print('{}: {}: {}'.format(model_code, i, moa_target))\n\n        except Exception as e:\n            print('{}: {}: {}: {}'.format(model_code, i, moa_target, e))\n    else:\n        X_test_all[moa_target] = arr.astype(int)\n            \n    i+=1\n\ndf_pred = df_pred.drop(labels=['sig_id'], axis=1)\n\ndf_prob = df_prob.drop(labels=['sig_id'], axis=1)\ndf_prob.to_csv('\/kaggle\/working\/predicted_proba.csv')","e3aa025c":"data_values = df_pred[df_pred.columns[1:]].sum(axis=1).values\n\ns = pd.Series(data=data_values)\ns = s.groupby(s.values).count()\ns.sort_values(ascending=False, inplace=True)\n\nprint(s[s.index > 0].sum())\n\n# sns.set(font_scale=2)\nplt.figure(figsize=(10,6))\nax = sns.barplot(x=np.arange(len(s)), y=s.values)\n\nax.set_xticklabels(s.index, rotation='horizontal', fontsize=12)\n\nplt.title('The number of samples for each MoA target group', fontsize=20)\nplt.ylabel('The number of samples', fontsize=14)\nplt.xlabel('MoA target group', fontsize=14)\n\n# Adding the text labels\nrects = ax.patches\nfor rect, data_value in zip(rects, s.values):\n    h = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width()\/2, h + 5, data_value, ha='center', va='bottom', fontsize=12)\n    \nplt.show()\nplt.close()","dd51f80c":"df_prob = pd.read_csv('\/kaggle\/working\/predicted_proba.csv')\ndf_prob.shape","9e5e3b82":"df_submit = pd.DataFrame(data=df_prob['sig_id'])\narr = np.zeros((df_prob.shape[0], 1))\ntarget_list_pp = list(df_prob.columns[1:])\n\nfor col in Y_train.columns:\n    if (col in target_list_pp):\n        df_submit[col] = df_prob[col]\n    else:\n        df_submit[col] = arr","15de329c":"print(df_submit.shape)\ndf_submit.head(3)","57dd5934":"df_submit.to_csv('submission.csv', index=False)","e62edbfb":"df_submit = pd.read_csv('\/kaggle\/working\/submission.csv')","22eda291":"#### Generated features templates list","c43c6e8f":"### Exploratory Data Analysis","cb2e4d07":"#### Predicted on the engineered data","339c9be1":"### Real model fitting","3a6f737a":"### Load data","b6107a19":"### Feature Engineering","c672f0a2":"### Submit results","6fddc301":"### Train-test split","0f83c1ec":"### Define functions"}}