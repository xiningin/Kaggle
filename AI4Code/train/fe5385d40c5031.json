{"cell_type":{"836618c2":"code","8f246a55":"code","e2dcc271":"code","9c77f5f6":"code","866f41e3":"code","d53e9c7a":"code","ce859753":"code","d072e511":"markdown","8d605c4a":"markdown","010d332f":"markdown"},"source":{"836618c2":"# Let's import the data into a dataframe so that we can manipulate it\nimport numpy as np\nimport pandas as pd\n\ndf_raw = pd.read_csv('..\/input\/infant-mortality\/InfantMortalityRate.csv')\ndf_raw.head()","8f246a55":"# As first quick analysis, let's run pandas_profiling and pandas_visual_analysis to show what is in the raw dataset\nimport pandas_profiling\npandas_profile = pandas_profiling.ProfileReport(df_raw, progress_bar=False)\npandas_profile.to_widgets()","e2dcc271":"!pip install pandas_visual_analysis --quiet\nfrom pandas_visual_analysis import VisualAnalysis\nVisualAnalysis(df_raw, categorical_columns=[\"Country\", \"Gender\"])","9c77f5f6":"# Looking at the warnings from pandas_profiling, we seem to have duplicate rows. Looking at the rows (see relevant tab in pandas_profiling), we suspect these are just errors in the data so we can drop the duplicate and keep the first occurences\n# We also have missing values in the last row, most likely due to a \/n before the EOF so we can also just drop that row\n# It seems year was loaded as a real value while all values as integers so let's convert the type as such. Similar for gender which we convert to category\ndf_clean = df_raw.drop_duplicates().dropna().astype({\"Year\": \"int\", \"Gender\" : \"category\"})\n\n# If we further verify, we see there are additional duplicates which were not shown before as their mortality rate is different\nprint(\"Showing row duplicates with different mortality rates\")\nprint(df_clean[df_clean.duplicated([\"Country\", \"Gender\", \"Year\"], keep=False)])\n# However,they are still for the same country, same year, same gender and thus cleary overlap\n# Without having additional details on the dataset, let's just keep the first occurence for now (other alternatives could be min, max, mean, last, ...)\ndf_clean = df_clean.drop_duplicates(subset=[\"Country\", \"Gender\", \"Year\"])\n\n# Lastly, let's set the index to the dimensions we have. Note that we only have 1 value column in this dataset\ndf_clean = df_clean.set_index([\"Country\", \"Gender\", \"Year\"]).sort_index()\ndf_clean.head()","866f41e3":"import plotly.express as px\nimport plotly.graph_objects as go\n\n# Let's first complete the tasks set forward in the dataset\n# Top 5 Countries with lowest mortality rate both male and female\n# Top 5 Countries with highest mortality rate both male and female\n\n# We can easily generate a pivot with the top 5 per gender per year\npd.set_option('display.max_rows', None) # We set this to none so that it prints all rows for us. Default is 10\nprint(\"----- Top 5 Countries with highest mortality rate both male and female -----\")\nprint(df_clean[df_clean.index.get_level_values(\"Gender\")!=\"Total\"]['Infant Mortality Rate'].groupby(['Year', 'Gender'] ).nlargest(5))\n\n# Now we do the same for the bottom 5\nprint(\"\"); print(\"----- Top 5 Countries with lowest mortality rate both male and female -----\")\nprint(df_clean[df_clean.index.get_level_values(\"Gender\")!=\"Total\"]['Infant Mortality Rate'].groupby(['Year', 'Gender'] ).nsmallest(5))\n\npd.set_option('display.max_rows', 10) # Let's set this back to default for now so we don't generate huge prints when not needed","d53e9c7a":"# Visualize the trend in mortality rate over the years for various countries\n\n# Let's already just plot the \"Total\" gender across time\ndf_total = df_clean[df_clean.index.get_level_values(\"Gender\")==\"Total\"]\nfig = px.line(df_total, x=df_total.index.get_level_values('Year'), y='Infant Mortality Rate', color=df_total.index.get_level_values('Country'))\nfig.show()\n# As you can see, there is not a lot we can learn from this graph due to the sheer amount of lines.\n# However, if you filter the countries (by double-clicking them on the legend) you can still investigate how specific countries trend across the years\n\n# Let's use a violin plot and add max-mean-min traces to try and make the graph more insightful. This already gives us a slightly better overview\nfig3 = px.violin(df_clean.reset_index(), y=\"Infant Mortality Rate\", x=\"Year\", color=\"Gender\", box=True, points=\"all\", hover_data=df_clean.columns)\nfig3.add_trace(go.Scatter(x=df_clean.groupby('Year').max().index, y=df_clean.groupby('Year').max()['Infant Mortality Rate'], mode='lines', line={'width': 4, 'color': 'black'}, name='Maximum'))\nfig3.add_trace(go.Scatter(x=df_clean.groupby('Year').min().index, y=df_clean.groupby('Year').min()['Infant Mortality Rate'], mode='lines', line={'width': 4, 'color': 'green'}, name='Minimum'))\nfig3.add_trace(go.Scatter(x=df_clean.groupby('Year').mean().index, y=df_clean.groupby('Year').mean()['Infant Mortality Rate'], mode='lines', line={'width': 4, 'color': 'blue'}, name='Mean'))\nfig3.show()","ce859753":"# Comparison of trend of mortality rate for a year for both male and female.\n\n# Let's convert the previous violin graph to an animation so that we can look at the detailed comparison across genders for a specific year\nfig = px.violin(df_clean.reset_index(), y=\"Infant Mortality Rate\", animation_frame=\"Year\", color=\"Gender\", box=True, points=\"all\", hover_data=df_clean.columns)\nfig.show()\n\n# Additionaly let's analyze the delta between Male\/Female and Total so that we can zoom in on the difference between the genders\ndf_gendercompare = pd.DataFrame(df_clean.reset_index().pivot(index=[\"Year\", \"Country\"], columns=[\"Gender\"],values=\"Infant Mortality Rate\").to_records())\ndf_gendercompare[\"delta_female\"] = df_gendercompare[\"Female\"] - df_gendercompare[\"Total\"]\ndf_gendercompare[\"delta_male\"] = df_gendercompare[\"Male\"] - df_gendercompare[\"Total\"]\ndf_gendercompare = pd.melt(df_gendercompare, id_vars=[\"Year\", \"Country\"], value_vars=[\"delta_female\", \"delta_male\"], var_name='Gender', value_name='delta')\nfig2 = px.violin(df_gendercompare, y=\"delta\", x=\"Year\", color=\"Gender\", box=True, points=\"all\", hover_data=df_gendercompare.columns)\nfig2.show()\n# We can see that although females have generally had a lower mortality rate, the difference has been declining over the years","d072e511":"# Analysis","8d605c4a":"# Cleaning","010d332f":"# Initial analysis"}}