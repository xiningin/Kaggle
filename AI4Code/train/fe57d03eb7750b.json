{"cell_type":{"5710a984":"code","ef0f33e7":"code","958c21e2":"code","48b4cd50":"code","eaee0b8a":"code","9c2e702d":"code","a29b566a":"code","bea12924":"code","c2b4e2cd":"code","013cf515":"code","870569ee":"code","771817c1":"code","0a87a01d":"code","fcebc8f9":"code","1d09f1b9":"code","332137a3":"code","702e1723":"code","6629b063":"code","bb7b78f6":"code","693aaf90":"code","6cf0795f":"code","e9beef70":"code","72af036e":"code","5a49a20a":"code","05783252":"code","857c8349":"code","7adc431f":"code","446fae66":"code","ac214e32":"code","b79f0e17":"code","6f451261":"code","c0863c91":"code","f9126428":"code","bfc5f320":"code","e05779d2":"code","b19db9a6":"code","80de313f":"code","28580459":"code","889020d1":"code","203c542e":"code","98fdc8da":"code","15710714":"code","53c9d97b":"code","cc5bfd29":"code","0f797c4f":"code","c1f31108":"code","5c967d66":"code","03c8d7be":"code","dfb7bc6a":"code","50e1d2fc":"code","b2a73211":"code","6dfde067":"code","cd3b2961":"code","5aa42d41":"code","b3bcb1f0":"code","6f626852":"code","154af4de":"code","9c9ef5b1":"code","f8604067":"code","063edb46":"code","d81429e7":"code","eeb98d14":"code","ee3740ce":"code","7931b71e":"code","5da32706":"code","a8bdb5ae":"code","225c4d3e":"code","96a4c5e2":"code","9f13e148":"code","61769b15":"code","6b3af84c":"code","56b3fbcb":"code","193d0876":"code","c15d71cb":"code","0424499e":"code","55c7bbd6":"code","31e5b9ba":"code","a791bbf8":"code","f630b126":"code","0d6ad341":"code","b3df5c95":"code","0fc70fb6":"code","7ec73c03":"code","f534aaeb":"code","0c305324":"code","e1a364a8":"code","19e4aa45":"code","9e4d081a":"code","30018eff":"code","5172adc2":"code","9d0f3fa7":"code","5d6db15f":"code","b014395c":"code","179b807d":"code","1d3ff3b2":"code","f5131108":"code","08829183":"code","4ed6f6fa":"code","755cb820":"markdown","016f51d8":"markdown","882cfcd2":"markdown","152165f7":"markdown","7301db3e":"markdown","4429020b":"markdown","5c34eb64":"markdown","f0035ea1":"markdown","4ca5169c":"markdown","85e5a8a1":"markdown","97dd2169":"markdown","3053afe0":"markdown","6c6df250":"markdown","3bef8754":"markdown","ff3fc485":"markdown","158ef8ba":"markdown","3843514f":"markdown","0046d2f6":"markdown","2158c44c":"markdown","29bf759e":"markdown","f8b6adc3":"markdown","60f86fc4":"markdown","3b894f41":"markdown","cb31763c":"markdown","80c51508":"markdown","c8703df5":"markdown","2a2a7ddd":"markdown","c2bbeee6":"markdown","028d745d":"markdown","d05de9b2":"markdown","551720b7":"markdown","26ccdf83":"markdown","4e27fea7":"markdown","66994a82":"markdown","ef98e662":"markdown","ccdf5f71":"markdown","d466a59e":"markdown","53208941":"markdown","ec34cfe3":"markdown","0dadf3a7":"markdown","aa1d2361":"markdown","c49cd703":"markdown","a7875bf5":"markdown","092df7aa":"markdown","9d369de6":"markdown","481ab008":"markdown","6ba7b1df":"markdown","32c36b40":"markdown","971ba1c8":"markdown","46e7cb1e":"markdown","b81e1039":"markdown","b8a699d3":"markdown","14243295":"markdown","15f3e088":"markdown","aa9b64bb":"markdown","97d731d4":"markdown","88256ee8":"markdown","c3d15737":"markdown","4da96f26":"markdown","bc641660":"markdown","693b7af0":"markdown","1c870472":"markdown"},"source":{"5710a984":"import numpy as np\nimport pandas as pd\nimport plotly.graph_objs as go\nimport plotly.express as px\n\n\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","ef0f33e7":"data = pd.read_csv(\"\/kaggle\/input\/mushroom-classification\/mushrooms.csv\")","958c21e2":"data.shape","48b4cd50":"data.info()","eaee0b8a":"data.head()","9c2e702d":"def variable(variable):\n    var = data[variable]\n    varcount = var.value_counts()\n    \n    plt.Figure(figsize = (1,1))\n    sns.barplot(x = varcount.index , y = varcount.values)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.show()\n\nfor i in data.columns:\n    variable(i)","a29b566a":"capshape = data[\"cap-shape\"].unique()\n\npoisson_state_top = []\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in capshape:\n    edibles = len(data[(data[\"cap-shape\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"cap-shape\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"cap-shape\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"cap-shape\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\ncapshape_poisson_list = pd.DataFrame({\"cap-shape\" : capshape , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(capshape))\nbar_width = 0.35\n\nrects1 = plt.bar(index, capshape_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, capshape_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel('Cap Shape')\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('x', 'b', 's', 'f', 'k', 'c'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","bea12924":"capshape_poisson_list","c2b4e2cd":"data[\"cap-shape\"].value_counts()","013cf515":"capsurface = data[\"cap-surface\"].unique()\n\npoisson_state_top = []\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in capsurface:\n    edibles = len(data[(data[\"cap-surface\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"cap-surface\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"cap-surface\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"cap-surface\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\ncapsurfac_poisson_list = pd.DataFrame({\"cap-surface\" : capsurface , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(capsurface))\nbar_width = 0.35\n\nrects1 = plt.bar(index, capsurfac_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, capsurfac_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel('Cap Surface')\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('s', 'y', 'f', 'g'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","870569ee":"capsurfac_poisson_list","771817c1":"data['cap-surface'].value_counts()","0a87a01d":"capcolor = data[\"cap-color\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in capcolor:\n    edibles = len(data[(data[\"cap-color\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"cap-color\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"cap-color\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"cap-color\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\ncapcolor_poisson_list = pd.DataFrame({\"cap-color\" : capcolor , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(capcolor))\nbar_width = 0.35\n\nrects1 = plt.bar(index, capcolor_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, capcolor_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"cap-color\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('n', 'y', 'w', 'g', 'e', 'p', 'b', 'u', 'c', 'r'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","fcebc8f9":"capcolor_poisson_list","1d09f1b9":"data[\"cap-color\"].value_counts()","332137a3":"print(\"gill-attachment Variable Unique Values: {}\".format(data[\"gill-attachment\"].unique()))\nprint(\"gill-spacing Variable Unique Values: {}\".format(data[\"gill-spacing\"].unique()))\nprint(\"gill-size Variable Unique Values: {}\".format(data[\"gill-size\"].unique()))\nprint(\"gill-color Variable Unique Values: {}\".format(data[\"gill-color\"].unique()))","702e1723":"gillattachment = data[\"gill-attachment\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in gillattachment:\n    edibles = len(data[(data[\"gill-attachment\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"gill-attachment\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"gill-attachment\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"gill-attachment\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\ngillattachment_poisson_list = pd.DataFrame({\"gill-attachment\" : gillattachment , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(gillattachment))\nbar_width = 0.35\n\nrects1 = plt.bar(index, gillattachment_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, gillattachment_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Gill Attachment\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('f','a'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","6629b063":"gillattachment_poisson_list","bb7b78f6":"gillspacing = data[\"gill-spacing\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in gillspacing:\n    edibles = len(data[(data[\"gill-spacing\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"gill-spacing\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"gill-spacing\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"gill-spacing\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\ngillspacing_poisson_list = pd.DataFrame({\"gill-spacing\" : gillspacing , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(gillspacing))\nbar_width = 0.35\n\nrects1 = plt.bar(index, gillspacing_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, gillspacing_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Gill Spacing\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('c','w'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","693aaf90":"gillspacing_poisson_list","6cf0795f":"gillsize = data[\"gill-size\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in gillsize:\n    edibles = len(data[(data[\"gill-size\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"gill-size\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"gill-size\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"gill-size\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\ngillsize_poisson_list = pd.DataFrame({\"gill-size\" : gillsize , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(gillsize))\nbar_width = 0.35\n\nrects1 = plt.bar(index, gillsize_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, gillsize_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Gill Size\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('n','b'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","e9beef70":"gillsize_poisson_list","72af036e":"data[\"gill-size\"].value_counts()","5a49a20a":"gillcolor = data[\"gill-color\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in gillcolor:\n    edibles = len(data[(data[\"gill-color\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"gill-color\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"gill-color\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"gill-color\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\ngillcolor_poisson_list = pd.DataFrame({\"gill-color\" : gillcolor , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(gillcolor))\nbar_width = 0.35\n\nrects1 = plt.bar(index, gillcolor_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, gillcolor_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Gill Color\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('k' 'n' 'g' 'p' 'w' 'h' 'u' 'e' 'b' 'r' 'y' 'o'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","05783252":"gillcolor_poisson_list","857c8349":"data[\"gill-color\"].value_counts()","7adc431f":"stalk_list = [\"stalk-shape\",\"stalk-root\",\"stalk-surface-above-ring\",\"stalk-surface-below-ring\",\"stalk-color-above-ring\",\"stalk-color-below-ring\"]\nprint(\"stalk-shape Variable Unique Values: {}\".format(data[\"stalk-shape\"].unique()))\nprint(\"stalk-root Variable Unique Values: {}\".format(data[\"stalk-root\"].unique()))\nprint(\"stalk-surface-above-ring Variable Unique Values: {}\".format(data[\"stalk-surface-above-ring\"].unique()))\nprint(\"stalk-surface-below-ring Variable Unique Values: {}\".format(data[\"stalk-surface-below-ring\"].unique()))\nprint(\"stalk-color-above-ring Variable Unique Values: {}\".format(data[\"stalk-color-above-ring\"].unique()))\nprint(\"stalk-color-below-ring Variable Unique Values: {}\".format(data[\"stalk-color-below-ring\"].unique()))","446fae66":"stalkshape = data[\"stalk-shape\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in stalkshape:\n    edibles = len(data[(data[\"stalk-shape\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"stalk-shape\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"stalk-shape\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"stalk-shape\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nstalkshape_poisson_list = pd.DataFrame({\"stalk-shape\" : stalkshape , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(stalkshape))\nbar_width = 0.35\n\nrects1 = plt.bar(index, stalkshape_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, stalkshape_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Stalk Shape\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('e' 't'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","ac214e32":"stalkshape_poisson_list","b79f0e17":"stalkroot = data[\"stalk-root\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in stalkroot:\n    edibles = len(data[(data[\"stalk-root\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"stalk-root\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"stalk-root\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"stalk-root\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nstalkroot_poisson_list = pd.DataFrame({\"stalk-root\" : stalkroot , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(stalkroot))\nbar_width = 0.35\n\nrects1 = plt.bar(index, stalkroot_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, stalkroot_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Stalk Root\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('e' 'c' 'b' 'r' '?'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","6f451261":"stalkroot_poisson_list","c0863c91":"stalksurabri = data[\"stalk-surface-above-ring\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in stalksurabri:\n    edibles = len(data[(data[\"stalk-surface-above-ring\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"stalk-surface-above-ring\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"stalk-surface-above-ring\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"stalk-surface-above-ring\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nstalksurabri_poisson_list = pd.DataFrame({\"stalk-surface-above-ring\" : stalksurabri , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(stalksurabri))\nbar_width = 0.35\n\nrects1 = plt.bar(index, stalksurabri_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, stalksurabri_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Stalk Surface Above Ring\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('s' 'f' 'k' 'y'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","f9126428":"stalksurabri_poisson_list","bfc5f320":"stalksurberi = data[\"stalk-surface-below-ring\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in stalksurberi:\n    edibles = len(data[(data[\"stalk-surface-below-ring\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"stalk-surface-below-ring\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"stalk-surface-below-ring\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"stalk-surface-below-ring\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nstalksurberi_poisson_list = pd.DataFrame({\"stalk-surface-below-ring\" : stalksurberi , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(stalksurberi))\nbar_width = 0.35\n\nrects1 = plt.bar(index, stalksurberi_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, stalksurberi_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Stalk Surface Below Ring\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('s' 'f' 'k' 'y'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","e05779d2":"stalksurberi_poisson_list","b19db9a6":"stalkcoabri = data[\"stalk-color-above-ring\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in stalkcoabri:\n    edibles = len(data[(data[\"stalk-color-above-ring\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"stalk-color-above-ring\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"stalk-color-above-ring\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"stalk-color-above-ring\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nstalkcoabri_poisson_list = pd.DataFrame({\"stalk-color-above-ring\" : stalkcoabri , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(stalkcoabri))\nbar_width = 0.35\n\nrects1 = plt.bar(index, stalkcoabri_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, stalkcoabri_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Stalk Color Above Ring\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('w' 'g' 'p' 'n' 'b' 'e' 'o' 'c' 'y'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","80de313f":"stalkcoabri_poisson_list","28580459":"stalkcoberi = data[\"stalk-color-below-ring\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in stalkcoberi:\n    edibles = len(data[(data[\"stalk-color-below-ring\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"stalk-color-below-ring\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"stalk-color-below-ring\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"stalk-color-below-ring\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nstalkcoberi_poisson_list = pd.DataFrame({\"stalk-color-below-ring\" : stalkcoberi , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(stalkcoberi))\nbar_width = 0.35\n\nrects1 = plt.bar(index, stalkcoberi_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, stalkcoberi_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Stalk Color Below Ring\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('w' 'p' 'g' 'b' 'n' 'e' 'y' 'o' 'c'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","889020d1":"stalkcoberi_poisson_list","203c542e":"veil_list = [\"veil-type\" ,\"veil-color\"]\n\nprint(\"veil-type Variable Unique Values: {}\".format(data[\"veil-type\"].unique()))\nprint(\"veil-color Variable Unique Values: {}\".format(data[\"veil-color\"].unique()))","98fdc8da":"veiltype = data[\"veil-type\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in veiltype:\n    edibles = len(data[(data[\"veil-type\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"veil-type\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"veil-type\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"veil-type\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nveiltype_poisson_list = pd.DataFrame({\"veil-type\" : veiltype , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(veiltype))\nbar_width = 0.35\n\nrects1 = plt.bar(index, veiltype_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, veiltype_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Veil Type\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('p'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","15710714":"veiltype_poisson_list","53c9d97b":"veilcolor = data[\"veil-color\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in veilcolor:\n    edibles = len(data[(data[\"veil-color\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"veil-color\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"veil-color\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"veil-color\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nveilcolor_poisson_list = pd.DataFrame({\"veil-color\" : veilcolor , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(veilcolor))\nbar_width = 0.35\n\nrects1 = plt.bar(index, veilcolor_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, veilcolor_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Veil Color\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('w' 'n' 'o' 'y'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","cc5bfd29":"veilcolor_poisson_list","0f797c4f":"ring_list = [\"ring-number\",\"ring-type\"]\n\nprint(\"ring-number Variable Unique Values: {}\".format(data[\"ring-number\"].unique()))\nprint(\"ring-type Variable Unique Values: {}\".format(data[\"ring-type\"].unique()))","c1f31108":"ringnumber = data[\"ring-number\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in ringnumber:\n    edibles = len(data[(data[\"ring-number\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"ring-number\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"ring-number\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"ring-number\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nringnum_poisson_list = pd.DataFrame({\"ring-number\" : ringnumber , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(ringnumber))\nbar_width = 0.35\n\nrects1 = plt.bar(index, ringnum_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, ringnum_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Ring Number\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('o' 't' 'n'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","5c967d66":"ringnum_poisson_list","03c8d7be":"ringtype = data[\"ring-type\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in ringtype:\n    edibles = len(data[(data[\"ring-type\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"ring-type\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"ring-type\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"ring-type\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nringtype_poisson_list = pd.DataFrame({\"ring-type\" : ringtype , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(ringtype))\nbar_width = 0.35\n\nrects1 = plt.bar(index, ringtype_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, ringtype_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Ring Type\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('p' 'e' 'l' 'f' 'n'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","dfb7bc6a":"ringtype_poisson_list","50e1d2fc":"other_list =  [\"bruises\",\"odor\" , \"spore-print-color\" ,\"population\",\"habitat\"]\n\nprint(\"bruises Variable Unique Values: {}\".format(data[\"bruises\"].unique()))\nprint(\"odor Variable Unique Values: {}\".format(data[\"odor\"].unique()))\nprint(\"spore-print-color Variable Unique Values: {}\".format(data[\"spore-print-color\"].unique()))\nprint(\"population Variable Unique Values: {}\".format(data[\"population\"].unique()))\nprint(\"habitat Variable Unique Values: {}\".format(data[\"habitat\"].unique()))\n","b2a73211":"bruises = data[\"bruises\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in bruises:\n    edibles = len(data[(data[\"bruises\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"bruises\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"bruises\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"bruises\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nbruises_poisson_list = pd.DataFrame({\"bruises\" : bruises , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(bruises))\nbar_width = 0.35\n\nrects1 = plt.bar(index, bruises_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, bruises_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Bruises\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('t' 'f'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","6dfde067":"bruises_poisson_list","cd3b2961":"odor = data[\"odor\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in odor:\n    edibles = len(data[(data[\"odor\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"odor\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"odor\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"odor\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nodor_poisson_list = pd.DataFrame({\"odor\" : odor , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(odor))\nbar_width = 0.35\n\nrects1 = plt.bar(index, odor_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, odor_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Odor\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('p' 'a' 'l' 'n' 'f' 'c' 'y' 's' 'm'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","5aa42d41":"odor_poisson_list","b3bcb1f0":"sporeprintcolor = data[\"spore-print-color\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in sporeprintcolor:\n    edibles = len(data[(data[\"spore-print-color\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"spore-print-color\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"spore-print-color\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"spore-print-color\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nsporeprintcolor_poisson_list = pd.DataFrame({\"spore-print-color\" : sporeprintcolor , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(sporeprintcolor))\nbar_width = 0.35\n\nrects1 = plt.bar(index, sporeprintcolor_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, sporeprintcolor_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Spore Print Color\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('k' 'n' 'u' 'h' 'w' 'r' 'o' 'y' 'b'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","6f626852":"sporeprintcolor_poisson_list","154af4de":"population  = data[\"population\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in population :\n    edibles = len(data[(data[\"population\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"population\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"population\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"population\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\npopulation_poisson_list = pd.DataFrame({\"population\" : population  , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(population ))\nbar_width = 0.35\n\nrects1 = plt.bar(index, population_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, population_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Population\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('s' 'n' 'a' 'v' 'y' 'c'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","9c9ef5b1":"population_poisson_list","f8604067":"habitat  = data[\"habitat\"].unique()\n\nedible = []\npoisson = []\nort = []\nedible_ort = []\npoisson_ort = []\n\nfor i in habitat :\n    edibles = len(data[(data[\"habitat\"] == i ) & (data[\"class\"] == \"e\")])\n    poissons = len(data[(data[\"habitat\"] == i ) & (data[\"class\"] == \"p\")])\n    ort_pers =  len(data[(data[\"habitat\"] == i ) & (data[\"class\"] == \"e\")]) + len(data[(data[\"habitat\"] == i ) & (data[\"class\"] == \"p\")]) \n    edible_ort_pers = (edibles \/ ort_pers)*100\n    poisson_ort_pers = (poissons \/ ort_pers)*100\n\n    edible.append(edibles)\n    poisson.append(poissons)\n    edible_ort.append(edible_ort_pers)\n    poisson_ort.append(poisson_ort_pers)\n    \n\nhabitat_poisson_list = pd.DataFrame({\"habitat\" : habitat  , \"edible_count\" : edible ,\"edible_ort\" : edible_ort , \"poisson_count\" : poisson, \"poisson_ort\" : poisson_ort})\n\nfig, ax = plt.subplots()\nindex = np.arange(len(habitat))\nbar_width = 0.35\n\nrects1 = plt.bar(index, habitat_poisson_list[\"edible_count\"], bar_width,\ncolor='b',\nlabel='Edible')\n\nrects2 = plt.bar(index + bar_width, habitat_poisson_list[\"poisson_count\"], bar_width,\ncolor='g',\nlabel='Poisson')\n\n\nplt.xlabel(\"Habitat\")\nplt.ylabel('Poisson State')\nplt.xticks(index + bar_width, ('u' 'g' 'm' 'd' 'p' 'w' 'l'))\nplt.legend()\n\nplt.tight_layout()\nplt.show()","063edb46":"habitat_poisson_list","d81429e7":"data.isnull().sum()","eeb98d14":"data[\"stalk-root\"].unique()","ee3740ce":"stalkroot_poisson_list","7931b71e":"data[\"stalk-root\"].replace(\"?\" ,\"stalk_other\" ,inplace = True)","5da32706":"data[\"stalk-root\"].unique()","a8bdb5ae":"data[\"cap-shape\"].replace([\"s\" , \"c\"] , \"b\" , inplace = True)\ndata[\"cap-shape\"].unique()","225c4d3e":"data[\"cap-surface\"].replace(\"g\" , \"y\" , inplace = True)\ndata[\"cap-surface\"].unique()","96a4c5e2":"data[\"cap-color\"].replace([\"p\" ,\"b\" , \"u\" ,\"c\" , \"r\"] , \"cap_other\" , inplace = True)\ndata[\"cap-color\"].unique()","9f13e148":"data = pd.concat([data , pd.get_dummies(data[\"cap-shape\"])] , axis =1)\ndata = pd.concat([data , pd.get_dummies(data[\"cap-surface\"])] , axis =1)\ndata = pd.concat([data , pd.get_dummies(data[\"cap-color\"])] , axis =1)\n\ndata.drop(\"cap-shape\" , axis = 1 , inplace = True)\ndata.drop(\"cap-surface\" , axis = 1 , inplace = True)\ndata.drop(\"cap-color\" , axis = 1 , inplace = True)","61769b15":"data.drop(\"gill-attachment\" , axis = 1 , inplace = True)","6b3af84c":"data[\"gill-color\"] = data[\"gill-color\"].replace([\"e\" ,\"b\" , \"r\" ,\"y\" , \"o\"] , \"gill_other\")","56b3fbcb":"data[\"gill-color\"].unique()","193d0876":"data = pd.concat([data , pd.get_dummies(data[\"gill-spacing\"])] , axis =1)\ndata = pd.concat([data , pd.get_dummies(data[\"gill-size\"])] , axis =1)\ndata = pd.concat([data , pd.get_dummies(data[\"gill-color\"])] , axis =1)\n\ndata.drop(\"gill-spacing\" , axis = 1 , inplace = True)\ndata.drop(\"gill-size\" , axis = 1 , inplace = True)\ndata.drop(\"gill-color\" , axis = 1 , inplace = True)","c15d71cb":"data[\"stalk-surface-above-ring\"] = data[\"stalk-surface-above-ring\"].replace(\"y\" ,\"s\")\ndata[\"stalk-surface-above-ring\"].unique()","0424499e":"data[\"stalk-color-above-ring\"] = data[\"stalk-color-above-ring\"].replace([\"b\",\"c\",\"y\", \"e\"] ,\"stalk-color-above-other\")\ndata[\"stalk-color-above-ring\"].unique()","55c7bbd6":"data[\"stalk-color-below-ring\"] = data[\"stalk-color-below-ring\"].replace([\"c\",\"y\", \"e\"] ,\"stalk-color-below-other\")\ndata[\"stalk-color-below-ring\"].unique()","31e5b9ba":"data = pd.concat([data , pd.get_dummies(data[\"stalk-shape\"])] , axis =1)\ndata = pd.concat([data , pd.get_dummies(data[\"stalk-root\"])] , axis =1)\ndata = pd.concat([data , pd.get_dummies(data[\"stalk-surface-below-ring\"])] , axis =1)\ndata = pd.concat([data , pd.get_dummies(data[\"stalk-surface-above-ring\"])] , axis =1)\ndata = pd.concat([data , pd.get_dummies(data[\"stalk-color-above-ring\"])] , axis =1)\ndata = pd.concat([data , pd.get_dummies(data[\"stalk-color-below-ring\"])] , axis =1)\n\n\ndata.drop(\"stalk-shape\" , axis = 1 , inplace = True)\ndata.drop(\"stalk-root\" , axis = 1 , inplace = True)\ndata.drop(\"stalk-surface-below-ring\" , axis = 1 , inplace = True)\ndata.drop(\"stalk-surface-above-ring\" , axis = 1 , inplace = True)\ndata.drop(\"stalk-color-above-ring\" , axis = 1 , inplace = True)\ndata.drop(\"stalk-color-below-ring\" , axis = 1 , inplace = True)","a791bbf8":"data[\"veil-color\"] = data[\"veil-color\"].replace([\"n\" , \"o\" , \"y\"] , \"veil-color\")","f630b126":"data[\"veil-color\"].unique()","0d6ad341":"data = pd.concat([data , pd.get_dummies(data[\"veil-type\"])] , axis =1)\ndata = pd.concat([data , pd.get_dummies(data[\"veil-color\"])] , axis =1)\n\n\ndata.drop(\"veil-type\" , axis = 1 , inplace = True)\ndata.drop(\"veil-color\" , axis = 1 , inplace = True)","b3df5c95":"data[\"ring-number\"] = data[\"ring-number\"].replace(\"n\" , \"o\")\ndata[\"ring-number\"].unique()\n\ndata = pd.concat([data , pd.get_dummies(data[\"ring-number\"])] , axis =1)\ndata.drop(\"ring-number\" , axis = 1 , inplace = True)\n","0fc70fb6":"data[\"ring-type\"] = data[\"ring-type\"].replace([\"f\" , \"n\"] , \"p\")\ndata[\"ring-type\"].unique()\n\ndata = pd.concat([data , pd.get_dummies(data[\"ring-type\"])] , axis =1)\ndata.drop(\"ring-type\" , axis = 1 , inplace = True)\n","7ec73c03":"data[\"odor\"] = data[\"odor\"].replace(\"m\" , \"n\")\ndata[\"odor\"].unique()","f534aaeb":"data[\"spore-print-color\"] = data[\"spore-print-color\"].replace([\"u\",\"r\" ,\"o\", \"y\" ,\"b\"] , \"spor-other\")\ndata[\"spore-print-color\"].unique()","0c305324":"data = pd.concat([data , pd.get_dummies(data[\"odor\"])] , axis =1)\ndata.drop(\"odor\" , axis = 1 , inplace = True)\n\ndata = pd.concat([data , pd.get_dummies(data[\"bruises\"])] , axis =1)\ndata.drop(\"bruises\" , axis = 1 , inplace = True)\n\ndata = pd.concat([data , pd.get_dummies(data[\"spore-print-color\"])] , axis =1)\ndata.drop(\"spore-print-color\" , axis = 1 , inplace = True)\n\ndata = pd.concat([data , pd.get_dummies(data[\"population\"])] , axis =1)\ndata.drop(\"population\" , axis = 1 , inplace = True)\n\ndata = pd.concat([data , pd.get_dummies(data[\"habitat\"])] , axis =1)\ndata.drop(\"habitat\" , axis = 1 , inplace = True)","e1a364a8":"data[\"class\"] = data[\"class\"].replace(\"p\" ,0)\ndata[\"class\"] = data[\"class\"].replace(\"e\" ,1)\n\ndata[\"class\"].unique()","19e4aa45":"data","9e4d081a":"from sklearn.model_selection import train_test_split,StratifiedKFold, GridSearchCV","30018eff":"x = data.drop(\"class\" , axis = 1)\ny = data[\"class\"]","5172adc2":"x_train , x_test , y_train , y_test = train_test_split(x,y, test_size = 0.33 , random_state = 42)","9d0f3fa7":"print(\"x_train: {}\".format(x_train.shape))\nprint(\"x_test: {}\".format(x_test.shape))\nprint(\"y_train: {}\".format(y_train.shape))\nprint(\"y_test: {}\".format(y_test.shape))","5d6db15f":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.cluster import KMeans\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier","b014395c":"dt = DecisionTreeClassifier()\ndt.fit(x_train , y_train)\n\nprint(\"Decision Tree Test Accuracy: {}\".format(dt.score(x_test, y_test)))\n","179b807d":"score_list = []\nfor i in range(1,100):\n    rf = RandomForestClassifier(n_estimators = i , random_state = 42)\n    rf.fit(x_train , y_train)\n    score = rf.score(x_train , y_train)\n    score_list.append(score)\n    \n    \nplt.plot(range(1,100) , score_list)\nplt.show()","1d3ff3b2":"rf = RandomForestClassifier(n_estimators = 3 , random_state = 42)\nrf.fit(x_train , y_train)\n\nprint(\"Random Forest Test Accuracy {}\".format(rf.score(x_test , y_test)))","f5131108":"lr = LogisticRegression()\nlr.fit(x_train , y_train)\nprint(\"Logistic Regression Test Accuracy {}\".format(lr.score(x_test , y_test)))","08829183":"svm = SVC(random_state = 42)\nsvm.fit(x_train , y_train)\nprint(\"Support Vector Machine Test Accuracy {}\".format(svm.score(x_test , y_test)))","4ed6f6fa":"nb = GaussianNB()\nnb.fit(x_train , y_train)\nprint(\"Naive Bayes Test Accuracy {}\".format(nb.score(x_test , y_test)))","755cb820":"3.Cap-Color Feature Engineering","016f51d8":"* all columns in the data set are categorical data","882cfcd2":"<a id = \"8\"><\/a><br>\n### Cap - Class Anaylsis","152165f7":"\n* Let's combine the categories \"e\", \"b\", \"r\", \"y\", \"o\" in the \"gill_other\" category because they contain a low number of data.","7301db3e":"<a id = \"2\"><\/a><br>\n## Variable Description\n","4429020b":"<a id = \"9\"><\/a><br>\n### Gill - Class Anaylsis","5c34eb64":"* There is no missing data on the data set.\n* But \"?\" In the \"stalk-root\" column. We can fix the category.","f0035ea1":"1. gill-attachment Feature Engineering","4ca5169c":"<a id = \"7\"><\/a><br>\n## Modeling","85e5a8a1":"* There is a large amount of data in this category. Therefore, we cannot exclude this category from the data set. That's why \"?\" Let's write \"other\" instead","97dd2169":"* Most are convex capped mushrooms.\n* Looking at the edible-poisonous ratios, it is seen that the \"sunken\" (s) coded hat type is completely edible. The type of hat code \"bell\" (b) is also largely edible. However, the vast majority of hats with the code \"knobbed\" (k) are poisonous. The \"conical\" (c) type of hat is completely toxic. However, it would be wrong to reach a definite conclusion since we have 4 data with c code.","3053afe0":"* class: edible=e, poisonous=p \n* cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n* cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n* cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n* bruises: bruises=t,no=f\n* odor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n* gill-attachment: attached=a,descending=d,free=f,notched=n\n* gill-spacing: close=c,crowded=w,distant=d\n* gill-size: broad=b,narrow=n\n* gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n* stalk-shape: enlarging=e,tapering=t\n* stalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n* stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n* stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n* stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n* stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n* veil-type: partial=p,universal=u\n* veil-color: brown=n,orange=o,white=w,yellow=y\n* ring-number: none=n,one=o,two=t\n* ring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n* spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n* population: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n* habitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d","6c6df250":"2. gill-color Feature Engineering","3bef8754":"* Now let's convert all the data under the heading \"gill\" to numbers 1 and 0 by making \"one hot encoding\".","ff3fc485":"* When examining the surface of the fungus, the two possibilities are close to each other in scaly (y) and smooth (s) surface types. In the fibrous (f) type, it is edible with a rate of 67 percent. There is not enough data in 1 of them. This data alone cannot make a big contribution.","158ef8ba":"<a id = \"15\"><\/a><br>\n### Gill - Class Feature Engineering\n","3843514f":"* When we look at the color data, there is a distinctive distinction in the case of poison according to colors.","0046d2f6":"## \u0130ntroduction\n\nMushrooms have a great place in our kitchens. It can find a place for itself in many meals. However, despite this, hundreds of people are poisoned each year due to eating the wrong mushroom. This event often results in death. In this project, some properties of mushrooms will be examined and it will be tried to decide whether they are poisonous or edible.\n\n![](https:\/\/images.pexels.com\/photos\/53494\/mushroom-fungi-fungus-many-53494.jpeg?cs=srgb&dl=pexels-pixabay-53494.jpg&fm=jpg)\n\n### Content\n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n1. [Basic Data Analysis - Visualization](#3)\n    * [Cap - Class Analysis](#8)\n    * [Gill - Class Analysis](#9)\n    * [Stalk - Class Analysis](#10)\n    * [Veil - Class Analysis](#11)\n    * [Ring - Class Analysis](#12)\n    * [Other Feature Analysis](#13)\n1. [Missing Value](#5)\n1. [Feature Engineering](#6)\n    * [Cap -  Class Feature Engineering](#14)\n    * [Gill - Class Feature Engineering](#15)\n    * [Stalk -Class Feature Engineering](#16)\n    * [Veil - Class Feature Engineering](#17)\n    * [Ring - Class Feature Engineering](#18)\n    * [Other Feature - Class Feature Engineering](#19)\n    * [Class Feature Engineering](#20)\n    * [Train Test Split](#21)\n1. [Modeling](#7)\n    * [Decision Tree Algorithm](#22)\n    * [Random Forest Algorithm](#23)\n    * [Logistic Regression Algorithm](#24)\n    * [Support Vector Machine Algorithm](#25)\n    * [Naive Bayes Algorithm](#26)","2158c44c":"* Since there is a low number of data, let's combine the categories with \"p\", \"b\", \"u\", \"c\", \"r\", under \"other\"","29bf759e":"1.ring-number","f8b6adc3":"<a id = \"26\"><\/a><br>\n### 5.Naive Bayes Algorithm","60f86fc4":"<a id = \"12\"><\/a><br>\n### Ring - Class Analysis","3b894f41":"<a id = \"24\"><\/a><br>\n### 3.Logistic Regression","cb31763c":"* The missing title will be filled in the \"missing value\" section.","80c51508":"<a id = \"20\"><\/a><br>\n### Class Feature Engineering","c8703df5":"3.stalk-color-below-ring\n","2a2a7ddd":"<a id = \"13\"><\/a><br>\n### Other Feature Analysis","c2bbeee6":"<a id = \"22\"><\/a><br>\n### 1.Decision Tree Algorithm","028d745d":"Let's combine categories \"e\", \"c\", \"y\"into the \"stalk-color-below-other\" category because they contain a small number of data.","d05de9b2":"* This column will not be of much use so we can delete","551720b7":"* There are 2 categorical titles in the \"gill attachment\" data. \"free\" (f) and \"attached\" (a). Header f is almost evenly divided in the case of venom. Title a contains 18 pieces of data. For this reason, this column is not very useful for us.","26ccdf83":"<a id = \"14\"><\/a><br>\n### Cap -  Class Feature Engineering","4e27fea7":"Let's combine categories \"n\", \"o\", \"y\"into the \"veil-color\" category because they contain a small number of data.","66994a82":"* Since there is a small number of data, let's combine \"s\" and \"c\" coded categories with \"b\" code","ef98e662":"<a id = \"23\"><\/a><br>\n### 2.Random Forest Algorithm","ccdf5f71":"1. Cap-shape Feature Engineering","d466a59e":"<a id = \"17\"><\/a><br>\n### Veil - Class Feature Engineering\n\n","53208941":"2.ring-type","ec34cfe3":"1.odor","0dadf3a7":"<a id = \"10\"><\/a><br>\n### Stalk - Class Analysis","aa1d2361":"* When the stem shape is examined, there is a clear difference between the two categories.","c49cd703":"\n* Let's combine category \"y\" with category \"s\" since it contains a small number of data.","a7875bf5":"1.veil-color","092df7aa":"<a id = \"5\"><\/a><br>\n## Missing Value\n","9d369de6":"<a id = \"1\"><\/a><br>\n## Load And Check Data","481ab008":"<a id = \"11\"><\/a><br>\n### Veil - Class Analysis","6ba7b1df":"* Since there is a small number of data, let's combine the category with the code \"g\" with the category with the code \"y\".","32c36b40":"* Let's combine categories \"b\", \"c\", \"y\",\"e\"into the \"stalk-color-above-other\" category because they contain a small number of data.","971ba1c8":"<a id = \"18\"><\/a><br>\n### Ring - Class Feature Engineering\n","46e7cb1e":"2.stalk-color-above-ring\n","b81e1039":"bruises\nodor\nspore-print-color\npopulation\nhabitat\n","b8a699d3":"* There are 2 categorical titles in the \"gill spacing\" data. \"close\" (c) and \"crowded\" (w). this column can help in our algorithm","14243295":"<a id = \"19\"><\/a><br>\n### Other Feature - Class Feature Engineering","15f3e088":"2. Cap-Surface Feature Engineering","aa9b64bb":"Now let's convert all the data under the heading \"gill\" to numbers 1 and 0 by making \"one hot encoding\".","97d731d4":"<a id = \"21\"><\/a><br>\n\n### Train Test Split","88256ee8":"<a id = \"16\"><\/a><br>\n### Stalk -Class Feature Engineering\n","c3d15737":"<a id = \"25\"><\/a><br>\n### 4.Support Vector Machine","4da96f26":"<a id = \"3\"><\/a><br>\n## Basic Data Analysis - Visualization\n","bc641660":"1.stalk-surface-above-ring","693b7af0":"* Now let's convert all the data under the heading \"cap\" to numbers 1 and 0 by making \"one hot encoding\".","1c870472":"<a id = \"6\"><\/a><br>\n## Feature Engineering\n"}}