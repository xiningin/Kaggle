{"cell_type":{"e9034972":"code","f478a95b":"code","598d62f2":"code","f5ed01b6":"code","25809373":"code","8c6bb305":"code","71d7df2c":"code","6f4ff603":"code","623c9102":"code","ccd92b3b":"code","6e88d24b":"code","d9595838":"code","d292c5f6":"code","d80628e5":"code","e94889a0":"code","741577f0":"code","d6b9f406":"code","fa7f3c4b":"code","0f2d773d":"code","53abbc12":"code","588abfbf":"code","b5c819dd":"code","a5d61184":"code","ae3f4baf":"code","7d947021":"code","9ecbb43e":"code","f0a72675":"code","450a5f28":"code","cfc1e0c6":"code","df7cb59b":"code","da3a5ca0":"code","a8067b4b":"code","d10f8773":"code","ecf5468b":"code","82adfac9":"code","c45d5cb1":"code","170909b2":"code","b2704b15":"code","6ece45e3":"code","f1936805":"code","f5c20ea2":"code","62fce942":"code","18f18452":"code","be3b057e":"code","0ad25de1":"code","8a6cace2":"code","d74eb3f8":"code","aa78a0ba":"code","ec3160fa":"code","f25b0747":"code","8629e088":"code","3427e8f4":"code","a69ba445":"code","781c2380":"code","8169284f":"code","c0cbc0e3":"code","823a3dd8":"code","5dadf902":"code","5a382e25":"code","a54caf3f":"code","d09ba556":"code","bf39ca6e":"code","109c0a08":"code","4f25d95d":"code","0e157eff":"code","f8b55e81":"code","eb9ee8fd":"code","32b4cf84":"code","fe9ac2c5":"code","e0c0e6a1":"code","09d5135d":"code","ab0b7f96":"code","b5c0616a":"code","12aa860e":"code","94173c95":"code","25113505":"code","e9ad241a":"code","02af2a0b":"code","8af2477f":"code","9c917dab":"code","7bdb3eef":"code","5814a7f6":"markdown","9bf19681":"markdown","980700c9":"markdown","ce1180c1":"markdown","1c5b88eb":"markdown","ecc8f719":"markdown","3e378fe7":"markdown","0cc11c23":"markdown","be29c963":"markdown","8dee3b67":"markdown","b481b201":"markdown","bfab1ec8":"markdown","371454db":"markdown","b3a40f1b":"markdown","a3400321":"markdown","9452da46":"markdown","f7069baf":"markdown","0c121a09":"markdown","1640619c":"markdown","882ddf5e":"markdown","090ef599":"markdown","d0f843a6":"markdown","80dc8fe7":"markdown","da195e57":"markdown","e38939dd":"markdown","9175132b":"markdown","dfad866d":"markdown"},"source":{"e9034972":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f478a95b":"import seaborn as sns\nimport matplotlib.pyplot as plt","598d62f2":"data = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv')","f5ed01b6":"test_data = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv')","25809373":"data.head(n=10)","8c6bb305":"data.info()","71d7df2c":"data.isnull().sum()","6f4ff603":"data.describe()","623c9102":"data.shape","ccd92b3b":"data.columns","6e88d24b":"test_data.head()","d9595838":"test_data.shape","d292c5f6":"test_data.isnull().sum()","d80628e5":"plt.figure(figsize = (10,10))\nsns.heatmap(data.corr(), annot = True)\nplt.show()\n","e94889a0":"list(data.columns)\n","741577f0":"str(data['season'].value_counts()).split('\\n')\n #season - 1 = spring, 2 = summer, 3 = fall, 4 = winter","d6b9f406":"def get_values(data):\n    result = []\n    for col in list(data.columns):\n        result.append((str(data[col].value_counts())).split('\\n'))\n    return result\nget_values(data)","fa7f3c4b":"data.columns","0f2d773d":"def count_plot(columns):\n    for col in columns:\n        plt.figure(figsize=(8,6))\n        sns.countplot(x=col, data= data)\n        plt.show\ncount_plot(['season', 'holiday', 'workingday', 'weather'])","53abbc12":"data.columns","588abfbf":"def dist_plot(columns):\n    for col in columns:\n        plt.figure(figsize=(14,6))\n        sns.distplot(x = data[col]) # distribution\n        plt.show\ndist_plot(['temp', 'atemp', 'windspeed', 'humidity'])","b5c819dd":"def hist_plot(columns):\n    for col in columns:\n        plt.figure(figsize=(14,6))\n        sns.histplot(data[col]) # distribution\n        plt.show\nhist_plot(['casual', 'registered', 'count'])","a5d61184":"data['datetime'] = pd.to_datetime(data['datetime'])","ae3f4baf":"test_data.datetime = pd.to_datetime(test_data.datetime)","7d947021":"data['datetime']","9ecbb43e":"data['year'] = data['datetime'].apply(lambda x: x.year)\ndata['month'] = data['datetime'].apply(lambda x: x.month)\ndata['day'] = data['datetime'].apply(lambda x: x.day)\ndata['hour'] = data['datetime'].apply(lambda x: x.hour)\ndata['dayofweek'] = data['datetime'].dt.day_name()\n\ntest_data['year'] = test_data['datetime'].dt.year\ntest_data['month'] = test_data['datetime'].dt.month\ntest_data['day'] = test_data['datetime'].dt.day\ntest_data['hour'] = test_data['datetime'].dt.hour\ntest_data['dayofweek'] = test_data['datetime'].dt.day_name()\n","f0a72675":"data.head(5)","450a5f28":"test_data.head(5)","cfc1e0c6":"plt.figure(figsize=(16,8))\nsns.heatmap(data.corr(), annot=True)\nplt.show()","df7cb59b":"plt.figure(figsize=(16,8))\nsns.boxplot(x='dayofweek',y='count', data=data)\nplt.show()","da3a5ca0":"plt.figure(figsize=(16,8))\nsns.boxplot(x='season', y='count', data=data)\nplt.xlabel(\"Seasons (1= spring,  2= summer,  3= fall,  4= winter)\", fontsize=16)\nplt.show()","a8067b4b":"# month_sorted = ['January', 'February', 'March', 'April ',  'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\nplt.figure(figsize=(16,8))\nsns.boxplot(x='month',y='count', data=data)\nplt.show()","d10f8773":"plt.figure(figsize=(16,8))\nsns.boxplot(x='hour',y='count', data=data) # as we can see there is difference for each hour. We need to use it !\nplt.show()","ecf5468b":"plt.figure(figsize=(16,8))\nsns.boxplot(x='year',y='count', data=data) # bike were rented in 2012!\nplt.show()","82adfac9":"plt.figure(figsize=(16,8))\nplt.hist(data['count'][data['year'] == 2011], alpha=0.5, label='2011')\nplt.hist(data['count'][data['year'] == 2012], alpha=0.5, label='2012', color='red')\nplt.show()","c45d5cb1":"data.tail()","170909b2":"# we need to convert categorical data to numeric data.\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndata['dayofweek'] = le.fit_transform(data['dayofweek'])\ntest_data['dayofweek'] = le.transform(test_data['dayofweek'])","b2704b15":"data.tail()","6ece45e3":"df1=data.loc[:,['datetime','count']]\ndf1.set_index('datetime',inplace=True)\ndf1.head()","f1936805":"df1.plot(figsize=(12,5))\nplt.ylabel('Number of total rentals')\nplt.legend().set_visible(False)\nplt.tight_layout()\nplt.title('Total rentals Time Series')\nsns.despine(top=True)\nplt.show();","f5c20ea2":"Q1 = data.quantile(0.25)\nQ3 = data.quantile(0.75)\nIQR = Q3 - Q1\nprint(IQR)","62fce942":"data.set_index('datetime', inplace=True)","18f18452":"data['2011-01-19 23:00:00':]","be3b057e":"train_without_outliers =data[~((data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR))).any(axis=1)] ","0ad25de1":"train_without_outliers.dropna(inplace=True)","8a6cace2":"print(data.info())\nprint('*'* 80)\nprint(train_without_outliers.info())","d74eb3f8":"(train_without_outliers == 0).sum()","aa78a0ba":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='season',y='windspeed',data=train_without_outliers,palette='winter')\nplt.show()","ec3160fa":"train_without_outliers['windspeed'] = train_without_outliers['windspeed'].replace(0,np.NaN)\ntest_data['windspeed'] = test_data['windspeed'].replace(0,np.NaN) ","f25b0747":"(train_without_outliers == 0).sum()","8629e088":"train_without_outliers['windspeed'].isnull().sum()\n","3427e8f4":"train_without_outliers['windspeed'].fillna(method='bfill',inplace=True)\ntrain_without_outliers['windspeed'] = train_without_outliers['windspeed'].interpolate()\ntest_data['windspeed'] = test_data['windspeed'].interpolate()","a69ba445":"train_without_outliers['windspeed'].isnull().sum()\n","781c2380":"train_without_outliers.info()","8169284f":"from sklearn.model_selection import train_test_split\nX = train_without_outliers[['season', 'holiday', 'workingday', 'weather', 'temp', 'atemp',\n                            'humidity', 'year', 'month', 'day', 'hour', 'dayofweek','windspeed']]\ny = train_without_outliers['count']","c0cbc0e3":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1)","823a3dd8":"y_train","5dadf902":"from sklearn.preprocessing import MinMaxScaler\nsc_X = MinMaxScaler()\n\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","5a382e25":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train, y_train)","a54caf3f":"rf_prediction = rf.predict(X_test)\n","d09ba556":"from sklearn.metrics import mean_squared_error\nfrom sklearn import metrics\nprint('RMSE:',np.sqrt(metrics.mean_squared_error(y_test, rf_prediction)))","bf39ca6e":"plt.scatter(y_test,rf_prediction)\nplt.show()","109c0a08":"plt.figure(figsize=(16,8))\nplt.plot(rf_prediction[0:200],'r')\nplt.plot(y_test[0:200].values)\nplt.show()","4f25d95d":"from sklearn.tree import DecisionTreeRegressor\ndt_reg = DecisionTreeRegressor()\ndt_reg.fit(X_train, y_train)\ndt_prediction = dt_reg.predict(X_test)\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, dt_prediction)))","0e157eff":"plt.scatter(y_test,dt_prediction)\nplt.show()","f8b55e81":"test_data.head()","eb9ee8fd":"test_data[['season', 'holiday', 'workingday', 'weather', 'temp', 'atemp','humidity', 'year', 'month', 'day', 'hour', 'dayofweek','windspeed']] = sc_X.fit_transform(test_data[['season', 'holiday', 'workingday', 'weather', 'temp', 'atemp','humidity', 'year', 'month', 'day', 'hour', 'dayofweek','windspeed']])","32b4cf84":"test_pred= rf.predict(test_data[['season', 'holiday', 'workingday', 'weather', 'temp', 'atemp','humidity', 'year', 'month', 'day', 'hour', 'dayofweek','windspeed']])","fe9ac2c5":"test_pred","e0c0e6a1":"test_pred=test_pred.reshape(-1,1)","09d5135d":"test_pred = pd.DataFrame(test_pred, columns=['count'])","ab0b7f96":"df = pd.concat([test_data['datetime'], test_pred],axis=1)","b5c0616a":"df.head()","12aa860e":"df['count'] = df['count'].astype('int')","94173c95":"df.to_csv('submission1.csv' , index=False)","25113505":"# from sklearn.neighbors import KNeighborsClassifier\n# knn = KNeighborsClassifier(n_neighbors=1)\n# knn.fit(X_train, y_train)\n# knn_prediction = knn.predict(X_test)\n# print('RMSE:',np.sqrt(metrics.mean_squared_error(y_test, knn_prediction)))","e9ad241a":"# from sklearn import linear_model\n# reg = linear_model.Lasso(alpha=)\n# reg.fit(X_train, y_train)\n# reg_prediction = reg.predict(X_test)\n# print('RMSE:',np.sqrt(metrics.mean_squared_error(y_test, reg_prediction)))","02af2a0b":"# from sklearn.preprocessing import StandardScaler\n# scaler = StandardScaler()\n# X_train = scaler.fit_transform(X_train) # calculate mean and std and transform it \n# X_valid = scaler.transform(X_valid) ","8af2477f":"# from sklearn.linear_model import LogisticRegression\n# from sklearn.metrics import accuracy_score\n\n# classifier = LogisticRegression(max_iter = 250)\n# classifier.fit(X_train,y_train)\n# y_predict = classifier.predict(X_valid)\n# lr = accuracy_score(y_valid, y_predict)","9c917dab":"# lr","7bdb3eef":"# y_test_predict = classifier.predict(test_data)","5814a7f6":"### *Search Outliers* \n#### Now, let's find the outliers\n","9bf19681":"## 2.1 `training data`","980700c9":"- We can say that people prefer the morning and evening times for renting bike","ce1180c1":"- #### Box plot use the `IQR` method for finding display data and outliers.\n\nWikipedia Definition\nThe interquartile range (IQR), also called the midspread or middle 50%, or technically H-spread, is a measure of statistical dispersion, being equal to the difference between 75th and 25th percentiles, or between upper and lower quartiles, `IQR = Q3 \u2212 Q1` In other words, the IQR is the first quartile subtracted from the third quartile; these quartiles can be clearly seen on a box plot on the data. It is a measure of the dispersion similar to standard deviation or variance, but is much more robust against outliers.\n\n\n<img src=\"https:\/\/miro.medium.com\/max\/1838\/1*2c21SkzJMf3frPXPAR_gZA.png\" width=\"700\">\n\n- We will clear the outliers values.\n    - Okay, let's check!","1c5b88eb":"# 0. Importing the important libraries","ecc8f719":"# 5. Apply ML models ","3e378fe7":"- #### we can say of the graph above, people more rent bike on summer and fall.\n\n","0cc11c23":"> ### Now, We will use the test data.\n\n","be29c963":"- As we can see from above graph. This is positively(right) skewed data. Now we will look the box plot and outliers value.\n\n<img src=\"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/c\/cc\/Relationship_between_mean_and_median_under_different_skewness.png\" width=\"700\">","8dee3b67":"- I notice that there is a new relationship between `month` & `season`, so let's visualize it!","b481b201":"> #### We removed outliers data points.\n","bfab1ec8":"> #### Now, We repalced zero as NaN. We will fill NaN with interpolate. Interpolate is using fill NaN value for time series data.","371454db":"### 2.1.1 `Data Fields`\n- datetime - hourly date + timestamp  \n- season -  1 = spring, 2 = summer, 3 = fall, 4 = winter \n- holiday - whether the day is considered a holiday\n- workingday - whether the day is neither a weekend nor holiday\n- weather - \n   - 1: Clear, Few clouds, Partly cloudy, Partly cloudy\n   - 2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n   - 3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n   - 4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \n- temp - temperature in Celsius\n- atemp - \"feels like\" temperature in Celsius\n- humidity - relative humidity\n- windspeed - wind speed\n- casual - number of non-registered user rentals initiated\n- registered - number of registered user rentals initiated\n- count - number of total rentals","b3a40f1b":"## 5.1. Random Forest Regression\n","a3400321":"## 2.2 `testing data`","9452da46":"We are going to fill the row that wind speed is equal zero.\n\n","f7069baf":"## 5.2. Decision Tree Regression","0c121a09":"`Train test split`","1640619c":"# 3. Data preprocessing","882ddf5e":"The decision tree is a simple machine learning model for getting started with regression tasks.\n\nBackground A decision tree is a flow-chart-like structure, where each internal (non-leaf) node denotes a test on an attribute, each branch represents the outcome of a test, and each leaf (or terminal) node holds a class label. The topmost node in a tree is the root node. (see here for more details).","090ef599":"- #### Rented more bike in 2012 than 2011. ","d0f843a6":"## 1.1 import `training data`","80dc8fe7":"A Random Forest is an ensemble technique capable of performing both regression and classification tasks with the use of multiple decision trees and a technique called Bootstrap Aggregation, commonly known as bagging. What is bagging you may ask? Bagging, in the Random Forest method, involves training each decision tree on a different data sample where sampling is done with replacement.","da195e57":"# 2. Data Exploring\n","e38939dd":"# 1. Importing the data","9175132b":"- we also notice that people more rent bike on summer and fall months which are [ 'June', 'July', 'August', 'September', 'October' ]","dfad866d":"## 1.2 import `testing data`"}}