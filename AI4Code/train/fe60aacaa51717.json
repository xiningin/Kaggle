{"cell_type":{"ec56a183":"code","ccfac8ff":"code","e7360dec":"code","7739f1b5":"code","67bcc19d":"code","3a5cc2c4":"code","55569f5d":"code","eddd710b":"code","fbf1f0e1":"markdown","24884277":"markdown","98218f15":"markdown","f37b8043":"markdown","bb5c5f7d":"markdown","77224c85":"markdown","5645b8cc":"markdown","9c703b95":"markdown"},"source":{"ec56a183":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\n\nimport seaborn as sns\nsns.set(style='white', context='notebook', palette='deep')\nfrom PIL import Image\n\nfrom keras.utils.np_utils import to_categorical \nfrom keras.models import Sequential\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\n\n\n\n","ccfac8ff":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\nY_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1).values\nX_test = test.values","e7360dec":"print('X_train\\'s shape: ' + str(X_train.shape))\nprint('Y_train\\'s shape: ' + str(Y_train.shape))\nplt.figure(figsize=(20,5))\nfor i in range(10):\n    img = plt.subplot(2, 5, i + 1)\n    img.set_title('label:' + str(Y_train[i]))\n    plt.imshow(X_train[i].reshape((28, 28)))\n\n","7739f1b5":"#Getting the frequency of each label    \nprint(Y_train.value_counts())\nsns.countplot(Y_train)","67bcc19d":"model = Sequential()\nmodel.add(Conv2D(128, (5,5), padding='same', input_shape=(28,28,1), data_format='channels_last', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(128, (5,5), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(256, (3,3), padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(256, (3,3), padding='valid', activation='relu'))\nmodel.add(Dropout(0.2))\n\n# Output layer\nmodel.add(Flatten())\nmodel.add(Dense(units=10, activation='softmax'))\n\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\n\nprint('The model is successfully created.')","3a5cc2c4":"from keras.utils import to_categorical\n\nY_train_categorical = to_categorical(Y_train, num_classes=10)\n\nX = X_train.reshape(X_train.shape[0],28,28,1) \nX = X \/ 255 #normalization\n\n\nprint(X.shape)\nprint(Y_train_categorical.shape)\n\nmodel.fit(x=X, y=Y_train_categorical, batch_size=1000, epochs=32, verbose=1, validation_split=0.2)","55569f5d":"(loss_train, accuracy_train) = model.evaluate(X, Y_train_categorical)\nprint('Traing Performance:')\nprint('Accuracy : ' + str(accuracy_train*100) )\nprint('Loss : ' + str(loss_train))","eddd710b":"result = model.predict(X_test.reshape(X_test.shape[0],28,28,1) )\nresult = np.argmax(result,axis = 1)\nresult = pd.Series(result,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),result],axis = 1)\nsubmission.to_csv(\"mnist_predictions_cnn_model.csv\",index=False)\nprint(submission.head(15))","fbf1f0e1":"## Testing the Model","24884277":"## Model Evaluation","98218f15":"## Data Exploration\nHere we're trying to explore our dataset and visualize it to gain more knowledge about it.","f37b8043":"## Fitting the Model","bb5c5f7d":"## Importing Packages\nLet's start off by importing some important packages that will ease our work.","77224c85":"## Loading the Dataset\nHere we're going to read our dataset using pandas, the dataset is divided to a training subset in ***train.csv*** and a test subset in ***test.csv***  .","5645b8cc":"## Building the Model","9c703b95":"# MNIST CNN Classifier\u00b6\nIn this notebook we're trying to build a convolutional neural network for the purpose of classifying the MNIST dataset."}}