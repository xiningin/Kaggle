{"cell_type":{"fe59ed68":"code","3bb87e12":"code","84341dbe":"code","22d49203":"code","5ecaa83c":"code","570589a6":"code","b9715839":"code","9b0469ba":"code","aef823cb":"code","694a8501":"code","7c9b8cb2":"code","c330adf0":"code","80c421d6":"code","0a1e09bd":"code","499f8468":"code","1dc4e001":"code","645613c4":"code","f42bd960":"code","d5c7cbed":"markdown","05dfda06":"markdown","56c0463a":"markdown","b8a4978c":"markdown"},"source":{"fe59ed68":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3bb87e12":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D","84341dbe":"import plotly.graph_objs as go","22d49203":"df = pd.read_csv('\/kaggle\/input\/agricultural-raw-material-prices-19902020\/agricultural_raw_material.csv')","5ecaa83c":"df","570589a6":"df.columns","b9715839":"percentages=['Coarse wool price % Change',\n       'Copra price % Change', \n       'Cotton price % Change', 'Fine wool price % Change',\n       'Hard log price % Change', \n       'Hard sawnwood price % Change', 'Hide price % change',\n       'Plywood price % Change', \n       'Rubber price % Change', 'Softlog price % Change',\n       'Soft sawnwood price % Change',\n       'Wood pulp price % Change']","9b0469ba":"corrmat = df.corr()\nfig = plt.figure(figsize = (12, 9))\n\nsns.heatmap(corrmat, vmax = .8, square = True, annot = True)\nplt.show()","aef823cb":"df=df.replace('-', '0')","694a8501":"for i in percentages:\n    df[i]=df[i].str.replace('%', '')\n    df[i]=df[i].astype('float')","7c9b8cb2":"df.describe()","c330adf0":"prices=['Coarse wool Price',\n       'Copra Price', 'Cotton Price',\n       'Fine wool Price',\n       'Hard log Price', 'Hard sawnwood Price',\n       'Hide Price', \n       'Plywood Price', 'Rubber Price',\n       'Softlog Price', \n       'Soft sawnwood Price', \n       'Wood pulp Price']","80c421d6":"colors=['#b84949', '#ff6f00', '#ffbb00', '#9dff00', '#329906', '#439c55', '#67c79e', '#00a1db', '#002254', '#5313c2', '#c40fdb', '#e354aa']","0a1e09bd":"#univariate analysis\nimport plotly.express as px\nx=0\nfor i in prices:\n    #df = px.data.tips()\n    fig = px.histogram(df, x=i, nbins=100, opacity=0.8,\n                   color_discrete_sequence=[colors[x]])\n    fig.show()\n    x+=1","499f8468":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nx=0\nfor i in prices:\n    plot_data = [\n        go.Scatter(\n            x=df['Month'],\n            y=df[i],\n            name=i,\n            marker = dict(color = colors[x])\n            #x_axis=\"OTI\",\n            #y_axis=\"time\",\n        )\n    ]\n    plot_layout = go.Layout(\n            title=i,\n            yaxis_title=i,\n            xaxis_title='Month'\n        )\n    fig = go.Figure(data=plot_data, layout=plot_layout)\n    pyoff.iplot(fig)\n    x+=1","1dc4e001":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nx=0\nfor i in percentages:\n    plot_data = [\n        go.Scatter(\n            x=df['Month'],\n            y=df[i],\n            name=i,\n            marker = dict(color = colors[x])\n            #x_axis=\"OTI\",\n            #y_axis=\"time\",\n        )\n    ]\n    plot_layout = go.Layout(\n            title=i,\n            yaxis_title=i,\n            xaxis_title='Month'\n        )\n    fig = go.Figure(data=plot_data, layout=plot_layout)\n    pyoff.iplot(fig)\n    x+=1","645613c4":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nx=0\nplot_data=[]\nfor i in prices:\n    item= go.Scatter(\n            x=df['Month'],\n            y=df[i],\n            name=i,\n            marker = dict(color = colors[x])\n            #x_axis=\"OTI\",\n            #y_axis=\"time\",\n        )\n    plot_data.append(item)\n    x+=1\nplot_layout = go.Layout(\n        title='Overlapped Prices',\n        #yaxis_title=i,\n        xaxis_title='Month'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","f42bd960":"import plotly.graph_objs as go\nimport plotly.offline as pyoff\nx=0\nplot_data=[]\nfor i in percentages:\n    item= go.Scatter(\n            x=df['Month'],\n            y=df[i],\n            name=i,\n            marker = dict(color = colors[x])\n            #x_axis=\"OTI\",\n            #y_axis=\"time\",\n        )\n    plot_data.append(item)\n    x+=1\nplot_layout = go.Layout(\n        title='Overlapped Price % change',\n        #yaxis_title=i,\n        xaxis_title='Month'\n    )\nfig = go.Figure(data=plot_data, layout=plot_layout)\npyoff.iplot(fig)","d5c7cbed":"Correlation Matrix","05dfda06":"Overlapped Graphs for Comparision","56c0463a":"Univariate Analysis","b8a4978c":"Time Series Visualization"}}