{"cell_type":{"518bb41f":"code","4800e92c":"code","2ff7530b":"code","aeefff99":"code","1d643fa9":"code","74f074f1":"code","71c74ac8":"code","626a28d1":"code","76a8a6d6":"code","582910f7":"code","c951fe95":"code","6fee03d1":"code","0288d29a":"code","dfc8bb1f":"code","6693fc82":"code","f5232eb8":"code","a9ecc851":"code","42e1254a":"code","594b4e01":"code","48eddd7e":"code","1b950ef3":"code","fae30a09":"code","7e5b2aaf":"code","9af9b58f":"code","ab642ca2":"code","ec7611e2":"code","6c8b7f70":"code","71a9addc":"code","94d545f3":"code","cc9539d5":"code","0012f3e4":"code","7baad28c":"code","f16d5364":"code","99ad1a93":"code","d7428ca1":"code","b699bb45":"code","3327a466":"code","1398c06b":"code","03ccbfa9":"code","39a22d39":"code","6321174a":"code","e239e80d":"code","f3465b92":"code","66a47f08":"code","02a6d9eb":"code","2574201f":"code","84fc4e34":"code","4bc221ac":"code","7ab9ddbc":"code","9274159d":"code","fdc3a55b":"code","af76e982":"code","2b593bbf":"code","1ebaa93c":"code","5dda4ad1":"code","346094d4":"code","731d35dc":"code","a984577b":"code","871abffb":"code","989e37dd":"code","46942fe2":"code","9769ca15":"code","d9910d57":"code","b1b46aed":"code","a15f19a9":"code","0eefc973":"code","5b652542":"code","b84933fd":"code","ceba4ee2":"code","0957f44b":"code","52680486":"code","28e3db3e":"code","6d568f5b":"code","095d5540":"code","f1a59a50":"code","a03dd0e1":"code","84bcf84f":"code","de2dc6b8":"code","3dc1eeb2":"code","17145c0f":"code","997d7c61":"code","51e3c32d":"code","89373cb0":"code","6f9900c7":"code","f4368142":"code","0a88ecee":"code","fc412846":"code","41cec059":"code","7eb257f6":"code","98a1d329":"code","a928b047":"code","b12e4758":"markdown","7f794a77":"markdown","81d76633":"markdown","dfba89fe":"markdown","d6c2cef3":"markdown","c318a850":"markdown","a8a1ae10":"markdown","a6eaac8d":"markdown","854a3e4a":"markdown","2be63fed":"markdown"},"source":{"518bb41f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4800e92c":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sc\nimport pandas_profiling   #need to install using anaconda prompt (pip install pandas_profiling)\n%pylab inline","2ff7530b":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport sklearn.metrics as metrics\nimport statsmodels.formula.api as sm","aeefff99":"import numpy as np\nimport pandas as pd\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport math","1d643fa9":"import matplotlib.pyplot as plt\nfrom sklearn import datasets\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression","74f074f1":"from collections import defaultdict\nimport time\nimport gc\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets.samples_generator import make_regression\nfrom sklearn.ensemble.forest import RandomForestRegressor\nfrom sklearn.linear_model.ridge import Ridge\nfrom sklearn.linear_model.stochastic_gradient import SGDRegressor\nfrom sklearn.svm.classes import SVR\nfrom sklearn.utils import shuffle","71c74ac8":"monthly_variables = pd.read_csv(\"\/kaggle\/input\/housing-in-london\/housing_in_london_monthly_variables.csv\")\nmonthly_variables","626a28d1":"monthly_variables.head()","76a8a6d6":"monthly_variables.tail()","582910f7":"yearly_variable = pd.read_csv(\"\/kaggle\/input\/housing-in-london\/housing_in_london_yearly_variables.csv\")\nyearly_variable","c951fe95":"yearly_variable.head()","6fee03d1":"yearly_variable.tail()","0288d29a":"yearly_variable.info()","dfc8bb1f":"yearly_variable.dtypes","6693fc82":"yearly_variable.describe()","f5232eb8":"yearly_variable.describe(include = 'all')","a9ecc851":"monthly_variables.info()","42e1254a":"monthly_variables.dtypes","594b4e01":"monthly_variables.describe()","48eddd7e":"monthly_variables.describe(include = 'all')","1b950ef3":"monthly_variables.drop_duplicates(subset=['date']) ","fae30a09":"comb_df = yearly_variable.merge(monthly_variables.drop_duplicates(subset=['date']), how='left')\ncomb_df","7e5b2aaf":"numeric_var_names=[key for key in dict(comb_df.dtypes) if dict(comb_df.dtypes)[key] in ['float64', 'int64', 'float32', 'int32']]\ncat_var_names=[key for key in dict(comb_df.dtypes) if dict(comb_df.dtypes)[key] in ['object']]\nprint(numeric_var_names)\nprint(cat_var_names)","9af9b58f":"comb_df_num = comb_df[numeric_var_names]","ab642ca2":"comb_df_cat = comb_df[cat_var_names]","ec7611e2":"# Use a general function that returns multiple values\ndef var_summary(x):\n    return pd.Series([x.count(), x.isnull().sum(), x.sum(), x.mean(), x.median(),  x.std(), x.var(), x.min(), x.dropna().quantile(0.01), x.dropna().quantile(0.05),x.dropna().quantile(0.10),x.dropna().quantile(0.25),x.dropna().quantile(0.50),x.dropna().quantile(0.75), x.dropna().quantile(0.90),x.dropna().quantile(0.95), x.dropna().quantile(0.99),x.max()], \n                  index=['N', 'NMISS', 'SUM', 'MEAN','MEDIAN', 'STD', 'VAR', 'MIN', 'P1' , 'P5' ,'P10' ,'P25' ,'P50' ,'P75' ,'P90' ,'P95' ,'P99' ,'MAX'])\n\nnum_summary = comb_df_num.apply(lambda x: var_summary(x)).T","6c8b7f70":"num_summary","71a9addc":"import numpy as np\nfor col in comb_df_num.columns:\n    percentiles = comb_df_num[col].quantile([0.01,0.99]).values\n    comb_df_num[col] = np.clip(comb_df_num[col], percentiles[0], percentiles[1])","94d545f3":"#Handling missings - Method2\ndef Missing_imputation(x):\n    x = x.fillna(x.median())\n    return x\n\ncomb_df_num = comb_df_num.apply(lambda x: Missing_imputation(x))","cc9539d5":"#Handling missings - Method2\ndef Cat_Missing_imputation(x):\n    x = x.fillna(x.mode())\n    return x\n\ncomb_df_cat = comb_df_cat.apply(lambda x: Cat_Missing_imputation(x))","0012f3e4":"def create_dummies(df, colname):\n    col_dummies = pd.get_dummies(df[colname], prefix=colname, drop_first=True)\n    df = pd.concat([df, col_dummies],axis=1)\n    df.drop(colname, axis = 1, inplace = True)\n    return df\n\nfor c_feature in comb_df_cat.columns:\n    comb_df_cat[c_feature] = comb_df_cat[c_feature].astype('category')\n    comb_df_cat = create_dummies(comb_df_cat , c_feature )","7baad28c":"comb_df_cat.head().T","f16d5364":"comb_df_num.head().T","99ad1a93":"comb_df_new = pd.concat([comb_df_num, comb_df_cat], axis=1)\ncomb_df_new.head()","d7428ca1":"comb_df_new[\"ln_average_price\"]= np.log(comb_df_new[\"average_price\"])\ncomb_df_new.head()","b699bb45":"np.log(comb_df_new.ln_average_price).hist()","3327a466":"features = comb_df_new[comb_df_new.columns.difference( ['ln_average_price'] )]\ntarget = comb_df_new['ln_average_price']","1398c06b":"features.columns","03ccbfa9":"features.shape","39a22d39":"target","6321174a":"from sklearn.feature_selection import RFE","e239e80d":"from sklearn.linear_model import LinearRegression","f3465b92":"import itertools","66a47f08":"features.shape","02a6d9eb":"lm = LinearRegression()","2574201f":"# create the RFE model and select 10 attributes\nrfe = RFE(lm, n_features_to_select=60)\nrfe = rfe.fit(features,target)","84fc4e34":"rfe.get_support()","4bc221ac":"from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nimport itertools\nlm = LinearRegression()\n# create the RFE model and select 10 attributes\nrfe = RFE(lm, n_features_to_select=60)\nrfe = rfe.fit(features,target)","7ab9ddbc":"rfe.get_support()","9274159d":"# summarize the selection of the attributes\nfeature_map = [(i, v) for i, v in itertools.zip_longest(features.columns, rfe.get_support())]","fdc3a55b":"feature_map","af76e982":"#Alternative of capturing the important variables\nRFE_features=features.columns[rfe.get_support()]","2b593bbf":"RFE_features","1ebaa93c":"features1 = features[RFE_features]","5dda4ad1":"features1.head()","346094d4":"# Feature Selection based on importance\nfrom sklearn.feature_selection import f_regression\nF_values, p_values  = f_regression(features1, target)","731d35dc":"import itertools\nf_reg_results = [(i, v, z) for i, v, z in itertools.zip_longest(features1.columns, F_values,  ['%.3f' % p for p in p_values])]","a984577b":"f_reg_results=pd.DataFrame(f_reg_results, columns=['Variable','F_Value','P_Value'])","871abffb":"f_reg_results.sort_values(by=['F_Value'],ascending = False)","989e37dd":"f_reg_results.P_Value = pd.to_numeric(f_reg_results.P_Value)","46942fe2":"f_reg_results_new=f_reg_results[f_reg_results.P_Value<=0.2]","9769ca15":"f_reg_results_new","d9910d57":"f_reg_results_new.info()","b1b46aed":"from sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2,f_classif,mutual_info_classif","a15f19a9":"features = comb_df_new[comb_df_new.columns.difference(['ln_average_price'])]\ntarget = comb_df_new['ln_average_price']\nfeatures_new = SelectKBest(f_classif, k=30).fit(features, target )","0eefc973":"features_new.get_support()","5b652542":"features_new.scores_","b84933fd":"# summarize the selection of the attributes\nimport itertools\nfeature_map = [(i, v) for i, v in itertools.zip_longest(features.columns, features_new.get_support())]\nfeature_map\n#Alternative of capturing the important variables\nKBest_features=features.columns[features_new.get_support()]\nselected_features_from_KBest = features[KBest_features]","ceba4ee2":"KBest_features","0957f44b":"list_vars1 = list(f_reg_results_new.Variable)\nlist_vars1","52680486":"all_columns = \"+\".join(list_vars1)\nmy_formula = \"ln_average_price~\" + all_columns\nprint(my_formula)","28e3db3e":"from statsmodels.formula.api import ols\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nimport statsmodels.api as sm\nimport statsmodels.formula.api as sm","6d568f5b":"model = sm.ols('ln_average_price~mean_salary_48922+mean_salary_52203+mean_salary_56450+mean_salary_62819+mean_salary_64272+mean_salary_66628+mean_salary_74004+mean_salary_77754+mean_salary_79489+mean_salary_80655+mean_salary_80769+mean_salary_82808+mean_salary_82973+mean_salary_83403+mean_salary_85886+mean_salary_86987+mean_salary_88342+mean_salary_90028+mean_salary_90842+recycling_pct_34',data = comb_df_new)","095d5540":"model = model.fit()","f1a59a50":"model.summary()","a03dd0e1":"print(model.summary())","84bcf84f":"my_formula ='ln_average_price~mean_salary_48922+mean_salary_52203+mean_salary_56450+mean_salary_62819+mean_salary_64272+mean_salary_66628+mean_salary_74004+mean_salary_77754+mean_salary_79489+mean_salary_80655+mean_salary_80769+mean_salary_82808+mean_salary_82973+mean_salary_83403+mean_salary_85886+mean_salary_86987+mean_salary_88342+mean_salary_90028+mean_salary_90842+recycling_pct_34'\nmy_formula","de2dc6b8":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom patsy import dmatrices","3dc1eeb2":"# get y and X dataframes based on this regression\ny, X = dmatrices(my_formula,comb_df_new,return_type='dataframe')","17145c0f":"# For each X, calculate VIF and save in dataframe\nvif = pd.DataFrame()\nvif[\"VIF Factor\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif[\"features\"] = X.columns\nvif.round(1)","997d7c61":"train, test = train_test_split(comb_df_new, test_size = 0.3, random_state = 123456)","51e3c32d":"print(len(train))\nprint(len(test))","89373cb0":"import statsmodels.formula.api as smf","6f9900c7":"my_formula ='ln_average_price~mean_salary_48922+mean_salary_52203+mean_salary_56450+mean_salary_62819+mean_salary_64272+mean_salary_66628+mean_salary_74004+mean_salary_77754+mean_salary_79489+mean_salary_80655+mean_salary_80769+mean_salary_82808+mean_salary_82973+mean_salary_83403+mean_salary_85886+mean_salary_86987+mean_salary_88342+mean_salary_90028+mean_salary_90842'\nmy_formula","f4368142":"model = smf.ols(my_formula, data=train).fit()\nprint(model.summary())","0a88ecee":"model.summary()","fc412846":"train['pred'] = pd.DataFrame(model.predict(train))","41cec059":"train.head()","7eb257f6":"test['pred'] = pd.DataFrame(model.predict(test))\ntest.head()","98a1d329":"# calculate these metrics by hand!\nfrom sklearn import metrics\nimport numpy as np\nimport scipy.stats as stats","a928b047":"#Train Data\nMAPE_train = np.mean(np.abs(train.ln_average_price - train.pred)\/train.ln_average_price)\nprint(MAPE_train)\n\nRMSE_train = metrics.mean_squared_error(train.ln_average_price,train.pred)\nprint(RMSE_train)\n\nCorr_train = stats.stats.pearsonr(train.ln_average_price, train.pred)\nprint(Corr_train)\n\n#Test Data\nMAPE_test = np.mean(np.abs(test.ln_average_price - test.pred)\/test.ln_average_price)\nprint(MAPE_test)\n\nRMSE_test = metrics.mean_squared_error(test.ln_average_price, test.pred)\nprint(RMSE_test)\n\nCorr_test = stats.stats.pearsonr(test.ln_average_price, test.pred)\nprint(Corr_test)","b12e4758":"Recursive Feature Elimination","7f794a77":"Outlier treatment","81d76633":"**Assumptions of Regression**","dfba89fe":"**Variable reduction using Select K-Best technique**","d6c2cef3":"If you find this kernal useful,informative and learn something from this kernal,kindly upvote this notebook.","c318a850":"In this notebook we are going to discuss about\n\n* Data preparation \n* Feature enginnering\n* Variable reduction using RFE,selected K best,VIF\n* Model building\n* Predicting the dependent variable here it is average price of house\n* Calculating metrics like MAPE,RMSE\n","a8a1ae10":"**F-Regression**","a6eaac8d":"**Split the data into train & test\n**","854a3e4a":"**Modeling**","2be63fed":"**Variance Inflation Factor (VIF)**"}}