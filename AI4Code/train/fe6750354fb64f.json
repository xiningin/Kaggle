{"cell_type":{"56514194":"code","a898ddaf":"code","10b326eb":"code","0813a7a7":"code","1b07d552":"code","a478e309":"code","c322a8d8":"code","2c2095c3":"code","3ca18e35":"code","fd8f5061":"code","abfad65e":"code","5757b8c6":"code","56fa3194":"code","95922679":"code","9a8a097c":"code","22adf730":"code","c2c27d65":"code","9cb5ef77":"code","aebbd751":"code","e9df8366":"code","e351febc":"code","2923e719":"code","a9153eb6":"code","2112993c":"code","049561f0":"code","7c3dab0d":"code","bd9e8071":"code","9a930d98":"code","909893c6":"code","51648497":"code","f1298928":"code","a3f853ea":"code","97121e74":"code","6096e436":"code","149a6a03":"code","be460390":"code","06aeffff":"code","191ede17":"code","311449d7":"code","5fc668f2":"code","d617fd08":"code","ddfa1a60":"code","1324429d":"code","619db646":"code","4d5ef7fc":"code","2007afd8":"code","7939b430":"code","4e2dd739":"code","2c40d918":"code","d9ac2dbd":"markdown","487a6c15":"markdown","2d899363":"markdown","830758dc":"markdown","671de0f5":"markdown","645d6774":"markdown","a2120c16":"markdown","90db3046":"markdown","5c37e4b4":"markdown","5ee544b3":"markdown","bdc3f421":"markdown","f5ded30f":"markdown","c6598d83":"markdown","43df515b":"markdown","f0938bc9":"markdown","b38b5864":"markdown","bd548e0b":"markdown","8f41342f":"markdown","d9d75b60":"markdown","e412aec5":"markdown","bf2edb11":"markdown"},"source":{"56514194":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a898ddaf":"# Importing libraries\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport plotly.graph_objects as go\nimport plotly.express as px","10b326eb":"from IPython.core.display import HTML\nHTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/2557727\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/2557727\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","0813a7a7":"data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndata.head()","1b07d552":"data.info() #Checking for Null and DataTypes","a478e309":"data['ObservationDate'] = pd.to_datetime(data['ObservationDate']) #Convertong Observation Date into Datetime format","c322a8d8":"data_india = data[data['Country\/Region'] == 'India'] #Extracting Indian Data\ndata_india = data_india.groupby([\"ObservationDate\"]).agg({\"Confirmed\":'sum',\"Recovered\":'sum',\"Deaths\":'sum'}) #Aggregating Attributes\ndata_india[\"WeekofYear\"]=data_india.index.weekofyear #Adding new WEEK Column\ndata_india[\"Days Since\"]=(data_india.index-data_india.index[0])\ndata_india[\"Days Since\"]=data_india[\"Days Since\"].dt.days\ndata_india[\"Active\"] = data_india[\"Confirmed\"] - data_india[\"Recovered\"] - data_india[\"Deaths\"]\ndata_india = data_india.reset_index()\ndata_india.head()","2c2095c3":"fig = px.bar(data_india, x='ObservationDate', y='Confirmed',color='Confirmed', height=500)\nfig.update_layout(title='Confirmed Cases in India',\n                 xaxis_title=\"Date\",\n                 yaxis_title=\"Confirmed Cases\")","3ca18e35":"print(\"Number of Confirmed Cases as of \",data_india[\"ObservationDate\"].iloc[-1], \" is \",data_india[\"Confirmed\"].iloc[-1])","fd8f5061":"fig = px.bar(data_india, x='ObservationDate', y='Deaths',color='Deaths',template='ggplot2', height=500)\nfig.update_layout(title='Deaths in India',\n                 xaxis_title=\"Date\",\n                 yaxis_title=\"Deaths\")","abfad65e":"print(\"Number of Confirmed Deaths as of \",data_india[\"ObservationDate\"].iloc[-1], \" is \",data_india[\"Deaths\"].iloc[-1])","5757b8c6":"fig = px.bar(data_india, x='ObservationDate', y='Recovered',color='Recovered',template='plotly_white', height=500)\nfig.update_layout(title='Recovered Cases in India',\n                 xaxis_title=\"Date\",\n                 yaxis_title=\"Recovered Cases\")","56fa3194":"print(\"Number of Recovered Cases as of \",data_india[\"ObservationDate\"].iloc[-1], \" is \",data_india[\"Recovered\"].iloc[-1])","95922679":"fig = px.bar(data_india, x='ObservationDate', y='Active',color='Active',template='plotly_white', height=500)\nfig.update_layout(title='Active Cases in India',\n                 xaxis_title=\"Date\",\n                 yaxis_title=\"Active Cases\")","9a8a097c":"print(\"Number of Active Cases as of \",data_india[\"ObservationDate\"].iloc[-1], \" is \",data_india[\"Active\"].iloc[-1])","22adf730":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=data_india['ObservationDate'], y=data_india[\"Confirmed\"],\n                    mode='lines+markers',\n                    name='Confirmed Cases'))\nfig.add_trace(go.Scatter(x=data_india['ObservationDate'], y=data_india[\"Recovered\"],\n                    mode='lines+markers',\n                    name='Recovered Cases'))\nfig.add_trace(go.Scatter(x=data_india['ObservationDate'], y=data_india[\"Deaths\"],\n                    mode='lines+markers',\n                    name='Death Cases'))\n#fig.update_layout(title=\"Confirmed vs Recovered vs Deaths due to CORONA in India\",\n #                xaxis_title=\"Date\",yaxis_title=\"Number of Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","c2c27d65":"cases = 1\ndouble_days=[]\nC=[]\nwhile(1):\n    double_days.append(int(data_india[data_india[\"Confirmed\"]<=cases].iloc[[-1]][\"Days Since\"]))\n    C.append(cases)\n    cases=cases*2\n    if(cases<data_india[\"Confirmed\"].max()):\n        continue\n    else:\n        break\n        ","9cb5ef77":"india_doubling=pd.DataFrame(list(zip(C,double_days)),columns=[\"No. of cases\",\"Days since first case\"])\nindia_doubling[\"Number of days required to Double the cases\"]=india_doubling[\"Days since first case\"].diff().fillna(india_doubling[\"Days since first case\"].iloc[0])\nindia_doubling.loc[india_doubling['No. of cases']==1, 'Number of days required to Double the cases'] = 0\nindia_doubling.style.background_gradient(cmap='Reds')","aebbd751":"data_india['Active'] = data_india['Confirmed'] - data_india['Recovered'] - data_india['Deaths']\nfig=go.Figure(data=go.Pie(labels=['Active','Recovered','Deaths'],\n                values=[data_india.iloc[data_india['ObservationDate'].idxmax(axis=1)]['Active'],\n                        data_india.iloc[data_india['ObservationDate'].idxmax(axis=1)]['Recovered'],\n                        data_india.iloc[data_india['ObservationDate'].idxmax(axis=1)]['Deaths']\n                       ]),layout={'template':'presentation'})\nfig.update_layout(title_text=\"Coronavirus Cases in India as of \"+data_india['ObservationDate'].max().strftime(\"%d-%b'%y\"))\nfig.show()","e9df8366":"columns=['Active','Recovered','Deaths']\nmeltedDF=pd.melt(data_india[columns[::-1]+['ObservationDate']],id_vars=['ObservationDate'], var_name='Value Type', value_name='Share Percentage')\nfig = px.bar(meltedDF, \n       x = \"Share Percentage\",\n       animation_frame = meltedDF['ObservationDate'].astype(str), \n       color = 'Value Type', \n       barmode = 'stack', height=400,\n       template='seaborn',\n       title='Cases percentage share over time',\n       orientation='h')\nfig.show()","e351febc":"data_india.head()","2923e719":"train_ml=data_india.iloc[:int(data_india.shape[0]*0.95)]\nvalid_ml=data_india.iloc[int(data_india.shape[0]*0.95):]\nmodel_scores=[]","a9153eb6":"Confirmed = valid_ml['Confirmed'].reset_index(drop=True)","2112993c":"from sklearn.linear_model import LinearRegression\nlin_reg=LinearRegression(normalize=True)\n\nlin_reg.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Confirmed\"]).reshape(-1,1))","049561f0":"prediction_valid_linreg=lin_reg.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))","7c3dab0d":"Prediction_Linear_Regression = prediction_valid_linreg.tolist()","bd9e8071":"from sklearn.metrics import mean_squared_error,r2_score\nmodel_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_valid_linreg)))\nprint(\"Root Mean Square Error for Linear Regression: \",np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_valid_linreg)))","9a930d98":"plt.figure(figsize=(11,6))\nprediction_linreg=lin_reg.predict(np.array(data_india[\"Days Since\"]).reshape(-1,1))\nlinreg_output=[]\nfor i in range(prediction_linreg.shape[0]):\n    linreg_output.append(prediction_linreg[i][0])\n\nfig=go.Figure()\nfig.add_trace(go.Scatter(x=data_india.index, y=data_india[\"Confirmed\"],\n                    mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=data_india.index, y=linreg_output,\n                    mode='lines',name=\"Linear Regression Best Fit Line\",\n                    line=dict(color='black', dash='dot')))\nfig.update_layout(title=\"Confirmed Cases Linear Regression Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","909893c6":"from sklearn.preprocessing import PolynomialFeatures\npoly = PolynomialFeatures(degree = 10) ","51648497":"train_poly=poly.fit_transform(np.array(train_ml[\"Days Since\"]).reshape(-1,1))\nvalid_poly=poly.fit_transform(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))\ny=train_ml[\"Confirmed\"]","f1298928":"linreg=LinearRegression(normalize=True)\nlinreg.fit(train_poly,y)","a3f853ea":"prediction_poly=linreg.predict(valid_poly)\nrmse_poly=np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_poly))\nmodel_scores.append(rmse_poly)\nprint(\"Root Mean Squared Error for Polynomial Regression: \",rmse_poly)","97121e74":"Prediction_Polynomial_Regression = prediction_poly.tolist()","6096e436":"comp_data=poly.fit_transform(np.array(data_india[\"Days Since\"]).reshape(-1,1))\nplt.figure(figsize=(11,6))\npredictions_poly=linreg.predict(comp_data)\n\nfig=go.Figure()\nfig.add_trace(go.Scatter(x=data_india.index, y=data_india[\"Confirmed\"],\n                    mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=data_india.index, y=predictions_poly,\n                    mode='lines',name=\"Polynomial Regression Best Fit\",\n                   line=dict(color='black', dash='dot' )))\nfig.update_layout(title=\"Confirmed Cases Polynomial Regression Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\",\n                 legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","149a6a03":"from sklearn.svm import SVR","be460390":"train_ml=data_india.iloc[:int(data_india.shape[0]*0.95)]\nvalid_ml=data_india.iloc[int(data_india.shape[0]*0.95):]","06aeffff":"#Intializing SVR Model\nsvm=SVR(C=1,degree=5,kernel='poly',epsilon=0.01)\n\n#Fitting model on the training data\nsvm.fit(np.array(train_ml[\"Days Since\"]).reshape(-1,1),np.array(train_ml[\"Confirmed\"]).reshape(-1,1))\n\nprediction_valid_svm=svm.predict(np.array(valid_ml[\"Days Since\"]).reshape(-1,1))\nmodel_scores.append(np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_valid_svm)))\nprint(\"Root Mean Square Error for Support Vectore Machine: \",np.sqrt(mean_squared_error(valid_ml[\"Confirmed\"],prediction_valid_svm)))","191ede17":"Prediction_SVM_Regression = prediction_valid_svm.tolist()","311449d7":"plt.figure(figsize=(11,6))\nprediction_svm=svm.predict(np.array(data_india[\"Days Since\"]).reshape(-1,1))\nfig=go.Figure()\nfig.add_trace(go.Scatter(x=data_india.index, y=data_india[\"Confirmed\"],\n                    mode='lines+markers',name=\"Train Data for Confirmed Cases\"))\nfig.add_trace(go.Scatter(x=data_india.index, y=prediction_svm,\n                    mode='lines',name=\"Support Vector Machine Best fit Kernel\",\n                    line=dict(color='black', dash='dot')))\nfig.update_layout(title=\"Confirmed Cases Support Vectore Machine Regressor Prediction\",\n                 xaxis_title=\"Date\",yaxis_title=\"Confirmed Cases\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","5fc668f2":"from fbprophet import Prophet\n\nprophet_c=Prophet(interval_width=0.95,weekly_seasonality=True,)\nprophet_confirmed=pd.DataFrame(zip(list(data_india['ObservationDate']),list(data_india[\"Confirmed\"])),columns=['ds','y'])","d617fd08":"prophet_c.fit(prophet_confirmed)\n\n\nforecast_c=prophet_c.make_future_dataframe(periods=17)\nforecast_confirmed=forecast_c.copy()\nconfirmed_forecast=prophet_c.predict(forecast_c)\n\nmodel_scores.append(np.sqrt(mean_squared_error(data_india[\"Confirmed\"],confirmed_forecast['yhat'].head(data_india.shape[0]))))\nprint(\"Root Mean Squared Error for Prophet Model: \",np.sqrt(mean_squared_error(data_india[\"Confirmed\"],confirmed_forecast['yhat'].head(data_india.shape[0]))))","ddfa1a60":"Prediction_prophet = confirmed_forecast['yhat'].head(data_india.shape[0]).tolist()\nn = len(Prediction_SVM_Regression)\nPrediction_prophet =Prediction_prophet[-n:]","1324429d":"print(prophet_c.plot(confirmed_forecast))","619db646":"print(prophet_c.plot_components(confirmed_forecast))","4d5ef7fc":"print(Prediction_prophet)\nprint(Prediction_SVM_Regression)\nprint(Prediction_Polynomial_Regression)\nprint(Prediction_Linear_Regression)\nprint(Confirmed)","2007afd8":"Prediction_Polynomial_Regression = ([int(i) for i in Prediction_Polynomial_Regression])\nPrediction_SVM_Regression = ([int(i) for i in Prediction_SVM_Regression])\nPrediction_prophet = ([int(i) for i in Prediction_prophet])\nConfirmed = ([int(i) for i in Confirmed])","7939b430":"dict1 = {'Confirmed': Confirmed, 'Prediction_Polynomial_Regression': Prediction_Polynomial_Regression, 'Prediction_SVM_Regression':Prediction_SVM_Regression, 'Prediction_Prophet':Prediction_prophet, 'Prediction_Linear_Regression': Prediction_Linear_Regression}  ","4e2dd739":"compare = pd.DataFrame(dict1)","2c40d918":"compare","d9ac2dbd":"## Time Series Forecasting","487a6c15":"# 2. Polynomial Regression","2d899363":"## Bar Graph of Active Cases","830758dc":"# Days to Double Cases","671de0f5":"# EDA","645d6774":"## Bar Graph of Confirmed Cases","a2120c16":"The Linear Regression Model is absolutely falling aprat. As it is clearly visible that the trend of Confirmed Cases in absolutely not Linear.\u00b6","90db3046":"# Machine Learning Models","5c37e4b4":"# 3. SVM Regression","5ee544b3":"# 4. Facebook's Prophet Model","bdc3f421":"# Pie Chart","f5ded30f":"## <center><font size=\"20\" class=\"serif\" color=\"teal\"> India against COVID-19 <\/font> <\/center>","c6598d83":"# 1. Linear Regression","43df515b":"--------------------------------","f0938bc9":"## Bar Graph of Recovered Cases","b38b5864":"## Bar Graph of Deaths Cases","bd548e0b":"# Actual vs Prediction","8f41342f":"## Predictions using Machine Learning","d9d75b60":"## Scatter Plot","e412aec5":"# Time Chart","bf2edb11":"# Visualization"}}