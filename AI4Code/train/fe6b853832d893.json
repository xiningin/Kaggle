{"cell_type":{"7c2be02a":"code","13bbeeac":"code","7e82906b":"code","0c13b07d":"code","386ab5eb":"code","fd56038d":"code","6972e818":"code","35b0c0f0":"code","e673bce8":"code","ac445dc9":"code","66a0ca0f":"code","09490561":"code","94cffe31":"code","9db67933":"code","8e224cc8":"code","f4d4c74f":"code","9ef714c8":"code","df050fc0":"code","8965e3ed":"code","b9f97747":"code","6a372297":"code","dcfa629e":"code","8aef7b30":"code","512159ce":"code","37294c83":"code","068ab781":"code","fdf93b94":"code","d0354351":"code","ad2a4e2c":"code","95c4c43a":"code","ba1c481a":"code","779f3b6e":"code","516bcc78":"code","6117e7fd":"markdown","95308f79":"markdown","e80f29d7":"markdown","1ff11291":"markdown","086fc0be":"markdown","a1efba9b":"markdown","e6067fd5":"markdown","272750c4":"markdown","22b6004c":"markdown","073abc13":"markdown","225bbb88":"markdown","2cce5dae":"markdown","670c8df9":"markdown","80ad1a5d":"markdown","d2fa2244":"markdown","43741f63":"markdown","9234e5e6":"markdown","5b972b93":"markdown","ca583537":"markdown","0a599e95":"markdown","0d8e2495":"markdown","a980edb1":"markdown","b303c304":"markdown","7481319b":"markdown","9f8b63d5":"markdown","44bda353":"markdown","d972653a":"markdown","0074ae36":"markdown","1dbaa45f":"markdown","ef311c1f":"markdown","5a8aeda9":"markdown","48ee8519":"markdown","805c5ed5":"markdown","5f987479":"markdown","2e954b99":"markdown","bccb6267":"markdown","cee7325b":"markdown","302d3553":"markdown","deb89278":"markdown","adbd669a":"markdown"},"source":{"7c2be02a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13bbeeac":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","7e82906b":"train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")","0c13b07d":"print(train.shape)\nprint(test.shape)","386ab5eb":"# \u6700\u5927\u30ab\u30e9\u30e0\u6570\u3092100\u306b\u62e1\u5f35(\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u7701\u7565\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067)\npd.set_option('display.max_columns', 100)\ntrain.head()","fd56038d":"train.info()","6972e818":"train.describe()","35b0c0f0":"train.describe(include=\"O\")","e673bce8":"train[\"SalePrice\"].describe()\n","ac445dc9":"#\u76ee\u7684\u5909\u6570\u3067\u3042\u308b\u5bb6\u306e\u4fa1\u683c\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8868\u793a\u3059\u308b\nsns.distplot(train['SalePrice']);","66a0ca0f":"from scipy import stats\nres = stats.probplot(train['SalePrice'], plot=plt)","09490561":"#\u6b6a\u5ea6\u3068\u5c16\u5ea6\u3092\u8a08\u7b97\n#\u6b6a\u5ea6:\u5206\u5e03\u304c\u6b63\u898f\u5206\u5e03\u304b\u3089\u3069\u308c\u3060\u3051\u6b6a\u3093\u3067\u3044\u308b\u304b\u3092\u8868\u3059\u7d71\u8a08\u91cf\u3067\u3001\u5de6\u53f3\u5bfe\u79f0\u6027\u3092\u793a\u3059\u6307\u6a19\n#\u5c16\u5ea6:\u5206\u5e03\u304c\u6b63\u898f\u5206\u5e03\u304b\u3089\u3069\u308c\u3060\u3051\u5c16\u3063\u3066\u3044\u308b\u304b\u3092\u8868\u3059\u7d71\u8a08\u91cf\u3067\u3001\u5c71\u306e\u5c16\u308a\u5ea6\u3068\u88fe\u306e\u5e83\u304c\u308a\u5ea6\n\nprint(\"\u6b6a\u5ea6: %f\" % train['SalePrice'].skew())\nprint(\"\u5c16\u5ea6: %f\" % train['SalePrice'].kurt())","94cffe31":"#1\u968e\u306e\u30d5\u30ed\u30a2\u306e\u9762\u7a4d(1stFlrSF)\ng=sns.FacetGrid(train)\ng=g.map(sns.distplot,\"1stFlrSF\")\ng.add_legend()\n\n#2\u968e\u306e\u30d5\u30ed\u30a2\u306e\u9762\u7a4d(2ndFlrSF)\ng=sns.FacetGrid(train)\ng=g.map(sns.distplot,\"2ndFlrSF\")\n\n#\u5730\u4e0b\u5ba4\u306e\u9762\u7a4d(TotalBsmtSF)\ng=sns.FacetGrid(train)\ng=g.map(sns.distplot,\"TotalBsmtSF\")\n","9db67933":"#\u7269\u4ef6\u306e\u5e83\u3055\u3092\u5408\u8a08\u3057\u305f\u5909\u6570\u3092\u4f5c\u6210\ntrain[\"TotalSF\"] = train[\"1stFlrSF\"] + train[\"2ndFlrSF\"] + train[\"TotalBsmtSF\"]\ntest[\"TotalSF\"] = test[\"1stFlrSF\"] + test[\"2ndFlrSF\"] + test[\"TotalBsmtSF\"]\n\n#\u5143\u306e\u5909\u6570\u3092\u524a\u9664\ntrain = train.drop([\"1stFlrSF\",\"2ndFlrSF\",\"TotalBsmtSF\"],axis=1)\n\n\n#\u7269\u4ef6\u306e\u5e83\u3055\u3068\u7269\u4ef6\u4fa1\u683c\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210\nplt.figure(figsize=(20, 10))\nplt.scatter(train[\"TotalSF\"],train[\"SalePrice\"])\nplt.xlabel(\"TotalSF\")\nplt.ylabel(\"SalePrice\")\n","8e224cc8":"#\u5916\u308c\u5024\u3092\u9664\u5916\u3059\u308b\ntrain = train.drop(train[(train['TotalSF']>7500) & (train['SalePrice']<300000)].index)\n\n#\u7269\u4ef6\u306e\u5e83\u3055\u3068\u7269\u4ef6\u4fa1\u683c\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210\nplt.figure(figsize=(20, 10))\nplt.scatter(train[\"TotalSF\"],train[\"SalePrice\"])\nplt.xlabel(\"TotalSF\")\nplt.ylabel(\"SalePrice\")\n","f4d4c74f":"#\u7bc9\u5e74\u6570\u3068\u7269\u4ef6\u4fa1\u683c\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210\ndata = pd.concat([train[\"YearBuilt\"],train[\"SalePrice\"]],axis=1)\n\nplt.figure(figsize=(20, 10))\nplt.xticks(rotation='90')\nsns.boxplot(x=\"YearBuilt\",y=\"SalePrice\",data=data)\n","9ef714c8":"#\u5916\u308c\u5024\u3092\u9664\u5916\u3059\u308b\ntrain = train.drop(train[(train['YearBuilt']<2000) & (train['SalePrice']>600000)].index)\n\n#\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\ndata = pd.concat([train[\"YearBuilt\"],train[\"SalePrice\"]],axis=1)\n\nplt.figure(figsize=(20, 10))\nplt.xticks(rotation='90')\nsns.boxplot(x=\"YearBuilt\",y=\"SalePrice\",data=data)\n","df050fc0":"k = 10\ndf = train\ncorrmat = df.corr()\ncols = corrmat.nlargest(k, \"SalePrice\")[\"SalePrice\"].index\ncm = np.corrcoef(df[cols].values.T)\nfig, ax = plt.subplots(figsize=(12, 10))\nsns.set(font_scale=1.2)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt=\".2f\", annot_kws={\"size\": 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()\nfig.savefig(\"figure4.png\")\n","8965e3ed":"#\u9078\u629e\u3055\u308c\u305f\u9805\u76ee\u306e\u307f\u3092\u4f7f\u7528\u3059\u308b\ntrain = train[cols]\n\n#\u591a\u91cd\u5171\u7dda\u6027\u3092\u8d77\u3053\u3059\u53ef\u80fd\u6027\u306e\u3042\u308b\u5909\u6570\u3092\u524a\u9664\ntrain = train.drop([\"TotRmsAbvGrd\",\"GarageArea\"],axis = 1)\ntest = test.drop([\"TotRmsAbvGrd\",\"GarageArea\"],axis = 1)\ntrain.head()\n","b9f97747":"sns.pairplot(train,y_vars=['SalePrice'],x_vars=['TotalSF','OverallQual','GrLivArea','GarageCars','FullBath','YearBuilt','YearRemodAdd'])\n","6a372297":"#\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u76ee\u7684\u5909\u6570\u3068\u305d\u308c\u4ee5\u5916\u306b\u5206\u3051\u308b\ntrain_X = train.drop(\"SalePrice\",axis=1)\ntrain_y = train[\"SalePrice\"]\n\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30ab\u30e9\u30e0\u306e\u307f\u306b\u3059\u308b \ntmp_cols = train_X.columns\ntest_X = test[tmp_cols]\n\n#\u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\nprint(\"train_X: \"+str(train_X.shape))\nprint(\"train_y: \"+str(train_y.shape))\nprint(\"test_X: \"+str(test_X.shape))","dcfa629e":"#\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u3092\u78ba\u8a8d\u3059\u308b\n#\u5b66\u7fd2\u30c7\u30fc\u30bf \nprint(train_X.isnull().sum())\nprint('--------------------') #\u533a\u5207\u308a\u6587\u5b57\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\nprint(test_X.isnull().sum())\n","8aef7b30":"#\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u3092\u5e73\u5747\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b\ntest_X = test_X.fillna(test_X.mean())\ntest_X.isnull().sum()","512159ce":"#\u76ee\u7684\u5909\u6570\u306e\u5bfe\u6570log(x+1)\u3092\u3068\u308b\ntrain_y = np.log1p(train_y)\n\n#\u5206\u5e03\u3092\u53ef\u8996\u5316\nplt.figure(figsize=(10, 5))\nsns.distplot(train_y)\nfig = plt.figure()\nres = stats.probplot(train_y, plot=plt)\n","37294c83":"#\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u30e2\u30c7\u30eb\u8a55\u4fa1\u7528\u30c7\u30fc\u30bf\u306b\u5206\u3051\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom sklearn.model_selection import train_test_split\n\n#\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u306b\u3088\u308a\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u5272 \n(X_train, X_test, y_train, y_test) = train_test_split(train_X, train_y , test_size = 0.3 , random_state = 0)\n\nprint(\"X_train: \"+str(X_train.shape))\nprint(\"X_test: \"+str(X_test.shape))\nprint(\"y_train: \"+str(y_train.shape))\nprint(\"y_test: \"+str(y_test.shape))\n","068ab781":"from sklearn import linear_model\n\n# \u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\nclf = linear_model.LinearRegression()\n \n# \u5358\u56de\u5e30\u7528\u306b\u8aac\u660e\u5909\u6570\u3092\u4e00\u3064\u3068\u3059\u308b    \nX_train_1 = X_train[[\"YearBuilt\"]] \nX_test_1 = X_test[[\"YearBuilt\"]]  \n    \n# \u30e2\u30c7\u30eb\u5b66\u7fd2\nclf.fit(X_train_1, y_train)\n \n# \u5b66\u7fd2\u7d50\u679c\u306e\u56de\u5e30\u4fc2\u6570\nprint('\u56de\u5e30\u4fc2\u6570\uff1a {}'.format(clf.coef_))\n \n# \u5b66\u7fd2\u7d50\u679c\u306e\u5207\u7247 (\u8aa4\u5dee)\nprint('\u5207\u7247\uff1a {}'.format(clf.intercept_))\n","fdf93b94":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3066\u4e88\u6e2c\ny_pred_log = clf.predict(X_test_1)\n\n#\u76ee\u7684\u5909\u6570\u3092\u5bfe\u6570\u5909\u63db\u3057\u3066\u3044\u308b\u306e\u3067\u5143\u306b\u623b\u3059\ny_pred =np.exp(y_pred_log) \nprint(y_pred)\n","d0354351":"from sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\n\n#RMSE(\u5e73\u5747\u5e73\u65b9\u4e8c\u4e57\u8aa4\u5dee)\nprint(np.sqrt(mean_squared_error(np.exp(y_test), y_pred)))\n\n#MAE(\u5e73\u5747\u7d76\u5bfe\u8aa4\u5dee)\nprint(mean_absolute_error(np.exp(y_test), y_pred))\n\n# \u6c7a\u5b9a\u4fc2\u6570\nprint(r2_score(np.exp(y_test), y_pred))\n","ad2a4e2c":"# \u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\nclf = linear_model.LinearRegression()\n \n# \u30e2\u30c7\u30eb\u5b66\u7fd2\nclf.fit(X_train, y_train)\n  \n# \u504f\u56de\u5e30\u4fc2\u6570\nprint('\u56de\u5e30\u4fc2\u6570\uff1a {}'.format(pd.DataFrame({\"Name\":X_train.columns,\n                    \"Coefficients\":clf.coef_}).sort_values(by='Coefficients') ))\n\n# \u5b66\u7fd2\u7d50\u679c\u306e\u5207\u7247 (\u8aa4\u5dee)\nprint('\u5207\u7247\uff1a {}'.format(clf.intercept_))\n","95c4c43a":"# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3066\u4e88\u6e2c\ny_pred_log = clf.predict(X_test)\n\n#\u76ee\u7684\u5909\u6570\u3092\u5bfe\u6570\u5909\u63db\u3057\u3066\u3044\u308b\u306e\u3067\u5143\u306b\u623b\u3059\ny_pred =np.exp(y_pred_log) \n\n#RMSE(\u5e73\u5747\u5e73\u65b9\u4e8c\u4e57\u8aa4\u5dee)\nprint(np.sqrt(mean_squared_error(np.exp(y_test), y_pred)))\n\n#MAE(\u5e73\u5747\u7d76\u5bfe\u8aa4\u5dee)\nprint(mean_absolute_error(np.exp(y_test), y_pred))\n\n# \u6c7a\u5b9a\u4fc2\u6570\nprint(r2_score(np.exp(y_test), y_pred))\n","ba1c481a":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n\n#\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\nrfr = RandomForestRegressor(random_state=0)\n\n#\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u3066\u5b66\u7fd2\nrfr.fit(X_train, y_train)\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3066\u4e88\u6e2c\ny_pred_log = rfr.predict(X_test)\n\n#\u76ee\u7684\u5909\u6570\u3092\u5bfe\u6570\u5909\u63db\u3057\u3066\u3044\u308b\u306e\u3067\u5143\u306b\u623b\u3059\ny_pred =np.exp(y_pred_log)\n\n#RMSE(\u5e73\u5747\u5e73\u65b9\u4e8c\u4e57\u8aa4\u5dee)\nprint(np.sqrt(mean_squared_error(np.exp(y_test), y_pred)))\n\n#MAE(\u5e73\u5747\u7d76\u5bfe\u8aa4\u5dee)\nprint(mean_absolute_error(np.exp(y_test), y_pred))\n\n# \u6c7a\u5b9a\u4fc2\u6570\nprint(r2_score(np.exp(y_test), y_pred))\n","779f3b6e":"plt.figure(figsize=(20,10))\nplt.barh(\n    X_train.columns[np.argsort(rfr.feature_importances_)],\n    rfr.feature_importances_[np.argsort(rfr.feature_importances_)],\n     label='RandomForestRegressor'\n )\nplt.title('RandomForestRegressor feature importance')\n","516bcc78":"# \u3010\u53c2\u8003\u3011\u30b9\u30b3\u30a2\u63d0\u51fa\n# hon_pred_log = rfr.predict(test_X)\n# my_submission = pd.DataFrame()\n# my_submission[\"Id\"] = test['Id']\n# my_submission[\"SalePrice\"] = np.exp(hon_pred_log)\n# my_submission.to_csv('submission.csv', index=False)\n","6117e7fd":"# \u3010\u6f14\u7fd2\u3011\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406","95308f79":"* \u76ee\u7684\u5909\u6570\u3067\u3042\u308bSalePrice\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8868\u793a","e80f29d7":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u578b\u306e\u30ec\u30b3\u30fc\u30c9\u6570\u3001\u30e6\u30cb\u30fc\u30af\u6570\u3001\u6700\u983b\u5024\u306e\u51fa\u73fe\u56de\u6570\u3092\u8868\u793a","1ff11291":"* \u8aac\u660e\u5909\u6570\u3092\u300c\u5168\u3066\u300d\u3068\u3057\u3001\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u306b\u3066\u5b66\u7fd2\u3092\u5b9f\u65bd\n","086fc0be":"* \u7269\u4ef6\u306e\u5e83\u3055\u3092\u5408\u8a08\u3057\u305f\u5909\u6570\u3092\u4f5c\u6210","a1efba9b":"# \u3010\u6f14\u7fd2\u3011\u30e2\u30c7\u30eb\u5b66\u7fd2(\u91cd\u56de\u5e30)","e6067fd5":"* \u76ee\u7684\u5909\u6570\u3067\u3042\u308bSalePrice\u306eQ-Q\u30d7\u30ed\u30c3\u30c8\u3092\u8868\u793a","272750c4":"* \u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u3092\u78ba\u8a8d","22b6004c":"* \u8aac\u660e\u5909\u6570\u3092\u300cYearBuilt\u300d\u306e\u307f\u306b\u3057\u3001\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u306b\u3066\u5b66\u7fd2\u3092\u5b9f\u65bd","073abc13":"# \u3010\u6f14\u7fd2\u3011\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406","225bbb88":"# \u3010\u6f14\u7fd2\u3011\u30e2\u30c7\u30eb\u8a55\u4fa1","2cce5dae":"* RandamForest\u306e\u91cd\u8981\u5ea6\u3092\u78ba\u8a8d","670c8df9":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6570\u5024\u9805\u76ee\u306e\u7d71\u8a08\u8981\u7d04\u91cf\u3092\u8868\u793a","80ad1a5d":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u3092\u5e73\u5747\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b","d2fa2244":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u5b9a\u7fa9\u3092\u78ba\u8a8d","43741f63":"* \u7269\u4ef6\u4fa1\u683c\u306e\u5916\u308c\u5024\u3092\u9664\u53bb","9234e5e6":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u8aac\u660e\u5909\u6570\u3068\u76ee\u7684\u5909\u6570\u306b\u5206\u3051\u308b\u3002\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5909\u6570(7\u5909\u6570)\u3068\u5408\u308f\u305b\u308b\u3002","5b972b93":"* \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u3066\u4e88\u6e2c\u3092\u5b9f\u65bd","ca583537":"* \u76ee\u7684\u5909\u6570\u3067\u3042\u308bSalePrice\u306e\u5bfe\u6570\u5909\u63db\u3092\u884c\u3046","0a599e95":"* \u7bc9\u5e74\u6570\u3068\u7269\u4ef6\u4fa1\u683c\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210","0d8e2495":"* RMSE (\u5e73\u5747\u5e73\u65b9\u4e8c\u4e57\u8aa4\u5dee) \u3001MAE (\u5e73\u5747\u7d76\u5bfe\u8aa4\u5dee)\u3001\u6c7a\u5b9a\u4fc2\u6570\u3092\u8868\u793a","a980edb1":"* \u4e0a\u4f4d9\u9805\u76ee\u306e\u3046\u3061\u3001\u591a\u91cd\u5171\u7dda\u6027\u3092\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b2\u9805\u76ee\u3092\u524a\u9664\u3057\u30017\u9805\u76ee\u3092\u4f7f\u7528\n","b303c304":"# \u3010\u6f14\u7fd2\u3011\u30e2\u30c7\u30eb\u8a55\u4fa1(\u5358\u56de\u5e30)","7481319b":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u8868\u793a(\u6700\u521d\u306e5\u884c\u76ee)","9f8b63d5":"* \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306b\u3066\u5b66\u7fd2\u3092\u884c\u3044\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u8868\u793a","44bda353":"* \u7269\u4ef6\u306e\u5e83\u3055\u306e\u5404\u5909\u6570\u306e\u5024\u3092\u78ba\u8a8d","d972653a":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30ec\u30b3\u30fc\u30c9\u6570\u3068\u30ab\u30e9\u30e0\u6570\u3092\u78ba\u8a8d","0074ae36":"* # \u3010\u6f14\u7fd2\u3011\u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5","1dbaa45f":"* RMSE (\u5e73\u5747\u5e73\u65b9\u4e8c\u4e57\u8aa4\u5dee) \u3001MAE (\u5e73\u5747\u7d76\u5bfe\u8aa4\u5dee)\u3001\u6c7a\u5b9a\u4fc2\u6570\u3092\u8868\u793a","ef311c1f":"* \u76f8\u95a2\u95a2\u4fc2\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7(SalePrice\u3068\u76f8\u95a2\u304c\u9ad8\u3044\u4e0a\u4f4d9\u9805\u76ee)\n","5a8aeda9":"* \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\u306b\u3088\u308a\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b7:3\u306b\u5206\u5272\n","48ee8519":"# \u3010\u6f14\u7fd2\u3011\u30e2\u30c7\u30eb\u5b66\u7fd2\u30fb\u8a55\u4fa1(\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8)","805c5ed5":"* \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n","5f987479":"* \u76ee\u7684\u5909\u6570\u3067\u3042\u308bSalePrice\u306e\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u8868\u793a","2e954b99":"* \u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u8aad\u307f\u8fbc\u307f","bccb6267":"* \u7269\u4ef6\u306e\u5e83\u3055\u3092\u5408\u8a08\u3057\u305f\u5909\u6570\u306e\u5916\u308c\u5024\u3092\u9664\u53bb","cee7325b":"# \u3010\u6f14\u7fd2\u3011\u30e2\u30c7\u30eb\u5b66\u7fd2(\u5358\u56de\u5e30)\n","302d3553":"# \u3010\u6f14\u7fd2\u3011\u30c7\u30fc\u30bf\u306e\u63a2\u7d22","deb89278":"* \u9078\u629e\u3055\u308c\u305f7\u5909\u6570\u306eSalePrice\u3068\u306e\u6563\u5e03\u56f3\u3092\u4f5c\u6210","adbd669a":"* \u6b63\u898f\u5206\u5e03\u304b\u3089\u306e\u305a\u308c\u3092\u8868\u3059\u6b6a\u5ea6\u3068\u5c16\u5ea6\u3092\u8a08\u7b97"}}