{"cell_type":{"06209f3f":"code","df21c9b4":"code","6b02f26b":"code","5b6cdc33":"code","f30429dc":"code","418a3d2e":"code","50ef2100":"markdown","fbd2217c":"markdown","93b03300":"markdown","4e333d03":"markdown","084738e4":"markdown","52b288db":"markdown","28d5c677":"markdown"},"source":{"06209f3f":"import pandas as pd\nimport seaborn as sns\n\n# Dictionary to store file links\nfiles_url = {\n                \"Confirmed\":\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\",\n                \"Recovered\":\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\",\n                \"Deaths\":\"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\"\n            }","df21c9b4":"def get_data(case_type, file_path):\n    # Reading file from file path and storing in data frame\n    file_df = pd.read_csv(file_path)\n    \n    # Renaming and removing columns\n    file_df = file_df.rename(columns={\"Country\/Region\":\"Country\"}).drop([\"Lat\",\"Long\"], axis=\"columns\")\n\n    # Aggregating data at Country Level (dropping \"Province\/State\" column)\n    file_df = file_df.groupby(\"Country\").sum()\n\n    # Pivoting down data\n    file_df = file_df.reset_index().melt(id_vars='Country', var_name=\"Date\", value_name=case_type)\n\n    # Changing Date from String to Date type\n    file_df['Date'] = pd.to_datetime(file_df['Date'])\n    \n    return file_df","6b02f26b":"# Creating combined data frame with appended Confirmed, Recovered and Deaths data\ncovid19_data = pd.concat([get_data(file_type, path) for file_type, path in files_url.items()])\ncovid19_data = covid19_data.groupby(['Country','Date']).sum().sort_values(['Country','Date'])\n\n# Calculating Active cases and % Cases Active\ncovid19_data['Active'] = covid19_data['Confirmed'] - (covid19_data['Deaths'] + covid19_data['Recovered'])\ncovid19_data['% Cases Active'] = covid19_data['Active']\/covid19_data['Confirmed']*100\n\ncovid19_data.head()\ncovid19_data.tail()","5b6cdc33":"# Creating Data frame to segment countries based on % Current Cases Active and % Active Cases from peak\n# Calculate max_active, current_active and current_active_pct \ncountry_map = covid19_data.groupby(['Country']).agg(max_active = ('Active', 'max'),\n                                                    current_active = ('Active', 'last'),\n                                                    current_active_pct = ('% Cases Active', 'last'))\n# Calculate % Active cases from peak\ncountry_map['active_from_peak_pct'] = country_map['current_active']\/country_map['max_active']*100\n\n# Defining bin limits and segmenting Countries \nbin_active_from_peak_pct = [-1, 25, 50, 75, 90, 99, 101]\nbin_active_from_peak_pct_labels = ['< 25%', '25% - 50%', '50% - 70%', '75% - 90%', '90% - 99%', '100% (Active Cases Still Rising)']\ncountry_map['Group % Cases Active From Peak'] = pd.cut(country_map['active_from_peak_pct'], bins=bin_active_from_peak_pct , labels=bin_active_from_peak_pct_labels)\n\nbin_active_pct = [-1, 25, 50, 75, 90, 101]\nbin_active_pct_labels = ['< 25%', '25% - 50%', '50% - 75%', '75% - 90%', '> 90%']\ncountry_map['Group % Cases Active'] = pd.cut(country_map['current_active_pct'], bins=bin_active_pct, labels=bin_active_pct_labels)\n\ncountry_map.head()\ncountry_map.tail()","f30429dc":"max_countries_to_plot = 10\nsns.set_style('ticks')\nsns.set_context('talk')\n\n\n# Plotting Active Cases\nfor country_grp in reversed(bin_active_from_peak_pct_labels):\n    list_country = country_map[country_map['Group % Cases Active From Peak']==country_grp].sort_values('current_active', ascending=False).index.unique()[:max_countries_to_plot]\n    plot_df = covid19_data.loc[list_country].reset_index()\n    g = sns.relplot(x='Date', y='Active', data=plot_df, col='Country', col_wrap=5, col_order=list_country, hue='Country', kind='line', facet_kws={'sharey':None})\n    g.set_xticklabels(rotation=45)\n    g.fig.suptitle(\"Current Active Cases % from Peak: \"+country_grp, y=1.02)","418a3d2e":"max_countries_to_plot = 10\nsns.set_style('ticks')\nsns.set_context('talk')\n\n\n# Plotting % Active Cases of Total Confirmed Cases\nfor country_grp in reversed(bin_active_pct_labels):\n    list_country = country_map[country_map['Group % Cases Active']==country_grp].sort_values('current_active', ascending=False).index.unique()[:max_countries_to_plot]\n    plot_df = covid19_data.loc[list_country].reset_index()\n    g = sns.relplot(x='Date', y='% Cases Active', data=plot_df, col='Country', col_wrap=5, col_order=list_country, hue='Country', kind='line')\n    g.set_xticklabels(rotation=45)\n    g.fig.suptitle(\"Current Active Cases % from Total Confirmed Cases: \"+country_grp, y=1.02)\n","50ef2100":"**Segmenting Countries based of %Active Cases and %Active Cases from Peak**\n\ncountry_map data frame is created to store maximun recorded active cases(i.e. peak active cases), current active cases and %current active cases.\n\nBins are defined on % Cases Active from Peak and % Active Cases to segment countries into different groups.\n","fbd2217c":"# **Tracking Active Cases to visualize how countries are faring against Covid-19**\n\nThis notebook uses data from COVID-19 Data Repository by CSSE at Johns Hopkins University  https:\/\/github.com\/CSSEGISandData\/COVID-19) to calculate Active Cases in each country and segment them on % Cases Active(Active Cases\/Total Cases) and % Active Cases from Peak(Active Cases\/Peak Active Cases).\n\nThe goal is to plot a trend of **% Cases Active** and **% Active Cases from Peak** for segmented countries.","93b03300":"**Plotting charts for Active Cases**\n\nBy default 5 countries are plotted for each segment. Update max countries to plot to increase counts.","4e333d03":"**Combined Covid-19 Dataset**\n\nFetching and combining csv files. Also adding new calculated columns for Acive cases and %Active Cases\n\n![image.png](attachment:image.png)","084738e4":"**Defining Utility Function**\n\nDefining a fucntion that accepts the file type, link and pivots the date columns to rows for creating a tidy dataset. The source file has Country, State in rows and Dates are stored as columns (wide data format). For handling data in an easier way, it is better to have each observation as rows.\n\n![image.png](attachment:image.png)\n","52b288db":"**Packages Import**\n\nImporting pandas for data manipulation and seaborn for data visualization. Also initiating a dictionary to import data for Confirmed cases, Active cases and Deaths.","28d5c677":"**Plotting charts for % Active Cases**\n\nBy default 5 countries are plotted for each segment. Update max countries to plot to increase counts."}}