{"cell_type":{"48c3416a":"code","1d1a85e6":"code","57f7b3bf":"code","686f419c":"code","583f9838":"code","9337e94c":"code","f8a123c7":"code","fc034479":"code","d153e692":"code","e20d15f4":"code","ac1b1409":"code","430d785f":"code","1f254b0b":"code","b37be25e":"code","f6a689c8":"code","704a3845":"code","86b97f89":"code","96615545":"code","8dd1e684":"code","28b1a4b7":"code","c81ae9e4":"code","b87d3cb5":"code","aa5017e7":"code","113ee83f":"code","55534b2c":"markdown","73d04676":"markdown","1f2f10f3":"markdown","1865dff5":"markdown","83558d77":"markdown","99fda80d":"markdown","1be33266":"markdown","e97e8452":"markdown","f68867d9":"markdown","c872ab8c":"markdown","20e96524":"markdown","f50d90db":"markdown","a0b6719c":"markdown","93650683":"markdown","51b65653":"markdown","89a13e9f":"markdown","d0ba7f0c":"markdown","63856f65":"markdown","ee4b788c":"markdown","4d95128c":"markdown","1f40bb6d":"markdown","08659dc6":"markdown"},"source":{"48c3416a":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns            \nfrom scipy import stats","1d1a85e6":"DF = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n\nDF.head()","57f7b3bf":"def plotFrequency(sample,title,varType,style = 12,w = 10,h = 5,dpi = 90):\n    \n    if varType == \"categorical\":\n        \n        \n        \n        fig = plt.figure(figsize=(w,h), dpi= dpi)\n        \n        # create subplot \n        ax1 = fig.add_subplot(111)\n        ax1.set_title(title+\"\\n\\n\",color='gray',weight = 'bold')\n        \n        # axes spines settings\n        ax1.spines['bottom'].set_color(\"gray\")\n        ax1.spines['top'].set_color(\"gray\")\n        ax1.spines['right'].set_color(\"gray\")\n        ax1.spines['left'].set_color(\"gray\")\n\n        ax1.spines['bottom'].set_visible(True)\n        ax1.spines['top'].set_visible(False)\n        ax1.spines['right'].set_visible(False)\n        ax1.spines['left'].set_visible(True)\n\n        # hide top and right ticks\n        ax1.xaxis.tick_bottom()\n        ax1.yaxis.tick_left()\n\n        # lighten ticks and labels\n        ax1.tick_params(colors='gray',direction='out')\n        for tick in ax1.get_xticklabels():\n            tick.set_color('gray')\n        for tick in ax1.get_yticklabels():\n            tick.set_color('gray')\n        \n        # plot the real barplot\n        y = sample.value_counts()\n        x = sample.value_counts().index\n        plt.bar(x,y,edgecolor='#E6E6E6',color='#E76F51')\n        \n        # add upper labels\n        rects = ax1.patches\n        labels = [\"%d\" % i for i in y]\n        for rect, label in zip(rects, labels):\n            k = (ax1.get_ylim()[1]\/h)\/6\n            ax1.text(rect.get_x() + rect.get_width() \/ 2,\n                     rect.get_height()+k ,\n                     label, ha='center',\n                     va='bottom',\n                     c=\"grey\")\n        \n        fig.tight_layout()\n        plt.show()\n           \n    elif varType == \"numerical\":\n        \n        bins = int(round(np.sqrt(len(sample))))\n        fig = plt.figure(figsize=(w,h), dpi= dpi)        \n        \n        # create the 1st subplot\n        ax1 = fig.add_subplot(211)\n        histogram = plt.hist(sample,bins,edgecolor='#E6E6E6',color='#2A9D8F')\n        ax1.set_xlabel(title.split()[0],color=\"gray\")\n        ax1.set_ylabel('Abs. frequencies',color=\"gray\")\n        ax1.set_title(title + \"\\n[Absolute]\\n\",color=\"gray\",weight = 'bold')\n        \n        # add upper labels\n        rects = ax1.patches\n        labels = [int(i) for i in histogram[0]]\n        for rect, label in zip(rects, labels):\n            k = (ax1.get_ylim()[1]\/h)\/6\n            ax1.text(rect.get_x() + rect.get_width() \/ 2,\n                     rect.get_height()+k ,\n                     label,\n                     ha='center',\n                     va='bottom',\n                     c=\"grey\",\n                     rotation=90)\n\n        # create the 2nd subplot\n        ax2 = fig.add_subplot(212)\n        histogram = plt.hist(sample,bins,density=True,edgecolor='#E6E6E6',color='#F4A261')\n        ax2.set_xlabel(title.split()[0],color=\"gray\")\n        ax2.set_ylabel('Rel. frequencies',color=\"gray\")\n        ax2.set_title(title + \"\\n[Relative]\\n\",color=\"gray\",weight = 'bold')\n\n        # add upper labels\n        rects = ax2.patches\n        labels = [round(i,3) for i in histogram[0]]\n        for rect, label in zip(rects, labels):\n            k = (ax2.get_ylim()[1]\/h)\/6\n            ax2.text(rect.get_x() + rect.get_width() \/ 2,\n                     rect.get_height()+k ,\n                     label,\n                     ha='center',\n                     va='bottom',\n                     c=\"grey\",\n                     rotation=90)\n        \n        # set styling options for both subplots\n        for ax in fig.get_axes():\n\n            # axes spines settings\n            ax.spines['bottom'].set_color(\"gray\")\n            ax.spines['top'].set_color(\"gray\")\n            ax.spines['right'].set_color(\"gray\")\n            ax.spines['left'].set_color(\"gray\")\n\n            ax.spines['bottom'].set_visible(True)\n            ax.spines['top'].set_visible(False)\n            ax.spines['right'].set_visible(False)\n            ax.spines['left'].set_visible(True)\n\n            # hide top and right ticks\n            ax.xaxis.tick_bottom()\n            ax.yaxis.tick_left()\n\n            # lighten ticks and labels\n            ax.tick_params(colors='gray', direction='out')\n            for tick in ax.get_xticklabels():\n                tick.set_color('gray')\n            for tick in ax.get_yticklabels():\n                tick.set_color('gray')\n        \n        fig.tight_layout()\n        plt.show()\n        \n    else:\n        print(\"Missing or wrong varType argument.\")","686f419c":"sample = DF.Age[DF.Age.notna()]\n\nplotFrequency(sample,\"Age of Survivors\",\"numerical\")","583f9838":"sample = DF.Fare\n\nplotFrequency(sample,\"Fares of passengers\",\"numerical\")","9337e94c":"sample = DF.Sex[DF.Survived == 1]\n\nplotFrequency(sample,\"Sex of Survivors\",\"categorical\",w=5)","f8a123c7":"sample = DF.Pclass[DF.Survived == 1]\nsample = sample.astype(str)\n\nplotFrequency(sample,\"Class of Survivors\",\"categorical\",w=5)","fc034479":"print(\"Missing observations:\\t\",DF.Cabin.isna().sum())\nprint(\"Available observations:\\t\",DF.Cabin.value_counts(dropna=False).count())","d153e692":"DF[\"CabinProcessed\"] = DF.Cabin.fillna(\"\").str.get(0)\n\nsample = DF.CabinProcessed[DF.Survived == 1]\n\nplotFrequency(DF.CabinProcessed,\"Cabin of Survivors\\n[without NA]\",\"categorical\",w=5,h=8)\n\n\nDF[\"CabinProcessed\"] = DF.Cabin.fillna(\"x\").str.get(0)\n\nsample = DF.CabinProcessed[DF.Survived == 1]\n\nplotFrequency(DF.CabinProcessed,\"Cabin of Survivors\\n[with NA]\",\"categorical\",w=5,h=8)","e20d15f4":"DF[\"NameProcessed\"] = DF.Name.str.split(\",\").str[1].str.split(\".\").str[0]\n\nsample = DF.NameProcessed[DF.Survived == 1]\n\nplotFrequency(sample,\"Title of Survivors\",\"categorical\",w=15,h=5)","ac1b1409":"summ = pd.DataFrame(sample.value_counts())\nsumm.columns = [\"Survived\"]\nsumm","430d785f":"DF.NameProcessed.replace(to_replace=[\"Dr\",\"Rev\",\"Col\",\"Major\",\"Capt\"],value=\"Officer\",inplace = True,regex=True)\nDF.NameProcessed.replace(to_replace=[\"Dona\",\"Jonkheer\",\"Countess\",\"Sir\",\"Lady\",\"Don\"],value=\"Aristocrat\",inplace = True,regex=True)\nDF.NameProcessed.replace(to_replace=[\"Mlle\",\"Ms\"],value=\"Miss\",inplace = True,regex=True)\nDF.NameProcessed.replace(to_replace=\"Mme\",value=\"Mrs\",inplace = True,regex=True)\nDF.NameProcessed.replace(to_replace=\"the Aristocrat\",value=\"Aristocrat\",inplace = True,regex=True)\n\nsample = DF.NameProcessed[DF.Survived == 1]\n\nplotFrequency(sample,\"Title of Survivors\",\"categorical\",w=5)","1f254b0b":"summ = pd.DataFrame(sample.value_counts())\nsumm.columns = [\"Survived\"]\n#summ","b37be25e":"plotFrequency(DF.NameProcessed,\"Titles of passengers\",\"categorical\",w=5)","f6a689c8":"DF[\"Family\"] = 1 + DF.SibSp + DF.Parch\n\nDF.Family.replace([1],\"single\",inplace = True,regex=False)\nDF.Family.replace([2,3],\"small\",inplace = True,regex=False)\nDF.Family.replace([4,5],\"medium\",inplace = True,regex=False)\nDF.Family.replace([6,7,8,11],\"large\",inplace = True,regex=False)","704a3845":"sample = DF.Family[DF.Survived == 1]\nplotFrequency(sample,\"Family of Survivors\",\"categorical\",w=5)","86b97f89":"summ = pd.DataFrame(DF.Family.value_counts())\nsumm.columns = [\"Passengers\"]\nsumm","96615545":"otherwise = DF.Ticket.str.split(\" \").str[0].str[0]\nDF[\"TicketProcessed\"] = np.where(DF.Ticket.str.isdigit(), \"N\", otherwise)","8dd1e684":"plotFrequency(DF.TicketProcessed,\"Tickets of passengers\",\"categorical\",w=5)\n\nsample = DF.TicketProcessed[DF.Survived == 1]\n\nplotFrequency(sample,\"Tickets of Survivors\",\"categorical\",w=5)","28b1a4b7":"def removeOutliers(variable):\n    # Calculates and removes outliers using IQR method\n    \n    # Calculate 1st, 3rd quartiles and iqr\n    q1, q3 = variable.quantile(0.25), variable.quantile(0.75)\n    iqr = q3 - q1\n    \n    # Calculate lower fence and upper fence for outliers\n    lowerFence, upperFence = q1-1.5*iqr, q3+1.5*iqr   # Any values less than l_fence and greater than u_fence are outliers.\n    \n    # Observations that are outliers\n    outliers = variable[(variable<lowerFence) | (variable>upperFence)]\n    \n    # Drop obsevations that are outliers\n    filtered = variable.drop(outliers.index, axis = 0).reset_index(drop=True)\n    return filtered","c81ae9e4":"###","b87d3cb5":"def plotBoxplot(sample,title,w = 10,h = 5,dpi = 80):\n    \n    sample = sample[~np.isnan(sample)]\n    \n    fig = plt.figure(figsize=(w,h), dpi= dpi)\n\n    # set boxplot colors (for both)\n    edge_color = \"grey\"\n    fill_color = \"#F4A261\"\n    outliers_color = \"#E76F51\"\n    central_color = \"white\"\n    \n    # define outliers setting (for both)\n    outprops = dict(marker='_',markersize=12,markeredgecolor=outliers_color)\n\n    # create 1st subplot\n    ax1 = fig.add_subplot(121)\n    ax1.set_title(title+\"\\n\\n\",color='gray',weight = 'bold')\n    \n    # hide axis spines\n    ax1.spines['bottom'].set_color(\"gray\")\n    ax1.spines['top'].set_color(\"gray\")\n    ax1.spines['right'].set_color(\"gray\")\n    ax1.spines['left'].set_color(\"gray\")\n\n    ax1.spines['bottom'].set_visible(False)\n    ax1.spines['top'].set_visible(False)\n    ax1.spines['right'].set_visible(False)\n    ax1.spines['left'].set_visible(True)\n    \n    # hide top and right ticks\n    ax1.xaxis.tick_bottom()\n    ax1.yaxis.tick_left()\n\n    # lighten ticks and labels\n    ax1.tick_params(colors='gray',direction='out')\n    for tick in ax1.get_xticklabels():\n        tick.set_color('gray')\n    for tick in ax1.get_yticklabels():\n        tick.set_color('gray')\n    \n    # plot the real boxplot\n    bp1 = plt.boxplot(sample,patch_artist=True,flierprops = outprops)\n    \n    for element in ['boxes', 'whiskers', 'fliers', 'caps']:\n        plt.setp(bp1[element], color=edge_color)\n        \n    for element in ['means', 'medians']:\n        plt.setp(bp1[element], color=central_color)\n\n    for patch in bp1['boxes']:\n        patch.set(facecolor=fill_color)\n\n        \n    # let's remove outliers for the 2nd subplot\n    sample = removeOutliers(sample)\n    \n    \n    # create 2nd barplot\n    ax2 = fig.add_subplot(122)\n    ax2.set_title(title + \"\\n[no outliers]\\n\",color='gray',weight = 'bold')\n\n    # hide axis spines\n    ax2.spines['bottom'].set_color(\"gray\")\n    ax2.spines['top'].set_color(\"gray\")\n    ax2.spines['right'].set_color(\"gray\")\n    ax2.spines['left'].set_color(\"gray\")\n\n    ax2.spines['bottom'].set_visible(False)\n    ax2.spines['top'].set_visible(False)\n    ax2.spines['right'].set_visible(False)\n    ax2.spines['left'].set_visible(True)\n    \n    # hide top and right ticks\n    ax1.xaxis.tick_bottom()\n    ax1.yaxis.tick_left()\n\n    # lighten ticks and labels\n    ax2.tick_params(colors='gray',direction='out')\n    for tick in ax2.get_xticklabels():\n        tick.set_color('gray')\n    for tick in ax2.get_yticklabels():\n        tick.set_color('gray')\n    \n    # plot the real boxplot\n    bp2 = plt.boxplot(sample,patch_artist=True,flierprops=outprops)\n    \n    for element in ['boxes', 'whiskers', 'fliers', 'caps']:\n        plt.setp(bp2[element], color=edge_color)\n        \n    for element in ['means', 'medians']:\n        plt.setp(bp2[element], color=central_color)\n\n    for patch in bp2['boxes']:\n        patch.set(facecolor=fill_color)\n    \n    ax1.set_xticks([]) \n    ax2.set_xticks([]) \n    \n    fig.tight_layout()\n    plt.show()","aa5017e7":"sample = DF.Age[DF.Survived == 1]\n\nplotBoxplot(sample,\"Age of Survivors\")","113ee83f":"sample = DF.Fare[DF.Survived == 1]\n\nplotBoxplot(sample,\"Fare of Survivors\")","55534b2c":"### 4.3 Variable processing","73d04676":"Although categorical, the following variables requires a little processing to become easier to make sense of.","1f2f10f3":"### 4.2 Categorical variables","1865dff5":"## 3. Variable description and identification","83558d77":"### 4.1 Numerical variables","99fda80d":"How to deal with outliers *(imported)*:","1be33266":"# Titanic project","e97e8452":"## 2. Importing dataset and useful pacakges","f68867d9":"#### 4.2.1 Sex","c872ab8c":"#### 4.3.3 Family","20e96524":"## 1. Problem description","f50d90db":"#### 4.2.2 Class","a0b6719c":"#### 4.3.2 Titles","93650683":"## Research outlines\n\n1. Problem description\n\n2. Importing dataset and useful pacakges\n\n3. Variable description and identification\n\n4. Univariate analysis\n\n    4.1 Numerical variables <br>\n    4.2 Categorical variables <br>\n    4.3 Variable processing <br>\n   \n    5.1 Outliers detection <br>\n    5.2 Missing values <br>\n\n\n\n*still to do:* <br>\n\n\u2022 multivariate analysis (?) <br>\n\u2022 model building <br>\n\u2022 conclusions <br>","51b65653":"Here's a custom function to plot frequencies of a feature:","89a13e9f":"#### 4.1.1 Age","d0ba7f0c":"Also, let's create a custom function to plot boxplot","63856f65":"#### 4.3.1 Cabin","ee4b788c":"#### 4.1.2 Fares","4d95128c":"## 4. Univariate analysis","1f40bb6d":"#### 4.3.4 Ticket","08659dc6":"**Interquantile Range Rule** to find outliers\n\n* The minimum or lowest value of the dataset\n* The first quartile Q1, which represents a quarter of the way through the list of all data\n* The median of the data set, which represents the midpoint of the whole list of data\n* The third quartile Q3, which represents three-quarters of the way through the list of all data\n* The maximum or highest value of the data set.\n\nThough it's not often affected much by them, the interquartile range can be used to detect outliers.\nThis is done using these steps:\n\n1. Calculate the interquartile range for the data.\n2. Multiply the interquartile range (IQR) by 1.5 (a constant used to discern outliers).\n3. Add 1.5 x (IQR) to the third quartile. Any number greater than this is a suspected outlier.\n4. Subtract 1.5 x (IQR) from the first quartile. Any number less than this is a suspected outlier."}}