{"cell_type":{"29ed8da8":"code","6f74cdc7":"code","f440e36d":"code","519513a5":"code","0614a635":"code","e5a28c32":"code","08a090d7":"code","cf1621ff":"code","e37097c8":"code","a0cd9e0c":"code","2d63a874":"code","6185cbe1":"code","b95773b2":"code","7400e39d":"code","0056bda0":"code","ca564109":"code","ecacc5d1":"markdown","d7a13458":"markdown","a9f82aba":"markdown","62e2cc2a":"markdown","af207ab4":"markdown","97b5c05e":"markdown","a03d0427":"markdown","c1458ad6":"markdown","c606dea5":"markdown"},"source":{"29ed8da8":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression","6f74cdc7":"df = pd.read_csv(\"\/kaggle\/input\/name-data-set\/Indian-Name-12.csv\", encoding = 'unicode_escape')","f440e36d":"df.head()","519513a5":"# lowercase name column\ndf[\"Name\"] = df[\"Name\"].str.lower()\n\n# --- create new features ---\n\n# add name_length column\ndf[\"name_length\"] = df[\"Name\"].str.len()\n\n# add starts_with_{alphabet}, ends_with_{alphabet}, and count_{alphabet} columns\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nfor letter in alphabet:\n    df[f\"begins_with_{letter}\"] = df[\"Name\"].apply(lambda n: 1 if n[0] == letter else 0)\n    df[f\"ends_with_{letter}\"] = df[\"Name\"].apply(lambda n: 1 if n[-1] == letter else 0)\n    df[f\"count_{letter}\"] = df[\"Name\"].apply(lambda n: n.count(letter))","0614a635":"df.head()","e5a28c32":"X = df.drop([\"Name\", \"Target\"], axis=1).to_numpy()\ny = df[\"Target\"].to_numpy()\n\nn = X.shape[1]","08a090d7":"print(f\"X: {X.shape}\")\nprint(f\"y: {y.shape}\")","cf1621ff":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)","e37097c8":"print(f\"Training data:  X_train: {X_train.shape}, y_train: {y_train.shape}\")\nprint(f\"Test data:      X_test:  {X_test.shape}, y_test:  {y_test.shape}\")","a0cd9e0c":"X_train[:5, :5]","2d63a874":"scaler = StandardScaler().fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","6185cbe1":"X_train[:5, :5]","b95773b2":"clf = LogisticRegression().fit(X_train, y_train)","7400e39d":"y_pred = clf.predict(X_test)\n\nacc = (np.sum(y_pred == y_test) \/ y_test.size) * 100\nprint(f\"The accuracy of the model on the test set is {round(acc, 2)}%.\")","0056bda0":"def predict_gender(name):\n    # lowercase name\n    name = name.lower()\n    \n    # store features\n    x = []\n    \n    # --- create feature vector ---\n    \n    # add name_length\n    x.append(len(name))\n    \n    # add starts_with_{alphabet}, ends_with_{alphabet}, and count_{alphabet} columns\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in alphabet:\n        x.append(1 if name[0] == letter else 0)\n        x.append(1 if name[-1] == letter else 0)\n        x.append(name.count(letter))\n    \n    # convert feature vector to a numpy array\n    x = np.asarray(x).reshape(1, -1)\n    \n    # scale feature vector\n    x = scaler.transform(x)\n    \n    # make prediction\n    pred = clf.predict(x)[0]\n    pred = \"Male\" if pred == 1 else \"Female\"\n    \n    return pred","ca564109":"name = \"Ishaan\" # you can try out other Indian names\npred = predict_gender(name) \nprint(f\"Predicted gender: {pred}\")","ecacc5d1":"## Inspect Accuracy on Test Set","d7a13458":"## Train Logistic Regression Model","a9f82aba":"## Load Data","62e2cc2a":"## Modify Dataframe \/ Add New Columns","af207ab4":"## Scale \/ Normalize Data","97b5c05e":"## Split Test and Training Data","a03d0427":"## Import Libraries","c1458ad6":"## Create Feature Matrices","c606dea5":"## Predict a Random Name"}}