{"cell_type":{"768c9358":"code","bb16db22":"code","029ae448":"code","fc21c815":"code","f99b57c8":"code","5a80b95c":"code","96ef465a":"code","51a2cf29":"code","a80324c5":"code","ee2deab5":"code","6b17b992":"code","87129150":"code","2c0b497a":"code","9acfc691":"code","9a460fa5":"code","9bc22387":"code","a6401b8a":"code","43803f43":"code","95ddbc54":"code","4b892482":"code","bdb601a2":"code","02962d89":"code","5c69f680":"code","393031bd":"code","e4bea408":"code","2e26e927":"code","850497ed":"code","70c7364a":"code","95dbc2f2":"code","090288f7":"code","b9fa9efe":"code","84a87175":"code","df7df63f":"code","c4ee1205":"code","1bcebcdc":"code","d5a42bcf":"code","09007add":"code","6b4c5f10":"code","95200d8a":"code","ddcb44bb":"code","973d3902":"code","7495c792":"code","cc3e1ded":"code","8a02586a":"code","ba425fac":"code","5e82fa66":"code","37a4c8ae":"code","42af4cfa":"code","a15ca160":"code","62acf4d5":"code","1814ab02":"code","659d02d1":"code","7bbaa3d1":"code","64a1b0bc":"code","fbd1ddd7":"code","cd4a68ce":"code","d709b548":"code","9402dc62":"markdown","74490ed6":"markdown","14cc9683":"markdown","fc023f4c":"markdown","c87e1e69":"markdown","e2417b08":"markdown","5270b753":"markdown","bf1c6c23":"markdown","09a7d797":"markdown","28d3aa79":"markdown","6f14347b":"markdown","c3ef7340":"markdown"},"source":{"768c9358":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bb16db22":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.tree import DecisionTreeClassifier\nfrom collections import Counter\nfrom sklearn.preprocessing import LabelEncoder","029ae448":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","fc21c815":"train.info()","f99b57c8":"train.head(10)","5a80b95c":"import matplotlib.pyplot as plt\nplt.hist(train[\"SibSp\"])\nplt.title(\"SibSp\")\nplt.show()\nplt.hist(train[\"Pclass\"])\nplt.title(\"Pclass\")\nplt.show()\nplt.hist(train[\"Survived\"])\nplt.title(\"Survived\")\nplt.show()\nplt.hist(train[\"Age\"])\nplt.title(\"Age\")\nplt.show()\nplt.hist(train[\"Sex\"])\nplt.title(\"Sex\")\nplt.show()\nplt.hist(train[\"Parch\"])\nplt.title(\"Parch\")\nplt.show()","96ef465a":"train.describe().T","51a2cf29":"train.groupby([\"Sex\"])[[\"Survived\"]].sum()\n","a80324c5":"train.groupby([\"Pclass\"])[[\"Pclass\", \"Survived\"]].mean().sort_values(by = \"Survived\", ascending = False)","ee2deab5":"train.groupby([\"Pclass\"])[[\"Pclass\", \"Survived\", \"Age\"]].mean().sort_values(by = \"Survived\", ascending = False)","6b17b992":"train.groupby([\"Sex\", \"Pclass\"])[[\"Pclass\", \"Survived\", \"Age\"]].mean().sort_values(by = \"Survived\", ascending = False)","87129150":"import seaborn as sns\nsns.swarmplot(x = \"SibSp\", y = \"Fare\", hue = \"Survived\", data = train)\nplt.show()","2c0b497a":"import seaborn as sns\nsns.swarmplot(x = \"Parch\", y = \"Fare\", hue = \"Survived\", data = train)\nplt.show()","9acfc691":"sns.swarmplot(x = \"Pclass\", y = \"Parch\", hue = \"Survived\", data = train)\nplt.show()\nsns.swarmplot(x = \"Pclass\", y = \"SibSp\", hue = \"Survived\", data = train)\nplt.show()","9a460fa5":"sns.pointplot(x = \"SibSp\", y = \"Parch\", data = train)\nplt.show()","9bc22387":"sns.barplot(x = \"Embarked\", y = \"Pclass\", data = train)\nplt.show()","a6401b8a":"sns.barplot(x = \"Embarked\", y = \"Survived\", data = train)\nplt.show()","43803f43":"sns.barplot(x = \"Embarked\", y = \"Pclass\", hue = \"Survived\", data = train)\nplt.show()","95ddbc54":"train.isnull().sum()","4b892482":"combined = pd.concat([train, test], axis = 0)\nprint(\"train shape\", train.shape)\n\nprint(\"combined shape\", combined.shape)\n\nprint(\"test shape\", test.shape)\n","bdb601a2":"combined.isnull().sum()","02962d89":"train.drop(\"Cabin\", axis = 1, inplace = True)\ntest.drop(\"Cabin\", axis = 1, inplace = True)","5c69f680":"combined[combined.Fare.isnull()]","393031bd":"test.Fare.fillna(test[(test.Pclass == 3) & (test.SibSp == 0) & (test.Parch == 0)][\"Fare\"].mean(), inplace = True)\n\ntest.Fare.isnull().sum()","e4bea408":"train.Embarked.fillna(combined.Embarked.mode()[0], inplace = True)\ntrain.Embarked.isnull().sum()","2e26e927":"test.Embarked.fillna(combined.Embarked.mode()[0], inplace = True)\ntest.Embarked.isnull().sum()","850497ed":"train.columns\ntest.columns","70c7364a":"sns.boxplot(x = \"Sex\", y = \"Age\", hue = \"Survived\", data = train)\nplt.show()","95dbc2f2":"combined[(combined.Age.isnull()) & (combined.Sex == \"female\")][[\"Parch\", \"SibSp\", \"Pclass\"]].mean()","090288f7":"combined[(combined.Age.isnull()) & (combined.Sex == \"male\")][[\"Parch\", \"SibSp\", \"Pclass\"]].mean()","b9fa9efe":"combined[(combined.Age.isnull()) & (combined.Sex == \"male\") & (combined.Pclass == 3)]","84a87175":"combined.groupby([\"Sex\", \"Pclass\"])[[\"Pclass\", \"Age\", \"SibSp\", \"Parch\"]].mean()","df7df63f":"combined[(combined.Age.isnull())&(combined.Sex == \"female\") & (combined.Pclass == 1)].isnull().sum()\n\ntrain[\"Age\"][(train.Age.isnull())&(train.Sex == \"female\") & (train.Pclass == 1)] = 37.037594\ntest[\"Age\"][(test.Age.isnull())&(test.Sex == \"female\") & (test.Pclass == 1)] = 37.037594\n","c4ee1205":"combined[\"Age\"][(combined.Sex == \"female\") & (combined.Pclass == 2)].isnull().sum()","1bcebcdc":"train[\"Age\"][(train.Age.isnull())&(train.Sex == \"female\") & (train.Pclass == 2)] = 27.499223\ntest[\"Age\"][(test.Age.isnull())&(test.Sex == \"female\") & (test.Pclass == 2)] = 27.499223\n","d5a42bcf":"combined[\"Age\"][(combined.Age.isnull())&(combined.Sex == \"female\") & (combined.Pclass == 3)].isnull().sum()","09007add":"train[\"Age\"][(train.Age.isnull())&(train.Sex == \"female\") & (train.Pclass == 3)] = 22.185329\ntest[\"Age\"][(test.Age.isnull())&(test.Sex == \"female\") & (test.Pclass == 3)] = 22.185329\n","6b4c5f10":"train[\"Age\"][(train.Age.isnull())&(train.Sex == \"male\") & (train.Pclass == 1)] = 41.029272\ntest[\"Age\"][(test.Age.isnull())&(test.Sex == \"male\") & (test.Pclass == 1)] = 41.029272\n\ntrain[\"Age\"][(train.Age.isnull())&(train.Sex == \"male\") & (train.Pclass == 2)] = 30.815380\ntest[\"Age\"][(test.Age.isnull())&(test.Sex == \"male\") & (test.Pclass == 2)] = 30.815380\n\ntrain[\"Age\"][(train.Age.isnull())&(train.Sex == \"male\") & (train.Pclass == 3)] = 25.962264\ntest[\"Age\"][(test.Age.isnull())&(test.Sex == \"male\") & (test.Pclass == 3)] = 25.962264","95200d8a":"train.isnull().sum()","ddcb44bb":"test.isnull().sum()","973d3902":"liste = [\"Fare\", \"SibSp\", \"Age\"]\nfor n in liste:\n    sns.boxplot(combined[n])\n    plt.show()","7495c792":"liste = [\"Fare\", \"SibSp\", \"Age\", \"Parch\"]\noutlierList = []\nfor n in liste:\n    q1 = combined[n].quantile(0.25)\n    q3 = combined[n].quantile(0.75)\n    iqr = 1.5*(q3-q1)\n    alt = q1-(1.5*iqr)\n    ust = q3 + (1.5*iqr)\n    outliers = (combined[liste][(combined[n]<alt)|(combined[n]>ust)])\n    outlierList.append(outliers)\nprint(outlierList)\nprint(Counter(outliers))\n   ","cc3e1ded":"train.head()","8a02586a":"train.drop([\"Ticket\", \"PassengerId\", \"Name\"], axis = 1, inplace = True)\ntrain.head()\ntest.drop([\"Ticket\",\"PassengerId\",\"Name\"], axis = 1, inplace = True)","ba425fac":"lbe = LabelEncoder()\ntrain[\"Sex2\"] = lbe.fit_transform(train[\"Sex\"])\ntest[\"Sex2\"] = lbe.fit_transform(test[\"Sex\"])","5e82fa66":"train.head()\ntest.head()","37a4c8ae":"# the highest survival rate of embarked featues: C>S>Q, threfore I chose to replace them accordingly from 1 to 3 \ntrain[\"Embarked\"] = train[\"Embarked\"].map({'C': 3, 'S': 2, 'Q': 1})\ntest[\"Embarked\"] = test[\"Embarked\"].map({'C': 3, 'S': 2, 'Q': 1})","42af4cfa":"train = train.drop(\"Sex\", axis = 1)\ntest = test.drop(\"Sex\", axis = 1)","a15ca160":"train.head()","62acf4d5":"X_train = train.drop(\"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_test = test\nX_test.isnull().sum().sum()","1814ab02":"# Logistic Regression\nlg = LogisticRegression()\nlg.fit(X_train, y_train)\ny_pred = lg.predict(X_test)\nlg_score = round(lg.score(X_train, y_train)*100,2)\n\nlg_score","659d02d1":"# SVC\nsvc = SVC()\nsvc.fit(X_train, y_train)\ny_pred = svc.predict(X_test)\nsvc_score = round(svc.score(X_train, y_train)*100,2)\n\nsvc_score","7bbaa3d1":"# Gausian Naive Bayes\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)\ny_pred = gnb.predict(X_test)\ngnb_score = round(gnb.score(X_train, y_train)*100,2)\n\ngnb_score","64a1b0bc":"# KNN\nknn = KNeighborsClassifier()\nknn.fit(X_train, y_train)\ny_pred = knn.predict(X_test)\nknn_score = round(knn.score(X_train, y_train)*100,2)\n\nknn_score","fbd1ddd7":"# Decision Tree\ndt = DecisionTreeClassifier()\ndt.fit(X_train, y_train)\ny_pred = dt.predict(X_test)\ndt_score = round(dt.score(X_train, y_train)*100,2)\n\n\ndt_score \n","cd4a68ce":"# Random Forest\nrf = RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\nrf_score = round(rf.score(X_train, y_train)*100,2)\n\nrf_score","d709b548":"score_table = pd.Series({\"Logistic Regression\": lg_score, \"SVC\": svc_score, \"Gausian Naive Bayes\": gnb_score,\n                        \"KNN\": knn_score, \"Decision Tree\": dt_score, \"Random Forest\": rf_score})\nson = pd.DataFrame(score_table, columns = [\"Score\"])\nson.sort_values(\"Score\", ascending = False)","9402dc62":"## Age","74490ed6":"It shows therea are one outliers of each feature so I won't remove them from train and test","14cc9683":"## Converting categorical data to numerical ones","fc023f4c":"It is also clear that Parch and Sibsp effect Survived and they are also going to be included in the model.","c87e1e69":"## Missing Values & Outliers","e2417b08":"Age has also a distinctive effect on Survived","5270b753":"## Cabin","bf1c6c23":"## Outliers","09a7d797":"We can conclude that Pclass and Sex are important parameters for Survived rate and therefore should be used as features in the model we are going to build.","28d3aa79":"# Modeling","6f14347b":"## Fare","c3ef7340":"## Embarked"}}