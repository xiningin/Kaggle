{"cell_type":{"4d60b707":"code","6d17cb5f":"code","2d646d78":"code","de31610b":"code","ea452a41":"code","e0a263d5":"code","a13568a1":"code","891921c8":"code","0e275ec8":"markdown","af2febab":"markdown","8cdc5936":"markdown","77eba393":"markdown","3a02aeb1":"markdown","ccdde7db":"markdown","8999ea84":"markdown","c2a91671":"markdown","c59272ec":"markdown"},"source":{"4d60b707":"# 1. Enable Internet in the Kernel (Settings side pane)\n\n# 2. Curl cache may need purged if v0.1.5 cannot be found (uncomment if needed). \n# !curl -X PURGE https:\/\/pypi.org\/simple\/kaggle-environments\n\n# ConnectX environment was defined in v0.1.5\n!pip install 'kaggle-environments>=0.1.6'","6d17cb5f":"from kaggle_environments import evaluate, make, utils\n\nenv = make(\"connectx\", debug=True)\nenv.render()","2d646d78":"# connect my 4 or stop opponemt's 4\n# choose the central column if it is not full\n# else, randomly choose a not-full column\n\ndef my_agent(observation, configuration):\n    from random import choice # Note: import must be put inside function!\n    empty = 0\n    me = observation.mark # player mark: either 1 or 2\n    enemy = 3 - me # 1 + 2 = 3   \n    columns = configuration.columns # 7\n    central_column = (columns - 1) \/\/ 2\n    rows = configuration.rows # 6\n    board = observation.board    \n    col = 0 # initialized to 0\n    \n    # get available columns\n    available_columns = []\n    for col in range(columns):\n        if (board[col] == 0):\n            available_columns.append(col)\n    \n    # get available rows\n    available_rows = [-1] * columns # -1 means no available row\n    for col in available_columns:\n        available_row = 0    \n        for row in range(rows):            \n            location = (row * columns) + col \n            if (board[location] == 0):\n                available_row = row\n            else:\n                break\n        available_rows[col] = available_row\n\n    def get_up(number, col):\n        row = available_rows[col]\n        location = (row * columns) + col\n        new_row = row - number\n        if (0 <= new_row < rows):\n            new_location = location - number*columns        \n            new = board[new_location]\n        else:\n            # outside of board\n            new = -1\n        return new\n\n    def get_down(number, col):\n        row = available_rows[col]\n        location = (row * columns) + col\n        new_row = row + number\n        if (new_row < rows):\n            new_location = location + number*columns        \n            new = board[new_location]\n        else:\n            # outside of board\n            new = -1\n        return new\n\n    def get_right(number, col):\n        row = available_rows[col]\n        location = (row * columns) + col\n        new_col = col + number\n        if (new_col < columns):\n            new_location = location + number        \n            new = board[new_location]\n        else:\n            # outside of board\n            new = -1\n        return new\n\n    def get_left(number, col):\n        row = available_rows[col]\n        location = (row * columns) + col\n        new_col = col - number\n        if (new_col >= 0):\n            new_location = location - number        \n            new = board[new_location]\n        else:\n            # outside of board\n            new = -1\n        return new\n\n    def get_left_down(number, col):\n        row = available_rows[col]\n        location = (row * columns) + col\n        new_col = col - number\n        new_row = row + number\n        if ((new_col >= 0) and (new_row < rows)):\n            new_location = location + number*columns - number        \n            new = board[new_location]\n        else:\n            # outside of board\n            new = -1\n        return new\n\n    def get_right_down(number, col):\n        row = available_rows[col]\n        location = (row * columns) + col\n        new_col = col + number\n        new_row = row + number\n        if ((new_col < columns) and (new_row < rows)):\n            new_location = location + number*columns + number        \n            new = board[new_location]\n        else:\n            # outside of board\n            new = -1\n        return new\n\n    def get_left_up(number, col):\n        row = available_rows[col]\n        location = (row * columns) + col\n        new_col = col - number\n        new_row = row - number\n        if ((new_col >= 0) and (new_row >= 0)):\n            new_location = location - number*columns - number        \n            new = board[new_location]\n        else:\n            # outside of board\n            new = -1\n        return new\n\n    def get_right_up(number, col):\n        row = available_rows[col]\n        location = (row * columns) + col\n        new_col = col + number\n        new_row = row - number\n        if ((new_col < columns) and (new_row >= 0)):\n            new_location = location - number*columns + number        \n            new = board[new_location]\n        else:\n            # outside of board\n            new = -1\n        return new\n\n    def connect(marker, number):\n        for col in available_columns:\n            up1 = get_up(1, col)\n            up2 = get_up(2, col)\n            up3 = get_up(3, col)\n        \n            down1 = get_down(1, col)\n            down2 = get_down(2, col)\n            down3 = get_down(3, col)\n        \n            right1 = get_right(1, col)\n            right2 = get_right(2, col)\n            right3 = get_right(3, col)            \n            \n            left1 = get_left(1, col)\n            left2 = get_left(2, col)\n            left3 = get_left(3, col)            \n\n            left_down1 = get_left_down(1, col)\n            left_down2 = get_left_down(2, col)\n            left_down3 = get_left_down(3, col)            \n\n            right_down1 = get_right_down(1, col)\n            right_down2 = get_right_down(2, col)\n            right_down3 = get_right_down(3, col)            \n\n            left_up1 = get_left_up(1, col)\n            left_up2 = get_left_up(2, col)\n            left_up3 = get_left_up(3, col)            \n\n            right_up1 = get_right_up(1, col)\n            right_up2 = get_right_up(2, col)\n            right_up3 = get_right_up(3, col)            \n            \n            if (number == 4): # connect my 4 or prevent enemy 4\n                # down 3\n                if ((down1 == marker) and (down2 == marker) and (down3 == marker)):\n                    return col\n        \n                # left 3\n                if ((left1 == marker) and (left2 == marker) and (left3 == marker)):\n                    return col\n        \n                # left 2 right 1\n                if ((left1 == marker) and (left2 == marker) and (right1 == marker)):\n                    return col\n        \n                # left 1 right 2\n                if ((left1 == marker) and (right1 == marker) and (right2 == marker)):\n                    return col\n\n                # right 3\n                if ((right1 == marker) and (right2 == marker) and (right3 == marker)):\n                    return col\n        \n                # left_down 3\n                if ((left_down1 == marker) and (left_down2 == marker) and (left_down3 == marker)):\n                    return col\n        \n                # left_down 2 right_up 1\n                if ((left_down1 == marker) and (left_down2 == marker) and (right_up1 == marker)):\n                    return col\n        \n                # left_down 1 right_up 2\n                if ((left_down1 == marker) and (right_down1 == marker) and (right_down2 == marker)):\n                    return col\n        \n                # right_up 3\n                if ((right_up1 == marker) and (right_up2 == marker) and (right_up3 == marker)):\n                    return col\n    \n                # right_down 3\n                if ((right_down1 == marker) and (right_down2 == marker) and (right_down3 == marker)):\n                    return col\n\n                # right_down 2 left_up 1\n                if ((right_down1 == marker) and (right_down2 == marker) and (left_up1 == marker)):\n                    return col\n\n                # right_down 1 left_up 2\n                if ((right_down1 == marker) and (left_up1 == marker) and (left_up2 == marker)):\n                    return col\n\n                # left_up 3\n                if ((left_up1 == marker) and (left_up2 == marker) and (left_up3 == marker)):\n                    return col\n                \n            elif (number == 3): # connect my 3 or prevent enemy 3\n                # two-way 3\n                # empty 1 left 2 empty 1\n                # empty 1 left 2 empty 1 \n                if ((left3 == empty) and (left2 == marker) and (left1 == marker) and (right1 == empty)):\n                    return col\n\n                # empty 1 right 2 empty 1\n                if ((left1 == empty) and (right1 == marker) and (right2 == marker) and (right3 == empty)):\n                    return col\n\n                # empty 1 left 1 right 1 empty 1 \n                if ((left2 == empty) and (left1 == marker) and (right1 == marker) and (right2 == empty)):\n                    return col\n\n                # empty 1 left_down 2 empty 1 \n                if ((left_down3 == empty) and (left_down2 == marker) and (left_down1 == marker) and (right_up1 == empty)):\n                    return col\n\n                # empty 1 right_down 2 empty 1 \n                if ((left_up1 == empty) and (right_down1 == marker) and (right_down2 == marker) and (right_down3 == empty)):\n                    return col\n\n                # empty 1 left_up 2 empty 1\n                if ((left_up3 == empty) and (left_up2 == marker) and (left_up1 == marker) and (right_down1 == empty)):\n                    return col\n        \n                # empty 1 right_up 2 empty 1\n                if ((left_down1 == empty) and (right_up1 == marker) and (right_up2 == marker) and (right_up3 == empty)):\n                    return col\n                \n                # one-way 3\n                # empty 1 down 2\n                if ((up1 == empty) and (down1 == marker) and (down2 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n\n                # empty 1 left 2\n                if ((left3 == empty) and (left2 == marker) and (left1 == marker)):\n                    return col\n\n                # left 2 empty 1 \n                if ((left2 == marker) and (left1 == marker) and (right1 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n\n                # empty 1 right 2\n                if ((left1 == empty) and (right1 == marker) and (right2 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n\n                # right 2 empty 1 \n                if ((right1 == marker) and (right2 == marker) and (right3 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n\n                # empty 1 left 1 right 1\n                if ((left2 == empty) and (left1 == marker) and (right1 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n\n                # left 1 right 1 empty 1 \n                if ((left1 == marker) and (right1 == marker) and (right2 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n\n                # empty 1 left_down 2\n                if ((left_down3 == empty) and (left_down2 == marker) and (left_down1 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n\n                # left_down 2 empty 1 \n                if ((left_down2 == marker) and (left_down1 == marker) and (right_up1 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n\n                # empty 1 right_down 2\n                if ((left_up1 == empty) and (right_down1 == marker) and (right_down2 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n\n                # right_down 2 empty 1 \n                if ((right_down1 == marker) and (right_down2 == marker) and (right_down3 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n\n                # empty 1 left_up 2\n                if ((left_up3 == empty) and (left_up2 == marker) and (left_up1 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n        \n                # left_up 2 empty 1 \n                if ((left_up2 == marker) and (left_up1 == marker) and (right_down1 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n        \n                # empty 1 right_up 2\n                if ((left_down1 == empty) and (right_up1 == marker) and (right_up2 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n                \n                # right_up 2 empty 1 \n                if ((right_up1 == marker) and (right_up2 == marker) and (right_up3 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n                \n            elif (number == 2): # connect my 2 or prevent enemy 2\n                # empty 2 down 1\n                if ((up2 == empty) and (up1 == empty) and (down1 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n    \n                # empty 2 left 1\n                if ((left3 == empty) and (left2 == empty) and (left1 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n        \n                # left 1 empty 2 \n                if ((left1 == marker) and (right1 == empty) and (right2 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n        \n                # empty 2 right 1\n                if ((left2 == empty) and (left1 == empty) and (right1 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n        \n                # right 1 empty 2 \n                if ((right1 == marker) and (right2 == empty) and (right3 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n        \n                # empty 2 left_down 1\n                if ((left_down3 == empty) and (left_down2 == empty) and (left_down1 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n    \n                # left_down 1 empty 2 \n                if ((left_down1 == marker) and (right_up1 == empty) and (right_up2 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n    \n                # empty 2 right_down 1\n                if ((left_up2 == empty) and (left_up1 == empty) and (right_down1 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n\n                # right_down 1 empty 2 \n                if ((right_down1 == marker) and (right_down2 == empty) and (right_down3 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n\n                # empty 2 left_up 1\n                if ((left_up3 == empty) and (left_up2 == empty) and (left_up1 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n        \n                # left_up 1 empty 2 \n                if ((left_up1 == marker) and (right_down1 == empty) and (right_down2 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n        \n                # empty 2 right_up 1\n                if ((left_down2 == empty) and (left_down1 == empty) and (right_up1 == marker) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n            \n                # right_up 1 empty 2 \n                if ((right_up1 == marker) and (right_up2 == empty) and (right_up3 == empty) and (left1 != (3 - marker)) and (right1 != (3 - marker))):\n                    return col\n            \n        col = -1 # no col is found\n        return col\n\n    col = -1\n    col = connect(me, 4) # connect my 4\n    if (col != -1): \n        return col\n    col = connect(enemy, 4) # prevent enemy 4\n    if (col != -1): \n        return col\n    col = connect(me, 3) # connect my 3\n    if (col != -1): \n        return col\n    col = connect(enemy, 3) # prevent enemy 3\n    if (col != -1): \n        return col\n    col = connect(me, 2) # connect my 2\n    if (col != -1): \n        return col\n    col = connect(enemy, 2) # prevent enemy 2\n    if (col != -1): \n        return col\n\n    # choose central column if it is not full\n    if (board[central_column] == 0):\n        return central_column\n    \n    # choose random column\n    col = choice([c for c in available_columns])\n    return col","de31610b":"env.reset()\n# Play as the first agent against default \"random\" agent.\n#env.run([my_agent, \"random\"])\n\n# \"negamax\" is very strong!\nenv.run([my_agent, \"negamax\"])\n\n# manually play against your agent!\n# Play as the second play (in ipython notebooks only).\n#env.play([my_agent, None])\n\nenv.render(mode=\"ipython\", width=400, height=360)","ea452a41":"# Play as first position against random agent.\ntrainer = env.train([None, \"random\"])\n\nobservation = trainer.reset()\n\nwhile not env.done:\n    my_action = my_agent(observation, env.configuration)\n    print(\"My Action\", my_action)\n    observation, reward, done, info = trainer.step(my_action)\n    env.render(mode=\"ipython\", width=100, height=90, header=False, controls=False)\nenv.render()","e0a263d5":"def mean_reward(rewards):\n    return sum(r[0] for r in rewards) \/ sum(r[0] + r[1] for r in rewards)\n\n# Run multiple episodes to estimate its performance.\nprint(\"My Agent vs Random Agent:\", mean_reward(evaluate(\"connectx\", [my_agent, \"random\"], num_episodes=10)))\nprint(\"Random Agent vs My Agent:\", mean_reward(evaluate(\"connectx\", [\"random\", my_agent], num_episodes=10)))\nprint(\"My Agent vs Negamax Agent:\", mean_reward(evaluate(\"connectx\", [my_agent, \"negamax\"], num_episodes=10)))\nprint(\"Negamax Agent vs My Agent:\", mean_reward(evaluate(\"connectx\", [\"negamax\", my_agent], num_episodes=10)))","a13568a1":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(my_agent, \"submission.py\")","891921c8":"# Note: Stdout replacement is a temporary workaround.\nimport sys\nout = sys.stdout\nsubmission = utils.read_file(\"\/kaggle\/working\/submission.py\")\nagent = utils.get_last_callable(submission)\nsys.stdout = out\n\nenv = make(\"connectx\", debug=True)\nenv.run([agent, agent])\nprint(\"Success!\" if env.state[0].status == env.state[1].status == \"DONE\" else \"Failed...\")","0e275ec8":"# Validate Submission\nPlay your submission against itself.  This is the first episode the competition will run to weed out erroneous agents.\n\nWhy validate? This roughly verifies that your submission is fully encapsulated and can be run remotely.","af2febab":"# Test your Agent","8cdc5936":"# Create an Agent\n\nTo create the submission, an agent function should be fully encapsulated (no external dependencies).  \n\nWhen your agent is being evaluated against others, it will not have access to the Kaggle docker image.  Only the following can be imported: Python Standard Library Modules, gym, numpy, scipy, pytorch (1.3.1, cpu only), and more may be added later.\n\n","77eba393":"# Debug\/Train your Agent","3a02aeb1":"# Install kaggle-environments","ccdde7db":"# Evaluate your Agent","8999ea84":"# Create ConnectX Environment","c2a91671":"# Write Submission File\n\n","c59272ec":"# Submit to Competition\n\n1. Commit this kernel.\n2. View the commited version.\n3. Go to \"Data\" section and find submission.py file.\n4. Click \"Submit to Competition\"\n5. Go to [My Submissions](https:\/\/kaggle.com\/c\/connectx\/submissions) to view your score and episodes being played."}}