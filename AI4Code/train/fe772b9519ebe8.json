{"cell_type":{"ac2ae542":"code","ce2fc539":"code","94fe3e4d":"code","8b685192":"code","9af005d0":"code","557c7f66":"code","bcfcea18":"code","5486c9c3":"code","d5aa9584":"code","0685fa47":"code","2026d76c":"code","b512c568":"code","4ef3c778":"code","813a00b4":"code","afc658d1":"code","94ee3e0a":"code","95c3452e":"code","cc1dfd97":"code","0a86677b":"code","4daa6da9":"code","de9006fc":"markdown","9e6da953":"markdown"},"source":{"ac2ae542":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom subprocess import check_output\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","ce2fc539":"# Read training and test data files\ntrain = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsample_submission = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","94fe3e4d":"train.head()","8b685192":"test.head()","9af005d0":"print(train.shape) #Printing the shape of the dataset \nprint(test.shape) #printing the shape of test dataset","557c7f66":"#Printing the dimension of train_x and train_y\ntrain_y = train['label'].astype('int32')\ntrain_x = train.drop(['label'],axis = 1).astype('int32')\ntest_x = test.astype('int32')\n\n#Printing the shape of train_x and train_y\ntrain_x.shape, train_y.shape, test_x.shape","bcfcea18":"#Reshaping the image \ntrain_x = train_x.values.reshape(-1,28,28,1)\n#normalisation\ntrain_x = train_x\/255.0\ntest_x = test_x.values.reshape(-1,28,28,1)\ntest_x=test_x\/255.0\n\n#checking the updated shape \ntrain_x.shape, test_x.shape","5486c9c3":"plt.imshow(test_x[900].reshape(28,28),cmap = matplotlib.cm.binary)\nplt.show()","d5aa9584":"fig = plt.figure(figsize = (8, 8))\nfor i in range(9):\n    plt.subplot(330 + 1 + i)\n    plt.imshow(train_x[i])\nplt.show()","0685fa47":"#convert label into categorical \ntrain_y = tf.keras.utils.to_categorical(train_y,10)\ntrain_y.shape  #Printing the shape ","2026d76c":"#Printing the Labels for top 5 rows\nprint(train['label'].head())  #checking Data type ","b512c568":"#Printing Categorical label\nprint(train_y[0:5,:])","4ef3c778":"#Defining the Model\nmodel = tf.keras.models.Sequential([\n      tf.keras.layers.Conv2D(32,(3,3),activation = 'relu', input_shape=(28,28,1)),\n      tf.keras.layers.Conv2D(32,(3,3),activation = 'relu'),\n      tf.keras.layers.MaxPooling2D(2,2),\n      tf.keras.layers.Conv2D(64,(3,3),activation = 'relu', padding = 'Same'),\n      tf.keras.layers.Conv2D(64,(3,3),activation = 'relu', padding = 'Same'),\n      tf.keras.layers.MaxPooling2D(pool_size = (2,2), strides = (2,2)),\n      tf.keras.layers.Dropout(0.25),\n      tf.keras.layers.Conv2D(64,(3,3),activation = 'relu', padding = 'Same'),\n      tf.keras.layers.Conv2D(64,(3,3),activation = 'relu', padding = 'Same'),\n      tf.keras.layers.MaxPooling2D(pool_size=(2,2),strides=(2,2)),\n      tf.keras.layers.Dropout(0.25),\n      tf.keras.layers.Flatten(),\n      tf.keras.layers.Dense(256, activation='relu'),\n      tf.keras.layers.Dense(256,activation='relu'),\n      tf.keras.layers.Dropout(0.50),\n      tf.keras.layers.Dense(10, activation='softmax')\n                         \n])\nmodel.summary()","813a00b4":"#Defining the callback function \n\nclass myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs={}):\n    if(logs.get('accuracy') > 0.999):\n      print(\"\\nReached 99.9% accuracy!\")\n      self.model.stop_training = True\n\ncallbacks = myCallback() ","afc658d1":"#Compiling and model training\n#BatchSize = 50, epochs = 20 and optimizer = adam\nOptimizer = tf.keras.optimizers.Adam(\n    learning_rate = 0.0005,\n    beta_1=0.9,\n    beta_2=0.999,\n    epsilon=1e-07,\n    name='Adam'\n)\nmodel.compile(optimizer=Optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(train_x, train_y, batch_size =50, epochs=20, callbacks=[callbacks])","94ee3e0a":"results = model.predict(test_x)\n\n#index with the maximum probability\nresults = np.argmax(results,axis=1)\nresults = pd.Series(results,name=\"Label\")","95c3452e":"results","cc1dfd97":"submission = pd.concat([pd.Series(range(1,28001), name=\"ImageId\"),results],axis=1)","0a86677b":"submission","4daa6da9":"submission.to_csv(\"submission.csv\", index=False)","de9006fc":"# Defining Model","9e6da953":"# Reading The Data"}}