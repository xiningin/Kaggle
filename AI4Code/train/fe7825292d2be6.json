{"cell_type":{"8b150c96":"code","74da0fde":"code","868e6aaa":"code","c4b1129e":"code","d494473a":"code","dae7d5ce":"code","f61dec7d":"code","a35cbb9c":"code","93073ecf":"code","fd0cbaf2":"code","4d70a3f9":"code","cc9df158":"code","d8da8cf7":"code","e8c53591":"code","ffd63179":"code","0b027460":"code","ebc391fb":"code","18b86e7b":"code","c0ef8f0b":"code","c7a95f01":"code","8e0042af":"code","d96d0df8":"code","9befb536":"code","3630c3b0":"code","c93efb06":"code","9368fdb9":"code","3fc23a2f":"code","c1473c74":"code","96e3826b":"code","1d62e596":"code","2b001f7d":"code","bb4e2dd0":"code","e52b2330":"code","1e499557":"code","d7598587":"code","ebcb4b62":"code","d93839a4":"code","52dba91c":"code","b9059632":"code","a8af5037":"code","9abfb23f":"code","7e82a60f":"code","b742e726":"markdown","0b664b6c":"markdown"},"source":{"8b150c96":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","74da0fde":"train_df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv',index_col=0)\ntest_df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col=0)\ntrain_df.head()","868e6aaa":"missing_data = train_df.isnull().sum().sort_values(ascending=False).head(20)\npercentage_missing_data = train_df.isnull().sum()\/train_df.isnull().count().sort_values(ascending = False) * 100\nmissing_values = pd.concat([missing_data, percentage_missing_data], axis=1, keys=['missing_data', 'percentage'])\nmissing_values.head(20)","c4b1129e":"train_df.drop(['MiscFeature', 'PoolQC', 'Alley', 'Fence'], axis=1, inplace=True)\ntrain_df.shape","d494473a":"# Filling the numerical Null values with mean\ntrain_df['LotFrontage'] = train_df['LotFrontage'].fillna(train_df['LotFrontage'].mean())","dae7d5ce":"## Filling the categorical null values with mode\ntrain_df['GarageCond'] = train_df['GarageCond'].fillna(train_df['GarageCond'].mode()[0])\ntrain_df['FireplaceQu'] = train_df['FireplaceQu'].fillna(train_df['FireplaceQu'].mode()[0])\ntrain_df['GarageType'] = train_df['GarageType'].fillna(train_df['GarageType'].mode()[0])\ntrain_df['GarageYrBlt'] = train_df['GarageYrBlt'].fillna(train_df['GarageYrBlt'].mode()[0])\ntrain_df['GarageFinish'] = train_df['GarageFinish'].fillna(train_df['GarageFinish'].mode()[0])\ntrain_df['GarageQual'] = train_df['GarageQual'].fillna(train_df['GarageQual'].mode()[0])\ntrain_df['BsmtExposure'] = train_df['BsmtExposure'].fillna(train_df['BsmtExposure'].mode()[0])\ntrain_df['BsmtFinType2'] = train_df['BsmtFinType2'].fillna(train_df['BsmtFinType2'].mode()[0])\ntrain_df['BsmtFinType1'] = train_df['BsmtFinType1'].fillna(train_df['BsmtFinType1'].mode()[0])\ntrain_df['BsmtCond'] = train_df['BsmtCond'].fillna(train_df['BsmtCond'].mode()[0])\ntrain_df['BsmtQual'] = train_df['BsmtQual'].fillna(train_df['BsmtQual'].mode()[0])\ntrain_df['MasVnrArea'] = train_df['MasVnrArea'].fillna(train_df['MasVnrArea'].mode()[0])\ntrain_df['MasVnrType'] = train_df['MasVnrType'].fillna(train_df['MasVnrType'].mode()[0])\ntrain_df['Electrical'] = train_df['Electrical'].fillna(train_df['Electrical'].mode()[0])","f61dec7d":"# Checking the shape of the train dataset\ntrain_df.shape","a35cbb9c":"## Handling the test dataset\ntest_df.head()","93073ecf":"missing_test_data = test_df.isnull().sum().sort_values(ascending=False)\npercentage_mtd = test_df.isnull().sum()\/test_df.isnull().count().sort_values(ascending=False)*100\nmissing_test_values = pd.concat([missing_test_data, percentage_mtd], axis=1, keys=['missing_test_data', 'percentage'])\nmissing_test_values.head(34)","fd0cbaf2":"test_df.info()","4d70a3f9":"\ntest_df.drop(['PoolQC', 'Fence', 'Alley', 'MiscFeature'], axis=1, inplace=True)","cc9df158":"test_df.shape","d8da8cf7":"## Fill Missing Numerical Values with mean\ntest_df['LotFrontage'] = test_df['LotFrontage'].fillna(test_df['LotFrontage'].mean())","e8c53591":"## Fill Missing Categorical Values with mode\ntest_df['FireplaceQu'] = test_df['FireplaceQu'].fillna(test_df['FireplaceQu'].mode()[0])\ntest_df['GarageCond'] = test_df['GarageCond'].fillna(test_df['GarageCond'].mode()[0])\ntest_df['GarageFinish'] = test_df['GarageFinish'].fillna(test_df['GarageFinish'].mode()[0])\ntest_df['GarageYrBlt'] = test_df['GarageYrBlt'].fillna(test_df['GarageYrBlt'].mode()[0])\ntest_df['GarageQual'] = test_df['GarageQual'].fillna(test_df['GarageQual'].mode()[0])\ntest_df['GarageType'] = test_df['GarageType'].fillna(test_df['GarageType'].mode()[0])\ntest_df['BsmtCond'] = test_df['BsmtCond'].fillna(test_df['BsmtCond'].mode()[0])\ntest_df['BsmtExposure'] = test_df['BsmtExposure'].fillna(test_df['BsmtExposure'].mode()[0])\ntest_df['BsmtQual'] = test_df['BsmtQual'].fillna(test_df['BsmtQual'].mode()[0])\ntest_df['BsmtFinType1'] = test_df['BsmtFinType1'].fillna(test_df['BsmtFinType1'].mode()[0])\ntest_df['BsmtFinType2'] = test_df['BsmtFinType2'].fillna(test_df['BsmtFinType2'].mode()[0])\ntest_df['MasVnrType'] = test_df['MasVnrType'].fillna(test_df['MasVnrType'].mode()[0])\ntest_df['MasVnrArea'] = test_df['MasVnrArea'].fillna(test_df['MasVnrArea'].mode()[0])\ntest_df['MSZoning'] = test_df['MSZoning'].fillna(test_df['MSZoning'].mode()[0])\ntest_df['BsmtHalfBath'] = test_df['BsmtHalfBath'].fillna(test_df['BsmtHalfBath'].mode()[0])\ntest_df['Utilities'] = test_df['Utilities'].fillna(test_df['Utilities'].mode()[0])\ntest_df['Functional'] = test_df['Functional'].fillna(test_df['Functional'].mode()[0])\ntest_df['BsmtFullBath'] = test_df['BsmtFullBath'].fillna(test_df['BsmtFullBath'].mode()[0])\ntest_df['BsmtFinSF2'] = test_df['BsmtFinSF2'].fillna(test_df['BsmtFinSF2'].mode()[0])\ntest_df['BsmtFinSF1'] = test_df['BsmtFinSF1'].fillna(test_df['BsmtFinSF1'].mode()[0])\ntest_df['BsmtUnfSF'] = test_df['BsmtUnfSF'].fillna(test_df['BsmtUnfSF'].mode()[0])\ntest_df['TotalBsmtSF'] = test_df['TotalBsmtSF'].fillna(test_df['TotalBsmtSF'].mode()[0])\ntest_df['Exterior2nd'] = test_df['Exterior2nd'].fillna(test_df['Exterior2nd'].mode()[0])\ntest_df['SaleType'] = test_df['SaleType'].fillna(test_df['SaleType'].mode()[0])\ntest_df['Exterior1st'] = test_df['Exterior1st'].fillna(test_df['Exterior1st'].mode()[0])\ntest_df['KitchenQual'] = test_df['KitchenQual'].fillna(test_df['KitchenQual'].mode()[0])\ntest_df['GarageArea'] = test_df['GarageArea'].fillna(test_df['GarageArea'].mode()[0])\ntest_df['GarageCars'] = test_df['GarageCars'].fillna(test_df['GarageCars'].mode()[0])","ffd63179":"test_df.isnull().sum().max()","0b027460":"frames = [train_df, test_df]\nfull_data = pd.concat(frames, axis=0)\nfull_data['SalePrice']","ebc391fb":"full_data = pd.get_dummies(full_data, drop_first=True)","18b86e7b":"full_data.head()","c0ef8f0b":"## Transformation\n# full_data['SalePrice'] = np.log(full_data['SalePrice'])\nfull_data['GrLivArea'] = np.log(full_data['GrLivArea'])","c7a95f01":"full_data['HasBsmt'] = pd.Series(len(full_data['TotalBsmtSF']), index=full_data.index)\nfull_data['HasBsmt'] = 0\nfull_data.loc[full_data['TotalBsmtSF'] > 0, 'HasBsmt'] = 1\nfull_data.loc[full_data['HasBsmt']==1, 'TotalBsmtSF'] = np.log(full_data['TotalBsmtSF'])\n# train['HasBsmt'].head(20)\nfull_data.drop(['HasBsmt'], axis=1, inplace=True)","8e0042af":"full_data.head()","d96d0df8":"df_train = full_data.iloc[:1460, :]\ndf_test = full_data.iloc[1460:,:]","9befb536":"df_train.shape","3630c3b0":"df_test.shape","c93efb06":"df_test['SalePrice'].isnull().sum()\n# df_test['SalePrice'].head(50)","9368fdb9":"df_test.drop(['SalePrice'], axis=1, inplace=True)","3fc23a2f":"df_test.shape","c1473c74":"df_train['SalePrice']","96e3826b":"y_train = df_train['SalePrice']\ny_train.head()\ny_train.shape","1d62e596":"x_train = df_train.drop(['SalePrice'], axis=1)\nx_train.head()","2b001f7d":"import xgboost as xgb\nfrom sklearn.metrics import mean_squared_error","bb4e2dd0":"xg_reg = xgb.XGBRegressor()\nxg_reg","e52b2330":"from sklearn.model_selection import RandomizedSearchCV\n","1e499557":"#Hyperparameter optimization\nmax_depth = [1,3,5,7,9,11,13,15,17,19,21]\nn_estimators = [100, 200, 300, 400, 500, 600, 700]\nbooster = ['gbtree', 'gblinear']\nlearning_rate = [0.01, 0.05, 0.1, 0.2,0.3,0.4,0.5,0.6,0.7,0.8]\nmin_child_weight = [1,3,5,7,9,11,13,15,17,19,21]\n\nhyperparameter_grid = {\n    \"max_depth\" : max_depth,\n    \"n_estimators\" : n_estimators,\n    \"booster\" : booster,\n    \"learning_rate\" : learning_rate,\n    \"min_child_weight\" : min_child_weight\n    \n}","d7598587":"random_cv = RandomizedSearchCV(estimator = xg_reg, param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_absolute_error',n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)","ebcb4b62":"random_cv.fit(x_train, y_train)","d93839a4":"random_cv.best_estimator_","52dba91c":"xg_reg = xgb.XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints='',\n             learning_rate=0.05, max_delta_step=0, max_depth=5,\n             min_child_weight=5, missing=None, monotone_constraints='()',\n             n_estimators=700, n_jobs=0, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method='exact', validate_parameters=1, verbosity=None)","b9059632":"xg_reg.fit(x_train, y_train)","a8af5037":"preds = xg_reg.predict(df_test)\npreds","9abfb23f":"pred=pd.DataFrame(preds)\nsubdf = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndatasets=pd.concat([subdf['Id'],pred],axis=1)\ndatasets.columns=['Id','SalePrice']\ndatasets.to_csv('sample_submission2.csv',index=False)","7e82a60f":"foo = pd.read_csv('sample_submission2.csv')\nfoo","b742e726":"**Drop columns with missing values more than 50%**","0b664b6c":"> *Concatnate training and testing datasets*"}}