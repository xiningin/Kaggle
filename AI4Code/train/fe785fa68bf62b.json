{"cell_type":{"2ca7e871":"code","58e45d46":"code","49eaace0":"code","131a2fd9":"code","4fad51f2":"code","14a620cc":"code","699e155d":"code","a945b30c":"code","0b21d167":"code","c928b5ab":"code","99634e0c":"code","b2d8ec4b":"code","562c07f7":"code","03697213":"code","37544e5f":"code","2da6a7d0":"code","b3d600cd":"code","a9445f47":"code","0f5d484f":"code","80eaa464":"code","b6a5a3d8":"code","4b776a89":"code","5724e332":"code","e9d50b6f":"code","095d6565":"code","ec1ba791":"code","2362be39":"code","63ce5ccf":"code","ceebe82d":"code","d41085e1":"code","057735f2":"code","8cba34c4":"code","44c0b66d":"code","7a98d221":"code","5eedab9e":"code","703b5bae":"code","61c5d8ee":"markdown","322815fe":"markdown","dc9e2d7d":"markdown","f2eddf45":"markdown","bf69d22a":"markdown","eb1fe605":"markdown","88c24ef8":"markdown","defcd680":"markdown","8a62eed0":"markdown","fc0de10b":"markdown","162a04b1":"markdown","cc194369":"markdown","6bac09a3":"markdown","04664276":"markdown","bf5b6b58":"markdown","62148fde":"markdown","1743d51d":"markdown","e7bde800":"markdown","058d47a0":"markdown","b8dca22e":"markdown","c9410e3c":"markdown","245ffa7c":"markdown","a5706590":"markdown","71b4d64a":"markdown"},"source":{"2ca7e871":"from shutil import copyfile\ncopyfile(src = \"..\/input\/planar-utils\/planar_utils.py\", dst = \"..\/working\/planar_utils.py\")\n# copyfile(src = \"..\/input\/testcases-v2\/testCases_v2.py\", dst = \"..\/working\/testCases_v2.py\")\n\n# from planar_utils import*","58e45d46":"# Package imports\nimport numpy as np\nimport matplotlib.pyplot as plt\n#from testCases_v2 import *\nimport sklearn\nimport sklearn.datasets\nimport sklearn.linear_model\nfrom planar_utils import sigmoid\n\nimport h5py\nimport scipy\nfrom PIL import Image\nfrom scipy import ndimage\n\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(5) # set a seed so that the results are consistent","49eaace0":"def load_dataset():\n    train_dataset = h5py.File('..\/input\/cat-images-dataset\/train_catvnoncat.h5', \"r\")\n    train_set_x_orig = np.array(train_dataset[\"train_set_x\"][:]) \n    train_set_y_orig = np.array(train_dataset[\"train_set_y\"][:]) \n\n    test_dataset = h5py.File('..\/input\/cat-images-dataset\/test_catvnoncat.h5', \"r\")\n    test_set_x_orig = np.array(test_dataset[\"test_set_x\"][:]) \n    test_set_y_orig = np.array(test_dataset[\"test_set_y\"][:]) \n\n    classes = np.array(test_dataset[\"list_classes\"][:]) \n    \n    train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0]))\n    test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0]))\n    \n    return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes","131a2fd9":"def ReLU(x):\n    return x * (x > 0)\ndef ReLU_derivative(x):\n    return (x>=0)","4fad51f2":"def tanh_out(x):\n    return np.tanh(x)\/2.00001+0.5","14a620cc":"train_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()","699e155d":"index = 23\nplt.imshow(train_set_x_orig[index])\nprint (\"y = \" + str(train_set_y[:, index]) + \", it's a '\" + classes[np.squeeze(train_set_y[:, index])].decode(\"utf-8\") +  \"' picture.\")","a945b30c":"m_train=train_set_x_orig.shape[0]\nm_test=test_set_x_orig.shape[0]\nnum_px=train_set_x_orig.shape[1]\n\nprint (\"Number of training examples: m_train = \" + str(m_train))\nprint (\"Number of testing examples: m_test = \" + str(m_test))\nprint (\"Height\/Width of each image: num_px = \" + str(num_px))\nprint (\"Each image is of size: (\" + str(num_px) + \", \" + str(num_px) + \", 3)\")\nprint (\"train_set_x shape: \" + str(train_set_x_orig.shape))\nprint (\"train_set_y shape: \" + str(train_set_y.shape))\nprint (\"test_set_x shape: \" + str(test_set_x_orig.shape))\nprint (\"test_set_y shape: \" + str(test_set_y.shape))","0b21d167":"train_set_x_flatten=train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T \ntest_set_x_flatten=test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T \n\nprint (\"train_set_x_flatten shape: \" + str(train_set_x_flatten.shape))\nprint (\"train_set_y shape: \" + str(train_set_y.shape))\nprint (\"test_set_x_flatten shape: \" + str(test_set_x_flatten.shape))\nprint (\"test_set_y shape: \" + str(test_set_y.shape))\nprint (\"sanity check after reshaping: \" + str(train_set_x_flatten[0:5,0]))","c928b5ab":"train_set_x = train_set_x_flatten\/255.\ntest_set_x = test_set_x_flatten\/255.","99634e0c":"X=train_set_x\nY=train_set_y\nshape_X = X.shape\nshape_Y = Y.shape\nm = Y.shape[1]  \n### END CODE HERE ###\n\nprint ('The shape of X is: ' + str(shape_X))\nprint ('The shape of Y is: ' + str(shape_Y))\nprint ('I have m = %d training examples!' % (m))","b2d8ec4b":"# GRADED FUNCTION: initialize_parameters\n\ndef initialize_parameters(n_x, n_h, n_y,zeroes=False):\n    \"\"\"\n    Argument:\n    n_x -- size of the input layer\n    n_h -- size of the hidden layer\n    n_y -- size of the output layer\n    \n    Returns:\n    params -- python dictionary containing your parameters:\n                    W1 -- weight matrix of shape (n_h, n_x)\n                    b1 -- bias vector of shape (n_h, 1)\n                    W2 -- weight matrix of shape (n_y, n_h)\n                    b2 -- bias vector of shape (n_y, 1)\n    \"\"\"\n    \n    np.random.seed(2) # we set up a seed so that your output matches ours although the initialization is random.\n    \n    ### START CODE HERE ### (\u2248 4 lines of code)\n    if zeroes:\n        W1 = np.zeros((n_h, n_x))\n        b1 = np.zeros((n_h, 1))\n        W2 = np.zeros((n_y, n_h))\n        b2 = np.zeros((n_y, 1))\n    else:\n        W1 = np.random.randn(n_h, n_x) * 0.01\n        b1 = np.zeros((n_h, 1))\n        W2 = np.random.randn(n_y, n_h) * 0.01\n        b2 = np.zeros((n_y, 1))\n    ### END CODE HERE ###\n    \n    assert (W1.shape == (n_h, n_x))\n    assert (b1.shape == (n_h, 1))\n    assert (W2.shape == (n_y, n_h))\n    assert (b2.shape == (n_y, 1))\n    \n    parameters = {\"W1\": W1,\n                  \"b1\": b1,\n                  \"W2\": W2,\n                  \"b2\": b2}\n    \n    return parameters","562c07f7":"# GRADED FUNCTION: forward_propagation\n\ndef forward_propagation(X, parameters,active_1,active_2):\n    \"\"\"\n    Argument:\n    X -- input data of size (n_x, m)\n    parameters -- python dictionary containing your parameters (output of initialization function)\n    \n    Returns:\n    A2 -- The sigmoid output of the second activation\n    cache -- a dictionary containing \"Z1\", \"A1\", \"Z2\" and \"A2\"\n    \"\"\"\n    # Retrieve each parameter from the dictionary \"parameters\"\n    ### START CODE HERE ### (\u2248 4 lines of code)\n    W1 = parameters[\"W1\"]\n    b1 = parameters[\"b1\"]\n    W2 = parameters[\"W2\"]\n    b2 = parameters[\"b2\"]\n    ### END CODE HERE ###\n    \n    # Implement Forward Propagation to calculate A2 (probabilities)\n    ### START CODE HERE ### (\u2248 4 lines of code)\n    Z1 = np.dot(W1, X) + b1\n    A1 = active_1(Z1)\n    Z2 = np.dot(W2, A1) + b2\n    A2 = active_2(Z2)\n    ### END CODE HERE ###\n    \n    assert(A2.shape == (1, X.shape[1]))\n    \n    cache = {\"Z1\": Z1,\n             \"A1\": A1,\n             \"Z2\": Z2,\n             \"A2\": A2}\n    \n    return A2, cache","03697213":"# GRADED FUNCTION: compute_cost\n\ndef compute_cost(A2, Y, parameters):\n    \"\"\"\n    Computes the cross-entropy cost given in equation (13)\n    \n    Arguments:\n    A2 -- The sigmoid output of the second activation, of shape (1, number of examples)\n    Y -- \"true\" labels vector of shape (1, number of examples)\n    parameters -- python dictionary containing your parameters W1, b1, W2 and b2\n    [Note that the parameters argument is not used in this function, \n    but the auto-grader currently expects this parameter.\n    Future version of this notebook will fix both the notebook \n    and the auto-grader so that `parameters` is not needed.\n    For now, please include `parameters` in the function signature,\n    and also when invoking this function.]\n    \n    Returns:\n    cost -- cross-entropy cost given equation (13)\n    \n    \"\"\"\n    \n    m = Y.shape[1] # number of example\n\n    # Compute the cross-entropy cost\n    ### START CODE HERE ### (\u2248 2 lines of code)\n#     A2[A2==0]=0.000000001\n#     A2[A2==1]=0.999999999\n    logprobs = np.multiply(np.log(A2),Y) + np.multiply(np.log(1-A2), 1-Y)\n    cost = - np.sum(logprobs) \/ m\n    ### END CODE HERE ###\n    \n    cost = float(np.squeeze(cost))  # makes sure cost is the dimension we expect. \n                                    # E.g., turns [[17]] into 17 \n    assert(isinstance(cost, float))\n    \n    return cost","37544e5f":"# GRADED FUNCTION: backward_propagation\n\ndef backward_propagation(parameters, cache, X, Y,active_1,active_2):\n    \"\"\"\n    Implement the backward propagation using the instructions above.\n    \n    Arguments:\n    parameters -- python dictionary containing our parameters \n    cache -- a dictionary containing \"Z1\", \"A1\", \"Z2\" and \"A2\".\n    X -- input data of shape (2, number of examples)\n    Y -- \"true\" labels vector of shape (1, number of examples)\n    \n    Returns:\n    grads -- python dictionary containing your gradients with respect to different parameters\n    \"\"\"\n    m = X.shape[1]\n    \n    # First, retrieve W1 and W2 from the dictionary \"parameters\".\n    ### START CODE HERE ### (\u2248 2 lines of code)\n    W1 = parameters[\"W1\"]\n    W2 = parameters[\"W2\"]\n    ### END CODE HERE ###\n        \n    # Retrieve also A1 and A2 from dictionary \"cache\".\n    ### START CODE HERE ### (\u2248 2 lines of code)\n    A1 = cache[\"A1\"]\n    A2 = cache[\"A2\"]\n    ### END CODE HERE ###\n    \n    # Backward propagation: calculate dW1, db1, dW2, db2. \n    ### START CODE HERE ### (\u2248 6 lines of code, corresponding to 6 equations on slide above)\n    dZ2 = A2 - Y\n    dW2 = (1\/m) * np.dot(dZ2, A1.T)\n    db2 = (1\/m) * np.sum(dZ2, axis=1, keepdims=True)\n    if active_1==np.tanh:\n        dZ1 = np.dot(W2.T, dZ2) * (1 - np.power(A1, 2))\n    if active_1==ReLU:\n        dZ1= np.dot(W2.T, dZ2) *ReLU_derivative(A1)\n    dW1 = (1\/m) * np.dot(dZ1, X.T)\n    db1 = (1\/m) * np.sum(dZ1, axis=1, keepdims=True)\n    ### END CODE HERE ###\n    \n    grads = {\"dW1\": dW1,\n             \"db1\": db1,\n             \"dW2\": dW2,\n             \"db2\": db2}\n    \n    return grads","2da6a7d0":"# GRADED FUNCTION: update_parameters\n\n# def update_parameters(parameters, grads, learning_rate = 1.2):\ndef update_parameters(parameters, grads, learning_rate = 0.01):\n\n    \"\"\"\n    Updates parameters using the gradient descent update rule given above\n    \n    Arguments:\n    parameters -- python dictionary containing your parameters \n    grads -- python dictionary containing your gradients \n    \n    Returns:\n    parameters -- python dictionary containing your updated parameters \n    \"\"\"\n    # Retrieve each parameter from the dictionary \"parameters\"\n    ### START CODE HERE ### (\u2248 4 lines of code)\n    W1 = parameters[\"W1\"]\n    b1 = parameters[\"b1\"]\n    W2 = parameters[\"W2\"]\n    b2 = parameters[\"b2\"]\n    ### END CODE HERE ###\n    \n    # Retrieve each gradient from the dictionary \"grads\"\n    ### START CODE HERE ### (\u2248 4 lines of code)\n    dW1 = grads[\"dW1\"]\n    db1 = grads[\"db1\"]\n    dW2 = grads[\"dW2\"]\n    db2 = grads[\"db2\"]\n    ## END CODE HERE ###\n    \n    # Update rule for each parameter\n    ### START CODE HERE ### (\u2248 4 lines of code)\n    W1 = W1 - learning_rate * dW1\n    b1 = b1 - learning_rate * db1\n    W2 = W2 - learning_rate * dW2\n    b2 = b2 - learning_rate * db2\n    ### END CODE HERE ###\n    \n    parameters = {\"W1\": W1,\n                  \"b1\": b1,\n                  \"W2\": W2,\n                  \"b2\": b2}\n    \n    return parameters","b3d600cd":"# GRADED FUNCTION: nn_model\n\ndef nn_model(X, Y, n_h=4, active_1=np.tanh,active_2=sigmoid, num_iterations = 10000, print_cost=False, Learning_rates=[0.01],zeroes_initial=False):\n    \"\"\"\n    Arguments:\n    X -- dataset of shape (2, number of examples)\n    Y -- labels of shape (1, number of examples)\n    n_h -- size of the hidden layer\n    num_iterations -- Number of iterations in gradient descent loop\n    print_cost -- if True, print the cost every 1000 iterations\n    \n    Returns:\n    parameters -- parameters learnt by the model. They can then be used to predict.\n    \"\"\"\n    \n    np.random.seed(3)\n#     np.random.seed(5)\n\n#     n_x = layer_sizes(X, Y)[0]\n#     n_y = layer_sizes(X, Y)[2]\n    \n    \n    n_x = X.shape[0] # size of input layer\n    n_y = Y.shape[0] # size of output layer\n    \n    # Initialize parameters\n    ### START CODE HERE ### (\u2248 1 line of code)\n    parameters = initialize_parameters(n_x, n_h, n_y,zeroes_initial)\n    ### END CODE HERE ###\n    \n    # Loop (gradient descent)\n    costs=list()\n\n    k=-1\n    Mod=np.ceil(num_iterations\/len(Learning_rates))\n#     Mod=int(num_iterations\/len(Learning_rates))\n\n    learning_rate=Learning_rates[0]\n\n    \n    for i in range(0, num_iterations):\n         \n        ### START CODE HERE ### (\u2248 4 lines of code)\n        # Forward propagation. Inputs: \"X, parameters\". Outputs: \"A2, cache\".\n        A2, cache = forward_propagation(X, parameters,active_1,active_2)\n        \n        # Cost function. Inputs: \"A2, Y, parameters\". Outputs: \"cost\".\n        cost = compute_cost(A2, Y, parameters)\n \n        # Backpropagation. Inputs: \"parameters, cache, X, Y\". Outputs: \"grads\".\n        grads = backward_propagation(parameters, cache, X, Y,active_1,active_2)\n \n        # Gradient descent parameter update. Inputs: \"parameters, grads\". Outputs: \"parameters\".\n    \n        if i%Mod==0:\n            k+=1\n            learning_rate=Learning_rates[k]\n        parameters = update_parameters(parameters, grads,learning_rate)\n        \n        ### END CODE HERE ###\n        \n        # Print the cost every 1000 iterations\n#         if print_cost and i % 1000 == 0:\n        if print_cost and i % 500 == 0:\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n        if i%100==0:\n            costs.append(cost)\n\n\n    return (np.squeeze(costs),parameters)","a9445f47":"# GRADED FUNCTION: predict\n\ndef predict(parameters, X,active_1=np.tanh,active_2=sigmoid):\n    \"\"\"\n    Using the learned parameters, predicts a class for each example in X\n    \n    Arguments:\n    parameters -- python dictionary containing your parameters \n    X -- input data of size (n_x, m)\n    \n    Returns\n    predictions -- vector of predictions of our model (red: 0 \/ blue: 1)\n    \"\"\"\n    \n    # Computes probabilities using forward propagation, and classifies to 0\/1 using 0.5 as the threshold.\n    ### START CODE HERE ### (\u2248 2 lines of code)\n    A2, cache = forward_propagation(X, parameters,active_1,active_2)\n    predictions = (A2 > 0.5).astype('int')\n    ### END CODE HERE ###\n    \n    return predictions","0f5d484f":"def plt_costs(costs,label):\n    plt.plot(costs, label=label)\n    plt.ylabel('cost')\n    plt.xlabel('iterations (per hundreds)')\n    legend = plt.legend(loc='upper center', shadow=True)\n    frame = legend.get_frame()\n    frame.set_facecolor('0.90')","80eaa464":"def print_accuracy(parameters,activ_1,activ_2):\n    predictions = predict(parameters, X,activ_1,activ_2)\n    print ('Train accuracy: %d' % float((np.dot(Y,predictions.T) + np.dot(1-Y,1-predictions.T))\/float(Y.size)*100) + '%')\n    predictions = predict(parameters, test_set_x,activ_1,activ_2)\n    print ('Test accuracy: %d' % float((np.dot(test_set_y,predictions.T) + np.dot(1-test_set_y,1-predictions.T))\/float(test_set_y.size)*100) + '%')\n    print()","b6a5a3d8":"#Print accuracy\n\nprint(\"tanh+sigmoid\")\ncosts1, parameters1 = nn_model(X, Y, n_h = 4, active_1=np.tanh,active_2=sigmoid, num_iterations = 5001, print_cost=True,Learning_rates=[[0.01]],zeroes_initial=False)\nprint_accuracy(parameters1, activ_1=np.tanh,activ_2=sigmoid)\n\n\nprint(\"ReLU+sigmoid\")\ncosts2, parameters2 = nn_model(X, Y, n_h = 4, active_1=ReLU,active_2=sigmoid, num_iterations = 5001, print_cost=True,Learning_rates=[[0.01]],zeroes_initial=False)\nprint_accuracy(parameters2, activ_1=ReLU,activ_2=sigmoid)\n\n\nprint(\"tanh+tanh\")\ncosts3, parameters3 = nn_model(X, Y, n_h = 4, active_1=np.tanh,active_2=tanh_out, num_iterations = 5001, print_cost=True,Learning_rates=[[0.01]],zeroes_initial=False)\nprint_accuracy(parameters3, activ_1=np.tanh,activ_2=tanh_out)\n\n\nprint(\"ReLU+tanh\")\ncosts4, parameters4 = nn_model(X, Y, n_h = 4, active_1=ReLU,active_2=tanh_out, num_iterations = 5001, print_cost=True,Learning_rates=[[0.01]],zeroes_initial=False)\nprint_accuracy(parameters4, activ_1=ReLU,activ_2=tanh_out)","4b776a89":"plt_costs(costs1,\"tanh, sigmoid\")\nplt_costs(costs2,\"ReLU, sigmoid\")\nplt_costs(costs3,\"tanh, tanh\")\nplt_costs(costs4,\"ReLU, tanh\")\nplt.title(\"Activation functions\")\nplt.show()","5724e332":"costs1, parameters1 = nn_model(X, Y, n_h = 4, active_1=ReLU,active_2=sigmoid, num_iterations = 5001, print_cost=True,Learning_rates=[[0.01]],zeroes_initial=True)\nprint_accuracy(parameters1, activ_1=ReLU,activ_2=sigmoid)\n\ncosts2, parameters2 = nn_model(X, Y, n_h = 4, active_1=ReLU,active_2=sigmoid, num_iterations = 5001, print_cost=True,Learning_rates=[[0.01]],zeroes_initial=False)\nprint_accuracy(parameters2, activ_1=ReLU,activ_2=sigmoid)\n\nplt_costs(costs1,\"Zeroes initialization\")\nplt_costs(costs2,\"Random initialization\")\nplt.title(\"Weight initializtion\")\nplt.show()","e9d50b6f":"# This may take about 2 minutes to run\n\nhidden_layer_sizes = [1, 2, 3, 4, 5,6,7,8, 10, 20, 30, 50]\nplt.figure(figsize=(20, 10))\n\nfor n_h1 in hidden_layer_sizes:\n    print('Hidden Layer of size '+ str(n_h1))\n    costs, parameters = nn_model(X, Y, n_h =n_h1, active_1=ReLU,active_2=sigmoid, num_iterations = 5001, print_cost=True,Learning_rates=[[0.01]],zeroes_initial=False)\n#     models[str(i)] = (costs,parameters)\n#     print(\"Parametrs are: learning_rate= {},n_h={}\".format(learning_rate,n_h))\n    print_accuracy(parameters, activ_1=ReLU,activ_2=sigmoid)\n    plt_costs(costs,str(n_h1))\n\n    \n\nplt.title(\"n_h\")\nplt.show()\n    \n# for i in Learning_rates_grid:\n#     plt.plot(models[str(i)][0], label= \"learning_rate= {},n_h={}\".format(learning_rate,n_h))\n\n# plt.ylabel('cost')\n# plt.xlabel('iterations (hundreds)')\n\n# legend = plt.legend(loc='upper center', shadow=True)\n# frame = legend.get_frame()\n# frame.set_facecolor('0.90')\n# plt.show()","095d6565":"Learning_rates_grid=[[0.1],[0.01],[0.005],[0.001]]\n\nfor learning_rate in Learning_rates_grid:\n    print('Learning rate: '+str(learning_rate))\n    costs, parameters = nn_model(X, Y, n_h = 6, active_1=ReLU,active_2=sigmoid, num_iterations = 5001, print_cost=True,Learning_rates=learning_rate,zeroes_initial=False)\n    print_accuracy(parameters, activ_1=ReLU,activ_2=sigmoid)\n    plt_costs(costs,str(learning_rate))\n    \nplt.title('Static learning rates')\nplt.show()","ec1ba791":"Learning_rates_grid=[[0.1,0.01],[0.1,0.005],[0.1,0.01,0.005],[0.1,0.05,0.01,0.0075,0.005],[0.1-i\/1600 for i in range(160)]]\n\nplt.figure(figsize=(20, 10))\nfor learning_rate in Learning_rates_grid:\n    str_learning_rate=str(learning_rate) if len(learning_rate)<5 else str(learning_rate[0])+','+str(learning_rate[1])+',...,'+str(learning_rate[len(learning_rate)-1])\n    print('Learning rates: '+str_learning_rate)\n    costs, parameters = nn_model(X, Y, n_h = 6, active_1=ReLU,active_2=sigmoid, num_iterations = 5001, print_cost=True,Learning_rates=learning_rate,zeroes_initial=False)\n    print_accuracy(parameters, activ_1=ReLU,activ_2=sigmoid)\n    plt_costs(costs,str_learning_rate)\n\nplt.title('Dynamic learning rates')\nplt.show()","2362be39":"for iterations in [1000,5000,7500,10000]:\n    print('Iterations: '+str(iterations))\n    costs, parameters = nn_model(X, Y, n_h = 6, active_1=ReLU,active_2=sigmoid, num_iterations = iterations, print_cost=True,Learning_rates=[0.1,0.05,0.01,0.0075,0.005],zeroes_initial=False)\n    print_accuracy(parameters, activ_1=ReLU,activ_2=sigmoid)","63ce5ccf":"best_model_costs,best_model_params=nn_model(X, Y, n_h = 6, active_1=ReLU,active_2=sigmoid, num_iterations = 10001, print_cost=True,Learning_rates=[0.1,0.01,0.005],zeroes_initial=False)\n\nprint_accuracy(best_model_params, activ_1=ReLU,activ_2=sigmoid)\nplt.plot(best_model_costs)\nplt.ylabel('cost')\nplt.xlabel('iterations (per hundreds)')\nplt.title('Best model')\nplt.show()","ceebe82d":"from skimage.transform import resize\n\ndef predict_image(fname):\n    image = np.array(plt.imread(fname))\n#     plt.imshow(image)\n    plt.imshow(resize(image, output_shape=(num_px,num_px,3)))\n    image = image\/255.\n    my_image = resize(image, output_shape=(num_px,num_px,3)).reshape((1, num_px * num_px * 3)).T\n\n    my_predicted_image = predict(best_model_params, my_image,active_1=ReLU,active_2=sigmoid)\n    if my_predicted_image[0][0]==1:\n        print(\"Algorithm predicts a \\\"cat\\\" picture\")\n    else:\n        print(\"Algorithm predicts a \\\"not-cat\\\" picture\")\n    plt.show()\n    print()\n    print()    ","d41085e1":"def predict_on_new_images():\n    for i in range(8):\n        fname='..\/input\/catsdogs\/test_set\/test_set\/cats\/cat.400'+str(i+1)+'.jpg'\n        predict_image(fname)\n    for i in range(8):\n        fname='..\/input\/catsdogs\/test_set\/test_set\/dogs\/dog.400'+str(i+1)+'.jpg'\n        predict_image(fname)","057735f2":"predict_on_new_images()","8cba34c4":"import copy\ndef mirror(x):\n    return copy.deepcopy(x)[...,::-1,:]","44c0b66d":"train_set_x_orig2=mirror(train_set_x_orig)\n# test_set_x_orig2=mirror(test_set_x_orig)\nplt.imshow(train_set_x_orig2[23])\nplt.show()\nplt.imshow(train_set_x_orig[23])\nplt.show()\ntrain_set_x_orig2=np.concatenate((train_set_x_orig,train_set_x_orig2))\n# test_set_x_orig2=np.concatenate((test_set_x_orig,test_set_x_orig2))","7a98d221":"train_set_x_flatten=train_set_x_orig2.reshape(train_set_x_orig2.shape[0], -1).T \n# test_set_x_flatten=test_set_x_orig2.reshape(test_set_x_orig2.shape[0], -1).T \ntrain_set_x = train_set_x_flatten\/255.\n# test_set_x = test_set_x_flatten\/255.\ntrain_set_y2 = np.concatenate((train_set_y,copy.deepcopy(train_set_y)),axis=1)\n# test_set_y2=np.concatenate((train_set_y,train_set_y))\nX=train_set_x\nY=train_set_y2\nprint(Y.shape)\nprint(X.shape)","5eedab9e":"# best_model_costs,best_model_params=nn_model(X, Y, n_h = 4, active_1=ReLU,active_2=sigmoid, num_iterations = 2501, print_cost=True,Learning_rates=[[0.01]],zeroes_initial=False)\n# best_model_costs,best_model_params=nn_model(X, Y, n_h = 6, active_1=ReLU,active_2=sigmoid, num_iterations = 6001, print_cost=True,Learning_rates=[0.1,0.05,0.01,0.0075,0.005],zeroes_initial=False)\n\nbest_model_costs,best_model_params=nn_model(X, Y, n_h = 6, active_1=ReLU,active_2=sigmoid, num_iterations = 10001, print_cost=True,Learning_rates=[0.1,0.01,0.005],zeroes_initial=False)\n# best_model_costs,best_model_params=nn_model(X, Y, n_h = 6, active_1=ReLU,active_2=sigmoid, num_iterations = 6001, print_cost=True,Learning_rates=[0.1,0.05,0.01],zeroes_initial=False)\n\n# best_model_costs,best_model_params=nn_model(X, Y, n_h = 6, active_1=ReLU,active_2=sigmoid, num_iterations = 10001, print_cost=True,Learning_rates=[0.005],zeroes_initial=False)\nprint_accuracy(best_model_params, activ_1=ReLU,activ_2=sigmoid)\nplt.plot(best_model_costs)\nplt.ylabel('cost')\nplt.xlabel('iterations (per hundreds)')\nplt.title('Best model')\nplt.show()","703b5bae":"predict_on_new_images()","61c5d8ee":"**Count of iterations**\n","322815fe":"**Interpretation**:\n- The larger models (with more hidden units) are able to fit the training set better, until eventually the largest models overfit the data. \n- The best hidden layer size seems to be around n_h = 5. Indeed, a value around here seems to  fits the data well without also incurring noticeable overfitting.\n- You will also learn later about regularization, which lets you use very large models (such as n_h = 50) without much overfitting. ","dc9e2d7d":"Using the cache computed during forward propagation, you can now implement backward propagation.\n\n**Question**: Implement the function `backward_propagation()`.\n\n**Instructions**:\nBackpropagation is usually the hardest (most mathematical) part in deep learning. To help you, here again is the slide from the lecture on backpropagation. You'll want to use the six equations on the right of this slide, since you are building a vectorized implementation.  \n\n<!--\n$\\frac{\\partial \\mathcal{J} }{ \\partial z_{2}^{(i)} } = \\frac{1}{m} (a^{[2](i)} - y^{(i)})$\n\n$\\frac{\\partial \\mathcal{J} }{ \\partial W_2 } = \\frac{\\partial \\mathcal{J} }{ \\partial z_{2}^{(i)} } a^{[1] (i) T} $\n\n$\\frac{\\partial \\mathcal{J} }{ \\partial b_2 } = \\sum_i{\\frac{\\partial \\mathcal{J} }{ \\partial z_{2}^{(i)}}}$\n\n$\\frac{\\partial \\mathcal{J} }{ \\partial z_{1}^{(i)} } =  W_2^T \\frac{\\partial \\mathcal{J} }{ \\partial z_{2}^{(i)} } * ( 1 - a^{[1] (i) 2}) $\n\n$\\frac{\\partial \\mathcal{J} }{ \\partial W_1 } = \\frac{\\partial \\mathcal{J} }{ \\partial z_{1}^{(i)} }  X^T $\n\n$\\frac{\\partial \\mathcal{J} _i }{ \\partial b_1 } = \\sum_i{\\frac{\\partial \\mathcal{J} }{ \\partial z_{1}^{(i)}}}$\n\n- Note that $*$ denotes elementwise multiplication.\n- The notation you will use is common in deep learning coding:\n    - dW1 = $\\frac{\\partial \\mathcal{J} }{ \\partial W_1 }$\n    - db1 = $\\frac{\\partial \\mathcal{J} }{ \\partial b_1 }$\n    - dW2 = $\\frac{\\partial \\mathcal{J} }{ \\partial W_2 }$\n    - db2 = $\\frac{\\partial \\mathcal{J} }{ \\partial b_2 }$\n    \n!-->\n\n- Tips:\n    - To compute dZ1 you'll need to compute $g^{[1]'}(Z^{[1]})$. Since $g^{[1]}(.)$ is the tanh activation function, if $a = g^{[1]}(z)$ then $g^{[1]'}(z) = 1-a^2$. So you can compute \n    $g^{[1]'}(Z^{[1]})$ using `(1 - np.power(A1, 2))`.","f2eddf45":"## 2 - Dataset ##\n\nFirst, let's get the dataset you will work on. The following code will load a \"flower\" 2-class dataset into variables `X` and `Y`.","bf69d22a":"**Final model**","eb1fe605":"### 4.2 - Initialize the model's parameters ####\n\n**Exercise**: Implement the function `initialize_parameters()`.\n\n**Instructions**:\n- Make sure your parameters' sizes are right. Refer to the neural network figure above if needed.\n- You will initialize the weights matrices with random values. \n    - Use: `np.random.randn(a,b) * 0.01` to randomly initialize a matrix of shape (a,b).\n- You will initialize the bias vectors as zeros. \n    - Use: `np.zeros((a,b))` to initialize a matrix of shape (a,b) with zeros.","88c24ef8":"**Static learning rate**","defcd680":"Visualize the dataset using matplotlib. The data looks like a \"flower\" with some red (label y=0) and some blue (y=1) points. Your goal is to build a model to fit this data. In other words, we want the classifier to define regions as either red or blue.","8a62eed0":"# Planar data classification with 2-layer neural network\n","fc0de10b":"### 4.6 - Tuning hidden layer size (optional\/ungraded exercise) ###\n\nRun the following code. It may take 1-2 minutes. You will observe different behaviors of the model for various hidden layer sizes.","162a04b1":"Now that you have computed $A^{[2]}$ (in the Python variable \"`A2`\"), which contains $a^{[2](i)}$ for every example, you can compute the cost function as follows:\n\n$$J = - \\frac{1}{m} \\sum\\limits_{i = 1}^{m} \\large{(} \\small y^{(i)}\\log\\left(a^{[2] (i)}\\right) + (1-y^{(i)})\\log\\left(1- a^{[2] (i)}\\right) \\large{)} \\small\\tag{13}$$\n\n**Exercise**: Implement `compute_cost()` to compute the value of the cost $J$.\n\n**Instructions**:\n- There are many ways to implement the cross-entropy loss. To help you, we give you how we would have implemented\n$- \\sum\\limits_{i=0}^{m}  y^{(i)}\\log(a^{[2](i)})$:\n```python\nlogprobs = np.multiply(np.log(A2),Y)\ncost = - np.sum(logprobs)                # no need to use a for loop!\n```\n\n(you can use either `np.multiply()` and then `np.sum()` or directly `np.dot()`).  \nNote that if you use `np.multiply` followed by `np.sum` the end result will be a type `float`, whereas if you use `np.dot`, the result will be a 2D numpy array.  We can use `np.squeeze()` to remove redundant dimensions (in the case of single float, this will be reduced to a zero-dimension array). We can cast the array as a type `float` using `float()`.","cc194369":"**Data agregiation**","6bac09a3":"### 4.4 - Integrate parts 4.1, 4.2 and 4.3 in nn_model() ####\n\n**Question**: Build your neural network model in `nn_model()`.\n\n**Instructions**: The neural network model has to use the previous functions in the right order.","04664276":"**Question**: Implement the update rule. Use gradient descent. You have to use (dW1, db1, dW2, db2) in order to update (W1, b1, W2, b2).\n\n**General gradient descent rule**: $ \\theta = \\theta - \\alpha \\frac{\\partial J }{ \\partial \\theta }$ where $\\alpha$ is the learning rate and $\\theta$ represents a parameter.\n\n**Illustration**: The gradient descent algorithm with a good learning rate (converging) and a bad learning rate (diverging). Images courtesy of Adam Harley.\n","bf5b6b58":"### 4.3 - The Loop ####\n\n**Question**: Implement `forward_propagation()`.\n\n**Instructions**:\n- Look above at the mathematical representation of your classifier.\n- You can use the function `sigmoid()`. It is built-in (imported) in the notebook.\n- You can use the function `np.tanh()`. It is part of the numpy library.\n- The steps you have to implement are:\n    1. Retrieve each parameter from the dictionary \"parameters\" (which is the output of `initialize_parameters()`) by using `parameters[\"..\"]`.\n    2. Implement Forward Propagation. Compute $Z^{[1]}, A^{[1]}, Z^{[2]}$ and $A^{[2]}$ (the vector of all your predictions on all the examples in the training set).\n- Values needed in the backpropagation are stored in \"`cache`\". The `cache` will be given as an input to the backpropagation function.","62148fde":"### Parametrs\n**Activation function**","1743d51d":"## 1 - Packages ##\n\nLet's first import all the packages that you will need during this assignment.\n- [numpy](https:\/\/www.numpy.org\/) is the fundamental package for scientific computing with Python.\n- [sklearn](http:\/\/scikit-learn.org\/stable\/) provides simple and efficient tools for data mining and data analysis. \n- [matplotlib](http:\/\/matplotlib.org) is a library for plotting graphs in Python.\n- testCases provides some test examples to assess the correctness of your functions\n- planar_utils provide various useful functions used in this assignment","e7bde800":"## 4 - Neural Network model\n\n\n\n**Mathematically**:\n\nFor one example $x^{(i)}$:\n$$z^{[1] (i)} =  W^{[1]} x^{(i)} + b^{[1]}\\tag{1}$$ \n$$a^{[1] (i)} = \\tanh(z^{[1] (i)})\\tag{2}$$\n$$z^{[2] (i)} = W^{[2]} a^{[1] (i)} + b^{[2]}\\tag{3}$$\n$$\\hat{y}^{(i)} = a^{[2] (i)} = \\sigma(z^{ [2] (i)})\\tag{4}$$\n$$y^{(i)}_{prediction} = \\begin{cases} 1 & \\mbox{if } a^{[2](i)} > 0.5 \\\\ 0 & \\mbox{otherwise } \\end{cases}\\tag{5}$$\n\nGiven the predictions on all the examples, you can also compute the cost $J$ as follows: \n$$J = - \\frac{1}{m} \\sum\\limits_{i = 0}^{m} \\large\\left(\\small y^{(i)}\\log\\left(a^{[2] (i)}\\right) + (1-y^{(i)})\\log\\left(1- a^{[2] (i)}\\right)  \\large  \\right) \\small \\tag{6}$$\n\n**Reminder**: The general methodology to build a Neural Network is to:\n    1. Define the neural network structure ( # of input units,  # of hidden units, etc). \n    2. Initialize the model's parameters\n    3. Loop:\n        - Implement forward propagation\n        - Compute loss\n        - Implement backward propagation to get the gradients\n        - Update parameters (gradient descent)\n\nYou often build helper functions to compute steps 1-3 and then merge them into one function we call `nn_model()`. Once you've built `nn_model()` and learnt the right parameters, you can make predictions on new data.","058d47a0":"### 4.1 - Defining the neural network structure ####\n\n**Exercise**: Define three variables:\n    - n_x: the size of the input layer\n    - n_h: the size of the hidden layer (set this to 4) \n    - n_y: the size of the output layer\n\n**Hint**: Use shapes of X and Y to find n_x and n_y. Also, hard code the hidden layer size to be 4.","b8dca22e":"Nice work! ","c9410e3c":"### 4.5 Predictions\n\n**Question**: Use your model to predict by building predict().\nUse forward propagation to predict results.\n\n**Reminder**: predictions = $y_{prediction} = \\mathbb 1 \\text{{activation > 0.5}} = \\begin{cases}\n      1 & \\text{if}\\ activation > 0.5 \\\\\n      0 & \\text{otherwise}\n    \\end{cases}$  \n    \nAs an example, if you would like to set the entries of a matrix X to 0 and 1 based on a threshold you would do: ```X_new = (X > threshold)```","245ffa7c":"**Zeroes or random initialization**","a5706590":"**Dynamic learning rate**","71b4d64a":"**Other images**"}}