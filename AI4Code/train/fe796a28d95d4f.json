{"cell_type":{"268b2cd9":"code","80070e3d":"code","2c8b3d0d":"code","fa2a6773":"code","58ac29fa":"code","9739fdbf":"code","deb82330":"code","0e7ff8b1":"code","8493f4c8":"code","072807a7":"code","e5dd48e8":"code","8f081d67":"code","acdffcad":"code","1935aa18":"code","c901fe0d":"code","fbbb9d47":"code","1a1775a9":"code","3772cb41":"code","a80ae180":"code","4f8af129":"code","62a77ec9":"code","2d506ad0":"code","78d6492c":"code","0fb9d796":"code","aef1cc1f":"code","6acd7992":"code","eff66c96":"code","00ac40dd":"code","dfa3be86":"code","738d0587":"code","5fd632d3":"code","96d6a89a":"code","9a71bce4":"markdown","89e70c18":"markdown"},"source":{"268b2cd9":"import tarfile\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential, Model, model_from_json\nfrom keras.layers import Dense, Conv2D, Activation, MaxPool2D, Flatten, Dropout, BatchNormalization\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.utils import np_utils\nfrom keras.callbacks import ModelCheckpoint\n\n%matplotlib inline","80070e3d":"df = pd.read_csv('..\/input\/facial-expression-recognitionferchallenge\/fer2013\/fer2013\/fer2013.csv')","2c8b3d0d":"ls ..\/input\/facial-expression-recognitionferchallenge\/fer2013\/fer2013","fa2a6773":"df.head()","58ac29fa":"ls ..\/input\/facial-expression-recognitionferchallenge\/fer2013\/fer2013","9739fdbf":"df[\"Usage\"].value_counts()","deb82330":"train = df[[\"emotion\", \"pixels\"]][df[\"Usage\"] == \"Training\"]\ntrain.isnull().sum()","0e7ff8b1":"train['pixels'] = train['pixels'].apply(lambda im: np.fromstring(im, sep=' '))\nx_train = np.vstack(train['pixels'].values)\ny_train = np.array(train[\"emotion\"])\nx_train.shape, y_train.shape","8493f4c8":"public_test_df = df[[\"emotion\", \"pixels\"]][df[\"Usage\"]==\"PublicTest\"]","072807a7":"public_test_df[\"pixels\"] = public_test_df[\"pixels\"].apply(lambda im: np.fromstring(im, sep=' '))\nx_val = np.vstack(public_test_df[\"pixels\"].values)\ny_val = np.array(public_test_df[\"emotion\"])","e5dd48e8":"x_train = x_train.reshape(-1, 48, 48, 1)\nx_val = x_val.reshape(-1, 48, 48, 1)\nx_train.shape, x_val.shape","8f081d67":"y_train = np_utils.to_categorical(y_train)\ny_val = np_utils.to_categorical(y_val)\ny_train.shape, y_val.shape","acdffcad":"import seaborn as sns\nplt.figure(0, figsize=(12,6))\nfor i in range(1, 13):\n    plt.subplot(3,4,i)\n    plt.imshow(x_train[i, :, :, 0], cmap=\"gray\")\n\nplt.tight_layout()\nplt.show()","1935aa18":"from keras.models import Sequential\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras.layers.core import Activation\nfrom keras.layers.core import Flatten\nfrom keras.layers.core import Dropout\nfrom keras.layers.core import Dense\nfrom keras import backend as K","c901fe0d":"def buildModel(width, height, depth):\n\t\t# initialize the model along with the input shape to be\n\t\t# \"channels last\" and the channels dimension itself\n\t\tmodel = Sequential()\n\t\tchanDim = -1\n\t\t# CONV => RELU => POOL\n\t\tmodel.add(Conv2D(64, 3, data_format=\"channels_last\", kernel_initializer=\"he_normal\", \n                 input_shape=(48, 48, 1)))\n\t\tmodel.add(Activation(\"relu\"))\n\t\tmodel.add(BatchNormalization(axis=chanDim))\n\t\tmodel.add(MaxPooling2D(pool_size=(3, 3)))\n\t\tmodel.add(Dropout(0.25))\n\n\t\t# (CONV => RELU) * 2 => POOL\n\t\tmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\n\t\tmodel.add(Activation(\"relu\"))\n\t\tmodel.add(BatchNormalization(axis=chanDim))\n\t\tmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\n\t\tmodel.add(Activation(\"relu\"))\n\t\tmodel.add(BatchNormalization(axis=chanDim))\n\t\tmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\t\tmodel.add(Dropout(0.25))\n\n\t\t# (CONV => RELU) * 2 => POOL\n\t\tmodel.add(Conv2D(128, (3, 3), padding=\"same\"))\n\t\tmodel.add(Activation(\"relu\"))\n\t\tmodel.add(BatchNormalization(axis=chanDim))\n\t\tmodel.add(Conv2D(128, (3, 3), padding=\"same\"))\n\t\tmodel.add(Activation(\"relu\"))\n\t\tmodel.add(BatchNormalization(axis=chanDim))\n\t\tmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\t\tmodel.add(Dropout(0.25))\n\n\t\t# first (and only) set of FC => RELU layers\n\t\tmodel.add(Flatten())\n\t\tmodel.add(Dense(1024))\n\t\tmodel.add(Activation(\"relu\"))\n\t\tmodel.add(BatchNormalization())\n\t\tmodel.add(Dropout(0.25))\n\n\t\t# softmax classifier\n\t\tmodel.add(Dense(7))\n\t\tmodel.add(Activation(\"softmax\"))\n\n\t\t# return the constructed network architecture\n\t\treturn model","fbbb9d47":"# batch size, and image dimensions\nEPOCHS = 100\nINIT_LR = 1e-3\nBS = 32","1a1775a9":"model = buildModel(width=48, height=48,depth=1)","3772cb41":"model.summary()","a80ae180":"from keras.optimizers import Adam\n","4f8af129":"opt = Adam(lr=INIT_LR, decay=INIT_LR \/ EPOCHS)\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=opt,metrics=[\"accuracy\"])","62a77ec9":"from keras.preprocessing.image import ImageDataGenerator\naug = ImageDataGenerator(rotation_range=25, width_shift_range=0.1,\n\theight_shift_range=0.1, shear_range=0.2, zoom_range=0.2,\n\thorizontal_flip=True, fill_mode=\"nearest\")","2d506ad0":"# run model\nhist = model.fit_generator( aug.flow(x_train, y_train, batch_size=BS), epochs=EPOCHS,\n                 shuffle=True,\n                 steps_per_epoch=len(x_train) \/\/ BS,\n                 validation_data=(x_val, y_val),\n                 verbose=1)\n\n# save model to json\nmodel_json = model.to_json()\nwith open(\"face_model.json\", \"w\") as json_file:\n    json_file.write(model_json)","78d6492c":"plt.figure(figsize=(14,3))\nplt.subplot(1, 2, 1)\nplt.suptitle('Optimizer : Adam', fontsize=10)\nplt.ylabel('Loss', fontsize=16)\nplt.plot(hist.history['loss'], color='b', label='Training Loss')\nplt.plot(hist.history['val_loss'], color='r', label='Validation Loss')\nplt.legend(loc='upper right')\n\nplt.subplot(1, 2, 2)\nplt.ylabel('Accuracy', fontsize=16)\nplt.plot(hist.history['acc'], color='b', label='Training Accuracy')\nplt.plot(hist.history['val_acc'], color='r', label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.show()","0fb9d796":"import os\nimage_test = \"..\/input\/image-test\/test\/test\"\nos.mkdir('test_pretraitement')","aef1cc1f":"import glob\nimport cv2 as cv\nfrom keras.preprocessing.image import img_to_array\ntest_pretraitement = 'test_pretraitement'","6acd7992":"data_test = {}\nlabels_test = {}\nface_cascade = cv.CascadeClassifier('..\/input\/haarcascade\/haarcascade_frontalface_default.xml')\ni = 0\nfor img in glob.glob(image_test+\"\/*.jpg\"):\n    image = cv.imread(img)\n    name = img.split('\/')[-1]\n    \n    gray_image = cv.cvtColor(image, cv.COLOR_BGR2GRAY) # convert to greyscale\n    height, width = image.shape[:2]\n    faces = face_cascade.detectMultiScale(gray_image, 1.3, 1)\n    if isinstance(faces, tuple):\n        resized_image = cv.resize(gray_image, (48, 48))\n        cv.imwrite(test_pretraitement+'\/'+name,resized_image)\n    #print(faces)\n    elif isinstance(faces, np.ndarray):\n        for (x,y,w,h) in faces:\n            if w * h < (height * width) \/ 3:\n                resized_image = cv.resize(gray_image, (48, 48)) \n                cv.imwrite(test_pretraitement+'\/'+name,resized_image)\n            else:\n                \n                #cv.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)\n                roi_gray = gray_image[y:y+h, x:x+w]\n                #print(len(roi_gray))\n                resized_image = cv.resize(roi_gray, (48, 48))\n                cv.imwrite(test_pretraitement+'\/'+name, resized_image)\n    image = resized_image.astype(\"float\") \/ 255.0\n    image = img_to_array(image)\n    image = np.expand_dims(image, axis=0)\n    data_test[name] = image\n    #data.append(img_to_array(resized_image))","eff66c96":"data_predict = {}\nfor key,value in data_test.items():\n    predict = model.predict(value)\n    idx = np.argmax(predict)\n    #l= lb.classes_[idx]\n    data_predict[key] = idx\n    #print(idx)","00ac40dd":"final_data = pd.DataFrame(list(data_predict.items()),\n                      columns=['Image','Emotion'])","dfa3be86":"#pd.read_csv('submissionsref.csv')\nmapping_emotion = {0:'anger', 1:'disgust', 2:'fear', 3:'happiness', 6:'neutral', 4:'sadness', 5:'surprise'}\nfinal_data['Emotion'] = final_data['Emotion'].map(mapping_emotion)","738d0587":"final_data.to_csv('submissionsref.csv')","5fd632d3":"rd_df = pd.read_csv('submissionsref.csv')","96d6a89a":"rd_df.shape","9a71bce4":"# Convolutionnel Neural Networks For Facial Expression Recognition \n****\nEmotion detection from facial expression is one of the most active research fields, and plays a huge part in today\u2019s technology. It can be implemented using machine learning algorithms, although these can\u2019t provide  a hundred percent accurate solution since facial expression are not always the same and they depend on the person, the brightness, the position, and so on. This Notebook, presents an implementation of a deep learning algorithm for emotion detection using Convolutional Neural Network on a preprocessed images from a dataset FER. The data consists of 48x48 pixel grayscale images of faces. The faces have been automatically registered so that the face is more or less centered and occupies about the same amount of space in each image. The task is to categorize each face based on the emotion shown in the facial expression in to one of seven categories (0=Angry, 1=Disgust, 2=Fear, 3=Happy, 4=Sad, 5=Surprise, 6=Neutral).\nOur choice of using CNN for this matter is based on the fact that this algorithm performs better than other solutions. Also, to conduct this experiment we have used a dataset which is a mix of other datasets like JAFFE and that was provided by Kaggle in the context of a competition.\n\n****\nThis work was made by:\n    * Nasr Abdelhamid \n                        abdelnasr7@gmail.com\n    * Omar Harchich \n                        omar.harchich@gmail.com\nSupervised by:\n    * Professor Elhannani Assmaa.\n    * kjhk Fatima Zahra Salmam.\n","89e70c18":"# Build The Model"}}