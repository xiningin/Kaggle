{"cell_type":{"f2d4c03a":"code","c5a7c53b":"code","4b2901a9":"code","db6c8607":"code","ebd6f9f8":"code","1b2539d0":"code","574450c3":"code","3c533e83":"code","7866724a":"code","75f4b5b8":"code","b4f6ebc3":"code","34a193fa":"code","3ec96c42":"code","13c6d7f1":"code","cc13df54":"code","6cd7889a":"code","79d9dc64":"code","e5d01d5f":"code","8ec55017":"markdown","a2184e24":"markdown"},"source":{"f2d4c03a":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","c5a7c53b":"uber_dataset = pd.read_csv(\"\/kaggle\/input\/uber-request-data\/Uber Request Data.csv\")\nuber_dataset.head()","4b2901a9":"uber_dataset.shape","db6c8607":"#Check the datatypes of column\nuber_dataset.info()","ebd6f9f8":"#Convert Request_timestamp to uniform datetime format\nuber_dataset[\"Request timestamp\"] = uber_dataset[\"Request timestamp\"].apply(lambda x : pd.to_datetime(x))\nuber_dataset.info()","1b2539d0":"#Convert drop_timestamp to uniform datetime format\nuber_dataset[\"Drop timestamp\"] = uber_dataset[\"Drop timestamp\"].apply(lambda x : pd.to_datetime(x))\nuber_dataset.info()","574450c3":"#Check for null values\nuber_dataset.isnull().sum()","3c533e83":"uber_dataset.Status.value_counts()","7866724a":"#Check if the Driver id is null only for 'No Cars Available' Status\nuber_dataset[(uber_dataset.Status == 'No Cars Available') & (uber_dataset[\"Driver id\"].isnull())].shape","75f4b5b8":"#Check if drop timestamp is null only for 'No Cars Available' & 'Cancelled'\nuber_dataset[((uber_dataset.Status == 'No Cars Available') | (uber_dataset.Status == 'Cancelled')) & (uber_dataset[\"Drop timestamp\"].isnull())].shape","b4f6ebc3":"#Extract the hour from requested timestamp\nuber_dataset[\"Request hour\"] = uber_dataset[\"Request timestamp\"].dt.hour\nuber_dataset.head(5)","34a193fa":"plt.hist(uber_dataset[\"Request hour\"],edgecolor='black',bins=24)\nplt.xlabel(\"Request hour\")\nplt.ylabel(\"No. of Requests\")\nplt.show()\n#Demand is more during evening hours","3ec96c42":"#divide the time of the day into five categories\ndef time_period(x):\n    if x < 5:\n        return \"Early Morning\"\n    elif 5 <= x < 10:\n        return \"Morning\"\n    elif 10 <= x < 17:\n        return \"Day Time\"\n    elif 17 <= x < 22:\n        return \"Evening\"\n    else:\n        return \"Late Night\"\n\n    \nuber_dataset['Time slot'] = uber_dataset['Request hour'].apply(lambda x: time_period(x))\nuber_dataset['Time slot'].value_counts().plot.bar()\nplt.show()\n#Maximum demand during 'Evening' hours","13c6d7f1":"uber_dataset[\"Pickup point\"].value_counts().plot.pie(autopct='%1.0f%%')\nplt.show()","cc13df54":"uber_dataset[\"Status\"].value_counts().plot.pie(autopct='%1.0f%%')\nplt.show()\n#More than half of the requests are either cancelled or on wait due to unavailability of cabs","6cd7889a":"uber_dataset[\"Count\"] = 1\nuber_city = uber_dataset[uber_dataset[\"Pickup point\"]==\"City\"]\nuber_airport = uber_dataset[uber_dataset[\"Pickup point\"]==\"Airport\"]","79d9dc64":"#Availability matrix for requests with Pickup point as City\npivot_city = pd.pivot_table(uber_city,index = \"Time slot\",columns = \"Status\",values = \"Count\",aggfunc=np.sum)\nplt.figure(figsize = [8,6])\nhm = sns.heatmap(data = pivot_city, annot = True, fmt='g')\nplt.show()","e5d01d5f":"#Availability matrix for requests with Pickup point as Airport\npivot_airport = pd.pivot_table(uber_airport,index = \"Time slot\",columns = \"Status\",values = \"Count\",aggfunc=np.sum)\nplt.figure(figsize = [8,6])\nhm = sns.heatmap(data = pivot_airport, annot = True, fmt='g')\nplt.show()","8ec55017":"**Analysis**","a2184e24":"**Check Data Consistency**"}}