{"cell_type":{"a538a191":"code","e6085819":"code","81f5a33f":"code","0cbaa9c0":"code","b47323b5":"code","d88c58f1":"code","5d34e537":"code","d6b39648":"code","f6cf55fe":"code","6271c6da":"code","595dd301":"code","984f08e3":"code","669d2e9e":"markdown","0201f07b":"markdown","9e075e0d":"markdown","7f9c8fb1":"markdown","ae1f79bd":"markdown","e5ca1d6c":"markdown","0b55c23d":"markdown","0a2a2778":"markdown","3ef5c00a":"markdown","902f3184":"markdown","1fcdef61":"markdown","b8322c51":"markdown","131bc0fa":"markdown"},"source":{"a538a191":"import os\n\nimport numpy as np\nimport pandas as pd","e6085819":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","81f5a33f":"main_data = pd.read_csv(\"\/kaggle\/input\/military-tanks-dataset\/Battle Tanks.csv\")","0cbaa9c0":"# fast looking (size of dataframe, columns, 5 first rows of data, Nan values)\nprint(\"Size of dataframe\")\nprint(\"The dataset has \" + str(main_data.shape[0]) + \" rows.\")\nprint(\"And \" + str(main_data.shape[1]) + \" columns atleast.\")\nprint(\"Columns\")\nprint(\"List of columns: \", main_data.columns)\n\nprint(\"First rows of data and describing\")\nmain_data.head(5)\nprint(main_data.describe)\n\nprint(\"Procent of nan and null values\")\nprocent_of_null = main_data.isnull().sum() \/ main_data.shape[0]\nprint(procent_of_null)\n\nprocent_of_nan = main_data.isna().sum() \/ main_data.shape[0]\nprint(procent_of_nan)","b47323b5":"# droping useless columns with nan\nclean_data = main_data.dropna(axis = \"columns\")\n\n# filling launch year\nlaunch_year = np.array([main_data[\"Launch Year\"]]).reshape(18, 1)\nclean_data.insert(21, \"Launch Year\", launch_year, True)\nclean_data[\"Launch Year\"][9] = 2003\n\n# filling Power-to-weight ratio\npower_to_weightratio = np.array([main_data[\"Power-to-weight ratio (h.p.\/t)\"]]).reshape(18, 1)\nclean_data.insert(22, \"Power-to-weight ratio (h.p.\/t)\", power_to_weightratio, True)\nclean_data[\"Power-to-weight ratio (h.p.\/t)\"][8] = 18.96\nclean_data[\"Power-to-weight ratio (h.p.\/t)\"][12] = 25.1\n\n# checking nan values in our clean dataset\nprocent_of_null = clean_data.isnull().sum() \/ clean_data.shape[0]\nprint(procent_of_null)\n\nprocent_of_nan = clean_data.isna().sum() \/ clean_data.shape[0]\nprint(procent_of_nan)\n\n# drop useless columns\nuseless_cols = [\"Crew\", \"Gradient (in %)\", \"Side Slope (in %)\", \"Vertical Step (m)\",\n                \"Trench (m)\", \"Fording (m)\", \"Traverse Range\", \"Ammunition Main Weapon\"]\nclean_data = clean_data.drop(useless_cols, axis = 1)","d88c58f1":"# working with column Engine Type\nmapping = {\"diesel\" : \"Diesel\"}\n\nclean_data[\"Engine Type\"] = clean_data[\"Engine Type\"].map(mapping)\nclean_data[\"Engine Type\"][11] = \"Diesel\"\nclean_data[\"Engine Type\"][12] = \"Diesel\"","5d34e537":"# classification\nmedium = clean_data[clean_data[\"Weight (in Tons)\"] < 40]\nheavy = clean_data[clean_data[\"Weight (in Tons)\"] > 40]","d6b39648":"# oldest and newest\n\n# medium\nmedium_year = medium.sort_values(by = \"Launch Year\", ascending = False)\nprint(\"Top of newest medium Tanks (from newest to oldest): \")\nprint(medium_year.groupby(\"Launch Year\")[\"Model Name\"].head())\n\n# heavy\nheavy_year = heavy.sort_values(by = \"Launch Year\", ascending = False)\nprint(\"Top of newest heavy Tanks (from newest to oldest): \")\nprint(heavy_year.groupby(\"Launch Year\")[\"Model Name\"].head())","f6cf55fe":"# fastest tank\n\n# medium\nmedium_fast = medium.sort_values(by = \"Max Road Speed (km\/hr)\", ascending = False)\nprint(\"Top of fastest medium Tanks (from fastest to slowest): \")\nprint(medium_fast.groupby(\"Max Road Speed (km\/hr)\")[\"Model Name\"].head())\n\n# heavy\nheavy_fast = heavy.sort_values(by = \"Max Road Speed (km\/hr)\", ascending = False)\nprint(\"Top of fastest heavy Tanks (from fastest to slowest): \")\nprint(heavy_fast.groupby(\"Max Road Speed (km\/hr)\")[\"Model Name\"].head())","6271c6da":"# the biggest Power-to-weight ratio\n\n# medium\nmedium_pwr = medium.sort_values(by = \"Power-to-weight ratio (h.p.\/t)\", ascending = False)\nprint(\"Top of the medium Tanks with biggest Power-to-weight ratio (from biggest to smallest): \")\nprint(medium_pwr.groupby(\"Power-to-weight ratio (h.p.\/t)\")[\"Model Name\"].head())\n\n# heavy\nheavy_pwr = heavy.sort_values(by = \"Power-to-weight ratio (h.p.\/t)\", ascending = False)\nprint(\"Top of the heavy Tanks with biggest Power-to-weight ratio (from biggest to smallest): \")\nprint(heavy_pwr.groupby(\"Power-to-weight ratio (h.p.\/t)\")[\"Model Name\"].head())","595dd301":"# the biggest Engine power\n\n# medium\nmedium_eng = medium.sort_values(by = \"Engine Power (hp)\", ascending = False)\nprint(\"Top of the medium Tanks with the biggest Engine Power (from biggest to smallest): \")\nprint(medium_eng.groupby(\"Engine Power (hp)\")[\"Model Name\"].head())\n\n# heavy\nheavy_eng = heavy.sort_values(by = \"Engine Power (hp)\", ascending = False)\nprint(\"Top of the heavy Tanks with the biggest Engine Power (from biggest to smallest): \")\nprint(heavy_eng.groupby(\"Engine Power (hp)\")[\"Model Name\"].head())","984f08e3":"# caliber\n\n# medium\nmedium_cal = medium.sort_values(by = \"Main Weapon Caliber\", ascending = False)\nprint(\"Top of medium Tanks with the biggest caliber of main weapon (from biggest to smallest): \")\nprint(medium_cal.groupby(\"Main Weapon Caliber\")[\"Model Name\"].head())\n\n# heavy\nheavy_cal = heavy.sort_values(by = \"Main Weapon Caliber\", ascending = False)\nprint(\"Top of heavy Tanks with the biggest caliber of main weapon (from biggest to smallest): \")\nprint(heavy_cal.groupby(\"Main Weapon Caliber\")[\"Model Name\"].head())","669d2e9e":"Secondly, medium and heavy Tank with the biggest Power-to-weight ratio and with the biggest engine power. ","0201f07b":"Perfect! Finally, we did this task.","9e075e0d":"# 1) Import data and libraries.\nFirstly, lets import all useful libraries. Secondly, load data.","7f9c8fb1":"How we can the data set have 18 rows and 29 columns. We can look on names of columns and understand what they mean. Also, we can see that there are, unfortunately, many nan values.","ae1f79bd":"After that we can analyze what we have done. \n\nI think we should see the oldest and the newest heavy and medium Tank, because it is interesting.","e5ca1d6c":"# 6) Conclusion.\n\nFinally, we can see that country with the best Tanks is China, because in our Exploring Chinese Tanks was almost everywhere on 1st place (there are no any political contexts here and I didn\u2019t want hurt anyone).\n\n**Thank you everyone who check this notebook. If you like my notebook upvote it and if you dislike, please, write your comments it will help me to improve my skills.**","0b55c23d":"# Hello everyone! \nIn this notebook we will analyze data set about Tanks from different countries. In my mind, this data frame is cool, because I know that many people interested in military vehicles, especially in Tanks. So, let`s start.","0a2a2778":"# 3) Working with nan values and cleaning data.\nHow you can know there are many methods to fill nan values in data frames.\n\n1)\tFilling nan values with zeros or other numbers.\nI think that in this data this method is not correct, because it will \u201cbroke\u201d our data.\n\n2)\tFilling nan values by copying values from next or past stroke.\nIn my opinion this method is not bad, but not good for our problem, because, for example we have nan value with light tank, but fill values from heavy tank to it.\n\n3)\tDrop columns with nan values.\nIn my mind this method is correct when you understand that this or these columns are not useful at all. Let`s check this moment. We have nan in Power-to-weight ratio (This important thing to know), Fording (with preparation), Depression (Elevation Min), Elevation (Elevation Max) these 3 columns are useless in my mind, Manufactured By (useless), Launch Year (interesting and important column), Ammunition Auxiliary Gun, Ammunition AA Gun not useful columns.\n\nWell, after it we can drop columns that we don\u2019t need and try to find information to fill in columns that we need. All information I found just in Google. For example I wrote: \"M-95 Degman launch year\" and got result.","3ef5c00a":"After that we can start our Exploring. Firstly, let\u2019s see the fastest medium and heavy Tank. ","902f3184":"# 2) Fast looking on data.\nLet`s see head of our data frame, list of columns, size, description and nan values in this data.","1fcdef61":"# 5) Part of Exploring\nI think that the best way to analyze this data about Tanks is divide them into groups by their weight. To know which Tank is light and which is Heavy we should search info about it in internet. From Wikipedia (link: https:\/\/en.wikipedia.org\/wiki\/Tank_classification?wprov=sfla1) we learnt that there are a lot of types of Tanks classification and on of the easiest is Size classification. That\u2019s why we will use it in this notebook.\n\nWe will work with Weight (In tons) column. So, tanks with weight less than 40 tons are medium tanks, more 40 tons are heavy tanks. Let`s do this.","b8322c51":"Also let` s see some info about caliber of weapon on Tanks.","131bc0fa":"# 4) Work with problems in some columns.\nWe can see that there are strange situations with values in column Engine Type. The strange thing is that the same values are written differently (diesel, Diesel).  So, we should to rewrite info in this column."}}