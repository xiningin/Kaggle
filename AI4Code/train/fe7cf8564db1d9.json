{"cell_type":{"972bf258":"code","e8f5fa1f":"code","8097797a":"code","39c73c8a":"code","0f0d4577":"code","1a9260d8":"code","89df1523":"code","2235315d":"code","85d96ebd":"code","4fd167ea":"code","7f0e7cde":"code","1957f564":"code","da24b8bd":"markdown","7d41ed78":"markdown","3b11f98c":"markdown","f6c9314e":"markdown"},"source":{"972bf258":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport folium\nfrom folium.plugins import HeatMap\nfrom catboost import CatBoostRegressor\nimport xgboost\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e8f5fa1f":"train_df=pd.read_csv(\"\/kaggle\/input\/bigquery-geotab-intersection-congestion\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/bigquery-geotab-intersection-congestion\/test.csv\")","8097797a":"train_df.head(10)","39c73c8a":"ax = sns.countplot(x=\"City\", data=train_df)\nfor item in ax.get_xticklabels():\n    item.set_rotation(45)","0f0d4577":"#Creating Dummies for train Data\ndfcity= pd.get_dummies(train_df[\"City\"],prefix = 'city')\ndfen = pd.get_dummies(train_df[\"EntryHeading\"],prefix = 'en')\ndfex = pd.get_dummies(train_df[\"ExitHeading\"],prefix = 'ex')\n\ntrain_df = pd.concat([train_df,dfcity],axis=1)\ntrain_df = pd.concat([train_df,dfen],axis=1)\ntrain_df = pd.concat([train_df,dfex],axis=1)\n\n#Creating Dummies for test Data\ndfcitytest= pd.get_dummies(test_df[\"City\"],prefix = 'city')\ndfent = pd.get_dummies(test_df[\"EntryHeading\"],prefix = 'en')\ndfext = pd.get_dummies(test_df[\"ExitHeading\"],prefix = 'ex')\n\ntest_df = pd.concat([test_df,dfcitytest],axis=1)\ntest_df = pd.concat([test_df,dfent],axis=1)\ntest_df = pd.concat([test_df,dfext],axis=1)\n\n\n","1a9260d8":"## Thanks for: https:\/\/www.kaggle.com\/danofer\/baseline-feature-engineering-geotab-69-5-lb\n        \ndirections = {\n    'N': 0,\n    'NE': 1\/4,\n    'E': 1\/2,\n    'SE': 3\/4,\n    'S': 1,\n    'SW': 5\/4,\n    'W': 3\/2,\n    'NW': 7\/4\n}\n\ntrain_df['EntryHeading'] = train_df['EntryHeading'].map(directions)\ntrain_df['ExitHeading'] = train_df['ExitHeading'].map(directions)\n\ntest_df['EntryHeading'] = test_df['EntryHeading'].map(directions)\ntest_df['ExitHeading'] = test_df['ExitHeading'].map(directions)\n\n# entering and exiting on same street\ntrain_df[\"same_street_exact\"] = (train_df[\"EntryStreetName\"] ==  train_df[\"ExitStreetName\"]).astype(int)\ntest_df[\"same_street_exact\"] = (test_df[\"EntryStreetName\"] ==  test_df[\"ExitStreetName\"]).astype(int)","89df1523":"train_df.head(5)","2235315d":"X = train_df[[\"IntersectionId\",\"Hour\",\"Weekend\",\"Month\",'en_E', 'en_N', 'en_NE', 'en_NW', 'en_S', 'en_SE', 'en_SW', 'en_W', 'ex_E',\n       'ex_N', 'ex_NE', 'ex_NW', 'ex_S', 'ex_SE', 'ex_SW', 'ex_W', 'city_Atlanta', 'city_Boston', 'city_Chicago', 'city_Philadelphia', 'same_street_exact', 'EntryHeading', 'ExitHeading']]\ny1 = train_df[\"TotalTimeStopped_p20\"]\ny2 = train_df[\"TotalTimeStopped_p50\"]\ny3 = train_df[\"TotalTimeStopped_p80\"]\ny4 = train_df[\"DistanceToFirstStop_p20\"]\ny5 = train_df[\"DistanceToFirstStop_p50\"]\ny6 = train_df[\"DistanceToFirstStop_p80\"]","85d96ebd":"testX = test_df[[\"IntersectionId\",\"Hour\",\"Weekend\",\"Month\",'en_E','en_N', 'en_NE', 'en_NW', 'en_S', \n                 'en_SE', 'en_SW', 'en_W', 'ex_E','ex_N', 'ex_NE', 'ex_NW', 'ex_S', 'ex_SE', 'ex_SW', \n                 'ex_W', 'city_Atlanta', 'city_Boston', 'city_Chicago', 'city_Philadelphia', 'same_street_exact', 'EntryHeading', 'ExitHeading']]","4fd167ea":"regressor = xgboost.XGBRegressor(colsample_bytree=0.4,\n                 gamma=0,                 \n                 learning_rate=0.03,\n                 max_depth=12,\n                 min_child_weight=1.5,\n                 n_estimators=500,                                                                    \n                 reg_alpha=0.75,\n                 reg_lambda=0.45,\n                 subsample=0.6,\n                 seed=42) ","7f0e7cde":"%%time\nmodel_1 = regressor.fit(X, y1)\npred_1=model_1.predict(testX)\n\nmodel_2 = regressor.fit(X, y2)\npred_2=model_2.predict(testX)\n\n\nmodel_3 = regressor.fit(X, y3)\npred_3=model_3.predict(testX)\n\nmodel_4 = regressor.fit(X, y4)\npred_4=model_1.predict(testX)\n\nmodel_5 = regressor.fit(X, y5)\npred_5=model_5.predict(testX)\n\nmodel_6 = regressor.fit(X, y6)\npred_6=model_6.predict(testX)\n\npredictions = []\nfor i in range(len(pred_1)):\n    for j in [pred_1,pred_2,pred_3,pred_4,pred_5,pred_6]:\n        predictions.append(j[i])","1957f564":"submission = pd.read_csv(\"..\/input\/bigquery-geotab-intersection-congestion\/sample_submission.csv\")\nsubmission[\"Target\"] = predictions\nsubmission.to_csv(\"submission.csv\",index = False)","da24b8bd":"# Test data","7d41ed78":"# XGBoost Regressor","3b11f98c":"# Add features","f6c9314e":"# Training data"}}