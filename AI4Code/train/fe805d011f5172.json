{"cell_type":{"4a74e660":"code","cf5f43a0":"code","00f01bc0":"code","1bf6b174":"code","61fd93e0":"code","44bba14f":"code","d5bb1d40":"code","c7948fcd":"code","5c0f4a24":"code","9c5a5e0d":"code","60931af4":"code","2f36cabc":"code","c6be0416":"code","76ab8c30":"code","b6cec5d8":"code","2a5d8d60":"code","cefc8b8e":"code","115ab64e":"markdown","9abe3673":"markdown","4b585f90":"markdown","751d5087":"markdown","d0d360fc":"markdown","0b574876":"markdown","3210ec8f":"markdown","e21c7231":"markdown","2835d802":"markdown","1f690b42":"markdown","7a37f862":"markdown","288258f8":"markdown","829316da":"markdown","2e034994":"markdown"},"source":{"4a74e660":"import numpy as np, pandas as pd, gc, random\nimport matplotlib.pyplot as plt\n\ndef load(x):\n    ignore = ['MachineIdentifier']\n    if x in ignore: return False\n    else: return True\n\n# LOAD TRAIN AND TEST\ndf_train = pd.read_csv('..\/input\/microsoft-malware-prediction\/train.csv',dtype='category',usecols=load)\ndf_train['HasDetections'] = df_train['HasDetections'].astype('int8')\nif 5244810 in df_train.index:\n    df_train.loc[5244810,'AvSigVersion'] = '1.273.1144.0'\n    df_train['AvSigVersion'].cat.remove_categories('1.2&#x17;3.1144.0',inplace=True)\n#df_train = df_train.sample(8000000).reset_index(drop=True)\n\ndf_test = pd.read_csv('..\/input\/microsoft-malware-prediction\/test.csv',dtype='category',usecols=load)\n#df_test = df_test.sample(1000000).reset_index(drop=True)","cf5f43a0":"# COMPARE VALUE DENSITIES FROM TWO DIFFERENT DATAFRAMES\n#\n# PARAMETERS\n# df1: pandas.DataFrame containing variable\n# df2: pandas.DataFrame containing variable\n# col: column to compare between df1 and df2\n# override: set to False to prevent display when variables similar\n# verbose: display text summary\n# scale: zooms y-axis\n# title: plot title\n# lab1: legend label for df1\n# lab2: legend label for df2\n# prefix: pre text for verbose summary\n#\ndef comparePlot(df1, df2, col, factor=4, override=True, verbose=True, scale=0.5, title='',\n                lab1='', lab2='', prefix=''):\n    cv1 = pd.DataFrame(df1[col].value_counts(normalize=True).reset_index().rename({col:'train'},axis=1))\n    cv2 = pd.DataFrame(df2[col].value_counts(normalize=True).reset_index().rename({col:'test'},axis=1))\n    cv3 = pd.merge(cv1,cv2,on='index',how='outer')\n    cv3['train'].fillna(0,inplace=True)\n    cv3['test'].fillna(0,inplace=True)\n    cv3 = cv3.iloc[np.lexsort((cv3['test'], -cv3['train']))]\n    cv3['total'] = cv3['train']+cv3['test']\n    cv3['trainMX'] = cv3['train']*factor\n    cv3['trainMN'] = cv3['train']\/factor\n    cv3 = cv3[cv3['total']>0.0001]\n    if (len(cv3)<5): return\n    cv3.reset_index(inplace=True)\n    MX = (cv3['test'] > cv3['trainMX'])\n    mxSum = round(100*cv3.loc[MX,'test'].sum(),1)\n    MN = (cv3['test'] < cv3['trainMN'])\n    mnSum = round(100*cv3.loc[MN,'test'].sum(),1)\n    #if override | (MX.sum()+MN.sum()>0):\n    if override | (mxSum + mnSum > 1):\n        plt.figure(figsize=(15,5))\n        if lab1=='': lab1='Train'\n        if lab2=='': lab2='Test'\n        plt.plot(cv3.index,cv3['train'],linewidth=3,alpha=0.7,color='b',label=lab1)\n        plt.plot(cv3.index,cv3['trainMX'],linewidth=2,alpha=1.0,linestyle=':',color='b',label=str())\n        plt.plot(cv3.index,cv3['trainMN'],linewidth=2,alpha=1.0,linestyle=':',color='b',label=str())\n        #plt.bar(cv3.index,cv3['test'],linewidth=3,alpha=0.7,color='g', label='Test.csv')\n        plt.plot(cv3.index,cv3['test'],linewidth=3,alpha=0.7,color='g',label=lab2)\n        plt.legend()\n        if title=='': plt.title(col)\n        else: plt.title(col+' - '+title)\n        plt.xlabel(col+' values (ordered by train frequency and relabeled)')\n        plt.ylabel('Frequency')\n        mx = max(cv3['train'].max(),cv3['test'].max())\n        #plt.ylim(0,mx*1.05)\n        plt.ylim(0,mx*scale)\n        plt.show()\n        tempMX = cv3.loc[MX.values,['index','test']].sort_values('test',ascending=False)['index']\n        tempMN = cv3.loc[MN.values,['index','test']].sort_values('test',ascending=False)['index']\n        if verbose:\n            if MX.sum()>0:    \n                print(prefix+'Test.csv',col,'has',MX.sum(),'values 4x MORE freq than Train.csv. (',mxSum,'% of data)')\n            if MX.sum()>10: print('  Top 10 by test freq:',list(tempMX)[:10])\n            elif MX.sum()>0: print(list(tempMX)[:10])\n            if MN.sum()>0:\n                print(prefix+'Test.csv',col,'has',MN.sum(),'values 4x LESS freq than Train.csv. (',mnSum,'% of data)')\n            if MN.sum()>10: print('  Top 10 by test freq:',list(tempMN)[:10])\n            elif MN.sum()>0: print(list(tempMN)[:10])\n    return","00f01bc0":"comparePlot(df_train, df_test, 'CountryIdentifier', verbose=False, title='Test vs. Train')","1bf6b174":"df_trainA = df_train.sample(frac=0.5)\ndf_trainB = df_train[ ~df_train.index.isin(df_trainA.index)]\ncomparePlot(df_trainA, df_trainB, 'CountryIdentifier', verbose=False,\n            title='Random Validation Set vs. Train Subset', lab1='Train', lab2='Validation')","61fd93e0":"df_train['AvSigVersion2'] = df_train['AvSigVersion'].map(lambda x: np.int(x.split('.')[1]))\ndf_trainC = df_train[ df_train['AvSigVersion2']<275 ]\ndf_trainD = df_train[ df_train['AvSigVersion2']>=275 ]\ncomparePlot(df_trainC, df_trainD, 'CountryIdentifier', verbose=False,\n            title='Time-split Validation vs. Train', lab1='Train', lab2='Validation')","44bba14f":"from datetime import datetime\ndatedictAS = np.load('..\/input\/malware-timestamps\/AvSigVersionTimestamps.npy')[()]\ndf_train['DateAS'] = df_train['AvSigVersion'].map(datedictAS)\ndf_test['DateAS'] = df_test['AvSigVersion'].map(datedictAS)\n\ndf_testA = df_test[ df_test['DateAS']<datetime(2018,10,25) ]\ndf_testB = df_test[ df_test['DateAS']>datetime(2018,10,25) ]\ncomparePlot(df_train, df_testB, 'CountryIdentifier', verbose=False,\n           title='Private Test vs. Train', lab1='Train', lab2='Private Test')\ncomparePlot(df_train, df_testA, 'CountryIdentifier', verbose=False,\n           title='Public Test vs. Train', lab1='Train', lab2='Public Test')","d5bb1d40":"# FACTORIZE DATA\ndef factor_data(df_train, df_test, col):\n    df_comb = pd.concat([df_train[col],df_test[col]],axis=0)\n    df_comb,_ = df_comb.factorize(sort=True)\n    # MAKE SMALLEST LABEL 1, RESERVE 0\n    df_comb += 1\n    # MAKE NAN LARGEST LABEL\n    df_comb = np.where(df_comb==0, df_comb.max()+1, df_comb)\n    df_train[col] = df_comb[:len(df_train)]\n    df_test[col] = df_comb[len(df_train):]\n    del df_comb\n    \n# OPTIMIZE MEMORY\ndef reduce_memory(df,col):\n    mx = df[col].max()\n    if mx<256:\n            df[col] = df[col].astype('uint8')\n    elif mx<65536:\n        df[col] = df[col].astype('uint16')\n    else:\n        df[col] = df[col].astype('uint32')\n\n# REDUCE CATEGORY CARDINALITY\ndef relax_data(df_train, df_test, col):\n    cv1 = pd.DataFrame(df_train[col].value_counts().reset_index().rename({col:'train'},axis=1))\n    cv2 = pd.DataFrame(df_test[col].value_counts().reset_index().rename({col:'test'},axis=1))\n    cv3 = pd.merge(cv1,cv2,on='index',how='outer')\n    cv3['train'].fillna(0,inplace=True)\n    cv3['test'].fillna(0,inplace=True)\n    factor = len(df_test)\/len(df_train)\n    cv3['remove'] = False\n    cv3['remove'] = cv3['remove'] | (cv3['train'] < len(df_train)\/9000)\n    cv3['remove'] = cv3['remove'] | (factor*cv3['train'] < cv3['test']\/4)\n    cv3['remove'] = cv3['remove'] | (factor*cv3['train'] > 4*cv3['test'])\n    cv3['new'] = cv3.apply(lambda x: x['index'] if x['remove']==False else 0,axis=1)\n    cv3['new'],_ = cv3['new'].factorize(sort=True)\n    cv3.set_index('index',inplace=True)\n    cc = cv3['new'].to_dict()\n    df_train[col] = df_train[col].map(cc)\n    reduce_memory(df_train,col)\n    df_test[col] = df_test[col].map(cc)\n    reduce_memory(df_test,col)\n    \n# DISPLAY MEMORY STATISTICS\ndef display_memory(df_train, df_test):\n    print(len(df_train),'rows of training data use',df_train.memory_usage(deep=True).sum()\/\/1e6,'Mb memory!')\n    print(len(df_test),'rows of test data use',df_test.memory_usage(deep=True).sum()\/\/1e6,'Mb memory!')\n\n# CONVERT DTYPES TO CATEGORIES\ndef categorize(df_train, df_test, cols):\n    for col in cols:\n        df_train[col] = df_train[col].astype('category')\n        df_test[col] = df_test[col].astype('category')","c7948fcd":"del df_trainA, df_trainB, df_trainC, df_trainD\ndel df_train['DateAS'], df_test['DateAS']; x=gc.collect()\ncols = [x for x in df_train.columns if x not in ['HasDetections','AvSigVersion2']]\n    \nprint('Factorizing...')\nfor col in cols: factor_data(df_train, df_test, col)\nprint('Reducing memory...')\nfor col in cols: reduce_memory(df_train, col)\nfor col in cols: reduce_memory(df_test, col)\ncategorize(df_train, df_test, cols)\ndisplay_memory(df_train, df_test)","5c0f4a24":"import lightgbm as lgb\ndf_trainA = df_train.sample(frac=0.5)\ndf_trainB = df_train[ ~df_train.index.isin(df_trainA.index)]\nmodel = lgb.LGBMClassifier(n_estimators=3000, colsample_bytree=0.2, objective='binary', num_leaves=16,\n          max_depth=-1, learning_rate=0.1)\nh=model.fit(df_trainA[cols], df_trainA['HasDetections'], eval_metric='auc',\n          eval_set=[(df_trainB[cols], df_trainB['HasDetections'])], verbose=250,\n          early_stopping_rounds=100)","9c5a5e0d":"del df_trainA, df_trainB; x=gc.collect()\nidx = 0; chunk = 2000000\npred_val = np.zeros(len(df_test))\nwhile idx < len(df_test):\n    idx2 = min(idx + chunk, len(df_test) )\n    idx = range(idx, idx2)\n    pred_val[idx] = model.predict_proba(df_test.iloc[idx][cols])[:,1]\n    idx = idx2\nsubmit = pd.read_csv('..\/input\/microsoft-malware-prediction\/sample_submission.csv')\nsubmit['HasDetections'] = pred_val\nsubmit.to_csv('ModelOne.csv', index=False)","60931af4":"df_trainC = df_train[ df_train['AvSigVersion2']<275 ]\ndf_trainD = df_train[ df_train['AvSigVersion2']>=275 ]\nmodel = lgb.LGBMClassifier(n_estimators=3000, colsample_bytree=0.2, objective='binary', num_leaves=16,\n          max_depth=-1, learning_rate=0.1)\nh=model.fit(df_trainC[cols], df_trainC['HasDetections'], eval_metric='auc',\n          eval_set=[(df_trainD[cols], df_trainD['HasDetections'])], verbose=250,\n          early_stopping_rounds=100)","2f36cabc":"print('Converting data to Model Two...')\ndf_trainC = df_trainC.copy()\ndf_trainD = df_trainD.copy()\nfor col in cols: relax_data(df_trainC, df_trainD, col)\ncategorize(df_trainC, df_trainD, cols)\nmodel = lgb.LGBMClassifier(n_estimators=3000, colsample_bytree=0.2, objective='binary', num_leaves=16,\n          max_depth=-1, learning_rate=0.1)\nh=model.fit(df_trainC[cols], df_trainC['HasDetections'], eval_metric='auc',\n          eval_set=[(df_trainD[cols], df_trainD['HasDetections'])], verbose=250,\n          early_stopping_rounds=100)","c6be0416":"print('Converting data to Model Two...')\ndel df_trainC, df_trainD; x=gc.collect()\nfor col in cols: relax_data(df_train, df_test, col)\ncategorize(df_train, df_test, cols)\ndf_trainA = df_train.sample(frac=0.5)\ndf_trainB = df_train[ ~df_train.index.isin(df_trainA.index)]\nmodel = lgb.LGBMClassifier(n_estimators=3000, colsample_bytree=0.2, objective='binary', num_leaves=16,\n          max_depth=-1, learning_rate=0.1)\nh=model.fit(df_trainA[cols], df_trainA['HasDetections'], eval_metric='auc',\n          eval_set=[(df_trainB[cols], df_trainB['HasDetections'])], verbose=250,\n          early_stopping_rounds=100)","76ab8c30":"del df_trainA, df_trainB, df_train; x=gc.collect()\nidx = 0; chunk = 2000000\npred_val = np.zeros(len(df_test))\nwhile idx < len(df_test):\n    idx2 = min(idx + chunk, len(df_test) )\n    idx = range(idx, idx2)\n    pred_val[idx] = model.predict_proba(df_test.iloc[idx][cols])[:,1]\n    idx = idx2\nsubmit = pd.read_csv('..\/input\/microsoft-malware-prediction\/sample_submission.csv')\nsubmit['HasDetections'] = pred_val\nsubmit.to_csv('ModelTwo.csv', index=False)","b6cec5d8":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn import tree\nimport graphviz\n\n# LOAD TRAIN AND TEST\ndf_train = pd.read_csv('..\/input\/microsoft-malware-prediction\/train.csv',dtype='category',usecols=load, nrows=10000)\ndf_train['HasDetections'] = df_train['HasDetections'].astype('int8')\nif 5244810 in df_train.index:\n    df_train.loc[5244810,'AvSigVersion'] = '1.273.1144.0'\n    df_train['AvSigVersion'].cat.remove_categories('1.2&#x17;3.1144.0',inplace=True)\n#df_train = df_train.sample(1000000).reset_index(drop=True)\ndf_test = pd.read_csv('..\/input\/microsoft-malware-prediction\/test.csv',dtype='category',usecols=load, nrows=10000)\n#df_test = df_test.sample(1000000).reset_index(drop=True)\n\n# FACTORIZE\ncols = [x for x in df_train.columns if x not in ['HasDetections','AvSigVersion2']]\nfor col in cols: factor_data(df_train, df_test, col)\nfor col in cols: reduce_memory(df_train, col)\nfor col in cols: reduce_memory(df_test, col)\ncategorize(df_train, df_test, cols)\n# COMBINE TRAIN AND TEST\ndf_train['HasDetections'] = 0\ndf_test['HasDetections'] = 1\ndf_comb = pd.concat([df_train,df_test],axis=0)\n\n# VALIDATION\nmodel = DecisionTreeClassifier(max_leaf_nodes=5)\nmodel.fit(df_comb[cols], df_comb['HasDetections'])\npred_val = model.predict_proba(df_comb[cols])[:,1]\nprint('Model One: Adversarial Training AUC = ',round( roc_auc_score(df_comb['HasDetections'],pred_val),4 ) )\n#print('Adversarial Model has tree depth =',model.tree_.max_depth,'and node count =',model.tree_.node_count)\nprint('Adversarial Model has max_leaf_nodes=5')\n# PLOT TREE                    \ntree_graph = tree.export_graphviz(model, out_file=None, max_depth = 10,\n        impurity = False, feature_names = cols, class_names = ['No', 'Yes'],\n        rounded = True, filled= True )\ngraphviz.Source(tree_graph)","2a5d8d60":"# CONVERT VARIABLES TO MODEL TWO\nfor col in cols: relax_data(df_train, df_test, col)\ncategorize(df_train, df_test, cols)\ndf_comb = pd.concat([df_train,df_test],axis=0)\n# REMOVE TROUBLESOME SMODE\ncols2 = cols.copy()\ncols2.remove('SMode')\n\n#VALIDATION\nmodel = DecisionTreeClassifier(max_leaf_nodes=5)\nmodel.fit(df_comb[cols2], df_comb['HasDetections'])\npred_val = model.predict_proba(df_comb[cols2])[:,1]\nprint('Model Two: Adversarial Training AUC = ',round( roc_auc_score(df_comb['HasDetections'],pred_val),4 ) )\n#print('Adversarial Model has tree depth =',model.tree_.max_depth,'and node count =',model.tree_.node_count)\nprint('Adversarial Model has max_leaf_nodes=5')\n# PLOT TREE          \ntree_graph = tree.export_graphviz(model, out_file=None, max_depth = 10,\n        impurity = False, feature_names = cols2, class_names = ['No', 'Yes'],\n        rounded = True, filled= True )\ngraphviz.Source(tree_graph)","cefc8b8e":"cols2 = {'AVProductStatesIdentifier':0.01, 'CountryIdentifier':0.4, 'LocaleEnglishNameIdentifier':0.3, 'SmartScreen':0.4,\n         'Census_OEMNameIdentifier':0.1,'Census_TotalPhysicalRAM':0.5,'Census_InternalPrimaryDiagonalDisplaySizeInInches':0.05,\n        'Census_OSInstallTypeName':0.75,'Census_OSInstallLanguageIdentifier':0.3,'Census_FirmwareManufacturerIdentifier':0.1,\n        'EngineVersion':1.0, 'AppVersion':0.7, 'OsBuildLab':0.2, 'Census_OEMModelIdentifier':0.15,\n        'Census_InternalBatteryNumberOfCharges':0.05}\n\ndf_train = pd.read_csv('..\/input\/microsoft-malware-prediction\/train.csv',dtype='category',usecols=load)\ndf_test = pd.read_csv('..\/input\/microsoft-malware-prediction\/test.csv',dtype='category',usecols=load)\ndf_test['DateAS'] = df_test['AvSigVersion'].map(datedictAS)\ndf_testA = df_test[ df_test['DateAS']<datetime(2018,10,25) ]\ndf_testB = df_test[ df_test['DateAS']>datetime(2018,10,25) ]\n\nfor x in df_train.columns[:-2]:\n    s = 0.5\n    if x in cols2: s = cols2[x] \n    comparePlot(df_train,df_testA,x,scale=s, title='Public Test vs. Train', prefix='Public ')\n    comparePlot(df_train,df_testB,x,scale=s, title='Private Test vs. Train', prefix='Private ')","115ab64e":"# EDA Compare Plots\nBelow are all variables containing 5 or more categories (after removing values with less than 0.1% overall data). The most troublesome variables are: `EngineVersion`, `AvSigVersion`, `AppVersion`, `Census_OSVersion`, `Census_OSBuildRevision`, `DefaultBrowsersIdentifier`, `OsBuildLab`, `IeVerIdentifier`, `OsBuild`, `OsPlatformSubRelease`, `Census_OSBranch`, `Census_OSBuildNumber`. These variables have 89%, 84%, 70%, 38%, 37%, 9%, 7%, 3%, 2%, 2%, 2%, 2% differences between TRAIN and PUBLIC TEST respectively. And 100%, 100%, 84%, 60%, 60%, 11%, 12%, 6%, 6%, 6%, 6%, 6% differences between TRAIN and PRIVATE TEST. \n  \nIn order to make the most accurate model, you need to do something with these variables.  Recall that Model Two above was created by removing all values from these variables where the green solid line crosses the blue dotted line. To create a better model, transform these values into new values, whose TEST TRAIN distribution is similar. Use creative feature engineering and\/or encoding techniques.","9abe3673":"# Model One: using Random Validation","4b585f90":"# Model Two: using Time Split Validation","751d5087":"Notice how the green line wiggles and does not stay on top of the blue line. Also notice that it stays within the dotted blue lines. This means that the distribution of `CountryIdentifier` values in TEST.csv are different but pretty similar to TRAIN.csv. It is concerning that they differ. For comparsion, see below. \n# Random Validation Set versus Train Subset\nBelow I split TRAIN.csv into a randomly selected validation set and training subset. Notice how the distributions are nearly identical. This is what random samples from the same population look like.","d0d360fc":"# LB Score versus CV Score\nWe now understand how the distribution of TEST differs from TRAIN. Let's now compare a Time Split Validation scheme to a Random Validation scheme. Let's see which one more accurately estimates LB. In order to compare, we will need two sets of variables (two models). \n\n## Model One\nOur first set of variables will be the entire TRAIN.csv converted into categories with no further processing.\n## Model Two\nOur second set of variables will be the entire TRAIN.csv with certain values removed. Notice I say values not variables. For each of the 82 variables, we will look at all their possible values in TRAIN. If a value does not appear in TEST, we will remove it. If a value appears less than 0.01% of total TRAIN, we will remove it. If a value appears 4x more frequent in TRAIN than TEST, we will remove it. If a value appears 4x less frequent in TRAIN than TEST, we will remove it. (This idea is from [Vladislav Bogorod's][2] brillant kernel [here][1].)\n\nFor example, the variable `AppVersion` contains the value `4.18.1807.18075`. This value appears in TRAIN over 4x as frequent as it appears in TEST. Therefore we will remove this value's category from `AppVersion`. All values that appear 4x more or 4x less are indicated in the compare plots whenever the green solid line crosses over the blue dotted line in. (Note: It has been shown that model two can score 0.692 LB [here][1])\n\n## Result\nBelow we will see that  \n  \n    Model One scores: 0.732 Random, 0.695 TimeSplit, 0.672 LB  \n    Model Two scores: 0.729 Random, 0.704 TimeSplit, 0.681 LB\n\nThis shows that Time Split Validation was better able to estimate LB score than Random Validation (typical CV). It's a relief to find a test that distinguishes models with different LB scores!\n  \n[1]: https:\/\/www.kaggle.com\/bogorodvo\/upd-lightgbm-baseline-model-using-sparse-matrix\n[2]: https:\/\/www.kaggle.com\/bogorodvo","0b574876":"# Test Full versus Train Full\nTo compare the distributions of TEST.csv and TRAIN.csv, I wrote a special Python function. (If interested, click the button 'see code' to view.) The visual may be confusing at first, so let me explain. Basically the plot is two histograms on top of each other. Instead of using bars, it uses a line which follows where the tops of the bars would be. The x-axis are the category variable's possible values. They have been ordered from most frequent in TRAIN to less frequent in TRAIN. Then values containing less than 0.1% of data are removed. Then they are relabeled 0, 1, 2, ... n.\n\nThe solid blue line is TRAIN and the solid green line is TEST. If the distributions are the same then the blue and green line would coincide. The dotted blue lines indicate 4x more than TRAIN and 4x less than TRAIN. Therefore if the green line crosses outside the dotted lines, then TEST has a value that is 4x more or 4x less than TRAIN. Let's plot `CountryIdentifier` for TRAIN.csv versus TEST.csv. ","3210ec8f":"# Time Split Validation - Adversarial EDA - Microsoft Malware\nIs anyone else frustrated with the discrepency between CV and LB?! In this kernel, I show an example of two models that both have CV 0.730 but one has LB 0.670 while the other has LB 0.680. Why?! We will explore this and suggest ideas to more accurately estimate LB.\n\n# The Culprit\n\nThe Microsoft Malware data has 82 explanatory variables which can all be intrepreted as categorical variables. The reason for CV and LB gap is the difference between TRAIN and TEST variable value distributions. In this kernel, we compare the variable distributions between TRAIN and TEST. If TRAIN and TEST were random samples from the same population then their distributions would be nearly identical (since sample size is a massive 8 million). But this is not what we see! \n\nWhy? Because TRAIN is sampled from the population of August September 2018 while TEST is sampled from the different population October November 2018 (shown [here][1]). Furthermore we believe that PUBLIC TEST is October 2018 and PRIVATE TEST is November 2018 (shown [here][2]).  \n  \n[1]: https:\/\/www.kaggle.com\/cdeotte\/time-series-eda-malware-0-64\n[2]: https:\/\/www.kaggle.com\/rquintino\/2-months-train-1-month-public-1-day-private","e21c7231":"# Conclusion\nIn conclusion, we see how a time split validation scheme approximates LB better than a random validation scheme. Additionally, using compare plots EDA helps us choose time stable variables for our models. Below I show an alternative method, adversarial validation. After that I present all the compare plots.\n\n# Adversarial Validation\nAlternatively, some people use adversarial validation to discover troublesome values and\/or test their models. Above, we used Compare Plots to discover troublesome values and then created our Model One and Model Two. We won't use adversarial validation here to find variables, but we will apply adversarial validation on Model One and Model Two to confirm that we did a good job. (Note since I use a small tree below, I use training AUC to approximate validation AUC.)\n## What is Adversarial Validation?\nNormallly a model classifies which computers have Malware and which computers do not. In adversarial validation, we mix all the TRAIN and TEST data together. We add a new variable `IsTest`. For all computers from TEST, we set `IsTest=1` and all computers from TRAIN, we set `IsTest=0`. We then build a model that attempts to classify whether a computer is `IsTest` or not. If the distribution of variables are the same in TEST and TRAIN (were randomly drawn from the sample population), then an adversarial model can not distinguish TEST from TRAIN. But when the distributions are different, it can. Below we witness how an adversarial model can distinquish TEST from TRAIN when using the variables from Model One but cannot distinguish when using the variables from Model Two. (With the exception that I need to remove `SMode` since it is skewed but didn't exceed 4x.)","2835d802":"# Model Two: using Random Validation","1f690b42":"Comparing the two plots above, we see that a random validation set does not mimic the relationship between TRAIN and TEST. Therefore it is not a good validation scheme to predict LB score.\n# Time Split Validation Set versus Train Subset\nTo make a more useful validation set, lets split TRAIN roughly in half ordered by time using `AvSigVerion` (which is a proxy for time). Then we will compare this Time Split Validation set versus Train subset. All `AvSigVersion` with second number `<275` are before August 23, 2018 while `>=275` are after. This splits TRAIN roughly in half and avoids `AvSigVersion` overlap in the second number (which mimics TEST \/ TRAIN). We notice that this plot looks more like the TEST TRAIN plot above.","7a37f862":"# Model One: using Time Split Validation","288258f8":"![image](http:\/\/playagricola.com\/Kaggle\/two21319.png)","829316da":"# Private Test versus Train Full\nThe biggest difference in distribution is going from TRAIN to PRIVATE TEST. It is believed that PRIVATE TEST is the month of November 2018. And TRAIN's most recent observation is September 2018. In that large time gap, the distribution of variables will change. Specially it is believed that PRIVATE TEST is after October 25, 2018. Below is the plot of PRIVATE TEST versus TRAIN, and afterward is the plot of PUBLIC TEST versus TRAIN.","2e034994":"![image](http:\/\/playagricola.com\/Kaggle\/one21319.png)"}}