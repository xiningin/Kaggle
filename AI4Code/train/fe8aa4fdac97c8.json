{"cell_type":{"c8573334":"code","75b89df5":"code","f9b53a55":"code","131b1756":"code","67fdea21":"code","7caf4fe4":"code","240a892f":"code","ccec16c7":"code","fe76de25":"code","64bc6b91":"code","1a060167":"code","e1924fbc":"code","5bb25f9d":"code","dbf8a1fc":"code","f60e8b9d":"code","82442c2f":"code","4ececb8d":"code","96c724dc":"code","f509d531":"code","b579c516":"code","d61315d1":"code","6b91f3ce":"code","d77e6cc7":"code","677e8667":"code","cb0f8bb0":"code","a1bfb0ba":"code","d794412c":"code","20332ed8":"markdown","6b11c9e5":"markdown","ae6c4be9":"markdown","e785069e":"markdown","f644a807":"markdown"},"source":{"c8573334":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","75b89df5":"import tensorflow as tf\nfrom tensorflow import keras\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","f9b53a55":"mnist = keras.datasets.fashion_mnist","131b1756":"type(mnist)","67fdea21":"(X_train,Y_train),(X_test,Y_test) = mnist.load_data()  ## using as tuple to store train and test data","7caf4fe4":"print(\"X_train:\",X_train.shape)  ### Displaying no of rows and column\nprint(\"Y_train:\",Y_train.shape)\nprint(\"X_test:\", X_test.shape)\nprint(\"Y_test:\", Y_test.shape)","240a892f":"print(\"X_train max:\",np.max(X_train))  ## Displaying maximum of array elements\nprint(\"X_test max:\", np.max(X_test))\nprint(\"Y_train max:\", np.max(Y_train))\nprint(\"Y_test max:\", np.max(Y_test))","ccec16c7":"Y_train  ## It contains 10 items which are assigned from 0 to 9","fe76de25":"Y_test  ## It contains 10 items","64bc6b91":"class_names = ['top', 'trouser', 'pullover', 'dress', 'coat', 'sandal', 'shirt', 'sneaker', 'bag', 'ankle boot'] \\\n## Labeling the items","1a060167":"plt.figure()    ## display ankle boot\nplt.imshow(X_train[0])\nplt.colorbar()","e1924fbc":"plt.figure()   ## display Top\nplt.imshow(X_train[3])\nplt.colorbar()","5bb25f9d":"X_train = X_train\/255.0\nX_test = X_test\/255.0","dbf8a1fc":"plt.figure()   ## Now the pixel is from 0 to 1.\nplt.imshow(X_train[9])\nplt.colorbar()","f60e8b9d":"## Building the model with TF2.0\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Flatten, Dense ","82442c2f":"model = Sequential()\nmodel.add(Flatten(input_shape = (28, 28)))##Flatten converts the multidimensional pixel into1D array to be fitted to denselayer\nmodel.add(Dense(128, activation = 'relu'))  ## 128 neurons \nmodel.add(Dense(10, activation = 'softmax')) ## 10 output layer","4ececb8d":"model.summary()","96c724dc":"model.compile(optimizer='adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])","f509d531":"model.fit(X_train,Y_train, epochs = 10)","b579c516":"from sklearn.metrics import accuracy_score","d61315d1":"y_pred = model.predict_classes(X_test)","6b91f3ce":"accuracy_score(Y_test, y_pred)","d77e6cc7":"y_pred","677e8667":"pred = model.predict(X_test)","cb0f8bb0":"pred.shape  ## It has 10000 rows and 9 columns","a1bfb0ba":"pred[9]  ## displaying the 10th element","d794412c":"np.argmax(pred[9])  ## determining the highest prediction score","20332ed8":"**MNIST Dataset - Image Classification using Tensor Flow**","6b11c9e5":"Exploratory Data Analysis (EDA)****","ae6c4be9":"**The pixel value lies from 0 to 255, since Neural Network only takes values from 0 to 1 so we have to divide it by 255**","e785069e":"**Model Compilation we have to do 3 steps**\n1. Loss Function\n2. Optimizer\n3. Metrics","f644a807":"Fashion-MNIST is a dataset of Zalando's article images\u2014consisting of a training set of 60,000 examples and a test set of 10,000 examples. Each example is a 28x28 grayscale image, associated with a label from 10 classes."}}