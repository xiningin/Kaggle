{"cell_type":{"8cd27dda":"code","0699378b":"code","7368b7b1":"code","aa130dce":"code","1dfee653":"code","dd8b36db":"code","7d7f33d4":"code","05bc8b92":"code","869e8462":"code","89ae0782":"code","67f9669e":"code","a407948e":"code","fca440d2":"code","147cd45f":"code","a8214f04":"code","d833ea05":"code","f57b0c24":"code","bf32cae1":"code","53bcd6ae":"markdown","ff490fbb":"markdown","d454e045":"markdown","c20f8564":"markdown","9d0069ff":"markdown","86d41253":"markdown","06deca57":"markdown"},"source":{"8cd27dda":"!pip install dataprep","0699378b":"import dataprep\nfrom dataprep import eda\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.impute import SimpleImputer\nfrom sklearn import preprocessing\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7368b7b1":"# Get the train data\ntrainFile = \"..\/input\/cat-in-the-dat\/train.csv\"\ntrainDataset = pd.read_csv(trainFile)\nprint(trainDataset.shape)\n# Get the test data\ntestFile = \"..\/input\/cat-in-the-dat\/test.csv\"\ntestDataset = pd.read_csv(testFile)\nprint(testDataset.shape)","aa130dce":"trainDataset","1dfee653":"testDataset","dd8b36db":"eda.create_report(trainDataset, title=\"train data report\")","7d7f33d4":"train_y = trainDataset['target'].values\ntrainDataset = trainDataset.drop('target',axis = 1)","05bc8b92":"eda.plot_diff([trainDataset, testDataset])","869e8462":"from sklearn.preprocessing import StandardScaler, LabelEncoder","89ae0782":"print(trainDataset.shape)\nprint(testDataset.shape)\nntrain = trainDataset.shape[0]\nntest = testDataset.shape[0]\nall_data = pd.concat([trainDataset, testDataset])\nprint(all_data.shape)","67f9669e":"le = LabelEncoder()\nfor i in all_data.columns:\n    all_data[i] = le.fit_transform(all_data[i])\n\nprint(all_data.shape)\nall_data.head()","a407948e":"sc = StandardScaler() \nall_data = sc.fit_transform(all_data)","fca440d2":"train = all_data[:ntrain]\ntest = all_data[ntrain:]\nprint(train.shape)\nprint(test.shape)","147cd45f":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score, accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","a8214f04":"parameters = {'min_samples_leaf': [ 5],'max_depth': [7,10],'max_features': [7]}\nrfc = RandomForestClassifier(n_estimators=200, random_state=42)\ngcv = GridSearchCV(rfc, parameters,n_jobs=None, cv=5, verbose=3,scoring='roc_auc', return_train_score=True)\ngcv.fit(train, train_y)\ngcv.score(train, train_y)","d833ea05":"model=gcv.best_estimator_\nmodel","f57b0c24":"y_pred = model.predict_proba(test)","bf32cae1":"sub = pd.DataFrame()\nsub['id'] = testDataset['id']\nsub['target'] = y_pred[:, 1]\nsub.to_csv('submission.csv', index=False)","53bcd6ae":"Analys","ff490fbb":"# Lets start","d454e045":"Libraries","c20f8564":"![image.png](attachment:bda9065f-11dd-4270-8bea-a10e81acc709.png)","9d0069ff":"# Data preparation","86d41253":"Load datasets","06deca57":"# Train"}}