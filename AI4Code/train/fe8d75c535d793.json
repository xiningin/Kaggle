{"cell_type":{"69b8fd4e":"code","e2efa41c":"code","417b6810":"code","bc22fc7d":"code","e8f0d23a":"code","df893378":"code","32eb2ec4":"code","c2ef8447":"code","541e4409":"code","3a14fe84":"code","3554cf33":"code","c9185052":"code","27b64cdd":"code","0272b628":"code","447c534f":"code","00c1298e":"code","245cba67":"code","e81789f5":"code","fb9d7524":"code","ceac29e8":"markdown","916e4b07":"markdown","547ead50":"markdown","b5406b4b":"markdown","17571822":"markdown","ce23e269":"markdown","95d6552d":"markdown","52a3d459":"markdown","b27aa4cd":"markdown"},"source":{"69b8fd4e":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn import preprocessing\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom sklearn import metrics","e2efa41c":"df=pd.read_csv('..\/input\/breast-cancer-wisconsin-prognostic-data-set\/data 2.csv')","417b6810":"df.T","bc22fc7d":"columns=df.columns\ncolumns_new=[]\nfor i in columns:\n    columns_new.append(any(df[i].isnull()|df[i].isnull()))\ndf=df.drop(columns[columns_new],axis=1)","e8f0d23a":"{'unique patients':len(df.id.unique()), 'records':len(df.id)}","df893378":"ax = sns.countplot(df.diagnosis,label=\"Count\")       # M = 212, B = 357\ndf.diagnosis.value_counts()","32eb2ec4":"train_features, test_features, train_labels, test_labels=train_test_split(\n    df.drop(['id','diagnosis'], axis=1),\n    df[['diagnosis']],\n    test_size=0.3,\n    random_state=41)","c2ef8447":"corrMatrix = train_features.corr()\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(corrMatrix, annot=True,ax=ax)\nplt.show()","541e4409":"correlated_features = set()\nfor i in range(len(corrMatrix .columns)):\n    for j in range(i):\n        if abs(corrMatrix.iloc[i, j]) > 0.85:\n            colname = corrMatrix.columns[i]\n            correlated_features.add(colname)\nprint(correlated_features)","3a14fe84":"train_features.drop(labels=correlated_features, axis=1, inplace=True)\ntest_features.drop(labels=correlated_features, axis=1, inplace=True)","3554cf33":"corrMatrix = train_features.corr()\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(corrMatrix, annot=True,ax=ax)\nplt.show()","c9185052":"ax = sns.boxplot( palette=\"Set2\", orient=\"h\",data=train_features)","27b64cdd":"constant_filter = VarianceThreshold(threshold=0.0)\nconstant_filter.fit(train_features)\ntrain_features = constant_filter.transform(train_features)\ntest_features = constant_filter.transform(test_features)\n\ntrain_features.shape, test_features.shape","0272b628":"mm_scaler = preprocessing.StandardScaler()\ntrain_features = pd.DataFrame(mm_scaler.fit_transform(train_features))\ntest_features=pd.DataFrame(mm_scaler.transform(test_features))","447c534f":"X = train_features\ny = train_labels.replace({'B':0,'M':1})\n# define the keras model\nmodel = Sequential()\nmodel.add(Dense(12, input_dim=train_features.shape[1], activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid'))\n# compile the keras model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# fit the keras model on the dataset\nmodel.fit(X, y, epochs=50, batch_size=8)\n# evaluate the keras model\n_, accuracy = model.evaluate(X, y)","00c1298e":"# make class predictions with the model\ny_pred = model.predict_classes(test_features)","245cba67":"def conf_matrix(matrix,pred):\n    class_names= [0,1]# name  of classes\n    fig, ax = plt.subplots()\n    tick_marks = np.arange(len(class_names))\n    plt.xticks(tick_marks, class_names)\n    plt.yticks(tick_marks, class_names)\n    # create heatmap\n    sns.heatmap(pd.DataFrame(matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\n    ax.xaxis.set_label_position(\"top\")\n    plt.tight_layout()\n    plt.title('Confusion matrix', y=1.1)\n    plt.ylabel('Actual label')\n    plt.xlabel('Predicted label')\n    plt.show()","e81789f5":"cnf_matrix = metrics.confusion_matrix(y_pred,test_labels.replace({'B':0,'M':1}),normalize='true')\nconf_matrix(cnf_matrix,test_labels)","fb9d7524":"# calculate prediction\nreport = classification_report(y_pred,test_labels.replace({'B':0,'M':1}))\nprint(report)","ceac29e8":"# Model Training ","916e4b07":"# Reading dataset","547ead50":"# Features with 0 variance should be also removed","b5406b4b":"# Correlated features must be removed","17571822":"# Scaling the data is a very important step before training","ce23e269":"# Importing libraries","95d6552d":"# Model evaluation","52a3d459":"# Spliting data into train and test ","b27aa4cd":"# Data exploration"}}