{"cell_type":{"71631b1a":"code","26069062":"code","0f08b6eb":"code","d4460bc4":"code","0621286d":"code","1d93921f":"code","e332859d":"code","7ca33a7c":"code","7595fc0f":"code","ceb70397":"code","68e5cb8c":"code","346db001":"code","edca33ad":"code","08ac5208":"code","05212389":"code","7c0f37d9":"code","76cf5a9d":"code","9ed50d33":"code","23dd05c0":"code","e1edf530":"code","c866a56c":"code","6a5c7d4b":"code","5ba3846c":"code","09367754":"code","56bf625d":"code","ba207e50":"code","f8258cb6":"code","d1c0d760":"code","d6005a09":"code","60f40692":"code","66ab0051":"code","589bb620":"code","2aca0c8b":"code","a068e08a":"code","76facdc8":"code","2feea36d":"code","777a2976":"code","96d371ee":"code","9190f08f":"code","ac822fde":"code","c649d5f8":"code","754d8f82":"code","31f22b58":"code","c90c895f":"code","a24da631":"code","edc7a042":"code","2579b953":"code","04f9ca3d":"code","5ad282bd":"markdown","3b6aae74":"markdown","7cf47a2d":"markdown","dab862b2":"markdown","8f63ee30":"markdown","52e82dd7":"markdown","ddd82213":"markdown","140ab09f":"markdown","7d3e68ed":"markdown","1d37076e":"markdown","0d8fedcf":"markdown","91c6e577":"markdown","23483e85":"markdown","309c38dd":"markdown","1cfb7f38":"markdown","e7863404":"markdown","1297f788":"markdown","3b9c1775":"markdown","883b89d8":"markdown","4c356322":"markdown","934d5345":"markdown","6dfc6705":"markdown"},"source":{"71631b1a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as mpatches\nimport seaborn as sns\n\n# What do we say to python warnings? NOT TODAY\nimport warnings\nwarnings.filterwarnings('ignore')","26069062":"metadata = pd.read_csv(\"\/kaggle\/input\/bdg2-class-competition\/metadata.csv\")\nmetadata.info()","0f08b6eb":"# Percentage of missing values in each feature\nround(metadata.isna().sum()\/len(metadata)*100,2)","d4460bc4":"cat = [\"site_id\",\"primaryspaceusage\",\"sub_primaryspaceusage\",\"industry\",\"subindustry\",\"timezone\"]\n\ncol = []\nfor feature in cat:\n    col_list = list([cat for cat in metadata[feature].unique() if cat is not np.nan]) # Nan values are not included\n    len_col_list = len(col_list)\n    col_list.insert(0, len_col_list)\n    col.append(col_list)\n\ncat_df = pd.DataFrame.from_records(col).T.rename(\n    columns={\n        0: \"site_id\",\n        1: \"primaryspaceusage\",\n        2: \"sub_primaryspaceusage\",\n        3: \"industry\",\n        4: \"subindustry\",\n        5: \"timezone\",\n    }\n).fillna(\"-\")","0621286d":"cat_df","1d93921f":"sns.set(rc={'figure.figsize':(36,21)})\nsns.set(font_scale = 2)\nxlim = 272\n\nf, axes = plt.subplots(3, 3)\n\naxes = axes.flatten()\n\ncolor = \"yellowgreen\"\n\n# primary use category countplot in decreasing order\n# Temporary dataset\ntop5 = list(metadata['primaryspaceusage'].value_counts().iloc[:5].index)\ntemp = metadata[[\"primaryspaceusage\"]].copy()\ntemp.loc[temp.primaryspaceusage.isin(top5) == False, \"primaryspaceusage\"] = \"Other\"\n# Plot\nax1 = axes[0]\ng1 = sns.countplot(data=temp, y=\"primaryspaceusage\", color= color, orient=\"h\", ax=ax1, order = temp['primaryspaceusage'].value_counts().index)\nax1.title.set_text('Primary use category')\nax1.set(ylabel=\"\", xlabel=\"\", xlim=(0,xlim))\n# adds percentage    \ntotal = float(len(metadata)) # number of buildings\nfor p in g1.patches:\n    width = p.get_width()\n    g1.text(width + xlim*0.1,\n            p.get_y() + p.get_height()\/1.5,\n            '{:1.2%}'.format(width\/total),\n            ha=\"center\") \ndel(top5, temp)\n    \n# primary use subcategory countplot in decreasing order\n# Temporary dataset\ntop5 = list(metadata['sub_primaryspaceusage'].value_counts().iloc[:8].index)\ntemp = metadata[[\"sub_primaryspaceusage\"]].copy()\ntemp.loc[temp.sub_primaryspaceusage.isin(top5) == False, \"sub_primaryspaceusage\"] = \"Other\"\n# Plot\nax2 = axes[1]\ng2 = sns.countplot(data=temp, y=\"sub_primaryspaceusage\", color= color, orient=\"h\", ax=ax2, order = temp['sub_primaryspaceusage'].value_counts().iloc[:16].index)\nax2.title.set_text('Primary use subcategory')\nax2.set(ylabel=\"\", xlabel=\"\", xlim=(0,xlim))\n# adds percentage    \ntotal = float(len(metadata)) # number of buildings\nfor p in g2.patches:\n    width = p.get_width()\n    g2.text(width + xlim*0.1,\n            p.get_y() + p.get_height()\/1.5,\n            '{:1.2%}'.format(width\/total),\n            ha=\"center\") \ndel(top5, temp)\n\n# industry countplot in decreasing order\nax3 = axes[2]\ng3 = sns.countplot(data=metadata, y=\"industry\", color=color, ax=ax3, orient=\"h\", order = metadata['industry'].value_counts().index)\nax3.title.set_text('Industry category (65% missing values)')\nax3.set(ylabel=\"\", xlabel=\"\", xlim=(0,xlim))\n# adds percentage    \ntotal = float(len(metadata)) # number of buildings\nfor p in g3.patches:\n    width = p.get_width()\n    g3.text(width + xlim*0.1,\n            p.get_y() + p.get_height()\/1.5,\n            '{:1.2%}'.format(width\/total),\n            ha=\"center\") \n    \n# subindustry countplot in decreasing order\n# Temporary dataset\ntop5 = list(metadata['subindustry'].value_counts().iloc[:5].index)\ntemp = metadata[[\"subindustry\"]].copy()\ntemp.loc[temp.subindustry.isin(top5) == False, \"subindustry\"] = \"Other\"\n# Plot\nax4 = axes[3]\ng4 = sns.countplot(data=temp, y=\"subindustry\", color=color, ax=ax4, orient=\"h\", order = temp['subindustry'].value_counts().index)\nax4.title.set_text('Subindustry category (65% missing values)')\nax4.set(ylabel=\"\", xlabel=\"\", xlim=(0,xlim))\n# adds percentage    \ntotal = float(len(metadata)) # number of buildings\nfor p in g4.patches:\n    width = p.get_width()\n    g4.text(width + xlim*0.1,\n            p.get_y() + p.get_height()\/1.5,\n            '{:1.2%}'.format(width\/total),\n            ha=\"center\") \ndel(top5, temp)\n\n# timezone countplot in decreasing order\nax5 = axes[4]\ng5 = sns.countplot(data=metadata, y=\"timezone\", color=color, ax=ax5, orient=\"h\", order = metadata['timezone'].value_counts().index)\nax5.title.set_text('Timezone')\nax5.set(ylabel=\"\", xlabel=\"\", xlim=(0,xlim))\n# adds percentage    \ntotal = float(len(metadata)) # number of buildings\nfor p in g5.patches:\n    width = p.get_width()\n    g5.text(width + xlim*0.1,\n            p.get_y() + p.get_height()\/1.5,\n            '{:1.2%}'.format(width\/total),\n            ha=\"center\") \n    \n# \"sqft\" histogram\nax6 = axes[5]\ng6 = sns.distplot(metadata[\"sqm\"], ax=ax6, color=color)\ng6.set(ylabel=\"\", xlabel=\"\")\nax6.set_title('Building Area (square meters)')\n\n# \"yearbuilt\" histogram\nax7 = axes[6]\ng7 = sns.distplot(metadata[\"yearbuilt\"].dropna(), ax=ax7, color=color)\ng7.set(ylabel=\"\", xlabel=\"\")\nax7.set_title('Year built (50% missing values)')\n\n# \"occupants\" histogram\nax8 = axes[7]\ng8 = sns.distplot(metadata[\"occupants\"].dropna(), ax=ax8, color=color)\ng8.set(ylabel=\"\", xlabel=\"\")\nax8.set_title('Ocuppants (85% missing values)')\n\n# buildings per site\nax9 = axes[8]\ng9 = sns.countplot(data=metadata, y=\"site_id\", color=color, ax=ax9, orient=\"h\", order = metadata['site_id'].value_counts().index)\nax9.title.set_text('Number of buildings per site')\nax9.set(ylabel=\"\", xlabel=\"\", xlim=(0,xlim))\n# adds percentage    \ntotal = float(len(metadata)) # number of buildings\nfor p in g9.patches:\n    width = p.get_width()\n    g9.text(width + xlim*0.1,\n            p.get_y() + p.get_height()\/1.5,\n            '{:1.2%}'.format(width\/total),\n            ha=\"center\") \n   \nplt.tight_layout()","e332859d":"wtrain = pd.read_csv(\"\/kaggle\/input\/bdg2-class-competition\/weather_train.csv\")\nwtest = pd.read_csv(\"\/kaggle\/input\/bdg2-class-competition\/weather_test.csv\")","7ca33a7c":"colors = [\"yellowgreen\",\"dodgerblue\",\"slategray\"]","7595fc0f":"wtrain.isna().sum()\/len(wtrain)*100","ceb70397":"wtest.isna().sum()\/len(wtest)*100","68e5cb8c":"weather = pd.concat([wtrain, wtest])","346db001":"# Drop categorical features\nweather1 = weather.drop([\"timestamp\",\"site_id\",\"cloudCoverage\",\"windDirection\"], axis=1)","edca33ad":"# Plot heatmap\nf = plt.figure(1, figsize=(12,10))\nsns.heatmap(weather1.corr(), cmap=\"coolwarm\", vmin=-1, vmax=1, annot=True)","08ac5208":"del(weather1)","05212389":"sns.set(rc={'figure.figsize':(24,12)})\nsns.set(font_scale = 1.5)\nf, axes = plt.subplots(2, 4)\naxes = axes.flatten()\n\ncolor = \"dodgerblue\"\n\n# Cloud Coverage countplot in decreasing order\nax0 = axes[0]\ng0 = sns.countplot(data=weather, y=\"cloudCoverage\", color= color, orient=\"h\", ax=ax0, order = weather['cloudCoverage'].value_counts().index)\nax0.title.set_text('Cloud Coverage')\nax0.set(ylabel=\"\", xlabel=\"\", xlim=(0,120000))\n# adds percentage    \ntotal = float(len(weather)) # number of rows\nfor p in g0.patches:\n    width = p.get_width()\n    g0.text(width + 12000,\n            p.get_y() + p.get_height()\/1.5,\n            '{:1.2%}'.format(width\/total),\n            ha=\"center\") \n    \n\n# \"airTemperature\" histogram\nax1 = axes[1]\ng1 = sns.distplot(weather[\"airTemperature\"].dropna(), ax=ax1, color=color)\nax1.set_title('Air temperature (\u00baC)')\nax1.set(xlabel=\"\")\n\n# \"dewTemperature\" histogram\nax2 = axes[2]\ng2 = sns.distplot(weather[\"dewTemperature\"].dropna(), ax=ax2, color=color)\nax2.set_title('Dew temperature (\u00baC)')\nax2.set(xlabel=\"\")\n\n# \"precipDepth1HR\" histogram\nax3 = axes[3]\ng3 = sns.distplot(weather[\"precipDepth1HR\"].dropna(), ax=ax3, color=color, kde_kws={'bw':0.1})\nax3.set_title('Precipitation Depth in 1 hour (mm)')\nax3.set(xlabel=\"\")\n\n# \"precipDepth6HR\" histogram\nax4 = axes[4]\ng4 = sns.distplot(weather[\"precipDepth6HR\"].dropna(), ax=ax4, color=color)\nax4.set_title('Precipitation Depth in 6 hour (mm)')\nax4.set(xlabel=\"\")\n\n# \"seaLvlPressure\" histogram\nax5 = axes[5]\ng5 = sns.distplot(weather[\"seaLvlPressure\"].dropna(), ax=ax5, color=color)\nax5.set_title('Pressure (hPa)')\nax5.set(xlabel=\"\")\n\n# \"windSpeed\" histogram\nax6 = axes[6]\ng6 = sns.distplot(weather[\"windSpeed\"].dropna(), ax=ax6, color=color)\nax6.set_title('Wind speed (m\/s)')\nax6.set(xlabel=\"\")\n\n# \"windDirection\" polar histogram\ndegrees = weather[\"windDirection\"]\nradians = np.deg2rad(weather[\"windDirection\"])\nbin_size = 20\na , b = np.histogram(degrees, bins=np.arange(0, 360+bin_size, bin_size))\ncenters = np.deg2rad(np.ediff1d(b)\/\/2 + b[:-1])\nax7 = f.add_subplot(248, projection='polar')\nax7.set_theta_zero_location(\"N\")\nax7.set_theta_direction(\"clockwise\")\ng7 = plt.bar(centers, a, width=np.deg2rad(bin_size), bottom=0.0, color=color, alpha=0.6, edgecolor='k')\nax7.set_title('Wind direction', pad=5, loc=\"left\")\n     \n# Remove empty axes\nf.delaxes(axes[7])\n\nplt.tight_layout()\nplt.show()","7c0f37d9":"# datetime indexes\ntimes = pd.DatetimeIndex(weather.timestamp)","76cf5a9d":"# Median for each month\nsns.set(rc={\"figure.figsize\": (10, 6)})\n# sns.set(font_scale = 1)\nf, axes = plt.subplots(2, 2, sharex=True)\naxes = axes.flatten()\ncolor = colors[0]\n\n# Creates a temporal dataframe grouped by day of the year\ntemp = pd.DataFrame(\n    weather.groupby([times.month]).median()[\n        [\n            \"airTemperature\",\n            \"cloudCoverage\",\n            \"seaLvlPressure\",\n            \"windSpeed\"\n        ]\n    ]\n).reset_index()\n\n# plots\nax0 = axes[0]\ng0 = sns.lineplot(data=temp, x=\"timestamp\", y=\"airTemperature\", ax=ax0, color = color)\n#ax1.title.set_text(\"Apparent temperature\")\nax0.set(ylabel=\"Air temperature (\u00baC)\")\n\nax1 = axes[1]\ng1 = sns.lineplot(data=temp, x=\"timestamp\", y=\"seaLvlPressure\", ax=ax1, color = color)\n#ax1.title.set_text(\"Pressure\")\nax1.set(ylabel=\"Pressure (hPa)\")\n\nax2 = axes[2]\ng2 = sns.lineplot(data=temp, x=\"timestamp\", y=\"cloudCoverage\", ax=ax2, color = color)\n#ax2.title.set_text(\"Cloud coverage\")\nax2.set(ylabel=\"Cloud coverage (oktas)\")\n\nax3 = axes[3]\ng3 = sns.lineplot(data=temp, x=\"timestamp\", y=\"windSpeed\", ax=ax3, color = color)\n#ax3.title.set_text(\"Relative humidity\")\nax3.set(ylabel=\"Wind Speed (m\/s)\")\n\n# Customize axes\nfor ax in axes:\n    ax.title.set_size(15)  # fontsize\n    ax.set(xlabel=\"Month\")  # X label\n    ax.set_xticks(range(13))  # X range\n\n# Figure title\nplt.suptitle('Monthly weather behaviour', y=1.02, fontsize=16)\n\nf.tight_layout()","9ed50d33":"# Creates a temporal dataframe grouped by site and month\ntemp = pd.DataFrame(weather.groupby([\"site_id\", times.month]).median()[\"airTemperature\"]).reset_index()\n# All the plots in a grid\ng = sns.FacetGrid(temp, col=\"site_id\", col_wrap=4)\ng.map(plt.plot, \"timestamp\", \"airTemperature\", color=colors[0])\n# Title of each plot\ng.set_titles(\"{col_name}\", size=15)\n# Axis labels\ng.set_axis_labels(x_var=\"Month\", y_var=\"Air Temperature (\u00baC)\")\ng.set(xticks=range(13))\n# Figure title\nplt.suptitle('Monthly air temperature behaviour by site', y=1.02, fontsize=16)","23dd05c0":"# Creates a temporal dataframe grouped by site and month\ntemp = pd.DataFrame(weather.groupby([\"site_id\", times.month]).median()[\"seaLvlPressure\"]).reset_index()\n# All the plots in a grid\ng = sns.FacetGrid(temp, col=\"site_id\", col_wrap=4)\ng.map(plt.plot, \"timestamp\", \"seaLvlPressure\", color=colors[0])\n# Title of each plot\ng.set_titles(\"{col_name}\", size=15)\n# Axis labels\ng.set_axis_labels(x_var=\"Month\", y_var=\"Pressure (hPa)\")\ng.set(xticks=range(13))\n# Figure title\nplt.suptitle('Monthly pressure behaviour by site', y=1.02, fontsize=16)","e1edf530":"# Creates a temporal dataframe grouped by site and month\ntemp = pd.DataFrame(weather.groupby([\"site_id\", times.month]).median()[\"windSpeed\"]).reset_index()\n# All the plots in a grid\ng = sns.FacetGrid(temp, col=\"site_id\", col_wrap=4)\ng.map(plt.plot, \"timestamp\", \"windSpeed\", color=colors[0])\n# Title of each plot\ng.set_titles(\"{col_name}\", size=15)\n# Axis labels\ng.set_axis_labels(x_var=\"Month\", y_var=\"Wind speed (mi\/h)\")\ng.set(xticks=range(13))\n# Figure title\nplt.suptitle('Monthly wind speed behaviour by site', y=1.02, fontsize=16)","c866a56c":"# Median for each hour\nsns.set(rc={\"figure.figsize\": (10, 6)})\n#sns.set(font_scale=0.8)\nf, axes = plt.subplots(2, 2, sharex=True)\naxes = axes.flatten()\ncolor = colors[1]\n\n# Creates a temporal dataframe grouped by hour\ntemp = pd.DataFrame(\n    weather.groupby([times.hour]).median()[\n        [\n            \"airTemperature\",\n            \"cloudCoverage\",\n            \"seaLvlPressure\",\n            \"windSpeed\"\n        ]\n    ]\n).reset_index()\n\n# plots\nax0 = axes[0]\ng0 = sns.lineplot(data=temp, x=\"timestamp\", y=\"airTemperature\", ax=ax0, color = color)\n#ax1.title.set_text(\"Apparent temperature\")\nax0.set(ylabel=\"Air temperature (\u00baC)\")\n\nax1 = axes[1]\ng1 = sns.lineplot(data=temp, x=\"timestamp\", y=\"seaLvlPressure\", ax=ax1, color = color)\n#ax1.title.set_text(\"Pressure\")\nax1.set(ylabel=\"Pressure (hPa)\")\n\nax2 = axes[2]\ng2 = sns.lineplot(data=temp, x=\"timestamp\", y=\"cloudCoverage\", ax=ax2, color = color)\n#ax2.title.set_text(\"Cloud coverage\")\nax2.set(ylabel=\"Cloud coverage (oktas)\")\n\nax3 = axes[3]\ng3 = sns.lineplot(data=temp, x=\"timestamp\", y=\"windSpeed\", ax=ax3, color = color)\n#ax3.title.set_text(\"Relative humidity\")\nax3.set(ylabel=\"Wind Speed (m\/s)\")\n\n# Customizw axes\nfor ax in axes:\n    ax.title.set_size(15)  # fontsize\n    ax.set(xlabel=\"Hour\")  # X label\n    ax.set_xticks(range(24))  # X range\n\n# Figure title\nplt.suptitle('Hourly weather behaviour', y=1.02, fontsize=16)\n\nf.tight_layout()","6a5c7d4b":"sns.set(rc={'figure.figsize':(12,8)})\nsns.set(font_scale = 0.75)\n# Creates a temporal dataframe grouped by site and hour\ntemp = pd.DataFrame(weather.groupby([\"site_id\", times.hour]).median()[\"airTemperature\"]).reset_index()\n# All the plots in a grid\ng = sns.FacetGrid(temp, col=\"site_id\", col_wrap=4)\ng.map(plt.plot, \"timestamp\", \"airTemperature\",color=colors[1])\n# Title of each plot\ng.set_titles(\"{col_name}\", size=15)\n# Axis labels\ng.set_axis_labels(x_var=\"Hour\", y_var=\"Air Temperature (\u00baC)\")\ng.set(xticks=range(24))\n# Figure title\nplt.suptitle('Hourly air temperature behaviour by site', y=1.02, fontsize=16)","5ba3846c":"sns.set(rc={'figure.figsize':(12,8)})\nsns.set(font_scale = 0.75)\n# Creates a temporal dataframe grouped by site and hour\ntemp = pd.DataFrame(weather.groupby([\"site_id\", times.hour]).median()[\"seaLvlPressure\"]).reset_index()\n# All the plots in a grid\ng = sns.FacetGrid(temp, col=\"site_id\", col_wrap=4)\ng.map(plt.plot, \"timestamp\", \"seaLvlPressure\", color=colors[1])\n# Title of each plot\ng.set_titles(\"{col_name}\", size=15)\n# Axis labels\ng.set_axis_labels(x_var=\"Hour\", y_var=\"Pressure (hPa)\")\ng.set(xticks=range(24))\n# Figure title\nplt.suptitle('Hourly pressure behaviour by site', y=1.02, fontsize=16)","09367754":"sns.set(rc={'figure.figsize':(12,8)})\nsns.set(font_scale = 0.75)\n# Creates a temporal dataframe grouped by site and hour\ntemp = pd.DataFrame(weather.groupby([\"site_id\", times.hour]).median()[\"windSpeed\"]).reset_index()\n# All the plots in a grid\ng = sns.FacetGrid(temp, col=\"site_id\", col_wrap=4)\ng.map(plt.plot, \"timestamp\", \"windSpeed\", color=colors[1])\n# Title of each plot\ng.set_titles(\"{col_name}\", size=15)\n# Axis labels\ng.set_axis_labels(x_var=\"Hour\", y_var=\"Wind speed (mi\/h)\")\ng.set(xticks=range(24))\n# Figure title\nplt.suptitle('Hourly wind speed behaviour by site', y=1.02, fontsize=16)","56bf625d":"weather2016 = weather[weather[\"timestamp\"] < \"2017-01-01 00:00:00\"]\nweather2017 = weather[(weather[\"timestamp\"] >= \"2017-01-01 00:00:00\") & (weather[\"timestamp\"] < \"2018-01-01 00:00:00\")]\nweather2018 = weather[weather[\"timestamp\"] >= \"2017-01-01 00:00:00\"]","ba207e50":"sns.set(rc={'figure.figsize':(14,14)})\n#sns.set(font_scale = 1)\nf, axes = plt.subplots(3, 3)\naxes = axes.flatten()\n\n# \"airTemperature\" histogram\nax0 = axes[0]\ng0 = sns.distplot(weather2016[\"airTemperature\"].dropna(), ax=ax0, hist=False, color = colors[0])\ng0b = sns.distplot(weather2017[\"airTemperature\"].dropna(), ax=ax0, hist=False, color = colors[1])\ng0c = sns.distplot(weather2018[\"airTemperature\"].dropna(), ax=ax0, hist=False, color = colors[2])\nax0.title.set_text('Air temperature distribution')\nax0.set(xlabel=\"Air temperature (\u00baC)\")\n\n# \"cloudCoverage\" histogram\nax1 = axes[1]\ng1 = sns.distplot(weather2016[\"cloudCoverage\"].dropna(), ax=ax1, hist=False, color = colors[0])\ng1b = sns.distplot(weather2017[\"cloudCoverage\"].dropna(), ax=ax1, hist=False, color = colors[1])\ng1c = sns.distplot(weather2018[\"cloudCoverage\"].dropna(), ax=ax1, hist=False, color = colors[2])\nax1.title.set_text('Cloud coverage distribution')\nax1.set(xlabel=\"cloud coverage (okta)\")\n\n# \"dewTemperature\" histogram\nax2 = axes[2]\ng2 = sns.distplot(weather2016[\"dewTemperature\"].dropna(), ax=ax2, hist=False, color = colors[0])\ng2b = sns.distplot(weather2017[\"dewTemperature\"].dropna(), ax=ax2, hist=False, color = colors[1])\ng2c = sns.distplot(weather2018[\"dewTemperature\"].dropna(), ax=ax2, hist=False, color = colors[2])\nax2.title.set_text('Dew temperature distribution')\nax2.set(xlabel=\"Dew temperature (\u00baC)\")\n\n# \"seaLvlPressure\" histogram\nax3 = axes[3]\ng3 = sns.distplot(weather2016[\"seaLvlPressure\"].dropna(), ax=ax3, hist=False, color = colors[0])\ng3b = sns.distplot(weather2017[\"seaLvlPressure\"].dropna(), ax=ax3, hist=False, color = colors[1])\ng3c = sns.distplot(weather2017[\"seaLvlPressure\"].dropna(), ax=ax3, hist=False, color = colors[2])\nax3.title.set_text('Pressure distribution')\nax3.set(xlabel=\"Pressure (hPa)\")\n\n# \"precipDepth1HR\" histogram\nax4 = axes[4]\ng4 = sns.distplot(weather2016[\"precipDepth1HR\"].dropna(), ax=ax4, hist=False, color = colors[0], kde_kws={'bw':0.1})\ng4b = sns.distplot(weather2017[\"precipDepth1HR\"].dropna(), ax=ax4, hist=False, color = colors[1], kde_kws={'bw':0.1})\ng4c = sns.distplot(weather2017[\"precipDepth1HR\"].dropna(), ax=ax4, hist=False, color = colors[2], kde_kws={'bw':0.1})\nax4.title.set_text('Precipitation depth (1 hr) distribution')\nax4.set(xlabel=\"Precipitation depth in 1 hour (mm)\")\n\n# \"precipDepth6HR\" histogram\nax5 = axes[5]\ng5 = sns.distplot(weather2016[\"precipDepth6HR\"].dropna(), ax=ax5, hist=False, color = colors[0])\ng5b = sns.distplot(weather2017[\"precipDepth6HR\"].dropna(), ax=ax5, hist=False, color = colors[1])\ng5c = sns.distplot(weather2017[\"precipDepth6HR\"].dropna(), ax=ax5, hist=False, color = colors[2])\nax5.title.set_text('Precipitation depth (6 hr) distribution')\nax5.set(xlabel=\"Precipitation depth in 6 hour (mm)\")\n\n# \"windSpeed\" histogram\nax6 = axes[6]\ng6 = sns.distplot(weather2016[\"windSpeed\"].dropna(), ax=ax6, hist=False, color = colors[0])\ng6b = sns.distplot(weather2017[\"windSpeed\"].dropna(), ax=ax6, hist=False, color = colors[1])\ng6c = sns.distplot(weather2017[\"windSpeed\"].dropna(), ax=ax6, hist=False, color = colors[2])\nax6.title.set_text('Wind speed distribution')\nax6.set(xlabel=\"Wind speed (mi\/h)\")\n\n# Sets fontsize\nfor ax in axes:\n    ax.title.set_size(15)\n\n# Remove empty axes\nf.delaxes(axes[7])\nf.delaxes(axes[8])\n    \n# Customizes legend and title\ngreen_patch = mpatches.Patch(color=colors[0], label='2016')\nblue_patch = mpatches.Patch(color=colors[1], label='2017', alpha=0.5)\ngray_patch = mpatches.Patch(color=colors[2], label='2018', alpha=0.5)\nf.legend(handles=[green_patch, blue_patch, gray_patch], ncol=1,loc=[0.33, 0.266])\n\nf.suptitle(\"2017, 2016 and 2018 weather data compared\", x = 0.5, y = 1.01)\nf.tight_layout()","f8258cb6":"del(wtrain, wtest, weather)","d1c0d760":"train = pd.read_csv(\"\/kaggle\/input\/bdg2-class-competition\/train.csv\", parse_dates=[\"timestamp\"])","d6005a09":"# Features from buildings metadata to add to meters dataset\nbuildings_sel = metadata[[\"building_id\",\"site_id\",\"primaryspaceusage\",\"timezone\"]]","60f40692":"# Join the datasets: meter reading + building metadata\ndev = train.merge(buildings_sel, on=\"building_id\", how = \"left\")\n# Transform timestamp to datetime object type\ndev[\"timestamp\"] = pd.to_datetime(dev[\"timestamp\"], format='%Y-%m-%d %H:%M:%S')","66ab0051":"# Color palette\ncolors =  [\"rebeccapurple\", \"crimson\", \"orangered\", \"gold\", \"olivedrab\", \"royalblue\", \"darkcyan\", \"dimgrey\"]","589bb620":"del(metadata, buildings_sel)","2aca0c8b":"# Log transformation. Sums +1 for the meter_reading = 0\nsns.distplot(np.log(dev[\"meter_reading\"].dropna()+1))","a068e08a":"f, axes = plt.subplots(1, 1)\n\nm1 = sns.distplot(np.log(dev.dropna().loc[dev[\"meter\"]==\"chilledwater\", \"meter_reading\"]+1), hist=False, label=\"Chilled water\", color = colors[0], ax=axes, kde_kws={'bw':0.1})\nm2 = sns.distplot(np.log(dev.dropna().loc[dev[\"meter\"]==\"electricity\", \"meter_reading\"]+1), hist=False, label=\"Electricity\", color = colors[1], ax=axes, kde_kws={'bw':0.1})\nm3 = sns.distplot(np.log(dev.dropna().loc[dev[\"meter\"]==\"gas\", \"meter_reading\"]+1), hist=False, label=\"Gas\", color = colors[2], ax=axes, kde_kws={'bw':0.1})\nm4 = sns.distplot(np.log(dev.dropna().loc[dev[\"meter\"]==\"hotwater\", \"meter_reading\"]+1), hist=False, label=\"Hot water\", color = colors[3], ax=axes, kde_kws={'bw':0.1})\nm5 = sns.distplot(np.log(dev.dropna().loc[dev[\"meter\"]==\"irrigation\", \"meter_reading\"]+1), hist=False, label=\"Irrigation\", color = colors[4], ax=axes, kde_kws={'bw':0.1})\nm6 = sns.distplot(np.log(dev.dropna().loc[dev[\"meter\"]==\"solar\", \"meter_reading\"]+1), hist=False, label=\"Solar\", color = colors[5], ax=axes, kde_kws={'bw':0.1})\nm7 = sns.distplot(np.log(dev.dropna().loc[dev[\"meter\"]==\"steam\", \"meter_reading\"]+1), hist=False, label=\"Steam\", color = colors[6], ax=axes, kde_kws={'bw':0.1})\nm8 = sns.distplot(np.log(dev.dropna().loc[dev[\"meter\"]==\"water\", \"meter_reading\"]+1), hist=False, label=\"Water\", color = colors[7], ax=axes, kde_kws={'bw':0.1})\n\naxes.set(ylabel=\"\", xlabel=\"Meter reading\")","76facdc8":"# datetime indexes\ntimes = pd.DatetimeIndex(dev.timestamp)","2feea36d":"# Median for each month (12)\nsns.set(rc={'figure.figsize':(12,8)})\n#sns.set(font_scale = 2)\nf, axes = plt.subplots(2, 1, sharex=False)\naxes = axes.flatten()\n\n# Creates a temporal dataframe grouped by month\ntemp = pd.DataFrame(dev.groupby([times.month]).median()[\"meter_reading\"]).reset_index()\n# lineplot\nax1 = axes[0]\nsns.lineplot(data=temp, x=\"timestamp\", y=\"meter_reading\", ax=ax1, color=colors[0])\nax1.set_ylabel(\"Median meter reading (kWh)\")\nax1.set_xlabel(\"\")\nax1.set_title('Median meter reading vs. month', fontdict={'size':16})\n\n# Creates a temporal dataframe\ntemp = pd.DataFrame({\"month\":dev.timestamp.dt.month, \"meter_reading\": np.log(dev.meter_reading+1)})\n# boxplot\nax2 = axes[1]\nsns.boxplot(data=temp, x=\"month\", y=\"meter_reading\", ax=ax2, color=colors[0])\nax2.set_ylabel(\"Log meter reading (kWh)\")\nax2.set_xlabel(\"Month\")\nax2.set_title('log meter reading vs. month', fontdict={'size':16})\n\nf.suptitle('Meter reading by month', fontsize=20)\n#f.tight_layout()","777a2976":"# Creates a temporal dataframe grouped by primaryspaceusage (16) and month (12)\ntemp = pd.DataFrame(dev.groupby([\"primaryspaceusage\", times.month]).median()[\"meter_reading\"]).reset_index()\n# All the plots in a grid\ng = sns.FacetGrid(temp, col=\"primaryspaceusage\", col_wrap=4)\ng.map(plt.plot, \"timestamp\", \"meter_reading\", color=colors[0])\n# Title of each plot\ng.set_titles(\"{col_name}\")\n# Axis labels\ng.set_axis_labels(x_var=\"Month\", y_var=\"Meter reading (KWh)\")\ng.set(xticks=range(13))","96d371ee":"# Creates a temporal dataframe grouped by meter (8) and month (12)\ntemp = pd.DataFrame(dev.groupby([\"meter\", times.month]).median()[\"meter_reading\"]).reset_index()\n# All the plots in a grid\ng = sns.FacetGrid(temp, col=\"meter\", col_wrap=4)\ng.map(plt.plot, \"timestamp\", \"meter_reading\", color=colors[0])\n# Title of each plot\ng.set_titles(\"{col_name}\")\n# Axis labels\ng.set_axis_labels(x_var=\"Month\", y_var=\"Meter reading (KWh)\")\ng.set(xticks=range(13))","9190f08f":"# median by dayhour (24)\n# Median for each day hour\nsns.set(rc={'figure.figsize':(12,8)})\n#sns.set(font_scale = 1.5)\nf, axes = plt.subplots(2, 1, sharex=False)\naxes = axes.flatten()\n\n# Creates a temporal dataframe grouped by day hour (24)\ntemp = pd.DataFrame(dev.groupby([times.hour]).median()[\"meter_reading\"]).reset_index()\n# lineplot\nax1 = axes[0]\nsns.lineplot(data=temp, x=\"timestamp\", y=\"meter_reading\", ax = ax1, color=colors[1])\nax1.set_ylabel(\"Median meter reading (kWh)\")\nax1.set_xlabel(\"\")\nax1.set_title('Median meter reading vs. hour', fontdict={'size':16})\n\n# Creates a temporal dataframe\ntemp = pd.DataFrame({\"hour\":dev.timestamp.dt.hour, \"meter_reading\": np.log(dev.meter_reading+1)})\n# boxplot\nax2 = axes[1]\nsns.boxplot(data=temp, x=\"hour\", y=\"meter_reading\", ax=ax2, color=colors[1])\nax2.set_ylabel(\"Log meter reading (kWh)\")\nax2.set_xlabel(\"Hour\")\nax2.set_title('log meter reading vs. hour', fontdict={'size':16})\n\nf.suptitle('Meter reading by hour', fontsize=20)\n#f.tight_layout()","ac822fde":"# Creates a temporal dataframe grouped by primaryspaceusage and day hour\ntemp = pd.DataFrame(dev.groupby([\"primaryspaceusage\", times.hour]).median()[\"meter_reading\"]).reset_index()\n# All the plots in a grid\ng = sns.FacetGrid(temp, col=\"primaryspaceusage\", col_wrap=4)\ng.map(plt.plot, \"timestamp\", \"meter_reading\", color=colors[1])\n# Title of each plot\ng.set_titles(\"{col_name}\")\n# Axis labels\ng.set_axis_labels(x_var=\"Hour\", y_var=\"Meter reading (KWh)\")\ng.set(xticks=[0,4,8,12,16,20,24])","c649d5f8":"# Creates a temporal dataframe grouped by meter (8) and day hour (24)\ntemp = pd.DataFrame(dev.groupby([\"meter\", times.hour]).median()[\"meter_reading\"]).reset_index()\n# All the plots in a grid\ng = sns.FacetGrid(temp, col=\"meter\", col_wrap=4)\ng.map(plt.plot, \"timestamp\", \"meter_reading\", color=colors[1])\n# Title of each plot\ng.set_titles(\"{col_name}\")\n# Axis labels\ng.set_axis_labels(x_var=\"Hour\", y_var=\"Meter reading (KWh)\")\ng.set(xticks=[0,4,8,12,16,20,24])","754d8f82":"# median by weekday (7)\nsns.set(rc={'figure.figsize':(12,8)})\n#sns.set(font_scale = 2)\nf, axes = plt.subplots(2, 1, sharex=False)\naxes = axes.flatten()\n\n# Creates a temporal dataframe grouped by day of the week (7)\ntemp = pd.DataFrame(dev.groupby([times.weekday]).median()[\"meter_reading\"]).reset_index()\n# lineplot\nax1 = axes[0]\nsns.lineplot(data=temp, x=\"timestamp\", y=\"meter_reading\", ax=ax1, color=colors[2])\nax1.set_ylabel(\"Median meter reading (kWh)\")\nax1.set_xlabel(\"\")\nax1.set_title('Median meter reading vs. day of the week', fontdict={'size':16})\n\n# Creates a temporal dataframe\ntemp = pd.DataFrame({\"weekday\":dev.timestamp.dt.weekday, \"meter_reading\": np.log(dev.meter_reading+1)})\n# boxplot\nax2 = axes[1]\nsns.boxplot(data=temp, x=\"weekday\", y=\"meter_reading\", ax=ax2, color=colors[2])\nax2.set_ylabel(\"Log meter reading (kWh)\")\nax2.set_xlabel(\"Day of the week\")\nax2.set_title('log meter reading vs. day of the week', fontdict={'size':16})\n\nf.suptitle('Meter reading by day of t he week', fontsize=20)\n#f.tight_layout()","31f22b58":"# Creates a temporal dataframe grouped by primaryspaceusage (16) and weekday (7)\ntemp = pd.DataFrame(dev.groupby([\"primaryspaceusage\", times.weekday]).median()[\"meter_reading\"]).reset_index()\n# All the plots in a grid\ng = sns.FacetGrid(temp, col=\"primaryspaceusage\", col_wrap=4)\ng.map(plt.plot, \"timestamp\", \"meter_reading\", color=colors[2])\n# Title of each plot\ng.set_titles(\"{col_name}\")\n# Axis labels\ng.set_axis_labels(x_var=\"Weekday\", y_var=\"Meter reading (KWh)\")\ng.set(xticks=range(8))","c90c895f":"# Creates a temporal dataframe grouped by meter and day weekday\ntemp = pd.DataFrame(dev.groupby([\"meter\", times.weekday]).median()[\"meter_reading\"]).reset_index()\n# All the plots in a grid\ng = sns.FacetGrid(temp, col=\"meter\", col_wrap=4)\ng.map(plt.plot, \"timestamp\", \"meter_reading\", color=colors[2])\n# Title of each plot\ng.set_titles(\"{col_name}\")\n# Axis labels\ng.set_axis_labels(x_var=\"Weekday\", y_var=\"Meter reading (KWh)\")\ng.set(xticks=range(8))","a24da631":"wtrain = pd.read_csv(\"\/kaggle\/input\/bdg2-class-competition\/weather_train.csv\", parse_dates=[\"timestamp\"])","edc7a042":"# Join the three datasets: meter reading + building metadata + weather info\ndev = pd.merge(dev, wtrain,  how='left', left_on=['timestamp','site_id'], right_on = ['timestamp','site_id'])","2579b953":"# Drop categorical features\ndev = dev.drop([\"timestamp\",\"building_id\",\"meter\",\"site_id\", \"primaryspaceusage\",\"timezone\"], axis=1)","04f9ca3d":"g = sns.heatmap(dev.corr(), cmap=\"coolwarm\", vmin=-1, vmax=1, annot=True)","5ad282bd":"## Features frequency\nIn figure below is shown how categorical features distribute among categories and continues features among values.","3b6aae74":"### Behaviour by hour of the day","7cf47a2d":"### Behaviour by day of the week","dab862b2":"## Missing values\nIn the output below is shown te amount of missing values (%) in each feature.","8f63ee30":"# Exploratory data analysis\nIn this notebookan initial EDA will be shown for each one of the data sets in this competition:\n\n- Metadata\n- Weather data\n- Energy data\n\nThe code for the figures is hidden for readability but can be expanded.","52e82dd7":"# EDA weather data","ddd82213":"### Behaviour by month","140ab09f":"## Correlation to weather data\nHere is shown the correlation between weather features and `meter_reading`.","7d3e68ed":"## Weather data comparisson by year\nThree-years data is compared by year in the figure below.","1d37076e":"## Correlation\nTo study correlation weather data will be used as a whole, joining train and test data together. Categorical features are ignored in this part.","0d8fedcf":"### Behaviour by month","91c6e577":"## Distribution by meter","23483e85":"## Categories\nIn the table below are shown the categories present in each feature; first rows is the total number of categories per feature.","309c38dd":"## Distribution","1cfb7f38":"## Temporal analysis","e7863404":"## Missing values\nHere is shown the amount if missing values for train and test data.","1297f788":"# EDA energy data","3b9c1775":"## Temporal analysis\nIn this section the continuous features will be studied by month and hour of the day. Due to high correlation `dewTemperature` is excluded and only `airTemperature` is shown.","883b89d8":"# EDA metadata","4c356322":"Some features from metadata are added to energy data set:","934d5345":"### Behaviour by hour of the day","6dfc6705":"## Features frequency\nIn figure below is shown how categorical features distribute among categories and continues features among values."}}