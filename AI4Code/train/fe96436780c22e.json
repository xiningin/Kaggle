{"cell_type":{"305099e5":"code","a1dc9bdf":"code","c8573839":"code","aaa11389":"code","7b23a64c":"code","aef9e068":"code","d3fdf7ac":"code","74a8036e":"code","d77fdab9":"code","25137dba":"code","0256d249":"code","5027de4a":"code","61abb60a":"code","39c73cb9":"code","76ae06de":"code","d676883a":"code","9f1b4a2e":"code","a47bd060":"code","8993235a":"code","0354bd03":"code","7e1b814a":"code","b4db3efb":"code","6158cbf6":"code","2dfe9972":"code","7f6c2e53":"code","ed580403":"code","d5d1c53c":"code","0eec64b9":"code","7c0150b7":"code","f43ac373":"code","0696be3c":"code","5411b73a":"code","554d5710":"markdown","f8b427ba":"markdown","8b9ea85e":"markdown","82a272ac":"markdown","03a27bef":"markdown","1d3a41db":"markdown"},"source":{"305099e5":"# Team Annihilators- MehulKumar Patel,Dhiraj Patel\n# Emails: dhiru474@gmail.com,mkpatel.p64@gmail.com\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a1dc9bdf":"matches = pd.read_csv('\/kaggle\/input\/skillsay-ai-crickethon-dataset\/matches.csv')\ndeliveries = pd.read_csv('\/kaggle\/input\/skillsay-ai-crickethon-dataset\/deliveries.csv')","c8573839":"matches.head()","aaa11389":"matches.info()","7b23a64c":"matches.isnull().sum().sort_values(ascending = False)\n","aef9e068":"## Umpire3 has 637 nan values and is not required hence we need to drop it.\nmatches.drop(['umpire3'], inplace = True, axis = 1)","d3fdf7ac":"matches.isnull().sum().sort_values(ascending = False)","74a8036e":"matches[pd.isnull(matches['city'])]","d77fdab9":"## By venue it is clear that this null values in city column is of DUBAI hence replacing it with same.\nmatches['city'] = matches['city'].fillna(\"DUBAI\")","25137dba":"matches.isnull().sum().sort_values(ascending = False)","0256d249":"matches[pd.isnull(matches['player_of_match'])]","5027de4a":"## For no result no player of match has been assigned hence replacing it with none\nmatches['player_of_match'] = matches['player_of_match'].fillna(\"None\")","61abb60a":"matches.isnull().sum().sort_values(ascending = False)","39c73cb9":"## Replacing the null values in winner column with draw.\nmatches['winner'] = matches['winner'].fillna(\"DRAW\")","76ae06de":"matches.isnull().sum().sort_values(ascending = False)","d676883a":"#Fix null for column - umpire1\nmatches['umpire1'].value_counts() ","9f1b4a2e":"## Replacing umpire1 nan values with highest frequency umpire\nmatches['umpire1'] = matches['umpire1'].fillna('HDPK Dharmasena')","a47bd060":"matches.isnull().sum().sort_values(ascending = False)","8993235a":"matches['umpire2'].value_counts() ","0354bd03":"## Replacing umpire2 nan values with highest frequency umpire\nmatches['umpire2'] = matches['umpire2'].fillna('SJA Taufel')","7e1b814a":"matches.isnull().sum().sort_values(ascending = False)","b4db3efb":"## Drop duplicates from team1 & team2 columns\n(matches['team2'].value_counts() + matches['team1'].value_counts()).drop_duplicates().index[::1]","6158cbf6":"## Replace Delhi Daredevils with Delhi capitals as the franchise is same\nmatches.team1.replace({'Delhi Daredevils' : 'Delhi Capitals'},regex=True,inplace=True)\nmatches.team2.replace({'Delhi Daredevils' : 'Delhi Capitals'},regex=True,inplace=True)\nmatches.toss_winner.replace({'Delhi Daredevils' : 'Delhi Capitals'},regex=True,inplace=True)\nmatches.winner.replace({'Delhi Daredevils' : 'Delhi Capitals'},regex=True,inplace=True)\n\n## The following dataset contains multiple name for RPS team so changing all of them to a single distinct name\n\nmatches.team1.replace({'Rising Pune Supergiant' : 'Rising Pune Supergiants'},regex=True,inplace=True)\nmatches.team2.replace({'Rising Pune Supergiant' : 'Rising Pune Supergiants'},regex=True,inplace=True)\nmatches.toss_winner.replace({'Rising Pune Supergiant' : 'Rising Pune Supergiants'},regex=True,inplace=True)\nmatches.winner.replace({'Rising Pune Supergiant' : 'Rising Pune Supergiants'},regex=True,inplace=True)\n\nmatches.team1.replace({'Rising Pune Supergiantss' : 'Rising Pune Supergiants'},regex=True,inplace=True)\nmatches.team2.replace({'Rising Pune Supergiantss' : 'Rising Pune Supergiants'},regex=True,inplace=True)\nmatches.toss_winner.replace({'Rising Pune Supergiantss' : 'Rising Pune Supergiants'},regex=True,inplace=True)\nmatches.winner.replace({'Rising Pune Supergiantss' : 'Rising Pune Supergiants'},regex=True,inplace=True)","2dfe9972":"matches.head()","7f6c2e53":"import seaborn as sns\ncorelation_matrix=matches.corr().round(2)\nsns.heatmap(data=corelation_matrix,annot=True)","ed580403":"## Using Label encoding to convert categorical values (Teams) to numbers.\nmatches.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Gujarat Lions','Kings XI Punjab',\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Kochi Tuskers Kerala','Pune Warriors','Delhi Capitals']\n                ,['MI','KKR','RCB','DC','CSK','RR','GL','KXIP','SRH','RPS','KTK','PW','DCC'],inplace=True)\n\nencode = {'team1': {'MI':1,'KKR':2,'RCB':3,'DC':4,'CSK':5,'RR':6,'GL':7,'KXIP':8,'SRH':9,'RPS':10,'KTK':11,'PW':12,'DCC':13},\n          'team2': {'MI':1,'KKR':2,'RCB':3,'DC':4,'CSK':5,'RR':6,'GL':7,'KXIP':8,'SRH':9,'RPS':10,'KTK':11,'PW':12,'DCC':13},\n          'toss_winner': {'MI':1,'KKR':2,'RCB':3,'DC':4,'CSK':5,'RR':6,'GL':7,'KXIP':8,'SRH':9,'RPS':10,'KTK':11,'PW':12,'DCC':13},\n          'winner': {'MI':1,'KKR':2,'RCB':3,'DC':4,'CSK':5,'RR':6,'GL':7,'KXIP':8,'SRH':9,'RPS':10,'KTK':11,'PW':12,'DCC':13,'DRAW':14}}\nmatches.replace(encode, inplace=True)","d5d1c53c":"## Encoding winner column to numbers based on above assigned values.\ndicVal = encode['winner']","0eec64b9":"## Creating a new Dataframe with required columns\nmatches = matches[['team1','team2','city','toss_decision','toss_winner','venue','winner']]\nmatches.head(2)","7c0150b7":"from sklearn.preprocessing import LabelEncoder\nlabel_coder= LabelEncoder()\nmatches['Venue'] =label_coder.fit_transform(matches[\"venue\"])\nmatches","f43ac373":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import KFold\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0696be3c":"def classification_model(model, data, predictors, outcome):\n  model.fit(data[predictors],data[outcome])\n  predictions = model.predict(data[predictors])\n  accuracy = metrics.accuracy_score(predictions,data[outcome])\n  print('Accuracy : %s' % '{0:.3%}'.format(accuracy))\n  kf = KFold(data.shape[0], n_splits=7)\n  error = []\n  model.fit(data[predictors],data[outcome])","5411b73a":"## Calling the function\nprint('Gaussian Naive Bayes')\nmodel = GaussianNB()\noutcome_var = ['winner']\npredictor_var = ['team1', 'team2', 'Venue', 'toss_winner']\nclassification_model(model,matches,predictor_var,outcome_var)\nprint('Logisitc Regression')\nmodel = LogisticRegression()\noutcome_var = ['winner']\npredictor_var = ['team1', 'team2', 'Venue', 'toss_winner']\nclassification_model(model,matches,predictor_var,outcome_var)\nprint('Support Vector Machine')\nmodel = SVC(gamma= 'auto')\noutcome_var = ['winner']\npredictor_var = ['team1', 'team2', 'Venue', 'toss_winner']\nclassification_model(model,matches,predictor_var,outcome_var)\nprint('Decision Tree')\nmodel = DecisionTreeClassifier()\noutcome_var = ['winner']\npredictor_var = ['team1', 'team2', 'Venue', 'toss_winner']\nclassification_model(model,matches,predictor_var,outcome_var)","554d5710":"# Check for HeatMaps:\nThe Heat Map procedure shows the distribution of a quantitative variable over all combinations of 2 categorical factors. If one of the 2 factors represents time, then the evolution of the variable can be easily viewed using the map. A gradient color scale is used to represent the values of the quantitative variable. The correlation between two random variables is a number that runs from -1 through 0 to +1 and indicates a strong inverse relationship, no relationship, and a strong direct relationship, respectively.","f8b427ba":"## *Importing all the algorithms for determining the prediction & accuracy*","8b9ea85e":"## *Dealing with Null values*","82a272ac":"## *Creating a general model function to predict the accuracy of model using different algorithms*","03a27bef":"## *Highest accuracy achieved by Decision Tree classifier with 87.3% accuracy and second highest with 78.5% accuracy using Support Vector Machine algorithm.*","1d3a41db":"# Label Encoding"}}