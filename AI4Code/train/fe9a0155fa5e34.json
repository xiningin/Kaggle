{"cell_type":{"fcb23f92":"code","fda0209e":"code","5c5623c9":"code","92de1721":"code","c12bff5d":"code","ce2b88f4":"code","bee761ad":"code","2fe20eb3":"code","e49849db":"code","897f5bef":"code","54935be9":"code","b295957a":"code","52b3c1a6":"code","e02e9a9c":"code","c7452479":"code","a26c22b8":"code","ab9f4fda":"code","0b716120":"code","2954361b":"code","77788672":"code","8a3fdd04":"code","4b536a50":"code","028a8549":"code","e708f54f":"code","10395893":"code","7553a564":"code","2c614da7":"code","8a0f1216":"code","dad8beb3":"code","a647531b":"code","d62efee0":"code","18960fd2":"markdown","8967804f":"markdown","4d4781a1":"markdown","6a9245a9":"markdown","8d67c5fa":"markdown","ec8d76d1":"markdown","98f6e5ea":"markdown","aff18c52":"markdown","114b1151":"markdown","c4812cb3":"markdown","71fc99c1":"markdown","dde91029":"markdown","3400c3c1":"markdown","bfdecfe8":"markdown"},"source":{"fcb23f92":"import pandas as pd\nimport numpy as np","fda0209e":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c5623c9":"train=pd.read_csv(\"\/kaggle\/input\/demand-forecasting-kernels-only\/train.csv\")","92de1721":"train.head()","c12bff5d":"train.describe()","ce2b88f4":"test=pd.read_csv(\"\/kaggle\/input\/demand-forecasting-kernels-only\/test.csv\")","bee761ad":"test.head()","2fe20eb3":"#Converting date to datetime format\ntrain['date']=pd.to_datetime(train['date'])\ntest['date']=pd.to_datetime(test['date'])\n\n#Extracting dayofweek,dayofyear,year,month for training set\n\ntrain['weekday']=train['date'].dt.dayofweek\ntrain['dayofyear']=train['date'].dt.dayofyear\ntrain['year']=train['date'].dt.year\ntrain['month']=train['date'].dt.month\n\n#Extracting dayofweek,dayofyear,year,month for testing set\n\ntest['weekday']=test['date'].dt.dayofweek\ntest['dayofyear']=test['date'].dt.dayofyear\ntest['year']=test['date'].dt.year\ntest['month']=test['date'].dt.month","e49849db":"import plotly.express as px\npx.box(x=train['year'],y=train['sales'],title=\"Yearly Sales\")","897f5bef":"px.line(x=train['date'],y=train['sales'],title=\"Daily Sales\")","54935be9":"px.box(x=train['month'],y=train['sales'],title=\"Monthly Sales\")","b295957a":"train.isnull().sum()","52b3c1a6":"train.skew()","e02e9a9c":"train.columns","c7452479":"X=train.copy()\nX.drop(['sales','date'],axis=1,inplace=True)\ny=train['sales']\n\nfrom sklearn.model_selection import train_test_split\n\n#Splitting data into training and validation test\nX_train,X_val,y_train,y_val=train_test_split(X,y,test_size=0.2,random_state=123)\n\nprint(\"Shape of training features:\",X_train.shape)\nprint(\"Shape of training labels:\",y_train.shape)\nprint(\"Shape of validation features:\",X_val.shape)\nprint(\"Shape of validation labels:\",y_val.shape)","a26c22b8":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import cross_val_score","ab9f4fda":"xgb=XGBRegressor(random_state=123)\n\nXBG_score=cross_val_score(xgb,X_train,y_train,cv=5,scoring='neg_mean_squared_error',verbose=15)","0b716120":"print(\"MSE:\",-XBG_score.mean())\nprint(\"RMSE:\",np.sqrt(-XBG_score.mean()))","2954361b":"def smape(A, F):\n    return 100\/len(A) * np.sum(2 * np.abs(F - A) \/ (np.abs(A) + np.abs(F)))","77788672":"xgb.fit(X_train,y_train)\ntraining_predictions=xgb.predict(X_train)\nprint(\"SMAPE score:\",smape(y_train,training_predictions))","8a3fdd04":"xgb","4b536a50":"param_grid = {\n    'max_depth': [3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n    'min_child_weight': np.arange(0.0001, 0.5, 0.001),\n    'gamma': np.arange(0.0,40.0,0.005),\n    'learning_rate': np.arange(0.0005,0.3,0.0005),\n    'subsample': np.arange(0.01,1.0,0.01),}","028a8549":"#Bayesian optimization over hyper parameters.\n\nfrom skopt import BayesSearchCV","e708f54f":"tuned_XGB=BayesSearchCV(xgb,param_grid,cv=3,scoring='neg_mean_squared_error',random_state=123,verbose=15)","10395893":"tuned_XGB.fit(X_train,y_train)","7553a564":"\"\"\"\nimport winsound\nduration = 1000  # milliseconds\nfreq = 440  # Hz\nwinsound.Beep(freq, duration)\n\"\"\"","2c614da7":"tuned_XGB.best_estimator_","8a0f1216":"training_predictions=tuned_XGB.predict(X_train)\nprint(\"SMAPE score:\",smape(y_train,training_predictions))","dad8beb3":"validation_predictions=tuned_XGB.predict(X_val)\nprint(\"SMAPE score:\",smape(y_val,validation_predictions))","a647531b":"X=test.copy()\nX.drop(['id','date'],axis=1,inplace=True)\n\ntest_predictions=tuned_XGB.predict(X)","d62efee0":"final_test=pd.DataFrame()\nfinal_test['id']=test['id']\nfinal_test['sales']=test_predictions\nprint(final_test.head())\n\nfinal_test.to_csv(\"submission.csv\", index=False)","18960fd2":"# Using Test set","8967804f":"# Quick Visualizations","4d4781a1":"Since this competition is judged based on the SMAPE score, we will be using that.","6a9245a9":"Sales are lowest during the beginning and end of the year but highest during the June-August. Could be an effect of the summer holidays?","8d67c5fa":"Sales seemed to have incerased on an yearly basis but not by that much.","ec8d76d1":"# Hyperparameter tuning","98f6e5ea":"# Missing Values","aff18c52":"# Using validation set","114b1151":"No outliers as skewness is between -1 to +1","c4812cb3":"Let's try to tune the hyperparameters to improve the score","71fc99c1":"# Modeling","dde91029":"25% of the items had sales lower than 30, 50% of the items had sales lower than 47 and 75% had sales lower than 70. Highest sales were 231. ","3400c3c1":"No missing Values\n\n# Outlier detection","bfdecfe8":"There seems to be seasonality in June "}}