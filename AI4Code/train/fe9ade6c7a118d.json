{"cell_type":{"eae258fc":"code","8d6022d7":"code","92884cb8":"code","7446fcdd":"code","991dd92c":"code","4b7dc0df":"code","3dc5a724":"code","d5525793":"code","ff3a7033":"code","e4368a08":"code","a5ce2de2":"code","a6143197":"code","51d5c910":"code","8dc42dc3":"code","4aa0811a":"code","1b9b70b3":"code","5e27872b":"code","8c4a8088":"code","7fcfd911":"code","6eaa82dd":"code","7146b033":"code","fbf79156":"code","43eabe8f":"code","06f5a4aa":"code","be8b3ce2":"code","11eb6a8f":"code","d95cca3c":"code","8f3efde9":"code","2f576a5d":"code","c05fb875":"code","4ea0404d":"code","7ffdc314":"code","62279cc8":"markdown","18817d64":"markdown","7e933866":"markdown","2b764002":"markdown","d08b1df5":"markdown","dc18467b":"markdown"},"source":{"eae258fc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns #for plotting in seaborn\n\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8d6022d7":"df=pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/athlete_events.csv')\nregions=pd.read_csv('..\/input\/120-years-of-olympic-history-athletes-and-results\/noc_regions.csv')","92884cb8":"df.info()","7446fcdd":"df.head()","991dd92c":"column_names=df.columns.tolist()\nprint('number of null values.... \\n',df[column_names].isna().sum())","4b7dc0df":"df['Medal'].fillna(value=\"No Medal\",inplace=True)\n#This is a sensible assumption\nprint('number of null values.... \\n',df[column_names].isna().sum())","3dc5a724":"regions.head()\n#We can merge on NOC but lets check if we have the same NOCS","d5525793":"regions['NOC'][regions['NOC'].isin(df['NOC'].unique().tolist())== False]\n#Before you merge 2 files is always good to do a sanity check on it.... \n#Singapore isnt in my dataset....... seems odd, Lets search for Singapore in the other dataset just to double check","ff3a7033":"df[df['Team'].str.contains('.ingapore' ,regex=True)]","e4368a08":"print(\"The different teams fron singapore:\",df[df['Team'].str.contains('.ingapore' ,regex=True)]['Team'].unique(),'\\n')\nprint('The current NOC code for these Teams:' ,df[df['Team'].str.contains('.ingapore' ,regex=True)]['NOC'].unique(),'\\n')\n#here we can see that there are 3 different teams with one NOC\n#finally lets double check the regions dataset\nprint('number of SGP NOCs in our main dataset:' ,sum(regions.NOC=='SGP'),'(This will have to be replaced)','\\n')\n#None with this NOC\nregions.NOC.replace({'SGP':'SIN'}, inplace=True)\n#let replace this'\nprint(\"It has now been renamed: \\n\",regions[regions.NOC=='SIN'],'\\n')\nprint(regions[regions.region.isna()],\"\\n\", 'These ')\n#these wont be an issue","a5ce2de2":"dfm=df.merge(right=regions, how='left', on='NOC')\ndfm.head()","a6143197":"#lets take a look at the \ne=dfm.notes.unique().tolist()\nprint(e)\n#only want notes values not nan so drop nan wich is index 0 in this array\ndel e[0]\nprint(e)","51d5c910":"f=dfm.Sport.unique().tolist()\nprint(f)\n#A lot of sports are visible","8dc42dc3":"todrop=['Aeronautics','Alpinism','Motorboating','Art Competitions',]\ndfm=dfm[~dfm.Sport.isin(todrop)]\n#thats all the cleaning done!!","4aa0811a":"tmp=dfm.groupby(by=['Year','City','Season'])['ID'].agg('count')\ndata=pd.DataFrame({'Number of Athletes':tmp}, index=tmp.index).reset_index()\ndatsum=data[data['Season']=='Summer']\ndatwint=data[data['Season']=='Winter']\ndata.head()","1b9b70b3":"gsum=go.Scatter(\n    x=datsum['Year'],y=datsum['Number of Athletes'],name=\"Summer Games\",\n    marker=dict(color=\"Red\"),\n    mode = \"markers+lines\",\n    text=datsum['City']\n    \n)\ngwint=go.Scatter(\n    x=datwint['Year'],y=datsum['Number of Athletes'],name=\"Winter Games\",\n    marker=dict(color=\"Blue\"),\n    mode = \"markers+lines\",\n    text=datwint['City']\n)\n\nGraphs=[gsum,gwint]\n#PLoty is javascript and will only take args passed as dictonaries\nlayout = dict(title = 'Athlets per Olympic game',\n          xaxis = dict(title = 'Year', showticklabels=True), \n          yaxis = dict(title = 'Number of athlets'),\n          hovermode = 'closest'\n         )\nfig=dict(data=Graphs,layout=layout)\ng=iplot(fig,filename='events-athlets2')\n\n#Notice how not assigning the graphs to graph objects makes it difficult to change thelayout of graphs and customise quickly this is something i will do in as i go on\n","5e27872b":"#Atheletes in each summer olimpic game and number of sports in each olimpic game seasomn\ndfsummer=dfm[dfm['Season']=='Summer']\ndfwinter=dfm[dfm['Season']=='Winter']\ntmp1=dfsummer[['Year','City']]\ndfs=dfsummer.groupby(by=['Year','City'])['Sport'].nunique().reset_index()\ndfw=dfwinter.groupby(by=['Year','City'])['Sport'].nunique().reset_index()\n","8c4a8088":"tmp2=go.Figure()\n\ntmp2.add_trace(go.Scatter(\n    x=dfs['Year'],y=dfs['Sport'],name=\"Summer Games\",\n    marker_color=\"Red\",\n    mode = \"markers+lines\",text=dfs['City'])\n              )\ntmp2.add_trace(go.Scatter(\n    x=dfw['Year'],y=dfw['Sport'],name=\"Winter games\",\n    marker_color=\"Blue\",\n    mode = \"markers+lines\",\ntext=dfw['City'])\n              )\ntmp2.update_layout(\n    dict(title_text='Number of sports in each games',hovermode='closest',\n   xaxis_title='Year', yaxis_title='Number of sports'),\n        title={'text': \"Number of sports per Olimpics\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'})\ntmp2.show()\n","7fcfd911":"#number of events in each sport\n#lets ue our filtered dataframes from earlier\n#tmps=dfsummer.groupby(by=['Sport','Year'])['Event'].nunique().reset_index()\ntmps=pd.pivot_table(dfsummer,index=['Sport','Year'], fill_value=0,values='Event',aggfunc=lambda x: x.nunique()).reset_index()\nindexeds=df[df['Season']=='Summer'].Year.unique().tolist()\n#this is great an all but it leave us with missing o\n\nindexeds=np.sort(indexeds)\nindexeds=pd.DataFrame(indexeds, index=indexeds)\nindexeds=indexeds.rename(columns={0:'Year'})\n#notice how archery goes from 1912 to 1920, This will give us nan values in our ploty heatmap!","6eaa82dd":"tmps3=pd.DataFrame()\ntmps2=pd.DataFrame()\nlooper=tmps.Sport.unique()\nfor x in looper:\n    tmps2=indexeds.merge(right=tmps[tmps['Sport']==x],how='outer',on='Year')\n    #reassigns the sport column to the name of the sport\n    tmps2['Sport']=x\n    tmps3=tmps3.append(tmps2,sort=False)\n#this  puts the data into a dataframe of length of the number of years for each sport and fills the 0s\ntmps3=tmps3.fillna(0)\nprint(tmps3)\n\nfig=go.Figure(\n    go.Heatmap(x=tmps3['Year'],y=tmps3['Sport'],z=tmps3['Event'],\nhovertemplate =\n    '<br>Sport<\/b>: &nbsp; %{y}'+\n    '<br><b>Year<\/b> <\/b>: &nbsp; %{x}<br>'+\n    '<b>NO Event\\'s<\/b><\/b>: &nbsp; %{z}<br>'))\n\nfig.update_layout(title='Number of Events Per Sport',  width=700,\n    height=1050,title_x=0.5)\nfig.show()\n\n","7146b033":"#median age of medal winners\ntmp=dfm.query('Season==\"Summer\" & Medal!=\"No Medal\"')\ntmp2=pd.pivot_table(tmp, index=['Year', 'Medal'], values='Age', aggfunc=np.median).reset_index()\ntmp3=pd.pivot_table(tmp, index=['Year', 'Medal'], values='Age', aggfunc=np.mean).reset_index()\nprint(tmp2)\nfrom plotly.subplots import make_subplots \n\nfig = make_subplots(rows=2, cols=1, subplot_titles=['Median Age of Medal Winners', 'Mean Age of Medal Winners'])\nfig.add_trace(\n    go.Heatmap(x=tmp2['Year'],y=tmp2['Medal'],z=tmp2['Age'],coloraxis = 'coloraxis1',\nhovertemplate =\n    '<br>Medal<\/b>: &nbsp; %{y}'+\n    '<br><b>Year<\/b> <\/b>: &nbsp; %{x}<br>'+\n    '<b>Median age\\'s<\/b><\/b>: &nbsp; %{z}<br>'),row=1,col=1)\n#coloraxis1 is an abitary colorscale thathas been made to allow the heatmaps to share a colorscale \nfig.add_trace(\n    go.Heatmap(x=tmp3['Year'],y=tmp3['Medal'],z=tmp3['Age'],coloraxis = 'coloraxis1',\nhovertemplate =\n    '<br>Medal<\/b>: &nbsp; %{y}'+\n    '<br><b>Year<\/b> <\/b>: &nbsp; %{x}<br>'+\n    '<b>Mean age\\'s<\/b><\/b>: &nbsp; %{z}<br>'),row=2,col=1)\nfig.update_layout(title_x=0.1,title_text=\"Age Distribution of Atheletes\",coloraxis1 = {'colorscale':'Electric'})\norder=['Bronze', 'Silver','Gold']\nfig.update_layout(yaxis={'categoryarray': order}\n                 )\nfig.show()\n\n#This code gave my data all in the wrong order. This is a good oppotunity to make the medal row categorical, this will allow you to keep the pre defined order when the data is pivoted","fbf79156":"tmp=dfm.query('Season==\"Summer\" & Medal!=\"No Medal\"')\ntmp2=pd.pivot_table(tmp, index=['Year', 'Medal'], values='Age', aggfunc=np.median).reset_index()\ntmp3=pd.pivot_table(tmp, index=['Year', 'Medal'], values='Age', aggfunc=np.mean).reset_index()\ntmp2['Medal']=tmp2['Medal'].astype('category')\ntmp2.Medal.cat.reorder_categories(['Gold','Silver','Bronze'], inplace=True)\n\nfig=go.Figure()\nfig.add_trace(\n    go.Heatmap(x=tmp2['Year'],y=tmp2['Medal'],z=tmp2['Age'],coloraxis = 'coloraxis1',\nhovertemplate =\n    '<br>Medal<\/b>: &nbsp; %{y}'+\n    '<br><b>Year<\/b> <\/b>: &nbsp; %{x}<br>'+\n    '<b>Median age\\'s<\/b><\/b>: &nbsp; %{z}<br>') \n)\norder=['Bronze', 'Silver','Gold']\nfig.update_layout(yaxis={'categoryarray': order},width=800,height=300\n                 )\nfig.show()\n\n","43eabe8f":"#dfg=df[df['Year']==2000]\n#fig=go.Figure(go.Violin(x=dfg['Year'][dfg['Sex'] == 'M' ],\n                       # y=dfg['Age'][dfg['Sex'] == 'M' ],\n                        #legendgroup='Yes', scalegroup='M', name='M',\n                        #side='negative',\n                        #line_color='blue'))\n\n#fig.add_trace(go.Violin(x=dfg['Year'][dfg['Sex'] == 'F' ],\n                       # y=dfg['Age'][dfg['Sex'] == 'F' ],\n                        #legendgroup='Yes', scalegroup='F', name='F',\n                        #side='positive',\n                      #  line_color='Red'))\n#fig.update_traces(meanline_visible=True)\n#fig.update_layout(violinmode='overlay',violingap=0)\n#fig.show()","06f5a4aa":"summer=dfm[dfm['Season']=='Summer']\nyears=summer.Year.unique().tolist()\nyears=np.sort(years)\n#print(years)\ngenders=['M','F']\ngencol={\"M\":'Blue','F':'Red'}\ngenside={\"M\":'negative','F':'positive'}\nfig=go.Figure()\nfor yr in years:\n    tmp=summer[summer['Year']==yr]\n    for gen in genders:\n        fig.add_trace(go.Violin(x=tmp['Year'][tmp['Sex'] == gen ],\n                        y=tmp['Age'][tmp['Sex'] == gen], scalegroup=gen, name=gen,legendgroup=gen,\n                        side=genside.get(gen),\n                        line_color=gencol.get(gen), showlegend=False))\n\n\nfig.update_traces(meanline_visible=True)\nfig.update_layout(violinmode='overlay',violingap=0)\nfig.show()\n\n        ","be8b3ce2":"print('Number of unique athlete names=', df[df['Year']==2012].Name.nunique())\nprint('Number of events=', df[df['Year']==2012]['ID'].count())\nprint('Number of Athletes who competed in a 2nd event: ~',df[df['Year']==2012]['Name'].duplicated(keep='first').sum(),\n\"\\nThis doesnt account for athletes with identical names but the number of unique names can be seen as a good estimate of the number of athletes as the same first and last name would be unlikely...\")\n","11eb6a8f":"#Sanitiy check as you go \nsmrratio=dfsummer.groupby(by=['Year','Sex'])['Name'].agg(lambda x: x.nunique()).reset_index()\nprint(smrratio.head())\ncheck=dfsummer.groupby(by=['Year','Sex'])['Name'].agg('count').reset_index()\nprint(check.head())\n#1900 male dataset shall be the chcck\nprint(dfm.query('Year==1900 & Sex==\"M\"')['Name'].nunique())\nprint(dfm.query('Year==1900 & Sex==\"M\"')['Name'].count())\n","d95cca3c":"smrratio=smrratio.pivot_table(smrratio, index=['Year', 'Sex'],aggfunc=sum).fillna(0)\nsmrratio=smrratio.unstack().fillna(0)\nsmrratio=smrratio.reset_index()","8f3efde9":"Female=smrratio['Name','F']\nMale=smrratio['Name','M']\nratio=Male.div(Female,level=1)\nratio=ratio.replace([np.inf],np.nan)\nratio=ratio.fillna(Male)\nratio.index=smrratio.Year","2f576a5d":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=ratio.index, y=ratio,mode='markers'))\nfig.update_layout(title='Gender Ratios for the Summer Olimpics',title_x=.5)\nfig.update_yaxes(range=[-5, 180])\nfig.update_yaxes(tick0=0, dtick=10,zeroline=True, zerolinewidth=2, zerolinecolor='LightPink',title=\"Gender ratio Male:Female\")\nfig.show()\n              ","c05fb875":"#top 10 sports in uk\ngbrdata=dfm[(dfm.NOC.str.contains('GBR') | dfm.region.str.contains('UK'))]\ngbrdata=gbrdata[(gbrdata['Medal']!='No Medal')&(gbrdata['Season']=='Summer')]\ngbrdata.head()\ntmp1=gbrdata.groupby(by=['Year','Medal'])['Sport'].agg('count').fillna(0).reset_index()\n","4ea0404d":"print(tmp1)","7ffdc314":"fig=go.Figure(\n    go.Heatmap(x=tmp1['Year'],y=tmp1['Medal'],z=tmp1['Sport']))\norder=['Bronze', 'Silver','Gold']\nfig.update_layout(yaxis={'categoryarray': order}\n                 )\nfig.show()","62279cc8":"Its probably best not to drop these values....... thats a fair chunk of our dataset ","18817d64":"## A quick history lesson on some obscure sports \n* Jeu De Paume is called 'Real Tennis' and is the precursor to Tennis.\n* Alpinism was not an actual event buy a prize for the most notable feats in mountineering in the previous years and was presented at the closing ceremony. \n* Roque a form of croquet played on a hard court surrounded by a bank. \n* Basque pelota is the name for a variety of court sports played with a ball using one's hand, a racket, a wooden bat or a basket, against a wall or, more traditionally, with two teams face to face separated by a line on the ground or a net. \n* Croquet is a game that involves hitting wooden or plastic balls with a mallet through hoops embedded in a grass playing court.\n* Motorboating was in the 1908 summer olimpics\n\nTo keep some level of consistency I will drop Alpinism,Motorboating and Aeronautics as they are not events that one would even consider as an olimpic sport today.\n","7e933866":"# Data analysis\n\nlets look at the number of athletes per games per year for winter,summer and combined","2b764002":"After each world war in 1912 and 1945 you can see the average age rises across all medals. \n\nFrom the 1960s onwards the ages of athletes doesnt swing as wildly and stablises to around 26 to the present day. ","d08b1df5":"Swimming and athletics currently top the number of avalible medals, however lesser known sports such as canoeing and wrestling have a supprisingly high number of medals. ","dc18467b":"Gender ratio of athletes by year "}}