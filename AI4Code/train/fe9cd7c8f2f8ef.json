{"cell_type":{"bae4514e":"code","99bbde34":"code","626221a2":"code","01561408":"code","960bb5f2":"code","07c84026":"code","7aaa4421":"markdown","32651a58":"markdown","c8f04a2c":"markdown","2c20f2ad":"markdown","4ca564bb":"markdown","fa1db08d":"markdown","bab9d5b1":"markdown","52db5ec4":"markdown"},"source":{"bae4514e":"import numpy as np\nimport matplotlib.pyplot as plt\nimport cv2\nimport time","99bbde34":"\"\"\" Path to the sample video \"\"\"\nfilename = \"\/kaggle\/input\/samplevideo\/SampleVideo_1280x720_5mb.mp4\"","626221a2":"# capture the video\ncap = cv2.VideoCapture(filename)\n\n# check if capture was successful\nif not cap.isOpened(): \n    print(\"Could not open!\")\nelse:\n    print(\"Video read successful!\")\n    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    width  = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n    fps    = cap.get(cv2.CAP_PROP_FPS)\n    print('Total frames: ' + str(total_frames))\n    print('width: ' + str(width))\n    print('height: ' + str(height))\n    print('fps: ' + str(fps))","01561408":"start = time.time()\ncap = cv2.VideoCapture(filename)\nfor i in range(total_frames):\n    success = cap.grab()\n    if (i == (total_frames-1)):\n        ret, image = cap.retrieve()\n        end = time.time()\n        plt.figure(1)\n        plt.imshow(image)\nprint(\"Total time taken: \" + str(end-start) + \" seconds\") ","960bb5f2":"start = time.time()\ncap = cv2.VideoCapture(filename)\ncap.set(1,total_frames-1);\nsuccess = cap.grab()\nret, image = cap.retrieve()\nend = time.time()\nplt.figure(2)\nplt.imshow(image)\nprint(\"Total time taken: \" + str(end-start) + \" seconds\")  ","07c84026":"# Approach 1\ntimer_approach1 = []\nfor loop in range(20):\n    start = time.time()\n    cap = cv2.VideoCapture(filename)\n    for i in range(total_frames):\n        success = cap.grab()\n        if (i == (total_frames-1)):\n            ret, image = cap.retrieve()\n            end = time.time()\n            timer_approach1.append(end - start)\n            \n# Approach 2\ntimer_approach2 = []\nfor loop in range(20):\n    start = time.time()\n    cap = cv2.VideoCapture(filename)\n    cap.set(1,total_frames-1);\n    success = cap.grab()\n    ret, image = cap.retrieve()\n    end = time.time()\n    timer_approach2.append(end - start)\n    \n# Plot the results\nplt.figure(3)\nplt.plot(timer_approach1)\nplt.title('Approach 1 in seconds')\n\nplt.figure(4)\nplt.plot(timer_approach2)\nplt.title('Approach 2 in seconds')","7aaa4421":"### Approach 1: Loop to the last frame","32651a58":"# Reading the last frame of a sample video","c8f04a2c":"### Import packages","2c20f2ad":"### Let's look at the properties of the video","4ca564bb":"### Path to the sample video","fa1db08d":"# Performance comparison of reading a single image frame from a video using OpenCV (Python)","bab9d5b1":"### Approach 2: Grab exact frame using OpenCV properties","52db5ec4":"### Let's compare Approach 1 and Approach 2 by running each 20 times"}}