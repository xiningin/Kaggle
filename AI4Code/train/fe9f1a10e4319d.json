{"cell_type":{"678604c9":"code","018882b4":"code","4fc193cd":"code","e21384d2":"code","9bee410e":"code","49652bfa":"code","093cbe03":"code","b3a91b09":"code","10d8bd33":"code","836e9f31":"code","0d93e9ac":"code","611a077b":"code","ac2a3a40":"code","c50d9497":"code","4c9a0a9c":"code","48941095":"code","5b29a5a2":"code","c7b19478":"code","2f299843":"code","b30f88cd":"code","61bcfd73":"code","e2fb6c75":"code","596e1017":"code","a3d09043":"code","882f5b55":"code","ed2d3b5e":"code","6da2351b":"code","c947bf79":"code","e438204c":"code","57c8d3c4":"code","b23c4628":"code","61df8c1e":"code","cad7ee38":"code","cf3388a0":"code","6cfaa835":"code","51be2392":"code","04effe96":"code","8a4972fb":"code","34627567":"code","62e91891":"code","96e77213":"code","a6b84d83":"code","2c9d48c7":"code","bbc1ec67":"code","a7e36183":"code","dce34fcc":"code","3c5cf217":"code","f550b996":"code","b58d5402":"code","38e27f07":"code","a34a5a8f":"code","067164c1":"code","ea2f0065":"code","0e1b614f":"code","4e4c7025":"code","1e8ecda9":"code","e50e44d9":"code","0e5ad53a":"code","820c2950":"code","e44dc0fb":"code","91c83005":"code","2b6dfb5e":"code","200db965":"code","5a6e7271":"code","b0c1c367":"code","067cc5dd":"code","f3676a7d":"code","a0937d23":"code","1dccfe69":"code","1545f42a":"code","33e61336":"code","9a7f96ce":"code","e898d7a7":"code","410efcae":"code","b9530dde":"code","4afaa831":"code","7db2ac7f":"code","0ebdace2":"code","71825a03":"code","661dcee7":"code","3c1102bc":"code","823d9bd1":"code","01a0a9e3":"code","bdf34d3b":"code","4838e0dc":"code","1e11fc99":"code","d75a529c":"code","467ccee6":"code","888022ca":"code","4995974c":"code","c379cd34":"code","bf974cbe":"code","e7e853a9":"code","85bb4537":"code","0ecdc4cf":"code","baa7182e":"code","bbce12b7":"code","6f7fd94b":"code","7fbc8d04":"code","2dcd43a8":"code","4c463ab4":"code","558c1502":"code","992335a8":"code","055c230e":"code","e857c3fb":"code","f51e2405":"code","6d056e76":"code","48a7793d":"code","b6e69014":"code","4a0b73cc":"code","0948e8f9":"code","79fb56e8":"code","63a03971":"code","c9e2f927":"code","8e6f2666":"code","ebab570e":"code","48102630":"code","0787c9b0":"code","a0c99529":"code","95154b20":"code","566c03c1":"code","b4a9e275":"code","44de6dc6":"code","ee558747":"markdown","ae723ead":"markdown","8723b897":"markdown","5e493b85":"markdown","658f1dc0":"markdown","75f1d0be":"markdown","78165bd2":"markdown","75c8c461":"markdown","5724b4c1":"markdown","fc05da7e":"markdown","332bcc93":"markdown","3016e87e":"markdown","22334f8c":"markdown","1de25ee4":"markdown","cabdfd03":"markdown","d04668b6":"markdown","31e9c870":"markdown","e4cc0624":"markdown","eb0f425d":"markdown","ce6cede3":"markdown","171f0da5":"markdown","9fb80680":"markdown","347d41cb":"markdown","404b9c52":"markdown","a5e7dacf":"markdown","f2b0d4df":"markdown","32b296d5":"markdown","1665ddb8":"markdown","79ffffd4":"markdown","80fb6f9a":"markdown","1c80d6d8":"markdown","a84b8b0e":"markdown","7a2a8a31":"markdown","1583f56f":"markdown","00fdfe0c":"markdown","bd24bbf6":"markdown","698cf13c":"markdown","11afe0c4":"markdown","dcd13be9":"markdown","c1a1fe59":"markdown","750eeeb4":"markdown","4e194346":"markdown","f90b971a":"markdown","7b87a15d":"markdown","d81d5f73":"markdown","3ba97252":"markdown","a0e03bc2":"markdown","22cc1071":"markdown","91b7504b":"markdown","030df467":"markdown","97312fd1":"markdown","29b3713d":"markdown","a9803571":"markdown","7b9e50e6":"markdown","82ab1db2":"markdown","cefd7323":"markdown","86215592":"markdown","80f5fa7f":"markdown","13f74ccd":"markdown","9b3bc8af":"markdown","6a6a5b46":"markdown","7fceceda":"markdown","537dfadb":"markdown","a30f4b44":"markdown","ccb7cc13":"markdown","07789fb3":"markdown","c3c141c6":"markdown","fa1e98c7":"markdown","47720fc8":"markdown","b15d5199":"markdown","8b14a053":"markdown","30afcf85":"markdown","def89505":"markdown","ef8cde98":"markdown","04abdc01":"markdown","a136db36":"markdown","4e4e90c9":"markdown","74a4ab19":"markdown"},"source":{"678604c9":"#Load the necessary python libraries\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings(\"ignore\")\nsns.set_style(\"darkgrid\")\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import precision_score,recall_score,accuracy_score,roc_auc_score,roc_curve\nfrom sklearn.metrics import confusion_matrix,auc,r2_score,f1_score,plot_confusion_matrix,plot_roc_curve,plot_precision_recall_curve","018882b4":"Working_dir='..\/input\/lending-club-loan-p2p\/'\nloan_df=pd.read_csv('..\/input\/lending-club-loan-p2p\/lending_club_loans.csv')\ndescr_df=pd.read_csv('..\/input\/lending-club-loan-p2p\/LCDataDictionary.csv')","4fc193cd":"loan_df.info()\n#It's Clear we have some null value for this dataset..","e21384d2":"#First look for loan_df data\nloan_df.head(2)","9bee410e":"loan_df.describe()","49652bfa":"loan_df[\"loan_status\"].value_counts()","093cbe03":"# Plot Loan Status\nplt.figure(figsize= (8,6))\nplt.ylabel('Loan Status')\nplt.xlabel('Count')\nloan_df['loan_status'].value_counts().plot(kind = 'barh', grid = True)\nplt.show()","b3a91b09":"loan_df=loan_df[loan_df[\"loan_status\"]!='Current']\nloan_df.dropna(subset=['loan_status'],inplace=True)\nloan_df=loan_df.reset_index()\ndel loan_df['index']","10d8bd33":"# Encoding the loan status variable\ndct = {\"loan_status\":{ \"Fully Paid\": 0, \"Charged Off\": 1,'Does not meet the credit policy. Status:Fully Paid':1,\n'Does not meet the credit policy. Status:Charged Off':1,'In Grace Period':1,'Late (31-120 days)':1 ,'Late (16-30 days)':1,'Default':1}}\nloan_df = loan_df.replace(dct)","836e9f31":"\nfig, axs = plt.subplots(1,2,figsize=(14,8))\nsns.countplot(x='loan_status',data=loan_df,ax=axs[0])\naxs[0].set_title(\"Frequency of each Loan Status\")\nloan_df.loan_status.value_counts().plot(x=None,y=None, kind='pie', ax=axs[1],shadow =True,explode = (0, 0.1,),autopct='%1.2f%%',startangle=90 )\naxs[1].set_title(\"Percentage of each Loan status\")\nplt.show()","0d93e9ac":"#Droping null value from dataframe[Description DataFrame]\ndescr_df.dropna(inplace=True)","611a077b":"\ndescr_df.info()","ac2a3a40":"def missing_values(df):\n        mis_val = df.isnull().sum()\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        print (\"Dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" columns that have missing values.\")\n        return mis_val_table_ren_columns","c50d9497":"# Missing values statistics\nmiss_values = missing_values(loan_df)\nmiss_values.head()","4c9a0a9c":"plt.figure(figsize=(20,7))\nmissing= loan_df.isnull().sum()\nmissing= missing[missing > 0]\nmissing.sort_values(ascending= False, inplace=True)\nplt.xlabel(\"Bar Plot of Missing Values\", fontsize=15)\nplt.ylabel(\"Number of missing values\", fontsize=15)\nplt.title(\"Most number of missing data within the feature\", fontsize=15)\nmissing[:80].plot(kind=\"bar\")\n\nplt.show()","48941095":"columns = [column for column in loan_df.count() < 42022*0.10]\nloan_df.drop(loan_df.columns[columns], axis=1, inplace=True)","5b29a5a2":"# Missing values statistics\nmiss_values = missing_values(loan_df)\nmiss_values.head()\n#Now our dataframe has only 21 features which has missing value","c7b19478":"redundant_columns=list(loan_df.loc[:,loan_df.apply(pd.Series.nunique) == 1].columns)\nlen(redundant_columns)","2f299843":"loan_df = loan_df.loc[:,loan_df.apply(pd.Series.nunique) != 1]","b30f88cd":"# Missing values statistics\nmiss_values = missing_values(loan_df)","61bcfd73":"numeric_ls=list(loan_df.describe().columns.to_list())\nloan_df[numeric_ls].info()","e2fb6c75":"loan_df[numeric_ls].head(2)","596e1017":"# Missing values statistics\nmiss_values = missing_values(loan_df[numeric_ls])","a3d09043":"redundant_columns=['member_id','funded_amnt','funded_amnt_inv']\nredundant_columns","882f5b55":"for column in numeric_ls:\n  if loan_df[column].nunique() < 14:\n    plt.figure(figsize=(7,5)) \n    sns.countplot(x=column,data=loan_df[numeric_ls])\n    #plt.legend()\n    plt.show()","ed2d3b5e":"redundant_columns.append('tax_liens')\nredundant_columns.append('acc_now_delinq')\nredundant_columns.append('delinq_amnt')\nredundant_columns","6da2351b":"redundant_columns.extend(['total_pymnt','total_pymnt_inv','total_rec_prncp','total_rec_int','total_rec_late_fee','recoveries',\n                         'collection_recovery_fee','out_prncp','out_prncp_inv','last_pymnt_amnt'])\nprint(redundant_columns)","c947bf79":"numeric_ls=list(set(numeric_ls)-set(redundant_columns))\nprint(numeric_ls)","e438204c":"loan_df[numeric_ls].head(3)","57c8d3c4":"plt.figure(figsize=(15,10))\ncor=loan_df[numeric_ls].corr().abs()\nmask = np.triu(np.ones_like(cor, dtype=bool))\nsns.heatmap(cor,mask=mask,annot=True,cmap='coolwarm')","b23c4628":"loan_df[['fico_range_high','fico_range_low']].corr()","61df8c1e":"loan_df['fico_range_avg']=(loan_df['fico_range_high']+loan_df['fico_range_low'])","cad7ee38":"redundant_columns.extend(['fico_range_low','fico_range_high'])\nnumeric_ls=list(set(numeric_ls)-set(redundant_columns))\n","cf3388a0":"categorical_ls=list(set(loan_df.columns.to_list())-set(loan_df.describe().columns.to_list()))\nloan_df[categorical_ls].info()","6cfaa835":"miss_values = missing_values(loan_df[categorical_ls])","51be2392":"plt.style.use('ggplot')\nfor column in categorical_ls:\n  if loan_df[column].nunique() < 25:\n    plt.figure(figsize=(12,7)) \n    sns.countplot(x=column,data=loan_df[categorical_ls])\n    #plt.legend()\n    plt.show()","04effe96":"# leak data from future.\n\nredundant_columns.extend(['last_pymnt_d','issue_d'])\n","8a4972fb":"# All values are diffrent for these columns there is no pattern or any thing intutive\nredundant_columns.extend(['url','title','emp_title','pymnt_plan','desc','id'])","34627567":"categorical_ls=list(set(categorical_ls)-set(redundant_columns))","62e91891":"loan_df['term'] = loan_df['term'].replace(\"months\",\"\", regex=True).astype(int)\nloan_df['emp_length'].replace(to_replace='[^0-9]+', value='', inplace=True, regex=True)\nloan_df['emp_length']=loan_df['emp_length'].astype(float)","96e77213":"loan_df['int_rate'] = loan_df['int_rate'].replace(\"%\",\"\", regex=True).astype(float)","a6b84d83":"label_encod=['purpose','zip_code']","2c9d48c7":"#As it's an object type we can take only year and month feature from it\nloan_df['earliest_cr_line_month'] = pd.to_datetime(loan_df['earliest_cr_line'].fillna('2001-08-01')).apply(lambda x: int(x.strftime('%m')))\nloan_df['earliest_cr_line_year'] = pd.to_datetime(loan_df['earliest_cr_line'].fillna('2001-08-01')).apply(lambda x: int(x.strftime('%Y')))\nredundant_columns.append('earliest_cr_line')","bbc1ec67":"plt.figure(figsize = (12,8))\nax = sns.boxplot(x=\"emp_length\" ,y= \"int_rate\", data=loan_df, linewidth=2.5)\n\nplt.show()","a7e36183":"sns.countplot(x='earliest_cr_line_month',data=loan_df)","dce34fcc":"plt.figure(figsize=(18,8))\ng=sns.countplot(x='earliest_cr_line_year',data=loan_df).set_xticklabels(labels=loan_df['earliest_cr_line_year'],rotation=30)\n","3c5cf217":"#As it's an object type we can take only year and month feature from it\nloan_df['last_credit_pull_d_month'] = pd.to_datetime(loan_df['last_credit_pull_d'].fillna('2016-09-01')).apply(lambda x: int(x.strftime('%m')))\nloan_df['last_credit_pull_d_year'] = pd.to_datetime(loan_df['last_credit_pull_d'].fillna('2016-09-01')).apply(lambda x: int(x.strftime('%Y')))\nredundant_columns.append('last_credit_pull_d')","f550b996":"sns.countplot(x='last_credit_pull_d_month',data=loan_df)","b58d5402":"one_hot_coding=['home_ownership']\nredundant_columns.append('verification_status')","38e27f07":"label_encod.append('grade')\nlabel_encod.append('sub_grade')\n\nlabel_encod.append('addr_state')","a34a5a8f":"loan_df['revol_util'] = loan_df['revol_util'].str.replace('%', '')\nloan_df['revol_util'] = loan_df['revol_util'].astype(float)","067164c1":"#Droping all the column which we have stored in lst\nloan_df.drop(redundant_columns, axis=1, inplace=True)","ea2f0065":"label_encod","0e1b614f":"from sklearn.preprocessing import LabelEncoder\n# label_encoder object knows how to understand word labels. \nlabel_encoder = LabelEncoder()\n# Encode labels in column 'grade'. \n\nloan_df[label_encod] =loan_df[label_encod].apply(LabelEncoder().fit_transform)","4e4c7025":"loan_df[label_encod].head(5)","1e8ecda9":"#Encoding the purpose features\n#nominal_columns = [\"purpose\"]\ndummy_df = pd.get_dummies(loan_df[one_hot_coding])\nloan_df = pd.concat([loan_df, dummy_df], axis=1)\nloan_df = loan_df.drop(one_hot_coding, axis=1)","e50e44d9":"loan_df.head()","0e5ad53a":"redundant_columns.append('home_ownership_NONE')","820c2950":"loan_df.shape","e44dc0fb":"plt.figure(figsize=(30,20))\ncor=loan_df.corr().abs()\nmask = np.triu(np.ones_like(cor, dtype=bool))\nsns.heatmap(cor,mask=mask, annot=True, cmap='coolwarm',fmt='.1g' ,linewidths=2, linecolor='black',)","91c83005":"loan_df.columns","2b6dfb5e":"miss_values=missing_values(loan_df)\nmiss_values.head()","200db965":"null_valued_cols=loan_df.isna().sum()[loan_df.isna().sum()!=0].index.to_list()","5a6e7271":"cat_null=[i for i in null_valued_cols if i in categorical_ls]\ncat_null","b0c1c367":"\nplt.figure(figsize=(18,8))\ncor=loan_df.corr()[null_valued_cols].abs()\n\nsns.heatmap(cor,annot=True, cmap='coolwarm',fmt='.1g' ,linewidths=2, linecolor='black',)","067cc5dd":"X=loan_df.values","f3676a7d":"from sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors=3, weights='uniform', metric='nan_euclidean')","a0937d23":"X=loan_df.values\nimputer.fit(X)","1dccfe69":"Xtrans = imputer.transform(X)","1545f42a":"Xtrans.shape","33e61336":"loan_df=pd.DataFrame(Xtrans,columns=loan_df.columns.to_list())","9a7f96ce":"loan_df=pd.DataFrame(Xtrans,columns=loan_df.columns.to_list())\nX=loan_df.drop(columns=['loan_status']).values\ny=loan_df.loan_status","e898d7a7":"from sklearn.decomposition import PCA\npca = PCA(n_components=3)\nprincipalComponents = pca.fit_transform(X)","410efcae":"principalDf = pd.DataFrame(data = principalComponents\n             , columns = ['principal component 1', 'principal component 2', 'principal component 3'])","b9530dde":"principalDf['loan_status']=y","4afaa831":"r=['installment',\n 'mths_since_last_delinq',\n 'annual_inc',\n 'revol_bal',\n 'loan_status',\n 'total_acc',\n 'last_fico_range_low',\n 'inq_last_6mths',\n 'dti']","7db2ac7f":"plt.style.use('ggplot')\nfor col in r:\n  fig = plt.figure(figsize=(10,6))\n  plt.style.use('ggplot')\n  plt.title(col)\n  \n  sns.distplot(loan_df[numeric_ls].loc[loan_df['loan_status'] == 1, col],label='loan_status 1')\n  sns.distplot(loan_df[numeric_ls].loc[loan_df['loan_status'] == 0, col],label='loan_status 0')\n\n  plt.legend()\n  plt.show()","0ebdace2":"# 3d scatterplot using plotly\nimport plotly.express as px\nfig = px.scatter_3d(principalDf, x='principal component 1', y='principal component 2', z='principal component 3',\n              color='loan_status',size_max=10, opacity=0.7)\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))\n\nfig.show()\n# model.labels_ is nothing but the predicted clusters i.e y_clusters","71825a03":"loan_df[cat_null]=loan_df[cat_null].round()","661dcee7":"X=loan_df.drop(columns=['loan_status'])\ny=loan_df.loan_status","3c1102bc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.25, random_state=1)","823d9bd1":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","01a0a9e3":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()","bdf34d3b":"from sklearn import metrics\nfrom sklearn.metrics import classification_report,recall_score,accuracy_score,precision_score\n\ndef Model_performance(model,X_train,X_test, y_train,y_test):\n        #Train\n        model.fit(X_train,y_train)\n        train_class_preds =model.predict(X_train)\n        print()\n        train_accuracy=model.score(X_train,y_train)\n        precision_train=metrics.precision_score(y_train,train_class_preds)\n        recall_train=metrics.recall_score(y_train,train_class_preds)\n        f1_train=metrics.f1_score(y_train,train_class_preds)\n        fp_train, tp_train, th_train = metrics.roc_curve(y_train,train_class_preds)\n        auc_train=metrics.auc(fp_train, tp_train)\n        classification_report_train=classification_report(y_train,train_class_preds)\n        cm_train = confusion_matrix(y_train, train_class_preds)\n\n        #Test\n        test_class_preds = model.predict(X_test)\n        test_accuracy=model.score(X_test,y_test)\n        precision_test=metrics.precision_score(y_test,test_class_preds)\n        recall_test=metrics.recall_score(y_test,test_class_preds)\n        f1_test=metrics.f1_score(y_test,test_class_preds)\n        fp, tp, th = metrics.roc_curve(y_test, test_class_preds)\n        auc_test=metrics.auc(fp, tp)\n        classification_report_test=classification_report(y_test,test_class_preds)\n        cm_test = confusion_matrix(y_test,test_class_preds)\n        evaluation={'test_accuracy':test_accuracy,'recall_test':recall_test,'precision_test':precision_test,\n                     'f1_test':f1_test,'auc_test':auc_test,\"cm_test\":cm_test,'train_accuracy':train_accuracy,\n                     'precision_train':precision_train,'recall_train':recall_train,'f1_train':f1_train,\n                    'auc_train':auc_train,'cm_train':cm_train}\n        return evaluation","4838e0dc":"logistic_met=Model_performance(lr,X_train,X_test, y_train,y_test)\nprint(logistic_met)","1e11fc99":"\nEval_df=pd.DataFrame.from_dict(logistic_met, orient='index',columns=['Logistic Regression'])\nEval_df","d75a529c":"sns.heatmap(Eval_df['Logistic Regression']['cm_train'],annot=True)","467ccee6":"from sklearn.preprocessing import MinMaxScaler,StandardScaler","888022ca":"std=StandardScaler()\nX_train=std.fit_transform(X_train)\nX_test=std.fit_transform(X_test)","4995974c":"from sklearn.model_selection import GridSearchCV","c379cd34":"# we can add class_weight='balanced' to add penalize mistake\nsvc_model = SVC(class_weight='balanced', probability=True)","bf974cbe":"Svm_eval=Model_performance(svc_model,X_train,X_test, y_train,y_test)","e7e853a9":"sv_df=pd.DataFrame.from_dict(Svm_eval, orient='index',columns=['SVMs'])\nsv_df","85bb4537":"from imblearn.over_sampling import SMOTE\nsmote = SMOTE()","0ecdc4cf":"# fit predictor and target variable\nx_smote,y_smote  = smote.fit_resample(X_train, y_train)\nx_smote=pd.DataFrame(x_smote,columns=loan_df.drop('loan_status',axis=1).columns.to_list())\ny_smote=pd.Series(y_smote)","baa7182e":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import precision_score,recall_score,accuracy_score,roc_auc_score,roc_curve,confusion_matrix,auc,r2_score,f1_score","bbce12b7":"#declare the models\nlr_model=LogisticRegression(C=0.01,penalty='l1',max_iter=200,solver='liblinear')\ndt_model=DecisionTreeClassifier()\nrf_model=RandomForestClassifier()\ngbc_model=GradientBoostingClassifier()\nxgb_model=XGBClassifier()\nknn_model = KNeighborsClassifier()\nsvm_model = SVC()\n\n#create a list of models\nmodels=[lr_model,dt_model,rf_model,gbc_model,xgb_model,knn_model,svm_model]\n\n#creating dictionay for storing the confustion matix\ndct_train={}\ndct_test={}\nlst_imp=[]\n# fuction for calculation the eveluation matrix\ndef score_model(X_train,y_train,X_test,y_test):\n    df_columns=[]\n    df=pd.DataFrame(columns=df_columns)\n    i=0\n    #read model one by one\n    for model in models:\n        model.fit(X_train,y_train)\n        y_pred=model.predict(X_test)\n        y_pred_train=model.predict(X_train)\n        \n        #compute metrics\n        train_accuracy=accuracy_score(y_train,y_pred_train)\n        test_accuracy=accuracy_score(y_test,y_pred)\n        p_score_train=precision_score(y_train,y_pred_train)\n        p_score=precision_score(y_test,y_pred)\n        r_score_train=recall_score(y_train,y_pred_train)\n        r_score=recall_score(y_test,y_pred)\n        train_auc = roc_auc_score(y_train,y_pred_train)\n        test_auc = roc_auc_score(y_test,y_pred)\n        fp, tp, th = roc_curve(y_test, y_pred)\n        fptrain, tptrain, th_train = roc_curve(y_train, y_pred_train)\n        \n        #insert in dataframe\n        df.loc[i,\"Model Name\"]=model.__class__.__name__\n        df.loc[i,\"Train Accuracy\"]=round(train_accuracy,2)\n        df.loc[i,\"Test Accuracy\"]=round(test_accuracy,2)\n        df.loc[i,\"Precision Train\"]=round(p_score_train,2)\n        df.loc[i,\"Precision Test\"]=round(p_score,2)\n        df.loc[i,\"Recall Train\"]=round(r_score_train,2)\n        df.loc[i,\"Recall test\"]=round(r_score,2)\n        df.loc[i,\"ROC AUC Train\"]=round(train_auc,2)\n        df.loc[i,\"ROC AUC Test\"]=round(test_auc,2)\n        df.loc[i,'AUC Train'] = auc(fptrain, tptrain)\n        df.loc[i,'AUC Test'] = auc(fp, tp)\n        #inserted in dictionary\n        dct_train[model.__class__.__name__]=confusion_matrix(y_train,y_pred_train)\n        dct_test[model.__class__.__name__]=confusion_matrix(y_test,y_pred)\n\n        i+=1\n    # Return the data frame and dictionary\n    return df,dct_train,dct_test","6f7fd94b":"result_df,dct_train,dct_test=score_model(x_smote,y_smote,X_test,y_test)","7fbc8d04":"result_df","2dcd43a8":"for key,value in dct_test.items():\n  print(f'For {key} Confusion matrix is :')\n  print(value)","4c463ab4":"for key,value in dct_test.items():\n  print(f'For {key} Confusion matrix HeatMap is :')\n  plt.figure(figsize=(5,3))\n  sns.heatmap(data=value,annot=True,fmt='.1g' ,linewidths=2)\n  plt.show()","558c1502":"for key,value in dct_train.items():\n  print(f'For {key} Confusion matrix is :')\n  print(value)","992335a8":"for key,value in dct_train.items():\n  print(f'For {key} Confusion matrix HeatMap is :')\n  plt.figure(figsize=(5,3))\n  sns.heatmap(data=value,annot=True,fmt='.1g' ,linewidths=2)\n  plt.show()","055c230e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.25, random_state=1)","e857c3fb":"# Applying gridsearch cv \nparam_test2 = {'max_depth':range(5,16,2), 'min_samples_split':range(200,1001,200)}\ngsearch = GridSearchCV(estimator = GradientBoostingClassifier(learning_rate=0.1,n_estimators=60, max_features='sqrt',\n                                                               subsample=0.8, random_state=10), \n                        param_grid = param_test2, scoring='roc_auc',n_jobs=4,iid=False, cv=5)","f51e2405":"gsearch_met=Model_performance(gsearch2,X_train,X_test, y_train,y_test)\nprint(gsearch_met)","6d056e76":"# Printing eveluation metrics\ngsearch_met_df=pd.DataFrame.from_dict(gsearch_met, orient='index',columns=['Grad_Boost'])\ngsearch_met_df","48a7793d":"fig, axs = plt.subplots(1,2,figsize=(10,6))\naxs[0].set_title(\"Confusion Matrix Training\")\nsns.heatmap(gsearch_met_df['GRad_BOOst']['cm_train'],annot=True,ax=axs[0])\naxs[1].set_title(\"Confusion Matrix TEsting\")\nsns.heatmap(gsearch_met_df['GRad_BOOst']['cm_test'],annot=True,ax=axs[1])\n","b6e69014":"from sklearn.metrics import roc_curve,precision_recall_curve,plot_roc_curve","4a0b73cc":"from sklearn.metrics import classification_report","0948e8f9":"n_estimators = [100, 30, 50, 800, 120]\nmax_depth = [5, 8, 15, 25]\nmin_samples_split = [20,10,  15, 100]\nmin_samples_leaf = [ 2, 5, 10] \nforest = RandomForestClassifier(random_state = 1)\nhyperF = dict(n_estimators = n_estimators, max_depth = max_depth,  \n              min_samples_split = min_samples_split, \n             min_samples_leaf = min_samples_leaf)\n\ngridF = GridSearchCV(forest, hyperF, cv = 3, verbose = 1, \n                      n_jobs = -1)\nRandomForest_Eval = gridF.fit(X_train, y_train)","79fb56e8":"RForest_Eval=RandomForest_Eval.best_estimator_","63a03971":"RForest_Eval","c9e2f927":"y_pred=RForest_Eval.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Accuracy Score {}\".format(accuracy_score(y_test,y_pred)))\nprint(classification_report(y_test,y_pred))","8e6f2666":"from sklearn.model_selection import RandomizedSearchCV\nxgb= XGBClassifier(scale_pos_weight=90,objective = 'binary:logistic',\n    nthread=4,\n    eta = 0.1,\n    num_boost_round = 80,\n    max_depth = 5,\n    subsample = 0.5,\n    colsample_bytree = 1.0,\n    silent = 1,\n    )\n\nparameters = {\n    'weights' :[ 99, 75, ],\n    'num_boost_round': [10, 25,],\n    'eta': [0.05, 0.1, 0.3],\n    'max_depth': [3, 4, 5],\n    'subsample': [0.9, 1.0],\n    'colsample_bytree': [0.9, 1.0],\n}\n\n\n# define grid search\ngrid = RandomizedSearchCV(xgb, parameters, cv=2, scoring='roc_auc')","ebab570e":"XgbEval=grid.fit(X_train, y_train)","48102630":"best_prams=XgbEval.best_estimator_\nbest_prams","0787c9b0":"y_pred=best_prams.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Accuracy Score {}\".format(accuracy_score(y_test,y_pred)))\nprint(classification_report(y_test,y_pred))","a0c99529":"from sklearn.metrics import precision_recall_curve\ny_scores = best_prams.predict_proba(X_train)\ny_scores = y_scores[:,1]\n\nprecision, recall, threshold = precision_recall_curve(y_train, y_scores)","95154b20":"def plot_precision_and_recall(precision, recall, threshold):\n    plt.plot(threshold, precision[:-1], \"r-\", label=\"precision\", linewidth=5)\n    plt.plot(threshold, recall[:-1], \"b\", label=\"recall\", linewidth=5)\n    plt.xlabel(\"threshold\", fontsize=19)\n    plt.legend(loc=\"upper right\", fontsize=19)\n    plt.ylim([0, 1])\n\nplt.figure(figsize=(8, 5))\nplot_precision_and_recall(precision, recall, threshold)\nplt.show()","566c03c1":"fpr,tpr,thresholds=roc_curve(y_test,y_pred)\n\ndef plot_roc_curve(fpr,tpr,label=None):\n    plt.plot(fpr,tpr,linewidth=4,label=label)\n    plt.plot([0,1],[0,1],'k--')\n    plt.axis([0,1,0,1])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    \nplot_roc_curve(fpr,tpr)\nplt.show()","b4a9e275":"features = X.columns\nimportances = best_prams.feature_importances_\nindices = np.argsort(importances)","44de6dc6":"plt.figure(figsize=(10,15))\nplt.title('Feature Importance')\nplt.barh(range(len(indices)), importances[indices], color='red', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","ee558747":"# <b> Project Title : Loan Default Prediction : Predicting whether a customer will default on a loan. <\/b>\n\n---\n","ae723ead":"## **Let's try to explore the feature Loan status and make it Target or Response Variable..**\n\n","8723b897":"*Missing values are common occurrences in data. Unfortunately, most predictive modeling techniques cannot handle any missing values. Therefore, this problem must be addressed prior to modeling.*","5e493b85":"It is not performing very bad for this ,now we can try some advance algorithm like Support Vector Machines with some optimisation.\n\nThe accuracy came out to be satisfactory for the baseline along with the recall score. However, precision seems to be very off.\n\nAs seen in the table above,but from the business perspective we are looking for a better recall value,For that we can conclude which are our defaulter and eligeble for loan.\n\nMay be our our recall value low for imbalance data let's use SVM and see our result.\n\n","658f1dc0":"###Here, We have finalize loan status as our target variable which has now 20 % are defaulters for the loan payment.","75f1d0be":"A common thing to predict in datasets like these are if a new loan will get default or not. I'll be keeping loans with default status as my target variable.","78165bd2":"# **Conclusion**\n\nThe last_fico_range, grade, inq_last_6month  features were found to be the most relevant for predicting loan default in. The current model tries to predict default biased data from credit analysts grade and assigned interest rate. The XGBC and RF models provide substantial improvements on traditional credit screening. A recall score significantly and robustly above 90%, with AUC-ROC scores \u224374%. The features provided to the model in our study generalize to any lending activity and institution, beyond P2P lending. The present work could, therefore, be augmented in order to predict loan default risk without the need for human credit screening.\n\n\n\nDue to the time limit, it is not possible to conduct a thorough study and have a deep understanding of the dataset. There are still many features in the dataset that are unused and a lot of the information has not been fully digested with knowledge in the banking industry.\n\n\nOnly the Random Forest., XGBoost, model is used, but there are many good ones out there even neural networks. The models can also be improved further by finer tunings on hyperparameters or using ensemble methods such as bagging, boosting,.\n\nIn the bank loan behaviour prediction, for example, banks want to control the loss to a acceptable level, so they may use a relatively low threshold. This means more customers will be grouped as \u201cpotential bad customers\u201d and their profiles will be checked carefully later by the credit risk management team. In this way, banks can detect the default behaviours in the earlier stage and conduct the corresponding actions to reduce the possible loss.\n\n\n\n\n\n\n","75c8c461":"We wanted to have high precision for defaulter, we don't want to miss the defaulters but still we are miss classifying many  non-defaulter as defaulters.\n\nWe can't check every classification algorithm one by one it's too much time taking so we need to build a function that checks for all algorithms and gives us a result.\n\nFrom above we can see that our baseline model is performing low due to maybe the imbalance dataset we have. we can perform SMOTE operation and check our model.","5724b4c1":"### **One hot coding**","fc05da7e":"# **Problem Statement Analysis**\n### Loan default occurs when a borrower fails to pay back a debt according to the initial arrangement. In the case of most consumer loans, this means that successive payments have been missed over the course of weeks or months. Fortunately, lenders and loan servicers usually allow a grace period before penalizing the borrower after missing one payment. The period between missing a loan payment and having the loan default is known as delinquency. The delinquency period gives the debtor time to avoid default by contacting their loan servicer or making up missed payments.\n###Defaulting on a loan will cause a substantial and lasting drop in the debtor's credit score, as well as extremely high interest rates on any future loan. For loans secured with collateral, defaulting will likely result in the pledged asset being seized by the bank. The most popular types of consumer loans that are backed by collateral are mortgages, auto loans and secured personal loans. For unsecured debts like credit cards and student loans, the consequences of default vary in severity according to the type of loan. In the most extreme cases, debt collection agencies can garnish wages to pay back the outstanding debt.\n###The loan is one of the most important products of the banking. All the banks are trying to figure out effective business strategies to persuade customers to apply their loans. However, **there are some customers behave negatively after their application are approved**.\n","332bcc93":"### **Label Encoding**","3016e87e":"![2.jpg](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL\/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL\/wAARCAFgArwDASIAAhEBAxEB\/8QAHAABAAEFAQEAAAAAAAAAAAAAAAcBAwQFBgII\/8QAThAAAQMDAgIEBg4IBgIBBAMAAQACAwQFEQYSITEHE0FRFBUiVWGSFhcyNlJTcXJzgZGTseEjMzdCVHSUwTRDVmKhoiTRYxgmNfBFgoT\/xAAZAQEAAwEBAAAAAAAAAAAAAAAAAQIDBAX\/xAAtEQEAAgEDAwMDAwUBAQAAAAAAAQIRAxITBCFRFDEyM2FxFUGRBSJCUoFiI\/\/aAAwDAQACEQMRAD8An9ERAREQEREBFbkmiiGZJGMH+4gLCq73Q0gy95f9GNymImUTLYoufZq2hkkDGQVZJOM9Vw\/FZPj+D4mf1fzU7LI3Q26LUC\/wH\/Jn9X81jN1bb3SFhhqwQcZMWB+KbLG6HQIsOC6Uc7Nwma30POCsmOWOVu6N7Xt72nIUTEwmJiXtERQkREQEREBERBbmcWxOIWGKhwYsyY4icta4naubXthtpVyyBU7jgOG8DO30Ly2qfI8gYa0cyVj4eMPaG9xPbhch0lauuWjLBHXWqjZUMdIGyPeMhuVlW0rzSHc+Evc47AC0dq8maTKwLTWvuFopKxzAwzwteWjkCQskk55qJumKQzYZXueAeSyVg05PWDis5dWjOasNSMSIiLVQREQEREBERAREQEREBERAREQEREBERAREQEREBERAWJUyCKRueRWWsSrGQSAC8DLQe9Z6szFey1PdZdUSMcdzd5J8ho7B3qhqJQ93ENA7T+8sV9XHSU809Vu6yOJ0ji0cAB2KONP6z1TrC7MrbW+0x6d6\/Y6CV48K2jmQO9ctb3lviEqiaQtXqGV5OCrDT5IxnHZnmvUJPhAGVMal8k1jDYoiLtcwiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgJ2K1NLHAwySyNYwcy44C0E13qLnI+ChBhibwdK8e7H+1XrSbeys2iG0q7xSUbnRuk3zD\/AC281qXV10uTtsYNFH8LmSrcFHFCSHs3u7Hu44WWXbRwcCPQuiNKIZzqLMluinjEVdIaoA54nHFXYqangGIow0faqhwxkc03K8VUmcr4lc3gMfYnXO71Y3JuTbCMsjrnd68vldIMPwR8is7lTcm2DLxJRUk2eshDs+kheG290LNtDVupYhxDBx4q9uVDgeV2pNMpi2Hhl3uFC4RTU7qpmf1oOFuaW4U1Z+qkG8DymHmFrBJubgkAdyw5aJsrusp8xTt4tI4blnOjC8XdUi5+33uaGXwa6DZIfcvxwPyrfghwyDkehc9qzWe7WJyqiIqpEVMgKqC3KMsK1uRkhbRwy0ha4F28tbET6cLm1q5b6UrYPBwbxcRyXCdL1Yyk6OKqikLhNUSM2hrd3AEFd\/1D3Bwe3DSOY5q26mZ1TA+mZO1vZK3csqUmGk2hpdI3GnuOk6CSBzg1kDGEObgggLcjBAOV7EDWx7YYWRt+CxuAnVuDHHbyUTSUxaF6lA63ms9YFFk8duFnrq0YxVz6vyERFqzEREBERAREQEREBERAREQEREBERAREQEREBERAREQFhVgJePK2gdqzOOVjVTnN4tbuwM471nq\/Fanu1F0jmqbBc4GR+U+neGHPuzg4XztZbNR0dqtEdHSVEGsIKtxe8F2NuTjhy5YX0tEHEmTDuP7vwV5ipWtmdNHSUwd8ZsG4\/WuWJt7N8\/upA2U09OZ+EvVDrB\/vxxV2BrvCBn7VTErnEvGD2L3E2UTBxHBTG7Jns2CKme5VXa5hERAREQEREBFYqauKjhMs7w1v4rSzXqrrPIt0QYfjJRwVq1m3srNohvZpo6eJ0szwxjRkkrWTaioWxk07zO\/sa0ELWRW97ZvCKud8054nj5H2LNb1bDuZFG13eGgLWNJSdRZZfrnK7yLUQzsc5yvmquMnlEti\/wBowVUzE+6PD0IHtxwP2q8aUK73nr7h8aPsC9Mqa5oJdID3DA4pvHwlXcDzcp44NzHde7pE\/D7WXM+E1yy4dRUL8NleYpD+64FeOs7OK8ubG9p3six6W8VWdKExeW5imjnYHxvDmntC9rlX2w7+top3xSDiPK4K829Vtuw24RiYE43RDl6Ss50pj2Wi7pEVmCphqYg+CRr2nuKujksl8qoiIkREQFbmmjp4XSyuDWNGSSvY5rl7\/UeMa5lqjdiIeXK8dmOxX0qb5wracQx6qqffJiHgijB8lvespzRHC2KPyWt5Y7F52wwxNZCAGNGAvTTvau+tIj2c2cz3ew87cZz3oHAcgrLfJJVdynCJlczxyq7la3JuTCMru9N6tblTcm1OV7em5WdyblO0yu7lXfjsVncm5Npl7IBOSvRecDjgjkVa3Ko8pMIy91DGVlOY5Wgu7H9oXi2XCW2TNpp376UnAkdzae5VDtqs1MDKymfEeBPI+lZ204mFotMS60HIz2JuGcLntN3GVwkttZ\/iKccHE+6augJw0uIJwM4C4bV2zh01nMI16Suk6s0TcqGlobW2ubIN07iHfo+PIY7SOK6W+67sumdP0V3u8skUNW1vVtjYXOJIzgBR1DpvXGqdR6mqfC\/FNBM\/bStniD9+OWO4cOJ9K5e8XS8UGntHHUtC59TQXs5bI3ImY09yotKaLL0iadv2n6y80tRKykpHbZuuj2uafkWJp\/pO0xquvqLba6qZtSxp2maPYHfNPao7vJqrtSXzUktqkt9shq2NFMRtNRgAbsDv\/ur0DavWOsdMTWjTj7XQ2p5fVS7Q3rBgYHAceX\/KTGUw63S+rLjUW6pfciDK25eCt7tmeZW3PSTptur36Y6yoNezgS2LMecZ91n+y4Wmst7mtF7o6ame2oq7m7qgeHVsJ939S2Omr1VWKoqtOVGmpKy7UbCW1bWD\/wAk885IURWITM5dFQ9Kel6zUfiISVUFaXljRPAWteR2A9q19o6WKC56jvFhnpZIquke8U5a0lsjG9rj2HkuAjqdZaj1FpKovFr\/AE9Fdi6WJkIY6KPc3i49wGfsXQadpq+y6v17QVNqfHLdJZZ6Sp28HsO47QfrCYRl19T0j2ew6VobxeXlhq3FrIqZu8kgnsz3BZcfSTpmXSrdRtrHeAOf1fFnlh3dt71GOn6e4aMt2lrlXWeatgfLMJG8zS7sgHC1lxsd7ummobnTWOSkiqNQmd1KBzjJ4O292VMdhMekukTT+tZ6mG0Sz9bT43tmi2EjvHeurXBSWmqpek20T2+0CG3eCvFTPGwNaHbTgHHPsXeBShVFQkDmVQPaRkOGEwjL0i87296b296YMvSLzvb3pvb3phOXpF53t703t70wZekXne3vTe3vTCMvSLzvb3pvb3pgy9IvO9vem9vemDL0i87296b296YMvSLzvb3pvb3pgy9IvO9vem9vemDL0i87296qHA9qGTsRO1eXt3sc34QwUTlGsWs9U6g1bebdp230jqC1SCJ88r8GRxzyz8i2l26RaLSVFTHVkEtPWSHi2liMjAOw5yuRtN2u\/R7qnUlNU6fq6qhqqhslJPEMdYOPb9ax9d6l1VdaS6UcVidBaqmi2ROlj3ukeeYHpUSZSFd+kHTNks1LdqurcKasj62ERsLnPb34Vqk1za9QaOq7zYZt7YQdzJRtczj2jsUV1kr9LDQr7rZpKiaCiw6kIBI+rvV+OzXm5N1tqels0tHS3amjjo6Tk6QjaCcD5CfrKg3O6b0q2pmrKPT76eoeZqZshmbGTh57Md2BzWyt\/Sbpu46r9jcL6plcc7ethLWOwM8CVyVW6u090oWy4R2R8zHadbBvazlMCfJz38APrWipqjV981nZZrtbmfoo3hzI4g10WeWShud\/0f6mud7ud3o7gcillIYe8Zwu+Kjbo4t1fRagvT6yndE2T3ORz4qSVYyIiICIijILX3O6R2+MADfO73EfeV7udxittIZpOJJ2tHeVzsFLLLO6trHb5jxYO4LbT093eVL2x7KshqK6Xrrk85By2IHgFntIaMNAa3uCsmXJ\/wB3cm5dcacQ590z7rpJPDPBUwre5N6nBldGB2ZVSQexWd6b02oiV3h3JwVrcm5MJyuYPwkwBz4q3uTepwZXd5HI4QOHEEA54cVa3qgdx5qNqsTKxLTyU03XW5xbMDkxfulbq2XeOvb1bwI6lvu4\/wD0tbvLX8OHpWNVUYLjXUrtlTHxAH7xWV9KJaVvMOuCoVr7Tcm3KiD8gTN4SM7itguO0THZ0R3VHJEREsW4VYobfPVFu4RMLsDtXIW\/yhJUu9xUnrDnmCVudVVfU22OHsqH7CtVA3q42R9jWgLt6anaZc+rZeBaOA9z2Ku\/A4K0XcU3Lrw54nuuNdk4JwgkySFaJ8nc4gNHMleg5mDIZY+rdwaGuBJTELPZeAM5QPyzceHyq2xrgwktOOecKp3OLS0F4PLhyTEGFxrtwzlNw44cM9ysvBbHvAJb2+hG8W5DCP8AfhMQjC71neMKodk4yrJe0cC4kd+FVzwxnWtBJ5BvemBc6xu4tDgcc8diqXY58uw96tDY14DoupbJxcfSvLy2FohnJDQcs4c1Av7uODwVC\/B4FW3SEEOlaSR7lUB47iMEqYgyvOfkKjSR8qt7lTcpwZWq1\/g9VS3UnAp3ZkDebgu1p5m1FOyZmdsjQ4Z7iuIr\/wBJbZW+gfiuqsUwms9OR+6wNP1Lh6mmO7fRs2BC0180ta9RVFBNcoOtNDMJogeW70rdIuR0MG52mku9CaOrj3QFwcWjhkhZMFPFTRNihjaxjQAA0Y4BXUQedjc5AAPeqdTH1nW9WzrMY37RnHyr2iDyI2B5eGNDzzdjiUdFG5wc5jS4ciRxC9Ig8ujY9mxzGub8EjIVQ1rWhoADRwAHYqp2oKY4p2FOxUBJHHghly7f\/OvVZFJUPY2NxGMq4LdABgTTY+csSIxx3ytDvKkLzgrP344LspTs5rWW\/F8Px03rJ4vh+Om9ZXOsXhzzngr7Fcni6H46b1k8Xw\/HTesve445rwHndxTYblPF8Px03rJ4vh+Om9ZXOsQP481Gw3LfgEOf103rKvi6HH6+b1lVzzu48l6G0t4P4qdhuW\/F8Px03rJ4vh+Om9ZXOsTrE2GVvxdD8dN6yr4ugxnr5vk3L26Xg3HYeK8maNwL2nkeITYbnnxfDjPXTesqm3QAZ8Im+Tcrhc3d1jXZb2hUE8e4uA4HgFGw3PHi6HH6+b1lTxfD8dN6yqJNrsFe+sU7Dct+L4fjpvWTxfD8dN6yudYnWJsMrfi+H46b1lYnpmUlTDLFUzDiMgu5rL6xay+VNVTW189FSirqmkdXCTgEqOLd2ROptdfUVdPRU7p6qaOGJo4ve4ABa6xaltuo4pprZKZoon7HPxwJ9C+cdZ6i1TeLwKbULJaNjcFlCODHfWu105fNZ2a0x0Vh0VAKYjfubLncT2qs9JMVznuvGvEym18UcoG9jXY4jIzhHRRvaA9jXAHIBGcKI\/Zl0pgkHRjCfnfmnsz6Umt8rRbc\/O\/NZennPvDTlhJVbp63XC8Ut0qYjJU0rS2LJ8kZ9C2TGbQAAAAMADkFEfs16Uf9FN9b809mvSj\/AKKb635qfTT5j+TmhLuxpxkA4ORnsQRsDy8MbuPN2OJURezXpR\/0U31vzT2a9KP+im+t+aemnzH8nLCXsAHIAyeaqog9mvSj\/ooet+aezXpR\/wBFD1vzT00+YOWEvoog9mvSj\/ooet+aezXpR\/0UPW\/NPTT5g5YS+qF2Mk8AO1RB7OOk4O2u0Y1ue3csq26x1nUddHerC2lp5G7WvzyKiOnnOMwnkjDpqqoF2uj\/ACt9HCcY\/wByvGR+OB4rDpIo6emaIhgPG53yq\/uXdWkV7Qwm2XvAad7cl55r05+1oJ+xWw7jwOCqSPdBBUyjEj2QPeAfQEZyvHILeBO5HeS7bnJUf6Y17DBomG8ahqHRCqqXxRYbu5LY0HSVp2404mglfv63qRvbgk96haIdaHZGcfUqlwaQD29vctHX6ostsu9PaKu4FtXWtL2uA8luPT2LAtvSBp651NRRNq9ssDi127hvx3JmE7XWM8sPOQ1rf3jyPyKjSHZ4rj5NfWmst9c+hc6oNEC4xYwNwzwysawdJlsu2mJr9doxQvhcWyQxguBA5be9Mm13ORx48kb5foPcVylo6RNM3SnqZoat7RBGZXCRhado7cLHh6UdKS0Eta+rmEe7DHuiIx6EybXYtdvztOcKpyOa11ruUV7oGV9ITBC73Jx7v0rLZISCXOO4cMK2ELznFw29iNOCCTxbyVrcq7lOEZWTUGzXAXJufBpTtnYOeTyIXZseHsa8cnDIXG1bBPSuYewZ+xbzTVa6ussUjzlzSWH6lxdRTHdvpXz2bhERcrdyOuQ4U1A4cmzZKxd\/6MOB5jK3Gr6cy2R8vZAd5HeFz8TxLQwPYebAV6PSTmMOXVr3X2vy3iq7lYDuC9By7drmzj2a3Vk0sGkayaF+3aMOPo7QoksFwhjv+mpbdHW2tks7vCJq2Qujm+apevtI+5aeqKCM4dLyzyXD02gLtcJ7TRXiZgt1rcXtdGeLs8cf8LnvW2WtbRMd1+XpD1PcamruFqtvW2SjqjBPhuSQP3s9yyJteXm636joNOUwdDUML3SFudmOaw2aL1Fao6q0WmuxZayp62R+fLwez5FvbFpV9gvbJ4JsU7I3NPpyFWKWTmGgpekW\/wBQ+urmUeLXbsiqcW8HY54Xp\/SDqWOgZe6yhFNYag\/+NvbxkHYAt1bdHSUVrv1qlnLqO6h2MH3JPatNSaH1DPQ0NiuVa2ez0MgfHudyAOcBTttCc1XK3pWNvs0kzqHq5wW\/+O8eVgnmsmu6TKeC5QSU8YlppqASidvFjJD+6fSvNx6ORc9aVV4mkZJQzRhnUuPLAx\/ZYll6NWUVhrqOqn3ySTl8DP3QOxMWyZrgs3SLWVF2gtl1a2ZlbG6VskYx1eASB\/wrJ6SdVCwOvgtwNuMxhjcW5247St5YNPXKiIgr7bRCFsTo2TMILxkc16tOnLhZdFOsVFIK6Xr3SvZVcGbT2BTET+6M1mG10feau+WU19ZLFKXcR1f7vyrdjBjEgdkO5Lj9D6WqtLUVY2sqMVFRL1ghYf0bG9y6lriSX8GtPJg5BbVqzmcL+5UJ4K3vQnI4KcIyrKQaeZpP7pWRpnU9jp7Y+Ke70rJGSEFj34IWruU5httS5v6xzdrPSVtrZoTT0lsp5Km2xPnljD5HEcSSMrk6nbjFm2lmJ7Nt7MNOeeaP7wKvsw0555o\/vAsQaB015siT2A6a82RLixp+ZdObMv2Yac880f3gT2Yac880f3gWJ7AdN+bIk9gOm\/NkSY0vMozfwy\/ZhpzzzR\/eBPZhpzzzR\/eBYnsB035siT2A6b82RKcaXmTN\/DL9mGnPPNH94E9mGnPPNH94FiewHTfmyJPYDpvzZEmNLzJm\/hl+y\/TruAvNHn6QKrtWafYcOu9ID9IsQaC02058WRLwNA6cDi91vYT+CY0vMo3X8Ndq7UMNw09NFp3UlFTXEEOYS4HcBzC0Gmel2J1ZHbNQsEE3uPCuTCR2lbjUti07pa0y3WGytnqR5MbWtycnkuMs3RZX6qq2XTUrBRxE72QRdrTyBWunTSmJzLO9r59ncUVbSVl3q5qGpjqoXuzvYc4WwL8k4OVp7VQW6z1FRQ2uPZHGcEkc1nB20YBXXWvhhunLJ3+lV38Oaxd69RkPmja44buBJ+tTNcQvE5Wm3eifcpbcysjdXQjdLTg+Wwd5C2LYpns3CM4581Gdkkpv\/qC1LNLLBG3wfAMj8buDeX2LlbzqK8XrVNxhhvU9G6n3Cniid5L8cvqWcTMrTWE6MZJIcMGT8qqYpt2zYd55BRFOdR36XSdlrro+3y1kcj5paR3lu2jh2rVw6pvjdP0Njkukgq57o6jfWl\/lRxg4zlMyYSxV6porbdm2yoz15aXOb2jC2NHL4xoIqymY4tkJHPkoXo7X7G9aVoddmXh8TC3rZZNxPD5SvMVZdL\/c7DZWXee3R1czwfB3csKMz7mITjskDtmDu5YVXxyxnEjS09gyoHn1Xd7do6rpZbjO51NdzSOqs\/pOrHMrrujCK5TzXusmvM9fRjHgJmeS53ecHl2K2ZMOuvurrNpprRW1kbal3+Tnysd6odZ2B8tMynqGyGdufJ7D3LhrLT2y59LN4ff2UskzIP0cdU7DR8mVk6wgtNPqyhbboaWNopS4incC3f2clX98GISaKZ7o97ARwzt71qLZqKkumpamwQt\/8ini6xw7VHdVqeti0LNWSXgMurDhsYk44z3LnYrZU3jXtRIy9utdVHaPCnTtftL3Y4jOfSkzKYiE9kuaAJWFkncV53jvXJ6BudXc9IU8lXOal8eW9e45Ll0e9aVjMKTOGTvHem8d6xt6b1bYjcyd471YqX7nxsOQNw5LzvVqd+aiAf7h+KpeuIymJifd0N90xa9R0Jpq+na4Y8l4GHN+QrG0hpg6Vt0tF4U6ojMm5hcTlo7l0Q5IvN32xtz2dcUr7qYCrhEVFlMDuTA7lVEMKYHcmB3KqIYUwO5MDuVUQwpgdyYHcqohhQ8FzOrmySNt8bXANdP5XyLp1yetpTTtt0g5dfxWuj84Z6kTtnDEz1bjE0+SFXJXhxBdvHaqb160R2cWZie66DlUc9op6xpDnOdTvY3HaSOC8b1TdhNuY7rTKKbZp29+xvStFU0BMVNcZJZ4nsyWNJ4E+hbKp0tNcNaXCmdQdRbhTOkp5Y27W9b2BSN1rznLua89Y7GM8O5VnTyb0OWbR2o77pG+RXNrobjTlpo3ztw5+D5TWnuKu6YsVDXVUL63S9xo6umaBJIcgSuHM\/WpedK9+Nzs45K5173HfI8uPLiqRo4W5UT2WhuQ1Pd6GgtMtHY6mnkMrZWeU9+DjB+XC1tqobodH2qndp2oE1jqpJ6qF7CDWNJyGgdvcpp38dxchmfv6wSHd2FTxdzlRHV0dy1hfrrqCn07NaKdtrdTR0kjNrpH4PIYHf3di2Ys1ND0QWyhuGnZ6msa17nxQMxI12TgnCkh9RLI7dJIXEciUE0jXbg8h3ekaOCdXLkujQ3mPSjYL3Tug6uTbTxubtc1npC7Jz3OcGNLQ7Gdx5Ky6V73bnu3HvTKvFMKTZc3JuVvcqblbCuVwOJdtHas3SjxFU1lGx2WR4djuK1zXEP3jsWbpNrX3Kvnj9y4AZ9K5uqj+xrofJ1qIOSLzHasVdPHWUstNJxY9uHD0KN6JzqOpqre8nfFKQzPwVJwGFx+sbE6aPxnSZbPCMkNHFy6el1NtsSx1q5rmGtc7jwVA5YdvrvDaZry0dZylYObVedLh2GeVH245hezXFvZ5\/eJ7r+\/b5RbuHwVRkhaHluQB7lmeatE44g8FTcp2p3Mguw4EEtyOIyqF20EOd5J7VY3Z5oTkYPJNpvX2veMNzuZ2LySxrXB0hDSeIz2q3uI7VTgefFNqM5X3SB4DQC0fvcUaQ4nbwA7VY3elA7HIptF07gDhxJKr1jnuAec4Vnd6U3Kdqc4X9wa0td5TScqpc0+UxmwHsysfd3pknt8kKNqu7K9uQOOVZ3AnDuXZhYldcH00RjDQap5xExo5jvUTiIaUjLIZm7ajpKGAZFM4PlHZhSUAGgADkud0jYha6I1EozUzgF5I4j0LpAF4fUX3W7O7TpiFURFi1EREBERAREQFRVRB5c1r24c0OHcRlVxwVU70yjDgK1z47\/V9rNx8lUbJ5PAbR3ZVm5uxqKr4\/vlWy\/0r3dCuaQ4NScSzA9V64tODxbnJWGJPSqmT0rTYyi7nb7oCz6gvT7uJ30dUcbtrvdELzUdHFtqnQ1UFUaepj4Pf8MLotwVes9Kji8L8jEptPW+lr6Ovhc41VE0shcT7kEcVgy6ItFTR1dO5mHVDzITnk89oW5DwOSr1nHOeKcSORzdm6O7BZnO\/RvmncDl7nkrPg0haaW4UFwiBjloXl7ePetpvGc9venWA\/Wo4TkcJrHRU1RQh9opTUwvrfCp4AcF+eaytB2C7Wi719znp30VBKR1FK5+di7JsrmjDXFo7gVUzOcMOeSO4lOJPI0OptDWXVlcal8L4a9wG6dj8Bw+RX6PRtlo2wxsa4GFu18rnZJW26zB4FU3jj6eacUHI5io6MNO1t1lrjI\/q5OON3AlVunRzabvUiqe+SJ7Y+pO1xGWBdMHADA4DuTrPSnEnkUtdFQ2a2QW23MLIIW44ni496zN\/pWIHAclXf6VaNPCk3ZW\/wBKb\/SsXf6U3+lTsRuZW\/0q29+aqD54\/FWOs9Kx625U1tdDU11QyGEOHlOOO1Z6mnM1xC9LxnulEckXLs6RNIvYHC\/0Q4ZwZOK8+2PpAHHj2k9deNwav+s\/w74vXHu6pFyvtkaQ8+0nrp7ZGkPPtJ66iNHU\/wBZN9fLqkXK+2RpDz7SeuntkaQ8+0nrqeHU\/wBZOSvl1SLlfbI0h59pPXT2yNIefaT104dT\/WTkr5dUi5X2yNIefaT109sjSHn2k9dOHU\/1k5K+XVIuV9sjSHn2k9dPbI0h59pPXTh1P9ZN9fLqlz2sqRtRYJZTzp\/0gWg1HrXT11ss1NbtS0kFSeLHCXByOxcfYOlpoElo1YYnwuGxtTFycPStdPp9SJ3YZW1652uso5TLbqeQ83MCuZWktNbSy1UkFJP1lI85hfnIwtwHBpMTeLx3r1axiHNacveVXcrIIbl2cvPAhV3BWwzjsu7lTKt7wm8JtTlcyjnZbhW94VNwTBleLgWYVA7yQFa3BNwTaZXdyblb3hNwTBldDlUO4KzuCB2eGU2i5uTcvI5lqtxyEyFo4pgXnzCOnlJ+CfwW30JTmKwda8+VJI48Vy9bvuVyp7PTZ3yHdI4dgCkqkgZTUscLGgBjQMALzurvGNsOvRr+6\/zREXnukVC0EEHiFVEEd6m0zWWyqlu9kbuEhzPD6PQtbR3KCvp99ONkw\/WRu4EFSqQCCCOBXG6h0NBWTOr7YfB6wccN4Ncu7p+rina7m1dDd8WhB28e081XetVLW1ttqPBrpA5j+x+OBCzYZ46puaeQSegL1tLVpqRmHFak1nEsjcm5W+IOHcD3K3ucHkE8OxaxXLOZwyNyblaY\/j5QXkS5eeHDsTCu9f3JuVjcQcnkqtLsknkp2p3yvb03K1vJjJDeIRpLjkcf9qjCYmZXdypkkf7e1Y1TWU9IM1EgjJ5A8ysekN0vsxgtkRYwc5HDgQsdTWpT3a1pMr9VdG0jBFGzrpX8GgccFdJpbS0onZdbr5dRj9Gx37oWdpzRtLaP\/JqsVFYebzxA+RdRheRr9TunFXbp6WO8mFVEXG6BERAREQEREBERAREQE7ERBGV1cfZJV4+GVYLzlZ+pdP3x95dU2xoLJDlx5rVPseqQ4gU+fTtXsdP1WnWuJefq6F7T2XesKr1hVjxHqn+G\/wCqp4k1TnHg\/wD1XT6vSZx092R1hTrCrPiHVI5wD1U8R6pIOKfJ+aq+s0j0917rCnWFWDYtVNZkwce7atNfq+56afRRXCEGSskEbcfu+lX0up09ScQpbStX3b\/rCq9YVYdY9TFrTGxrmu4hwAIIVTY9UE+TTYA7S1TbqdKv7rRoXle6wp1hVjxHqn+G\/wCqeJNU\/wAN\/wBVT1ekn091\/rCnWHuVlti1U4uzT47vJWgu1wvVov1JZ5qfNTUNy3gr6fUaepOIVvp2pGZdL1hTrD3K2bDqhrQTACSOwLz4j1P\/AA3\/AFVPWaSZ0bwvdYU6wqz4k1RjhTf9VTxJqn+G\/wCqer0k8F1\/rD6U6w+lWPEmqf4b\/qq+I9Ufw3\/VPWaSPT3XusKtT22jvGyluUDZ4XOGGuVPEmqP4b\/qs20acvr7vC+tcBA05LccljrdZSK\/2r6fTWme7bDol0RtGbFBnvyf\/a9Don0QRwsUH2ldphVXk81\/LvilcOK9qfRPmKD7SntTaI8xQfaV2qJy38myrivam0R5ig+0p7U2iPMUH2ldqict\/KdlfDivam0R5ig+0p7U2iPMUH2ldm1xOcjGCq5Tlv5NlfDi\/am0R5ig+0p7U2iPMUH2ldoeAQOyMpy38myvhxftTaI8xQfaU9qbRHmKD7Su1ROW\/k2V8Iy1PoLSVgsU1ZRaWgq6ocI4wTxK5XS\/RBLfJm3bUMIo4XnLaFh5N7FOxaHDDgCPSq4WlepvFcQpOjWZy4m86Ho4rII7LGKaWnG5ob+8B2LRW65NuFORI3qq2Lg5p4EqUg0BcbqfSInnddbZ+iq2jLmjk5a6HU2icWlTU0+3Zpt\/lE9p5pvWtt9xMsr6aqjMNQ3h5XJxWYd7TgjPpXsUtF4zDhnMT3Xt6b1Z3AdufQqCT0K+1XK\/vTerQeO5NyjBuXd6b1Z3JvA5hTtMr29N6sdZnkEDjnllNpuX96B6x3S9m0tXqNxPDG5NpW2V4SuD\/QVYr64UcR6jDpyPJasSsurKbFPCOuqScBreOF0GmtIzzVEd1u5PWc2Q93yrk1demn7t66VrezY6OsZpabxpVtPhk4zg\/uhdW0YVQABgKq8TUvN5mXdWu2MCIiquIiICIiDGq6ClrmFlTTxyjGPKbkhcZdOjqA7p7RUS003wN3kld4ivTUtScxKs0ifdEU1i1TQMc58DZ2t\/eHEla5t3GSKqkqmPZwcWs4KbSuI6StQ0WmtJ1MjurFVUAthbgZc5dvT9ZeLYc2po1iMuP8dUzWh4DtjjjLuGF7deLeXhol7F56J6q1amtU1uu1Mx9zjJkdG4YIYeRCkI6FsBcCKIDHcV1W67ZbEwxpoboyjs3ejY2SSSYNjZ2lUdeacxCZhdJGeRjGV1OuNJ2Sl0LdJI6NrHRx7w4HjzV\/o5s9sdoyimZRsDnsGSeOVWf6jGM4THT98OMjudTM8NoqGpfu7XsIC2lPprUl5aGSsZRwO\/zG8HKVY4Y4mhrGNAA4YC944cFz6n9QvbtEN69PEe7jLP0dW+gIkrZpK6T\/5uS66ClgpWbIIWRt7mtwryLivqWv7y3rSK+wERFRYREQEREBERAREQEREBERAREQEREBUxxVV5e7YxzsZwCcIPSLkNEazk1e2uL6A0ngspjwXZ3YPNdcoicmFuomjpqeSeV2I42lzj6Avl3W91uWtL8blH1kdG6Xwajaex4\/uvqKogZVU74JRljxhw7wod6VaCkssmlKaggbFELi1xa3tOQu3orRFp8sNas4dF0V6qdebM+zVxcLlbMRSF\/wC+B2qRFraGx2uiq5K6ko44aibjI9owXfKtmuXUtmZmGlIxBhERVXFDuv48dMemH7ucJyP\/AOxUxKINdge3HprPH9F\/crp6WZjU\/wCMOo+CX8JhEXM2ERESIiICYREBERAVCMqqoUHMWnXljvOpa2wU0zxcKQu3sc3AIHPB9C21pvtDeoZpqN5dHE4sc5wwMhfP1vp6+l1B0ga0tUZkrbZXSwtg\/wBhe4PPp4BbCDUVTJ0e2l1BI6jpbnUOjrZwP1R3cU7CenV9IKSWqFRE6CIEve14IGOfFWbbdaC60Da+iq4p6ZwyHtcMDvz3KDrjSNtesbppi0XGWSzSaekqZWNkD2mQA+VkdvAH61qRVP0\/0OWKCwSPkqbs9xrGNdnJ3cv9vcozCcPpKOeGZm+KVkjPhNcCPtVIp4Z9xhljkAODscDg\/UoYslh1o+O70kDRZ4Kihb4LCJd4dJjic9mVveh67UVXaaq2CndFdKB3V1ri7cJHg4LspEmEnoqA5CqpQIiICIiDnr\/pWjvUbnH9DOB5D2cOPpXC1NqvthYDM01EXa4cVLWM81RzGvaWuaC08wQujT6i9OzC+hFkQQ3ShqDgvMcvaHLK3txwIK7O5aIs9wcXiAQSHm6PtXKVHR7dqYvdTXN0zQfIYeGB3L0dHrqz2s5r9NMezFLndioHEc+ax5bbqahOHWt0rR+8CrBrLnGcVFqex31rtr1GnP7sOGzYbyqhxPpWt8Yz9lE\/Pdgqorbq79TaHvP1pPUacHDZsslVGRxLgB3rXxUWqK92GWh0TT+9nktvS9H13q3NNbc3QxEZc1vErK3V6cR7rV0LTLW1NxpqPJMglf8AAaclKWlvWoMChgdTRk4LncOC7e06DtNtcJJGmplH70n\/AKXUMjZGwNY0NaOQAXDq9fntV1U6fHu52waPobLGHPaKip5mV4zj5F0fYq4THDC8695vOZdVaxCg5KqoBgYCqqpEREBERAREQEREFMKIdbaOuN7vldebtLm10Dc0sX98KX1o9XkjSdywM\/oSttC+y8YZ6lcwh3R+k66sbaNW2SYsqPDDHVsB91ECp9acjKjzoXbjo+i7c1Mn4hSIrdTqTe\/f9ldGuKuY6QQDoC9Z+I\/uFZ6NveJbvmK\/0gAHQN5B5dR\/cKx0be8W34+Cs\/8ABb\/J1qIizaCIiAiIgIiICIiAiIgIiICIiAiLy57W8yg9Iqbh3qm9veozCcPSKm4YzlNzcZymYRhVW5wXU8jW+6LSB8uF7a4O5FVUiFejXUYsl3uVmrbVWsmlnJbNty08VNLTloPerXgtP1vWdTH1mc7toz9qvKIjAKIOmr\/H6V\/n2\/iFL6iDpq\/x+lv59v4hdHS\/UZavxS5F+qZ80L2vEX6pnzQvawn3aR7CIiJFEOvP2xaa+hP4lS8og15+2PTP0J\/Erp6X6n\/GHUR\/Yl\/sVMZC8yyCKF8juTGlx+pRlR9NdmnrB19HVxUMlT4JHUiMlpk7iuZslBF4bIw7iHtIHPB5LzJUwQsD5Z42MPJzngAoldXnIB+VW31dNG+ON9RE18nuGl4Bd8g7Vzdl1rQ3bVN9sZLYZbU9rXGRwG\/OeI9HD\/lB1SKzNVU9OGmaeKIO5F7wM\/aqy1MEEXWzTRxx\/De4AfaUF1FafUwRwiZ88bYjyeXgNP1q41zXtDmODmniCDkFBVEVDnCifYaCjs1ptT7mKSnAFwkMlWPhk5B\/FY8Om7BSabNkhox4tkLiIwORPMhbeTDZXYaBj\/leYgeDQAO4LmtqTHZtFYaPTOltO6Woailt8T3tmy2V053PLfg57vQrVBojTlBbbhQU9NIKauJc8OOSz5nwVz1\/6UPEdfVwNsr5Y6YF0k5accO4rrNN3+HVOn6a8wRuiinBwx3MYVJvZeKwxrHoiyW+w1dopKm4vhqOD3TVBMjPmnHBbTTOk7RpO3uorTA5jHO3Pkedz3nvc7tWwpRl58kNI\/eH7yzl00nMMbdpwDkiItFBERAREQEREBERAwvBijd7qNp+UZXtEFrwan+Ij9QL02NjeTGj5AvaKcyYMIiKAREUYBERSCIiAiIgIiICIiAiIgLSav8AelcvoCt2tJq\/3pXL6Aq+l84\/Kl\/jLl+hj9n0X8zJ+IUhqPOhj9n0X8zJ+IUhq+v9WyNL4Q5npA94N5+g\/uFY6NveLb\/mq\/0ge8G8\/Qf3CsdG3vFt\/wA1RH05\/Kf8nWoiLJcREQEREBERAREQEREBERAREQFhVYO4EFZqwqzO4YWepOKr6cZlYMjg7mqh5ADGg7nHAKtn3S5PX2p47FaIqCnn6u53ImGlOeLHd6482mezpmsYdYxhZvic7c3OXEHke5V3PAxngo16FJ6+fT17bdqt1RNDW9WSX7iDjjx+VSTnAwDlTatoKsujLsHJWWSACScAdqw6Ljnisioi6+nlizjrGFue7IwurSzt7ufU+TkpOkqxMrHxtlL6djtr6lvuGlddBNHUwRzwvD4pGhzHN5EHkVAVPbb1adL13Rm6yumqqt7+ruO3Me1zgck9\/BTbpu2PsumrbbJZOskpadkTnd5AwVqzltFEPTV\/j9Lfz7fxCl5RD01f4\/S38+38Qt+l+p\/LLV+KW4v1LPmhe14i\/Us+aF7WM+7SBERQkUQa7\/bHpr6E\/iVL6iDXf7Y9NfQn8SunpPqf8YdR8Er1zmst9S54JYInEgdowVAvRzpq86v0uKc11PT2OlvhqDA6HL37TkjPZzX0C4AtIIyDzCxqG30ltgdDRU8cEbnl5awYG48yuZshKgvVHYa3pJjrq91E0VjW08criS4ZcPJ+Xh9q8QWiDVlxsFHdqqd1vfK5zYWuILjjIyflUxVulrLcqwVdbbaeabmS9gIcfSO1ZkdtoYZhJHSQtkaMNIYPJ+TuULIVsVp05fNW3M6plmpqq03Hwe2U75nN\/RNOWn05wFpqjTNq1RqzpHuFZLNHPb3xupJY3FoZzGSO33IU9Vem7PXVjayooIX1LXBwkLeOQrrLRQRSVUkdDTtdWY8J8gfpMDAz3ohCeubjZtQWYWW509VNcrbbW1EVTE7AHDmRyKs1NC7VPRhYq253KWagoY90lviO2SfHbnmeCmup01Z6wtMlDEC3AJa3Bc34J7x6F6n0\/apoI6fwOKONnBrY2huB3cOxSIKv94tOqodLURbU02lTL1UdI0kSPcBji5Sl0YWiusun6qkqrl4bTiqd4ICcmGLAwwnvXST6dtFRTQ0z7dTdVAd0QbGB1Z7x3FZdDQU9ug6mnZtZkuPpJQZKInYg1036xytOP6NXZgd7uCtFuWgLztTdNnXTGEc9KFzNVNa9HWqeNlfV1DH1ALMkQ8e1SDR0UVspIbfFCG09MwNiI4A9\/BWTbKDxuLpJRwvr+r6sTlvlBvdlZPo3HhyCmc4T2ZlJ7tyzFiUgIccg8llrs04xDmv7iIi0UEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAWk1f70rl9AVu1pNX+9K5fQFX0vnH5Uv8Zcv0Mfs+i\/mZPxCkNR50Mfs+i\/mZPxCkNX1\/q2RpfCHM9IHvBvP0H9wrHRt7xbf81X+kD3g3n6D+4Vjo294tv+aoj6c\/lP8Ak61ERZLiIiAiIgIiICIiAiIgIiICIiAsKsdh4WaseeDrSPQqakZhek4lg8C4LQak0TbdVVNLVVWW1NKd0TwumfSOzwK8upXhrWNdk54lckUtE9m83iYcJ0baLqtGtvPhcwmNXUF7Mdy7YMBzwx6FlNpXNPPgvLaV2SScqbVvKK2iCjaGuKzT6FYgiLCcq\/njyXTpxO3ux1JzIMp2qObx0pCwalt1suFpqIoq6Tq2PJwWcQMn7VIzSHDI4g8QVopKqiHpq\/x+lv59v4hS8oh6av8AH6W\/n2\/iFv0v1P5ZavxS3F+pZ80L2vEX6lnzQvaxn3aQIiKEiiDXf7Y9NfQn8SpfUQa7\/bHpr6E\/iV09J9T\/AIw6j4JfREXM3FpavVVioaiKKouMLJJXbGDJOT9XJbl2djtp444L536ywusWoqMQTyajnc5tNuycuz+53FBOlx1FabTJFFWVscck36tmcl32LEotQyPluk1fFFTW6jwW1G7O4d5HYos0zZKiXpUsBvFLO6Wnsg3tmGQ2Qd\/p4\/gsapp7jS3jUlY+CqltPWATx5O1oz3fIoSme36htd0tL7rSVTX0TM7pCCMYV+23WivFIKmgmbNHnGRwI+UdihXpF6u66T01VaOgl8Hgqg6SWFp6qLh\/mAenvXUdGdlqILzdLubzDWsqXDrGwcI92OwdilCUAioBjOVVAREQeSxp5heeoZ8EK4irtiU5lb6iP4ITqI\/ghXEU7YMyoAAqoilAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAtJq\/3pXL6ArdrSav8AelcvoCr6Xzj8qX+MuX6GP2exfzMn4hSGo86GP2exfzMn4hSGr6\/1LI0vhDmekD3hXn6D+4Vjo294tv8Am\/8ApX+kD3hXn6D+4Vjo194tv+aoj6c\/lH+brURFk1EREBW5nlkZcOxXFYqs+DuxzVbTispr3lY8LcWnhhDVyFo2Nyc8Vi+URtWNda6ottvkkpac1E+39FEP8x3Y1ckak+XVxw2TqwtdwyT3KraqY8w0E8gFH+kOkOqvl6qLLe7E60XCPiGOcTn7Qu3a09ZxYSQeDsq2+fZXZHhtmElgLhxxxVV5ZnYM88L0uqPZzCIikEREBERATAyiICIiAvErS+F7A4tLmkBw5j0r2iCCKro+6QauutUFa6kr6Wiq3TeFTSjrC0ngO\/kp0hYY4GMPNrQFUkgHAyVUcRxQVUQ9Nf8Aj9K\/z7fxCl5RD01\/4\/Sv8+38V0dL9T+Wep7Jbi\/Us+aF7XiL9Sz5oXtYSvAiIoSKINeftj019CfxKl9RBrz9semfoT+JXT0n1P8AjHX+CX1QdqqF5ecNJXLM4htjKpwWkZ5rnrRpC02h\/XNp456rrDIJpGguaT3dy2Dp5OOF4ZI8ZeHcVjOtENo0plniCDwnr+rZ1+3bvxxx3I+lp3xyxvhjLZv1gLR5fy96wCXubvD9siuEyxsD3SblHPCOL7rlNardRULqGmo4YqV+d0LWANOefBerfa6C1QdTQUkNNETktiYGgqw2V75W4OFshyWmnqblbU2iIi0UEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBaTV\/vSuX0BW7Wk1f70rl9AVfS+cflS\/xly\/Qx+z2L+Zk\/EKQ1HnQx+z2L+Zk\/EKQ1fX+pZGl8Icz0ge8K8\/Qf3CsdGvvFt\/zVf6QPeFefoP7hWOjX3i2\/wCaoj6c\/lH+brURFk1EREBWak4gcVeVmpA6h2VW\/wAZWr7w17XDJB+pa6+3qLTtiqbnVRGUwML2NA5kLaA5By35FZqIIqyndT1VO2aMn3DhwK4orLqzCLOjh9LqG+z6wudS3xnWuLaem3e5aOHL6lK7julJjzjtBWup7HZLdO2oprVDFWMB6prRyz3LYDfE0OeP0jj5QHYrbEbm0j\/Vt+Rel5Z7gcc8F6XZHs5Z9xERSgREQEREBERAREQF5e7Y1zjyaMlel5kbvjcz4QIQQnD0g6+rBUX6nhtnsbpJyyVxHlloOD2qZqCqZXW+mq2e4nibK35HDP8AdcRR9HDKXSdxsIqi2nrHlxA7MnK7W20bbfa6Siactp4WRA\/NAH9lMjKUQ9Nf+P0r\/Pt\/FS8oh6a\/8fpX+fb+K36X6n8s9T2S3F+pZ80L2vEX6lnzQvawn3XgREUJFD2vXFnTJpku9x1OM\/WVK9wrKe3UE1bVyCOngaXvcewBRHrKogufSbpWtppWyUT4OsEo5YyV19HXOp\/yXP1E4qmXGV4l4RlYdBeaC5VVRT0k7ZX0+Os28hlZk36sri1KzES6KTlrsgk5Xk4yByOefYmcE8MoXNBEbicHke5cLt9nAdIWob1bb7R221vhp4pI90s83BrR35XVadxUWSCYXCOuBGXTQuy0n0LTa1u8tFK6OfTEd3p3QFrHHjk\/BPctd0UWK42e11tdUQmkirXl0drydsAzzGUxCMzhIWQ7a1gJPo7Atm33I45WsaHNMZhOMuHWZ7u5bNuNoxyW+hHeWGpKqIi6WQiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgLSav96Vy+gK3a0mr\/elcvoCr6Xzj8qX+MuX6GP2exfzMn4hSGo86GP2fRfzMn4hSGr6\/wBWyNL4Q5npA94V5+g\/uFY6NveLb\/mq\/wBIHvBvP0H9wrHRt7xbf81RH05\/Jj+7LrURFk0EREBUc0OGDyVVw3Ste6+w6RZV22TZUmriYDnsJ4oO22MIxgKoY1vILRX3U9HpyzxVtYS6WVoEUTfdSOxyC1ti6QKC63A2uaGenunUGoFM9mCWehVxCcy63q2A7sDPfhGRsbnA581xtn6Q6G5X3xXMwxyzBzqdg90Q3nkLUxdNNjlqqZoo6zwWorPAm1GzyQ\/Pb9oTEGZSYBgIg5IrIEREBERAREQUzxVVq9QXN1os8tWxuXNIA+srBbXXwsY7qoMOaHDj3\/WrVrNlZth0SLnxW3v4qn\/\/AH608NvfxVP9v5q3HKN8OgRc\/wCGXv4qn+3808MvnxVP9v5pxyb4dAi0Hhl8+Kp\/t\/NeTW3wceppz6M\/mo45N8OhUQdNnCt0oe+4NH\/IUgeF3vBLoqdvcMrldV6Wu2rpLbUyuhabdOJmtz7ohbaVZpO7KlrRPZI8YxG0dwAXpc8a2+bWkQ04J5jP5oK2+ZP6Knx8v5rLjlffDoUXP+GXz4qD7fzTwy9\/FQfb+accm+GwvNrpr3aKm21eTBUMLHYPFfL+oIb1prUXiORziWO6mhaeJ2E8CvpE1V4LMuhgLuzj+a525abqbxqCkvdbS0vhVI3bGM5yunp7W0592Gptv2ltNAaY9jlhYahxkuFSA+okJ5nsC6mTJYQAtGay+bRtgp937wz+aCsv3bDT\/b+a570mZmZbUtER2ZroJeO1vFVEM7eDGjYfdZ5rCFZezw6mnB78\/mnhV8+BTrCemiW3qPLNjglhzsjBB+FxVeqmc4Oczi33GOxYPhV8+BTqnhd7+BTqPSwc7PdDMXB4b5WfK48ws9mAwYGBjktD4Xe\/gU6eGXv4un\/\/AH61pTp9vsrOrudAi5\/wy+fFU\/2\/mnhV+IO2Gm5cyfzVuOVN8OgRcz45uUF4t9HVxRBtTnJaulHFVtWYWicqoiKEiIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgLSav96Vy+gK3a0mr\/elcvoCr6Xzj8qX+MuX6GP2fRfzEn4hSGo86GP2fRfzEn4hSGra\/wBWyNL4Q5npAP8A9g3n6D+4Vjo294lv+ar3SA8R6BvTnchB\/cK30dbxoW3FzC3MeRntCRH\/AM5\/Kc93VoqAoslsqoqZTKGVVwnS1ZbpfNEPp7PSmqrI6iOVsQPEhpOV3WUyhlEd2ptVavpbVdajTL7dW2GUVMVJJKHCqdgZaO4cFbhsusNS6hm1e+2+ILpBQOpYIHODzIeOMn61MGUyo2pyg3ROktUt1XabneLQaaenjmbUVJeP0m4HbwC2Nn0LfYOjWGzyQCKrjvRqnNODujyeP1qYcquU2mVunaWU0bSMFrQMfUriplMqUZVRUymUMqoqZTKGVUVMrjZOkW30upHWe4UlTQ4dtbUzgNjd8hVq1m3sibRHu2OtnbdMTnGfLZ+KMlJghwf8tv4K1q+aKp0nM+CRs0ZezDo3Bw594VuF\/wCgh+jb+C6dCnZhqX7svrHDtVRI4jmscv4Lz1hW+xnuZfWO71Vr3HtWH1hQPy7GTlNhFmWZSO1eTK7sPFWGSggxfvd6A4aXbgdvA4UbU5ZAmMoO\/s5o5zcB3IDtWK121r58\/oxzb2qj5S9rS\/DWk+QP\/anZ4T3ZbpHNw5xw13ufSvTpMNyCsMTEuy\/yiOXchmDZXbmkPcOHco2Iyy+sdjOeCCUnkVih36I4zuzxXnO3hnJPYp2GWZ1hbx55\/wCF4Muwby4kq3iYx+Qwkdq8F4DMvGBywoiqF5kpGXBxOV7dK4N3F3BYbpmsd1Y8t3ZtV5sgDN7SABzDlM1WXQ48DuOCq7\/SViCd2SCNwdxDhyVd5TYMrf6Sm896xd5TeU2IZW896r1h71ibynWFNhnDL6w968uORv3eV3LG6wpv70iiIsxLnKXansDQeIzldmOS4SuOdW2P5Su8HJcet2nDp0xERYtBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQFpNX+9K5fQFbtaTV3vSuf0BV9P5x+VbR\/bMOX6GP2fRfzEn4hSGo86GP2fRfzMn4hSGra\/fUlGnGKxDW321MvdjrLbJwZUR7Cout+kOkW00JoqW7gQMfiICQeSzsUxoopqzWMFqRKJX6f6TwMMvTfvAqmwdKBPC8t+8CllFPLPiEcf3RL4g6UPPLfvAniDpQ88t+8ClpE5ftCOL7ol8QdKHnlv3gT2P9KB53pv3gUtInL9oOL7om9j3Sd57H3gT2PdJ2P\/zY+8CllE5Z8QcUeUSjT3Sf57H3gVfY90neex94FLKJyz4g4o8ol8QdKHnpv3gTxB0oeeW\/eBS0icv2g4vuiXxB0oeeW\/eBPEHSh55b94FLSJy\/aDi+6JfEHSh56b94E8QdKHnofeBS0icv2hPH90S+IelAcfHLSe4yBcL0gUN7pGRs1DWtrah3uIo3biPqC+lFy1PoCwU+oX3vqJJaxxzmWQuaD6AVrp9Tt94hS2hn90P6btetqPS0ktU50VqL2lsT3ccZ7lKkb\/0UXzB+C2GuTt0nUkDg1zOA+VaeJ\/6GH5jfwXZpavLE9sML0jTn3ZhfwQS4Cxy7gvO5a7VN8MrrlTryHDA4rG3BULu3KbIN8NhTESVbWcnOzx+pRNYtfSWOg1Bc7iJKlkNxdTQx8xnjjKk+Ccxzsc3mO1RnbdPXC22nUQnt3jCKrrHSCmA4nJ5hZ2pOV63q3t16SJbJZ6Orq6BhrK7jFGw5Z9ZWfNrc0rbGbhRNNReJhTtYw5EeSBn8FxlHYLtR6bmp6+2SV9FU5NNR85KQ9mSrUek9RR2CySipE9ytlaKkMPHbHww35eCr2j9l4tXy6bUmtKV8N0tIfJSTUFY2AysByeKtV3SX4u6y2U1M6vlpo2uMpBzx71znsV1JdxeLhVwBlVW1rZ2jHNoP\/pb6z6errfqG9V76drqergbHDuGfKAwUiEbqs2o6TaFlmhqqJnXTOIbIx4xtd3LaaK1e7V7bjmjFPJRjgQfdKGtQ2OqslC633KobA+pqOtZNg4aD8ikTolukc9ouFDDTZqKUFprwPJnyokzDg7xqqr8bXqqn1PcKaqgGKSkiadjnZ5HsAUlP1hcrdoyyVPgsdZW1VJ4RUl5xtaBkn5Vx82m75FXX2misxkZcYyyKoc3IY7vV6o0jqGhgoY2ym5U8dEaaWljOHB5B4\/J\/6SKTnKd1XWSdJVDDYbfcaWldJJcS5lOMZO5vAj7VrarWo1PpCtgjc6juFOS6QDgQAsKw6Lu1DR6YE5YyW2yySyQuHudxJXqXR1wn1JeawOa1lbC6MbRgcUmlp7om1W90NrJmobfSUdJHJIykYW1MzwfddnFdl1vFRzoTT190fM23yujdbqjLpnNHHPZxXebxkrTTpOO7O9oz2lldanWrF3hN4V9iu77srrVTrVjbwm8JsN0MnrVTrMlY+8Lzv8pIqtFohaqznVtj+UqQRyUcSOzrGx\/KVI683qYxZ16UxMdhERczUREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBaPV3vSuf0JW8Wk1Z71bkD2wlX0\/nCl\/aXLdDH7Pov5iT8QpEUX9D91t9PoVlPNWRRSsqJNzXvAPEqQvHNs\/j6f7wLTWradScQrp2iI7yzkWD45tn8fT\/eBPHNs\/j6f7wLPjv4X318s5Fg+ObZ\/H0\/3gTxzbP4+n+8Ccd\/Bvr5ZyLB8c2z+Pp\/vAnjm2fx9P94E47+DfXyzkWD45tn8fT\/eBPHNs\/j6f7wJx38G+vlnIsHxzbP4+n+8CeObZ\/H0\/wB4E47+DfXyzkWD45tn8fT\/AHgTxzbP4+n+8Ccd\/Bvr5ZyLB8c2z+Pp\/vAnjm2fx9P94E47+DfXyzkWD45tn8fT\/eBPHNs\/j6f7wJx38G+vlnKiwvHNs\/j6f7wJ46tn8fT\/AHgTZfwjfXyzuxecfasI3q2Af4+n+8C8uvlqbgm4U\/H\/AOQJGnfwbq+Wr1y1x0jV4PHLfxXORSHqYvmN\/BbnWN1t9Tpuop4ayF8ry3DQ8d65xry2OMZ4hoC9PodO2JzDj6i1Mx3ZxkOF56wrF6096dbjtXfsc+6rL60pv3DmsTrvSnXelNiJtVlda7OB2KvXTxsLoZME8HLEE+O1UEoGcFOMi1WeJgxjWCV+w83Z4rz178u3hoJ4As5kelYPWBVE2DkHinFC2+rNdPJI0ASuG0Y4FOtJYAXna1YXWDj6VXreBGeBTjN9Vaugo7pDiupoaksOQJW54K5Ssp6SFtPR00dLEeTYxgfWrXWjv5J1uRjKcZvqzBVSjLRK7aPSvYqC7kerfj3TOBK15kBAB7FXrPSo44N9WWJyXcXvc795zuZXps4A9HesIy5TrBt254KeODfVlmZ2Tl+R2KnWFYgkAVeu9KcZurLK6wp1hWL13pTrvSp2GasrrE60rF670p1vpTYZqyusKoJDuWN1qoJcP3Z4KIqmbVXN2dY2P5SpNHJRZDJu1fZie84UpNOQvG62MXdnTzGOyqIi43SIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiArc8EdTA+GVodG8bXA9oVxE7xPYRxVdCmlqqYyZrIsuLiI5sDKte0fpf4+4\/1CkxFrGtqR7SpOnWfeEZ+0fpf4+4\/1H5J7R+l\/j7j\/UfkpMRT6jU8o4qeEZ+0fpf4+4\/1H5J7R+l\/j7j\/AFH5KTET1Gp5OKnhGftH6X+PuP8AUfkntH6X+PuP9R+SkxE59TycVPCM\/aP0v8fcf6j8k9o\/S\/x9x\/qPyUmInqNTycVPCM\/aP0v8fcf6j8k9o\/S\/x9x\/qPyUmInqNTycVPCM\/aP0v8fcf6j8k9o\/S\/x9x\/qPyUmInqNTycVPCM\/aP0v8fcf6j8k9o\/S\/x9x\/qPyUmInqNTycVPCM\/aP0v8fcf6j8k9o\/S\/x9x\/qPyUmInPqeTip4Rn7R+l\/j7j\/UJ7R+l\/j7j\/UFSYic+p5OKnhGY6D9Lg\/r7if\/APQVX2kNMZ4z3At7uvKktE9Rq+Tip4RBqPom07ZtP1NbTOr5Joi1zR1xPb3LBbqCg6qMAv8AJYBy9Cmp8UcrHMkYHMdwLXDIK1nsZsnm2n9VdGj116fLux1Omi3sikagoO9\/qqvj+gP7z\/VUrexqy+baf1VT2MWTzbT+qtv1KfDP0aKvH1v+E\/1U8fW\/4T\/VUqexiyebaf1VX2MWTzbT+qp\/Up8Ho4RV4+oO9\/qp4+t\/wn+qpV9jFk820\/qp7GLJ5tp\/VT9TnwejhFXj63\/Cd9iePrf8J3qqVPYxZPNtP6qexiyebaf1VH6nPg9HCLPH1v8AhP8AVTx9b\/hP9VSp7GLJ5tp\/VT2MWTzbT+qp\/UvsejhFfj63\/Cf6qePrf8J\/qqVPYxZPNtP6qexiyebaf1U\/UvsejhFXj+3\/AAneqnj+g+G77FKvsYsnm2n9VPYxZPNtP6qfqf8A5PRwirx\/QfDd9ieP6D4bvsUq+xiyebaf1U9jFk820\/qp+p\/+T0cIq8f2\/wCE71U8fW\/4T\/VUq+xiyebaf1VT2MWTzbB6qfqc+D0cIr8fW\/4T\/VTx9b\/hP9VSp7GLJ5tg9VPYxZPNsHqp+pT4PRor8fW\/4T\/VQX+3\/Cf6qlT2MWTzbB6qexiyebaf1U\/Up8Ho4RZ4\/t\/wn+qvPsgt2SC93qqVvYxZPNtP6qp7F7Gf\/wCMp\/VSv9S8wmekhGlmuMNfq+09U122MnJIUwtGFg01ltlJIJKeihjeOTmt4hZwGFw9Rrzq2zh0aWlFIVREWDUREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEXM6u1fDpNlEZoHymsl6qPbyB4c\/tW9fXU9PQNrKqaOCHYHOfI4NaMjPMoMlFg0F5tl0pn1NBcKapgZ7uSKUODflxyVKC92u6db4DcKao6n9Z1Ugds+VBnphayLUVlnuQt0N1o5K0jIgbM0vI+TK1+t9Vx6M0zPeZYHTNjc1gY3mS44CDo0XA6W6RH3TULdP3e3TUNfJSisic8AMdGcY+tdZBf7PUsqXw3OkkbTHExbKP0fy9yDZIsC23q13lr3Wy4U1W1hw4wSB+D6cJSXy1V1bLRUlxpZ6mH9ZFFKHOZ8oCDPRYUF4ttVWPo6evp5alnuomSAuH1Kj7zbI7ky3PuFM2tf7mAygPP1IM3kqrR6k1RbNNW6eesraaOdkZfHA+QB8mOwNzkrXaW1pR3XR1DfLlUQ0Qq3OawSvDckEjHpQdai8xyMljbJG4OY4Za4HIIXpAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERBF\/TK+Omt1qq55ZGQQ1BLtjNx7Fqtcaks99smmTHPNUWCWsZHVubGQSOAw7\/lS9U0lPWxGKqgjmj+DI0EKyLVQtozRNo4BSH\/KDBjPeghKkrrbYtV3Sp0jb3SacgDY7jAwO2PcRjyc9i0dmfGzWF+ks9LNbKWpg4wtyQc9i+jIKCkpafweCmiZERgtDBg\/L3rxBa6GlEghpImCT3eG81FvZMIHr9P0Fu0PRakt1DJFe23SOI1LS4u2E8eHLGF3\/TYJHdGNYyGJ8srpYg0Nbkjyua7LDYwaaOGHY07m5b5I+rvXuSUzROEkTHt7WuGQsuTC+2UdM0XWxadqdR3S9VFddPEXUxMdGGiA7N2RjtyuQu9hoLD0S2O6QU8sYqnx+NXs3F8+Tx3cflU5uc+SDYXM29xHDHcvD5WSQeDvghMQGDG5uWuHoCckJikoRu0NNT3Oub0VGSCoipWPraeJrgwNPaM9uFtLbNpuLSd1GkY3R6tNvL6p4a\/fvxl+c8OeeSleiio6Nm6ipoYGO91hgDnfKVSnpqWkqJaimooIZZD5UjYwC761EahsQj0Y6agq4rNe6KunhvLW1HXB2T1h44zla7SVmZqK4xSXiqq4dSNuzttYQd20ej5cr6DoKCgirJKiGmZHM7mWtwPqWUbZROrW1hpo\/CG8pNvFa1nMM5jD5+qhZmV2qIOkJ0tVeaeVzLbUlrsvZg7duOHdzWNVW6IdFen79XiWart1QXRWwghkrS\/tA4jllfRc9voqiTrJ6Onlfy3PiDj9pCo+20UkDIX0sRiZxawtGArIYWlrkbxpi3V7qM0bpoWuNP8AFnuW4VGtaxoa0BrQMAAclVAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQFQ8iqqjvclRM4ghqz7t3yqjjiMkHj2DvVXe7d8qpxxwC8\/Unu7KxiFGjygZAcdwXAam1\/qPS1c6uq7XRGwsmbDkP8A05z2gZXf+Xx4YI4qDelW9afvrWxW2tln1DTVbGMpBE7a\/HPswracymYj905GVk8EUzGkNlY2QA9gIyhc8gAcR3KzRySy26jklj2SGBge3uOOKyA1oJO7j3KtpzJHaF+k\/WFZywaT9Y5Zy69H4ubU+QiItmYiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiIC8uGQvSKJjMDXStIccBeNpd2YWyLGnsTY3uWE6OWsauGs6vj2rGFptjKnwltpohU\/HdQ3f9uMrebG9ydW3uSNHCeVrfK7kwee1bHq29ydW3uUcJOqx6UnuWWqBobyCqt6VxDKZyIiKyBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQf\/9k=)","22334f8c":"## **Remove features with only One Unique Value.**\n\n---\n### Let\u2019s see **is there any features that contain only one unique value?** If yes, We can remove them because that feature is redundant for all the record.\n","1de25ee4":"###HeatMap of confusion matrix for Test Data.","cabdfd03":"### Single Or Non Unique Value Contaning Data Points are Not usefull for prediction ","d04668b6":"we can see some some column contain single observation so we need to drop them. ","31e9c870":"These Informations Are Not Available When Loan Application is received.","e4cc0624":"The percentage of missing data in many columns are far more than we can work with. So, we'll have to remove columns having a certain percentage of data less than the total data later on","eb0f425d":"###Below columns are the leaks data from the future.so we should  drop it from our dataset.\n* total_pymnt:-Payments received to date for total amount funded.\n* total_pymnt_inv:-Payments received to date for portion of total amount funded by investors.\n* total_rec_prncp:-Principal received to date.\n* total_rec_int:-Interest received to date.\n* total_rec_late_fee:-Late fees received to date.\n* recoveries:-post charge off gross recovery.\n* collection_recovery_fee:-post charge off collection fee.\n* last_pymnt_d:-Last month payment was received.\n* last_pymnt_amnt:-Last total payment amount received.","ce6cede3":"### **ROC_CURVE**","171f0da5":"We can see that emp_length is similar for every intrest or vise versa","9fb80680":"Using weighted SVM because of imbalance in the data.","347d41cb":"**Fully Paid**->Loan has been fully paid off.\n\n**Charged off**->Loan for which there is no longer a reasonable expectation of further payments.\n\n**Does not meet the credit policy. Status:Fully Paid**--> While the loan was paid off, the loan application today would no longer meet the credit policy and wouldn't be approved on to the marketplace.\n\n**Does not meet the credit policy. Status:charged off**->While the loan was charged off, the loan application today would no longer meet the credit policy and wouldn't be approved on to the marketplace.\n\nCurrent->Loan is up to date on current payments.,\n\n**In Grace period**->The loan is past due but still in the grace period of 15 days.\n\n**Late(30-120)**->Loan hasn't been paid in 31 to 120 days (late on the current payment).\n\n**Late(16-30)**->Loan hasn't been paid in 16 to 30 days (late on the current payment).\n\n**Default**->Loan is defaulted on and no payment has been made for more than 121 days.\n","404b9c52":"This clearly is a case of an imbalanced class problem where the value of class is far less than the other. There are cost function based approaches and sampling based approaches for handling this kind of problem which we will use later so that our model doesn't exhibit high bias while trying to predict if a loan will default or not.","a5e7dacf":"### **Droping Column which has missing value more than 90%**","f2b0d4df":"###We have done with Numerical data Analysis.","32b296d5":"# **Baseline models**","1665ddb8":"# **looking for More information**","79ffffd4":"\nThe accuracy came out to be satisfactory for the baseline along with the recall score. However, precision seems to be very good but we can see it predict around 200 defaulter as eligeble for loan which we want to reduce so let's use some another techneque.\n\n\nFor our case, overfitting will be a huge concern. So, I'm using Random Forest as it is known to decrease overfitting by selecting features at random.\n\n","80fb6f9a":"Random Forest, Gradient Boosting and XGB classifier give more than 80% precision and recall\n\nRandom forest gives highest precision of 100% but 77% train accuracy which could be clear case of overfitting(For learning purpose we will try to hypertune the Random forest parameters)\n\nGradient Boosting gives  precision of 95% but 84% train accuracy which is good for our predictiopn.\n\n\n\n","1c80d6d8":"### **Revolving balance**\nIn credit card terms, a revolving balance is the portion of credit card spending that goes unpaid at the end of a billing cycle. The amount can vary, going up or down depending on the amount borrowed and the amount repaid.\n","a84b8b0e":"# **Categorical Data Analysis**","7a2a8a31":"## **Now we will handle Missing value**","1583f56f":":id:-A unique LC assigned ID for the loan listing.\n\n1:member_id:-A unique LC assigned Id for the borrower member.\n\n2:loan_amnt:-The listed amount of the loan applied for by the borrower. If at some point in time, the credit department reduces the loan amount, then it will be reflected in this value.\n\n3:funded_amnt:-The total amount committed to that loan at that point in time.\n\n4:funded_amnt_inv:-The total amount committed by investors for that loan at that point in time.\n\n5:term:-The number of payments on the loan. Values are in months and can be either 36 or 60.\n\n6:int_rate:-Interest Rate on the loan\n\n7:installment:-The monthly payment owed by the borrower if the loan originates.\n\n8:grade:-LC assigned loan grade\n\n9:sub_grade:-LC assigned loan subgrade\n\n10:emp_title:-The job title supplied by the Borrower when applying for the loan.*\n\n11:emp_length:-Employment length in years. Possible values are between 0 and 10 where 0 means less than one year and 10 means ten or more years. \n\n12:home_ownership:-The home ownership status provided by the borrower during registration. Our values are: RENT, OWN, MORTGAGE, OTHER.\n\n13:annual_inc:-The self-reported annual income provided by the borrower during registration.\n\n14:verification_status:-Indicates if income was verified by LC, not verified, or if the income source was verified\n\n15:issue_d:-The month which the loan was funded\n\n16:loan_status:-Current status of the loan\n\n17:pymnt_plan:-Indicates if a payment plan has been put in place for the loan\n\n18:url:-URL for the LC page with listing data.\n\n19:desc:-Loan description provided by the borrower\n\n20:purpose:-A category provided by the borrower for the loan request. \n\n21:title:-The loan title provided by the borrower\n\n22:zip_code:-The first 3 numbers of the zip code provided by the borrower in the loan application.\n23:addr_state:-The state provided by the borrower in the loan application\n24:dti:-A ratio calculated using the borrower\u2019s total monthly debt \npayments on the total debt obligations, excluding mortgage and the requested LC loan, divided by the borrower\u2019s self-reported monthly income.\n\n25:delinq_2yrs:-The number of 30+ days past-due incidences of delinquency in the borrower's credit file for the past 2 years\n\n26:earliest_cr_line:-The month the borrower's earliest reported credit line was opened\n\n27:fico_range_low:-The lower boundary range the borrower\u2019s FICO at loan origination belongs to.\n\n28:fico_range_high:-The upper boundary range the borrower\u2019s FICO at loan origination belongs to.\n\n29:inq_last_6mths:-The number of inquiries in past 6 months (excluding auto and mortgage inquiries)\n\n30:mths_since_last_delinq:-The number of months since the borrower's last delinquency.\n\n31:open_acc:-The number of open credit lines in the borrower's credit file.\n\n32:pub_rec:-Number of derogatory public records\n\n33:revol_bal:-Total credit revolving balance\n\n34:revol_util:-Revolving line utilization rate, or the amount of credit the borrower is using relative to all available revolving credit.\n\n35:total_acc:-The total number of credit lines currently in the borrower's credit file\n\n36:initial_list_status:-The initial listing status of the loan. Possible values are \u2013 W, F\n\n37:out_prncp:-Remaining outstanding principal for total amount funded\n\n38:out_prncp_inv:-Remaining outstanding principal for portion of total amount funded by investors\n\n39:total_pymnt:-Payments received to date for total amount funded\n\n40:total_pymnt_inv:-Payments received to date for portion of total amount funded by investors\n\n41:total_rec_prncp:-Principal received to date\n\n42:total_rec_int:-Interest received to date\n\n43:total_rec_late_fee:-Late fees received to date\n\n44:recoveries:-post charge off gross recovery\n\n45:collection_recovery_fee:-post charge off collection fee\n\n46:last_pymnt_d:-Last month payment was received\n\n47:last_pymnt_amnt:-Last total payment amount received\n\n48:last_credit_pull_d:-The most recent month LC pulled credit for this loan\n\n49:last_fico_range_high:-The upper boundary range the borrower\u2019s last FICO pulled belongs to.\n\n50:last_fico_range_low:-The lower boundary range the borrower\u2019s last FICO pulled belongs to.\n\n51:collections_12_mths_ex_med:-Number of collections in 12 months excluding medical collections\n\n52:policy_code:-publicly available policy_code=1\n\nnew products not publicly available policy_code=2\n\n53:application_type:-Indicates whether the loan is an individual \napplication or a joint application with two co-borrowers\n\n54:acc_now_delinq:-The number of accounts on which the borrower is now delinquent.\n\n55:chargeoff_within_12_mths:-Number of charge-offs within 12 months\n\n56:delinq_amnt:-The past-due amount owed for the accounts on which the \nborrower is now delinquent.\n\n57:pub_rec_bankruptcies:-Number of public record bankruptcies\n\n58:tax_liens:-Number of tax liens\n","00fdfe0c":"**perform sampling techniques** ","bd24bbf6":"### **Let plot Pie and count plot**","698cf13c":"###**Apply Knn imputer to handle the missing value.**","11afe0c4":"# Data PreProcessing","dcd13be9":"## **Feature Importance Graph**\n\n---\n","c1a1fe59":"#Making The Base Line Model","750eeeb4":"### Taking The Average Fico Length Since the are highly Correlated.Interpreting Same thing","4e194346":"Here loan status has nine different possible values! Let\u2019s learn about these unique values to determine the ones that best describe the final outcome of a loan, and also the kind of classification problem we\u2019ll be dealing with. ","f90b971a":"# XG Boost Classifier","7b87a15d":"# **Column Information**","d81d5f73":"# **Reading Dataset and First look**","3ba97252":"We could see that some column contain only single value through out dataset. We could drop them latter.","a0e03bc2":"###We can drop below column as this is not having  any information because it's primary key of columns and  it's unique for all the record\n* member_id:-A unique LC assigned Id for the borrower member.\n\n###We can drop below features because it's not provided by customer and they can be future leak.\n* funded_amnt:-The total amount committed to that loan at that point in time.\n* funded_amnt_inv:-The total amount committed by investors for that loan at that point in time.","22cc1071":"##**Importing Important Library and connecting drive**\n\n---\n\n","91b7504b":"![download.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAWAAAACPCAMAAADz2vGdAAAAwFBMVEUNPGD\/\/\/\/vQCMAPGIANVsAOF0ALlcAPGMALFbxQCIAPF8AMVlheZAHOl\/5+\/zz9vj2QB\/r8PMAKFRJZoAYQmWcqrgqUXE5WnePobDf5erCzNRBYn7K09q2wsyVPkFpPU+JmaniQCZXPVLcQCmtPzpePVBAPVblQCN4jaCfPj6ptsL5QB2xPznZ4OVlfpQ2PVm\/PzMAIE8gPF1Tb4geSWuNPkONPkJzPkpKPVYwU3IAHE4AEEinPzu2Pzd8PknKQC0GnPtYAAAJlElEQVR4nO2ba3ubNhuAcSRRxSAcZPARUjc9xHWDM8dsq7d2+\/\/\/6tURBDGJm5A179Xn\/oKNBBI3svRIYM8DAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfgqMEPaz69AEKewWtXfUGZmv6Ln4QJ4zcCvydIhPUXk4lIz6pNrJdAkPWMfqukh3hmcx\/P1S8DtCb+X28hbdqu1bpBP+GFYVnWxSSdJr8XimTio+3aly\/3y6YUzHaTEaCOIiHVOs9zKiSpixTsM4lBe2Gb+Q4eH1heAdQjdfxPbLR3Sltjdvhu9kwlklmIwHikmfFWFBrE6aMHSryv3tqYIZ3xcDh2zMdQJRzqPuFuyn6oA1fmLJjzB8d352di4Ef7g4Ex+u0JXcXnx4M3wvEs6uX1rwXF2+EizLf6pgwvJBi5QqqUTdwhEIfpZgUhZtv4NBrsYLENyDYIbm9\/0OBjNp+KcLvhZ935frY32wTHjxPtgR\/PQ+mC+M0ni2Xy7DdGS+LvErEPzxreAjQl\/l9u0dulPbrwjphP9KsOeZcp9wlmBthK64jwnBlJgOOfN\/vuD7YW9HHPywYBJQGUzi+jqIQjjUYWaz+iJi9X0ZSdWCGZbIkzNzpD4pbYawRJ5M7auyeViHIoPQBA4ipDBN+kBcweqA6mz2Wy1Y1cq9hl74pECtHXdoeNtMeEgw4cvZophn+TqxExEyHQuWhND9JiuKPHQieUKXqdy3JkElmHky\/3gqTJfqU8L8iThpsVglQXUko1N55GJV+myis9UNeMbrEspIN+nAEZyoAw7GX\/XNCg5kreaqVv2Y1eg4+Lry2OyDT4qDGV1mdlyJ0kCna3MjXg3vxdTWG5c2exz+ZQWTqf1RBzP1abtL7TlX3Egh2AZj0exvnbwkHtdFxK4XqotY0FqwuQAdW9hvGa0EU3vu0Zp7\/WGjiFqwG0WcnxJF8NnAIT7gWnA8ieqUpe4mgrGzb90pOFzUuTZUVyGJ6335zAhmE71j5s7iySGULMkjghe1YCfQM+X9B4JPCdP4ZtBgpHIYwW74NFJNjEwjN3fUJThzc22dm2aJjWDbQ0wbFau69FMFj9xz92j42YLt9UVFZq6\/kL\/o4EhkOpOGA2tuVDfHY4IbzOWRfnr\/SCHY1zc47liGOlVw88RhbzGF6IPPzy9cwV\/Oz8\/1WoRIeLQPZom+9WlC\/SDUFVwHjuBiHa6N07loF3hrdo8RmlS97FHBozTc2l\/HHovBTzf9OERoWk2Ml8R0t1lHoztd8HyfsHJWV7Unwd++39x8\/1YL\/iS+33z\/Bw0\/yw\/fHhNsqjdT41BwiGztrOCUBziwvUjJmK+7uiLAjBG+fUDwvKQYc1OqaPxm\/6gM5JH2LgjBc1fc0wUXWARoVZX6a8LojQC1vssdrYQOwXjk3nCa2vZmBBc7uZvpqxT7jceBHgk9nncLnqos5t7k1N6alRa0K6xgsyC3ea7gaaNKeX9NWGG3w2pbJTwoGO9NA1ZjCvYP9mKN4K2p9cI0C9NjZ7xx+NFBTmcxXcqCmh5CTfq8uusXgue9CM585lYppj3NN4b\/vhf8i9Cl3L7\/ir6+k9tLNPxNJTzSRRgb6dqiLBTcCja5TYwZYjMizWzMSjqjiLQlgizVh8J4YIkV3FMXkVZTJL2AXPYl+J0Y0\/RqmtheXOlBTkcRgseiCHpvGVZdDjaLDAPEmoJ55jZsj\/mdcfAqaIqwTdl62EVWcD+DnK2Sx3XN+3rC8czlSt4IVytKKzhpC9Zd59heDS1OFrxuNlRu42Dzoxh1jEqnCq5GNXNJ+55GuZcRfCCPCLYn0c3vWYJNQqvJESoJXpvgi6sfnCobc1mTYtLZgrPm1fint2DdRVQ9AR8YwbY3bsy+yDiXpMETuohWG3i2YDmfeI\/Qt2YfjIbvL07og03txjvegHkdgs2HVbXw0znItQWbQS42Hmy8Jxd79E2LEqdmdGNvR4dgEywcGeQCPXM69LXurcLeN3X8W8XBNuFBwThs1s6zSwAdgo29xeNhWluwnTKan66JuKVgOzlc1ItgDI1sve4J1g09WLUEF+YS7I3sbc2y\/eLJvRdQHhTMWKTblV1Q3Er2pEuwPUupz1I1vhME+zpvQeWh2BiUghk1k450Z2thZguDxmqaNmfmRLxaz7QTjVAXaGY2WV9LlsPLz4JLhP6U28+36Pab3L5Fwz9UQruLiErqO1h1G31tfG2r3SHYM\/OujIupMua6GZ0kuJpa5IjT3dQudQiFHjZ3bZAP1YSHe9UjI+YI1pOgwZ4TgnemZEfw6ECJmIPr35RaT+lHsH3x5MOJL56MXGJqq50nnFKu5xnOVPmeYN9MhLM9QuNq+fwUwdWToVGW12u3UnDVXwyifL3frzd26XHceOhpjo9W08neluwu9oxWBzIx1Yu8vh4c\/XCY1oR71C67ZPnCGJA\/ry7BrFo0j+p14RMFh0cqoAR3zHdaj+39zf0szeXKQdQ49BUIjviRi4vL7kFOJGybmU8XXDdUyXzhCGbBEXk6bqsFk4O71B+1BDcW3Iv+HjE\/X3D74mK1LNUp2PNXTuZZ\/gOCmfNwKk5cwaKEdcOQPIF5zlQ\/Va4e70t0ficOdo6fl\/29m2Afep7cBzeRYy2j2\/rxRbTx3Mc7RwSL7FUvsfo7M9k6BZt4Vf1kGV3m+v3JFO2aglmQpI6iKJ+aVSH35T+6tm14tPXtjTOCp9OqY8+T\/vx63tVHwRVCn+T24x26U9tPaKgT6vXKZBveR9cEy2fzcRzPF6vSLPORvUq3cdNSHrw1K1QBXi\/mcVzMSp8sVTZ5evVBzJ\/YQeWtHq9vzX59IkrGYbgMfEabguXCEQ43mThvXOTrktv9jYoEyUrkmGcrL2D2qaguL0ywv81lrTZj3tcApzj1xRMzh2hhLw77PCCYO2+JEDfdfKsSRU4ScJm5zla\/eNLKa\/cH+kVpor+ZQLYx4RK18DHxOXVfHmlWNBB15KrkVnkyJ5W1erFXsZ\/LS7+5j2cbiel0PK5+7aOkVewr+\/\/A\/xO+7hM2O\/VW1c489+jxDYZfHRsG54fADyYmNnyxV\/Z+QexihHx9wcYLRa+vkf3qkNJ54UQHY72tKQISnDT\/KDCfQgfRL4Rus2q6W6wD8Ns3DNPJdpVu0tn24EP\/+yIwLCccAX5t\/5gFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgF+D\/wFlogeUnrdfIgAAAABJRU5ErkJggg==)","030df467":"## **Precision - Recall Curve**","97312fd1":"###Confusion Matrix for Test Data.","29b3713d":"### HeatMap of Confusion Matrix for Train Data.","a9803571":"Current status coustemer are treated separately because we don't how they behave so we need to predict thenm by our model.\n\n\n","7b9e50e6":"### Numerous companies from financial indutry often invest considerable resources to improve their predictive models with the aim of having better insights into their customers. Such an interest in model improvement has intensified in recent years mostly because of fast development of machine learning and artificial intelligence. For standard lending institution default predictive model with high performance helps to considerably minimize Credit Loss, resulting in higher revenue and profits. Usually the better predictive model the more efficient is the underwriting policy and collection process. A well-functioning model should distinguish creditworthy customers from those that are credit risks. Often, more-predictive credit-decisioning model can identify a greater number of customers within an institution\u2019s specified risk tolerance, which should expand revenues as well.\n\n### In this project the goal is to increase detection of defaulted loans before the loan is issued\/offered by P2P lending company - Lending Club. Peer-to-peer lending differs from traditional financial institutions like banks or commercial lending companies.\n\n### So, Lending Club is a mediator between investors and borrowers, earning money by charging both. The main Lending Club interest is to attract more clients and maintain protfolio size. The motivation of borrowers is clear, they want to find as cheap capital as possible, so they're seeking for the best offer at the market, which is available for them. In case of investors the motivation is obvious as well. Investors look for high ROI (return of investments), but remembering that returns are proportional to risks, we may formalize saying, that investors look for appropriate returns\/risks ratio. If investors experience losses it may cause churn rate growth.\n\n### The underwriting process for Lending Club looks like this. Borrower applies for the loan, then if he\/she meets all the basic requirements - Lending Club using their scoring model assigns client to respective grade. There are 7 grades and 35 sub-grades. Interest rate is dependent on sub-grade. After that, Lending Club gives access to the loan for investors with information about the loan and the borrower (incl. grade and sub-grade) and investors decide whether or not to invest money in this loan. The lower the grade the higher the interest rate, which means, that investors may take higher risks to gain potentially higher returns.\n\n### Seeking for default rate reduction we can end up with too restrictive underwriting policy which does not neccessary correlate with higher ROI for investors, because we'll not let investors choose risky loans, which means lower interests. For Lending Club it probably means the loss of investors with high risk appetite and borrowers with weak credit history, or in case of Lending Club those who need higher loan amount.","82ab1db2":"## **Evaluation Matrix**","cefd7323":"###Confusion Matrix for Train Data.","86215592":"### **We have done analysis for Categorical variable too.let's remove the column which we have stored in redundant columns.**\n","80f5fa7f":"# **Recomendation**\n\nDataset from a Lending club is an interesting dataset. It is offen very difficult to get the insights of interest rate from Bank. This analysis provides interesting information about the interest rate which we get from Lending club for each person.\n\nThe interest rate which we receive depends on the various factors like FICO score, Homeownership, Purpose of loan, loan amount requested, Annual income, Employee length, Issue month, Previous bankrupcies and Debt to income ratio.\n\nIf a person is wanting to get a good interest rate then he need to focus on above factors before applying for a lending club loan.\n\nFrom the research question, we understood that we need to perform various test and add visalizations to understand the patern of Lending club borrowers data and find the interest rate. It is not a very straight forward method which gets from FICO scores. Also lot of financial terms while dealing with loans.\n","13f74ccd":"# **Choosing the models**\n\nWe are aiming for precision and want to make sure business identifies the right people to give Loan.Random forest performance is stable but it overfits(can be controlled by hyper parameter tuning)\n\nXGBoost and Gradientboosting perform simple interms of F1_score,P & R and consitently perform similar independent of sampling method.\nThree models :\n\n\n1-**Gradientboosting**\n\n2-**Random Forest** for learning purpose and avoiding overfitting\n\n3-**XGBClassifier**","9b3bc8af":"# Support Vector Machine","6a6a5b46":"For Categorical Variabeles Just Taking The Round Value ","7fceceda":"###LendingClub made money by charging borrowers an origination fee and investors a service fee. The size of the origination fee depended on the credit grade and ranges to be 1.1\u20135.0% of the loan amount. The size of the service fee was 1% on all amounts the borrower pays.","537dfadb":"### Changing Object Type feature to Integer type features","a30f4b44":"## Gradient Boosting Classifier","ccb7cc13":"![download.jpg](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxIQEhISExATERUVGBUVFhMYEhcbFxEVGBcXFhoVExYYHCggGB0lGxYVITEhJikrLy8uFyEzODMtNygtLisBCgoKDg0OGhAQGjYlICUvKy0tLS0tLy0tLS0tLSstLS0tLS0rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAJoBSAMBEQACEQEDEQH\/xAAcAAEAAQUBAQAAAAAAAAAAAAAABAECAwUGBwj\/xABLEAABAwICBgUFCwkHBQAAAAABAAIDBBESIQUGEyIxUTJBUmGTFBZUcdIHFyM0QnJzgZGxsyQzVYKSlaGi0RVDU2KUwcJjdLLU8f\/EABsBAQACAwEBAAAAAAAAAAAAAAABBQIDBAYH\/8QAMhEBAAIABAIHCAIDAQEAAAAAAAECAwQRURIVBRMhMVJhcRQiMjNBkaHBsdEjgfA0ov\/aAAwDAQACEQMRAD8A9SXj1mICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgtkkDQXOIa0AkkmwAGZJPULKYiZnSCXnelPdWhY4tgp3TAfLc\/Zh3e0YSSPXZWFOj5mPelpnFhhpfdbaT8JRuaObJg4\/sua371Nuj9rEY0Ol0Zr9o+f+\/2LuzKMH8x3T9RXPfJ4tfozjErLav0\/SNFzV04HPbx+0tXU4k9nCnjhsGOuARwOa1zGnYyXKAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQcp7qE7maOnwm2IxsJ\/wArpGgj6xl9a68lETixqwxO54a1pOdldTLm0SINHzSNe9kMj2x2xuawkMvwxEDLgphE9iJiHMfaiXYe57oqKWVsj6eoqCwgta2NohBHB0kjnAG3G33rlzWJNa6RMQ2Ujt7XtzCbZix6xe\/8VST3t8LlCRAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBBoteKQS0FS0i9mY7fRkSf8Vvy9uHEiWNo1h5DoLQ0tZM2CFt3HMm27G3re7kB\/G4HFXERMy0TMVh7zq9o6m0cyKkY9oe\/E7ecBJO5oGN4be5tlkOAsumtdIc9raz2rNO1VFFLDDKyMTVGPZXiBLiwAm7rbvEAX4krXmKzODbRNLxF4iWRotkBYcl5yZme93wqoSICAgIIMFZNIA5lFUPab2cH0wDhe1wHTgjh1gLvr0dizETGjTOPWF+2qP0fU+JSf+wp5bjeSOvohCjdLTvqC+aGbbOZ+c\/NNFQYdnsw50Z3QbmxzNweCtMPJ4cYcVtVoti24tYlMfoNgqmQ7SfZOhkkMflEub2vjYHY8WMZPOWKxNja62+zYWuvDDHrLad7X\/wBnuFK6bbVDpm1D4muEguY2VZpwzA87IkxgDE4dI4iQsZymDMacKettr3pXkc\/Y0n+1oz+qw5fgbJ6666kpXvlEL5dIQOcx8jS\/yEhwY6Nrh8E11jeVnGyjl+B4Trr7uG05rVV01TPA2UPbG8tDnxsxEZHewgDr5BdOH0Vl7RrMODHz2NS+kIR15rhYksFxcXhtiF7XbfpC98xyU8qyn\/SwnO5r\/oHa8VwJBLGkZFphsWnk4HMHuKmOicrPbDG2fzFZ0n+FPPut7UfhhZcoy2yOY4+8Hn3W9qPwwnKMtscxx94PPut7UfhhOUZbY5jj7wefdb2o\/DCcoy2xzHH3g8+63tR+GE5RltjmOPvB591vaj8MJyjLbHMcfeDz7re1H4YTlGW2OY4+8Hn3W9qPwwnKMtscxx94PPut7UfhhOUZbY5jj7wefdb2o\/DCcoy2xzHH3g8+63tR+GE5RltjmOPvB591vaj8MJyjLbHMcfeHq68e9GICAgICAgICCNpB4bG8kYhYix4G+Wfdmt2Xpx4kQRGrBqzoaLR8VOyAA7dwMr3nffuOcAPV1D19ZJXqcHCiKyqM1i2riVrH1nRm09q2aisoatsoj8mc\/E3tscBk09RuLeola4mIjRNqcVolE1h0VHUVdO+YuvTyCWItI6w0ljr\/ACS5jTz3e8rXNp0mu7q9ni9YvHfDarzMuyBQCAgIAQS9WPisPzT95XrcL4K+kK23fLaLNDk56yOOkmxuDcNVJiv1XrC8XHHoEO9RvwQT5KyM6QibjbfyaU2uOBkiI+0NcR808kGtpKyOSjOF4dirX2sb4sWkC8EDrBYQ8Hsm\/DNB16DU1Hx6n\/7er\/Fo0Hieufx+s+lP3NXdg\/Aqc182Wvn0hM8QB0rneTgNg6PwQBa4WsM82MzN+iFMYcRr5sZx7zp5LK2qfNI+WV5fI83c8gAuIAaMmgAZBoyHUsq1isaQxxL2vbWWFZNYgICAgICAgICAgIPfF88exEBAQEBAQEBBZLGHAtPA5LKl5pbihKfo2kbs4g4BxjJwk9RzAPrsV6fK4\/WYUWhW5jDrbE1mO7thKqYcYteyWjtTW2iBPBT4mMe9of8AJaZAHOF75Nvc53UcLKMeY10Y5hZxHeV5zHrw4lo83ZSdawsWpkICAgBBr31UsdFRiGTZOkmiiL8Adha97gbNdldetwvgr6R\/Ctt3yhaS07WRAwGTFKyqhhM0UDS6WKWF8o+CcSBIC2xztYAi17LNCj6iU1tO20hdsI3vf5FCZSTK9hEp4xNwi2Xegw6L03TzVVVS7Gk2BEppmtbGS6Wm3JnSMtldzxh5tjceCCbo2tL49FzlkQlqKXHI8RNxXFM2QBrrXaLk5DqyQVn0jVvZolzKnZ+V7Nko2LDvGmlnL24hkSYwLcLFBs9OzyMq6YxtY52xqgcby0AbSlucmm5yGWXHiFozGYjBpxTHkzpTjnRyGkdRvKJZZ5Kmz5HF7g2LdBOVhd1+oLkr03NY0irDF6NjEtxTZH97hnpT\/DHtKee28DXymviPe4Z6U7wx7Sc9t4DlNfEe9wz0p\/hj2k57bwHKa+I97hnpT\/DHtJz23gOU18R73DPSneGPaTntvAcpr4j3uGelP8Me0nPbeA5TXxHvcM9Kd4Y9pOe28BymviPe4Z6U\/wAMe0nPbeA5TXxHvcM9Kf4Y9pOe28BymviPe4Z6U7wx7Sc9t4DlNfEe9wz0p\/hj2k57bwHKa+I97hnpTvDHtJz23gOU18R73DPSn+GPaTntvAcpr4j3uGelP8Me0nPbeA5TXxO6VAtxAQEBAQEBAQEE2gqA0EE267q36OzNa14LT6OXHpMzrDWV2u+joenWw+pri8\/YwFW3V2mexxzjUj6slBXUkhkfFGCS8Oe4x2L3gNLXYnZmww2PVZcubzHs88Nu+YTlppmKzandrovc65J5rz+Jeb2m0rSsaRoosEiAgICDn9NaRpYaCkFSJ8LnYmGF+F7XxkuBxYmkcepevwKTakabQqcbEjD1mWjdrTonZCIRVzQJdvtBKNs6axbtHzGYvcbG2Z4ADgLLf1F2j2vDS6fXvRzDiDa5z9lsNo5zHPLA5zhdxluXXcd7jwUdRc9rw2OLXHRDG07GUs7BTljoiGRBzSxpZm7a3ddrnA3vfEVPUXPa8Ni0frbomBwcyKtOFjo42ue1zKeN5GJkDXTEMGTRl1NAFgLKOoue14a7Rut2i4hTsayueIJA+LaSNfs3bJ0IALpScIY9ww8M7pODaI1TGaw5nR22mvjdN9BVfiUiqOk\/lR6x+1hl\/iXKhdggICAgICAgICAgICAgICAgICAgICAgICCNpObBDM\/sxvd9jSf9lswo4r1jzhhiTpSXzjIMgvaS81R7F7lk2KlsSS7JxucyCXtB\/k\/gqLpqvv0t5LLouYjjrG\/6dqqRbBHDvUzWdIlESKEiAgBBgoanZ0tIBC2Z0jtm1rnAAG0j7kkG2TD1L1uF8FfSFbaNZlKkmkYWbSjia1z2sxCUOILjYHDsxfM81s1ljwwjaX0uYJNm3Rk9QLA7SONhab3yuesLKsa\/Vrtbhn4WPRumzNKyN2i6iEOveR8TAxlgTvG\/Xa31pNdPqittZ04XQ+Tx9hn7IWOstmkbHk8fYZ+yE1lMRDT6a+N030FV+JSKs6U+THrH7dGX+JVULsEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQaXXKbBQ1Tv+k5v1u3R966slXix6x5ufNTphWnyeClt7Dr6u\/uXr5jV56Ox1erOtLaKeM4Xuh2IikaMOMvBL8bQTbpEjMjJx9S4+kMt7RSIr3w25LF6i02t9dncQ6z1VYy9JSSMviDZJWDDwBa+5c1uEkkHCXkW4FVM5LAwZ\/zX7doWkZnExI\/x1\/3LvKR944xJgLwxuPC04cVt7Dizte63dZl7Rw17o8mcVvHbPeiHu4KjtMTMzDsju7RQkQAgh6PikdS0T2RmQxSueWgtBwgTR5YiB8oda9bhfBX0j+FbbvlsaqWaYxt8lkjAkjeXOfDYBrg45NkJ6uSzQ0GtmrstRUGRtDDOMLRjfVyxnK+WFhtlzWyloiO2fw0YlJmddPzMNP5mz\/oum\/eFR\/VZ8cb\/AIj+2vqp8P5n+lPM2f8ARdN+8Kj+qcdd\/wAR\/Z1U7f8A1P8ASXonVSaOeF50dBGGvY4vFbO4sAIOINcbOI5FY2tGnf8AhlXDmJ10\/My6bTXxum+gqvxKRVPSfyY9Y\/awy\/xLlQOwQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBBy3uly4dHzDtGJv2yNP8AsrDouuuYr\/tx56dMGfN4\/RVjYLyYcUgyjv0Wm3SPMjqC9VW0V7Xnr4c393uhufc7hjqK18U7RK2eKUODus3bJe44G7LgjrVb0je1cLjrPbErHJ0rN+Ge7R2jdVqvR78dDUufDvF1LIMZ4EgR3c0G5sOLTne7uCrfasHMdmNGk7w7upxMLtw518nZ6FklmiEkkRhOYIOK2XW3G1rrcRmBw+s6cXIXpOtZ93dupjxaO2O1JVe6BAQEGGgrHxU9M2NrHOllkjGJxDW5zPvcAn5FvrXrMH5dfSFbbvlOmrKmMxl8cOFz2MOGR5cMZw3ALADx5rYhB05rBUU8pjjo2zNsDjNVFHmeIwvz+tZVrEx2y1XxJrPZH5YdG6z1EkrWS0bIGG+KTyyF2DIkbozNyAPrUzSN0VxZme2NP9uh\/tGH\/Gj8Rv8AVY6S2cVd1W18RIAljJOQAe25PIC6aSnijdp9NfG6b6Cq\/EpFWdKfJj1j9ujL\/EuVC7BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEGGqpWStLJGNkabXa4Ag2z4FZ0vak61nRjasWjSXnOrWh4I9JVdHNBHK220ixsDsLbhwAv\/AJX\/AMqu81j3tlqYtLafSVVgYda41sO0eikdIzRmm4wxjWw1TC1osLRuflhZy32NHqkssJvOZyc6z2w28EYWYjTul1Wk9c6WCR8Tto5zDZ2FmQNr2uSLrkwejsbFrF47pbMXP4eHaaz3tHS67RFvw0ukC8lxOydG1jQSbBoLgbAWV9TBvWvDMR2KiceszxTM\/pk0d7oEbI2tlZM94uC8Bm8LnCTvDPDa+XG6rMbom1rzNJiI2duF0nWtYi0S7enmEjWvabtcA4HmCLhU16zWZiVtS0WrEwyLFkIMFHTSPp6V0TWOMU0kha55aCLzM6Qa7PfB4dS9Zg\/Lr6Qrbd8ptSyqlMYdDCxrZI3ucJ3ONmuDsm7IXOXMLYhpdZtWJqmcyMg0c9uFovPFK6S4vldjgLclspfRoxMKbTrER\/tqvMap9F0N4E\/trPrI3lr6i20fY8xqn0XQ3gT+2nWRvJ1E7R9knRmp1RFNFI6n0U0Me1xMcMwkABBuwl1g7ldY2vEx9WVMGYnXSP8AUN9pr43TfQVX4lIqjpT5MesftYZf4lyoXYICAgICAgICAgICAgICAgICAgICAgICAgIOC06NlpuieP7xmE9+Ujf9x9iucv7+RvG0q3F93N1ndh91doY\/R0\/XHNx\/Wjf97Fj0Z21xK+TPOdk1nzaXWyMeWVPzz9wKuMj\/AOenopM7\/wCi\/r+mupQGtkBjY8vaA1xveIg3xMsePVn\/APerRzxeIiYmFsMFr3zUwxm2r2HQJvTU\/wBFH\/4BeMzUaY1485ety064NfRPWhvEGCjqpWU9K2Isa6WaSPE9jnBovM++Frmknctx616zB+XX0hW275TJpauIxl8tO9rpGMLW08jXWe7DcOM7gLXvwWxDV6x6y1FPMY4\/IsOFp+GqQx9ze+7y71srWJaMTFms6Rp90XRmuMrpWCd+j44jfE5lYHObkbWHXnYfWpnD21RXG7fe0+7ofOei9Mp\/GZ\/VYcFtmzrabr4dYqR7mtbVwOc4gNaJWkuJyAAvmVHDMJjEpM6RKFpr43TfQVX4lIqzpT5Mesft1Zf4lyoXYICAgICAgICAgICAgICAgICAgICAgICAgIOD1hdtNNUDB8hmI935x3\/FXGX93I3neVbje9mqRH0YfdaOI6Pi63z\/AHFjf+YUdGdkYlvJnnO+sebBrNoKqkrJnsgc9jiHNcLG+6Bz7iu7JZzBrg1ra2kq7OZTFti2tWuuqG3Vur9Gf9rf6rq9vy\/icnsGY8I7VittlTm\/e5ntLGekcv4mUdH48z8L0nQ1O6KnhjdbEyNjXW4Xa0A2PrXmMxeL4trR3TMvR5ek0w61n6QmLS3CDDQUj5KemdGWh0UsklnXs7OZlssx07\/UvWYPy6+kK23fKdPT1MhjD9i1rXsecJeScBxWFxbqWxDW6d1dnqJjIyWmY3C0Wko45HXF\/luzt3LOtoiGq1bTPZMfZr\/M6p9Iov3bCp44\/wClj1dt4+x5m1XpFF+7YU4o\/wCk6u+8fZnodVKiOWN7p6Rwa5riG6Pia4gG9mvGbT3qJtCa4donvj7Njpr43TfQVX4lIqrpP5Mesft25f41yoXYICAgICAgICAgICAgICAgICAgICAgICAgoSpiCXAaoO8t0nV1vGOMbKM\/ygj9VpP66uM3HU5WuF9Z7ZVmW\/y49sT6R2MetH5TpvR8FriECV3cQTLn4TPtWOW\/x5O9t2eN7+YrV6GqhYKoCAgICCNSTyNp6RsbgwyTSMLsIdZvw78ge9gXrMH5dfSFdbvlOqhPEY3GoxgyRsLdk0XDnBpzHDitjFzut+tc1LUGJlVQxNwtdhmjqDJc3zvG0ttlktlKxP0c+LiTWdImI9Wv0Xr+\/as8ortHGLPGI4qrHwNsOJtulh49V1lOFr3RLCuP2+9aPy6P3wtGemN8OX2Fj1V9m32jD8TLS686PleyOOqa573BrW4JN5xNgM224qJw7RGswmMfDmdIlfpr43TfQVX4lIqrpT5Mesft2Zf4lyoXYICAgICAgICAgICAgICAgICAgICAgICAg5n3QKyaOlLIG3fM4RXxAFrXA3IuevJvdiuu\/o7DrbF4rd0drkzl7RTSvfKdqpoQUVMyHIu6Ujh8p5427hkB3ALVm8ecfFm30+jPL4UYWHEOT1DYanSOkK1wthcYWA9Wdsx1ENjYP1iu7OzGHgYeFHq58v72Na8vRFTrAQEBAQWTTNY0ucQGtBcSeAAzJWVazMxCJnRWj0bI+mpbOEUkbttZzC4AvbJdjgHDhtT19S9Xh14axHkrpntSpaGoeWbSaIta9jyGwOaThN7BxlNvsWaEbS+gp55MbK6SBtgNmIYnC467vBOayi2n0a7Umfrp9kLzVqv0pL\/p4PZU8cbMert4p\/H9HmrU\/pSX\/TweynFGx1VvFP4\/plpNW6iORj3aRlkDXBxYYIQHgG5aSG3F+5JtGyYw5ideL+P6X6TfjrGAf3MEgf3GZ8RYPXaB5I7281T9KXjgivnq7cvE66sypHWICAgICAgICAgICAgICAgICDHt28cbeOHpDpcvX3LLhnYHTNF7uaLZHeG6e\/ko4Z2NYVMrRe7mi2ZzG6OZ5Jwzsam1b2hwxcR0efq700nYGytNrOab5jMbw7uacM7GsI9TVOAbsxFJiJGcuG9uyQ12I9yzrSJ11\/jVjNkfy6f\/AAoOOH40ely\/Nce5Z9XTefscUua1z1ek0gGOIgifFdtzUEizrbrxsxY3At9a7snma5eZjtnXycmZy\/XafTRM1Zi0hSsMU5ppwwDCfKHB7G8nkxZjhYrXmZwMW3FSJifRngUxKRw2nWHPQan1tLUmoo54Iy4l5ikmJa6Mm+FxDN5vfYEc102zmFiYfBiRM\/6aoy9qX4qS7ptZObfAwXPC1Uc+eH4LNVs4VN5+zsiZgFbPl8FBnkPyo5nkPgs1HV03n7HFKrK2bK8cAGLCT5STY9Ytsxc910nDpvP2TxSnGZovvNFsjvDdPI8lp4Z2TqxVdQ5oOARvcOLXSYQ0W4khru7q61nWms9v8ImdmqjdUyPvPHTFjbPbCyqdZwGYfM4xDEAbEAADLO\/V35e+Xwve0mZ9Gm8Xt5N4zTk2VoITizH5V0hzHwWa7eY4W0\/Zr6idxunpja0EJvw\/Kulbl8Fmp5jhbT9jqJ3P7em\/wIeOH418rl+a49yjmOFtP2Ooncdp6YXvBCLZH8q6J5H4LJOY4W0\/Y6id1XadmF7wQjDx\/Kuj6\/gslPMcPafsjqJ3WS6TqnizY4Igf7zaukI+azA0HLrLvqK14nSdIj3Y\/TKMCfqwU1MYgA3fxOLpJHv33uIzect45AWyAAAFgAFUYmLOLabXntdFa8MaQyMfJicDG0NHRcHkl3zm4Rh+0rCa10jt\/DLWVjZJsBJiYH3yZtSWkZcX4Ljr+T1KdKa9k\/g1lWSSUBlo2EnpAykBvzTgOLr6hwSK01nW34NZXF8mMAMbgt08ZxA\/Mw25fKUcNdO\/8GsqMkku+8bRa+C0hOPj0hgGDq58VM1p2dv4RrK0SzYL7JmO\/Q2pw2548H8LJw01+L8J1lc+SXctGw36d5CMHDo7hxdfLh9kRWn1n8GsskbnEuu0AX3SHXJFuJFhY36s1ExH0GRYpEBAQEBAQEBAQYvJ2dhvHF0R0u16+9ZcU7o0gdTsN7sacWbt0bxHWeacVtzSFTA03uxpxZHdG8OR5pxW3OGDYM7DeGHojo9n1dycU7nDAIGi1mtGHJu6N0chyTituaQo2nYLWY0Yc22aN0ns8k47bmkHk7OGBvHF0R0u16+9OOdzQNOw3uxpxG53RvHmeacc7miroGG92NN8jdo3hyPMJFpNINgzsN4YeiOj2fV3Jx23NAQMFrMaMOQ3RujkOScU7nDCgp2CwwNGHMbo3TzHJOKdzSDyZlrYG2vithFsXa9fenHbc0gdTsN7sab5ndG8RwJ5lOO25wwqYGm92tN8jujeHJ3NOK25pBsGdhvDD0R0ez6u5OKTQbA0WIa0FuTThG6OQ5Jx2NFG07BazGjDm3dG76uScdtzSDydnYbxxdEdLtevvTjtuaQOp2G92NOI3O6N48zzTjtuaQOgYb3Y04uldo3rc+acdtzSGQCyiZ1SqoBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBB\/9k=)","07789fb3":"## Random Forest Classifier","c3c141c6":"To Avoid Dummy Trap","fa1e98c7":"99% of the bad loans were identified by the model. ","47720fc8":"###As we can see from unique counts  feature tax_liens,acc_now_delinq,delinq_amnt, have only 1 unique value counts so we can drop these columns","b15d5199":"\n### Let's see the trend of all the feature wrt target variable","8b14a053":"### It's clear that the loan status feature has nine different possible values!.So We will make it binary dataset with the help of encoding.If we have any missing value for it we will drop that record. And if the status of loan is current we will not include that record in models.","30afcf85":"As we can see, XGBoost did a great job for getting high precision as well as a high recall. Hence, this model is the best in terms of the 3 models that we evaluated.\n\n\nFor further enhancements to the model, feature engineering could be done. Also a broader term like 'good loan' and 'bad loan' could have been used by encompassing different loan statuses together to get a more balanced counts of classes rather than default\/non-default.\n\nWe can see it penalize all defaulter and give us best Precision - Recall\ncompare to all three.","def89505":"#**Numerical Features Analysis**","ef8cde98":"# **Exploratory Data Analysis(EDA)**","04abdc01":"## Logistic Regression","a136db36":"The density of interest rates follow kind of a Normal distribution with more density on interest rates between 12%-18%.\n\nSo we can see that annaul_inc is a skewd distribution so wee ned impliment outliar treatment on this.\n\nwe can see that intrate, installment and funded amount follow similar type distribution.","4e4e90c9":"We have high precision high recall for our validation set. But still it predict 309 defaulter as eligeble.\n\nit can be useful if we can ignore little bit loss among dfaulter .\n\nlet's try XG Boost .","74a4ab19":"### **Let's check % miss Value for all feature for our Loan df**"}}