{"cell_type":{"edb5785e":"code","23ff3675":"code","8d99e18b":"code","44086132":"code","04211448":"code","9945b562":"code","81873860":"code","64090de5":"code","0d434342":"code","126a9b2d":"code","0ee6bc19":"code","ac6f0960":"code","7b8ac66b":"code","f5527f7c":"code","4c9ead4c":"code","bbe69e96":"code","13270a9b":"code","f8673a8f":"code","db930a70":"code","841c5c4d":"code","28ea697e":"code","6247e889":"code","528f1efc":"code","1b955337":"code","0b6ca578":"code","04dd7bda":"code","5a10ae17":"code","54f2bf94":"code","a8ce4846":"code","f34a1dc2":"code","52c0a5f7":"code","23bf215c":"code","166bda48":"code","6a4c9942":"code","4f554f42":"code","25c6ddc6":"code","dbd4c583":"code","f0a378f6":"code","f9ac3052":"code","5f38a38d":"code","76fdddce":"code","c4ef39e0":"code","5d39dbae":"code","66db183e":"code","dfa33120":"code","496d805f":"code","628f8dc5":"code","8135ebcf":"code","8c96fdca":"code","d32738a2":"code","a1a55c96":"code","c0bbba58":"code","98057c04":"code","f0713e94":"code","6f00f8ac":"code","004eef53":"code","9783c76e":"code","244c2472":"code","7826a963":"code","d5af63d9":"code","be365107":"code","70084b79":"code","9aea470e":"code","dc2e5c3a":"code","686a63a9":"code","6500518c":"code","7b329ed4":"code","2e1ce20d":"markdown","8092b5ab":"markdown","068f40f6":"markdown","7372985b":"markdown","0c7555b4":"markdown","f479e608":"markdown","8bb8f952":"markdown","d02948bd":"markdown","de3beba9":"markdown","30f8cea7":"markdown","f0727f80":"markdown","1a0719e2":"markdown","4a6f1872":"markdown","ac2022b9":"markdown","b33d05cc":"markdown","484abaf2":"markdown","f4af3768":"markdown","ca70f7df":"markdown","0937685a":"markdown","a95b5813":"markdown","9a46cabc":"markdown","7e75d085":"markdown","fac04160":"markdown","cd0a0863":"markdown","ff477af0":"markdown","a34c8e07":"markdown","530665d5":"markdown","40b5b5a0":"markdown","661b7d64":"markdown","37581faa":"markdown","f4ec8e18":"markdown","d560b267":"markdown","5bb5fec5":"markdown","c8429fc6":"markdown"},"source":{"edb5785e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px","23ff3675":"raw_df = pd.read_csv('..\/input\/zomato-mumbai-dataset\/Zomato_Mumbai_Dataset.csv',delimiter='|')","8d99e18b":"raw_df.head()","44086132":"raw_df.shape","04211448":"raw_df.info()","9945b562":"raw_df.describe()","81873860":"# Checking redundunt rows of data\n\nwrong_data = raw_df['PAGE NO'] == 'PAGE NO'\nraw_df[wrong_data]","64090de5":"## Performing Negation of the wrong dataset and then storing the correct data back in the raw_df DataFrame\n## This permamnently remove the wrong data from the original dataframe\n\nraw_df = raw_df[~wrong_data]","0d434342":"# Dropping columns which are not required for further analysis\n\nraw_df.drop(['URL', 'PAGE NO', 'CITY'], axis = 1, inplace=True)","126a9b2d":"raw_df.head()","0ee6bc19":"# Checking for Null records\n\nraw_df.isnull().sum()","ac6f0960":"# Checking for a null row\n\nraw_df[raw_df['PRICE'].isnull()]","7b8ac66b":"# Droping the above row from the dataset\n\nraw_df = raw_df.drop(labels=15080, axis=0)","f5527f7c":"# Replacing the other null records with NA \n\nraw_df.fillna('NA', inplace=True)","4c9ead4c":"# Confirming all the null records are correct \n\nraw_df.isnull().sum()","bbe69e96":"# Checking for text values in the column before converting it to numeric datatype\n\nraw_df['RATING'].value_counts()","13270a9b":"# Replacing the text values with '0'\n\nraw_df['RATING'].replace(to_replace=['-','NEW','Opening'], value='0', inplace=True)","f8673a8f":"# Checking for text values in the column before converting it to numeric datatype\n\nraw_df['VOTES'].value_counts()","db930a70":"# Replacing the text values with '0'\n\nraw_df['VOTES'].replace(to_replace=['-','NEW','Opening'], value='0', inplace=True)","841c5c4d":"# Changing Data Type of the numerical columns\n\nraw_df['PRICE'] = raw_df['PRICE'].astype('int64')\nraw_df['RATING'] = raw_df['RATING'].astype('float64')\nraw_df['VOTES'] = raw_df['VOTES'].astype('int64')","28ea697e":"raw_df.info()","6247e889":"raw_df['TIMING'].value_counts()","528f1efc":"# Splitting the column and storing it in temp_df dataframe \n\ntemp_df = raw_df['TIMING'].str.split(\"(\", n = 1, expand = True)\ntemp_df","1b955337":"# Assigning the columns back to the raw_df dataframe\n\nraw_df['TIMING'] = temp_df[0]\nraw_df['DAYS_OPEN'] = temp_df[1]\nraw_df.head()","0b6ca578":"# Removing the bracket character from Days column\n\nraw_df['DAYS_OPEN'] = raw_df['DAYS_OPEN'].str.replace(')','',regex=True)\nraw_df.head()","04dd7bda":"# Checking for Null records in DAYS_OPEN column\n\nraw_df.isnull().sum()","5a10ae17":"# Replacing the Null values with 'NA'\n\nraw_df.fillna('NA', inplace=True)","54f2bf94":"# Checking info of all the columns\n\nraw_df.info()","a8ce4846":"# Finding those restaurant whose has 0 Rating or Votes\n\nuseless_data = (raw_df['RATING'] == 0.0) | (raw_df['VOTES'] == 0)\nraw_df[useless_data]","f34a1dc2":"## Performing Negation of the useless dataset and then storing the correct data back in the raw_df DataFrame\n## This permamnently remove the wrong data from the original dataframe\n\nraw_df = raw_df[~useless_data]","52c0a5f7":"# Checking the unique values in the column\n\nraw_df['RATING_TYPE'].value_counts()","23bf215c":"# Translating the texts into proper English text\n\nraw_df['RATING_TYPE'].replace(to_replace='Excelente' , value='Excellent', inplace=True)\nraw_df['RATING_TYPE'].replace(to_replace=['Ve\u013emi dobr\u00e9','Bardzo dobrze','Muy Bueno','Velmi dobr\u00e9'] , value='Very Good', inplace=True)\nraw_df['RATING_TYPE'].replace(to_replace=['Skv\u011bl\u00e1 volba','Dobrze','Bueno','Buono','Dobr\u00e9','Bom','Skv\u011bl\u00e9'] , value='Good', inplace=True)\nraw_df['RATING_TYPE'].replace(to_replace=['Priemer','M\u00e9dia','\u00c7ok iyi'] , value='Average', inplace=True)\nraw_df['RATING_TYPE'].replace(to_replace=['Pr\u016fm\u011br','Promedio','Ortalama','Muito Bom','\u0130yi'] , value='Poor', inplace=True)\nraw_df['RATING_TYPE'].replace(to_replace=['Baik','Biasa','Media','Sangat Baik'] , value='Very Poor', inplace=True)","166bda48":"# Checking all the values correctly mapped\n\nraw_df['RATING_TYPE'].value_counts()","6a4c9942":"raw_df['REGION'].value_counts()","4f554f42":"# Removing the irrelevant text from the Region column\n\nraw_df['REGION'] = raw_df['REGION'].str.replace('[a-zA-Z].+-- ','',regex=True)","25c6ddc6":"# Removing the West & East from the Region column\n\nraw_df['REGION'] = raw_df['REGION'].str.replace(' West| west| East| east','',regex=True)","dbd4c583":"raw_df['REGION'].value_counts()","f0a378f6":"# Replacing Small regions with Known region name\n\nraw_df['REGION'] = raw_df['REGION'].str.replace('4 Bungalows|7 Andheri|Azad Nagar|Near Andheri Station|Veera Desai Area|Mahakali','Andheri',regex=True)\nraw_df['REGION'] = raw_df['REGION'].str.replace('Bandra Kurla Complex','Bandra',regex=True)\nraw_df['REGION'] = raw_df['REGION'].str.replace('CBD-Belapur','CBD Belapur',regex=True)\nraw_df['REGION'] = raw_df['REGION'].str.replace('Girgaon Chowpatty','Chowpatty',regex=True)\nraw_df['REGION'] = raw_df['REGION'].str.replace('Dadar Shivaji Park','Dadar',regex=True)\nraw_df['REGION'] = raw_df['REGION'].str.replace('Flea Bazaar Caf\u00e9|Kamala Mills Compound','Lower Parel',regex=True)\nraw_df['REGION'] = raw_df['REGION'].str.replace('Runwal Green','Mulund',regex=True)\nraw_df['REGION'] = raw_df['REGION'].str.replace('Mumbai CST Area','Mumbai Central',regex=True)\nraw_df['REGION'] = raw_df['REGION'].str.replace('Kopar Khairane|Seawoods|Turbhe|Ulwe','Navi Mumbai',regex=True)\nraw_df['REGION'] = raw_df['REGION'].str.replace('New Panvel|Old Panvel','Panvel',regex=True)\nraw_df['REGION'] = raw_df['REGION'].str.replace('Kamothe','Sion',regex=True)\nraw_df['REGION'] = raw_df['REGION'].str.replace('Ghodbunder Road|Majiwada','Thane',regex=True)","f9ac3052":"# Finding all the duplicate rows\n\nraw_df[raw_df.duplicated()]","5f38a38d":"# Dropping all the duplicate rows\n\nraw_df = raw_df.drop_duplicates()","76fdddce":"zomato_df = raw_df.copy()","c4ef39e0":"zomato_df.head()","5d39dbae":"fig = px.histogram(zomato_df, x='CUSINE TYPE', color='CUSINE TYPE', \n             title= 'No. of Restaurants by Cuisine Type', \n             labels={'CUSINE TYPE':'Cuisine Type'})\n\nfig.show()","66db183e":"rating_type_df = zomato_df['RATING_TYPE'].value_counts().reset_index()\nrating_type_df.rename(columns={'index':'RATING TYPE', 'RATING_TYPE':'COUNT OF RESTAURANTS'}, inplace=True)\nrating_type_df","dfa33120":"fig = px.pie(rating_type_df, names='RATING TYPE', values='COUNT OF RESTAURANTS', color='RATING TYPE', \n       title='Percentage of Restaurants by Rating Type').update_traces(textposition='inside', textinfo='percent+label')\n\nfig.show()","496d805f":"seafood_df = zomato_df[zomato_df['CUSINE_CATEGORY'].str.contains('Seafood')]\nseafood_df.sort_values(by='RATING',ascending=False).head(10)","628f8dc5":"foodtruck_df = zomato_df[zomato_df['CUSINE TYPE'] == 'Food Truck']\nfoodtruck_df.sort_values(by='RATING',ascending=False).head(2)","8135ebcf":"# Assuming restaurants having rating above 4.5\n\nhighest_rated_df = zomato_df[zomato_df['RATING'] >= 4.5]\nhighest_rated_df","8c96fdca":"fig = px.histogram(highest_rated_df, x='REGION', color='CUSINE TYPE', \n             title= 'No. of Best Restaurant for each Cuisine Type by Places').update_xaxes(categoryorder=\"total descending\")\n\nfig.show()","d32738a2":"highest_rated_price_df = highest_rated_df.groupby(by=['REGION', 'CUSINE TYPE'])['PRICE'].mean().reset_index()\nhighest_rated_price_df.head()","a1a55c96":"fig = px.scatter(highest_rated_price_df, x=\"REGION\", y=\"PRICE\", color=\"CUSINE TYPE\", symbol=\"CUSINE TYPE\", \n           title=' Avg Price Distibution of High rated restaurant for each Cuisine Type').update_traces(marker_size=10)\n\nfig.show()","c0bbba58":"chinese_df = zomato_df[zomato_df['CUSINE_CATEGORY'].str.contains('Chinese')]\nchinese_df","98057c04":"chinese_rest_df = chinese_df.groupby(by='REGION').agg({'NAME' : 'count', 'PRICE' : 'mean'}).rename(columns= {'NAME' : 'COUNT OF RESTAURANTS'}).reset_index()\nchinese_rest_df = chinese_rest_df.sort_values('COUNT OF RESTAURANTS', ascending=False).head(25)\nchinese_rest_df.head()","f0713e94":"fig = px.bar(chinese_rest_df, x='REGION', y='COUNT OF RESTAURANTS', color='PRICE', title= 'No. of Chinese Restaurant by Places')\n\nfig.show()","6f00f8ac":"price_rating_df = zomato_df.groupby(['CUSINE TYPE', 'RATING'])['PRICE'].mean().reset_index()\nprice_rating_df","004eef53":"fig = px.line(price_rating_df, y=\"PRICE\", x=\"RATING\",color='CUSINE TYPE')\n\nfig.show()","9783c76e":"region_price_df = zomato_df.groupby(['REGION'])['PRICE'].mean().reset_index()\nregion_price_df","244c2472":"fig = px.scatter(region_price_df, x=\"REGION\", y=\"PRICE\").update_traces(marker_size=8)\n\nfig.show()","7826a963":"max_price = zomato_df['PRICE'].max()\none_fourth_price = max_price\/4\none_fourth_price","d5af63d9":"# Finding list of restaurants that have price less than and equal to 1\/4th of the max price i.e Finding Cheap Restaurants\n\naff_rest_df = zomato_df[['NAME', 'PRICE', 'CUSINE_CATEGORY', 'REGION', 'CUSINE TYPE']]\naff_rest_df = aff_rest_df[aff_rest_df['PRICE'] <= 1250]\naff_rest_df.sort_values(by='PRICE', inplace=True)\naff_rest_df","be365107":"# Finding the highest rated list of restaurants\n\nhighrate_rest_df = zomato_df[['NAME', 'PRICE', 'CUSINE_CATEGORY', 'REGION', 'CUSINE TYPE','RATING']]\nhighrate_rest_df = highrate_rest_df[highrate_rest_df['RATING'] >= 4.5]\nhighrate_rest_df.sort_values(by='PRICE', inplace=True)\nhighrate_rest_df","70084b79":"highrate_aff_df = pd.merge(aff_rest_df, highrate_rest_df, how='inner', on=['NAME', 'REGION'])\nhighrate_aff_df = highrate_aff_df[['NAME', 'PRICE_x', 'CUSINE_CATEGORY_x', 'REGION', 'CUSINE TYPE_x']]\nhighrate_aff_df.rename(columns={'NAME':'NAME', 'PRICE_x':'PRICE', 'CUSINE_CATEGORY_x':'CUSINE_CATEGORY', \n                                'REGION':'REGION', 'CUSINE TYPE_x':'CUSINE TYPE'},inplace=True)","9aea470e":"# Affordable Restaurants with low price and high rating \n\nhighrate_aff_df","dc2e5c3a":"mean_votes = zomato_df['VOTES'].mean()\nmean_votes","686a63a9":"# Finding list of restaurants that have Votes greater than and equal to  Mean of Vote\n\nmean_rest_df = zomato_df[['NAME', 'PRICE', 'CUSINE_CATEGORY', 'REGION', 'CUSINE TYPE', 'VOTES']]\nmean_rest_df = mean_rest_df[mean_rest_df['VOTES'] > 177]\nmean_rest_df.sort_values(by='VOTES', inplace=True)\nmean_rest_df","6500518c":"reliable_rest_df = pd.merge(mean_rest_df, highrate_aff_df, how='inner', on=['NAME', 'REGION'])\nreliable_rest_df = reliable_rest_df[['NAME', 'PRICE_x', 'CUSINE_CATEGORY_x', 'REGION', 'CUSINE TYPE_x']]\nreliable_rest_df.rename(columns={'NAME':'NAME', 'PRICE_x':'PRICE', 'CUSINE_CATEGORY_x':'CUSINE_CATEGORY', \n                                'REGION':'REGION', 'CUSINE TYPE_x':'CUSINE TYPE'},inplace=True)","7b329ed4":"reliable_rest_df","2e1ce20d":"#### Q2) What are the percentage of restaurants by Rating Type in Mumbai?","8092b5ab":"<h1><center>Zomato Mumbai Data Analysis Project<\/center><\/h1>","068f40f6":"## 5. Performing Exploratory Data Analysis","7372985b":"First step will be to find the restaurants with average cost 1\/4th the average cost of most expensive restaurant in our dataframe.\n\nLet me explain:-The most expensive restaurant has an average meal cost= 6000. We'll try to stay economical and only pick the restaurants that are 1\/4th of 6000.","0c7555b4":"## 4. Copying the cleaned data into a new DataFrame","f479e608":"First step will be to find the restaurants with Votes greater than Mean of Votes","8bb8f952":"## 4. Cleaning the Dataset","d02948bd":"#### Q4) Which is the best Food Truck in Mumbai?","de3beba9":"#### Q10) Find the list of most Reliable Restaurants?","30f8cea7":"#### Q9) Is there a relation between Region and Price?","f0727f80":"#### Q8) Is there a relation between Price and Rating by each Cuisine Type?","1a0719e2":"![Zomato.png](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/8\/8a\/Zomato_Logo.png)","4a6f1872":"### These are the most reliable, highest rated and affordable restaurants:-\n\nWe obtain this dataframe by simply taking the intersection of highrate_aff_df & mean_rest_df\n\nThis dataframe obtained below shows the restaurants whose:\n\n* Cost is below <b>1250<\/b>\n* Rating is above <b>4.5<\/b>\n* Votes are above <b>177<\/b>","ac2022b9":"#### Q5) Which places have the highest rated restaurant for each Cuisine Type in Mumbai?","b33d05cc":"### e. Removing the restaurant records whose Rating or Votes is 0","484abaf2":"#### Q6) What is the Avg Price Distibution of highest rated restaurant for each Cuisine Type in Mumbai?","f4af3768":"#### Q10) Find the list of Affordable Restaurants?","ca70f7df":"### d. Working with 'Timing' column","0937685a":"#### Q7) Which areas have a large number of Chinese Restaurant Market?","a95b5813":"##### This CSV dataset contains information pertaining to various Zomato restaurants in Mumbai, like restaurant names, cuisine, ratings, votes, location, etc.<br>\n##### This dataset will help you with answering various questions, like which is the highest rated Seafood Restaurant, or which locality has the best Japanese restaurants, and so on.","9a46cabc":"### f. Working on 'RATING_TYPE' Column","7e75d085":"### a. Removing the redundunt rows of data","fac04160":"#### Q3) Which are the Top 10 highest rated Seafood Restaurant in Mumbai?","cd0a0863":"### b. Removing the Null Records","ff477af0":"## 3. Getting Basic Information about the Dataset","a34c8e07":"##### The criteria for Affordable Restaurants would be:-\n\n1) Low Price\n2) High Rated","530665d5":"## 2. Importing the dataset","40b5b5a0":"#### Q1) How many restaurants are in Mumbai for each type of cuisine?","661b7d64":"### h. Removing Duplicate records","37581faa":"## 1. Importing the libraries","f4ec8e18":"##### The criteria for most Reliable Restaurants would be:-\n\n1) Low Price\n2) High Rated\n3) Large No. of Votes","d560b267":"### g. Working on 'REGION' Column","5bb5fec5":"Now, we'll merge the <b>aff_rest_df<\/b> with <b>highrate_rest_df<\/b> to obtain the intersection i.e the list of Affordable Restaurants !!","c8429fc6":"### c. Converting the DataTypes of numerical columns to numeric dataype"}}