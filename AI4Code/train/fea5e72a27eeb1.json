{"cell_type":{"68082004":"code","a91ad736":"code","0f6f161e":"code","398b2efb":"code","50832e48":"code","e9dd29c5":"code","5a030a77":"code","6b0bb494":"code","684f1e84":"code","8924cab2":"code","cc62c638":"code","e4da213f":"code","586b7c73":"code","70b1b7f7":"code","4fa58485":"code","48044668":"code","1edfd850":"code","1cb36c33":"code","2cbc71d4":"code","e52288ca":"code","544ca039":"code","f0e22285":"code","bca5be7f":"code","37de0313":"code","3c5e7db8":"markdown"},"source":{"68082004":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.metrics import log_loss\nfrom sklearn.preprocessing import MinMaxScaler\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers as L\nfrom tensorflow.keras.callbacks import *\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.models import Sequential\n\n","a91ad736":"train_df = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntest_df = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\ntrain_target_df = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\nsample_sub = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')\n\ntarget_cols = train_target_df.columns[1:]\nN_TARGETS = len(target_cols)","0f6f161e":"print(train_df[\"cp_dose\"].unique())\nprint(train_df[\"cp_type\"].unique())","398b2efb":"def preprocess_df(df, target=False):\n    \n    \n    scaler = MinMaxScaler()\n    df[\"cp_time\"]=scaler.fit_transform(df[\"cp_time\"].values.reshape(-1, 1))\n    \n    df[\"cp_dose\"]=(df[\"cp_dose\"]==\"D1\").astype(int)\n    df[\"cp_type\"]=(df[\"cp_type\"]==\"trt_cp\").astype(int)\n    \n    return df","50832e48":"train_df","e9dd29c5":"train_target_df","5a030a77":"test_df","6b0bb494":"x_train = preprocess_df(train_df.drop([\"sig_id\"], axis=1))\ny_train = train_target_df.drop([\"sig_id\"], axis=1)\n\nx_test = preprocess_df(test_df.drop([\"sig_id\"], axis=1))","684f1e84":"sample_sub","8924cab2":"x_train.shape, y_train.shape, x_test.shape","cc62c638":"def get_keras_model(input_dim=875, output_dim=206):\n    \n    model = Sequential()\n    model.add(L.Dense(512, input_dim=875, activation=\"elu\"))\n    model.add(L.BatchNormalization())\n    model.add(L.Dropout(0.5))\n    model.add(L.Dense(256, activation=\"elu\"))\n    model.add(L.BatchNormalization())\n    model.add(L.Dropout(0.3))\n    model.add(L.Dense(256, activation=\"elu\"))\n    model.add(L.BatchNormalization())\n    model.add(L.Dropout(0.3))\n    model.add(L.Dense(256, activation=\"elu\"))\n    model.add(L.BatchNormalization())\n    model.add(L.Dropout(0.3))\n    model.add(L.Dense(206, activation=\"sigmoid\"))\n    \n    return model","e4da213f":"model = get_keras_model()\nmodel.summary()","586b7c73":"model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3),\n             loss=\"binary_crossentropy\",\n             metrics=[\"accuracy\", \"AUC\"])","70b1b7f7":"def multi_log_loss(y_true, y_pred):\n    losses = []\n    for col in y_true.columns:\n        losses.append(log_loss(y_true.loc[:, col], y_pred.loc[:, col]))\n    return np.mean(losses)","4fa58485":"#https:\/\/github.com\/bckenstler\/CLR\n\nclass CyclicLR(Callback):\n\n    def __init__(self, base_lr=0.001, max_lr=0.006, step_size=2000., mode='triangular',\n                 gamma=1., scale_fn=None, scale_mode='cycle'):\n        super(CyclicLR, self).__init__()\n\n        self.base_lr = base_lr\n        self.max_lr = max_lr\n        self.step_size = step_size\n        self.mode = mode\n        self.gamma = gamma\n        if scale_fn == None:\n            if self.mode == 'triangular':\n                self.scale_fn = lambda x: 1.\n                self.scale_mode = 'cycle'\n            elif self.mode == 'triangular2':\n                self.scale_fn = lambda x: 1\/(2.**(x-1))\n                self.scale_mode = 'cycle'\n            elif self.mode == 'exp_range':\n                self.scale_fn = lambda x: gamma**(x)\n                self.scale_mode = 'iterations'\n        else:\n            self.scale_fn = scale_fn\n            self.scale_mode = scale_mode\n        self.clr_iterations = 0.\n        self.trn_iterations = 0.\n        self.history = {}\n\n        self._reset()\n\n    def _reset(self, new_base_lr=None, new_max_lr=None,\n               new_step_size=None):\n        \"\"\"Resets cycle iterations.\n        Optional boundary\/step size adjustment.\n        \"\"\"\n        if new_base_lr != None:\n            self.base_lr = new_base_lr\n        if new_max_lr != None:\n            self.max_lr = new_max_lr\n        if new_step_size != None:\n            self.step_size = new_step_size\n        self.clr_iterations = 0.\n        \n    def clr(self):\n        cycle = np.floor(1+self.clr_iterations\/(2*self.step_size))\n        x = np.abs(self.clr_iterations\/self.step_size - 2*cycle + 1)\n        if self.scale_mode == 'cycle':\n            return self.base_lr + (self.max_lr-self.base_lr)*np.maximum(0, (1-x))*self.scale_fn(cycle)\n        else:\n            return self.base_lr + (self.max_lr-self.base_lr)*np.maximum(0, (1-x))*self.scale_fn(self.clr_iterations)\n        \n    def on_train_begin(self, logs={}):\n        logs = logs or {}\n\n        if self.clr_iterations == 0:\n            K.set_value(self.model.optimizer.lr, self.base_lr)\n        else:\n            K.set_value(self.model.optimizer.lr, self.clr())        \n            \n    def on_batch_end(self, epoch, logs=None):\n        \n        logs = logs or {}\n        self.trn_iterations += 1\n        self.clr_iterations += 1\n\n        self.history.setdefault('lr', []).append(K.get_value(self.model.optimizer.lr))\n        self.history.setdefault('iterations', []).append(self.trn_iterations)\n\n        for k, v in logs.items():\n            self.history.setdefault(k, []).append(v)\n        \n        K.set_value(self.model.optimizer.lr, self.clr())","48044668":"clr = CyclicLR(base_lr=0.003, max_lr=0.004,\n                    step_size=745, mode='exp_range',\n                    gamma=0.99994)","1edfd850":"hist = model.fit(x_train, y_train, epochs=10, callbacks=[clr])","1cb36c33":"#TODO: Cross validation","2cbc71d4":"y_train.values.shape","e52288ca":"ps = model.predict(x_train); ps.shape","544ca039":"ps_df = y_train.copy()\nps_df.iloc[:, : ] = ps\n\ntr_score = multi_log_loss(y_train, ps_df)\n\nprint(f\"Train score: {tr_score}\")","f0e22285":"test_df","bca5be7f":"test_preds = sample_sub.copy()\ntest_preds[target_cols] = 0\n\ntest_preds.loc[:,target_cols] = model.predict(x_test)\n\ntest_preds.loc[x_test['cp_type'] == 0, target_cols] = 0\ntest_preds.to_csv('submission.csv', index=False)","37de0313":"test_preds","3c5e7db8":"Binary targets"}}