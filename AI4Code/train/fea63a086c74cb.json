{"cell_type":{"e6d4f9d5":"code","ad3606b4":"code","6cffd2f4":"code","8c41ca5b":"code","a5f87e32":"code","4c2ed1ba":"code","f9e30fe1":"code","74a42d00":"code","0af0472a":"code","5592d00c":"code","e647a1ab":"code","7bc629bf":"code","3db34a0d":"code","edb34a33":"code","578a00bd":"code","6cbf5112":"code","3c0f2df9":"code","b21a589d":"code","3cd6c5dc":"code","ea8eeceb":"code","413d8409":"code","5c158cd7":"code","968e9195":"code","11c0d67a":"code","3aac00ac":"code","be571e02":"code","0fc867f7":"code","b9c03851":"code","3defab16":"code","aa306013":"code","32d5fc22":"code","0a19a71c":"code","f184f76b":"code","9cc474e0":"code","e7232c9d":"code","4220cd4c":"code","456548de":"code","88959121":"code","baea0581":"code","fc4f9ab7":"code","0e7af3b4":"code","a8528544":"code","fe25f468":"code","1e4f35d0":"code","e106cdf2":"code","af907fb2":"code","28ffb015":"code","db5f3db8":"code","e455a787":"code","0410caf5":"code","d9f95f55":"code","2cf34337":"code","c0be316b":"code","2fc1316b":"code","89488ba3":"code","9772b102":"code","883ffc82":"code","f129c8b4":"code","927cbb79":"code","a3dbc2da":"code","9477325d":"code","a4eea440":"code","3ceb7e55":"code","a882a3f2":"code","1107db71":"code","78987ad5":"code","1532ca35":"code","42976b07":"code","7107d351":"code","5884f15b":"code","6158cf09":"code","cbff1ce7":"code","61b0593f":"code","68609a6a":"code","0dc70991":"code","894921a0":"code","d014227d":"code","338c697a":"code","6fb1e499":"code","f02338dd":"code","def1901c":"code","0f92c30b":"code","c72fc941":"code","b9a11bd5":"code","023d6f74":"code","8659a69f":"code","7598dd87":"markdown","d35e03e2":"markdown","9c8c9434":"markdown","34af5f6e":"markdown","152c5ed4":"markdown","fc045812":"markdown","bc029612":"markdown","7447e920":"markdown","0b79ad79":"markdown","4a96f1cc":"markdown","3d3ec7d1":"markdown","c68b2fbd":"markdown","60d30034":"markdown","9caf8c7a":"markdown","a213a97b":"markdown","2d9592c0":"markdown","5173b5c3":"markdown","ca81b25a":"markdown","1efba2b8":"markdown","8d153b6d":"markdown","549bfdb0":"markdown","f81e10ff":"markdown","171316bc":"markdown","16ceb6ef":"markdown","314c9ad0":"markdown","e32eee33":"markdown","dc9adfbe":"markdown","5c001527":"markdown","cda3179c":"markdown","4e0b721c":"markdown","4f035397":"markdown","85222bfc":"markdown","cbd14f17":"markdown","d5276327":"markdown","0ffb9e21":"markdown","1a98598c":"markdown","4521fe9c":"markdown","56955f6c":"markdown","295f168b":"markdown","69c53003":"markdown","e3342bda":"markdown","197ec311":"markdown","651ba3de":"markdown","353e8016":"markdown","c83fd0bd":"markdown","efb93aac":"markdown","c91ab9ad":"markdown","44cb158a":"markdown","8ce4d5d9":"markdown","a5f81825":"markdown","c3045fd3":"markdown","d22df7ea":"markdown","b3bc474a":"markdown","1c719fd7":"markdown","59553d67":"markdown","17258708":"markdown"},"source":{"e6d4f9d5":"# Importing libraries\nfrom scipy import stats\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\n\nsns.set()","ad3606b4":"# Removing the display of warning messages\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6cffd2f4":"# Given a column data, the function returns min, max and skewness of the data\ndef min_max_skew(series):\n    cmin = np.around(np.min(series), 2)\n    cmax = np.around(np.max(series), 2)\n    skew = np.around(stats.skew(series), 2)\n    \n    return cmin, cmax, skew","8c41ca5b":"'''\nGiven a column data, the function applies different types of transformations to it and returns min,\nmax and skewness for each transformation.\n\nThe following transformations are applied here,\n    1. Log\n    2. Square root\n    3. Reciprocal\n    4. Box-Cox\n'''\n\ndef transform_skew(series):\n    # Given Series\n    series_min, series_max, series_skew = min_max_skew(series)\n    \n    # Log transformation\n    log_series = np.log(series)\n    log_min, log_max, log_skew = min_max_skew(log_series)\n    \n    # Square root transformation\n    root_series = np.sqrt(series)\n    root_min, root_max, root_skew = min_max_skew(root_series)\n    \n    # Reciprocal transformation\n    reciprocal_series = 1 \/ series\n    reciprocal_min, reciprocal_max, reciprocal_skew = min_max_skew(reciprocal_series)\n    \n    # Box-Cox transformation\n    boxcox_series = stats.boxcox(series)[0]\n    boxcox_min, boxcox_max, boxcox_skew = min_max_skew(boxcox_series)\n    \n    # Building Min, Max and Transformed values DataFrame\n    df_min_max_skew = pd.DataFrame({\n        'Tranformation': ['Given Series', 'Log', 'Square root', 'Reciprocal', 'Box-Cox'],\n        'Min': [series_min, log_min, root_min, reciprocal_min, boxcox_min],\n        'Max': [series_max, log_max, root_max, reciprocal_max, boxcox_max],\n        'Skew': [series_skew, log_skew, root_skew, reciprocal_skew, boxcox_skew]\n    })\n    \n    return df_min_max_skew","a5f87e32":"# Importing dataset and exploring first 5 rows\ndataset = pd.read_csv('..\/input\/diamonds\/diamonds.csv')\ndataset.head()","4c2ed1ba":"# Exploring last 5 rows\ndataset.tail()","f9e30fe1":"# Exploring 10 random rows\ndataset.sample(10)","74a42d00":"# Number of rows and columns\ndataset.shape","0af0472a":"# Info of columns\ndataset.info()","5592d00c":"# Deleting ID, Depth column\n# Keeping backups of the original dataset\noriginal_dataset = dataset.copy()\nall_columns_dataset = dataset.copy()\ndataset = dataset.drop(columns=['Unnamed: 0', 'depth'])","e647a1ab":"# Present columns\nprint(dataset.columns.values)","7bc629bf":"# Renaming columns\ndataset = dataset.rename(columns={'carat': 'Carat', 'cut': 'Cut', 'color': 'Color',\n                                  'clarity': 'Clarity', 'table': 'Table', 'price': 'Price',\n                                  'x': 'Length', 'y': 'Width', 'z': 'Height'})","3db34a0d":"# Displaying first 5 rows of the dataset again\ndataset.head()","edb34a33":"# Retrieving invalid rows\ndf_invalid_rows = dataset[(dataset['Carat']==0) | (dataset['Table']==0) | (dataset['Price']==0) |\n                          (dataset['Length']==0) | (dataset['Width']==0) | (dataset['Height']==0)]\ndf_invalid_rows","578a00bd":"# Number of invalid rows\ndf_invalid_rows.shape[0]","6cbf5112":"# Deleting invalid rows\ndataset = dataset.drop(index=df_invalid_rows.index)\nall_columns_dataset = all_columns_dataset.drop(index=df_invalid_rows.index)","3c0f2df9":"# Resetting index\ndataset = dataset.reset_index(drop=True)\nall_columns_dataset = all_columns_dataset.reset_index(drop=True)","b21a589d":"# Rearranging the order of columns: Dependent variable - Categorical variables - Numerical variables\ndataset = dataset[['Price', 'Cut', 'Color', 'Clarity',\n                   'Carat', 'Length', 'Width', 'Height', 'Table']]\nprint(dataset.columns.values)","3cd6c5dc":"dataset.describe(include='all')","ea8eeceb":"dataset['Cut'].value_counts()","413d8409":"dataset['Color'].value_counts()","5c158cd7":"dataset['Clarity'].value_counts()","968e9195":"# Calculating skewness of all variables\ndataset.skew()","11c0d67a":"# Plotting histogram for the normally distributed Length column\nsns.displot(dataset['Length'], kde=True)\nplt.show()","3aac00ac":"# Histogram before transformation\nsns.displot(dataset['Table'], kde=True)\nplt.show()","be571e02":"# Performing different transformations\ntransform_skew(dataset['Table'])","0fc867f7":"# Plotting the histogram after log transformation\nsns.displot(np.log(dataset['Table']), kde=True)\nplt.show()","b9c03851":"# Transforming and storing Table variable in a new column\ndataset['Table_transformed'] = np.log(dataset['Table'])","3defab16":"# Deleting Table column\ndataset = dataset.drop(columns=['Table'])","aa306013":"# Histogram before transformation\nsns.displot(dataset['Price'], kde=True)\nplt.show()","32d5fc22":"# Performing different transformations\ntransform_skew(dataset['Price'])","0a19a71c":"# Plotting the histogram after box-cox transformation\nsns.displot(stats.boxcox(dataset['Price'])[0], kde=True)\nplt.show()","f184f76b":"# Transforming and storing Price variable in a new column\ndataset['Price_transformed'] = stats.boxcox(dataset['Price'])[0]","9cc474e0":"# Deleting Price column\ndataset = dataset.drop(columns=['Price'])","e7232c9d":"# Histogram before transformation\nsns.displot(dataset['Carat'], kde=True)\nplt.show()","4220cd4c":"# Performing different transformations\ntransform_skew(dataset['Carat'])","456548de":"# Plotting the histogram after square root transformation\nsns.displot(np.sqrt(dataset['Carat']), kde=True)\nplt.show()","88959121":"# Transforming and storing Carat variable in a new column\ndataset['Carat_transformed'] = np.sqrt(dataset['Carat'])","baea0581":"# Deleting Carat column\ndataset = dataset.drop(columns=['Carat'])","fc4f9ab7":"# Histogram before transformation\nsns.displot(dataset['Width'], kde=True)\nplt.show()","0e7af3b4":"# Performing different transformations\ntransform_skew(dataset['Width'])","a8528544":"# Plotting the histogram after square root transformation\nsns.displot(np.sqrt(dataset['Width']), kde=True)\nplt.show()","fe25f468":"# Transforming and storing Width variable in a new column\ndataset['Width_transformed'] = np.sqrt(dataset['Width'])","1e4f35d0":"# Deleting Width column\ndataset = dataset.drop(columns=['Width'])","e106cdf2":"# Histogram before transformation\nsns.displot(dataset['Height'], kde=True)\nplt.show()","af907fb2":"# Performing different transformations\ntransform_skew(dataset['Height'])","28ffb015":"# Plotting the histogram after box-cox transformation\nsns.displot(stats.boxcox(dataset['Height'])[0], kde=True)\nplt.show()","db5f3db8":"# Transforming and storing Height variable in a new column\ndataset['Height_transformed'] = stats.boxcox(dataset['Height'])[0]","e455a787":"# Deleting Height column\ndataset = dataset.drop(columns=['Height'])","0410caf5":"dataset.skew()","d9f95f55":"# Displaying first 5 rows again\ndataset.head()","2cf34337":"# Displaying columns names\nprint(dataset.columns.values)","c0be316b":"# Rearranging the order of columns: Dependent variable - Categorical variables - Numerical variables\ndataset = dataset[['Price_transformed', 'Cut', 'Color', 'Clarity', 'Carat_transformed',\n                   'Length', 'Width_transformed', 'Height_transformed', 'Table_transformed']]","2fc1316b":"# First 5 rows\ndataset.head()","89488ba3":"df_corr = dataset.corr()\nnp.around(df_corr, 2)","9772b102":"# Deleting Length, Width_transformed, Height_transformed and Table_transformed columns\ndataset = dataset.drop(columns=['Length', 'Width_transformed',\n                                'Height_transformed', 'Table_transformed'])","883ffc82":"# Displaying current dataset\ndataset.head()","f129c8b4":"# Scatter plot between number of carats and price of diamonds\nplt.figure(figsize=(12,8))\nplt.scatter(dataset['Carat_transformed'],\n            dataset['Price_transformed'],\n            alpha=0.6)\nplt.title('Relationship between Carat and Price', fontsize=14, weight='bold')\nplt.xlabel('Carat', weight='bold')\nplt.ylabel('Price', weight='bold')\nplt.show()","927cbb79":"# Skewness of Carat_transformed variable before trimming\nskew = stats.skew(dataset['Carat_transformed'])\nnp.around(skew, 2)","a3dbc2da":"# Finding the value for Carat at 99th percentile\npercentile_result1 = dataset['Carat_transformed'].quantile(0.99)\npercentile_result2 = all_columns_dataset['carat'].quantile(0.99)","9477325d":"# Trimming the dataset\ndataset = dataset[dataset['Carat_transformed'] < percentile_result1]\nall_columns_dataset = all_columns_dataset[all_columns_dataset['carat'] < percentile_result2]","a4eea440":"# Resetting index\ndataset = dataset.reset_index(drop=True)\nall_columns_dataset = all_columns_dataset.reset_index(drop=True)","3ceb7e55":"# Skewness of Carat_transformed variable after trimming\nskew = stats.skew(dataset['Carat_transformed'])\nnp.around(skew, 2)","a882a3f2":"# Scatter plot between number of carats and price of diamonds after removing outliers\nplt.figure(figsize=(12,8))\nplt.scatter(dataset['Carat_transformed'],\n            dataset['Price_transformed'],\n            alpha=0.6)\nplt.title('Relationship between Carat and Price', fontsize=14, weight='bold')\nplt.xlabel('Carat', weight='bold')\nplt.ylabel('Price', weight='bold')\nplt.show()","1107db71":"# Unique diamond Cut values\nprint(dataset['Cut'].unique())","78987ad5":"# Performing ANOVA\nF, p = stats.f_oneway(dataset[dataset['Cut'] == 'Ideal']['Carat_transformed'],\n                      dataset[dataset['Cut'] == 'Premium']['Carat_transformed'],\n                      dataset[dataset['Cut'] == 'Good']['Carat_transformed'],\n                      dataset[dataset['Cut'] == 'Very Good']['Carat_transformed'],\n                      dataset[dataset['Cut'] == 'Fair']['Carat_transformed'])","1532ca35":"# F-statistic\nnp.around(F, 2)","42976b07":"# p-value\nnp.around(p, 3)","7107d351":"# Deleting diamond's Cut column\ndataset = dataset.drop(columns=['Cut'])","5884f15b":"# Unique diamond colors\nprint(dataset['Color'].unique())","6158cf09":"# Performing ANOVA\nF, p = stats.f_oneway(dataset[dataset['Color'] == 'E']['Carat_transformed'],\n                      dataset[dataset['Color'] == 'I']['Carat_transformed'],\n                      dataset[dataset['Color'] == 'J']['Carat_transformed'],\n                      dataset[dataset['Color'] == 'H']['Carat_transformed'],\n                      dataset[dataset['Color'] == 'F']['Carat_transformed'],\n                      dataset[dataset['Color'] == 'G']['Carat_transformed'],\n                      dataset[dataset['Color'] == 'D']['Carat_transformed'])","cbff1ce7":"# F-statistic\nnp.around(F, 2)","61b0593f":"# p-value\nnp.around(p, 3)","68609a6a":"# Deleting diamond Color column\ndataset = dataset.drop(columns=['Color'])","0dc70991":"# Diamond clarity unique values\nprint(dataset['Clarity'].unique())","894921a0":"# Performing ANOVA\nF, p = stats.f_oneway(dataset[dataset['Clarity'] == 'SI2']['Carat_transformed'],\n                      dataset[dataset['Clarity'] == 'SI1']['Carat_transformed'],\n                      dataset[dataset['Clarity'] == 'VS1']['Carat_transformed'],\n                      dataset[dataset['Clarity'] == 'VS2']['Carat_transformed'],\n                      dataset[dataset['Clarity'] == 'VVS2']['Carat_transformed'],\n                      dataset[dataset['Clarity'] == 'VVS1']['Carat_transformed'],\n                      dataset[dataset['Clarity'] == 'I1']['Carat_transformed'],\n                      dataset[dataset['Clarity'] == 'IF']['Carat_transformed'])","d014227d":"# F-statistic\nnp.around(F, 2)","338c697a":"# p-value\nnp.around(p, 3)","6fb1e499":"# Deleting Clarity column\ndataset = dataset.drop(columns=['Clarity'])","f02338dd":"# Present dataset\ndataset.head()","def1901c":"# Declaring independent and dependent variables\ny = dataset['Price_transformed']\nx1 = dataset['Carat_transformed']","0f92c30b":"# Adding constant x0 for first coefficient (i.e. intercept)\nx = sm.add_constant(x1)","c72fc941":"# Preparing for regression\nprep = sm.OLS(y,x)","b9a11bd5":"# Performing Linear Regression\nreg = prep.fit()","023d6f74":"# Regression summary\nreg.summary()","8659a69f":"# Plotting the Regression line\ny_hat = 4.059 + 2.3244 * x1\nplt.figure(figsize=(12,8))\nplt.scatter(dataset['Carat_transformed'], dataset['Price_transformed'])\nplt.title('Relationship between Carat and Price', fontsize=14, weight='bold')\nplt.xlabel('Carat', weight='bold')\nplt.ylabel('Price', weight='bold')\nplt.plot(x1, y_hat, color='orange', label='model')\nplt.show()","7598dd87":"Observations:\n1. The color with grade 'G' is the most frequently occuring diamond color.\n2. The colors present are as per the description of the data.","d35e03e2":"#### 2. Carat and Color","9c8c9434":"# Simple Linear Regression","34af5f6e":"All the numerical variables are now normally distributed. So we're good to proceed. :)","152c5ed4":"Observation: For numeric variables, *in all of the cases*, the difference between 75th percentile and max is large. This indicates right skewness.","fc045812":"#### Table variable","bc029612":"Regression Results Conclusions:\n1. The R-squared is 0.912, this means the predictive power of our model is accurate.\n2. The p-value of F-statistic is significant. This means our overall model is significant.\n3. The p-value of the *Carat_transformed* variable is significant. This means *Carat_transformed* is in fact a significant variable for predicting diamond price!","7447e920":"#### Diamond Cut","0b79ad79":"With this we have deleted all the three categorical variables (Cut, Color, Clarity) as they were introducing multicollinearity into the dataset.","4a96f1cc":"**Regression equation:**<br\/>\ny_hat = 4.059 + 2.3244 * Carat_transformed","3d3ec7d1":"Observations:\n1. Carat, Length, Width and Height columns are highly correlated with one-another. This can be explained by the fact that the number of carats of a diamond increases as its size (length, width and height) increases.\n\n2. If we pick one column among the above-mentioned 4 columns, we can predict the other 3! Hence, we can keep one of these variables and drop the rest. Let's keep the Carat column and delete Length, Width and Height columns.\n\n3. The Table column doesn't have a strong explanatory power on the dependent variable Price. Hence we will drop this column too.","c68b2fbd":"## Checking invalid rows","60d30034":"### Univariate Analysis - Numerical Variables","9caf8c7a":"**To Do:** Next, we will transform moderately and highly skewed variables into normal distributions.\n\nFor this, we will apply the following transformations for each of the skewed variables and choose the best one among them.\n1. Log\n2. Square root\n3. Reciprocal\n4. Box-Cox","a213a97b":"Observations:\n1. The 'SI1' clarity is the most frequently present clarity of diamonds.\n2. The clarity values present are as per the description of the data.","2d9592c0":"#### Price column","5173b5c3":"Observing min, max and skew values, the **Log transformation** seems to be the best fit.","ca81b25a":"### Exploring relationship between categorical and numerical variables","1efba2b8":"**Conclusion:** In this notebook, we have performed EDA and Linear Regression on the diamonds dataset using the Statsmodels module. Given the number of carats of a diamond, we can now predict its price! Hope you enjoyed going through the notebook!","8d153b6d":"#### 3. Carat and Clarity","549bfdb0":"Observing min, max and skew values, the **Square root transformation** seems to be the best fit.","f81e10ff":"#### Diamond Clarity","171316bc":"### Univariate Analysis - Categorical Variables","16ceb6ef":"#### Height variable","314c9ad0":"#### 1. Carat and Cut","e32eee33":"There are a total of 20 invalid rows.","dc9adfbe":"Conclusion: After removing values above 99th percentile, we can see improvement in the skewness of the Carat_transformed variable from 0.55 to 0.46! :)","5c001527":"# Data Preprocessing","cda3179c":"#### Length variable","4e0b721c":"For this we'll be performing ANOVA. We'll explore the following combinations:\n1. Carat, Cut\n2. Carat, Color\n3. Carat, Clarity\n4. Price, Cut\n5. Price, Color\n6. Price, Clarity","4f035397":"## Descriptive Statistics","85222bfc":"# Exploratory Data Analysis","cbd14f17":"Conclusion: Since the p-value is extremely significant, we can conclude that there exists a relationship between number of carats and color of a diamond. Hence we'll delete the Color column as it can be predicted from *Carat_transformed* column.","d5276327":"**Identifying Types of Variables**\n1. Categorical<br>\n    A. Unnamed: 0<br>\n    B. Cut<br>\n    C. Color<br>\n    D. Clarity\n    \n2. Numerical<br>\n    A. Carat<br>\n    B. Table<br>\n    C. x, y, z<br>\n    D. Depth<br>\n    E. Price\n    \n**Identifying Levels of Measurement**\n1. Qualitative - Nominal<br>\n    A. Unnamed: 0\n    \n2. Qualitative - Ordinal<br>\n    A. Cut<br>\n    B. Color<br>\n    C. Clarity\n\n3. Quantitative - Ratio<br>\n    A. Carat<br>\n    B. Table<br>\n    C. x, y, z<br>\n    D. Depth<br>\n    E. Price","0ffb9e21":"So the outliers have been removed.","1a98598c":"## In this notebook, I'll be doing EDA and Linear Regression using the Statsmodels module on the Diamonds dataset.","4521fe9c":"## Univariate Analysis","56955f6c":"### Exploring relationship between numerical variables","295f168b":"Observations:\n1. The Ideal cut is the most frequently occurring diamond cut.\n2. The types of cut present are as per the description of the data. So we're good to proceed.","69c53003":"#### Width variable","e3342bda":"If any one of the numerical variables is equal to 0, we can consider the row as an invalid entry and delete the row.","197ec311":"Observing min, max and skew values, the **Square root transformation** seems to be the best fit.","651ba3de":"**What columns represent?**\n1. 'Unnamed: 0' - ID of the diamond\n2. Carat - Measures weight of the diamond<br>\n    1 carat = 200 mg\n3. Cut - Identifies quality of the cut (Ideal to Fair)\n4. Color - Identifies color of the diamond (D - Best to J - Worst)\n5. Clarity - Measures the clarity of the diamond (IF - Best, I1 - Worst)\n6. Table - Width of top of diamond relative to its widest point\n7. x, y, z - Length, width and height of the diamond respectively\n8. Depth - Value derived from length, width and height of the diamond\n9. Price - Price of the diamond\n\n**Note:**\nDepth = 2 * z \/ (x + y)<hr>","353e8016":"Conclusion: Since the p-value is extremely significant, we can conclude that there exists a relationship between the number of carats of a diamond and its clarity indicator. Hence we'll delete the Clarity column as it can be predicted from the *Carat_transformed* column.","c83fd0bd":"After EDA, we have been left with only one independent variable i.e. Carat_transformed that can be used for predicting the price of diamonds. This means if we just know the number of carats of a diamond, we can predict its price. Let's build the Linear Regression to do the same.","efb93aac":"#### Diamond Color","c91ab9ad":"Observation: All variables are **right skewed**.\n\nThe following variable has normal distribution\n1. Length\n\nThe following variable is moderately skewed\n1. Table\n\nThe following variables are highly skewed\n1. Price\n2. Carat\n3. Width\n4. Height","44cb158a":"Observing min, max and skew values, the **Box-Cox transformation** seems to be the best fit.","8ce4d5d9":"Observing min, max and skew values, the **Box-Cox transformation** seems to be the best fit.","a5f81825":"Hence we have applied the following transformations to skewed columns:\n1. Table - Log\n2. Price - BoxCox\n3. Carat - Square root\n4. Width - Square root\n5. Height - BoxCox","c3045fd3":"Conclusion: Since the p-value is extremely significant, we can conclude that there exists a relationship between Carat and Cut characteristics of a diamond. This means we can predict the Cut of a diamond if we know the number of its carats. Hence, we can delete the Cut column as it is redundant.","d22df7ea":"#### Checking skewness of all numerical variables again","b3bc474a":"#### Carat variable","1c719fd7":"## Bivariate Analysis","59553d67":"Observations:\n1. All the IDs present are unique.\n2. There are no missing values in the dataset.\n3. We can delete the IDs column as it provides no useful statistics.\n4. We can delete the Depth column as it is a derived column from length, width and height columns.\n5. The Price column is the dependent column and all others are independent columns.","17258708":"We can observe that there are some outliers in the scatter plot when the Carat value is high. One way to resolve this issue is by trimming the Carat variable values above 99th percentile. We'll do this in the next steps."}}