{"cell_type":{"1938c636":"code","5ec9f19b":"code","f94cbb51":"code","42c71906":"code","ba6fe0cc":"code","f80c3ddc":"code","430637b3":"code","6af995ff":"code","976e2fd2":"code","91d5d6d9":"code","974532b1":"code","409d39f7":"code","52272915":"code","537cf755":"code","eb3f3294":"code","ef2ba6ff":"code","2cefb042":"code","2494a40d":"code","78f49da1":"code","c3107bb4":"code","9fb76461":"code","6fbd63ae":"code","37b9f043":"code","b60f65bc":"code","7317e0f2":"code","aa254c3d":"code","5debd5a0":"code","366d5b4c":"code","f8bc86b0":"code","98633e63":"code","c34831b6":"code","bea848ac":"code","80a01ff6":"code","ce3dcdf5":"code","def7f56e":"code","570e95e6":"code","6b2efb78":"code","c07e2cf0":"code","691cbc8c":"code","c0bba8f7":"code","75f31e86":"code","95cb8949":"code","2c4f3303":"code","2d5b93af":"code","28d2d440":"code","4e5480dd":"code","8dc002f3":"code","24bf6d11":"code","333539c6":"code","9800abe9":"code","08151224":"code","aa80ca1c":"code","f18583dc":"code","3ff91e00":"code","d66b586d":"code","f06fb03e":"code","d140208f":"code","f7e6a6fb":"code","d154c077":"code","91874da3":"code","3c97a3f5":"code","3b9f55e1":"code","cad7f4ed":"code","9f5ab23b":"code","100abe4e":"code","b16b46a2":"code","0200b123":"code","010b00e4":"code","437590c7":"code","9eec0a97":"code","37febf14":"code","c514cb85":"code","db63bd6b":"code","842af756":"code","71213879":"code","d0e91b61":"code","290242c3":"code","8d6e63b4":"code","5a38c1c6":"code","b23f3523":"code","e7d00780":"code","8d7355b1":"code","46bbdadb":"code","5f16ae15":"code","b6a71f16":"code","34a6af9b":"code","e581ffb4":"code","dd766375":"code","f1d29361":"code","634fade2":"code","1a0d5842":"code","b0e1a9ba":"code","2177dab2":"code","93fd82b3":"code","dfaf2455":"code","2a7e84af":"code","8b44774d":"code","1a2b15fe":"code","f4a8112c":"code","e76b93a1":"code","3ee45562":"code","509910a4":"code","33ab6850":"code","8925ab00":"code","d8412213":"code","2e442409":"code","ebc2a0f3":"code","6547ecbf":"code","345df321":"code","7a359e17":"code","1ebfe1ec":"code","894f88ee":"code","560e4995":"code","2d5a914f":"code","a84a9dc1":"code","270b98e2":"code","342641aa":"code","ea151d1e":"code","ce27ddd1":"code","c8e08c7c":"code","95b72038":"code","33fe1dd9":"code","068dc792":"code","cf539afc":"code","be20c8ec":"code","84273f0f":"code","eeea9b49":"code","842a8d71":"code","1fc7908b":"code","c400a622":"markdown","0a2dbffc":"markdown","0ffc2e37":"markdown","3f153390":"markdown","7d53a49f":"markdown","dcdec1a6":"markdown","d71d54c6":"markdown","cf1cd915":"markdown","73fa5460":"markdown","6c3a086a":"markdown","ef00dabb":"markdown","39bcbb05":"markdown","a8e2e9c4":"markdown","ea7fa56c":"markdown","af87660e":"markdown","ff225c60":"markdown","0c36afbf":"markdown","caedfb91":"markdown","f44fa496":"markdown","2665071a":"markdown","6fb69ea6":"markdown","1a62803c":"markdown"},"source":{"1938c636":"import numpy as np\nimport pandas as pd  \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport collections\nfrom collections import Counter\nimport xgboost as xgb\nimport lightgbm as lgb\nimport catboost as cat\n%matplotlib inline\n%precision 3","5ec9f19b":"train = pd.read_csv('..\/input\/tmdb-box-office-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/tmdb-box-office-prediction\/test.csv')","f94cbb51":"train.head()","42c71906":"train.loc[train['id'] == 1336,'runtime'] = 130 #kololyov\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 2303,'runtime'] = 80 #HappyWeekend\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 391,'runtime'] = 96 #The Worst Christmas of My Life\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 592,'runtime'] = 90 #\u0410 \u043f\u043e\u0443\u0442\u0440\u0443 \u043e\u043d\u0438 \u043f\u0440\u043e\u0441\u043d\u0443\u043b\u0438\u0441\u044c\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 925,'runtime'] = 86 #\u00bfQui\u00e9n mat\u00f3 a Bambi?\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 978,'runtime'] = 93 #La peggior settimana della mia vita\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 1256,'runtime'] = 92 #Cry, Onion!\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 1542,'runtime'] = 93 #All at Once\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 1875,'runtime'] = 93 #Vermist\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 2151,'runtime'] = 108 #Mechenosets\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 2499,'runtime'] = 86 #Na Igre 2. Novyy Uroven\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 2646,'runtime'] = 98 #My Old Classmate\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 2786,'runtime'] = 111 #Revelation\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntrain.loc[train['id'] == 2866,'runtime'] = 96 #Tutto tutto niente niente\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 3244,'runtime'] = 93 #La caliente ni\u00f1a Julietta\t\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 4490,'runtime'] = 90 #Pancho, el perro millonario\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 4633,'runtime'] = 108 #Nunca en horas de clase\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 6818,'runtime'] = 90 #Miesten v\u00e4lisi\u00e4 keskusteluja\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 4074,'runtime'] = 103 #Shikshanachya Aaicha Gho\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 4222,'runtime'] = 91 #Street Knight\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 4431,'runtime'] = 96 #Plus one\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 5520,'runtime'] = 86 #Glukhar v kino\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 5845,'runtime'] = 83 #Frau M\u00fcller muss weg!\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 5849,'runtime'] = 140 #Shabd\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 6210,'runtime'] = 104 #The Last Breath\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 6804,'runtime'] = 140 #Chaahat Ek Nasha...\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b\ntest.loc[test['id'] == 7321,'runtime'] = 87 #El truco del manco\u306e\u4e0a\u6620\u6642\u9593\u3092\u8abf\u3079\u3066\u5165\u529b","ba6fe0cc":"train_add = pd.read_csv('..\/input\/tmdb-competition-additional-features\/TrainAdditionalFeatures.csv')\ntest_add = pd.read_csv('..\/input\/tmdb-competition-additional-features\/TestAdditionalFeatures.csv')\n\ntrain = pd.merge(train, train_add, how='left', on=['imdb_id'])\ntest = pd.merge(test, test_add, how='left', on=['imdb_id'])","f80c3ddc":"df = pd.concat([train, test]).set_index(\"id\")","430637b3":"df","6af995ff":"low_budget = train[train[\"budget\"] <= 100]","976e2fd2":"low_budget","91d5d6d9":"plt.figure(figsize=(12, 8))\nsns.stripplot(x='budget', y='revenue', data = low_budget, jitter=True)\nplt.xlabel('Budget [$]', fontsize=15)\nplt.ylabel('Revenue [$]', fontsize=15)\nplt.title('Revenues of low-budget movies', fontsize=20)","974532b1":"low_budget[low_budget[\"revenue\"] >= 100000000]","409d39f7":"df.loc[df.index == 90,'budget'] = 30000000\ndf.loc[df.index == 118,'budget'] = 60000000\ndf.loc[df.index == 149,'budget'] = 18000000\ndf.loc[df.index == 464,'budget'] = 20000000\ndf.loc[df.index == 819,'budget'] = 90000000\ndf.loc[df.index == 1112,'budget'] = 6000000\ndf.loc[df.index == 1131,'budget'] = 4300000\ndf.loc[df.index == 1359,'budget'] = 10000000\ndf.loc[df.index == 1570,'budget'] = 15800000\ndf.loc[df.index == 1714,'budget'] = 46000000\ndf.loc[df.index == 1865,'budget'] = 80000000\ndf.loc[df.index == 2602,'budget'] = 31000000\n#id\u304c105\u30682941\u306e\u3082\u306e\u306e\u4e88\u7b97\u306f\u4e0d\u660e","52272915":"# \u4f7f\u308f\u306a\u3044\u5217\u3092\u6d88\u3059\ndf = df.drop([\"poster_path\", \"original_title\"], axis=1)","537cf755":"# log\u3092\u53d6\u3063\u3066\u304a\u304f\ndf[\"log_revenue\"] = np.log1p(df[\"revenue\"])\ndf[\"log_budget\"] = np.log1p(df[\"budget\"])","eb3f3294":"df['isbelongs_to_collectionNA'] = 1\ndf.loc[pd.isnull(df['belongs_to_collection']) ,\"isbelongs_to_collectionNA\"] = 0","ef2ba6ff":"df['isbelongs_to_collectionNA']","2cefb042":"# JSON text \u3092\u8f9e\u66f8\u578b\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\nimport ast\ndict_columns = ['belongs_to_collection', 'genres', 'production_companies',\n                'production_countries', 'spoken_languages', 'Keywords', 'cast', 'crew']\n\nfor col in dict_columns:\n       df[col]=df[col].apply(lambda x: [] if pd.isna(x) else ast.literal_eval(x) )","2494a40d":"# \u5404\u30ef\u30fc\u30c9\u306e\u6709\u7121\u3092\u8868\u3059 01 \u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u4f5c\u6210\ndef count_word_list(series):\n    len_max = series.apply(len).max() # \u30b8\u30e3\u30f3\u30eb\u6570\u306e\u6700\u5927\u5024\n    tmp = series.map(lambda x: x+[\"nashi\"]*(len_max-len(x))) # list\u306e\u9577\u3055\u3092\u305d\u308d\u3048\u308b\n    \n    word_set = set(sum(list(series.values), [])) # \u5168\u30b8\u30e3\u30f3\u30eb\u540d\u306eset\n    for n in range(len_max):\n        word_dfn = pd.get_dummies(tmp.apply(lambda x: x[n]))\n        word_dfn = word_dfn.reindex(word_set, axis=1).fillna(0).astype(int)\n        if n==0:\n            word_df = word_dfn\n        else:\n            word_df = word_df + word_dfn\n    \n    return word_df#.drop(\"nashi\", axis=1)","78f49da1":"dfdic_feature = {}","c3107bb4":"df[\"genre_names\"] = df[\"genres\"].apply(lambda x : [ i[\"name\"] for i in x])","9fb76461":"df['num_genres'] = df['genres'].apply(lambda x: len(x) if x != {} else 0)","6fbd63ae":"dfdic_feature[\"genre\"] = count_word_list(df[\"genre_names\"])\n# TV movie \u306f1\u4ef6\u3057\u304b\u306a\u3044\u306e\u3067\u524a\u9664\ndfdic_feature[\"genre\"] = dfdic_feature[\"genre\"].drop(\"TV Movie\", axis=1)\ndfdic_feature[\"genre\"].head()","37b9f043":"n_language = df.loc[:train.index[-1], \"original_language\"].value_counts()\nlarge_language = n_language[n_language>=20].index\ndf.loc[~df[\"original_language\"].isin(large_language), \"original_language\"] = \"small\"","b60f65bc":"n_language","7317e0f2":"large_language","aa254c3d":"df[\"original_language\"] = df[\"original_language\"].astype(\"category\")","5debd5a0":"df['isOriginalLanguageEng'] = 0 \ndf.loc[ df['original_language'] == \"en\" ,\"isOriginalLanguageEng\"] = 1","366d5b4c":"\n# one_hot_encoding\ndfdic_feature[\"original_language\"] = pd.get_dummies(df[\"original_language\"])\n\ndfdic_feature[\"original_language\"].head()","f8bc86b0":"\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf['original_language'] = le.fit_transform(df['original_language'])","98633e63":"df[\"production_names\"] = df[\"production_companies\"].apply(lambda x : [ i[\"name\"] for i in x])","c34831b6":"tmp = count_word_list(df[\"production_names\"])","bea848ac":"# train\u5185\u306e\u4ef6\u6570\u304c\u591a\u3044\u7269\u306e\u307f\u9078\u3076\ndef select_top_n(df, topn=9999, nmin=2):  # topn:\u4e0a\u4f4dtopn\u4ef6, nmin:\u4f5c\u54c1\u6570nmin\u4ee5\u4e0a\n#    if \"small\" in df.columns:\n#        df = df.drop(\"small\", axis=1)\n    n_word = (df.loc[train[\"id\"]]>0).sum().sort_values(ascending=False)\n    # \u4f5c\u54c1\u6570\u304cnmin\u4ef6\u672a\u6e80\n    smallmin = n_word[n_word<nmin].index\n    # \u4e0a\u4f4dtopn\u4ef6\u306b\u5165\u3063\u3066\u3044\u306a\u3044\n    smalln = n_word.iloc[topn+1:].index\n    small = set(smallmin) | set(smalln)\n    # \u4ef6\u6570\u306e\u5c11\u306a\u3044\u30bf\u30b0\u306e\u307f\u306e\u4f5c\u54c1\n    df[\"small\"] = df[small].sum(axis=1) #>0\n    \n    return df.drop(small, axis=1)","80a01ff6":"# train\u306b2\u672c\u4ee5\u4e0a\u4f5c\u54c1\u306e\u3042\u308b\u4f1a\u793e\ndfdic_feature[\"production_companies\"] = select_top_n(tmp, topn=9,nmin=2)\ndfdic_feature[\"production_companies\"].head()","ce3dcdf5":"# \u56fd\u540d\u306e\u30ea\u30b9\u30c8\u306b\ndf[\"country_names\"] = df[\"production_countries\"].apply(lambda x : [ i[\"name\"] for i in x])\ndf_country = count_word_list(df[\"country_names\"])","def7f56e":"# 2\u304b\u56fd\u3060\u3063\u305f\u3089\u30010.5\u305a\u3064\u306b\ndf_country = (df_country.T\/df_country.sum(axis=1)).T.fillna(0)","570e95e6":"dfdic_feature[\"production_countries\"] = select_top_n(df_country, topn=10,nmin=2)\ndfdic_feature[\"production_countries\"].head()","6b2efb78":"import datetime","c07e2cf0":"df[df[\"release_date\"].isnull()]","691cbc8c":"# \u516c\u958b\u65e5\u306e\u6b20\u640d1\u4ef6 id=3829\n# May,2000 (https:\/\/www.imdb.com\/title\/tt0210130\/) \n# \u65e5\u306f\u4e0d\u660e\u30021\u65e5\u3092\u5165\u308c\u3066\u304a\u304f\ndf.loc[3829, \"release_date\"] = \"5\/1\/00\"","c0bba8f7":"df[\"release_year\"] = pd.to_datetime(df[\"release_date\"]).dt.year.astype(int)\n# \u5e74\u306e20\u4ee5\u964d\u3092\u30012020\u5e74\u3088\u308a\u5f8c\u306e\u672a\u6765\u3068\u5224\u5b9a\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u88dc\u6b63\u3002\ndf.loc[df[\"release_year\"]>2020, \"release_year\"] = df.loc[df[\"release_year\"]>2020, \"release_year\"]-100\n\ndf[\"release_month\"] = pd.to_datetime(df[\"release_date\"]).dt.month.astype(int)\ndf[\"release_day\"] = pd.to_datetime(df[\"release_date\"]).dt.day.astype(int)","75f31e86":"# datetime\u578b\u306b\ndf[\"release_date\"] = df.apply(lambda s: datetime.datetime(\n    year=s[\"release_year\"],month=s[\"release_month\"],day=s[\"release_day\"]), axis=1)","95cb8949":"df[\"release_dayofyear\"] = df[\"release_date\"].dt.dayofyear\ndf[\"release_dayofweek\"] = df[\"release_date\"].dt.dayofweek","2c4f3303":"df['has_homepage'] = 1\ndf.loc[ pd.isnull(df['homepage']),'has_homepage'] = 0","2d5b93af":"df['num_Keywords'] = df['Keywords'].apply(lambda x: len(x) if x != {} else 0)","28d2d440":"#\u5358\u8a9e\u6570\ndf['overview_word_count'] = df['overview'].apply(lambda x: len(str(x).split()))\n#\u6587\u5b57\u6570\ndf['overview_char_count'] = df['overview'].apply(lambda x: len(str(x)))","4e5480dd":"#\u5358\u8a9e\u6570\ndf['tagline_word_count'] = df['tagline'].apply(lambda x: len(str(x).split()))\n#\u6587\u5b57\u6570\ndf['tagline_char_count'] = df['tagline'].apply(lambda x: len(str(x)))\n#tagline\u304c\u3042\u308b\u304b\u3069\u3046\u304b\ndf['isTaglineNA'] = 0\ndf.loc[df['tagline'] == 0 ,\"isTaglineNA\"] = 1 ","8dc002f3":"#\u5358\u8a9e\u6570\ndf['title_word_count'] = df['title'].apply(lambda x: len(str(x).split()))\n#\u6587\u5b57\u6570\ndf['title_char_count'] = df['title'].apply(lambda x: len(str(x)))","24bf6d11":"df['num_cast'] = df['cast'].apply(len)  # \u4eba\u6570","333539c6":"list_of_cast_genders = list(df['cast'].apply(lambda x: [i['gender'] for i in x] if x != {} else []).values)\n\ndf['genders_0_cast'] = df['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 0]))\ndf['genders_1_cast'] = df['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 1]))\ndf['genders_2_cast'] = df['cast'].apply(lambda x: sum([1 for i in x if i['gender'] == 2]))\n# \u6b20\u640d\u306f\u5e73\u5747\u3067\u57cb\u3081\u308b\ndf[['genders_0_cast', 'genders_1_cast']] = df[['genders_0_cast', 'genders_1_cast']].fillna(df[['genders_0_cast', 'genders_1_cast']].mean())","9800abe9":"df['num_crew'] = df['crew'].apply(len)  # \u4eba\u6570","08151224":"# \u90e8\u7f72\u5225\u3000\u306e\u3079\u4eba\u6570\ndepartment_count = pd.Series(Counter([job for lst in df[\"crew\"].apply(lambda x : [ i[\"department\"] for i in x]).values for job in lst]))\ndepartment_count.sort_values(ascending=False)","aa80ca1c":"# job\u5225\u3000\u306e\u3079\u4eba\u6570(top30)\njob_count = pd.Series(Counter([job for lst in df[\"crew\"].apply(lambda x : [ i[\"job\"] for i in x]).values for job in lst]))\njob_count.sort_values(ascending=False).head(30)","f18583dc":"df_crew = { idx : pd.DataFrame([ [crew[\"department\"], crew[\"job\"], crew[\"name\"]] \n                        for crew in x], columns=[\"department\", \"job\", \"name\"]) \n    for idx, x in df[\"crew\"].iteritems() }","3ff91e00":"df_crew = pd.concat(df_crew)\ndf_crew.head()","d66b586d":"def select_job(list_dict, key, value):\n    return [ dic[\"name\"] for dic in list_dict if dic[key]==value]","f06fb03e":"# \u5404\u90e8\u7f72\u306e\u4eba\u6570\nfor department in department_count.index:\n    df['dep_{}_num'.format(department)] = df[\"crew\"].apply(select_job, key=\"department\", value=department).apply(len)  ","d140208f":"# \u91cd\u8981\u3068\u601d\u308f\u308c\u308bjob\u306b\u3064\u3044\u3066\u3001\u53c2\u52a0\u4f5c\u54c1\u6570\u4e0a\u4f4d15\u4eba\u3067 one-hot-encoding\n# \u88fd\u4f5c\u3001\u76e3\u7763\u3001\u811a\u672c\u3001\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\u3001\u4f5c\u66f2\ndf_crewname = pd.DataFrame([], index=df.index)\nfor job in [\"Producer\", \"Director\", \"Screenplay\", \"Casting\", \"Original Music Composer\",\"Writer\"]:\n    col = 'job_{}_list'.format(job)\n    df[col] = df[\"crew\"].apply(select_job, key=\"job\", value=job)\n\n    top_list = [m[0] for m in Counter([i for j in df[col] for i in j]).most_common(15)]\n    for i in top_list:\n        df_crewname['{}_{}'.format(job,i)] = df[col].apply(lambda x: i in x)","f7e6a6fb":"# \u6280\u8853\u90e8\u9580\u306fdepartment\u6bce\u306b\u3001\u53c2\u52a0\u4f5c\u54c1\u6570\u4e0a\u4f4d15\u4eba\u3067 one-hot-encoding\nfor job in [\"Sound\", \"Art\", \"Costume & Make-Up\", \"Camera\", \"Visual Effects\"]:\n    col = 'department_{}_list'.format(job)\n    df[col] = df[\"crew\"].apply(select_job, key=\"department\", value=job)\n\n    top_list = [m[0] for m in Counter([i for j in df[col] for i in j]).most_common(15)]\n    for i in top_list:\n        df_crewname['{}_{}'.format(job,i)] = df[col].apply(lambda x: i in x)","d154c077":"df.columns","91874da3":"# Animation\u306e\u4eba\u6570\uff08\u30a2\u30cb\u30e1\u6620\u753b\u3067\u91cd\u8981\u305d\u3046\u306a\u306e\u3067\u5165\u308c\u3066\u307f\u308b\uff09\ndf['job_Animation_num'] = df[\"crew\"].apply(select_job, key=\"job\", value=\"Animation\").apply(len)","3c97a3f5":"# crew gender\ndf['genders_0_crew'] = df['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 0]))\ndf['genders_1_crew'] = df['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 1]))\ndf['genders_2_crew'] = df['crew'].apply(lambda x: sum([1 for i in x if i['gender'] == 2]))\n# \u6b20\u640d\u306f\u5e73\u5747\u3067\u57cb\u3081\u308b\ndf[['genders_0_crew', 'genders_1_crew','genders_2_crew']] = df[['genders_0_crew', 'genders_1_crew','genders_2_crew']].fillna(df[['genders_0_crew', 'genders_1_crew','genders_2_crew']].mean())","3b9f55e1":"df['budget_runtime_ratio'] = df['budget']\/df['runtime']","cad7f4ed":"sns.distplot(df['budget_runtime_ratio'])","9f5ab23b":"df['budget_popularity_ratio'] = df['budget']\/df['popularity']","100abe4e":"sns.distplot(df['budget_popularity_ratio'])","b16b46a2":"rating_na = df[df[\"rating\"].isnull()]","0200b123":"corrmat = df.corr()\nplt.subplots(figsize=(25, 20))\nsns.heatmap(corrmat, square=True, cmap='coolwarm', annot=True,vmin=-1)\n#plt.savefig(\"TMDBcorr.png\")","010b00e4":"rating_na[\"release_year\"]","437590c7":"sns.distplot(rating_na[\"release_year\"])","9eec0a97":"sns.distplot(df[\"release_year\"])","37febf14":"df['budget_popularity2_ratio'] = df['budget']\/df['popularity2']","c514cb85":"df['budget_year_ratio'] = df['budget']\/df['release_year']","db63bd6b":"df['production_countries_count'] = df['production_countries'].apply(lambda x : len(x))\ndf['production_companies_count'] = df['production_companies'].apply(lambda x : len(x))","842af756":"df[\"collection_name\"] = df[\"belongs_to_collection\"].apply(lambda x : x[0][\"name\"] if len(x)>0 else 0)\nle.fit(list(df['collection_name'].fillna('')))\ndf['collection_name'] = le.transform(df['collection_name'].fillna('').astype(str))","71213879":"df['mean_pop1_bud'] = df.groupby('popularity')['budget'].transform('mean')\ndf['mean_pop2_bud'] = df.groupby('popularity2')['budget'].transform('mean')\ndf['mean_year_bud'] = df.groupby('release_year')['budget'].transform('mean')\ndf['mean_pop1_rate'] = df.groupby('popularity')['rating'].transform('mean')\ndf['mean_pop2_rate'] = df.groupby('popularity2')['rating'].transform('mean')\ndf['mean_rate_tV'] = df.groupby('rating')['totalVotes'].transform('mean')","d0e91b61":"df['mean_pop1_bud']","290242c3":"df['runtime_to_mean_year'] = df['runtime'] \/ df.groupby(\"release_year\")[\"runtime\"].transform('mean')\ndf['popularity_to_mean_year'] = df['popularity'] \/ df.groupby(\"release_year\")[\"popularity\"].transform('mean')\ndf['budget_to_mean_year'] = df['budget'] \/ df.groupby(\"release_year\")[\"budget\"].transform('mean')","8d6e63b4":"df['runtime_to_mean_year']","5a38c1c6":"df_features = pd.concat(dfdic_feature, axis=1)","b23f3523":"df['job_Writer_list']","e7d00780":"df_features.index = df.index","8d7355b1":"df.info()","46bbdadb":"df_use = df[['num_cast', 'genders_0_cast','runtime_to_mean_year','budget_to_mean_year',\"log_budget\",\n       'genders_1_cast','genders_2_cast', 'num_crew', 'genders_0_crew', 'genders_1_crew','genders_2_crew',\n             \"tagline_word_count\",\"overview_word_count\",\"title_word_count\",\"has_homepage\",\n            'popularity','runtime','release_year', 'release_month','release_dayofweek',\"num_genres\"\n            ,\"popularity2\",\"rating\",\"totalVotes\",'isOriginalLanguageEng',\n             'budget_runtime_ratio','budget_popularity_ratio','budget_year_ratio','budget_popularity2_ratio',\n            'production_countries_count','production_companies_count','mean_pop1_bud','mean_pop2_bud','mean_year_bud','mean_pop1_rate',\n            'mean_pop2_rate','mean_rate_tV',\n           'dep_Directing_num', 'dep_Writing_num', 'dep_Production_num',\n       'dep_Sound_num', 'dep_Camera_num', 'dep_Editing_num', 'dep_Art_num',\n       'dep_Costume & Make-Up_num', 'dep_Crew_num', 'dep_Lighting_num',\n       'dep_Visual Effects_num', 'dep_Actors_num', 'job_Animation_num' ]]","5f16ae15":"df_use = pd.concat([df_use, df_features], axis=1)","b6a71f16":"df_features.columns","34a6af9b":"df_use.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in df_use.columns]","e581ffb4":"df_use.columns","dd766375":"df_use.isnull().sum().sum()","f1d29361":"df_use","634fade2":"trainX = df_use.iloc[:train.shape[0],:].reset_index(drop=True)\ntest_X = df_use.iloc[train.shape[0]:,:].reset_index(drop=True)\ntrainy = np.log1p(train[\"revenue\"])","1a0d5842":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(trainX,trainy,test_size=0.3,random_state=100)","b0e1a9ba":"xgbmodel = xgb.XGBRegressor(max_depth=6, \n                            min_child_weight=3,\n                            alpha = 0.5,\n                            learning_rate=0.05, \n                            n_estimators=150, \n                            objective='reg:linear', \n                            gamma=0.01,  \n                            silent=1,\n                            subsample=0.8, \n                            colsample_bytree=0.8)","2177dab2":"xgbmodel.fit(X_train, y_train)","93fd82b3":"pred_train1 = xgbmodel.predict(X_train)\npred_test1 = xgbmodel.predict(X_test)","dfaf2455":"from sklearn.metrics import mean_squared_error\nprint(np.sqrt(mean_squared_error(y_train, pred_train1)))\nprint(np.sqrt(mean_squared_error(y_test, pred_test1)))","2a7e84af":"plt.figure(figsize=(20,15))\nimportances = pd.Series(xgbmodel.feature_importances_, index = df_use.columns)\nimportances = importances.sort_values()\nimportances.plot(kind = \"barh\")\nplt.title(\"imporance in the xgboost Model\")\nplt.show()","8b44774d":"pred_xgb = xgbmodel.predict(test_X)","1a2b15fe":"test_id = test[\"id\"]","f4a8112c":"pred_xgb = pd.DataFrame(np.exp(pred_xgb)-1,columns=[\"revenue\"])\npred_xgb","e76b93a1":"sub=pd.concat([test_id, pred_xgb],axis=1)","3ee45562":"sub.to_csv('TMDB_xgb.csv',index=False)","509910a4":"lgbmodel = lgb.LGBMRegressor(n_estimators=150, \n                             objective='regression', \n                             metric='rmse',\n                             max_depth = 5,\n                             num_leaves=30, \n                             min_child_samples=30,\n                             learning_rate=0.05,\n                             boosting = 'gbdt',\n                             min_data_in_leaf= 15,\n                             feature_fraction = 0.9,\n                             bagging_freq = 1,\n                             bagging_fraction = 0.9,\n                             importance_type='gain',\n                             lambda_l1 = 0.2, \n                             subsample=.8, \n                             colsample_bytree=.8,\n                             use_best_model=True)","33ab6850":"lgbmodel.fit(X_train, y_train)","8925ab00":"pred_train2 = lgbmodel.predict(X_train)\npred_test2 = lgbmodel.predict(X_test)","d8412213":"#rmse\nprint(np.sqrt(mean_squared_error(y_train, pred_train2)))\nprint(np.sqrt(mean_squared_error(y_test, pred_test2)))","2e442409":"pred_lgb = lgbmodel.predict(test_X)","ebc2a0f3":"pred_lgb = pd.DataFrame(np.exp(pred_lgb)-1,columns=[\"revenue\"])\npred_lgb","6547ecbf":"sub1=pd.concat([test_id, pred_lgb],axis=1)","345df321":"sub1.to_csv('TMDB_lgb.csv',index=False)","7a359e17":"catmodel = cat.CatBoostRegressor(iterations=2000, \n                                 learning_rate=0.01, \n                                 depth=8, \n                                 eval_metric='RMSE',\n                                 colsample_bylevel=0.8,\n                                 bagging_temperature = 0.2,\n                                 metric_period = None,\n                                 early_stopping_rounds=200)","1ebfe1ec":"catmodel.fit(X_train, y_train)","894f88ee":"pred_train3 = catmodel.predict(X_train)\npred_test3 = catmodel.predict(X_test)","560e4995":"#rmse\nprint(np.sqrt(mean_squared_error(y_train, pred_train3)))\nprint(np.sqrt(mean_squared_error(y_test, pred_test3)))","2d5a914f":"pred_cat = catmodel.predict(test_X)","a84a9dc1":"pred_cat = pd.DataFrame(np.exp(pred_cat)-1,columns=[\"revenue\"])\npred_cat","270b98e2":"sub2=pd.concat([test_id, pred_cat],axis=1)","342641aa":"sub2.to_csv('TMDB_cat.csv',index=False)","ea151d1e":"ansamble = 0.4 * pred_lgb[\"revenue\"] + 0.2 * pred_xgb[\"revenue\"] + 0.4 * pred_cat[\"revenue\"]","ce27ddd1":"sub3=pd.concat([test_id, ansamble],axis=1)","c8e08c7c":"sub3","95b72038":"sub3.to_csv('TMDB_ansamble.csv',index=False)","33fe1dd9":"ansamble2 = 0.35 * pred_lgb[\"revenue\"] + 0.3 * pred_xgb[\"revenue\"] + 0.35 * pred_cat[\"revenue\"]","068dc792":"sub4=pd.concat([test_id, ansamble2],axis=1)","cf539afc":"sub4","be20c8ec":"sub4.to_csv('TMDB_ansamble2.csv',index=False)","84273f0f":"ansamble3 = 0.25 * pred_lgb[\"revenue\"] + 0.25 * pred_xgb[\"revenue\"] + 0.5 * pred_cat[\"revenue\"]","eeea9b49":"sub5=pd.concat([test_id, ansamble3],axis=1)","842a8d71":"sub5","1fc7908b":"sub5.to_csv('TMDB_ansamble3.csv',index=False)","c400a622":"## homepage","0a2dbffc":"## title","0ffc2e37":"## amsamble","3f153390":"## runtime","7d53a49f":"## tagline","dcdec1a6":"## Xgboost","d71d54c6":"## cast","cf1cd915":"## cat","73fa5460":"## budget","6c3a086a":"## new features","ef00dabb":"## genres","39bcbb05":"## overview","a8e2e9c4":"## original_language","ea7fa56c":"## keywords","af87660e":"## release date","ff225c60":"## LightGBM","0c36afbf":"## crew","caedfb91":"## production countries","f44fa496":"## belongs to collection","2665071a":"## production_company","6fb69ea6":"## Aditional data","1a62803c":"## \u6574\u7406"}}