{"cell_type":{"8409dcb8":"code","5af8d588":"code","f98c9575":"code","0f27b2a8":"code","29dbf637":"code","2e7c4a78":"code","3300c6c9":"code","e3be99c2":"code","1190224a":"code","86f77980":"code","6e59eabf":"code","9479b611":"code","6f3b1b93":"code","ee44523e":"code","79386db3":"code","66794d7e":"code","8985188c":"code","a64baa1d":"code","8ec8977c":"code","8af42c2c":"code","69c1c905":"code","dfcce646":"code","82ddf5d1":"code","9e125ec9":"code","4532d086":"code","4ad7a231":"code","961c16dd":"code","5e04f6fd":"code","8c728f3a":"code","2ec4abd1":"code","419537cb":"code","aaa8cc62":"code","60fe8425":"code","1ffb6cd9":"code","d38aef20":"code","ef115f06":"code","2614190d":"code","98ee1ea6":"code","235c2aa2":"code","c43c5e58":"code","22d957c5":"code","7cdd99b5":"code","636c3e87":"code","450fb97e":"code","915cdb3b":"code","4da00912":"code","213d2de3":"code","4ba8f4eb":"code","c8ef5682":"code","c6674c1d":"code","e8954098":"code","d2c431e3":"code","67c03a2e":"code","ee089f38":"code","601cee23":"code","9b0b2991":"code","f3b3a06f":"code","0a0910e8":"code","06aaf1f3":"code","0aae5f5c":"code","50be63b6":"code","c4814c0b":"code","4bde9ebd":"code","76824b60":"code","6697c3c4":"code","ab598012":"code","d79d1c9b":"code","ec4dafdb":"code","a776536a":"code","75f73bc6":"code","f7667fc2":"code","1bd46b92":"code","9b53303b":"code","104a9bbf":"code","184bd9d0":"code","0272029f":"code","fb9256ae":"code","6275b992":"code","bd78407d":"code","bdd3c67d":"code","83ef9ef3":"code","57174e47":"code","4c9dea21":"code","8f941df0":"code","37965510":"code","d7cfb8f8":"code","b097ca82":"code","4459728e":"code","75660d61":"code","e674f955":"code","5951fec0":"code","7516e968":"code","2360ab06":"code","6ff2986b":"code","30d9d820":"code","daa1b5f4":"code","988ce9a9":"code","08f9572f":"code","eeda3708":"code","a90bf071":"code","f161a654":"code","59395ffa":"code","fee30d51":"code","c1f8b054":"code","0312b41e":"code","63204856":"code","16b78a19":"code","26d94a79":"code","dd4b7ce1":"code","bdd8d905":"code","ce83bd41":"markdown","dcc6569c":"markdown","7631af13":"markdown","8f29812e":"markdown","8a8f9180":"markdown","a16ad9e7":"markdown","7fcd75c2":"markdown","fe8f2fbd":"markdown","b93bdd9e":"markdown","db1c4fc7":"markdown","68521090":"markdown","9dae251c":"markdown","48706738":"markdown","cbd5cf62":"markdown","3377aad4":"markdown","42727811":"markdown","5b89332e":"markdown","e593ef9b":"markdown","cb27472c":"markdown","7c9c5a59":"markdown","7bb76844":"markdown","678fcf1a":"markdown","8565d77d":"markdown","063f75e5":"markdown","61c168ae":"markdown","00b25738":"markdown","4c071a96":"markdown","aaf289da":"markdown","d8fd45af":"markdown","6d6e2466":"markdown","161a56e1":"markdown","a856c2dc":"markdown","e4e3cb14":"markdown","dca2b31b":"markdown","6537c4ea":"markdown","5bd1e65c":"markdown","3c1040d6":"markdown","279604e9":"markdown","fd83cb44":"markdown","c534be99":"markdown","4ca99888":"markdown","e9b7ee61":"markdown","acf85ee1":"markdown","555e2df8":"markdown","be5b7500":"markdown","3d4ad4c9":"markdown","936dbe8b":"markdown","790e5da6":"markdown","ac88ccdc":"markdown","c026a691":"markdown","97b170a6":"markdown","e649f532":"markdown","2ad6b57e":"markdown","d7b7b35f":"markdown","dbf5d98a":"markdown","a664dea8":"markdown","e0b21e02":"markdown","1eb4b07e":"markdown","9287804c":"markdown","800fb35a":"markdown","335cecbd":"markdown","ad12b962":"markdown","b5984134":"markdown","987acc00":"markdown","15d5c276":"markdown","cf9b7b94":"markdown","398fe439":"markdown","8e6c1675":"markdown"},"source":{"8409dcb8":"#%matplotlib inline\nimport pandas as pd\nimport numpy as np","5af8d588":"df = pd.read_csv('..\/input\/train.csv', parse_dates=[0])\ntest = pd.read_csv('..\/input\/test.csv', parse_dates=[0])","f98c9575":"df.shape","0f27b2a8":"df.head()","29dbf637":"df.head()","2e7c4a78":"test.head()","3300c6c9":"df.info()","e3be99c2":"df['count'].hist(bins=20)","1190224a":"df['count'] = np.log(df['count'] + 1)","86f77980":"1000 - 1100","6e59eabf":"10 - 11","9479b611":"df['count'].hist(bins=20)","6f3b1b93":"df.rename(columns={'count':'rentals'}, inplace=True)","ee44523e":"df.shape","79386db3":"df = df.append(test,sort=False)","66794d7e":"df.shape","8985188c":"df['year'] = df['datetime'].dt.year\ndf['month'] = df['datetime'].dt.month\ndf['day'] = df['datetime'].dt.day\ndf['dayofweek'] = df['datetime'].dt.dayofweek\ndf['hour'] = df['datetime'].dt.hour","a64baa1d":"df.sort_values('datetime', inplace=True)","8ec8977c":"#df.temp.describe()","8af42c2c":"df['rolling_temp'] = df['temp'].rolling(4, min_periods=1).mean()","69c1c905":"df['rolling_temp'].describe()","dfcce646":"df.shape","82ddf5d1":"df.head().T","9e125ec9":"df.year.value_counts()","4532d086":"test = df[df['rentals'].isnull()]","4ad7a231":"df = df[~df['rentals'].isnull()]","961c16dd":"from sklearn.model_selection import train_test_split","5e04f6fd":"# divide dataset de treino em treino(70%) e valida\u00e7\u00e3o(30%)\ntrain, valid = train_test_split(df, random_state=42)","8c728f3a":"train.shape, valid.shape","2ec4abd1":"print(\"%.0f\" % round((valid.shape[0]\/train.shape[0])*100,1)+ '%')","419537cb":"removed_cols = ['rentals', 'casual', 'registered', 'datetime']","aaa8cc62":"feats = [c for c in df.columns if c not in removed_cols]","60fe8425":"from sklearn.tree import DecisionTreeRegressor","1ffb6cd9":"dt = DecisionTreeRegressor(random_state=42, max_depth=2)","d38aef20":"dt.fit(train[feats], train['rentals'])","ef115f06":"from fastai.structured import draw_tree","2614190d":"draw_tree(dt, train[feats], precision=3, size=40)","98ee1ea6":"from sklearn.ensemble import RandomForestRegressor","235c2aa2":"rf = RandomForestRegressor(random_state=42, n_jobs=-1)","c43c5e58":"rf.fit(train[feats], train['rentals'])","22d957c5":"preds = rf.predict(valid[feats])","7cdd99b5":"from sklearn.metrics import mean_squared_error","636c3e87":"mean_squared_error(valid['rentals'], preds)**(1\/2)","450fb97e":"train_preds = rf.predict(train[feats])","915cdb3b":"mean_squared_error(train['rentals'], train_preds)**(1\/2)","4da00912":"test['count'] = np.exp(rf.predict(test[feats]))","213d2de3":"test[['datetime', 'count']].to_csv('rf.csv', index=False)","4ba8f4eb":"rf = RandomForestRegressor(random_state=42, n_jobs=-1, n_estimators=200)","c8ef5682":"rf.fit(train[feats], train['rentals'])","c6674c1d":"preds = rf.predict(valid[feats])","e8954098":"mean_squared_error(valid['rentals'], preds)**(1\/2)","d2c431e3":"train_preds = rf.predict(train[feats])","67c03a2e":"mean_squared_error(train['rentals'], train_preds)**(1\/2)","ee089f38":"test['count'] = np.exp(rf.predict(test[feats]))","601cee23":"test[['datetime', 'count']].to_csv('rf_opt.csv', index=False)","9b0b2991":"rf = RandomForestRegressor(random_state=42, n_jobs=-1, n_estimators=200, oob_score=True)","f3b3a06f":"rf.fit(df[feats], df['rentals'])","0a0910e8":"mean_squared_error(df['rentals'], rf.oob_prediction_)**(1\/2)","06aaf1f3":"rf.oob_score_","0aae5f5c":"from sklearn.metrics import r2_score","50be63b6":"r2_score(df['rentals'], rf.oob_prediction_)","c4814c0b":"r2_score(df['rentals'], df['rentals'])","4bde9ebd":"r2_score(df['rentals'], np.full(rf.oob_prediction_.shape[0], df['rentals'].mean()))","76824b60":"r2_score(df['rentals'], np.full(rf.oob_prediction_.shape[0], 10000))","6697c3c4":"test['count'] = np.exp(rf.predict(test[feats]))","ab598012":"test[['datetime', 'count']].to_csv('rf_full.csv', index=False)","d79d1c9b":"# Calcula a posi\u00e7\u00e3o relativa no Kaggle Public Leaderboard\n729\/3251","ec4dafdb":"# POSI\u00c7\u00c3O: 729 , TOP 22% da competi\u00e7\u00e3o.","a776536a":"#-----------------------------------------------------------------------------------------------------------------------","75f73bc6":"train.shape , valid.shape","f7667fc2":"train, valid = df[df['day'] <= 15], df[df['day'] > 15]","1bd46b92":"train.shape , valid.shape","9b53303b":"from sklearn.ensemble import RandomForestRegressor","104a9bbf":"rf = RandomForestRegressor(random_state=42, n_jobs=-1, n_estimators=200, min_samples_split=4, max_features=0.9, max_depth=17, oob_score=True)","184bd9d0":"rf.fit(train[feats], train['rentals'])","0272029f":"preds = rf.predict(valid[feats])","fb9256ae":"from sklearn.metrics import mean_squared_error","6275b992":"mean_squared_error(valid['rentals'], preds)**(1\/2)","bd78407d":"feats = [c for c in feats if c not in ['day']]","bdd3c67d":"rf = RandomForestRegressor(random_state=42, n_jobs=-1, n_estimators=200, min_samples_split=4, max_features=0.9, max_depth=17, oob_score=True)","83ef9ef3":"rf.fit(df[feats], df['rentals'])","57174e47":"preds = rf.predict(df[feats])","4c9dea21":"mean_squared_error(df['rentals'], rf.oob_prediction_)**(1\/2)","8f941df0":"train_preds = rf.predict(df[feats])","37965510":"mean_squared_error(df['rentals'], train_preds)**(1\/2)","d7cfb8f8":"rf.predict(test[feats])","b097ca82":"test['count'] = np.exp(rf.predict(test[feats]))","4459728e":"test[['datetime', 'count']].to_csv('rf_full_wo_day.csv', index=False)","75660d61":"feats = [c for c in feats if c not in ['month', 'holiday']]","e674f955":"rf = RandomForestRegressor(random_state=42, n_jobs=-1, n_estimators=200, min_samples_split=4, max_features=0.9, max_depth=17, oob_score=True)","5951fec0":"rf.fit(df[feats], df['rentals'])","7516e968":"preds = rf.predict(df[feats])","2360ab06":"mean_squared_error(df['rentals'], rf.oob_prediction_)**(1\/2)","6ff2986b":"train_preds = rf.predict(df[feats])","30d9d820":"mean_squared_error(df['rentals'], train_preds)**(1\/2)","daa1b5f4":"rf.predict(test[feats])","988ce9a9":"test['count'] = np.exp(rf.predict(test[feats]))","08f9572f":"test[['datetime', 'count']].to_csv('rf_full_wo_month.csv', index=False)","eeda3708":"def cv(df, test, k, feats, y_name):\n    preds, score, fis = [], [], []\n    \n    chunk = df.shape[0] \/\/ k\n    for i in range(k):\n        if i + 1 < k:\n            valid = df.iloc[i*chunk: (i+1)*chunk]\n            train = df.iloc[: i*chunk].append(df.iloc[(i+1)*chunk:])\n            \n        else:\n            valid = df.iloc[i*chunk:]\n            train = df.iloc[: i*chunk] \n\n        rf = RandomForestRegressor(random_state=42, n_jobs=-1, n_estimators=200, min_samples_split=4, max_features=0.9, max_depth=17, oob_score=True)\n        \n        rf.fit(train[feats], train[y_name])\n        \n        score.append(mean_squared_error(valid[y_name], rf.predict(valid[feats]))**(1\/2))  \n        \n        preds.append(rf.predict(test[feats]))  \n        \n        fis.append(rf.feature_importances_)\n        \n        print(i, 'OK')\n    return pd.Series(score), pd.Series(preds).mean(), fis","a90bf071":"score, preds, fis = cv(df, test, 20, feats, 'rentals')","f161a654":"score.mean()","59395ffa":"test['count'] = np.exp(preds)","fee30d51":"test[['datetime', 'count']].to_csv('rf_cv_wo_day.csv', index=False)","c1f8b054":"fi = pd.Series(pd.DataFrame(fis).mean().values, index=feats)","0312b41e":"fi.sort_values().plot.barh(figsize=(20,10))","63204856":"feats = [c for c in feats if c not in ['holiday']]","16b78a19":"score, preds, fis = cv(df, test, 20, feats, 'rentals')","26d94a79":"score.mean()","dd4b7ce1":"test['count'] = np.exp(preds)","bdd8d905":"test[['datetime', 'count']].to_csv('rf_cv_wo_holiday.csv', index=False)","ce83bd41":"A `RandomForest` \u00e9 um conjunto de \u00e1rvores de decis\u00e3o. Essas \u00e1rvores s\u00e3o aleat\u00f3rias porque as linhas que s\u00e3o usadas para trein\u00e1-la s\u00e3o selecionadas de forma aleat\u00f3ria por um processo chamado de `bootstraping`.\n\n1. Faz bootstraping (seleciona linhas de forma aleat\u00f3ria **com repeti\u00e7\u00e3o**)\n2. O resultado do bootstraping \u00e9 que s\u00e3o geradas diversas \u00e1rvores diferentes a partir de um processo aleat\u00f3rio, o que significa que n\u00e3o existe um padr\u00e3o sistem\u00e1tico de gera\u00e7\u00e3o de cada uma dessas \u00e1rvores, nos permitindo a partir de v\u00e1rios modelos mais fracos, gerarmos um modelo robusto.\n\n\nAs previs\u00f5es de uma `RandomForest` s\u00e3o a m\u00e9dia das previs\u00f5es individuais de cada \u00e1rvore de decis\u00e3o (`DecisionTree`)","dcc6569c":"Avaliando o desempenho do nosso modelo nos dados de valida\u00e7\u00e3o","7631af13":"## Testando sem a Coluna Month","8f29812e":"## Otimizando uma RandomForest","8a8f9180":"Gera as previs\u00f5es no conjunto de treino:","a16ad9e7":"Como funciona uma `DecisionTree`?\n\n1. Vai coluna por coluna\n2. Ordena todos os valores da coluna\n3. Testa todos os splits poss\u00edveis\n4. Avalia qual de todos os splits poss\u00edveis de todas as colunas gera a melhor decis\u00e3o\n\nA `Decision Tree` consegue ter uma boa performance mesmo sem One Hot Encoding porque ela pode fazer v\u00e1rios splits na mesma vari\u00e1vel (ver exemplo acima onde, ocorrem dois splits seguidos na coluna `hour).","7fcd75c2":"score: 0.44036","fe8f2fbd":"Faz um fit usando todos os dados (`df`) e n\u00e3o apenas os dados que tinham sido selecionados como treino (`train`):","b93bdd9e":"Fazer predi\u00e7\u00f5es com o dataset inteiro","db1c4fc7":"## Valida\u00e7\u00e3o Usando OOB","68521090":"Instancia um objeto chamado `dt` (DecisionTree) a partir de uma classe `DecisionTreeRegressor`","9dae251c":"Um R\u00b2 de `1.0` significa que nosso modelo est\u00e1 perfeito:","48706738":"Separando os `DataFrames`:","cbd5cf62":"Fazendo as previs\u00f5es nos dados de valida\u00e7\u00e3o","3377aad4":"## Valida\u00e7\u00e3o Cruzada","42727811":"# \u00c1rvore de Decis\u00e3o","5b89332e":"Avalia a m\u00e9trica das previs\u00f5es geradas no conjunto de valida\u00e7\u00e3o:","e593ef9b":"Treina a nova `RandomForest`","cb27472c":"Treinando o modelo com os dados de treino","7c9c5a59":"Importando a fun\u00e7\u00e3o `mean_squared_error` para avaliar o desempenho do nosso modelo","7bb76844":"O R\u00b2 \u00e9 uma m\u00e9trica que j\u00e1 est\u00e1 incorporada no quando usamos o par\u00e2metro `oob_score=True`. Para acess\u00e1-la basta usarmos o comando abaixo:********","678fcf1a":"Um R\u00b2 negativo significa que nosso modelo \u00e9 pior do que um modelo que prev\u00ea a m\u00e9dia (o R\u00b2 pode ser inclusive extremamente negativo):","8565d77d":"Os principais par\u00e2metros que usamos para otimizar uma `RandomForest` s\u00e3o:\n    1. `max_depth` - Seleciona a profundidade das \u00e1rvores, isto \u00e9, o n\u00famero m\u00e1ximo de splits que ele vai fazer em sequ\u00eancia.\n    2. `min_samples_leaf` - Seleciona o n\u00famero m\u00ednimo de amostrar em uma folha necess\u00e1rios para que possamos fazer mais um split nessa folha\n    3. `max_features` - Seleciona o percentual de colunas que ser\u00e3o avaliadas como uma op\u00e7\u00e3o v\u00e1lida[](http:\/\/) em cada split","063f75e5":"## Fazer predi\u00e7\u00f5es com o dataset inteiro","61c168ae":"## Cross Validation Feature Importance","00b25738":"## Visualizando a \u00c1rvore de Decis\u00e3o","4c071a96":"\n## R\u00b2 Score","aaf289da":"score: 0.43718","d8fd45af":"Importando a classe `RandomForestRegressor`","6d6e2466":"## RandomForest","161a56e1":"## Kaggle - Bike Sharing Demand\n##### Predi\u00e7\u00e3o do uso de bicicletas compartilhadas em Washington, D.C.  \nhttps:\/\/www.kaggle.com\/c\/bike-sharing-demand\/data  \n3,251 times - 3 anos atr\u00e1s  \n\n\nO arquivo de dados que usaremos neste caderno tem dados de loca\u00e7\u00e3o por data e hora por um per\u00edodo de dois anos(2011-2012). Para esta competi\u00e7\u00e3o, o conjunto de treinamento \u00e9 composto pelos primeiros 19 dias de cada m\u00eas, enquanto o conjunto de testes \u00e9 do vig\u00e9simo dia at\u00e9 o final do m\u00eas.  \nVoc\u00ea deve prever a contagem total de bicicletas alugadas durante cada hora dos dados de teste, usando apenas as informa\u00e7\u00f5es dispon\u00edveis antes do per\u00edodo de loca\u00e7\u00e3o.","a856c2dc":"## Mudando o Nome da Coluna count para rentals","e4e3cb14":"Instancia uma nova `RandomForest`","dca2b31b":"## Importando Bibliotecas","6537c4ea":"As previs\u00f5es `OOB` (Out of Bag) s\u00e3o computadas \u00e1rvore a \u00e1rvore usando as linhas que n\u00e3o foram selecionadas para montar determinada \u00e1rvore em uma `DecisionTree` (lembre-se que as linhas s\u00e3o selecionadas aleatoriamente com repeti\u00e7\u00e3o, ent\u00e3o em m\u00e9dia 37% das linhas ficam fora de cada \u00e1rvore de decis\u00e3o).\n\nPara que a nossa `RandomForest` fa\u00e7a previs\u00f5es `OOB` precisamos passar o par\u00e2metro `oob_score=True` na hora que a instanciamos.","5bd1e65c":"# Python Machine Learning hands-on  \n  ","3c1040d6":"## Removendo a Coluna Day","279604e9":"## Criando um Set de Valida\u00e7\u00e3o Melhor","fd83cb44":"Desenha a \u00e1rvore de decis\u00e3o:","c534be99":"score: 0.45578","4ca99888":"Tratamento de datas","e9b7ee61":"Campos:  \ndatetime: data por hora + data e hora  \nseason: 1 = primavera, 2 = ver\u00e3o, 3 = outono, 4 = inverno  \nholiday: se o dia \u00e9 considerado um feriado  \nworkingday: se o dia n\u00e3o \u00e9 um fim de semana nem feriado  \nweather: 1: Limpo, Poucas nuvens, Pouco nublado, Pouco nublado\n2: N\u00e9voa + Nublado, N\u00e9voa + nuvens quebradas, N\u00e9voa + Algumas nuvens, N\u00e9voa\n3: Nev\u00f5es fracos, Chuva fraca + Trovoada + Nuvens dispersas, Chuva fraca + Nuvens dispersas\n4: Chuva forte + Paletes de Gelo + Trovoada + N\u00e9voa, Neve + Nevoeiro  \ntemp: temperatura em Celsius  \natemp: \"parece\" temperatura em Celsius  \nhumidity: umidade relativa  \nwindspeed: velocidade do vento  \ncasual: n\u00famero de loca\u00e7\u00f5es de usu\u00e1rios n\u00e3o registradas iniciadas  \nregistered: n\u00famero de loca\u00e7\u00f5es de usu\u00e1rios registrados iniciadas  \ncount: n\u00famero de alugu\u00e9is totais  ","acf85ee1":"Autores :  \nJo\u00e3o Ferreira (meetup: PyData Bras\u00edlia)  \nFernando Melo (meetup: Machine Learning Bras\u00edlia)","555e2df8":"**Fa\u00e7a Submiss\u00e3o das suas predi\u00e7\u00f5es para a competi\u00e7\u00e3o no Kaggle**  \nPrimeiro voc\u00ea precisa dar commit no seu kernel(caderno jupyter).  \nVoc\u00ea precisa tornar o seu kernel \"Public\".  \n    Clique no bot\u00e3o Publicar azul no topo da tela do seu kernel. Levar\u00e1 algum tempo para o seu kernel rodar. Quando terminar, sua barra de navega\u00e7\u00e3o na parte superior da tela ter\u00e1 uma guia para Sa\u00edda(Output). Isso s\u00f3 aparece se voc\u00ea tiver escrito um arquivo de sa\u00edda (como fizemos na etapa Preparar Arquivo para Envio).\n\n![image.png](attachment:image.png)\n\n\u00daltimos passos  \nClique no bot\u00e3o Output. Isso levar\u00e1 voc\u00ea a uma tela com uma op\u00e7\u00e3o para enviar para a competi\u00e7\u00e3o.   \nAcertar isso e voc\u00ea ver\u00e1 como o seu modelo se comportou.\nEventualmente, caso a competi\u00e7\u00e3o j\u00e1 esteja encerrada, seu nome n\u00e3o aparecer no Public Leaderboard.\nO Private Leaderboard s\u00f3 ficar\u00e1 dispon\u00edvel , assim que a competi\u00e7\u00e3o encerrar.\nSe voc\u00ea quiser voltar para melhorar seu modelo, clique no bot\u00e3o Editar, que reabre o kernel.   \nVoc\u00ea precisar\u00e1 executar novamente todas as c\u00e9lulas ao reabrir o kernel.","be5b7500":"Avalia a m\u00e9trica da competi\u00e7\u00e3o em todos os dados a partir das previs\u00f5es `OOB`:","3d4ad4c9":"Importa a classe `DecisionTreeRegressor` do scikit-learn (`sklearn`)","936dbe8b":"## Importando arquivos","790e5da6":"## Rodando o Modelo Sem a Coluna Holiday","ac88ccdc":"Esse comando \u00e9 equivalente a usarmos o `r2_score` implementado pelo `sklearn`:","c026a691":"Gera as previs\u00f5es no conjunto de valida\u00e7\u00e3o:","97b170a6":"Criando a coluna `rolling_temp`","e649f532":"Juntando os `DataFrames`","2ad6b57e":"Instancia uma nova `RandomForest`:","d7b7b35f":"Treina a \u00e1rvore de decis\u00e3o com base nos dados de treinamento (`train[feats]`), e diz quais s\u00e3o as respostas (`train[rentals]`):","dbf5d98a":"## Testando sem a Coluna Day","a664dea8":"**FIM**","e0b21e02":"Gerando o output do modelo:","1eb4b07e":"## Selecionando as Colunas que Iremos Executar o Modelo","9287804c":"Instanciando o objeto `rf` (RandomForest) a partir da classe `RandomForestRegressor`","800fb35a":"## Separandos os conjuntos de Treino e Valida\u00e7\u00e3o","335cecbd":"Fazendo previs\u00f5es nos dados de teste","ad12b962":"## Pr\u00e9-processamento dos Dados","b5984134":"Um R\u00b2 de `0.0` significa que nosso modelo est\u00e1 t\u00e3o bom quanto um modelo que prev\u00ea a m\u00e9dia:","987acc00":"**Prepara arquivo para Envio(submiss\u00e3o)**","15d5c276":"Importa fun\u00e7\u00e3o `draw_tree` que serve para visualisarmos a \u00e1rvore de decis\u00e3o","cf9b7b94":"Avaliando o desempenho do nosso modelo nos dados de treino","398fe439":"## Pegando o log da coluna count","8e6c1675":"Avalia a m\u00e9trica das previs\u00f5es geradas no conjunto de treino:"}}