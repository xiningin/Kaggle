{"cell_type":{"77df34fd":"code","c96beeef":"code","435e1b6b":"code","f0b343dc":"code","50d431bf":"code","50d1d825":"code","8774b1db":"code","ab0c5c2f":"code","820f87ee":"code","5365f2b9":"code","8e9753f2":"code","f10240ee":"code","1ec5d688":"code","5e055091":"code","2f571bce":"code","b5d42417":"code","f6663649":"code","fe5bed28":"code","26c54662":"code","d4c1b216":"markdown","801608ad":"markdown","8c22718f":"markdown","28992924":"markdown","c6afc818":"markdown","caa9b640":"markdown"},"source":{"77df34fd":"import sys\n\nsys.path.insert(0, '..\/input\/computer-vision-training-fcis-21\/')\n\nimport utils\n\nworking_dir = '..\/input\/computer-vision-training-fcis-21\/224\/content\/flowers\/224\/'\n\ntrain_dir = f'{working_dir}\/train\/train\/'\ntest_dir = f'{working_dir}\/test\/test\/'","c96beeef":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","435e1b6b":"train_nbatch = utils.num_of_batches(train_dir + '\/origin')\n\nprint('No. Batches: %i'%train_nbatch)","f0b343dc":"start = 0\nend = 5\n\nxdata = utils.read_nbatch(train_dir + '\/origin', start, end)\nydata = utils.read_nbatch(train_dir + '\/masks', start, end)\n\nprint(xdata['x'].shape, ydata['x'].shape)","50d431bf":"def plot(images: np.ndarray, nrows: int = 1, ncols: int = 4, figsize: tuple = (10, 6)):\n\n    fig, axs = plt.subplots(nrows=nrows, ncols=ncols, figsize=figsize)\n    \n    axs = axs.flatten()\n\n    for i in range(len(axs)):\n\n        axs[i].imshow(images[i].squeeze())\n\n        axs[i].grid(None)\n        axs[i].axis('off')\n    \n    \n    fig.tight_layout()\n    \n    return fig, axs","50d1d825":"def sample(images, sample_size=4, random_state=42):\n    \n    random = np.random.RandomState(random_state)\n\n    indices = np.arange(0, 320)\n\n    random.shuffle(indices)\n    \n    indices = indices[:sample_size]    \n    \n    return images[indices]","8774b1db":"x_sample = sample(xdata['x'])\ny_sample = sample(ydata['x'])\n\nprint(x_sample.shape, y_sample.shape)","ab0c5c2f":"plt.style.use('grayscale')\n\nfig, ax = plot(x_sample)\nfig, ax = plot(y_sample)","820f87ee":"import tensorflow as tf\n\nfrom tensorflow.keras.layers import Input, Dense, Activation, BatchNormalization, Flatten, Reshape\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras import optimizers, losses, metrics","5365f2b9":"inputs = Input(shape=(224, 224, 3))\n\nz = Flatten()(inputs)\n\nz = Dense(16)(z)\nz = BatchNormalization()(z)\nz = Activation('relu')(z)\n\noutputs = Dense(50176)(z)\noutputs = Activation('sigmoid')(outputs)\n\noutputs = Reshape(target_shape=(224, 224))(outputs)\n\nmodel = Model(inputs, outputs)\n\noptimizer = optimizers.Adam(learning_rate=1e-3)\nloss = losses.BinaryCrossentropy('loss')\nmetric = metrics.MeanIoU(2, name='iou')\n\nmodel.compile(optimizer=optimizer, loss=loss, metrics=metric)","8e9753f2":"model.summary()","f10240ee":"model.fit(xdata['x'], ydata['x'], epochs=5, batch_size=64)","1ec5d688":"test_nbatches = utils.num_of_batches(test_dir + '\/origin')\n\nprint('No. Batches: %i'%test_nbatches)","5e055091":"test_data = utils.read_nbatch(test_dir + 'origin\/', 108, 108 + test_nbatches)\n\ntest_size = len(test_data['id'])\n\nprint(test_size)","2f571bce":"test_ids = test_data['id']\n\ntest_masks = model.predict(test_data['x']) > 0.5","b5d42417":"x_sample = sample(test_data['x'])\ny_sample = sample(test_masks)","f6663649":"plt.style.use('grayscale')\n\nfig, ax = plot(x_sample)\nfig, ax = plot(y_sample)","fe5bed28":"submission = utils.Submission(shape=(224, 224))\n\nsubmission.init()\n\nfor i in tqdm(range(test_size)):\n    \n    submission.update(test_ids[i], test_masks[i])","26c54662":"submission.export('submission.csv')","d4c1b216":"# Submission","801608ad":"# Model","8c22718f":"# Predict","28992924":"# Import Modules","c6afc818":"# Read N-Batches","caa9b640":"# Explore"}}