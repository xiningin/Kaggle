{"cell_type":{"5d2fa1fa":"code","3dd848c7":"code","6745c486":"code","ee722e93":"code","28fad3bc":"code","1ea10948":"code","fd61a9ad":"code","c5664c18":"code","e76aa4b7":"code","e4be9a47":"code","55281cb7":"code","278b3be2":"code","88dab9ff":"code","56af65a2":"code","6de74c4c":"code","7f4e5461":"code","22f89f24":"code","3a0576bb":"code","749a022f":"code","37cee42e":"code","9c0f3371":"code","1fc8c20d":"markdown","2befe61c":"markdown","4ca848b7":"markdown","3ea5b351":"markdown","dacd8674":"markdown","0998f8f2":"markdown"},"source":{"5d2fa1fa":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import  cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nfrom sklearn.metrics import accuracy_score\n%matplotlib inline","3dd848c7":"data=pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")\n","6745c486":"data.head()","ee722e93":"data.isnull().sum()","28fad3bc":"data.describe()","1ea10948":"data.columns","fd61a9ad":"sns.countplot(data=data ,x=\"Outcome\",hue=\"Outcome\")\nplt.title(\"Womans have diabetes\")","c5664c18":"fig, ax=plt.subplots(figsize=(5,5))\nsns.boxplot(y=\"Age\",x='Outcome',hue='Outcome',data=data)\nplt.title(\" Age \")","e76aa4b7":"for i in data.columns:\n    plt.figsize=(12,10)\n    plt.hist(data[i])\n    plt.title(i)\n    plt.show()","e4be9a47":"sns.lineplot(data=data ,x='Age',hue='Age',y=\"Glucose\")","55281cb7":"sns.pairplot(x_vars=[\"Glucose\",\"Pregnancies\",\"BMI\"],y_vars=\"Age\",hue=\"Outcome\",data=data)","278b3be2":"sns.pairplot(data=data,hue=\"Outcome\")","88dab9ff":"#Use correlations\ncorr_matrix=data.corr()\ncorr_matrix","56af65a2":"import seaborn as sns\n#get correlations of each features in dataset\ncorr_matrix = data.corr()\ntop_corr_features = corr_matrix.index\nplt.figure(figsize=(8,6))\n#plot heat map\ng=sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","6de74c4c":"x=data[[\"Pregnancies\",\"BloodPressure\",\"Glucose\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\"]]\ncol=[\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\"]\nfrom sklearn.preprocessing import StandardScaler\nX_scaler=StandardScaler()\nX=X_scaler.fit_transform(x)\nscaled_features_df = pd.DataFrame(X,columns=col)","7f4e5461":"y=data.Outcome\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nx_train, x_test, y_train, y_test = train_test_split(scaled_features_df,y, test_size=0.2, random_state=0)","22f89f24":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nlog_clf = LogisticRegression()\nrnd_clf = RandomForestClassifier()\nsvm_clf = SVC()\ntree_clf = DecisionTreeClassifier( max_depth=4, criterion='gini')\nvoting_clf = VotingClassifier(\nestimators=[('lr', log_clf), ('rf', rnd_clf), ('svc', svm_clf), ('tree', tree_clf)],\nvoting='hard')\nvoting_clf.fit(x_train, y_train)\n\nfrom sklearn.metrics import accuracy_score\nfor clf in (log_clf, rnd_clf, svm_clf,tree_clf, voting_clf):\n    clf.fit(x_train,y_train)\n    y_pred = clf.predict(x_test)\n    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))","3a0576bb":"ax = sns.regplot(x=\"Glucose\", y=\"Outcome\", data=data,\n                 logistic=True, n_boot=500, y_jitter=.03)","749a022f":"from sklearn.linear_model import LogisticRegression\nlr_clf= LogisticRegression()\nlr_clf.fit(x_train,y_train)\npred=lr_clf.predict(x_test)\nprint(\"Accuracy for Logistic Regression on  data: \",accuracy_score(y_test,pred))\n#  0.8246753246753247","37cee42e":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score,recall_score,f1_score\nprint (\"confusion_matrix:\",confusion_matrix(y_test,pred))\nprint(\"precision:\",precision_score(y_test,pred))\nprint(\"recall:\",recall_score(y_test,pred))\nprint(\"f1_score :\",f1_score(y_test,pred))","9c0f3371":"from sklearn.metrics import roc_curve, auc\n\nlogistic_fpr, logistic_tpr, threshold = roc_curve(y_test,pred)\nauc_logistic = auc(logistic_fpr, logistic_tpr)\n\n\n\nplt.figure(figsize=(5, 5), dpi=100)\nplt.plot(logistic_fpr, logistic_tpr, marker='.', label='Logistic (auc = %0.3f)' % auc_logistic)\n\nplt.xlabel('False Positive Rate -->')\nplt.ylabel('True Positive Rate -->')\n\nplt.legend()\n\nplt.show()","1fc8c20d":"# Model Evaluation Metrics","2befe61c":"# data visualization","4ca848b7":"# Load Necessary Libraries ","3ea5b351":"**Feature Enginering**","dacd8674":"# Voting Classifier","0998f8f2":"# Build model use  Logistic Regression"}}