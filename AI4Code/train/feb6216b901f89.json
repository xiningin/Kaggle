{"cell_type":{"9df438a9":"code","d895b8b5":"code","22c7a3f4":"code","443914c6":"code","6b0247c4":"code","ac6d93f3":"code","e5af62f8":"code","ded87621":"code","5f91b60a":"code","ff0015f4":"code","f12692a1":"code","539a17a3":"code","996151ca":"code","c0b9ea51":"code","88abefc6":"code","4e90d627":"code","fe7d94ce":"code","de493c0d":"code","0104af2d":"code","6102d593":"code","9c52fb8f":"code","57eff58c":"code","f84ccf12":"code","7d3bc762":"code","a4516982":"code","787190d3":"code","3db9362e":"code","54971118":"code","c96e65d9":"code","3d39370e":"code","6fffd5be":"code","9e71cef6":"code","21c403e1":"code","4f3a7193":"code","20b550e8":"code","453cc353":"code","8675e28b":"code","c951d79f":"code","55e73dfe":"code","898b0373":"code","b3b83752":"code","8ecef77f":"code","eb325cb9":"code","b17d7463":"code","1e143473":"code","c0698bc6":"code","af058548":"code","d97a087e":"code","511ce0cf":"code","653dff49":"code","70029cc4":"code","ed57a596":"code","c7799950":"code","445aad94":"code","7702ae1c":"code","a7aab4ae":"markdown","ac71e37b":"markdown","58555bdc":"markdown","dfe6769f":"markdown","68a2f5d1":"markdown","5e7b357f":"markdown"},"source":{"9df438a9":"#importing libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(font_scale=1)","d895b8b5":"#importing data from csv file using pandas\ntrain=pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\ntest=pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')\n\ntrain.head()","22c7a3f4":"#lets create scatterplot of GrLivArea and SalePrice\nsns.scatterplot(x='GrLivArea',y='SalePrice',data=train)","443914c6":"#as per above plot we can see there are two outliers which can affect on out model,lets remove those outliers\ntrain=train.drop(train.loc[(train['GrLivArea']>4000) & (train['SalePrice']<200000)].index,0)\ntrain.reset_index(drop=True, inplace=True)","6b0247c4":"#lest we how its look after removing outliers\nsns.scatterplot(x='GrLivArea',y='SalePrice',data=train)","ac6d93f3":"#lets create heatmap first of all lest see on which feature SalePrice is dependent\ncorr=train.drop('Id',1).corr().sort_values(by='SalePrice',ascending=False).round(2)\nprint(corr['SalePrice'])","e5af62f8":"#here we can see SalePrice mostly dependent on this features OverallQual,GrLivArea,TotalBsmtSF,GarageCars,1stFlrSF,GarageArea \nplt.subplots(figsize=(12, 9))\nsns.heatmap(corr, vmax=.8, square=True);","ded87621":"#now lets create heatmap for top 10 correlated features\ncols =corr['SalePrice'].head(10).index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1)\nhm = sns.heatmap(cm, annot=True, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","5f91b60a":"#lets see relation of 10 feature with SalePrice through Pairplot\nsns.pairplot(train[corr['SalePrice'].head(10).index])","ff0015f4":"#lets store number of test and train rows\ntrainrow=train.shape[0]\ntestrow=test.shape[0]","f12692a1":"#copying id data\ntestids=test['Id'].copy()","539a17a3":"#copying sales priece\ny_train=train['SalePrice'].copy()","996151ca":"#combining train and test data\ndata=pd.concat((train,test)).reset_index(drop=True)\ndata=data.drop('SalePrice',1)","c0b9ea51":"#dropping id columns\ndata=data.drop('Id',axis=1)","88abefc6":"#checking missing data\nmissing=data.isnull().sum().sort_values(ascending=False)\nmissing=missing.drop(missing[missing==0].index)\nmissing","4e90d627":"#PoolQC is quality of pool but mostly house does not have pool so putting NA\ndata['PoolQC']=data['PoolQC'].fillna('NA')\ndata['PoolQC'].unique()","fe7d94ce":"#MiscFeature: mostly house does not have it so putting NA\ndata['MiscFeature']=data['MiscFeature'].fillna('NA')\ndata['MiscFeature'].unique()","de493c0d":"#Alley,Fence,FireplaceQu: mostly house does not have it so putting NA\ndata['Alley']=data['Alley'].fillna('NA')\ndata['Alley'].unique()\n\ndata['Fence']=data['Fence'].fillna('NA')\ndata['Fence'].unique()\n\ndata['FireplaceQu']=data['FireplaceQu'].fillna('NA')\ndata['FireplaceQu'].unique()","0104af2d":"#LotFrontage: all house have linear connected feet so putting most mean value\ndata['LotFrontage']=data['LotFrontage'].fillna(data['LotFrontage'].dropna().mean())","6102d593":"#GarageCond,GarageQual,GarageFinish\ndata['GarageCond']=data['GarageCond'].fillna('NA')\ndata['GarageCond'].unique()\n\ndata['GarageQual']=data['GarageQual'].fillna('NA')\ndata['GarageQual'].unique()\n\ndata['GarageFinish']=data['GarageFinish'].fillna('NA')\ndata['GarageFinish'].unique()","9c52fb8f":"#GarageYrBlt,GarageType,GarageArea,GarageCars putting 0\ndata['GarageYrBlt']=data['GarageYrBlt'].fillna(0)\ndata['GarageType']=data['GarageType'].fillna(0)\ndata['GarageArea']=data['GarageArea'].fillna(0)\ndata['GarageCars']=data['GarageCars'].fillna(0)","57eff58c":"#BsmtExposure,BsmtCond,BsmtQual,BsmtFinType2,BsmtFinType1 \ndata['BsmtExposure']=data['BsmtExposure'].fillna('NA')\ndata['BsmtCond']=data['BsmtCond'].fillna('NA')\ndata['BsmtQual']=data['BsmtQual'].fillna('NA')\ndata['BsmtFinType2']=data['BsmtFinType2'].fillna('NA')\ndata['BsmtFinType1']=data['BsmtFinType1'].fillna('NA')\n\n#BsmtFinSF1,BsmtFinSF2 \ndata['BsmtFinSF1']=data['BsmtFinSF1'].fillna(0)\ndata['BsmtFinSF2']=data['BsmtFinSF2'].fillna(0)","f84ccf12":"#MasVnrType,MasVnrArea\ndata['MasVnrType']=data['MasVnrType'].fillna('NA')\ndata['MasVnrArea']=data['MasVnrArea'].fillna(0)","7d3bc762":"#MSZoning \ndata['MSZoning']=data['MSZoning'].fillna(data['MSZoning'].dropna().sort_values().index[0])","a4516982":"#Utilities\ndata['Utilities']=data['Utilities'].fillna(data['Utilities'].dropna().sort_values().index[0])","787190d3":"#BsmtFullBath\ndata['BsmtFullBath']=data['BsmtFullBath'].fillna(0)\n\n#Functional\ndata['Functional']=data['Functional'].fillna(data['Functional'].dropna().sort_values().index[0])\n\n#BsmtHalfBath\ndata['BsmtHalfBath']=data['BsmtHalfBath'].fillna(0)\n\n#BsmtUnfSF\ndata['BsmtUnfSF']=data['BsmtUnfSF'].fillna(0)","3db9362e":"#Exterior2nd\ndata['Exterior2nd']=data['Exterior2nd'].fillna('NA')\n\n#Exterior1st\ndata['Exterior1st']=data['Exterior1st'].fillna('NA')","54971118":"#TotalBsmtSF\ndata['TotalBsmtSF']=data['TotalBsmtSF'].fillna(0)","c96e65d9":"#SaleType\ndata['SaleType']=data['SaleType'].fillna(data['SaleType'].dropna().sort_values().index[0])","3d39370e":"#Electrical\ndata['Electrical']=data['Electrical'].fillna(data['Electrical'].dropna().sort_values().index[0])","6fffd5be":"#KitchenQual\ndata['KitchenQual']=data['KitchenQual'].fillna(data['KitchenQual'].dropna().sort_values().index[0])","9e71cef6":"#lets check any missing remain\nmissing=data.isnull().sum().sort_values(ascending=False)\nmissing=missing.drop(missing[missing==0].index)\nmissing","21c403e1":"#great no missing data","4f3a7193":"#as we know some feature are highly co-related with SalePrice so lets create some feature using these features\ndata['GrLivArea_2']=data['GrLivArea']**2\ndata['GrLivArea_3']=data['GrLivArea']**3\ndata['GrLivArea_4']=data['GrLivArea']**4\n\ndata['TotalBsmtSF_2']=data['TotalBsmtSF']**2\ndata['TotalBsmtSF_3']=data['TotalBsmtSF']**3\ndata['TotalBsmtSF_4']=data['TotalBsmtSF']**4\n\ndata['GarageCars_2']=data['GarageCars']**2\ndata['GarageCars_3']=data['GarageCars']**3\ndata['GarageCars_4']=data['GarageCars']**4\n\ndata['1stFlrSF_2']=data['1stFlrSF']**2\ndata['1stFlrSF_3']=data['1stFlrSF']**3\ndata['1stFlrSF_4']=data['1stFlrSF']**4\n\ndata['GarageArea_2']=data['GarageArea']**2\ndata['GarageArea_3']=data['GarageArea']**3\ndata['GarageArea_4']=data['GarageArea']**4","20b550e8":"#lets add 1stFlrSF and 2ndFlrSF and create new feature floorfeet\ndata['Floorfeet']=data['1stFlrSF']+data['2ndFlrSF']\ndata=data.drop(['1stFlrSF','2ndFlrSF'],1)","453cc353":"#MSSubClass,MSZoning\ndata=pd.get_dummies(data=data,columns=['MSSubClass'],prefix='MSSubClass')\ndata=pd.get_dummies(data=data,columns=['MSZoning'],prefix='MSZoning')\ndata.head()","8675e28b":"#Street,Alley,LotShape,LandContour,Utilities,LotConfig,LandSlope,Neighborhood,Condition1,Condition2,BldgType,HouseStyle\ndata=pd.get_dummies(data=data,columns=['Street','Alley','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle'])\ndata.head()","c951d79f":"#OverallQual\ndata=pd.get_dummies(data=data,columns=['OverallQual'],prefix='OverallQual')","55e73dfe":"#OverallCond\ndata=pd.get_dummies(data=data,columns=['OverallCond'],prefix='OverallCond')","898b0373":"#we have remodel year data so lest one new feature home is remodeled or not\ndata['Remodeled']=0\ndata.loc[data['YearBuilt']!=data['YearRemodAdd'],'Remodeled']=1\ndata=data.drop('YearRemodAdd',1)\ndata=pd.get_dummies(data=data,columns=['Remodeled'])","b3b83752":"#creating dummies fo all categorical data\ndata=pd.get_dummies(data=data,columns=['RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical','KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','PoolQC','Fence','MiscFeature','SaleType','SaleCondition'])","8ecef77f":"#lets add all bath in one feature\ndata['Bath']=data['BsmtFullBath']+data['BsmtHalfBath']*.5+data['FullBath']+data['HalfBath']*.5\ndata=data.drop(['BsmtFullBath','BsmtHalfBath','FullBath','HalfBath'],1)","eb325cb9":"#dummies\ndata=pd.get_dummies(data=data,columns=['BedroomAbvGr','KitchenAbvGr','TotRmsAbvGrd'])","b17d7463":"#here we  has one more outliers lets replace it with 0\ndata.loc[data['GarageYrBlt']==2207.,'GarageYrBlt']=0","1e143473":"#great we have done Feature Engineering","c0698bc6":"#lets import StandardScaler from sklearn for feature scalling\nfrom sklearn.preprocessing import StandardScaler","af058548":"#lets split data using trainrow data and scale data\nx_train=data.iloc[:trainrow]\nx_test=data.iloc[trainrow:]\nscaler=StandardScaler()\nscaler=scaler.fit(x_train)\nx_train_scaled=scaler.transform(x_train)\nx_test_scaled=scaler.transform(x_test)","d97a087e":"#great we have done with feature scalling, now lets do modeling","511ce0cf":"#we will use all the basic algorithm one by one\n\n#1.LinearRegression\nfrom sklearn.linear_model import LinearRegression\nreg_liner=LinearRegression()\nreg_liner.fit(x_train_scaled,y_train)\nreg_liner.score(x_train_scaled,y_train)","653dff49":"#2.LogisticRegression\nfrom sklearn.linear_model import LogisticRegression\nreg_logistic=LogisticRegression()\nreg_logistic.fit(x_train_scaled,y_train)\nprint(reg_logistic.score(x_train_scaled,y_train))","70029cc4":"#3.XGBoost one of the powefull ML Algorithm\nfrom xgboost import XGBRegressor\n\nmy_model = XGBRegressor(n_estimators=1000, learning_rate=0.05, n_jobs=4)\nmy_model.fit(x_train_scaled, y_train, \n             early_stopping_rounds=5, \n             eval_set=[(x_train_scaled, y_train)], \n             verbose=False)\nprint(my_model.score(x_train_scaled,y_train))","ed57a596":"#4.DecisionTree\nfrom sklearn.tree import DecisionTreeRegressor\ntree=DecisionTreeRegressor(criterion='mse',max_depth=3)\ntree.fit(x_train_scaled,y_train)\nprint(tree.score(x_train_scaled,y_train))","c7799950":"#5.Support Vector Regression\nfrom sklearn import svm\nsvm_model=svm.SVC()\nsvm_model.fit(x_train_scaled,y_train)\nprint(svm_model.score(x_train_scaled,y_train))","445aad94":"#6.Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.naive_bayes import MultinomialNB\ngnb=GaussianNB()\nmnb=MultinomialNB()\ngnb.fit(x_train_scaled,y_train)\nmnb.fit(x_train,y_train)\nprint(gnb.score(x_train_scaled,y_train))\nprint(mnb.score(x_train,y_train))","7702ae1c":"#7.Random Forest\nfrom sklearn.ensemble import RandomForestRegressor\nrfr=RandomForestRegressor(n_estimators=500)\nrfr.fit(x_train_scaled,y_train)\nprint(rfr.score(x_train_scaled,y_train))","a7aab4ae":"Data Visualization","ac71e37b":"great we have done some algorithms, now we can predict test data.","58555bdc":"Feature Scalling","dfe6769f":"Missing Data","68a2f5d1":"Feature Engineering","5e7b357f":"<h1>Check out my other Notebooks<\/h1>\n    <font size='4'><a href=\"https:\/\/www.kaggle.com\/vishalvanpariya\/basic-visualization-for-beginners\" target=\"_blank\">Basic Visualization Techniques<\/a><br>\n<a href=\"https:\/\/www.kaggle.com\/vishalvanpariya\/data-explanation-titanic\" target=\"_blank\">Titanic EDA<\/a><br>\n<a href=\"https:\/\/www.kaggle.com\/vishalvanpariya\/titanic-top-6\" target=\"_blank\">Titanic Notebook<\/a><br>\n<a href=\"https:\/\/www.kaggle.com\/vishalvanpariya\/nlp-for-beginners\" target=\"_blank\">NLP<\/a><br><font>"}}