{"cell_type":{"2f12d945":"code","701d52ac":"code","67319406":"code","f2aba247":"code","775c642b":"code","024b575c":"code","e163d624":"code","170398e9":"code","a7e0b748":"code","8ebb8595":"code","338d7aa2":"code","5310f485":"code","c6fdc8dd":"code","a011d5e6":"code","123fe26b":"code","ad6edf6e":"code","bbc29f21":"code","a2eb8580":"code","22d6389a":"code","87a9eada":"code","d8a340db":"code","ccd1b050":"code","ce9987b6":"code","e06eab55":"code","08a21e9f":"markdown","9d55ffc3":"markdown","22284116":"markdown","46cb6132":"markdown","ab04b3f6":"markdown","feca9cfb":"markdown","32b2c11e":"markdown","16705781":"markdown","b3dc6aa8":"markdown","de748bbb":"markdown","6721e8d9":"markdown","80670c0d":"markdown","1475579b":"markdown","d6966b76":"markdown","429cb8d2":"markdown","585ecfcf":"markdown","eb346542":"markdown","7676a9fc":"markdown","db00d932":"markdown","235e3c57":"markdown","a50b4578":"markdown","1a7e56f4":"markdown","bcd8c462":"markdown","18d45d92":"markdown","9d43f27a":"markdown","0e38e966":"markdown","b3e750e2":"markdown","35eb1b71":"markdown","60391429":"markdown","acc58a3a":"markdown","b48d849e":"markdown","b6f2d358":"markdown","033e69ee":"markdown","271efeb3":"markdown","b0bf83c4":"markdown","dcf46213":"markdown","872219d8":"markdown"},"source":{"2f12d945":"import random\nimport plotly\nimport numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt","701d52ac":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nmapbox_access_token = user_secrets.get_secret(\"mapbox_access_token\")","67319406":"path = Path('\/kaggle\/input\/birdsong-recognition')\ntrain = pd.read_csv(path\/'train.csv')","f2aba247":"train.info()","775c642b":"train['_time'] = pd.to_datetime(train.time, errors='coerce').dt.strftime('%H:%M:%S')\ntrain['_date'] = pd.to_datetime(train.date, format='%Y-%m-%d %H:%M:%S', errors='coerce').dt.strftime('%Y-%m-%d')\n# creating a new column: _datetime\ntrain['_datetime'] = pd.to_datetime(train['_date'] + ' ' + train['_time'], errors='coerce').dt.strftime('%Y-%m-%d %H:%M:%S')","024b575c":"train[train._datetime.isna()][['date', 'time', '_datetime']].head(10)","e163d624":"fig = go.Figure(data=[go.Histogram(x=pd.to_datetime(train._time, format='%H:%M:%S').dt.round('15min'))]) # rounding to nearest quarter of an hour\nfig.show()","170398e9":"print(train._time.isna().sum())\ntrain[train._time.isna()]['time'].unique()","a7e0b748":"print(train._date.isna().sum())\ntrain[train._date.isna()]['date'].unique()","8ebb8595":"train['_year_month'] = train.date.apply(lambda x : '-'.join(x.split('-')[:2])) # 'keeping only year-month and excluding date'\ntrain['_year_month'] = pd.to_datetime(train._year_month, format='%Y-%m', errors='coerce')\ntrain._year_month.isna().sum()","338d7aa2":"fig = go.Figure(data=[go.Histogram(x=train._year_month)])\nfig.show()","5310f485":"fig = go.Figure(data=[go.Histogram(x=pd.DatetimeIndex(train._year_month).month)])\nfig.show()","c6fdc8dd":"fig = go.Figure(data=[go.Histogram(x=pd.DatetimeIndex(train._year_month).year)])\nfig.show()","a011d5e6":"train['_year_month'] = train._year_month.dt.strftime('%Y-%m') # converting to string \ntrain['_elevation'] = train.elevation.apply(lambda x : x.replace('m', '').replace('~', '').replace(',', '').replace('?', '').strip()) # replace\ntrain.loc[train._elevation.isin(['1650-1900', '930-990', 'Unknown', '-']), '_elevation'] = '' # assign empty string \ndf = train.loc[(train.longitude != 'Not specified') & (train.latitude != 'Not specified'), ['country', 'latitude', 'longitude', '_elevation', '_year_month', 'ebird_code', 'elevation']]\ndf.loc[df._elevation == '', '_elevation'] = None # empty string with None\ndf['_elevation'] = df._elevation.astype(float) # convert to float\ndf['_elevation'].fillna(0.0, inplace=True) # replace NaN with 0.0\ndf['_elevation'] = (df._elevation + 100.0)\/80.0 # scale values ","123fe26b":"df.info()","ad6edf6e":"df = df.loc[~df._year_month.isna(), :] # dropping all NaN dates","bbc29f21":"df = df.set_index('_year_month') # setting date as the dataframe index","a2eb8580":"df.head()","22d6389a":"# total no of birds\nnumber_of_colors = 264\n\n# list of random hex-valued colors \ncolor = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])\n             for i in range(number_of_colors)]\n\nebird_code = df.ebird_code.unique().tolist()\n# get ID and color for each bird\nEBIRD_CODE = {k : color[i] for i, k in enumerate(ebird_code)}\n# assign them to the dataframe\ndf['_color'] = df.ebird_code.apply(lambda x : EBIRD_CODE[x])","87a9eada":"months = sorted(df.index.unique().tolist())","d8a340db":"frames = [{   \n    'name':'frame_{}'.format(x),\n    'data':[{\n        'type':'scattermapbox',\n        'lat':np.array(df.xs(x)['latitude']),\n        'lon':np.array(df.xs(x)['longitude']),\n        'marker':go.scattermapbox.Marker(\n            size= 9 + df.xs(x)['_elevation'],\n            color=df.xs(x)['_color']\n        ),\n        'customdata': np.stack((df.xs(x)['ebird_code'], df.xs(x)['elevation'], df.xs(x)['country']), axis=-1),\n        'hovertemplate': \"<extra><\/extra> \ud83d\udc26 <em>%{customdata[0]}<\/em><br> \ud83d\udccf %{customdata[1]}<br> \ud83d\uddfa\ufe0f %{customdata[2]}<br>\",\n    }],           \n} for x in months]","ccd1b050":"sliders = [{\n    'transition':{'duration': 0},\n    'x':0.08, \n    'len':0.88,\n    'currentvalue':{'font':{'size':15}, 'prefix':'\ud83d\udcc5 ', 'visible':True, 'xanchor':'center'},  \n    'steps':[\n        {\n            'label':x,\n            'method':'animate',\n            'args':[\n                ['frame_{}'.format(x)],\n                {'mode':'immediate', 'frame':{'duration':100, 'redraw': True}, 'transition':{'duration':50}}\n              ],\n        } for x in months]\n}]","ce9987b6":"play_button = [\n    {\n        \"buttons\": [\n            {\n                \"args\": [None, {\"frame\": {\"duration\": 100, \"redraw\": True},\n                                \"fromcurrent\": True, \"transition\": {\"duration\": 50}}],\n                \"label\": \"Play\",\n                \"method\": \"animate\"\n            },\n            {\n                \"args\": [[None], {\"frame\": {\"duration\": 0, \"redraw\": False},\n                                  \"mode\": \"immediate\",\n                                  \"transition\": {\"duration\": 0}}],\n                \"label\": \"Pause\",\n                \"method\": \"animate\"\n            }\n        ],\n        \"direction\": \"left\",\n        \"pad\": {\"r\": 10, \"t\": 87},\n        \"showactive\": True,\n        \"type\": \"buttons\",\n        \"x\": 0.1,\n        \"xanchor\": \"right\",\n        \"y\": 0,\n        \"yanchor\": \"top\"\n    }\n]","e06eab55":"# defining the initial state\ndata = frames[0]['data']\n\n# adding all sliders and play button to the layout\nlayout = go.Layout(\n    sliders=sliders,\n    updatemenus=play_button,\n    title=\"Birds over the years\",\n    mapbox={\n        'accesstoken':mapbox_access_token,\n        'center':{\"lat\": 37.86, \"lon\": 2.15},\n        'zoom':1.7,\n        'style':'dark', # choose from: dark or light\n    },\n    height=1000\n)\n\n# creating the figure\nfig = go.Figure(data=data, layout=layout, frames=frames)\n\n# displaying the figure\nfig.show()","08a21e9f":"# \ud83d\udc26 Birds over the years ","9d55ffc3":"Next we define the play and pause button which would allow us to play all the frames over time as follows,","22284116":"As we can see the above instances do not conform to any known standard of time.","46cb6132":"We will handle the instances with 12 hour format by converting them to 24 hours. We will also convert all datetime to `%Y-%m-%d %H:%M:%S` format.\n\n> Note : All new columns created would be prefixed by a underscore.","ab04b3f6":"1. Year-month histogram","feca9cfb":"We managed to reduce the invalid dates from 152 to 37. Now lets plot a few histograms as follows ","32b2c11e":"Our new dataframe is as follows,","16705781":"Next lets create our slider and assign all the neccesary configuration as follows,","b3dc6aa8":"## Map","de748bbb":"First, lets assign a unique id and color to the different species of birds as follows","6721e8d9":"Now checking the invalid dates as follows,","80670c0d":"And there you have it! Feel free to tinker the settings as required and explore away the different birds in their habitats through the years. \n\nThis notebook hopefully enables people to understand how some of the species are more prevalent than others in specific geographic locations (and in particular seasons). Encoding this information while training our models could be an interesting avenue to explore.\n\n\ud83d\udc26 Happy birding!","1475579b":"## Libraries","d6966b76":"2. Month histogram","429cb8d2":"For the mapbox visualization, please paste the `mapbox_access_token` in kaggle environment and retrieve as follows,","585ecfcf":"Now let's check the `NaN` columns for `_datetime` i.e. where either the date or time is not in proper format,","eb346542":"Also checking unique invalid `time` as follows,","7676a9fc":"As we can see either the date or time (or both) are invalid in these cases. ","db00d932":"For our exploration we are primarily interested in the following geo-spatial and temporal features :\n- `latitude`\n- `longitude`\n- `elevation`\n- `time`\n- `date`","235e3c57":"### Time distribution\nLets check the distribution of `time`, rounded to every quarter of an hour i.e. every 15 mins, as follows ","a50b4578":"* Lets start by loading `train.csv` and checking some basic information as follows,","1a7e56f4":"### Coarse-grained dates\n\nNow lets consider the dates which have a valid `YYYY-MM` format and ignore `dd` for now","bcd8c462":"## Geo-spatial features","18d45d92":"And finally, lets display our map as follows","9d43f27a":"We perform the following transformations :\n1. Replace `m`, `~`, `,` and `?` with empty string\n2. Replace `1650-1900`, `930-990`, `Unknown` and `-` with empty string\n3. Only consider rows which have a valid longitude and latitude i.e. dropping `Not specified`\n4. Replacing elevation with empty string as `0.0` and scaling the values for the size of marker on the map later ","0e38e966":"First we will create a list of dicts which will contain all the individual frames for our map. The tooltip will display:\n- `ebird_code`\n- `elevation`, and\n- `country`\n\nAlong with this each bird would is assigned the color as per the `_color` column.","b3e750e2":"![viz](https:\/\/github.com\/syborg91\/kaggle\/blob\/master\/cornell-birdcall-identification\/map.png?raw=true)","35eb1b71":"Now lets get all the unique dates (in ascending order)","60391429":"> Most of these invalid dates and times have:\n- `0000-00-00`, or\n- Either `00` as the date or month","acc58a3a":"And setting the `_date` as the index of the dataframe (convenient for creating frames later)","b48d849e":"## References\n- [Intro to Animations in Python](https:\/\/plotly.com\/python\/animations\/)\n- [How to create outstanding animated scatter maps with Plotly and Dash](https:\/\/towardsdatascience.com\/how-to-create-animated-scatter-maps-with-plotly-and-dash-f10bb82d357a)","b6f2d358":"Now dropping all rows with invalid dates","033e69ee":"## Data","271efeb3":"In this notebook, we visually explore the rich geographic distribution of various species of birds over time. This would allow us to potentially trace:\n1. Migration patterns, and\n2. Prevalence of certain species in specific regions\n\nTo that end, we will create an animated map with a time slider.","b0bf83c4":"3. Year histogram","dcf46213":"## Temporal features","872219d8":"Observations :\n- Most of the birdcalls were recorded between `Apr - May` for most of the years\n- Highest recorded audio peaked between `Apr 2014 - Jun 2014`"}}