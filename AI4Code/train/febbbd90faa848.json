{"cell_type":{"221fd383":"code","86db1b1b":"code","6f6b8514":"code","a850b9bc":"code","3e815570":"code","250122b0":"code","ac7ea031":"code","36a77188":"code","7e0041ec":"code","22b5bcca":"code","0656ad4e":"code","c2733ed9":"code","4b2d93a2":"code","7c7a280b":"code","19db8675":"markdown","c7813ff9":"markdown","fb9b52a0":"markdown","7921ddfc":"markdown","c1cadaac":"markdown","e3329d21":"markdown","62feccd3":"markdown"},"source":{"221fd383":"# This Python 3 environment comes with many helpful analytics libraries installed\n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","86db1b1b":"# Explo\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nprint(train.info())\nprint(test.info())","6f6b8514":"print(len(test))","a850b9bc":"bleu_c = '#9EB9DC'\nbleu_f = '#0755BA'\nsaum = '#E8D0A8'\nvert = '#7EC66F'\nrouge = '#CB4141'\norange = '#FEAF10'\njaune = '#E8E865'","3e815570":"print(train.groupby('SibSp')['SibSp'].count())\ntrain.groupby('Parch')['Parch'].count()","250122b0":"\nplt.figure(figsize = (20,6))\nplt.rc('axes', axisbelow=True)\n\nplt.subplot(131)\nbins = [x + 0.5 for x in range(0,4)]\ny1=train.loc[train['Survived'] == 1,'Pclass']\ny2=train.loc[train['Survived'] == 0,'Pclass']\nplt.hist([y1,y2], bins = bins, color = [vert,rouge], label = ['Surv\u00e9cu','Non-Surv\u00e9cu'])\nplt.title('Classes de billet')\n#plt.xticks(locs = range(1,4), labels = ['1ere','2\u00e8','3\u00e8'])\nplt.ylabel('Compte')\nplt.grid(True, axis ='y')\nplt.legend()\n\nplt.subplot(132)\nbins = [x + 0.5 for x in range(-1,7)]\ny1 = train.loc[train['Survived'] == 1, 'Parch']\ny2 = train.loc[train['Survived'] == 0, 'Parch']\nplt.hist([y1,y2], bins = bins, color = [vert,rouge], label = ['Surv\u00e9cu','Non-Surv\u00e9cu'])\nplt.title('Enfants \/ parents')\n#plt.xticks(range(0,7),['0','1','2','3','4','5','6'])\nplt.ylabel('Compte de passagers')\nplt.xlabel('Nombre')\nplt.grid(True, axis ='y')\nplt.legend()\n\nplt.subplot(133)\nbins = [x + 0.5 for x in range(-1,9)]\ny1 = train.loc[train['Survived'] == 1, 'SibSp']\ny2 = train.loc[train['Survived'] == 0, 'SibSp']\nplt.hist([y1,y2], bins = bins, color = [vert,rouge], label = ['Surv\u00e9cu','Non-Surv\u00e9cu'])\nplt.title('Fr\u00e8res\/soeurs\/\u00e9poux\/epouses')\n#plt.xticks(range(0,9),['0','1','2','3','4','5','6','7','8'])\nplt.ylabel('Compte de passagers')\nplt.xlabel('Nombre')\nplt.grid(True, axis ='y')\nplt.legend()","ac7ea031":"y1 = train.loc[train['Survived'] == 1, 'Age'].dropna()\ny2 = train.loc[train['Survived'] == 0, 'Age'].dropna()\n\nplt.figure(figsize = (15,6))\nplt.hist([y1,y2], bins = range(0,80,4), width = 4, edgecolor = 'black', linewidth = 0.5, color = [vert,rouge], histtype = 'barstacked', label = ['Surv\u00e9cu','Non-Surv\u00e9cu'])\nplt.title('Distribution d\\'age des passagers')\nplt.xlabel('Age')\nplt.ylabel('Compte')\nplt.legend()\n\nh1 = np.histogram(y1.dropna().values, bins = [0,10,18,50,80])\nh2 = np.histogram(y2.dropna().values, bins = [0,10,18,50,80])\n\nplt.figure(figsize = (15,6))\nplt.subplot(121)\nplt.pie(h1[0], colors = [bleu_c, vert, jaune, rouge], shadow = True, autopct = lambda x: str(round(x,1)) + '%', labels = ['Jeunes enfants ', 'Adolescents ', 'Adultes', 'Anciens'])\nplt.title('Partage des survivants par \u00e2ge')\nplt.legend()\nplt.subplot(122)\nplt.pie(h2[0], colors = [bleu_c, vert, jaune, rouge], shadow = True, autopct = lambda x: str(round(x,1)) + '%', labels = ['Jeunes enfants', 'Adolescents', 'Adultes', 'Anciens (50-80)'])\nplt.title('Partage des victimes par \u00e2ge')\nplt.legend()","36a77188":"#  Nettoyage NAs + fusion de train et set pour la pr\u00e9paration de features\ntrain.dropna(subset = ['Embarked', 'Fare'], inplace = True)\ntrain.reset_index(drop = True, inplace = True)\ntest['Embarked'] = test['Embarked'].fillna(test['Embarked'].value_counts().index[0])\ntest['Fare'] = test['Fare'].fillna(test['Fare'].median())\nprint(len(test))\n\nfull = pd.concat([train.drop('Survived', axis =1), test], ignore_index = True)\nfull.drop(['PassengerId', 'Ticket'], axis = 1, inplace = True)\n\nfull['Age'] = full['Age'].interpolate()\nfull.shape","7e0041ec":"# Cr\u00e9ation de la variable cat\u00e9gorielle deck\ndef cat_deck(string):\n    return 'Missing' if pd.isnull(string) else str(string)[0]\nfull['Deck'] = full['Cabin'].apply(lambda x: cat_deck(x))\nfull = full.join(pd.get_dummies(full['Deck'], prefix = 'Deck'))\nfull = full.drop(['Cabin','Deck','Deck_T'], axis = 1)\n","22b5bcca":"# Variable Age\nfull['age_cat'] = pd.cut(full['Age'], bins = [0,10,18,50,80.1], labels = [1,2,3,4])\n# Variable SibSp\nfull['Sib_cat'] = pd.cut(full['SibSp'], bins = [-1,0,2,8], labels = [1,2,3])\n# Variable Parch\nfull['Parch_cat'] = pd.cut(full['Parch'], bins = [-1,0,2,9], labels = [1, 2, 3])\n# Dummy pour Embarked\nfull = full.join(pd.get_dummies(full['Embarked'], prefix = 'Embarked'))\nfull.drop(['Embarked', 'Name'], axis = 1, inplace = True)\n# Turn sex into binary m=1 and f=0\nfull['Sex'] = full['Sex'].apply(lambda x: 1 if x == 'male' else 0)\n\nfull.drop(['Age', 'SibSp', 'Parch', 'Deck_Missing'], axis = 1, inplace = True)\nfull.head()\n(full.isna().sum())","0656ad4e":"# Split back in train and test\ntr = full.iloc[range(len(train)),:]\nte = full.iloc[len(train):,:]\ntarget = train['Survived']\nprint(len(te))\n\n# Load libraries\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.svm import SVC","c2733ed9":"clf = DecisionTreeClassifier(max_depth = 9)\nclf.fit(tr, target)\npred = clf.predict(te)\ndir(clf)\n\nbag_tree = BaggingClassifier(clf,n_estimators = 200)\nbag_tree.fit(tr,target)\npred_bag = bag_tree.predict(te)\n\nsubmission = pd.DataFrame.from_dict({'PassengerId' : test['PassengerId'], 'Survived' : pred})\nsubmission.to_csv('Submit.csv', index = False)\n\nsubmission = pd.DataFrame.from_dict({'PassengerId' : test['PassengerId'], 'Survived' : pred_bag})\nsubmission.to_csv('Submit_bag.csv', index = False)\n","4b2d93a2":"imp = pd.DataFrame({'Importance': clf.feature_importances_})\nimp['Features'] = tr.columns\nimp.sort_values(by = 'Importance', ascending = False, inplace =True)\nimp.reset_index(drop = True, inplace = True)\nplt.figure()\nplt.barh(range(15,0,-1),imp['Importance'].iloc[0:15], tick_label = imp['Features'].iloc[0:15])\n\n","7c7a280b":"#imp = pd.DataFrame({'Importance': bag_tree.feature_importances_})\n#imp['Features'] = tr.columns\n#imp.sort_values(by = 'Importance', ascending = False, inplace =True)\n#imp.reset_index(drop = True, inplace = True)\n#plt.figure()\n#plt.barh(range(15,0,-1),imp['Importance'].iloc[0:15], tick_label = imp['Features'].iloc[0:15])","19db8675":"Il ne nous reste plus que les NA's de la variable cabin \u00e0 traiter, toutes les autres variables sont compl\u00e9t\u00e9es.","c7813ff9":"Trac\u00e9 des distributions d'age et de classe de billet pour les passagers qui ont surv\u00e9cu \/ non-surv\u00e9cu","fb9b52a0":"D\u00e9finissons une palette de couleurs (couleurs pastel pour \u00eatre plus agr\u00e9ables \u00e0 l'oeil) utilis\u00e9es pour la visualisation.","7921ddfc":"**Prediction - Building and running model**","c1cadaac":"**Construction de features suppl\u00e9mentaires**\n* Cat\u00e9gories d'\u00e2ge *age_cat*  : Jeunes enfants(0-10) 'young', Adolescents (10-18) 'teens', Adultes (18-50) 'adults', Anciens(50-80) 'old'\n* Emplacement de pont *deck* \u00e0 partir des infos sur les places passager 'Cabin' : A,B,C,D,E,F\n* Taille de la famille *SibSp_cat*: 'solo'(0), 'small'(1-2), 'big'(3-8)\n* Taille de la famille *Parch_cat*: 'solo'(0), 'small'(1-2), 'big'(3-6)","e3329d21":"**Exploration 'train.csv' **","62feccd3":"**Nettoyage et enrichissement des donn\u00e9es**"}}