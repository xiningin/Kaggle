{"cell_type":{"2f82cbf1":"code","26c87379":"code","dacc64fa":"code","22a2feca":"code","79a818b2":"code","771f6b9a":"code","177d7025":"code","6d8fc1a5":"code","5ca2baac":"code","c13fcb0f":"code","1a567169":"code","59f90b42":"code","cd41682f":"code","4b83f133":"code","73e40882":"code","6f1c61d5":"code","2039bd0e":"code","f380abcc":"code","a37731fa":"code","65a092c1":"code","29a98165":"code","1eea847e":"code","d2adf23f":"code","f36bc86c":"code","3d560cea":"code","3bf48a35":"code","d22ff9ce":"code","446cd5ee":"code","3645ad9b":"code","797de60b":"code","0ced51e0":"code","696aa847":"code","1d05bb6a":"code","7c186e37":"code","b8696352":"code","1eebf93d":"code","e06ca7c8":"code","b2f81d04":"code","fb4d7d00":"code","febf5abe":"code","72c4c8a9":"code","af7dc621":"code","143ef54b":"code","2a67f031":"code","264a2435":"code","fe1b47fb":"code","6b0d4265":"code","57f4dce1":"code","45aeb5bb":"code","824c228a":"code","527c3c8a":"code","ffceb697":"code","5ba0cf5b":"code","ebe2e405":"code","4df422df":"code","6a2d4ef1":"code","5d8fdfe7":"code","989105d3":"code","a07f590d":"code","2b60fefc":"code","9cea5176":"code","e70046bf":"code","4354b923":"code","c49094b3":"code","9b894ca5":"markdown","d0a50067":"markdown","7f173bcc":"markdown","e8366ef7":"markdown","a2ad48d9":"markdown","5509ddf0":"markdown","786ebfce":"markdown","e521d289":"markdown","c1b22fab":"markdown","6bfed85c":"markdown","2902f24c":"markdown","bbe2c231":"markdown","dee7607e":"markdown"},"source":{"2f82cbf1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","26c87379":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_theme()\nsns.set_palette(\"rainbow\")\n%matplotlib inline","dacc64fa":"train_df = pd.read_csv(r\"..\/input\/titanic\/train.csv\")\n\n","22a2feca":"training = train_df.copy()\n\ntraining.sample(5)","79a818b2":"training.shape","771f6b9a":"test_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest = test_df.copy()\ntest.head()","177d7025":"test.shape","6d8fc1a5":"\ndef RowCol(data):\n    print(f\"Total Row is {data.shape[0]} and total Column is {data.shape[1]}\")     ","5ca2baac":"RowCol(training)","c13fcb0f":"RowCol(test)","1a567169":"training[1:1]","59f90b42":"list(training[1:1])","cd41682f":"cols_enum = list(enumerate(training[1:1]))\ncols_enum","4b83f133":"cols_enum[0]","73e40882":"training.dtypes","6f1c61d5":"countfeature = [\"Survived\", \"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Embarked\"]\ncountlist = list(enumerate(countfeature))","2039bd0e":"countlist","f380abcc":"plt.figure(figsize = (15,15))\nplt.suptitle(\"Countplot of Categorical Features\", fontsize=18)\nfor i in countlist: \n    plt.subplot(3,2,i[0]+1)\n    sns.countplot(data = training, x = i[1], hue = \"Survived\", palette=\"rainbow\")\n    plt.ylabel(\"\")\n    plt.legend(['Not Survived', 'Survived'], loc='upper center', prop={'size': 10})\nplt.tight_layout()\nplt.show()","a37731fa":"numfeature = [\"Age\", \"Fare\"]\nenumfeat = list(enumerate(numfeature))","65a092c1":"enumfeat","29a98165":"plt.figure(figsize=(20,10))\nplt.suptitle(\"Distribution of Outliers of Numerical Data\", fontsize=20)\n\n# Box-plot\nfor i in enumfeat:\n    plt.subplot(1,4,i[0]+1)\n    sns.boxplot(data = training[i[1]], palette=\"rainbow\")\n    plt.xlabel(str(i[1]))\n    \n# Histogram    \nfor i in enumfeat:\n    plt.subplot(1,4,i[0]+3)\n    sns.histplot(data = training[i[1]], palette=\"rainbow\", bins=15)\n    plt.xlabel(str(i[1]))\n    \nplt.tight_layout()\nplt.show()","1eea847e":"plt.figure(figsize=(15,12))\nplt.suptitle(\"Distribution & Kernel Density Estimation of Numerical Features\", fontsize=20)\nfor i in enumfeat:\n    plt.subplot(2,1,i[0]+1)\n    sns.histplot(x = training[i[1]], kde=True, bins=30, color=(0.50,0.20,0.70))\nplt.tight_layout()\nplt.show()","d2adf23f":"plt.figure(figsize=(15,12))\nplt.suptitle(\"Distribution & Kernel Density Estimation of Numerical Features\", fontsize=20)\nfor i in enumfeat:\n    plt.subplot(1,2,i[0]+1)\n    sns.histplot(x = training[i[1]], kde=True, bins=30, color=(0.50,0.20,0.70))\nplt.tight_layout()\nplt.show()","f36bc86c":"plt.figure(figsize=(6,8))\nplt.title(\"Correlation of Survival column with Independent Features\", fontsize=15)\ncorr = training.corr()[\"Survived\"].sort_values(ascending=True)[1:]\nsns.barplot(x=corr.index, y=corr, color=(0.90,0.30,0.50))\nplt.tight_layout()\nplt.show()\n","3d560cea":"plt.figure(figsize=(13,5))\nplt.title(\"Scatterplot of Age and Fare according to how many Survived\", fontsize=15)\nsns.scatterplot(data = training, x = \"Age\", y=\"Fare\", hue='Survived')\nplt.tight_layout()\nplt.show()","3bf48a35":"plt.figure(figsize=(15,5))\nplt.suptitle(\"Probability Distribution of numerical columns according to number of Survived\", fontsize = 20)\nfor i in enumfeat:\n    plt.subplot(1,2,i[0]+1)\n    sns.kdeplot(data=training, x=i[1], hue=\"Survived\")\nplt.tight_layout()\nplt.show()\n","d22ff9ce":"plt.figure(figsize=(13,11))\n\nplt.subplot(1,2,1)\nplt.title(\"Age according to Pclass and how many Survived\", fontsize=13)\nsns.boxplot(data = training, y =\"Age\", x =\"Pclass\", hue=\"Survived\", palette=\"cool\")\n\n \nplt.subplot(1,2,2)\nplt.title(\"Embarked from which port according to Fare and how many Survived\", fontsize=13)\nsns.boxplot(data = training, y =\"Fare\", x =\"Embarked\", hue=\"Survived\", palette=\"cool\", showfliers=False)\n\nplt.tight_layout()\nplt.show()","446cd5ee":"def dropcol(data):\n    data.drop(columns=[\"PassengerId\", \"Name\", \"Ticket\"], inplace=True)\n","3645ad9b":"dropcol(data=training)","797de60b":"training.head(5)","0ced51e0":"training.shape","696aa847":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(training.drop(columns=[\"Survived\"]), training[\"Survived\"], \n                                                    test_size=0.2, random_state=42)","1d05bb6a":"X_train.head(5)","7c186e37":"X_train.shape","b8696352":"X_test.head(5)","1eebf93d":"X_test.shape","e06ca7c8":"y_train.shape","b2f81d04":"y_train.head(5)","fb4d7d00":"y_test.shape","febf5abe":"y_test.head(10)","72c4c8a9":"from sklearn.pipeline import make_pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import SelectKBest,chi2","af7dc621":"import missingno as msno\nmsno.matrix(training , color=(0.50,0.30,0.80))\nplt.show()\nx = training.isnull().sum()\nprint(\"Total Missing Values in dataset :\",x)\nprint(\"Data Type of x : \",type(x))\nfor a, b in x.items():\n    if b > 0:\n        print(f\"There are {b} missing values in column: {a}\")","143ef54b":"def cabinnull(data):\n    data[\"Cabin\"].fillna(\"M\", inplace=True)\n    \n","2a67f031":"cabinnull(X_train)\ncabinnull(X_test)","264a2435":"X_train.isnull().sum()","fe1b47fb":"X_test.isnull().sum()","6b0d4265":"X_test.head(5)","57f4dce1":"#handling missing values\ntf1 = ColumnTransformer(transformers=[\n    (\"AgeImputer\", SimpleImputer(), [2]),\n    (\"EmbarkedImputer\", SimpleImputer(strategy=\"most_frequent\"), [-1])\n], remainder=\"passthrough\")","45aeb5bb":"#encoding categorical features\ntf2 = ColumnTransformer(transformers=[\n    (\"SexEncoder\", OrdinalEncoder(), [3]),\n    (\"EmbarkedOneHot\", OneHotEncoder(sparse=False, handle_unknown=\"ignore\"), [1,7])\n], remainder=\"passthrough\")","824c228a":"# Scaling\ntf3 = ColumnTransformer([\n    ('scale',StandardScaler(),slice(0,-1))\n])","527c3c8a":"# Model\ntf4 = LogisticRegression()","ffceb697":"# Model 2\n#tf5 = RandomForestClassifier(n_estimators=20)","5ba0cf5b":"pipe_model = make_pipeline(tf1,tf2,tf3,tf4)","ebe2e405":"# Display Pipeline\n\nfrom sklearn import set_config\nset_config(display='diagram')","4df422df":"pipe_model.fit(X_train, y_train)","6a2d4ef1":"y_pred = pipe_model.predict(X_test)\nprint(y_pred)\nprint(\"length of Y Pred :\",len(y_pred))","5d8fdfe7":"from sklearn.metrics import accuracy_score\naccuracy = round(accuracy_score(y_test, y_pred),3)*100\nprint(f\"The accuracy of the model is: {accuracy}%\")","989105d3":"y_test.head(10)","a07f590d":"type(y_test)","2b60fefc":"y_test.index","9cea5176":"output = pd.DataFrame({'PassengerId': y_test.index, 'Survived': y_pred})\n#output.to_csv('my_submission_01.csv', index=False)\n#print(\"Your submission was successfully saved!\")\n","e70046bf":"output.head(10)","4354b923":"output.shape","c49094b3":"output.to_csv('my_submission_02.csv', index=False)\nprint(\"Your submission was successfully saved!\")","9b894ca5":"# Import Dataset\n","d0a50067":"# Build pipeline of models","7f173bcc":"# Uni-variate Analysis {single features}","e8366ef7":"# Train and Test Split and remove unimportant columns\n\n","a2ad48d9":"# Function for easy determination of Shape of Data","5509ddf0":"# Import Test Data","786ebfce":"# Feature Engineering and Model Evaluation","e521d289":"# Determine shape of training dataset","c1b22fab":"# Bivariate  & Multi-variate analysis","6bfed85c":"# EDA\n","2902f24c":"# create a training file's copy ","bbe2c231":"# Import Libraries","dee7607e":"# Prediction and Accuracy Score"}}