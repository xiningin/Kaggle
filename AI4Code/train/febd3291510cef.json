{"cell_type":{"a540bca2":"code","483bea08":"code","d30498af":"code","0a04628b":"code","894f8648":"code","07e9a27e":"code","885d5185":"code","ef37b299":"code","411352d0":"code","27212b77":"code","1605e6e5":"code","5b7158de":"code","eab89751":"code","851ca9db":"code","a79d3a3b":"code","c2036f86":"code","6ee98cfc":"code","71bc7ca2":"code","ecc05f6c":"code","2513b7fc":"code","676f2e38":"code","bf6e083c":"code","1c0ad983":"code","d78fe127":"code","45770f8c":"code","0ed7f3a9":"code","36749fcf":"code","187ccb30":"code","b8ca7de2":"code","69d08e4f":"code","178dfece":"code","c6c32aaa":"code","9ca48c12":"code","6f209c1c":"markdown","1b10ac2d":"markdown","92b54af0":"markdown","e4d6b4fc":"markdown","5d156696":"markdown","7cdde899":"markdown","808bd1e5":"markdown","ee709840":"markdown","e3d696a3":"markdown","534ff3b1":"markdown"},"source":{"a540bca2":"import seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import MinMaxScaler\nimport xgboost as xgb","483bea08":"# Load the passenger data\ntest_df = pd.read_csv (\"..\/input\/titanic\/test.csv\") \ntrain_df = pd.read_csv (\"..\/input\/titanic\/train.csv\")\nsub= pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntrain_df.head()\n","d30498af":"train_df.columns","0a04628b":"train_df.info()","894f8648":"train_df.describe ()","07e9a27e":"train_df.hist(figsize=(20,15))\nplt.show()","885d5185":"train_df['Survived'].mean()","ef37b299":"train_df.groupby('Pclass').mean()","411352d0":"train_df = train_df.drop(['PassengerId','Ticket','Cabin', 'Name'], axis=1)\n#train_df = train_df.drop (['Ticket'], axis=1)","27212b77":"train_df['Sex']= train_df['Sex'].map({'male':0,'female':1})\n\nprint(train_df['Sex'].head())","1605e6e5":"train_df[\"Age\"].isnull().sum()","5b7158de":"# Fill the nan values in the age column\ntrain_df['Age'].fillna(value= round(train_df['Age'].mean()), inplace=True)","eab89751":"train_df[\"Age\"].isnull().sum()","851ca9db":"# Create a first class column\ntrain_df['FirstClass']= train_df['Pclass'].apply(lambda p: 1 if p ==1 else 0)\n\n# Create a second class column\ntrain_df['SecondClass']= train_df['Pclass'].apply(lambda p: 1 if p ==1 else 0)\n\n# Select the desired features\nfeatures= train_df [['Sex', 'Age', 'FirstClass', 'SecondClass']]\nsurvival= train_df['Survived']\n\n# Perform train, test, split\ntrain_features, test_features, train_labels, test_labels=train_test_split(features, survival)\n\n# Scale the feature data so it has mean = 0 and standard deviation = 1\nscaler= StandardScaler()\ntrain_features= scaler.fit_transform(train_features)\ntest_features= scaler.transform(test_features)","a79d3a3b":"# Create and train the model\nmodel= LogisticRegression()\n# Score the model on the train data\nmodel.fit(train_features, train_labels)","c2036f86":"# Score the model on the test data\nmodel.score(test_features, test_labels)\n","6ee98cfc":"# Analyze the coefficients\nmodel.coef_\nlist(zip(['Sex','Age','FirstClass','SecondClass'],model.coef_[0]))\n\n","71bc7ca2":"#Test du mod\u00e8le\n\n# Sample passenger features\nJack = np.array([0.0,20.0,0.0,0.0])\nRose = np.array([1.0,17.0,1.0,0.0])\nYou = np.array([0.0, 45.0 , 1.0, 0.0])\n\n# Combine passenger arrays\nsample_passengers= np.array([Jack, Rose, You])\n\n# Scale the sample passenger features\nscaler= StandardScaler().fit(sample_passengers)\nsample_passengers= scaler.transform(sample_passengers)\nprint(sample_passengers)","ecc05f6c":"# Make survival predictions!\nprint(model.predict(sample_passengers))\nprint(model.predict_proba(sample_passengers))","2513b7fc":"sub= pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nsub[\"Survived\"]= round(model.score(test_features, test_labels))\nsub.to_csv(\"submission_titanic.csv\", index=False)\nsub.head()","676f2e38":"pip install --upgrade pip","bf6e083c":"!pip install pycaret","1c0ad983":"from pycaret.classification import *","d78fe127":"tin= setup(data = train_df, \n             target = 'Survived',\n             numeric_imputation = 'mean',\n             categorical_features = ['Sex','Embarked'],\n             silent = True)","45770f8c":"compare_models()","0ed7f3a9":"GBC  = create_model(\"gbc\")    ","36749fcf":"plot_model(GBC, plot= 'learning')","187ccb30":"plot_model(GBC, plot= 'auc')","b8ca7de2":"plot_model(GBC, plot = 'confusion_matrix')","69d08e4f":"plot_model(GBC, plot = 'feature')","178dfece":"evaluate_model(GBC)","c6c32aaa":"interpret_model(GBC)","9ca48c12":"predict_model(GBC, data= test_df)","6f209c1c":"#Description des donn\u00e9es","1b10ac2d":"Ci-dessus, nous pouvons voir que:\n\n*  38% de l'ensemble d'entra\u00eenement ont surv\u00e9cu au Titanic . \n*  Nous pouvons \u00e9galement constater que les \u00e2ges des passagers varient de 0,4 \u00e0 80 ans.\n*  les passagers en premi\u00e8re classe avaient 62% de chances de survie, contre 25,5% pour ceux en 3e classe. \n*   \u00c9l\u00e9ment de liste\n\n","92b54af0":"### Colonne Age","e4d6b4fc":"# Mod\u00e8le d'apprentissage","5d156696":"Predictions","7cdde899":"***Let's try with Pycaret Library","808bd1e5":"### Colonne PassengerId, tickets et Cabine","ee709840":"https:\/\/www.codecademy.com\/paths\/data-science\/tracks\/dspath-supervised\/modules\/dspath-logistic-regression\/projects\/logistic-regression-titanic\n\nhttps:\/\/www.kaggle.com\/c\/titanic\/data\n\nhttp:\/\/www.datacorner.fr\/xgboost\/\n\nhttps:\/\/towardsdatascience.com\/predicting-the-survival-of-titanic-passengers-30870ccc7e8\n\nhttps:\/\/towardsdatascience.com\/kaggle-titanic-machine-learning-model-top-7-fa4523b7c40\n\nhttps:\/\/blog.socialcops.com\/technology\/data-science\/machine-learning-python\/\n\nhttp:\/\/www.bittenbypython.com\/machine-learning-kaggle-titanic.html\n\nhttps:\/\/seaborn.pydata.org\/tutorial\/categorical.html#statistical-estimation-within-categories","e3d696a3":"### Colonne Sexe\n\nMise \u00e0 jour de la colonne sexe en num\u00e9rique:","534ff3b1":"# **Traitement des donn\u00e9es**"}}