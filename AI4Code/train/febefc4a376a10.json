{"cell_type":{"d238153d":"code","0cfc328f":"code","3e2bc3d1":"code","8da7c962":"code","b7181c2b":"code","62ee8edb":"code","0fb08262":"code","71b96312":"code","26a444e1":"code","413c0d65":"code","552b7138":"code","f62dc7b2":"code","36404775":"code","72a172eb":"code","3a5651e8":"code","1d5895df":"code","2ddc5ec0":"code","dd53224b":"code","2ad2686a":"code","ee1fe9aa":"code","cc848650":"code","61015764":"code","dc691861":"code","ea7ee48c":"code","e45d3916":"code","2b08c1e8":"code","f09f8c29":"code","8aa4881c":"code","64770972":"code","9327b142":"code","6aa26107":"code","4853b65b":"code","f6bf1cd0":"code","0dad4c4d":"code","a194d33f":"code","87c79e81":"code","5a2f8c0d":"code","2381e930":"code","8068a3d1":"code","9a6cfcea":"code","3048d714":"code","a43c2f82":"code","415f7956":"code","0affe1e7":"code","35ad845c":"code","d6bf440d":"code","d93cc530":"code","d01279bc":"code","63236b0e":"code","ff178256":"code","519cb2c0":"code","85ca8a52":"code","591a5a45":"code","0ea52b7f":"code","3b3a3ebd":"code","c63bd06b":"code","26c6dd41":"code","af15bce4":"code","f9890a11":"code","54373171":"code","b9a72d66":"code","cfc8ead3":"code","33002636":"code","0ff79aab":"code","a72dba6a":"code","25fbc197":"code","3fbfa4f2":"code","61d66162":"code","b34e2ea7":"code","31c65d2f":"code","7fc4cc69":"code","1cdf1796":"code","a2a59bcf":"code","1d3308d6":"code","7bd1c506":"code","373e6eda":"code","172f847f":"code","ca4b254f":"code","03afd505":"code","c3f28287":"code","eaaed4d6":"code","fe453dd0":"code","9be51d7c":"code","e47a8988":"code","34912447":"code","6d306a04":"code","d39bcfea":"code","304420a4":"code","13fdf370":"code","6fe21415":"code","9f5c79ef":"code","05e06e5a":"code","6fad39a7":"code","ecaa7cb2":"code","2cc83fac":"code","3c9a8b02":"code","2106ddda":"code","aec8d0b3":"code","e3d8d33e":"code","374d6efb":"code","949a1249":"code","d4ffcc11":"code","9285ea8b":"code","db807d01":"code","3129ee74":"code","81469248":"code","41ecda45":"code","5582958a":"code","cd69000a":"code","9716073e":"code","da8d575f":"code","720e7ee2":"code","c49816f5":"code","d1d13515":"code","7a3d1edd":"code","4c3a2b4f":"code","a5c73f7b":"code","e461d737":"code","79c15843":"code","1af4de03":"code","d2bd0260":"code","6526f4d8":"code","605cf032":"code","89fde4bf":"code","d7afab7d":"code","8d4bc3c9":"code","18b56684":"code","42d07dbb":"code","b873b7ca":"code","6ac78b67":"code","e679fdbe":"code","4cd402c4":"code","599896d2":"code","c89f21c6":"code","57fc8bff":"code","7652041c":"code","624c5024":"code","49967c93":"code","e25e8c38":"code","12eb432d":"code","d9a96611":"code","73c878c3":"code","f6192463":"code","f9052ffd":"code","ef99f033":"code","9b87a50e":"code","5fb742c6":"code","40f93c91":"code","78d3b504":"code","e940bfbd":"code","dc864ef7":"code","af449508":"code","dd109583":"code","8f481fd3":"code","53cc4c1c":"code","e2698247":"code","ab6de167":"code","e9148766":"code","0b377130":"code","4764bad7":"code","caa77744":"code","4ce10916":"code","5671321a":"code","7a244fb0":"code","0e2b917f":"code","733d325a":"code","9d14e567":"code","5ce9ec7d":"code","4d690d8d":"code","c991e051":"code","187f9bc8":"code","91145938":"code","022a85d6":"code","d20a8afd":"code","bc48239b":"code","83c3109f":"code","836e38e4":"code","42aec423":"code","5ffb4ce5":"code","7a12e639":"code","41f33582":"code","02b7310d":"code","64b9f478":"code","14883481":"code","2a55e00e":"code","e108c0d2":"code","5a797612":"code","ad77e3c9":"code","15a995bb":"code","650d5292":"code","f0c3058e":"code","af018bf8":"code","69afadc1":"code","5b85259b":"code","f067a102":"markdown","e4c2f926":"markdown","473aee9a":"markdown","28de5f6c":"markdown","a6fbe6b7":"markdown","24d5b175":"markdown","15bd336b":"markdown","3b49f0f9":"markdown","1feebf26":"markdown","b695ebd8":"markdown","a00ea3cb":"markdown","5e0fb134":"markdown","b7a8770d":"markdown","b8c3606c":"markdown","13fb5076":"markdown","f7f9f739":"markdown","a777be9b":"markdown","a22b6b33":"markdown","cc389a2a":"markdown","1d71906b":"markdown","d51498e5":"markdown","56489fc2":"markdown","bab7c10d":"markdown","c910c52a":"markdown","d181155c":"markdown","371c120a":"markdown","ca500c90":"markdown","784ef161":"markdown","7e417c34":"markdown","3f7b4b00":"markdown","6767068c":"markdown","c138c722":"markdown","d02e8018":"markdown","c80a02e8":"markdown","9868f1c9":"markdown","13b02cf5":"markdown","f7f7dd62":"markdown","ba0ba30d":"markdown","3bf363d2":"markdown","717393fa":"markdown","26e34246":"markdown","07d7261e":"markdown","3cff9208":"markdown","7b447074":"markdown","184d8678":"markdown","db3533b0":"markdown","287568da":"markdown","fee4e8a8":"markdown","9b819590":"markdown","04d04197":"markdown","408d7e74":"markdown","061fd35d":"markdown","fb82aa91":"markdown","02eb8664":"markdown","aaa834bf":"markdown","6719a919":"markdown","d1637ba6":"markdown","fc077e4c":"markdown","8025a5c1":"markdown","ccfc55ab":"markdown","b520f2cd":"markdown","7f9e9402":"markdown","70d841bf":"markdown","39055acd":"markdown","57c33161":"markdown","8274bfb4":"markdown","b9b59d78":"markdown","c68e093d":"markdown","60e1679d":"markdown","6d24e8e8":"markdown","f5809e1c":"markdown","e891b88f":"markdown","bc3dd522":"markdown","d8bb32ef":"markdown"},"source":{"d238153d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","0cfc328f":"import sys\n\nif not sys.warnoptions:\n    import warnings\n    warnings.simplefilter(\"ignore\")","3e2bc3d1":"df=pd.read_csv(\"..\/input\/retail\/retail.csv\")","8da7c962":"df.head(2)","b7181c2b":"df.columns.values","62ee8edb":"column_names=['Row ID', 'Order ID', 'Order Date', 'Ship Date', 'Ship Mode',\n       'Customer ID', 'Customer Name', 'Segment', 'City', 'State',\n       'Country', 'Postal Code', 'Market', 'Region', 'Product ID',\n       'Category', 'Sub-Category', 'Product Name', 'Quantity',\n       'Discount', 'Profit', 'Shipping Cost', 'Order Priority','Sales']","0fb08262":"df=df[column_names]","71b96312":"df.head(2) ### Shifted 'SALES' columnn to end ,for easy analysis of  Target Variable","26a444e1":"df.info()","413c0d65":"df.drop(['Row ID','Order ID','Customer ID','Product ID','Postal Code','Ship Mode'],axis=1,inplace=True)\ndf.head()","552b7138":"df.shape ","f62dc7b2":"df=df.iloc[0:10000,:]","36404775":"df.shape","72a172eb":"df['Segment'].unique()","3a5651e8":"plt.figure(figsize=(20,8))\nsns.boxplot(\"State\",\"Sales\",data= df)\nplt.title('State wise Sales')","1d5895df":"plt.figure(figsize=(20,8))\nsns.boxplot(\"Region\",\"Sales\",data= df)\nplt.title('Region wise Sales')","2ddc5ec0":"df.head(2)","dd53224b":"plt.figure(figsize=(20,8))\nsns.boxplot('Segment','Sales',data=df)","2ad2686a":"plt.figure(figsize=(20,8))\nsns.boxplot(\"Order Priority\",\"Profit\",data= df)\nplt.title('Relationship of Order Priority and Profits')","ee1fe9aa":"plt.figure(figsize=(20,8))\nsns.boxplot(\"Order Priority\",\"Sales\",data= df)\nplt.title('Relationship of Order Priority and Sales')","cc848650":"plt.figure(figsize=(20,8))\nsns.boxplot(\"Category\",\"Sales\",data= df)\nplt.title('Category Wise Sales')","61015764":"plt.figure(figsize=(20,8))\nsns.boxplot(\"Sub-Category\",\"Sales\",data= df)\nplt.title('Sales of sub category products')","dc691861":"plt.figure(figsize=(20,8))\nsns.boxplot(\"Market\",\"Sales\",data= df)\nplt.title('Sales in different Markets')","ea7ee48c":"plt.figure(figsize=(20,8))\nsns.boxplot(\"Country\",\"Sales\",data= df)\nplt.title('Country Wise Sales')","e45d3916":"df.Country.unique()","2b08c1e8":"print(df.Sales.max())\nprint(df.Sales.min())","f09f8c29":"plt.figure(figsize=(10,5))\nplt.hist(x='Sales',data=df,bins=10)","8aa4881c":"plt.figure(figsize=(10,5))\nsns.distplot(df['Sales'],bins=30)","64770972":"df.describe()","9327b142":"df.columns.values","6aa26107":"columns_name=['No of Unique Values in each feature']","4853b65b":"pd.DataFrame(df.nunique(),columns=columns_name)","f6bf1cd0":"df1=pd.read_csv(\"retail.csv\")","0dad4c4d":"df1.duplicated().sum()","a194d33f":"df.duplicated().sum()","87c79e81":"df.columns.values","5a2f8c0d":"categorical = ['Customer Name', 'Segment', 'City','State', 'Country', 'Market', 'Region', 'Category', 'Sub-Category',\n               'Product Name','Order Priority']","2381e930":"numerical = [x for x in df.columns.to_list() if x not in categorical]\nnumerical","8068a3d1":"corr_data = df[numerical]\ncorr = corr_data.corr(method='pearson')\nplt.close()\ncor_plot = sns.heatmap(corr,annot=True,cmap='RdYlGn')\nfig=plt.gcf()\nfig.set_size_inches(15,10)\nplt.xticks(fontsize=10,rotation=-30)\nplt.yticks(fontsize=10)\nplt.title('Correlation Matrix')\nplt.show()","9a6cfcea":"df.columns.values","3048d714":"plt.figure(figsize=(10,5))\nsns.regplot('Quantity','Sales',data=df)","a43c2f82":"plt.figure(figsize=(10,5))\nsns.regplot('Discount','Sales',data=df)","415f7956":"plt.figure(figsize=(10,5))\nsns.regplot('Shipping Cost','Sales',data=df)","0affe1e7":"plt.figure(figsize=(10,5))\nsns.regplot('Profit','Sales',data=df)","35ad845c":"plt.figure(figsize=(10,5))\nsns.barplot(x='Segment',y='Sales', data=df)\nplt.title('Segment Wise Sales')","d6bf440d":"plt.figure(figsize=(20,5))\nsns.barplot(x='City',y='Sales', data=df)\nplt.title('City Wise Sales')","d93cc530":"plt.figure(figsize=(20,5))\nsns.barplot(x='State',y='Sales', data=df)\nplt.title('State Wise Sales')","d01279bc":"plt.figure(figsize=(20,5))\nsns.barplot(x='Country',y='Sales', data=df)\nplt.title('Country Wise Sales')","63236b0e":"##'Order Date', 'Ship Date', 'Customer Name', 'Segment', 'City','State', 'Country', 'Market', 'Region', 'Category', 'Sub-Category',\n##'Product Name', 'Quantity', 'Discount', 'Profit', 'Shipping Cost',\n## 'Order Priority', 'Sales'","ff178256":"plt.figure(figsize=(15,5))\nsns.barplot(x='Market',y='Sales', data=df)\nplt.title('Market Wise Sales')","519cb2c0":"plt.figure(figsize=(15,5))\nsns.barplot(x='Region',y='Sales', data=df)\nplt.title('Region Wise Sales')","85ca8a52":"plt.figure(figsize=(10,5))\nsns.barplot(x='Category',y='Sales', data=df)\nplt.title('Category Wise Sales')","591a5a45":"plt.figure(figsize=(20,5))\nsns.barplot(x='Sub-Category',y='Sales', data=df)\nplt.title('Sub Category Wise Sales')","0ea52b7f":"plt.figure(figsize=(10,5))\nsns.barplot(x='Order Priority',y='Sales', data=df)\n\nplt.title('Order Priority Wise Sales')","3b3a3ebd":"f1=pd.read_csv('retail.csv')\nplt.figure(figsize=(10,5))\nsns.catplot(x=\"Market\", kind=\"count\", data=f1)\nplt.title('Market Wise no of Sales')\nplt.ylabel('Count')\nplt.xlabel('Market Region')\nplt.show()","c63bd06b":"plt.figure(figsize=(15,5))\ntop10countries = f1.groupby('Country')['Row ID'].count().sort_values(ascending=False)\ntop10countries = top10countries [:10]\ntop10countries.plot(kind='bar', color='green')\nplt.title('Top 10 Countries in Sales')\nplt.ylabel('Count')\nplt.xlabel('Countries')","26c6dd41":"plt.figure(figsize=(15,5))\ntop10states = f1.groupby('State')['Row ID'].count().sort_values(ascending=False)\ntop10states = top10states [:10]\ntop10states.plot(kind='bar', color='blue')\nplt.title('Top 10 States in Sales')\nplt.ylabel('Count')\nplt.xlabel('States')","af15bce4":"plt.figure(figsize=(15,5))\ntop10pn = f1.groupby('Product Name')['Row ID'].count().sort_values(ascending=False)\ntop10pn = top10pn [:10]\ntop10pn.plot(kind='bar', color='grey')\nplt.title('Top 10 Product in Sales')\nplt.ylabel('Count')\nplt.xlabel('Product Names')\nplt.show()","f9890a11":"plt.figure(figsize=(15,5))\nbar_width = 0.2\nopacity= 0.8\ntop10profit = f1.sort_values('Sales', ascending=False)\ntop10 = top10profit.head(10)\ntop10[['Customer Name', 'Sales']]\nsns.barplot(x = \"Customer Name\", y= \"Sales\", data=top10)  ","54373171":"plt.figure(figsize=(15,5))\nf1['Region'].value_counts().plot.bar()\nplt.title('Region Wise Sales')\nplt.ylabel('Sales')\nplt.xlabel('Regions')","b9a72d66":"plt.figure(figsize=(12,5))\nsns.catplot(x=\"Ship Mode\", kind=\"count\", data=f1)\nplt.title('Ship Mode Wise Sales')\nplt.ylabel('Sales')\nplt.xlabel('Ship Modes')","cfc8ead3":"sns.pairplot(df)","33002636":"df.info()","0ff79aab":"f1['Order Date'] = pd.to_datetime(f1['Order Date'])","a72dba6a":"f1['Ship Date'] = pd.to_datetime(f1['Ship Date'])","25fbc197":"f1['year'] = pd.DatetimeIndex(f1['Order Date']).year\ndf.head(2)","3fbfa4f2":"plt.figure(figsize=(15,5))\nsns.lineplot(x=\"year\", y=\"Sales\", data=f1)","61d66162":"df.duplicated().sum()","b34e2ea7":"df.drop_duplicates(keep='first').shape","31c65d2f":"df.Region.unique()","7fc4cc69":"df2=pd.get_dummies(df[['Region','Sales']],drop_first=True)\ndf2.head(2)","1cdf1796":"plt.figure(figsize=(20,5))\nsns.heatmap(df2.corr(),annot=True)","a2a59bcf":"df3=pd.get_dummies(df[['Market','Sales']],drop_first=True)\ndf3.head(2)","1d3308d6":"plt.figure(figsize=(20,5))\nsns.heatmap(df3.corr(),annot=True)","7bd1c506":"df3=pd.get_dummies(df[['Category','Sales']],drop_first=True)\ndf3.head(2)","373e6eda":"sns.heatmap(df3.corr(),annot=True)","172f847f":"df4=pd.get_dummies(df[['Sub-Category','Sales']],drop_first=True)\ndf4.head(2)","ca4b254f":"plt.figure(figsize=(20,5))\nsns.heatmap(df4.corr(),annot=True)","03afd505":"df.drop(['Customer Name','City','State','Country','Market','Region','Product Name'],axis=1,inplace=True)","c3f28287":"df.drop(['Order Date','Ship Date'],axis=1,inplace=True)\ndf.head(2)\n","eaaed4d6":"df.isnull().sum()","fe453dd0":"df.describe()","9be51d7c":"sns.boxplot('Quantity',data=df)","e47a8988":"sns.boxplot('Discount',data=df)","34912447":"plt.hist(x='Discount',data=df,bins=10)","6d306a04":"sns.boxplot('Profit',data=df)","d39bcfea":"plt.hist(x='Profit',data=df,bins=10)","304420a4":"df[df.Profit>3000]","13fdf370":"df.drop(8898,inplace=True)","6fe21415":"sns.scatterplot(x='Profit',y='Sales',data=df)","9f5c79ef":"Q1=df['Profit'].quantile(q=0.25)\nQ3=df['Profit'].quantile(q=0.75)\nprint('25th percentile and 75 percentile are:',Q1,Q3)\nIQR=Q3-Q1\nprint('Inter quartile range=',IQR)\nupper_limit=Q3+(1.5*IQR)\nlower_limit=Q1-(1.5*IQR)\nprint('Upper limit is :',upper_limit)\nprint('Lower limit is :',lower_limit)      ","05e06e5a":"df[\"Profit\"] = np.where(df[\"Profit\"]<-1200, -54.918000000000006,df['Profit'])\ndf.head(2)","6fad39a7":"df.describe()","ecaa7cb2":"sns.scatterplot(x='Profit',y='Sales',data=df)","2cc83fac":"sns.boxplot('Shipping Cost',data=df)","3c9a8b02":"plt.hist(x='Shipping Cost',data=df,bins=10)","2106ddda":"sns.scatterplot(x='Shipping Cost',y='Sales',data=df)","aec8d0b3":"df[df['Shipping Cost']>300 ].head(5)","e3d8d33e":"sns.boxplot('Sales',data=df)","374d6efb":"df[df.Sales>8000]","949a1249":"EXEP=df.copy()\nEXEP.head(2)","d4ffcc11":"from scipy import stats\nimport numpy as np\nz = np.abs(stats.zscore(EXEP[['Profit','Shipping Cost','Quantity','Discount','Sales']]))\nprint(z)","9285ea8b":"threshold = 3\nprint(np.where(z > 3))","db807d01":"EXEP.iloc[9998,:]","3129ee74":"EXEP_1 = EXEP[(z < 3).all(axis=1)]","81469248":"EXEP_1.shape","41ecda45":"df.info()","5582958a":"plt.figure(figsize=(10,5))\ndf['Segment'].value_counts().plot.bar() # sns.countplot(\"Segment\", data = df) #Distribution of customer Segment                                      \nplt.title('Segment Wise No. of Sales')\nplt.ylabel('Count of no. of Sales')\nplt.xlabel('Segments')","cd69000a":"plt.figure(figsize=(10,5))\ndf['Category'].value_counts().plot.bar()\nplt.title('Category Wise No.of Sales')\nplt.ylabel('Count of no.Sales')\nplt.xlabel('Categories')\nplt.show()","9716073e":"plt.figure(figsize=(10,5))\ndf['Sub-Category'].value_counts().plot.bar()\nplt.title('Sub-Category Wise No.of Sales')\nplt.ylabel('Count of No.of Sales')\nplt.xlabel('Sub Categories')","da8d575f":"plt.figure(figsize=(10,5))\ndf['Order Priority'].value_counts().plot.bar()\nplt.title('Order Priority Wise No.of Sales')\nplt.ylabel('Count of no. of Sales')\nplt.xlabel('Order Priorities')","720e7ee2":"plt.figure(figsize=(10,5))\nsns.barplot(\"Order Priority\", y= \"Profit\",data=df)","c49816f5":"plt.figure(figsize=(20,10))\nsns.catplot(x=\"Segment\", col=\"Category\", data=df, kind=\"count\")","d1d13515":"df=pd.get_dummies(df,drop_first=True)\ndf.head(2)","7a3d1edd":"X = df.drop('Sales',axis=1)","4c3a2b4f":"y = df['Sales']\ny","a5c73f7b":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)","e461d737":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","79c15843":"y_pred = regressor.predict(X_test)\nnp.set_printoptions(precision=2)\ny_pred","1af4de03":"import sklearn.metrics\nmse = sklearn.metrics.mean_squared_error(y_test,y_pred)\nmse","d2bd0260":"mae = sklearn.metrics.mean_absolute_error(y_test,y_pred)\nmae","6526f4d8":"import math\nrmse= math.sqrt(mse)\nrmse","605cf032":"def mean_absolute_percentage_error(y_true, y_predict): \n    y_true, y_predict = np.array(y_true), np.array(y_predict)\n    return np.mean(np.abs((y_true - y_predict) \/ y_true)) * 100","89fde4bf":"mean_absolute_percentage_error(y_test, y_pred)","d7afab7d":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","8d4bc3c9":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = regressor, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","18b56684":"EXEP_1=pd.get_dummies(EXEP_1,drop_first=True)\nEXEP_1.head(2)","42d07dbb":"p=EXEP_1.drop('Sales',axis=1)\nq=EXEP_1['Sales']","b873b7ca":"p_train, p_test, q_train, q_test = train_test_split(p, q, test_size = 0.3, random_state = 0)","6ac78b67":"regressor.fit(p_train, q_train)","e679fdbe":"q_pred = regressor.predict(p_test)\nq_pred","4cd402c4":"mse = sklearn.metrics.mean_squared_error(q_test,q_pred)\nmse","599896d2":"rmse= math.sqrt(mse)\nrmse","c89f21c6":"mean_absolute_percentage_error(q_test, q_pred)","57fc8bff":"mae=sklearn.metrics.mean_absolute_error(q_test,q_pred)\nmae","7652041c":"r2_score(q_test, q_pred)","624c5024":"df_n=EXEP_1.copy()\ndf_n.head(2)","49967c93":"X=df_n.drop('Sales',axis=1)\ny=df_n['Sales']","e25e8c38":"X_train, X_test,y_train,y_test = train_test_split(X,y, test_size = 0.3, random_state = 0)","12eb432d":"regressor.fit(X_train, y_train)","d9a96611":"lg_y_pred = regressor.predict(X_test)\nlg_y_pred","73c878c3":"lg_mse = sklearn.metrics.mean_squared_error(y_test,lg_y_pred)  ## Mean Squared Error\nlg_mse","f6192463":"lg_rmse= math.sqrt(lg_mse)  #Root mean squared error\nlg_rmse","f9052ffd":"lg_mape=mean_absolute_percentage_error(y_test, lg_y_pred)\nlg_mape","ef99f033":"lg_mae=sklearn.metrics.mean_absolute_error(y_test,lg_y_pred)  ## Mean absolute error\nlg_mae","9b87a50e":"regressor.score(X,y)","5fb742c6":"lg_r2=r2_score(y_test, lg_y_pred)  ## Regression Co_efficients\nlg_r2","40f93c91":"from sklearn.model_selection import cross_val_score\nlg_accuracies = cross_val_score(estimator = regressor, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(lg_accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(lg_accuracies.std()*100))","78d3b504":"from sklearn.model_selection import GridSearchCV\nparameters = {'fit_intercept':[True,False], 'normalize':[True,False], 'copy_X':[True, False]}\nlg_grid = GridSearchCV(regressor,parameters, cv=10)\nlg_grid.fit(X_train, y_train)\nprint (\"r2 is : \", lg_grid.best_score_)\nprint(\"Residual sum of squares: %.2f\"\n              % np.mean((lg_grid.predict(X_test) - y_test) ** 2))","e940bfbd":"sns.scatterplot(lg_y_pred,y_test,data=df_n)","dc864ef7":"from sklearn.ensemble import RandomForestRegressor\nrfr = RandomForestRegressor(n_estimators = 100, random_state = 0)\nrfr.fit(X_train, y_train)","af449508":"from sklearn.model_selection import cross_val_score\nrfr_accuracies = cross_val_score(estimator = rfr, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(rfr_accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(rfr_accuracies.std()*100))","dd109583":"rfr_y_pred = rfr.predict(X_test)\nrfr_y_pred","8f481fd3":"rfr_mse = sklearn.metrics.mean_squared_error(y_test,rfr_y_pred)  ## Mean Squared Error\nrfr_mse","53cc4c1c":"rfr_rmse= math.sqrt(rfr_mse)  #Root mean squared error\nrfr_rmse","e2698247":"rfr_mape=mean_absolute_percentage_error(y_test, rfr_y_pred)\nrfr_mape","ab6de167":"rfr_mae=sklearn.metrics.mean_absolute_error(y_test,rfr_y_pred)  ## Mean absolute error\nrfr_mae","e9148766":"rfr.score(X,y)","0b377130":"rfr_r2=r2_score(y_test, rfr_y_pred)  ## Regression Co_efficients","4764bad7":"from sklearn.model_selection import RandomizedSearchCV\nparameters = [{'n_estimators': [150,200,250,270,280,300],\n               'max_depth':[4.8,4.9,5,5.1,5.2]}]\nrfr_grid_search = RandomizedSearchCV(estimator = rfr,\n                           param_distributions = parameters,\n                           n_iter=10,\n                           cv = 10,\n                           n_jobs = -1)\nrfr_grid_search = rfr_grid_search.fit(X_train, y_train)\nrfr_best_score = rfr_grid_search.best_score_\nrfr_best_parameters =rfr_grid_search.best_params_\nprint(\"Best Score: {:.2f} %\".format(rfr_best_score*100))\nprint(\"Best Parameters:\", rfr_best_parameters)","caa77744":"parameters = [{'n_estimators': [300,350],\n               'max_depth':[5,5.01,5.02,5.03]}]\nrfr_grid_search = RandomizedSearchCV(estimator = rfr,\n                           param_distributions = parameters,\n                           n_iter=10,\n                           cv = 10,\n                           n_jobs = -1)\nrfr_grid_search = rfr_grid_search.fit(X_train, y_train)\nrfr_best_score = rfr_grid_search.best_score_\nrfr_best_parameters = rfr_grid_search.best_params_\nprint(\"Best Score: {:.2f} %\".format(rfr_best_score*100))\nprint(\"Best Parameters:\", rfr_best_parameters)","4ce10916":"parameters = [{'n_estimators': [295,300,310,320,330],\n               'max_depth':[5,5.1,5.2,5.3]}]\nrfr_grid_search = RandomizedSearchCV(estimator = rfr,\n                           param_distributions = parameters,\n                           n_iter=10,\n                           cv = 10,\n                           n_jobs = -1)\nrfr_grid_search = rfr_grid_search.fit(X_train, y_train)\nrfr_best_score = rfr_grid_search.best_score_\nrfr_best_parameters = rfr_grid_search.best_params_\nprint(\"Best Score: {:.2f} %\".format(rfr_best_score*100))\nprint(\"Best Parameters:\", rfr_best_parameters)","5671321a":"rfr_y_pred=rfr_grid_search.predict(X_test)\nrfr_y_pred","7a244fb0":"rfr_r2=r2_score(y_test, rfr_y_pred)  ## Regression Co_efficients\nrfr_r2","0e2b917f":"from sklearn.tree import DecisionTreeRegressor\ndtr = DecisionTreeRegressor(random_state = 0)\ndtr.fit(X_train, y_train)","733d325a":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = dtr, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","9d14e567":"dtr_y_pred = dtr.predict(X_test)\ndtr_y_pred","5ce9ec7d":"dtr_mse = sklearn.metrics.mean_squared_error(y_test,dtr_y_pred)  ## Mean Squared Error\ndtr_mse","4d690d8d":"dtr_rmse= math.sqrt(dtr_mse)  #Root mean squared error\ndtr_rmse","c991e051":"dtr_mape=mean_absolute_percentage_error(y_test, dtr_y_pred)\ndtr_mape","187f9bc8":"dtr_mae=sklearn.metrics.mean_absolute_error(y_test,dtr_y_pred)  ## Mean absolute error\ndtr_mae","91145938":"dtr.score(X,y)","022a85d6":"r2_score(y_test, dtr_y_pred)  ## Regression Co_efficients","d20a8afd":"parameters = [{'splitter' : [\"best\", \"random\"],\n               'max_depth':[3,5],\n              'ccp_alpha':[0.1,0.2,0.3,0.4]}]\ndtr_grid_search = RandomizedSearchCV(estimator = dtr,\n                           param_distributions = parameters,\n                           n_iter=10,\n                           cv = 10,\n                           n_jobs = -1)\ndtr_grid_search = dtr_grid_search.fit(X_train, y_train)\ndtr_best_score = dtr_grid_search.best_score_\nbest_parameters = dtr_grid_search.best_params_\nprint(\"Best score: {:.2f} %\".format(dtr_best_score*100))\nprint(\"Best Parameters:\", best_parameters)","bc48239b":"parameters = [{'splitter' : [\"best\"],\n               'max_depth':[5,5.1,5.2,5.3,5.4],\n              'ccp_alpha':[0.2,0.21,0.22,0.25,0.3]}]\ndtr_grid_search = RandomizedSearchCV(estimator = dtr,\n                           param_distributions = parameters,\n                           n_iter=10,\n                           cv = 10,\n                           n_jobs = -1)\ndtr_grid_search = dtr_grid_search.fit(X_train, y_train)\ndtr_best_accuracy = dtr_grid_search.best_score_\nbest_parameters = dtr_grid_search.best_params_\nprint(\"Best Score: {:.2f} %\".format(dtr_best_score*100))\nprint(\"Best Parameters:\", best_parameters)","83c3109f":"parameters = [{'splitter' : [\"best\"],\n               'max_depth':[5.4,5.45,5,5.5,6,6.5],\n              'ccp_alpha':[0.221,0.222,0.223,0.224,0.225]}]\ndtr_grid_search = RandomizedSearchCV(estimator = dtr,\n                           param_distributions = parameters,\n                           n_iter=10,\n                           cv = 10,\n                           n_jobs = -1)\ndtr_grid_search = dtr_grid_search.fit(X_train, y_train)\ndtr_best_score = dtr_grid_search.best_score_\nbest_parameters = dtr_grid_search.best_params_\nprint(\"Best Accuracy: {:.2f} %\".format(dtr_best_score*100))\nprint(\"Best Parameters:\",best_parameters)","836e38e4":"dtr_y_pred=dtr_grid_search.predict(X_test)\ndtr_y_pred","42aec423":"dtr_r2=r2_score(y_test, dtr_y_pred)  ## Regression Co_efficients\ndtr_r2","5ffb4ce5":"from sklearn.svm import SVR\nsvr = SVR(kernel = 'rbf')\nsvr.fit(X_train, y_train)","7a12e639":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = svr, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","41f33582":"svr_y_pred = svr.predict(X_test)\nsvr_y_pred","02b7310d":"svr_mse = sklearn.metrics.mean_squared_error(y_test,svr_y_pred)  ## Mean Squared Error\nsvr_mse","64b9f478":"svr_rmse= math.sqrt(svr_mse)  #Root mean squared error\nsvr_rmse","14883481":"svr_mape=mean_absolute_percentage_error(y_test, svr_y_pred)\nsvr_mape","2a55e00e":"svr_mae=sklearn.metrics.mean_absolute_error(y_test,svr_y_pred)  ## Mean absolute error\nsvr_mae","e108c0d2":"svr.score(X,y)","5a797612":"svr_r2=r2_score(y_test,svr_y_pred)  ## Regression Co_efficients","ad77e3c9":"parameters = [{'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n              {'C': [1, 10, 100, 1000], 'kernel': ['rbf'], 'gamma': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}]\nsvr_grid_search = RandomizedSearchCV(estimator = svr,\n                           param_distributions = parameters,\n                           n_iter=10,\n                           cv = 10,\n                           n_jobs = -1)\nsvr_grid_search = svr_grid_search.fit(X_train, y_train)\nsvr_best_score = svr_grid_search.best_score_\nbest_parameters = svr_grid_search.best_params_\nprint(\"Best Score: {:.2f} %\".format(svr_best_score*100))\nprint(\"Best Parameters:\", best_parameters)","15a995bb":"parameters = [{'C': [10,20,30], 'kernel': ['rbf'], 'gamma': [0.1,0.01,0.001]}]        \nsvr_grid_search = RandomizedSearchCV(estimator = svr,\n                           param_distributions = parameters,\n                           n_iter=10,\n                           cv = 10,\n                           n_jobs = -1)\nsvr_grid_search = svr_grid_search.fit(X_train, y_train)\nsvr_best_score = svr_grid_search.best_score_\nbest_parameters = svr_grid_search.best_params_\nprint(\"Best Score: {:.2f} %\".format(svr_best_score*100))\nprint(\"Best Parameters:\", best_parameters)","650d5292":"parameters = [{'C': [30,35,40,45,50,55,60], 'kernel': ['rbf'], 'gamma': [0.001,0.0001,0.00001]}]        \nsvr_grid_search = RandomizedSearchCV(estimator = svr,\n                           param_distributions = parameters,\n                           n_iter=10,\n                           cv = 10,\n                           n_jobs = -1)\nsvr_grid_search = svr_grid_search.fit(X_train, y_train)\nsvr_best_score = svr_grid_search.best_score_\nbest_parameters = svr_grid_search.best_params_\nprint(\"Best Score: {:.2f} %\".format(svr_best_score*100))\nprint(\"Best Parameters:\", best_parameters)","f0c3058e":"parameters = [{'C': [55,56,57,58,59], 'kernel': ['rbf'], 'gamma': [0.0001,0.00011,0.00012,0.00013,0.00014,0.00015]}]        \nsvr_grid_search = RandomizedSearchCV(estimator = svr,\n                           param_distributions = parameters,\n                           n_iter=10,\n                           cv = 10,\n                           n_jobs = -1)\nsvr_grid_search = svr_grid_search.fit(X_train, y_train)\nsvr_best_score = svr_grid_search.best_score_\nbest_parameters = svr_grid_search.best_params_\nprint(\"Best Score: {:.2f} %\".format(svr_best_score*100))\nprint(\"Best Parameters:\", best_parameters)","af018bf8":"svr_y_pred=svr_grid_search.predict(X_test)\nsvr_y_pred","69afadc1":"svr_r2=r2_score(y_test, svr_y_pred)  ## Regression Co_efficients\nsvr_r2","5b85259b":"model_acc_comp=pd.DataFrame({'Models':['Linear Regression','Random Forest','Decision Tree',\n                                       'Support Vector Machin'],\n               'Best R2_Score':[lg_r2,rfr_r2,dtr_r2,svr_r2]})\nprint(model_acc_comp)","f067a102":"## iii>> Building Decision Tree Model","e4c2f926":"***Creating another dataset with restricting value under 3 threshold standard deviation***","473aee9a":"### K Fold Cross Validation","28de5f6c":"**As we observe above features above are in required format","a6fbe6b7":"### h. Regression Plot","24d5b175":"### Hyper Tuning of Paramters","15bd336b":"### 4.Replace outliers with Nulls (if you find it essential) and replace all the nulls with respective approach of central tendencies (Mean\/Median\/Mode). ","3b49f0f9":"California as a State tops all the States in Sales\n\n\n\n**Top 10 Products**","1feebf26":"Sean Miller top customer in terms of Sales\n\n**Region wise total Sales**","b695ebd8":"***As we observe above, there few columns like ID's which logicaly dont have impact on the Sales,so we can just drop such***","a00ea3cb":"**Hyper Tuning of Paramters**","5e0fb134":"**It returns a Boolean Series with True value for each duplicated row**\n\n   **Arguments**:\n\n   **subset :\n             Single or multiple column labels which should used for duplication check. If not provides all columns                           will checked for finding duplicate rows**.\n             \n   **keep :\n           Denotes the occurrence which should be marked as duplicate. It\u2019s value can be {\u2018first\u2019, \u2018last\u2019, False},\n           default value is \u2018first\u2019**","b7a8770d":"### 3. Drop all non-essential features","b8c3606c":"### 9. Build at least a minimum of 4 different Regression models. All the models should use K-Fold cross Validation to train the model with at least 5-fold cross validation. \n\n### 10. Compare the error and pick the ideal one with least errors.\n\n### 11. Run hyperparameter tuning on all the models and pick the best parameters (A minimum of 2 Parameters should be tuned) and picked. ","13fb5076":"-Binders tops in all the Sales in Sub Categories","f7f9f739":"i>>QUANTITY- Feature","a777be9b":"### 7. Add your view of EDA to enhance understanding of data. i.e., Grouping data and observing the way data is distributed.Try to add as many layers of EDA as possible","a22b6b33":"***Basically  we have used 4 Regression models and there Best R2-Score of the models are as follows:***\n\n1. Linear Regression : **0.775943**\n2. Random Forest Regression: **0.833231**\n3. Decision Tree Regression :**0.799835**\n4. Support Vector Regression models: **0.765350**\n\n\n***As we observe above Random Forest  Regression has highest R2 Value,so we will be choosing that for our prediction***","cc389a2a":"### 12. Now, compare the models and pick the ideal one. \n\n### 13. Try to Predict the target with maximum independent features. ","1d71906b":"***As we can observe above,we can state following points***\n\n    -Shipping cost and Sales are Maximum correlated(0.74)\n    -next are Profit and Sales are correlated(0.61)\n    -Discount and Sales has valuec closer to 0,so almost there is no correlation between them\n    -Apparently,Profit and Discount are negatively coorelated\n    -","d51498e5":"APAC tops all the Markets\n\n**Top 10 Countries**","56489fc2":"### PROJECT _1: RETAIL SALES FORECASTING: \n\n### Introduction:\n\n   A giant superstore has worldwide operations. It operates across the globe and deals with all the major product categories - consumer, corporate & home office. In this analysis, a forecasting model is developed using machine learning algorithms to improve the accuracy of forecasts of sales. The proposed model is especially targeted to support the future purchase and more accurate forecasts product sales and A model based on a superstore's data is developed in order to validate the use of the various machine learning algorithms. In the case study, multiple regression methods are compared best model is chosen the store caters to 7 different market segments and in 3 major categories. \n ","bab7c10d":"### d. Aggregation for all numerical Columns ","c910c52a":"As we can see,we have an outlier after 4000,which is excess,so we will drop it","d181155c":"## ***ii>> Building Random Forest Regression Model***","371c120a":"Evaluation of random forest using Cross validation","ca500c90":"***On the negative side also we have bit outiers,we will replace them with Lower limit(1.5 X IQR),and basicallly on the negative profit means its the loss incurred due to more amount of discount on the products***","784ef161":"### **Now using EXEP (within 3 threshold  values)***","7e417c34":"Office Supplies are more sold compared to other category","3f7b4b00":"Critical Order of Priority has High Profit","6767068c":"### 5.Calculate Z score to validate whether outliers are still present or not","c138c722":"Here also if we observe,we have some unusual discounts crossing 50% ,sometimes stores put discount more to sell off RTC products","d02e8018":"Orders with medium priority sold more","c80a02e8":"   #### Post Discussion with Sir and due to huge amount of data(52000 rows) was not supported by the system,accepted to proceed with 10000 rows of data and dropping the rest.","9868f1c9":"In Quantity,we cannot remove outliers,depending on discount,product will be sold more,hence we will be having some products different from usual","13b02cf5":"iii>> PROFIT-Feature","f7f7dd62":"### g. Correlation \u2013 Heatmap ","ba0ba30d":"***Above plot occurs where there are huge amount of categorical variable,which is difficult to interpret,so in order derive senseful insights have to use main components for analysis,further if we are in need if any particular city\/state analysis we can choose accoordingly***","3bf363d2":" **Before deleting unique ID's of the record we can see there are no duplicates","717393fa":"HYPER PARAMTER TUNING USING RANDOMIZED SEACRH CV","26e34246":"***Since there are 1831 unique values of city and 732 values of State,and 132 values of Country,the bar graph is bit difficult to infer using them,however if requried we can choose accordingly for analysis***","07d7261e":"### 6. Clean the data with formatting issues if any. (converting datatypes, replacing dollars, etc.) ","3cff9208":"## RETAIL_SALES_FORECAST_PREDICTION_P_1","7b447074":"### As we observe,we have created two data frames\n\n  ### ***i.One to know impact of more sold products,at higher discounts,and higher sales[df]***\n  ###   ***ii.Next one is optimmized with 3 threshold Standard deviation (z-Score)[EXEP_1]***","184d8678":"*Office Supplies tops of all the Sales in Categories","db3533b0":"Staples tops all the Products in Sales\n\n\n\n**Plotting top 10 customers**","287568da":"### 2. Drop all duplicate rows ","fee4e8a8":"### 8. Build a model of choice \u2013 Regression problem statement, hence build a regression model first and calculate MAE, MSE, RMSE, MPE and MAPE. Also see the R2 score\n\n\n\n#### **In this,first we will build model  on 'df'  then 'EXEP' ,which ever model gives more performance will use that model for further models** ","9b819590":"### j. Pair plot ","04d04197":"*As we observe above there are no duplicates in our data sets","408d7e74":"###  **1. Training the Linear Regression model on the Training set**","061fd35d":"**As we Observe above**\n\n**we had two sets of data,one was DF in which we had kept records more than 3 standard deviaton threshold and replaced few outliers with median,keeping in mind the business real time sales values ,and SECONDLY set called EXEP_1 in which we had restricted data to threshold 3, and filterd out outliers using Z-Score**\n\n   - we can observe that EXEP_1 data has been usefull in creation of model,and less errors commpared to df\n   - So for further models we will be carrying out with restricted data set within 3 threshold standard deviatiion","fb82aa91":"Central Region tops all the Sales in Regions\n\n**Ship mode wise no of sales**","02eb8664":"#### **Hyper Parameter Tuning**","aaa834bf":"Standard Class is the top in Transport Methods","6719a919":"**As we can observe above,we have sales more than 8000 as those are machines being sold at that prices, we will not consider \nthem outliers**","d1637ba6":"***Converting data types of Order Date and Ship Date***","fc077e4c":"ii>>>DISCOUNT-Feature","8025a5c1":"## Conclusion","ccfc55ab":"**As we can Observe we have ZERO duplicate rows in the data**","b520f2cd":"### i. Bar Plot \n\n**With Categorical against numerical Features","7f9e9402":"### iv>> Building Support Vector Regression  Model","70d841bf":"**Predicting the Test set results**","39055acd":"**As we can observe ,above shipping cost are HIGH usually for critical and also for Corporate segments,which are essential so we are not treating them**","57c33161":"### C. Distribution Plot \u2013 Target Variable ","8274bfb4":"United States as a Country tops all the Countries in Sales\n\n\n**Top 10 States**","b9b59d78":"iv>>SHIPPING COST-Feature","c68e093d":"***According to obvservation above ,we can update data as follows***\n\n     1.MARKET,REGION and CATEGORY,SUB-CATEGORY are negatively correlated as well as has no coorelation with SALES ,which               logically says that  MARKET,REGION constitues for CITY,COUNTRY,STATES and also Category,Sub_Category constitutes for            Product Name .which we can take them down\n     \n     2.We can drop Customer Name,Product ID,Customer ID,Row ID as they no impact on Sales","60e1679d":"### f. Duplicate values across all columns","6d24e8e8":"### e. Unique Values across all columns ","f5809e1c":"### Statement:1 Basic Exploratory Data Analysis\n\n**Box Plot**","e891b88f":"Applying K-Fold Cross Validation,with ideal FOLDS of 10","bc3dd522":"#### ***We have used 8 independent variable and predicted target on those basis:***","d8bb32ef":"### b. Histogram \u2013 Distribution of Target Variable "}}