{"cell_type":{"6ce0caa0":"code","52efa08e":"code","235a9b49":"code","1538fce3":"code","1d1cb14d":"code","15302a43":"code","d7d358eb":"code","1c4e3c87":"code","748aa1c8":"code","381c27ae":"code","aef76b62":"code","a4a2cfab":"markdown","fff121e6":"markdown","857d74ce":"markdown","67ee2a3c":"markdown","ce234341":"markdown","7877c6a1":"markdown","bb637f84":"markdown","dedb554f":"markdown","976cb630":"markdown","a6de4f4c":"markdown","3acdbc23":"markdown","c268eccf":"markdown"},"source":{"6ce0caa0":"import os\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport math\nimport scipy\nfrom random import choice\nfrom scipy.spatial.distance import euclidean\nfrom scipy.special import expit\nfrom IPython.display import HTML\nfrom matplotlib import animation\nfrom tqdm import tqdm\n\n\ntrain_df = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)","52efa08e":"def standardize_dataset(train):\n    train['ToLeft'] = train.PlayDirection == \"left\"\n    train['IsBallCarrier'] = train.NflId == train.NflIdRusher\n    train['TeamOnOffense'] = \"home\"\n    train.loc[train.PossessionTeam != train.HomeTeamAbbr, 'TeamOnOffense'] = \"away\"\n    train['IsOnOffense'] = train.Team == train.TeamOnOffense # Is player on offense?\n    train['YardLine_std'] = 100 - train.YardLine\n    train.loc[train.FieldPosition.fillna('') == train.PossessionTeam,  \n            'YardLine_std'\n             ] = train.loc[train.FieldPosition.fillna('') == train.PossessionTeam,  \n              'YardLine']\n    train['X_std'] = train.X\n    train.loc[train.ToLeft, 'X_std'] = 120 - train.loc[train.ToLeft, 'X'] \n    train['Y_std'] = train.Y\n    train.loc[train.ToLeft, 'Y_std'] = 53.3 - train.loc[train.ToLeft, 'Y'] \n    train['Orientation_std'] = train.Orientation\n    train.loc[train.ToLeft, 'Orientation_std'] = np.mod(180 + train.loc[train.ToLeft, 'Orientation_std'], 360)\n    train['Dir_std'] = train.Dir\n    train.loc[train.ToLeft, 'Dir_std'] = np.mod(180 + train.loc[train.ToLeft, 'Dir_std'], 360)\n    train.loc[train['Season'] == 2017, 'Orientation'] = np.mod(90 + train.loc[train['Season'] == 2017, 'Orientation'], 360)    \n    \n    return train","235a9b49":"dominance_df = standardize_dataset(train_df)\ndominance_df['Rusher'] = dominance_df['NflIdRusher'] == dominance_df['NflId']\n\ndominance_df.head(3)","1538fce3":"def radius_calc(dist_to_ball):\n    ''' I know this function is a bit awkward but there is not the exact formula in the paper,\n    so I try to find something polynomial resembling\n    Please consider this function as a parameter rather than fixed\n    I'm sure experts in NFL could find a way better curve for this'''\n    return 4 + 6 * (dist_to_ball >= 15) + (dist_to_ball ** 3) \/ 560 * (dist_to_ball < 15)\n","1d1cb14d":"@np.vectorize\ndef compute_influence(x_point, y_point, player_id, play_id):\n    my_play = dominance_df[dominance_df['PlayId']==play_id]\n    '''Compute the influence of a certain player over a coordinate (x, y) of the pitch\n    '''\n    point = np.array([x_point, y_point])\n    theta = math.radians(my_play.loc[player_id]['Orientation_std'])\n    speed = my_play.loc[player_id]['S']\n    player_coords = my_play.loc[player_id][['X_std', 'Y_std']].values\n    ball_coords = my_play[my_play['IsBallCarrier']][['X_std', 'Y_std']].values\n    \n    dist_to_ball = euclidean(player_coords, ball_coords)\n\n    S_ratio = (speed \/ 13) ** 2    # we set max_speed to 13 m\/s\n    RADIUS = radius_calc(dist_to_ball)  # updated\n\n    S_matrix = np.matrix([[RADIUS * (1 + S_ratio), 0], [0, RADIUS * (1 - S_ratio)]])\n    R_matrix = np.matrix([[np.cos(theta), - np.sin(theta)], [np.sin(theta), np.cos(theta)]])\n    COV_matrix = np.dot(np.dot(np.dot(R_matrix, S_matrix), S_matrix), np.linalg.inv(R_matrix))\n    \n    norm_fact = (1 \/ 2 * np.pi) * (1 \/ np.sqrt(np.linalg.det(COV_matrix)))    \n    mu_play = player_coords + speed * np.array([np.cos(theta), np.sin(theta)]) \/ 2\n    \n    intermed_scalar_player = np.dot(np.dot((player_coords - mu_play),\n                                    np.linalg.inv(COV_matrix)),\n                             np.transpose((player_coords - mu_play)))\n    player_influence = norm_fact * np.exp(- 0.5 * intermed_scalar_player[0, 0])\n    \n    intermed_scalar_point = np.dot(np.dot((point - mu_play), \n                                    np.linalg.inv(COV_matrix)), \n                             np.transpose((point - mu_play)))\n    point_influence = norm_fact * np.exp(- 0.5 * intermed_scalar_point[0, 0])\n\n    return point_influence \/ player_influence","15302a43":"@np.vectorize\ndef pitch_control(x_point, y_point, play_id):\n    my_play = dominance_df[dominance_df['PlayId']==play_id]\n    '''Compute the pitch control over a coordinate (x, y)\n    '''\n    home_ids = my_play[my_play['IsOnOffense']==True].index\n    home_control = np.around(compute_influence(x_point, y_point, home_ids, play_id), 2)\n    home_score = np.sum(home_control)\n    \n    away_ids = my_play[my_play['IsOnOffense']==False].index\n    away_control = np.around(compute_influence(x_point, y_point, away_ids, play_id), 2)\n    away_score = np.sum(away_control)\n    \n    return expit(home_score - away_score)","d7d358eb":"# animation interval\nANIM_INTERVAL = 600\n\n# don't make it too large otherwise it'll be long to run\nGRID_SIZE = 10","1c4e3c87":"def plot_pitch_control(my_play):\n    front = 25\n    behind = 15\n    left = right = 20\n    num_points_meshgr = (GRID_SIZE, GRID_SIZE)\n    \n    x_coords = my_play['X_std'].values\n    y_coords = my_play['Y_std'].values\n    player_coords = my_play[my_play['Rusher']][['X_std', 'Y_std']].values[0]\n    \n    play_id = my_play['PlayId'].values[0]\n\n    X, Y = np.meshgrid(np.linspace(player_coords[0] - behind, \n                                   player_coords[0] + front, \n                                   num_points_meshgr[0]), \n                       np.linspace(player_coords[1] - left, \n                                   player_coords[1] + right, \n                                   num_points_meshgr[1]))\n\n    #fill all\n    #X, Y = np.meshgrid(np.linspace(0, 120, 24), np.linspace(0, 53.3, 10))\n\n    # infl is an array of shape num_points with values in [0,1] accounting for the pitch control\n    infl = pitch_control(X, Y, play_id)\n\n    plt.contourf(X, Y, infl, cmap ='bwr')\n    plt.plot(player_coords[0] ,player_coords[1], markeredgecolor='black', c='snow', marker='o', markersize=14, label='Rusher')\n    plt.scatter(x_coords[11:21] ,y_coords[11:21], c='orange', marker=',', s=120, label='Diffence')\n    plt.scatter(x_coords[0:10] ,y_coords[0:10], c='purple', marker='>', s=120, label='Offence')","748aa1c8":"games = np.unique(dominance_df['GameId'].values)\nplays = np.unique(dominance_df['PlayId'].values)\n\ndef update(i, df_game, play_list):\n    my_play = df_game[df_game['PlayId']==play_list[i]]\n    \n    # parameters\n    game_id         = my_play['GameId'].values[0]\n    play_id         = my_play['PlayId'].values[0]\n    game_clock      = my_play['GameClock'].values[0]\n    distance        = my_play['Distance'].values[0]\n    yards           = my_play['Yards'].values[0]\n    season          = my_play['Season'].values[0]\n    week            = my_play['Week'].values[0]\n    down            = my_play['Down'].values[0]\n    quarter         = my_play['Quarter'].values[0]\n    yard_line       = 10 + my_play['YardLine_std'].values[0]\n    gain_line       = yard_line + yards\n    first_down_line = yard_line + distance\n    \n    # plot\n    plt.cla()\n    plt.grid()\n    plt.ylim((0, 53))\n    plt.xlim((0, 120))\n\n    #Pitch Control\n    plot_pitch_control(my_play)    \n    \n    ax.axvline(10,c='gray')\n    ax.axvline(60,c='gray')\n    ax.axvline(110,c='gray')\n\n    plt.vlines([yard_line], 0, 53, 'royalblue', label=\"YardLine\")\n    plt.vlines([gain_line], 0, 53, 'red', label=\"YardLine + Yards\")\n    plt.vlines([first_down_line], 0, 53, 'orange', label=\"First Down Line\")\n\n    plt.legend(loc=\"lower left\", fontsize=16)\n    \n    plt.title(f\"frame: {i}, Season:{season}, Week:{week}, Clock:{game_clock[:5]}, Distance:{distance:02}, Yards:{yards:02}, {down} down, {quarter} quarter, PlayId:{play_id}\")\n\n\ndef show_gameplay(game_id):\n    df_game = dominance_df[dominance_df['GameId']==game_id]\n    play_list = dominance_df[dominance_df['GameId']==game_id]['PlayId'].unique()\n\n    anim = animation.FuncAnimation(\n          fig, update, \n          fargs = (df_game, play_list), \n          interval = ANIM_INTERVAL, \n          frames = play_list.size\n    )\n\n    return anim.to_jshtml()\n","381c27ae":"# Chose GameId to plot\ngame_id = 2017091100\n\nfig, ax = plt.subplots(figsize=(20,8.9))\nHTML(show_gameplay(game_id))","aef76b62":"# Chose which game to plot(0 - 511)\ngame_index = 71\ngame_id = games[game_index]\n\nfig, ax = plt.subplots(figsize=(20,8.9))\nHTML(show_gameplay(game_id))","a4a2cfab":"# Presentation","fff121e6":"# Little Standardization Step","857d74ce":"# Parameters","67ee2a3c":"![](https:\/\/i.imgur.com\/ElXA7fy.gif)","ce234341":"Quoting from the paper : based on this, we present a pitch control model that summarizes the level of influence of every player,and outputs a degree of control for any part of the pitch. Equation 2 presents the pitch control level at\na location $p$ at time $t$, where $i$ and $j$ refers to the index of the player in each opposing team. Here the logistic function transforms the substraction of the accumulated individual influence area of each team into a degree of control within the $[0, 1]$ range. Also, since we are defining a team-oriented pitch control model, a single player without any influence of any other player at its current location only controls\n`logistic(1) = 0.73` of the space. This provides the need of higher density of players near a given area to provide higher level of control in that area.\nWe have the following equation : \n<break>\n$PC(p,t)=\\sigma(\\sum_i I(p,t) - \\sum_j I(p,t))$  ($\\sigma$ is the logistic function)","7877c6a1":"# Pitch Control","bb637f84":"In this notebook, I code the **VIP hint** given by @MichaelLopez. You can find the paper at : http:\/\/www.lukebornn.com\/papers\/fernandez_ssac_2018.pdf \n<break>\n\nI just implemented their version of the algorithm, without any specific attention to the particular context of this competition. I think several thing can be tailored to be \"NFL specific\". I mainly refer of the influence `radius` of a player, which is set to lie in $[4, 10]$ in football, but that may well be very different here. \nOnce you have the influence of the player and the pitch control, you'll have to create features from that.","dedb554f":"# Player influence Area","976cb630":"* **v_1 update**: as in the reference paper, I created a function that modulates the influence radius of a player as a function of his distance to the ball. Indeed, the farther you're from the ball, the biggest influence you can have in terms of pitch covering. I reimplemented their function but I'm sure you could gain some insight by adapting it with \"NFL relevant\" values.","a6de4f4c":"Quoting from the paper : specifically, the player\u2019s influence I at a given location p for a given player i at time t is defined by a bivariate normal distribution with mean $\\mu_i(t)$ and covariance matrix $\\sum_i(t)$, given the player\u2019s velocity $s$ and angle $\\theta$. For a given location in space $p$ at time $t$, the probability density function of player $i$ influence area is defined by a standard multivariate normal distribution. The player\u2019s influence likelihood is then\ndefined as the normalization of $f$ at the given location $p$ by the value of $f$ at player\u2019s current location $p_i(t)$, as shown in the following equation :\n<break>\n$I_i(p,t) = \\frac{f_i(p,t)}{f_i(p_i(t),t)}$","3acdbc23":"# Imports","c268eccf":"Just a little preprocessing step to ensure we have the X and Y standardized"}}