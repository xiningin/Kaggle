{"cell_type":{"d508a3a2":"code","23e0fa05":"code","3f0514d3":"code","2733a34b":"code","3a205a95":"code","8ead3842":"code","fa605834":"code","0787dbe1":"code","6a11516c":"code","3de4e5a4":"code","404b3526":"code","79d79ba5":"code","712e0f71":"code","2ac68472":"code","da817502":"code","65b40bb0":"code","f0a7d6d0":"code","b9154e27":"markdown","8a667844":"markdown","ea186f08":"markdown","c0affe53":"markdown"},"source":{"d508a3a2":"# Importando a biblioteca pandas\nimport pandas as pd\n\n# Importando o arquivo xls\n# somente a planilha Contracheque -> sheet_name=\"Contracheque\"\n# descartando o cabecalho -> header=None\n# descartando as 20 primeiras linhas -> skiprows=20\n# e importando apenas as colunas selecionados -> usecols=[1, 2, 3, 4, 8, 14]\ndf = pd.read_excel(\"..\/input\/Salarios_Juizes_TJDFT_122017.xls\", sheet_name=\"Contracheque\", header=None,  skiprows=20, usecols=[1, 2, 3, 4, 8, 14])\n\n# Incluindo o cabecalho para as 5 colunas importadas\ndf.columns = [\"Nome\", \"Cargo\", \"Lotacao\", \"Subsidio\", \"Rendimento_Bruto\", \"Rendimento_Liquido\"]\n\n# Exibindo os 5 primeiros registros importados\ndf.head()","23e0fa05":"# O pandas consegue mostrar um resumo quantitativo dos dados contidos no dataframe\n# Isso vale apenas para as colunas que contenham valores num\u00e9ricos\ndf.describe()","3f0514d3":"# Quantos magistrados est\u00e3o na folha de pagamento do TJDFT?\ndf.count()","2733a34b":"# \u00c9 poss\u00edvel contar apenas uma das colunas, fazendo refer\u00eancia direta a\n# essa coluna no dataframe e depois executando o m\u00e9todo count()\ndf[\"Nome\"].count() # ou df.Nome.count()\n\n# E tamb\u00e9m \u00e9 poss\u00edvel formatar a sa\u00edda para um texto mais leg\u00edvel\nprint(f\"O TJDFT possui {df.Nome.count()} magistrados\")","3a205a95":"# Qual o somat\u00f3rio do sal\u00e1rio l\u00edquido pago a todos esses magistrados?\ndf.Rendimento_Liquido.sum()","8ead3842":"# Qual a m\u00e9dia salarial dos magistrados do TJDFT?\n# O valor foi arrendodado para 2 casas decimais\nprint(f\"Em m\u00e9dia, um magistrado do TJDFT recebe R$ {df.Rendimento_Liquido.mean():.2f} de sal\u00e1rio l\u00edquido por m\u00eas.\")","fa605834":"# Quais os 5 maiores sal\u00e1rios l\u00edquidos?\ndf.nlargest(5, \"Rendimento_Liquido\")","0787dbe1":"# E os 5 menores sal\u00e1rios l\u00edquidos?\ndf.nsmallest(5, \"Rendimento_Liquido\")","6a11516c":"# Vamos separar os magistrados aposentados constantes na folha de pagamento do TJDFT\n# Nesse caso espec\u00edfico, quando o magistrado est\u00e1 aposentado esse termo aparece no campo Lotacao\n# Isso pode n\u00e3o ser verdade para os dados de outros tribunais\n# Vamos colocar o resultado da nossa sele\u00e7\u00e3o em outro dataframe\ndf_aposentados = df[df.Lotacao.str.contains(\"APOSENTADOS\")]\n\ndf_aposentados.head()","3de4e5a4":"# Qual o n\u00famero de aposentados na folha de pagamento do TJDFT?\ndf_aposentados.Nome.count()","404b3526":"# Qual o sal\u00e1rio m\u00e9dio dos aposentados do TJDFT?\nprint(f\"No TJDFT um magistrado aposentado recebe, em m\u00e9dia, R$ {df_aposentados.Rendimento_Liquido.mean():.2f}\")","79d79ba5":"# Quais os maiores sal\u00e1rios de magistrados aposentados?\ndf_aposentados.nlargest(5, \"Rendimento_Liquido\")","712e0f71":"# Agora vamos separar os desembargadores constantes na folha de pagamento do TJDFT\n# Nesse caso espec\u00edfico, quando o magistrado \u00e9 desembargador esse termo aparece no campo Cargo\n# Isso pode n\u00e3o ser verdade para os dados de outros tribunais\n# Vamos colocar o resultado da nossa sele\u00e7\u00e3o em outro dataframe\n# mas agora devemos ter cuidado para separar apenas os desembargadores que est\u00e3o na ativa\ndf_desembargadores = df[(df.Cargo.str.contains(\"DESEMBARGADOR\")) & ~(df.Lotacao.str.contains(\"APOSENTADOS\"))]\n\ndf_desembargadores.head()","2ac68472":"# Qual o n\u00famero de desembargadores na folha de pagamento do TJDFT?\ndf_desembargadores.Nome.count()","da817502":"# Qual o sal\u00e1rio m\u00e9dio dos desembargadores do TJDFT?\nprint(f\"No TJDFT um desembargador recebe, em m\u00e9dia, R${df_desembargadores.Rendimento_Liquido.mean():.2f}\")","65b40bb0":"# Quais os maiores sal\u00e1rios de desembargadores?\ndf_desembargadores.nlargest(5, \"Rendimento_Liquido\")","f0a7d6d0":"# Importando a biblioteca\nimport matplotlib.pyplot as plt\n\n# e determinando que os graficos ser\u00e3o desenhados no pr\u00f3prio Jupyter Notebook\n%matplotlib inline\n\n# Vamos ver a distribui\u00e7\u00e3o dos rendimento l\u00edquidos\ndf.Rendimento_Liquido.hist(bins=50)\nplt.title(\"Distribuicao por Salarios\")\nplt.ylabel('Qtde de Magistrados')\nplt.xlabel('Rendimento L\u00edquido');","b9154e27":"## Analisando os dados\n\nO pacote **pandas** possui um conjunto de m\u00e9todos que permitem realizar algumas an\u00e1lises em cima dos dados presentes no **dataframe**. Os coment\u00e1rios em cada c\u00e9lula explicam o que faz cada um dos m\u00e9todos.","8a667844":"# Sal\u00e1rios dos Ju\u00edzes do TJDFT - 12\/2017\n\n[adaptado de Marcos Vin\u00edcius Guimar\u00e3es: https:\/\/github.com\/OSBrasilia\/Curso_Analise_Dados_Publicos]\n\nConforme determina\u00e7\u00e3o do Conselho Nacional de Justi\u00e7a - CNJ ([Portaria n. 63, de 17 de agosto de 2017](http:\/\/www.cnj.jus.br\/busca-atos-adm?documento=3352)) todos os 90 tribunais brasileiros devem disponibilizar as informa\u00e7\u00f5es de remunera\u00e7\u00e3o dos seus magistrados, em cumprimento \u00e0 lei de Acesso \u00e0 Informa\u00e7\u00e3o. Para padronizar a divulga\u00e7\u00e3o desses dados o CNJ criou uma planilha Excel padr\u00e3o, que deve ser preenchida pelos tribunais, e passou a disponibilizar todas as planilhas em seu site ([Remunera\u00e7ao dos Magistrados](http:\/\/www.cnj.jus.br\/transparencia\/remuneracao-dos-magistrados)).\n\nComo todas as planilhas s\u00e3o, supostamente, iguais, iremos criar um conjunto de instru\u00e7\u00f5es Python para abrir e importar uma planilha, e analisar os dados contidos nela. Al\u00e9m disso, esse Jupyter Notebook servir\u00e1 como um tutorial introdut\u00f3rio ao uso da biblioteca **pandas** e \u00e0 an\u00e1lise de dados com Python. Como exemplo usaremos os dados disponibilizados pelo Tribunal de Justi\u00e7a do Distrito Federal e Territ\u00f3rios - TJDFT, com base na planilha baixada do site do CNJ no dia 07\/12\/2017.\n\nUsando esse notebook como exemplo e a planilha de outro tibunal, qualquer pessoa deve conseguir realizar as mesmas an\u00e1lises, ou at\u00e9 mesmo expandir o trabalho realizado aqui. Obviamente algum tribunal espec\u00edfico pode descumprir a determina\u00e7\u00e3o do CNJ e acabar por disponibilizar seus dados em um formato diferente da planilha padr\u00e3o. Se isso acontecer, mudan\u00e7as dever\u00e3o ser realizadas no c\u00f3digo, principalmente na parte intitulada **Importando os dados**.\n","ea186f08":"## Plotando gr\u00e1ficos\n\nA biblioteca **pandas** tem integra\u00e7\u00e3o nativa com a biblioteca **matplotlib**, o que permite a plotagem de Series\/DataFrames de forma facilitada. Neste caso, apenas chamamos o m\u00e9todo hist() na coluna que queremos produzir o histograma e o gr\u00e1fico \u00e9 gerado. \u00c9 importante customizar o gr\u00e1fico por meio da biblioteca **matplotlib**, sempre lembrando de rotular os eixos.","c0affe53":"## Importando os dados\n\nInicialmente \u00e9 preciso acessar a p\u00e1gina espec\u00edfica do CNJ ([Remunera\u00e7ao dos Magistrados](http:\/\/www.cnj.jus.br\/transparencia\/remuneracao-dos-magistrados)) e baixar o arquivo referente ao Tribunal de Justi\u00e7a do Distrito Federal e Territ\u00f3rios. Coloque o arquivo .xls na mesma pasta do Jupyter Notebook (arquivo .ipynb).\n\n\u00c9 importante abrir o arquivo .xls no pr\u00f3prio Excel (ou programa similar) para visualizar o arquivo e entender os dados. Ao abrir o arquivo \u00e9 poss\u00edvel perceber que existem 5 diferentes planilhas, mas os dados principais est\u00e3o na primeira planilha, chamada **Contracheque**. Al\u00e9m disso percebemos que as primeiras linhas dessa planilha n\u00e3o cont\u00eam dados, mas apenas explica\u00e7\u00f5es de preenchimento. O cabe\u00e7alho das colunas est\u00e1 nas linhas 19 e 20 (mescladas) e os dados come\u00e7am da linha 21. A forma mais f\u00e1cil de resolver esse problema \u00e9 importar as colunas desejadas, sem cabe\u00e7alho, e inserir o cabe\u00e7alho posteriormente.\n\nPara cada linha temos 17 colunas, a saber: CPF (que n\u00e3o apresenta dados v\u00e1lidos), **Nome**, **Cargo**, **Lota\u00e7\u00e3o**, **Subs\u00eddio (R\\$)**, Direitos Pessoais(1), Indeniza\u00e7\u00f5es(2), Direitos Eventuais(3), **Total de Rendimentos(4)**, Previd\u00eancia P\u00fablica(5) (R\\$), Imposto de Renda(6) (R\\$), Descontos Diversos(7) (R\\$), Reten\u00e7\u00e3o por Teto Constitucional(8) (R\\$), Total de Descontos(9), **Rendimento L\u00edquido(10)**, Remunera\u00e7\u00e3o do \u00f3rg\u00e3o de origem(11) (R\\$) e Di\u00e1rias(12) (R\\$). As colunas em negrito correspondem \u00e0quelas que iremos tratar em nossa an\u00e1lise.\n\nOs dados ser\u00e3o lidos do arquivo usando as fun\u00e7\u00f5es das bibliotecas **pandas** e **xlrd**, que permitem importar facilmente uma ou mais planilhas do arquivo Excel, e tamb\u00e9m permitem a exclus\u00e3o de linhas indesejadas. Depois de importados, os dados ficar\u00e3o dispon\u00edveis em um **dataframe**."}}