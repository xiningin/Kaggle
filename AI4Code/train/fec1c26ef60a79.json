{"cell_type":{"6719c7f9":"code","348fcd7b":"code","2e417f23":"code","46b6f936":"code","9ee69a73":"code","e62e8763":"code","063dd62e":"code","d392bd35":"code","9363e699":"code","509b8a1c":"code","d7af55be":"code","223b4434":"code","057f01d7":"code","8bc8e2fa":"code","c6498919":"code","b3e7108b":"code","6cb64b44":"code","f3d62946":"code","abbb6570":"code","c0f60fb5":"code","6970eb1e":"code","ed0f09e1":"code","487d3b95":"code","5f9b9383":"code","cf0ad07f":"code","95dcb5e6":"code","701f9a3b":"code","dbd2c75f":"code","21aec993":"code","a53415f1":"code","d7e75e53":"code","fa48100f":"code","7e3534e4":"code","69e8ab67":"code","4729adf9":"code","cec95072":"code","f402d1b6":"code","db0293c4":"code","fe77888d":"code","27170167":"code","d79a7ed0":"code","8aa43ce2":"code","75e9ee57":"code","6e8139b9":"markdown"},"source":{"6719c7f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","348fcd7b":"import seaborn as sns\nimport matplotlib.pyplot as plt","2e417f23":"df = pd.read_csv('\/kaggle\/input\/craigslist-carstrucks-data\/vehicles.csv')\ndf.head()","46b6f936":"df.info()","9ee69a73":"df = df[['region', 'price', 'year', 'manufacturer','model', 'condition', 'cylinders', 'fuel', 'odometer', 'title_status','transmission', 'drive', 'size', 'type', 'paint_color','state']]","e62e8763":"print(df.isnull().sum().sort_values(ascending = False))\ndf.isnull().sum().sort_values().plot(kind='barh')\nplt.axvline(x=df.shape[0],color='red',linestyle='--')\nplt.axvline(x=df.shape[0]\/2,color='orange',linestyle='--')\nplt.axvline(x=df.shape[0]\/4,color='yellow',linestyle='--')\nplt.text(df.shape[0]\/4,6,'25%',rotation=90)\nplt.text(df.shape[0]\/2,6,'50%',rotation=90)\nplt.text(df.shape[0],6,'Total observations',rotation=90)","063dd62e":"df = df.dropna()","d392bd35":"plt.figure(figsize=(25,5))\ndf['year'].value_counts().sort_values().head(100).plot(kind = 'bar',color='orange')","9363e699":"plt.figure(figsize=(10,20))\ndf['region'].value_counts().sort_values().head(100).plot(kind = 'barh',color='teal')","509b8a1c":"plt.figure(figsize=(15,6))\ndf['manufacturer'].value_counts().sort_values().plot(kind = 'bar',color='red')","d7af55be":"plt.figure(figsize=(5,3))\ndf['condition'].value_counts().sort_values().plot(kind='barh',color='green')","223b4434":"condition_price = pd.pivot_table(data=df,values='price',index='condition',aggfunc='mean').sort_values('price',ascending=False).reset_index()\nsns.barplot(y='condition' , x='price',data=condition_price)","057f01d7":"plt.figure(figsize=(10,5))\nsns.countplot(df.cylinders)","8bc8e2fa":"plt.figure(figsize=(10,4))\nmax_price = pd.pivot_table(data=df,values='price',index='cylinders',aggfunc='mean').sort_values('price',ascending= False).reset_index()\nsns.barplot(y='cylinders',x='price',data=max_price,color='gold')","c6498919":"plt.figure(figsize=(10,4))\nmax_price = pd.pivot_table(data=df,values='price',index='paint_color',aggfunc='mean').sort_values('price',ascending= False).reset_index()\nsns.barplot(y='paint_color',x='price',data=max_price,color='brown')","b3e7108b":"plt.figure(figsize=(6,3))\nprint(df['fuel'].value_counts().sort_values(ascending =False))\ndf['fuel'].value_counts().sort_values().plot(kind = 'barh',color='black')","6cb64b44":"df[df['cylinders'] == 'other']","f3d62946":"df = df[df['cylinders'] != 'other']","abbb6570":"df[df['fuel'] == 'other']","c0f60fb5":"df = df[df['fuel'] != 'other']","6970eb1e":"plt.figure(figsize=(15,10))\nmax_price = pd.pivot_table(data=df,values='price',index='manufacturer',aggfunc='max').sort_values('price',ascending= False).reset_index()\nsns.barplot(y='manufacturer',x='price',data=max_price)","ed0f09e1":"plt.figure(figsize=(20,10))\nsns.boxplot(x='price',y='manufacturer',data=df)\nplt.axvline(x=0.001e+9,linestyle='--')","487d3b95":"plt.figure(figsize=(20,10))\nsns.boxplot(x='price',y='manufacturer',data=df[df['price']<=0.001e+9])","5f9b9383":"df = df[df['price']<=0.001e+9]","cf0ad07f":"plt.figure(figsize=(20,10))\nsns.boxplot(x='price',y='manufacturer',data=df)\nplt.axvline(x=20200,linestyle='--',label = 'Current Mean Price from Google')\nplt.axvline(x=df['price'].mean(),linestyle='--',color='red',label='Mean price in the dataset')\nplt.axvline(x=df['price'].median(),linestyle='--',color='yellow',label = 'Median price in the dataset')\nplt.legend()","95dcb5e6":"def outliers(col):\n    q1 = np.quantile(col,0.25)\n    q3 = np.quantile(col,0.75)\n    iqr = q3 - q1\n    lrlimit = q1 - (1.5 * iqr)\n    urlimit = q3 + (1.5 * iqr)\n    return lrlimit , urlimit","701f9a3b":"outliers(df['price'])","dbd2c75f":"print('Number of cars where price is an outlier :',df[df['price'] > 31462.5].shape[0])","21aec993":"print('Number of cars where price is 0 :',df[df['price'] == 0].shape[0])","a53415f1":"df = df[df['price']!=0]","d7e75e53":"df = df[df['price'] <= 31462.5]","fa48100f":"df.shape","7e3534e4":"for i in df.columns:\n    if df[i].dtype == 'object':\n        print(i,' ',(df[i].value_counts()).shape[0],'\\n',df[i].value_counts(),'\\n\\n')","69e8ab67":"df = pd.get_dummies(df.drop(['model'],axis=1),drop_first=False)","4729adf9":"from sklearn.model_selection import train_test_split","cec95072":"X = df.drop('price',axis=1)\n\nY = df['price']","f402d1b6":"X_train , X_test , Y_train , Y_test = train_test_split(X,Y,test_size=0.3 , random_state = 1)","db0293c4":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train_scaled = scaler.transform(X_train)\nX_test_scaled = scaler.transform(X_test)","fe77888d":"from sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neural_network import MLPRegressor\nimport xgboost as xgb\nfrom sklearn.ensemble import AdaBoostRegressor","27170167":"lrmodel = MLPRegressor()\nlrmodel.fit(X_train_scaled , Y_train)\nprint('Training data score',lrmodel.score(X_train_scaled , Y_train),'\\n')\nprint('Test data score',lrmodel.score(X_test_scaled , Y_test),'\\n')","d79a7ed0":"lrmodel = xgb.XGBRegressor()\nlrmodel.fit(X_train , Y_train)\nprint(lrmodel.score(X_train , Y_train),'\\n')\nprint(lrmodel.score(X_test , Y_test),'\\n')","8aa43ce2":"abmodel = AdaBoostRegressor()\nabmodel.fit(X_train , Y_train)\nprint(abmodel.score(X_train , Y_train),'\\n')\nprint(abmodel.score(X_test , Y_test),'\\n')","75e9ee57":"pred=lrmodel.predict(X_test)\nfrom sklearn import metrics\nmetrics.mean_squared_error(Y_test,pred,squared=False)","6e8139b9":"Work in Progress..."}}