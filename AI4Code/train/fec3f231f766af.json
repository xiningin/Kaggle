{"cell_type":{"772d24eb":"code","3aa00175":"code","f64723ad":"code","e7eed546":"code","50ba9f17":"code","6bff7923":"code","1b2d4f2b":"code","4e7fd567":"code","d5bb6e04":"code","4ab0878b":"code","a59cf718":"code","30c47973":"code","0472da5f":"code","1c07eaf8":"code","f0ab0392":"code","e69b8647":"markdown","c609a0fa":"markdown","e00dac92":"markdown","8488ab1d":"markdown","0001ea8f":"markdown","7cdadd46":"markdown","3044b0c1":"markdown","0e4d72d5":"markdown","6d4655bb":"markdown"},"source":{"772d24eb":"import numpy as np\nimport pandas as pd\n\nfrom lightgbm import LGBMClassifier\nimport matplotlib.pyplot as plt\n\nfrom functools import partial\nfrom sklearn.model_selection import StratifiedKFold\n\nimport os\nprint(\"Files under ..\/input folder:\", os.listdir(\"..\/input\"))","3aa00175":"df_train = pd.read_csv(\"..\/input\/train_call_history.csv\")\ndf_test  = pd.read_csv(\"..\/input\/test_call_history.csv\")","f64723ad":"df_train.info()","e7eed546":"columns = df_train.columns\npercent_missing = df_train.isnull().sum() * 100 \/ len(df_train)\nmissing_value_df = pd.DataFrame({'percent_missing': percent_missing})\nmissing_value_df.sort_values(\"percent_missing\", ascending=False, inplace=True)\nmissing_value_df.head()","50ba9f17":"thresh = 0.5 * 100\ndrop_columns = list(missing_value_df[missing_value_df[\"percent_missing\"] > thresh].index)\ndf_train.drop(drop_columns, axis=1, inplace=True)\ndf_test.drop(drop_columns, axis=1, inplace=True)","6bff7923":"print(f\"Dropped {len(drop_columns)} columns.\")","1b2d4f2b":"df_train.head(2)","4e7fd567":"drop_columns = [\n    \"company_code\",\"sogyotoshitsuki\",\"establishment\",\"industry_code1\", \"industry_code2\", \"industry_code3\",\n    \"atsukaihin_code_1\", \"atsukaihin_code_2\", \"atsukaihin_code_3\",\"eto_meisho\"\n]\ndf_train.drop(drop_columns, axis=1, inplace=True)\ndf_test.drop(drop_columns, axis=1, inplace=True)\nprint(f\"Dropped {len(drop_columns)} columns.\")","d5bb6e04":"df_train.select_dtypes(exclude=['int', 'float']).info()","4ab0878b":"for col in df_train.select_dtypes(exclude=['int', 'float']).columns:\n    df_train[col] = df_train[col].astype('category')\n    df_test[col] = df_test[col].astype('category')","a59cf718":"def lgbm_modeling_cross_validation(params,\n                                   full_train, \n                                   y, \n                                   nr_fold=5, \n                                   random_state=1):\n\n\n    clfs = []\n    importances = pd.DataFrame()\n    folds = StratifiedKFold(n_splits=nr_fold, \n                            shuffle=True, \n                            random_state=random_state)\n    \n    oof_preds = np.zeros((len(full_train), np.unique(y).shape[0]))\n    for fold_, (trn_, val_) in enumerate(folds.split(y, y)):\n        trn_x, trn_y = full_train.iloc[trn_], y.iloc[trn_]\n        val_x, val_y = full_train.iloc[val_], y.iloc[val_]\n        \n#         ### Added from here\n#         trn_xa, trn_y, val_xa, val_y=smoteAdataset(trn_x.values, trn_y.values, val_x.values, val_y.values)\n#         trn_x=pd.DataFrame(data=trn_xa, columns=trn_x.columns)\n#         val_x=pd.DataFrame(data=val_xa, columns=val_x.columns)\n#         ### to here\n    \n        clf = LGBMClassifier(**params)\n        clf.fit(\n            trn_x, trn_y,\n            eval_set=[(trn_x, trn_y), (val_x, val_y)],\n            eval_metric=\"auc\",\n            verbose=100,\n            early_stopping_rounds=50\n        )\n        clfs.append(clf)\n\n        oof_preds[val_, :] = clf.predict_proba(val_x, num_iteration=clf.best_iteration_)\n    \n        imp_df = pd.DataFrame({\n                'feature': full_train.columns,\n                'gain': clf.feature_importances_,\n                'fold': [fold_ + 1] * len(full_train.columns),\n                })\n        importances = pd.concat([importances, imp_df], axis=0, sort=False)\n\n    return clfs","30c47973":"y = df_train[\"result\"]\ndf_train.drop(\"result\", axis=1, inplace=True)","0472da5f":"lgb_params = {\n        'device': 'cpu', \n        'objective': 'binary', \n        'boosting_type': 'gbdt', \n        'n_jobs': -1, \n        'max_depth': 5, \n        'n_estimators': 1000, \n        'max_cat_to_onehot': 4, \n}\n\neval_func = partial(lgbm_modeling_cross_validation, \n                    full_train=df_train, \n                    y=y, \n#                     classes=classes, \n#                     class_weights=class_weights, \n                    nr_fold=7, \n                    random_state=7)\n\nclfs = eval_func(lgb_params)","1c07eaf8":"preds_ = None\nfor clf in clfs:\n    if preds_ is None:\n        preds_ = clf.predict_proba(df_test) \/ len(clfs)\n    else:\n        preds_ += clf.predict_proba(df_test) \/ len(clfs)","f0ab0392":"df_submission = pd.DataFrame({'id': df_test['id'], 'result': preds_[:,1]})\ndf_submission.to_csv('lightgbm_submission.csv', index = False)","e69b8647":"## Delete null columns\n\nnull \u304c50%\u4ee5\u4e0a\u306ecolumn\u3092\u524a\u9664\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\uff0e","c609a0fa":"# Train a LightGBM model\n\nLightGBM \u306e\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3055\u305b\u3066\u307f\u307e\u3059\uff0e","e00dac92":"# Create a submission file\n\n\u6700\u5f8c\u306b\uff0c\u63d0\u51fa\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e","8488ab1d":"## Drop unuseful columns\n\n\u30a2\u30dd\u304c\u53d6\u308c\u308b\u304b\u3069\u3046\u304b\u3068\u306f\u95a2\u4fc2\u306a\u3044columns\u3084\uff0c\n\u5358\u306b\u51e6\u7406\u304c\u9762\u5012\u306acolumns\u3092\u524a\u9664\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff0e","0001ea8f":"# LightGBM-based simple solution\n\nCreated by \u67f4\u85e4\n\n\u6700\u8fd1\uff0ckaggle \u754c\u9688\u3067\u306f [lightGBM](https:\/\/lightgbm.readthedocs.io\/en\/latest\/index.html) \u3068\u3044\u3046\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u304c\u975e\u5e38\u306b\u4eba\u6c17\u3092\u96c6\u3081\u3066\u3044\u307e\u3059\uff0e\n\u7c21\u5358\u306b\u3044\u3046\u3068\uff0clightGBM \u3068\u306f\u8907\u6570\u306e\u6c7a\u5b9a\u6728\u3092\u69cb\u7bc9\u3057\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3092\u884c\u3046\u30e2\u30c7\u30eb\u3067\u3059\uff0e\n\n\u3053\u306ekernel\u3067\u306f\uff0clightGBM \u3092\u7528\u3044\u3066\u30b7\u30f3\u30d7\u30eb\u306b\u4e88\u6e2c\u3092\u884c\u3063\u3066\u307f\u307e\u3059\uff0e","7cdadd46":"# Toward further improvement\n\n\u3053\u308c\u304f\u3089\u3044\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u3067\u3059\u3089\uff0cLB\u3067`0.85241`\u3092\u8a18\u9332\u3067\u304d\u307e\u3057\u305f\uff0eLightGBM\u6050\u308d\u3057\u3044\uff0e\uff0e  \n\u3057\u304b\u3057\uff0c\u30e2\u30c7\u30eb\u6539\u5584\u306e\u305f\u3081\u306b\u3067\u304d\u308b\u3053\u3068\u306f\u307e\u3060\u307e\u3060\u305f\u304f\u3055\u3093\u3042\u308a\u305d\u3046\u3067\u3059\uff0e\n\n- \u65e5\u4ed8\u30c7\u30fc\u30bf\uff08`call_date`\u3084`call_time`\uff09\u3092\u6587\u5b57\u5217\u3068\u3057\u3066\u6271\u3063\u3066\u3044\u308b\uff0e\n- LightGBM \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u3044\u306a\u3044\uff0e\n\n","3044b0c1":"## Handle categorical columns","0e4d72d5":"# Data preprocessing\n\n\u3053\u306e\u30b3\u30f3\u30da\u306b\u9650\u3089\u305a\uff0c\u591a\u304f\u306e\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u6700\u521d\u306b\u751f\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u524d\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\uff0e","6d4655bb":"# Library and data loading"}}