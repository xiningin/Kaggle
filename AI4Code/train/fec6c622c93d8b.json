{"cell_type":{"bf22755c":"code","08f0deb0":"code","8a9f1aa4":"code","24e1ed1c":"code","cda27aca":"code","05301bc7":"code","936c7365":"code","31fe76ac":"code","710a0f8f":"code","db839692":"code","6480e55d":"code","259da7ed":"code","b99262a0":"code","1ebe81bb":"code","b5617ddf":"code","dbf557c4":"code","7b589d44":"code","50efe8ab":"code","11e051a5":"code","fe566c21":"code","022db8bb":"code","675fe454":"code","850a3cb9":"code","82b835f0":"code","fcdb7221":"code","4ababb36":"code","f12510f2":"code","803ffcd2":"code","43ed020e":"code","0cfd052f":"code","3cd43fe8":"code","b33a9bf4":"code","d68df691":"code","500fd430":"code","8090b3ec":"code","c96b0819":"code","36ff21f5":"code","26e78fba":"code","6674328c":"code","57a86175":"code","8d619d58":"code","f8110b6e":"code","bf8cb608":"code","2e2e4140":"code","c9fbf844":"code","b95a63a4":"markdown","4cd08d5a":"markdown","51ddd8e2":"markdown","412eb28e":"markdown","c2d41f1f":"markdown","fb5532e3":"markdown","31a7773b":"markdown","bcd575cd":"markdown","418e4531":"markdown","18d3a93b":"markdown","022cb6be":"markdown","1a661738":"markdown","41098c41":"markdown","4658c654":"markdown","f41f567b":"markdown"},"source":{"bf22755c":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","08f0deb0":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nprint(train.shape)\nprint(test.shape)","8a9f1aa4":"train.info()","24e1ed1c":"test.info()","cda27aca":"# there are some missing data in both training set and testing set,thus I combin both of them to deal with.\nfull_data = train.copy()\nfull_data = full_data.append(test)\nfull_data.set_index('PassengerId',inplace=True)","05301bc7":"def name_title(data):\n    data['name_title'] = 0\n    for i in range(1,data.shape[0]+1):\n        if 'Mrs' in data.Name[i]:\n            data.name_title[i] = 'Mrs'\n        elif 'Miss' in data.Name[i]:\n            data.name_title[i] = 'Miss'\n        elif 'Ms' in data.Name[i]:\n            data.name_title[i] = 'Miss'\n        elif 'Mr' in data.Name[i]:\n            data.name_title[i] = 'Mr'\n        elif 'Master' in data.Name[i]:\n            data.name_title[i] = 'Master'\n        else:\n            data.name_title[i] = 'other' \n    return data","936c7365":"full_data = name_title(full_data)\nfull_data['partner_number'] = full_data.SibSp+full_data.Parch\nfull_data['partner_live'] = 0","31fe76ac":"ticket = full_data.Ticket.unique()\nfull_data_gb = full_data.groupby('Ticket')\n\nticket_alone = [] #713\nfor i in range(len(ticket)):\n    if full_data_gb.get_group(ticket[i]).shape[0] == 1:\n        ticket_alone.append(ticket[i])","710a0f8f":"full_data.describe()","db839692":"alone = full_data[(full_data.Ticket.isin(ticket_alone))]\nalone[['Age','Pclass','name_title']].groupby(['Pclass','name_title']).median()","6480e55d":"full_data[(full_data.Ticket.isin(ticket_alone))].describe()","259da7ed":"full_data.loc[full_data[(full_data.Ticket.isin(ticket_alone))&(full_data.Age.isna())&(full_data.name_title=='Mr')&(full_data.Pclass == 1)].index,'Age']=42\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_alone))&(full_data.Age.isna())&(full_data.name_title=='Mr')&(full_data.Pclass == 2)].index,'Age']=29\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_alone))&(full_data.Age.isna())&(full_data.name_title=='Mr')&(full_data.Pclass == 3)].index,'Age']=26\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_alone))&(full_data.Age.isna())&(full_data.name_title=='Mrs')&(full_data.Pclass == 1)].index,'Age']=50\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_alone))&(full_data.Age.isna())&(full_data.name_title=='Mrs')&(full_data.Pclass == 3)].index,'Age']=40\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_alone))&(full_data.Age.isna())&(full_data.name_title=='Miss')&(full_data.Pclass.isin([1,2]))].index,'Age']=28\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_alone))&(full_data.Age.isna())&(full_data.name_title=='Miss')&(full_data.Pclass == 3)].index,'Age']=22\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_alone))&(full_data.Age.isna())&(full_data.name_title=='Master')].index,'Age']=9\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_alone))&(full_data.Age.isna())&(full_data.name_title=='other')].index,'Age']=49","b99262a0":"ticket_couple = []\nfor i in range(len(ticket)):\n    if full_data_gb.get_group(ticket[i]).shape[0] == 2:\n        ticket_couple.append(ticket[i])","1ebe81bb":"full_data[(full_data.Ticket.isin(ticket_couple))].groupby(['name_title','Pclass']).median()","b5617ddf":"full_data.loc[full_data[(full_data.Ticket.isin(ticket_couple))&(full_data.name_title==\"Mr\")&(full_data.Pclass==1)&(full_data.Age.isna())].index,\"Age\"]=40\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_couple))&(full_data.name_title==\"Mr\")&(full_data.Pclass==3)&(full_data.Age.isna())].index,\"Age\"]=28\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_couple))&(full_data.name_title==\"Mrs\")&(full_data.Pclass==3)&(full_data.Age.isna())].index,\"Age\"]=28\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_couple))&(full_data.name_title==\"Mrs\")&(full_data.Pclass==2)&(full_data.Age.isna())].index,\"Age\"]=29\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_couple))&(full_data.name_title==\"Mrs\")&(full_data.Pclass==1)&(full_data.Age.isna())].index,\"Age\"]=39\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_couple))&(full_data.name_title==\"Miss\")&(full_data.Pclass==3)&(full_data.Age.isna())].index,\"Age\"]=14","dbf557c4":"ticket_family = []\nfor i in range(len(ticket)):\n    if full_data_gb.get_group(ticket[i]).shape[0] > 2:\n        ticket_family.append(ticket[i])","7b589d44":"full_data[full_data.Ticket.isin(ticket_family)].groupby(['name_title','Pclass']).median()","50efe8ab":"full_data.loc[full_data[(full_data.Ticket.isin(ticket_family))&(full_data.name_title==\"Mr\")&(full_data.Pclass==1)&(full_data.Age.isna())].index,\"Age\"]=37\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_family))&(full_data.name_title==\"Mr\")&(full_data.Pclass.isin([2,3]))&(full_data.Age.isna())].index,\"Age\"]=26\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_family))&(full_data.name_title==\"Mrs\")&(full_data.Pclass==1)&(full_data.Age.isna())].index,\"Age\"]=49\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_family))&(full_data.name_title==\"Mrs\")&(full_data.Pclass.isin([2,3]))&(full_data.Age.isna())].index,\"Age\"]=33\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_family))&(full_data.name_title==\"Miss\")&(full_data.Pclass==1)&(full_data.Age.isna())].index,\"Age\"]=30\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_family))&(full_data.name_title==\"Miss\")&(full_data.Pclass.isin([2,3]))&(full_data.Age.isna())].index,\"Age\"]=6\nfull_data.loc[full_data[(full_data.Ticket.isin(ticket_family))&(full_data.name_title==\"Master\")&(full_data.Age.isna())].index,\"Age\"]=6","11e051a5":"full_data.info()","fe566c21":"full_data.Embarked.value_counts()\nfull_data.Embarked=full_data.Embarked.fillna('S')\nfull_data[full_data.Pclass==3].describe()\nfull_data.Fare=full_data.Fare.fillna(8)","022db8bb":"for i in range(len(ticket)):\n    if full_data[(full_data.Ticket == ticket[i])].shape[0] == 1:\n        full_data.loc[full_data[full_data.Ticket == ticket[i]].index,'partner_live']=0  #alone\n    else:\n        if full_data[(full_data.Ticket == ticket[i]) & (full_data.Survived.isin([0,1]))].shape[0] <2:\n            full_data.loc[full_data[full_data.Ticket == ticket[i]].index,'partner_live']=5  #unknown\n        \n        elif full_data[(full_data.Ticket == ticket[i]) & (full_data.Survived.isin([0,1]))].Survived.sum() == 0:\n            full_data.loc[full_data[full_data.Ticket == ticket[i]].index,'partner_live']=1 # all dead \n        elif full_data[(full_data.Ticket == ticket[i]) & (full_data.Survived.isin([0,1]))].Survived.sum() == full_data[(full_data.Ticket == ticket[i]) & (full_data.Survived.isin([0,1]))].shape[0]:\n            full_data.loc[full_data[full_data.Ticket == ticket[i]].index,'partner_live']=2 # all alive\n        elif full_data[(full_data.Ticket == ticket[i]) & (full_data.Survived.isin([0,1]))].Survived.sum() < int(full_data[(full_data.Ticket == ticket[i]) & (full_data.Survived.isin([0,1]))].shape[0]\/2):\n                full_data.loc[full_data[full_data.Ticket == ticket[i]].index,'partner_live']=3 # hight level dead \n        elif full_data[(full_data.Ticket == ticket[i]) & (full_data.Survived.isin([0,1]))].Survived.sum() > int(full_data[(full_data.Ticket == ticket[i]) & (full_data.Survived.isin([0,1]))].shape[0]\/2):\n                full_data.loc[full_data[full_data.Ticket == ticket[i]].index,'partner_live']=4 # hight level alive\n        else:\n            full_data.loc[full_data[full_data.Ticket == ticket[i]].index,'partner_live']=5","675fe454":"full_data","850a3cb9":"train = full_data[0:891]\ntest = full_data[891:]\ntrain = train.reset_index()\ntest = test.reset_index()\nprint(train.shape)\nprint(test.shape)","82b835f0":"train.info()","fcdb7221":"sns.histplot(x= train.Sex,hue=train.Survived,multiple='dodge', shrink=.8)\ntrain[['Sex','Survived']].groupby('Sex').mean()","4ababb36":"sns.histplot(x= train.name_title,hue=train.Survived,multiple='dodge', shrink=.8)\ntrain[['name_title','Survived','Sex']].groupby(['name_title','Sex']).mean()","f12510f2":"sns.histplot(x= train.Pclass,hue=train.Survived,multiple='dodge', shrink=.8)\ntrain[['Pclass','Survived','name_title','Sex']].groupby(['Pclass','name_title','Sex']).mean()","803ffcd2":"plt.figure(figsize=(12,6))\nsns.histplot(x=train[(train.Survived==0)&(train.Pclass==1)]['Age'],alpha=0.6,color='red',bins=[0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85])\nsns.histplot(x=train[(train.Survived==1)&(train.Pclass==1)]['Age'],alpha=0.6,color='green',bins=[0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85])","43ed020e":"plt.figure(figsize=(12,6))\nsns.histplot(x=train[(train.Survived==0)&(train.Pclass==2)]['Age'],alpha=0.6,color='red',bins=[0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85])\nsns.histplot(x=train[(train.Survived==1)&(train.Pclass==2)]['Age'],alpha=0.6,color='green',bins=[0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85])","0cfd052f":"plt.figure(figsize=(12,6))\nsns.histplot(x=train[(train.Survived==0)&(train.Pclass==3)]['Age'],alpha=0.6,color='red',bins=[0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85])\nsns.histplot(x=train[(train.Survived==1)&(train.Pclass==3)]['Age'],alpha=0.6,color='green',bins=[0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85])","3cd43fe8":"plt.figure(figsize=(12,6))\nsns.histplot(x=train[(train.Survived==0)&(train.Sex=='male')]['Age'],alpha=0.6,color='red',bins=[0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85])\nsns.histplot(x=train[(train.Survived==1)&(train.Sex=='male')]['Age'],alpha=0.6,color='green',bins=[0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85])","b33a9bf4":"from sklearn.preprocessing import LabelEncoder\nlab = LabelEncoder()","d68df691":"train['age_bin'] = lab.fit_transform(pd.cut(train.Age,[0,16,100]))\nsns.histplot(x= train.age_bin,hue=train.Survived,multiple='dodge', shrink=.8)\ntrain[['age_bin','Survived',\"name_title\"]].groupby(['age_bin',\"name_title\"]).mean()","500fd430":"train['fare_bin'] = lab.fit_transform(pd.qcut(train.Fare,6))","8090b3ec":"sns.histplot(x= train.fare_bin,hue=train.Survived,multiple='dodge', shrink=.8)\ntrain[['fare_bin','Survived']].groupby('fare_bin').mean()","c96b0819":"sns.histplot(x= train.Pclass,hue=train.Survived,multiple='dodge', shrink=.8)\ntrain[['Pclass','Survived']].groupby('Pclass').mean()","36ff21f5":"sns.histplot(x= train.partner_number,hue=train.Survived,multiple='dodge', shrink=.8)\ntrain[['partner_number','Survived']].groupby('partner_number').mean()","26e78fba":"def datapreprocess(data):\n    #sex\n    data.Sex = data.Sex.replace('male',1)\n    data.Sex = data.Sex.replace('female',0)\n    #embarked\n    data.Embarked =data.Embarked.replace('C',1)\n    data.Embarked =data.Embarked.replace('Q',2)\n    data.Embarked =data.Embarked.replace('S',3)\n    #name_title\n    data.name_title =data.name_title.replace('other',0)\n    data.name_title =data.name_title.replace('Mrs',1)\n    data.name_title =data.name_title.replace('Mr',2)\n    data.name_title =data.name_title.replace('Miss',3)\n    data.name_title =data.name_title.replace('Master',4)\n    \n    data['age_bin'] = lab.fit_transform(pd.cut(data.Age,[0,16,100]))\n    data['fare_bin'] = lab.fit_transform(pd.qcut(data.Fare,6))\n    \n    \n    data['partner_number_3'] = lab.fit_transform(pd.cut(data.partner_number,[-1,0,3,20]))\n    \n    return data","6674328c":"train = datapreprocess(train)","57a86175":"train.info()","8d619d58":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","f8110b6e":"#feature = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare','Embarked', 'name_title', 'partner_number', 'partner_live','age_bin', 'fare_bin']\nfeature = ['Pclass', 'Sex','name_title', 'partner_number_3', 'partner_live', 'age_bin'] \nX = train[feature]\ny = train['Survived']\n\nX_train, X_vali, y_train, y_vali = train_test_split(X ,y,test_size = 0.3, random_state = 10)\n","bf8cb608":"model_1 = RandomForestClassifier(n_estimators=250,min_samples_split=20, random_state=0)\n#model_2 = RandomForestClassifier(n_estimators=250,min_samples_split=20,max_features=2, random_state=0)\n#model_3 = RandomForestClassifier(n_estimators=250,min_samples_split=20,max_depth=20,max_features=3, random_state=0)\n#model_4 = RandomForestClassifier(n_estimators=250,min_samples_split=20,max_depth=50,max_features=4, random_state=0)\n#model_5 = RandomForestClassifier(n_estimators=250,min_samples_split=20,max_depth=100,max_features=6, random_state=0)\n\ndef score_model(model, X_t=X_train, X_v=X_vali, y_t=y_train, y_v=y_vali):\n    model.fit(X_t, y_t)\n    pred = model.predict(X_v)\n    return(accuracy_score(y_v,pred))\n\nmodels = [model_1]\nfor i in range(0, len(models)):\n    acc = score_model(models[i])\n    print(\"Model %d acc: %f4\" % (i+1, acc))","2e2e4140":"# feature selection\n#selector = RFECV(RandomForestClassifier(n_estimators=250,min_samples_split=20, random_state=0),cv=10)\n#selector.fit(train[feature],y)\n#print(selector.grid_scores_)","c9fbf844":"best_model = RandomForestClassifier(n_estimators=250,min_samples_split=20, random_state=0)\nbest_model.fit(X,y)\n\n# Generate test predictions\npreds_test = best_model.predict(datapreprocess(test)[feature])\n\n# Save predictions in format used for competition scoring\noutput = pd.DataFrame({'PassengerId': test.PassengerId,\n                       'Survived': preds_test.astype(int)})\noutput.to_csv('submission.csv', index=False)\noutput","b95a63a4":"> Name, ticket ,embark, cabin \u8207\u5016\u5b58\u8207\u5426\u7121\u95dc \u4e0d\u8003\u616e","4cd08d5a":"\u5982\u679c\u4ee5\u59d3\u540d\u524d\u7db4\u4f5c\u70ba\u4f9d\u64da\uff0c\u4f9d\u820a\u53ef\u4ee5\u770b\u51fa\u7537\u751f\u7684\u6b7b\u4ea1\u7387\u9ad8\u65bc\u5973\u6027\uff0c\u53e6\u5916\u53ef\u4ee5\u770b\u51fa\u5982\u679c\u662f\u6709\u7d50\u5a5a\u7684\u5973\u6027\u5b58\u6d3b\u7387\u53c8\u66f4\u9ad8\uff0c\u800c\u900f\u904emaster\u8ddfmr\u7684\u5206\u958b\u53ef\u4ee5\u589e\u52a0\u5e74\u7d00\u5c0f\u7684\u7537\u6027\u4f30\u50f9\u5b58\u6d3b\u7387\uff0c\u5728other\u7684\u90e8\u5206\u56e0\u70ba\u6703\u5206\u6210\u7537\u6027\u8207\u5973\u6027\uff0c\u6240\u4ee5name_title\u8ddfSex\u6216\u8a31\u540c\u6642\u63a1\u7528\u7279\u5fb5\u6548\u679c\u6703\u6bd4\u55ae\u7368\u4f7f\u7528\u4f86\u7684\u597d\u3002","51ddd8e2":"\u5f9e\u5716\u4e2d\u770b\u8d77\u4f861~3\u500b\u4eba\u53ef\u4ee5\u4e92\u76f8\u6276\u6301\u5016\u5b58\u7387\u6bd4\u8f03\u9ad8\uff0c\u540c\u578b\u7684\u4eba\u6578\u8d8a\u591a\u9867\u616e\u6708\u591a\u9020\u6210\u7f79\u96e3\u7684\u6a5f\u7387\u4e0a\u5347\uff0c\u55ae\u7368\u4e00\u4eba\u5b58\u6d3b\u7387\u4ecb\u65bc\u5169\u8005\u4e4b\u9593","412eb28e":"* add age (0.8843)\n* add fare (0.8731)\n* add fare_bin (0.8843)\n* add embarked (0.895)\n* cut sex (0.8880)\n* cut partner_number (0.8843)","c2d41f1f":"\u5f9e\u6027\u5225\u53ef\u4ee5\u770b\u51fa\u7537\u6027\u7684\u6b7b\u4ea1\u7387\u540d\u986f\u9ad8\u65bc\u5973\u6027\uff0c\u6240\u4ee5\u9019\u6703\u662f\u4f9d\u683c\u5f37\u5927\u7684\u7279\u5fb5\u3002","fb5532e3":"\u8655\u7406Age\u88e1\u9762\u7684missing data\u3002 \n1. \u5982\u679c\u6709\u540c\u884c\u53cb\u4eba\u7684\u8a71ticket\u6703\u76f8\u540c\uff0c\u4f9d\u9020\u9019\u500b\u7279\u5fb5\u5206\u6210\uff0c\u55ae\u7368\u65c5\u884c\u30012\u4eba\u8ddf3\u4eba\u4ee5\u4e0a\uff0c\u6211\u5047\u8a2d\u9019\u500b\u7279\u5fb5\u6703\u5f71\u97ff\u5e74\u9f61\u7684\u7d44\u6210\u3002\n2. \u5176\u6b21\u4f9d\u9020pclass and sex \u5728\u505a\u5206\u985e\uff0c\u9ad8\u7b49\u8259\u4f4d\u7684\u8239\u50f9\u666e\u904d\u5e74\u9f61\u8f03\u9ad8\uff0c\u5e74\u8f15\u4eba\u6bd4\u8f03\u8ca0\u64d4\u7684\u8d77\u666e\u901a\u8259\u7b49\uff0c\u800c\u6027\u5225\u4e5f\u6703\u5f71\u97ff\u5230\u5e74\u9f61\u7684\u7d44\u6210\n3. \u85c9\u7531\u4ee5\u4e0a\u7279\u5fb5\u5c07\u4eba\u5206\u7d44\uff0c\u5c07\u4e2d\u4f4d\u6578\u53d6\u4ee3\u907a\u5931\u503c\u3002","31a7773b":"\u518d\u4f86\uff0c\u6211\u8655\u7406Fare\u8ddfEmbarked\u88e1\u9762\u7684\u907a\u5931\u503c\u3002\n1. Fare \u5148\u770b\u5b83\u5c6c\u65bc\u54ea\u4e00\u7a2e\u8259\u7b49\uff0c\u5728\u4f9d\u7167\u8259\u7b49\u7684\u4e2d\u4f4d\u6578\u88dc\u503c\n2. Embarked \u53d6\u6578\u91cf\u6700\u5927\u7684\u53bb\u88dc(\u907a\u5931\u503c\u7686\u662f\u55ae\u7368\u767b\u8239\u6c92\u6709\u4f9d\u64da\u53ef\u5faa)\n\n\u6700\u5f8cCabin \u907a\u5931\u503c\u592a\u591a\u4e14\u6c92\u610f\u7fa9\uff0d\u4e0d\u8655\u7406\u4e5f\u4e0d\u7d0d\u5165\u7279\u5fb5","bcd575cd":"# 1. Load and check data","418e4531":"\u5f9e\u4e0a\u9762\u7684\u5e7e\u5f35\u5716\u53ef\u4ee5\u770b\u51fa\n1. \u982d\u7b49\u8259\u5728\u5e74\u9f61\u4e0a\u6c92\u6709\u660e\u986f\u7684\u5dee\u7570\uff0c\u9664\u4e8665\u4ee5\u4e0a\u8001\u4eba\n2. 2.3\u8259\u7b49\u5927\u81f4\u5e74\u9f61\u572815\u6b72\u4ee5\u4e0b\u6bd4\u8f03\u6709\u6d3b\u4e0b\u4f86\u7684\u6a5f\u6703\uff0c\u5973\u6027\u3001\u5c0f\u5b69\u512a\u5148\u6551\u6d3b\u7684\u6982\u5ff5\u3002\n3. \u4ee5\u6027\u5225\u4f86\u770b\u5973\u6027\u67097\u6210\u4ee5\u4e0a\u7684\u6a5f\u6703\u6d3b\u4e0b\uff0c\u7537\u6027\u572815\u6b72\u4ee5\u4e0b\u4e00\u6a23\u6709\u6bd4\u8f03\u5927\u7684\u6a5f\u6703\u6d3b\n\n\u6240\u4ee5\u4ee5\u5e74\u9f61\u505a\u5340\u5206\u584a\u5206\u621015\u4ee5\u4e0b\u3001\u820716\u4e0a","18d3a93b":"\u770b\u8d77\u4f86\u7968\u50f9\u5206\u985e\u7684\u7d50\u679c\u6703\u8fd1\u4f3c\u65bc\u8259\u7b49\uff0c\u6240\u4ee5\u53ef\u80fd\u91cd\u8907\u6293\u5230\u4e00\u6a23\u7684\u7279\u5fb5\u3002","022cb6be":"# 2. Data preprocessing\n## 2.1 Missing data\nFrom training data and testing data  we can find there are some **missing data** in column **Aga, Fare, Cabin and Embarked**\n> if didn't do anything for missing data ,will get acc for 0.744","1a661738":"# relationship","41098c41":"# partner_live","4658c654":"## Data describe\n* Survived is the target we are trying to predict\n - survived =1\n - dead = 0\n* pclass is passenger class\n - upper class =1\n - middle class =2\n - lower class =3\n* name is passenger's name\n* age is the age of passenger\n - with some missing data\n* SibSp is the number of the passengers' siblings and spouse.\n* Parch is the number of the passengers' parents and children.\n* Ticket is the ticket number of the passenger.\n* Fare is the price of ticket.\n* Cabin is the cabin number of the passenger.\n - About 78% of Cabin values are missing\n* Embarked is port of embarkation\n - Cherbourg =C\n - Queenstown=Q\n - Southampton =S","f41f567b":"Pcalss \u5f9e\u5716\u4f86\u770b\u4e5f\u662f\u660e\u986f\u7684\u7279\u5fb5\uff0c\u4ee5\u5973\u751f\u4f86\u770b\u7684\u8a71\u57281.2\u8259\u7b49\u7684\u5b58\u6d3b\u7387\u90fd\u5f88\u9ad8\uff0c\u4f46\u662f\u52303\u8259\u7b49\u5b58\u6d3b\u7387\u5269\u4e00\u534a\uff0c\u7537\u751f\u5728\u982d\u7b49\u8259\u7684\u5b58\u6d3b\u7387\u63d0\u9ad8\u76842\u500d\u4ee5\u4e0a\u3002"}}