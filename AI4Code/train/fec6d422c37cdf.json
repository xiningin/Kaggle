{"cell_type":{"a9f8bca7":"code","d5520ddc":"code","7ee0dced":"code","4ae58213":"code","8c1b2fec":"code","65666a3f":"code","4e72d734":"code","849db3e5":"code","afceea68":"code","60a2ca56":"code","c82eb9e0":"code","55cabb55":"code","e3bde580":"code","81c806a8":"code","85070850":"code","84fab79f":"code","06104658":"code","32866489":"code","6a09f7ed":"code","3a06e1ec":"code","015e76c5":"code","b82436a7":"markdown","771d60ae":"markdown","dda065ee":"markdown","e7ffa552":"markdown","55049430":"markdown","c75e9d0e":"markdown","fda998fe":"markdown","cc55a665":"markdown","c662983b":"markdown","cdaf8b6a":"markdown","82ef3306":"markdown","dd188920":"markdown","7c776304":"markdown","5aaa554f":"markdown","466bf722":"markdown"},"source":{"a9f8bca7":"import numpy as np\nimport torch\nfrom torch import nn\nimport torch.nn.functional as F\nimport os\n","d5520ddc":"# open text file and read in data as `text`\nwith open('..\/input\/divinacommedia\/dante.txt', 'r') as f:\n    text = f.read()","7ee0dced":"text[:300]","4ae58213":"# encode the text and map each character to an integer and vice versa\n\n# we create two dictionaries:\n# 1. int2char, which maps integers to characters\n# 2. char2int, which maps characters to unique integers\nchars = tuple(set(text))\nint2char = dict(enumerate(chars))\nchar2int = {ch: ii for ii, ch in int2char.items()}\n\n# encode the text\nencoded = np.array([char2int[ch] for ch in text])","8c1b2fec":"encoded[:100]","65666a3f":"def one_hot_encode(arr, n_labels):\n    \n    # Initialize the the encoded array\n    one_hot = np.zeros((np.multiply(*arr.shape), n_labels), dtype=np.float32)\n    \n    # Fill the appropriate elements with ones\n    one_hot[np.arange(one_hot.shape[0]), arr.flatten()] = 1.\n    \n    # Finally reshape it to get back to the original array\n    one_hot = one_hot.reshape((*arr.shape, n_labels))\n    \n    return one_hot","4e72d734":"# check that the function works as expected\ntest_seq = np.array([[3, 5, 1]])\none_hot = one_hot_encode(test_seq, 8)\n\nprint(one_hot)","849db3e5":"def get_batches(arr, batch_size, seq_length):\n    '''Create a generator that returns batches of size\n       batch_size x seq_length from arr.\n       \n       Arguments\n       ---------\n       arr: Array you want to make batches from\n       batch_size: Batch size, the number of sequences per batch\n       seq_length: Number of encoded chars in a sequence\n    '''\n    \n    batch_size_total = batch_size * seq_length\n    # total number of batches we can make, \/\/ integer division, round down\n    n_batches = len(arr)\/\/batch_size_total\n    \n    # Keep only enough characters to make full batches\n    arr = arr[:n_batches * batch_size_total]\n    # Reshape into batch_size rows, n. of first row is the batch size, the other lenght is inferred\n    arr = arr.reshape((batch_size, -1))\n    \n    # iterate through the array, one sequence at a time\n    for n in range(0, arr.shape[1], seq_length):\n        # The features\n        x = arr[:, n:n+seq_length]\n        # The targets, shifted by one\n        y = np.zeros_like(x)\n        try:\n            y[:, :-1], y[:, -1] = x[:, 1:], arr[:, n+seq_length]\n        except IndexError:\n            y[:, :-1], y[:, -1] = x[:, 1:], arr[:, 0]\n        yield x, y \n        \n#when we call get batches we are going \n#to create a generator that iteratest through our array and returns x, y with yield command","afceea68":"batches = get_batches(encoded, 8, 50)\nx, y = next(batches)","60a2ca56":"# printing out the first 10 items in a sequence\nprint('x\\n', x[:10, :10])\nprint('\\ny\\n', y[:10, :10])","c82eb9e0":"# check if GPU is available\ntrain_on_gpu = torch.cuda.is_available()\nif(train_on_gpu):\n    print('Training on GPU!')\nelse: \n    print('No GPU available, training on CPU; consider making n_epochs very small.')","55cabb55":"class CharRNN(nn.Module):\n    \n    def __init__(self, tokens, n_hidden=612, n_layers=4,\n                               drop_prob=0.5, lr=0.001):\n        super().__init__()\n        self.drop_prob = drop_prob\n        self.n_layers = n_layers\n        self.n_hidden = n_hidden\n        self.lr = lr\n        \n        # creating character dictionaries\n        self.chars = tokens\n        self.int2char = dict(enumerate(self.chars))\n        self.char2int = {ch: ii for ii, ch in self.int2char.items()}\n        \n        ## TODO: define the LSTM\n        self.lstm = nn.LSTM(len(self.chars), n_hidden, n_layers, \n                            dropout=drop_prob, batch_first=True)\n        \n        ## TODO: define a dropout layer\n        self.dropout = nn.Dropout(drop_prob)\n        \n        ## TODO: define the final, fully-connected output layer\n        self.fc = nn.Linear(n_hidden, len(self.chars))\n      \n    \n    def forward(self, x, hidden):\n        ''' Forward pass through the network. \n            These inputs are x, and the hidden\/cell state `hidden`. '''\n                \n        ## TODO: Get the outputs and the new hidden state from the lstm\n        r_output, hidden = self.lstm(x, hidden)\n        \n        ## TODO: pass through a dropout layer\n        out = self.dropout(r_output)\n        \n        # Stack up LSTM outputs using view\n        # you may need to use contiguous to reshape the output\n        out = out.contiguous().view(-1, self.n_hidden)\n        \n        ## TODO: put x through the fully-connected layer\n        out = self.fc(out)\n        \n       \n        \n        # return the final output and the hidden state\n        return out, hidden\n    \n    \n    def init_hidden(self, batch_size):\n        ''' Initializes hidden state '''\n        # Create two new tensors with sizes n_layers x batch_size x n_hidden,\n        # initialized to zero, for hidden state and cell state of LSTM\n        weight = next(self.parameters()).data\n        \n        if (train_on_gpu):\n            hidden = (weight.new(self.n_layers, batch_size, self.n_hidden).zero_().cuda(),\n                  weight.new(self.n_layers, batch_size, self.n_hidden).zero_().cuda())\n        else:\n            hidden = (weight.new(self.n_layers, batch_size, self.n_hidden).zero_(),\n                      weight.new(self.n_layers, batch_size, self.n_hidden).zero_())\n        \n        return hidden\n        ","e3bde580":"def train(net, data, epochs=10, batch_size=10, seq_length=50, lr=0.001, clip=5, val_frac=0.1, print_every=10):\n    ''' Training a network \n    \n        Arguments\n        ---------\n        \n        net: CharRNN network\n        data: text data to train the network\n        epochs: Number of epochs to train\n        batch_size: Number of mini-sequences per mini-batch, aka batch size\n        seq_length: Number of character steps per mini-batch\n        lr: learning rate\n        clip: gradient clipping\n        val_frac: Fraction of data to hold out for validation\n        print_every: Number of steps for printing training and validation loss\n    \n    '''\n    net.train()\n    \n    opt = torch.optim.Adam(net.parameters(), lr=lr)\n    criterion = nn.CrossEntropyLoss()\n    \n    # create training and validation data\n    val_idx = int(len(data)*(1-val_frac))\n    data, val_data = data[:val_idx], data[val_idx:]\n    \n    if(train_on_gpu):\n        net.cuda()\n    \n    counter = 0\n    n_chars = len(net.chars)\n    for e in range(epochs):\n        # initialize hidden state\n        h = net.init_hidden(batch_size)\n        \n        for x, y in get_batches(data, batch_size, seq_length):\n            counter += 1\n            \n            # One-hot encode our data and make them Torch tensors\n            x = one_hot_encode(x, n_chars)\n            inputs, targets = torch.from_numpy(x), torch.from_numpy(y)\n            \n            if(train_on_gpu):\n                inputs, targets = inputs.cuda(), targets.cuda()\n\n            # Creating new variables for the hidden state, otherwise\n            # we'd backprop through the entire training history\n            h = tuple([each.data for each in h])\n\n            # zero accumulated gradients\n            net.zero_grad()\n            \n            # get the output from the model\n            output, h = net(inputs, h)\n            \n            # calculate the loss and perform backprop\n            loss = criterion(output, targets.view(batch_size*seq_length))\n            loss.backward()\n            # `clip_grad_norm` helps prevent the exploding gradient problem in RNNs \/ LSTMs.\n            nn.utils.clip_grad_norm_(net.parameters(), clip)\n            opt.step()\n            \n            # loss stats\n            if counter % print_every == 0:\n                # Get validation loss\n                val_h = net.init_hidden(batch_size)\n                val_losses = []\n                net.eval()\n                for x, y in get_batches(val_data, batch_size, seq_length):\n                    # One-hot encode our data and make them Torch tensors\n                    x = one_hot_encode(x, n_chars)\n                    x, y = torch.from_numpy(x), torch.from_numpy(y)\n                    \n                    # Creating new variables for the hidden state, otherwise\n                    # we'd backprop through the entire training history\n                    val_h = tuple([each.data for each in val_h])\n                    \n                    inputs, targets = x, y\n                    if(train_on_gpu):\n                        inputs, targets = inputs.cuda(), targets.cuda()\n\n                    output, val_h = net(inputs, val_h)\n                    val_loss = criterion(output, targets.view(batch_size*seq_length))\n                \n                    val_losses.append(val_loss.item())\n                \n                net.train() # reset to train mode after iterationg through validation data\n                \n                print(\"Epoch: {}\/{}...\".format(e+1, epochs),\n                      \"Step: {}...\".format(counter),\n                      \"Loss: {:.4f}...\".format(loss.item()),\n                      \"Val Loss: {:.4f}\".format(np.mean(val_losses)))","81c806a8":"# define and print the net\nn_hidden=512\nn_layers=4\n\nnet = CharRNN(chars, n_hidden, n_layers)\nprint(net)","85070850":"batch_size = 64\nseq_length = 160 #max length verses\nn_epochs = 50 # start smaller if you are just testing initial behavior\n\n# train the model\ntrain(net, encoded, epochs=n_epochs, batch_size=batch_size, seq_length=seq_length, lr=0.001, print_every=10)","84fab79f":"model_dante = 'rnn_20_epoch.net'\n\ncheckpoint = {'n_hidden': net.n_hidden,\n              'n_layers': net.n_layers,\n              'state_dict': net.state_dict(),\n              'tokens': net.chars}\n\nwith open(model_dante, 'wb') as f:\n    torch.save(checkpoint, f)","06104658":"def predict(net, char, h=None, top_k=None):\n        ''' Given a character, predict the next character.\n            Returns the predicted character and the hidden state.\n        '''\n        \n        # tensor inputs\n        x = np.array([[net.char2int[char]]])\n        x = one_hot_encode(x, len(net.chars))\n        inputs = torch.from_numpy(x)\n        \n        if(train_on_gpu):\n            inputs = inputs.cuda()\n        \n        # detach hidden state from history\n        h = tuple([each.data for each in h])\n        # get the output of the model\n        out, h = net(inputs, h)\n\n        # get the character probabilities\n        # apply softmax to get p probabilities for the likely next character giving x\n        p = F.softmax(out, dim=1).data\n        if(train_on_gpu):\n            p = p.cpu() # move to cpu\n        \n        # get top characters\n        # considering the k most probable characters with topk method\n        if top_k is None:\n            top_ch = np.arange(len(net.chars))\n        else:\n            p, top_ch = p.topk(top_k)\n            top_ch = top_ch.numpy().squeeze()\n        \n        # select the likely next character with some element of randomness\n        p = p.numpy().squeeze()\n        char = np.random.choice(top_ch, p=p\/p.sum())\n        \n        # return the encoded value of the predicted char and the hidden state\n        return net.int2char[char], h","32866489":"def sample(net, size, prime='Il', top_k=None):\n        \n    if(train_on_gpu):\n        net.cuda()\n    else:\n        net.cpu()\n    \n    net.eval() # eval mode\n    \n    # First off, run through the prime characters\n    chars = [ch for ch in prime]\n    h = net.init_hidden(1)\n    for ch in prime:\n        char, h = predict(net, ch, h, top_k=top_k)\n\n    chars.append(char)\n    \n    # Now pass in the previous character and get a new one\n    for ii in range(size):\n        char, h = predict(net, chars[-1], h, top_k=top_k)\n        chars.append(char)\n\n    return ''.join(chars)","6a09f7ed":"print(sample(net, 1000, prime='Nel ', top_k=5))","3a06e1ec":"# Here we have loaded in a model that trained over 20 epochs `rnn_20_epoch.net`\nwith open('rnn_20_epoch.net', 'rb') as f:\n    checkpoint = torch.load(f)\n    \nloaded = CharRNN(checkpoint['tokens'], n_hidden=checkpoint['n_hidden'], n_layers=checkpoint['n_layers'])\nloaded.load_state_dict(checkpoint['state_dict'])","015e76c5":"# Sample using a loaded model\nprint(sample(loaded, 800, top_k=5, prime=\"E disse \"))","b82436a7":"### Tokenization\n\nIn the cells, below, I'm creating a couple **dictionaries** to convert the characters to and from integers. Encoding the characters as integers makes it easier to use as input in the network.","771d60ae":"### Model Structure\n\nIn `__init__` the suggested structure is as follows:\n* Create and store the necessary dictionaries\n* Define an LSTM layer that takes as params: an input size (the number of characters), a hidden layer size `n_hidden`, a number of layers `n_layers`, a dropout probability `drop_prob`, and a batch_first boolean (True, since we are batching)\n* Define a dropout layer with `dropout_prob`\n* Define a fully-connected layer with params: input size `n_hidden` and output size (the number of characters)\n* Finally, initialize the weights (again, this has been given)\n\nNote that some parameters have been named and given in the `__init__` function, and we use them and store them by doing something like `self.drop_prob = drop_prob`.","dda065ee":"# Character-Level LSTM in PyTorch\n\nThis notebook is part of the course Pytorch from Udacity, to learn how to build a character-level LSTM with PyTorch. The network constructed will train character by character on some text, then generate new text character by character. I have trained my network on an Italian text: Dante's full text of the Divina Commedia. **Will this model be able to generate new verses, and will it be able to generate poetry?!** Answer is below.\n\nThis network is based off of Andrej Karpathy's [post on RNNs](http:\/\/karpathy.github.io\/2015\/05\/21\/rnn-effectiveness\/) and [implementation in Torch](https:\/\/github.com\/karpathy\/char-rnn). Below is the general architecture of the character-wise RNN.\n","e7ffa552":"---\n### LSTM Inputs\/Outputs\n\nYou can create a basic [LSTM layer](https:\/\/pytorch.org\/docs\/stable\/nn.html#lstm) as follows\n\n```python\nself.lstm = nn.LSTM(input_size, n_hidden, n_layers, \n                            dropout=drop_prob, batch_first=True)\n```\n\nwhere `input_size` is the number of characters this cell expects to see as sequential input, and `n_hidden` is the number of units in the hidden layers in the cell. And we can add dropout by adding a dropout parameter with a specified probability; this will automatically add dropout to the inputs or outputs. Finally, in the `forward` function, we can stack up the LSTM cells into layers using `.view`. With this, you pass in a list of cells and it will send the output of one cell into the next cell.\n\nWe also need to create an initial hidden state of all zeros. This is done like so\n\n```python\nself.init_hidden()\n```","55049430":"## Load in Data\n\nThen, we'll load the Anna Karenina text file and convert it into integers for our network to use. ","c75e9d0e":"## Pre-processing the data\n\nAs you can see in our char-RNN image above, our LSTM expects an input that is **one-hot encoded** meaning that each character is converted into an integer (via our created dictionary) and *then* converted into a column vector where only it's corresponding integer index will have the value of 1 and the rest of the vector will be filled with 0's. Since we're one-hot encoding the data, let's make a function to do that!\n","fda998fe":"### Priming and generating text \n\nTypically you'll want to prime the network so you can build up a hidden state. Otherwise the network will start out generating characters at random. In general the first bunch of characters will be a little rough since it hasn't built up a long history of characters to predict from.","cc55a665":"## Making training mini-batches\n\n\nTo train on this data, we also want to create mini-batches for training. Remember that we want our batches to be multiple sequences of some desired number of sequence steps. Considering a simple example, our batches would look like this:\n\n<img src=\"assets\/sequence_batching@1x.png\" width=500px>\n\n\n<br>\n\nIn this example, we'll take the encoded characters (passed in as the `arr` parameter) and split them into multiple sequences, given by `batch_size`. Each of our sequences will be `seq_length` long.\n\n### Creating Batches\n\n**1. The first thing we need to do is discard some of the text so we only have completely full mini-batches. **\n\nEach batch contains $N \\times M$ characters, where $N$ is the batch size (the number of sequences in a batch) and $M$ is the seq_length or number of time steps in a sequence. Then, to get the total number of batches, $K$, that we can make from the array `arr`, you divide the length of `arr` by the number of characters per batch. Once you know the number of batches, you can get the total number of characters to keep from `arr`, $N * M * K$.\n\n**2. After that, we need to split `arr` into $N$ batches. ** \n\nYou can do this using `arr.reshape(size)` where `size` is a tuple containing the dimensions sizes of the reshaped array. We know we want $N$ sequences in a batch, so let's make that the size of the first dimension. For the second dimension, you can use `-1` as a placeholder in the size, it'll fill up the array with the appropriate data for you. After this, you should have an array that is $N \\times (M * K)$.\n\n**3. Now that we have this array, we can iterate through it to get our mini-batches. **\n\nThe idea is each batch is a $N \\times M$ window on the $N \\times (M * K)$ array. For each subsequent batch, the window moves over by `seq_length`. We also want to create both the input and target arrays. Remember that the targets are just the inputs shifted over by one character. The way I like to do this window is use `range` to take steps of size `n_steps` from $0$ to `arr.shape[1]`, the total number of tokens in each sequence. That way, the integers you get from `range` always point to the start of a batch, and each window is `seq_length` wide.\n","c662983b":"## Time to train\n\nThe train function gives us the ability to set the number of epochs, the learning rate, and other parameters.\n\nBelow we're using an Adam optimizer and cross entropy loss since we are looking at character class scores as output. We calculate the loss and perform backpropagation, as usual!\n\nA couple of details about training: \n>* Within the batch loop, we detach the hidden state from its history; this time setting it equal to a new *tuple* variable because an LSTM has a hidden state that is a tuple of the hidden and cell states.\n* We use [`clip_grad_norm_`](https:\/\/pytorch.org\/docs\/stable\/_modules\/torch\/nn\/utils\/clip_grad.html) to help prevent exploding gradients.","cdaf8b6a":"## Loading a checkpoint","82ef3306":"### Test Your Implementation\n\nNow I'll make some data sets and we can check out what's going on as we batch data. Here, as an example, I'm going to use a batch size of 8 and 50 sequence steps.","dd188920":"First let's load in our required resources for data loading and model creation.","7c776304":"---\n## Making Predictions\n\nNow that the model is trained, we'll want to sample from it and make predictions about next characters! To sample, we pass in a character and have the network predict the next character. Then we take that character, pass it back in, and get another predicted character. Just keep doing this and you'll generate a bunch of text!\n\n### A note on the `predict`  function\n\nThe output of our RNN is from a fully-connected layer and it outputs a **distribution of next-character scores**.\n\n> To actually get the next character, we apply a softmax function, which gives us a *probability* distribution that we can then sample to predict the next character.\n\n### Top K sampling\n\nOur predictions come from a categorical probability distribution over all the possible characters. We can make the sample text and make it more reasonable to handle (with less variables) by only considering some $K$ most probable characters. This will prevent the network from giving us completely absurd characters while allowing it to introduce some noise and randomness into the sampled text. Read more about [topk, here](https:\/\/pytorch.org\/docs\/stable\/torch.html#torch.topk).\n","5aaa554f":"And we can see those same characters from above, encoded as integers.","466bf722":"## Instantiating the model\n\nNow we can actually train the network. First we'll create the network itself, with some given hyperparameters. Then, define the mini-batches sizes, and start training!"}}