{"cell_type":{"5fb87f16":"code","dfab3d94":"code","f0b003bb":"code","8d5b238d":"code","67930c0b":"code","3541c13d":"code","534d5a20":"code","71a716b1":"code","297f223a":"code","bb912917":"code","4b7a663b":"code","26879469":"code","c716a7c7":"code","0bc0c5c1":"code","fc94de37":"code","7649cc44":"code","49633b34":"code","fc08f39d":"code","de25023c":"code","1aecb15c":"code","38526a7f":"code","4c46543e":"code","fbc2f038":"code","eff435f3":"code","b7e3adde":"code","24c66925":"code","d02cfa7d":"code","a4c8357b":"code","dde814d4":"code","657c638b":"code","08b5607b":"code","5d803581":"code","628cca63":"code","d21a3c07":"code","12de96ac":"code","571e625d":"code","af09a4cd":"code","344bce6e":"code","73c4ac48":"code","2053c6e6":"code","5feda4f0":"code","64a7c922":"code","cc70942a":"code","11b71a80":"code","74a17b1e":"code","a22cf81a":"code","6e7ae316":"code","f9f42c76":"code","129565bc":"code","d5ceef38":"code","7cb5cac3":"code","f6553939":"code","28834205":"code","524bb6fd":"code","2eeb1cd6":"code","887a8870":"code","5070246e":"code","524e6e78":"code","3b6c9090":"code","dd018967":"code","407a7c23":"code","db2db0e3":"code","b62b14cb":"code","f3b5eaa2":"code","51cea90c":"code","822e90a2":"code","d7ab470f":"code","3d38340f":"code","5dcf6b25":"code","c4c453b2":"code","1cc848c3":"code","4799934f":"code","2781be55":"code","b754fc29":"markdown","99c2422f":"markdown","b17494db":"markdown","54a385da":"markdown","dc5cbed3":"markdown","703a6e3d":"markdown","ebe2dece":"markdown","5090e114":"markdown","3af08036":"markdown","74da7428":"markdown","8fa84a90":"markdown"},"source":{"5fb87f16":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","dfab3d94":"data = pd.read_csv(\"..\/input\/tmdb_5000_movies.csv\")","f0b003bb":"data.info()","8d5b238d":"data_cor = data.corr()\ndata_cor","67930c0b":"# correlation map\n\nf,ax = plt.subplots(figsize =(18,18))\nsns.heatmap(data_cor, annot = True, linewidths = 5, fmt = '.3f', ax = ax)\nplt.show()\n\n\n","3541c13d":"# data.head(15) # We don't need the other features\n\ntitle = data[['original_title','budget','revenue', 'genres']]\ntitle.head(15)","534d5a20":"data.columns","71a716b1":"# Line Plot\n\ndata.revenue.plot(kind = 'line', color = 'b', label = 'revenue', linewidth = 1, alpha = 0.5, grid = True, linestyle = ':')\ndata.budget.plot(color = 'r', label = 'budget', linewidth = 1, alpha = 0.5, grid = True, linestyle = '-.')\nplt.legend()\nplt.xlabel('Movie Count')\nplt.ylabel('Money(m)')\nplt.title('Line Plot')\nplt.show()\n","297f223a":"# Scatter Plot\n\ndata.plot(kind='scatter', x = 'budget', y = 'revenue', alpha = 0.3, color = 'blue')\nplt.xlabel('Budget')\nplt.ylabel('Revenue')\nplt.title('Budget-Revenue Scatter Plot')\nplt.show()","bb912917":"# Histogram\n# bins = number of bar in figure\n\ndata.budget.plot(kind = 'hist', bins = 50 , figsize = (12,12))\nplt.xlabel('Budget')\nplt.show\n","4b7a663b":"# clf() = clean it up again you can start a fresh\n\ndata.budget.plot(kind = 'hist', bins = 50)\nplt.clf()\n\n# We can't see plot due to clf()","26879469":"# Create dictionary and look its keys and values\n\ndictionary = {'Avatar': 'Action', 'Pirates of Carabian V': 'Adventure'}\nprint(dictionary.keys())\nprint(dictionary.values())","c716a7c7":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\n\ndictionary['Avatar'] = \"Fantastic\"         # Updated \"Avatar\" value\nprint(dictionary)\n\ndictionary['Tangled'] = \"Animation\"        # Added new object\nprint(dictionary)\n\ndel dictionary['Pirates of Carabian V']    # Deleted \"Pirates of Carabian V\"\nprint(dictionary)\n\nprint('Avatar' in dictionary)              # Check 'Avatar' include or not (return True or False)\ndictionary.clear()                         # remove all entries in dict\nprint(dictionary)\n","0bc0c5c1":"# In order to run all code you need to take comment this line\n# del dictionary         # delete entire dictionary     \nprint(dictionary)       # it gives error because dictionary is deleted","fc94de37":"data = pd.read_csv('..\/input\/tmdb_5000_movies.csv')","7649cc44":"series = data['budget']    # data['budget'] = series\nprint(type(series))\n\ndata_frame = data[['budget']]  # data[['budget']] = data frame\nprint(type(data_frame))","49633b34":"# Filtering Pandas data frame\n\nx = data['budget'] > 250000000\ndata[x]","fc08f39d":"data[np.logical_and(data['budget'] > 250000000, data['revenue'] > 400000000)]","de25023c":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\n\ndata[(data['budget'] > 250000000) & (data['revenue'] > 400000000)]","1aecb15c":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')\n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'Avatar': 'Action', 'Pirates of Carabian V': 'Adventure'}\nfor key, value in dictionary.items():\n    print(key,\" : \", value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['budget']][0:2].iterrows():\n    print(index, \" : \" , value)","38526a7f":"# User defined function\n# example of what we learn above\n\ndef tuble_ex():\n    t = (1,2,3)\n    return t\n\na,b,c = tuble_ex()\nprint(a,b,c)","4c46543e":"# Scope\n\n# global : defined main body in script\n# local : defined in a function\n# built in scope : names in predefined built in scope module such as print, len\n\nx = 4\ndef f():\n    x = 1\n    return x\n\nprint(x)  # x = 4 global scope\nprint(f()) # x = 2 local scope","fbc2f038":"# What if there is no local scope\n\nx = 3\ndef f():\n    y = 3*x  # There is no local scope x\n    return y\nprint(f()) # it uses global scope x\n\n# First loacal scope searched, then global scope searched,\n# if two of them cannot be found lastly built in scope searched","eff435f3":"import builtins\ndir(builtins)","b7e3adde":"# NESTED FUNCTION\n\ndef square():\n    # return square of value\n    def add():\n        # add two local variable\n        \n        x = 3\n        y = 5\n        z = x + y\n        return z\n    return add()**2\nprint(square())\n","24c66925":"# Default Arguments\n\ndef f(a, b = 1, c = 2): # if  only 1 parameter is given, b = 1, c = 2 accept by function\n    y = a + b + c\n    return y\nprint(f(6)) # a = 6\n# what if we want to change default parameter\nprint(f(5,4,6))\n","d02cfa7d":"#Flexible Arguments\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n\n# flexible arguments **kwargs that is dictionary\n\ndef f(**args):\n    # print key-value of dictionary\n    for key,value in args.items():\n        print(key,\" \", value)\n        \nf(title = 'Avatar', genre = 'Action', budget = 12300000)\n","a4c8357b":"# LAMBDA FUNCTION\n\n# user defined function (long way)\ndef square(x):\n    return x**2\nprint(square(5))\n\n# lambda function (short way)\n\nsquare = lambda x : x**2       # where x is name of argument\nprint(square(3))\n\ntot = lambda x,y,z: x*y*z      # wehre x,y,z are names of arguments\nprint(tot(3,4,5))","dde814d4":"# Anonymous Function\n# map(func,seq) : applies a function to all them items in a list\nnumber_list = [1,2,3]\ny = map (lambda x:x**2,number_list)\nprint(list(y))","657c638b":"# Iterator example\n# iterable is an object that can return an iterator\n# iterable: an object with an associated iter() method; ex: list,strings and dictionaries\n# iterator: produces next value with next() method\n\nname = \"Avatar\"\nit = iter(name)\nprint(next(it))   # print next iteration\nprint(*it)        # print remaining iteration","08b5607b":"# zip() : zip list\n\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\n\nz_list = list(z)\nprint(z_list)\n\nprint(z_list[1])\nprint(z_list[1][1])","5d803581":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\n\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","628cca63":"# LIST COMPREHENSION\n\n# One of the most important topic of this kernel\n# We use list comprehension for data analysis often\n# list comprehension : collapse for loops building lists into a single line\n# Ex : num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is unnecessarily long.\n# We can make it one line code that is list comprehension\n\n# Example\n\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1] # list comprehension\nprint(num2)\n\n# i+1 : list comprehension syntax\n# for i in num1 for loop syntax\n# i : iterartor\n# num1 : iterable object\n","d21a3c07":"# Conditional on iterable\n\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1] # else i-5 if i <7 means if i < 7 then i = i-5\nprint(num2)","12de96ac":"# Lets return movie csv and make one more list comprehension example\n# Lets classify movies whether they have high or low revenue. Our threshold is average revenue\n\nthreshold = sum(data.revenue)\/len(data.revenue)\nprint(threshold)\ndata[\"revenue_level\"] = [\"high\" if i > threshold else \"low\" for i in data.revenue]\ndata.loc[:10,[\"revenue_level\",\"revenue\"]]","571e625d":"# data frames from dictionary\ntitle = ['Avatar', 'G.O.R.A']\ngenres = ['Action', 'Adventure']\nlist_label = ['title','genres']\nlist_col = [title,genres]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","af09a4cd":"# Add new columns\ndf['producer'] = [\"James Cameron\", \"Cem Y\u0131lmaz\"]\ndf['revenue'] = [760507625,26200000]\ndf","344bce6e":"# Broadcasting\ndf['budget'] = 0 # Broadcasting entire column\ndf","73c4ac48":"# plotting all data\ndata1 = data.loc[:,[\"budget\",\"revenue\"]]\ndata1.plot()\nplt.show()","2053c6e6":"# subplots\ndata1.plot(subplots = True)\nplt.show()","5feda4f0":"# scatter\ndata1.plot(kind = \"scatter\", x = 'budget', y = 'revenue')\nplt.show()","64a7c922":"# hist plot\ndata.plot(kind = 'hist', y = 'popularity', bins = 50,range = (0,5), normed = True)\n","cc70942a":"# histogram subplot with non cumulative and cumulative\nfig, axes = plt.subplots(nrows=2,ncols=1)\ndata.plot(kind = 'hist', y = 'popularity', bins = 50,range = (0,5), normed = True, ax = axes[0])\ndata.plot(kind = 'hist', y = 'popularity', bins = 50,range = (0,5), normed = True, ax = axes[1], cumulative = True)\nplt.savefig('graph.png')\nplt","11b71a80":"time_list = [\"2010-04-12\",\"2008-04-25\"]\nprint(type(time_list[1])) # as you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","74a17b1e":"data2 = data.head()\ndata2","a22cf81a":"data2 = data2.set_index(\"release_date\")\ndata2","6e7ae316":"print(data2.loc[\"2009-12-10\"])\nprint(data2.loc[\"2009-12-10\":\"2012-07-16\"])","f9f42c76":"newdf = pd.to_datetime(data2.index)\ndata2.index = newdf\ndata2","129565bc":"data2.resample(\"A\").mean()","d5ceef38":"# INDEXING DATA FRAMES\nprint(data[\"budget\"][1]) # index using square bracjet\nprint(data.budget[1])    # using column attribute and row label\nprint(data.loc[1,[\"budget\"]])   # using loc accessor","7cb5cac3":"# selecting some columns\ndata[[\"budget\",\"original_title\"]].head()","f6553939":"# SLICING DATA FRAME\n# difference between selecting columns: series and dataframes\nprint(type(data[\"budget\"])) #series\nprint(type(data[[\"budget\"]])) #dataframes","28834205":"# Slicing and indexing series\n\ndata.loc[0:9,\"budget\":\"original_title\"]","524bb6fd":"# from something to end\n\ndata.loc[0:4,\"original_title\":]","2eeb1cd6":"# FILTERING DATA FRAMES\nboolean = data.budget > 200000000\ndata[boolean]","887a8870":"# Combining filters\n\nfirst_filter = data.budget > 200000000\nsecond_filter = data.revenue > 1000000000\ndata[first_filter & second_filter]","5070246e":"# filtering column based others\n\ndata.budget[data.vote_average > 7.8]","524e6e78":"# Plain python function\ndef div(n):\n    return n\/2\ndata.vote_average.apply(div).head()","3b6c9090":"# or we can use lambda function\n\ndata.vote_average.apply(lambda n: n\/2).head()","dd018967":"# Defining column using other columns\ndata[\"profit\"] = data.revenue - data.budget\ndata[[\"original_title\",\"budget\",\"revenue\",\"profit\"]].head()\n","407a7c23":"# INDEX OBJECTS AND LABELED DATA\n\n# our index name is this;\nprint(data.index.name)\n#Lets change it\ndata.index.name = \"index_name\"\ndata.head()","db2db0e3":"data5 = data.copy()\n# Lets make index start from 100\ndata5.index = range(100,4903,1)\ndata5.head()","b62b14cb":"# HIERARCHICAL INDEXING\n# Setting index : production_companies is outer production_countries is inner index\ndata1 = data.set_index([\"production_countries\",\"production_companies\"])\ndata1.head(100)","f3b5eaa2":"# PIVOTING DATA FRAMES\n# pivoting : reshape tool\n\ndic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"], \"response\":[10,25,30,50],\"age\":[14,53,21,63]}\ndf = pd.DataFrame(dic)\ndf\n","51cea90c":"# pivoting\ndf.pivot(index = \"gender\",columns=\"treatment\",values=\"response\")","822e90a2":"df1 = df.set_index([\"treatment\",\"gender\"])\ndf1\n# lets unstack it","d7ab470f":"# level determines indexis\ndf1.unstack(level=0)","3d38340f":"df1.unstack(level=1)","5dcf6b25":"# change inner and outer level index position\n\ndf2 = df1.swaplevel(0,1)\ndf2","c4c453b2":"# MELTING DATA FRAMES\n# Reverse of pivoting\n\n# df.pivot(index=\"treatment\",columns=\"gender\",values=\"response\")\n\npd.melt(df,id_vars=\"treatment\",value_vars = [\"age\",\"response\"])\n\n# variable and value default adding dataframe. We assign this values with age and response datas","1cc848c3":"# CATEGORICALS AND GROUPBY\n\ndf.groupby(\"treatment\").mean()","4799934f":"df.groupby(\"gender\").age.mean()","2781be55":"df.groupby(\"treatment\")[[\"age\",\"response\"]].max()","b754fc29":"MATLABPLOTIB","99c2422f":"**INDEXING PANDAS TIME SERIES**\ndatetime = object\nparse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss) format","b17494db":" **PANDAS FOUNDATION**\n \n**Building Data Frames from Scratch**\n \n*  we can build data frames from csv as we did earlier.\n*  also we can build dataframe from dictionary\n*      zip() method: This function retunrs a list of tuples, where the i-th tuple contains the i-th element from each of\n       the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column\n ","54a385da":"basic features of film revenue growth\n*  budget (0.73)\n*  popularity (0.64)\n*  vote count (0,78)","dc5cbed3":"WHILE and FOR LOOPS","703a6e3d":"PANDAS","ebe2dece":"# TRANSFORMING DATA\n* Plain python functions\n* Lambda function : to apply arbitrary python function to every element\n* Defining column using other columns","5090e114":"DICTIONARY","3af08036":"**RESAMPLING PANDAS TIME SERIES**\n* Resambling: statistical method over diffrent time intervals\n    * Needs string to specify frequency like \"M\" = mount or \"A\" = year\n* Downsampling : reduce date time rows to slower frequency like from daily to weekly\n* Upsampling : increase date time rows to faster frequency like from dailt to hourly\n* Interpolate: Interpolate values according to different methods like 'linear\",'time\", or \"index\"","74da7428":"# STACKING and UNSTACKING DATA FRAME\n* Deal with multi label indexing\n* level : position of unstacked index\n* swaplevel : change inner and outer level index position","8fa84a90":"**VISUAL EXPLORATORY DATA ANALYSIS**\n* Plot\n* Subplot\n* Histogram\n    * bins : number of bins\n    * range(tuble) : min and max values of bins\n    * normed(boolean) : normalize or not\n    * cumulative(boolean) : compute cumulative distribution"}}