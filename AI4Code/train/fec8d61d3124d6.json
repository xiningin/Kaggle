{"cell_type":{"2dc69f1e":"code","1ed34e05":"code","051840b8":"code","6c513cd9":"code","f6b58278":"code","8387e8c0":"code","7ce8050b":"code","527887e1":"code","e1e3c1fa":"code","af32660f":"code","f73036dd":"code","c039fe2e":"code","9efea512":"code","3e5a1879":"code","e5a2079d":"code","2d069017":"code","2b0e70dc":"code","d04437ce":"code","9dc8f71c":"code","844b15c3":"code","abed53f7":"code","c097433e":"code","177ec6f6":"code","73804d02":"code","bea2a951":"code","6f83f21b":"code","b5555a7f":"code","51dffd51":"code","0cd35dec":"code","5b16c575":"code","acd37813":"code","d0715d57":"code","b6117853":"code","2520471b":"code","ea999b3e":"code","9d6c7e26":"code","2ca2fe58":"code","803ef423":"code","602b6d54":"code","685bca2f":"code","1113f651":"code","d371dac1":"code","fcebce0d":"code","35a0cc42":"code","5f45a2d1":"code","29648aa2":"code","3ab1be0c":"code","3d815976":"code","d2860218":"code","910e8f37":"code","791d2b0b":"code","6e856990":"code","4b41c21a":"code","cb949e14":"code","2249e545":"code","6f3edc9a":"code","9ce89e22":"code","43116e92":"code","d1f10cff":"code","cfaf1387":"code","5ef7151d":"code","7a85f71c":"code","bd613b68":"code","671b5271":"code","61766ef2":"code","e845c130":"code","c7ecc708":"code","566796bf":"code","ab53dd02":"code","b7c26cdf":"code","2e77f577":"code","491f6ad4":"code","48780137":"code","8bf8dcf8":"code","1c9e4eaa":"code","fa61e034":"code","9d984e8a":"code","c2d6b653":"code","4716471b":"code","78b636a2":"code","0a4069f2":"code","d7812390":"code","9a7bca7f":"code","6c7e8c04":"code","4441f615":"code","30acc96a":"code","74787eac":"code","494f47e0":"code","7039c4e7":"code","ea59aaf9":"code","2c28c922":"code","3fcf55a7":"code","737f7639":"code","bd52ac78":"code","e83cda8f":"code","af8272a4":"code","660acc1c":"code","4be52d46":"code","8014746f":"code","5fbdcd50":"code","90260c13":"code","294ccf29":"code","9d247528":"code","c331603e":"code","461341fc":"code","161b9480":"code","29714cfe":"code","4a8adf9c":"code","fc079b42":"code","a2d9a1f5":"code","0a5e82e1":"markdown","64241308":"markdown","d4ede46e":"markdown","258e62b0":"markdown","5a14df82":"markdown","6f9c8085":"markdown","ce3f0e82":"markdown","37f68fb7":"markdown","28ab97e3":"markdown","683ebd56":"markdown","02f6e2c2":"markdown","6b098d4f":"markdown","ecf84e3d":"markdown","d94adb4e":"markdown","0d055232":"markdown","5c0d8fe2":"markdown","76695225":"markdown","def96ffb":"markdown"},"source":{"2dc69f1e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        pass\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1ed34e05":"!ls","051840b8":"#\u5bfc\u5e93\nimport os\nimport pandas as pd\nimport numpy as np\nimport cv2\nfrom PIL import Image, ImageDraw\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly \nprint(plotly.__version__)\n#\u9700\u8981\u6ce8\u610f\u4e00\u4e0bplotly \u8fd9\u91cc\u53ef\u80fd\u6709\u5751","6c513cd9":"!pwd #\u8bb0\u5f97\u5206\u6e05\u695a working\u8ddfinput\u8ddfoutput\u8def\u5f84\u7684\u533a\u522b\uff01\uff01\n!ls\n!ls \/kaggle\/input\/nfl-health-and-safety-helmet-assignment","f6b58278":"# \/kaggle\/input\/nfl-health-and-safety-helmet-assignment\nENV_DIR = '\/kaggle\/input'\nDATA_DIR = f'{ENV_DIR}\/nfl-health-and-safety-helmet-assignment'\n#\u67e5\u770b\u4e00\u4e0b\u8def\u5f84\u5728\u54ea\nos.listdir(DATA_DIR) \n#os.path.exists(DATA_DIR+\"\/train_labels.csv\") \uff03\u5224\u65ad\u662f\u5426\u5b58\u5728\u8def\u5f84","8387e8c0":"#\u67e5\u770bcsv\u6570\u636e\n#\u89c6\u9891\u6570\u636e\u7684\u6807\u7b7e\ntrain_df = pd.read_csv(f\"{DATA_DIR}\/train_labels.csv\")\ntrain_df.head(2) \n#\u53ef\u4ee5\u770b\u5230\u6709\u5f88\u591a\u6807\u6ce8\u53c2\u6570\u4fe1\u606f \n\n# - video_frame: \u89c6\u9891\u548c\u5e27\u7684\u7ec4\u5408\u7f16\u53f7\n# - gameKey: game\u7f16\u53f7\n# - playID: play\u7f16\u53f7\n# - view: \u6444\u50cf\u673a\u89c6\u89d2\n# - video: \u89c6\u9891\u7f16\u53f7\n# - frame: \u5e27\u7f16\u53f7\n# - label: \u7403\u5458\u7f16\u7801\n# - [left\/width\/top\/height]: \u5934\u76d4\u8fb9\u6846\n# - impactType: \u5934\u76d4\u649e\u51fb\u7c7b\u578b\u7684\u63cf\u8ff0:\u5934\u76d4\u3001\u80a9\u8180\u3001\u8eab\u4f53\u3001\u5730\u9762\n# - isDefinitiveImpact \uff1a\u662f\u5426\u649e\u51fb\u7684\u6807\u7b7e\n# - isSidelinePlayer \uff1a\u662f\u90fd\u4f4d\u4e8e\u53d8\u73b0\u4e0a","7ce8050b":"#\u56fe\u7247\u6570\u636e\u7684\u6807\u7b7e\nimage_df = pd.read_csv(f\"{DATA_DIR}\/image_labels.csv\")\nimage_df.head(2) \n\n# - image: \u56fe\u50cf\u6587\u4ef6\u540d\u3002\n# - label: \u6807\u7b7e\u7c7b\u578b\u3002\n# - [left\/width\/top\/height]\uff1a\u6807\u7b7e\u8fb9\u754c","527887e1":"# \u8f85\u52a9\u6570\u636e\u96c6\u8bad\u7ec3\u7ed3\u679c - Trained by images inside folder images\/\ntrain_predict_df = pd.read_csv(f'{DATA_DIR}\/train_baseline_helmets.csv')\ntest_predict_df = pd.read_csv(f'{DATA_DIR}\/test_baseline_helmets.csv')\ntrain_predict_df.head(2)\n# - video_frame\uff1a\u89c6\u9891\u548c\u5e27\u7684\u7ec4\u5408\u7f16\u53f7\n# - [left\/width\/top\/height]\uff1a\u9884\u6d4b\u8fb9\u6846\n# - conf \uff1a\u8fb9\u6846\u7f6e\u4fe1\u5ea6","e1e3c1fa":"# \u7403\u5458\u4f20\u611f\u5668\u6570\u636e\ntrain_tracking_df = pd.read_csv(f'{DATA_DIR}\/train_player_tracking.csv')\ntest_tracking_df = pd.read_csv(f'{DATA_DIR}\/test_player_tracking.csv')\ntrain_tracking_df.head(2)\n# - gameKey: game\u7f16\u53f7.\n# - playID:  \u7403\u5458\u7f16\u53f7.\n# - player: the player's ID code.\n# - time: timestamp at 10 Hz.\n# - x: player position along the long axis of the field. See figure below.\n# - y: player position along the short axis of the field. See figure below.\n# - s: \u901f\u5ea6 in yards\/second.\n# - a: \u52a0\u901f\u5ea6 in yards\/second^2.\n# - dis: distance traveled from prior time point, in yards.\n# - o: \u7403\u5458\u65b9\u5411\u89d2\u5ea6 (deg).\n# - dir: angle of player motion (deg).\n# - event: game events like a snap, whistle, etc","af32660f":"#\u68c0\u67e5submission\u683c\u5f0f\u662f\u5426\u6b63\u786e\ndef check_submission(sub):\n    \"\"\"\n    Checks that the submission meets all the requirements.\n\n    1. No more than 22 Boxes per frame.\n    2. Only one label prediction per video\/frame\n    3. No duplicate boxes per frame.\n\n    Returns:\n        True -> Passed the tests\n        False -> Failed the test\n    \"\"\"\n    # Maximum of 22 boxes per frame.\n    max_box_per_frame = sub.groupby([\"video_frame\"])[\"label\"].count().max()\n    if max_box_per_frame > 22:\n        print(\"Has more than 22 boxes in a single frame\")\n        return False\n    # Only one label allowed per frame.\n    has_duplicate_labels = sub[[\"video_frame\", \"label\"]].duplicated().any()\n    if has_duplicate_labels:\n        print(\"Has duplicate labels\")\n        return False\n    # Check for unique boxes\n    has_duplicate_boxes = (\n        sub[[\"video_frame\", \"left\", \"width\", \"top\", \"height\"]].duplicated().any()\n    )\n    if has_duplicate_boxes:\n        print(\"Has duplicate boxes\")\n        return False\n    return True","f73036dd":"ans_submission = pd.read_csv(f'{DATA_DIR}\/sample_submission.csv')\ncheck_submission(ans_submission)","c039fe2e":"# reference : https:\/\/www.kaggle.com\/coldfir3\/eda-helmet-keypoint-tracking-data-comparison\n\ndef get_frame_from_video(video_path, frame):\n    \"\"\"\n    video_path:\u89c6\u9891\u8def\u5f84\n    frame: \u54ea\u4e00\u79d2\u56fe\u7247\uff08\u4ee5\u4e00\u79d2\u4e3a\u8d77\u70b9\uff09\n    \"\"\"\n    video_path = f\"{DATA_DIR}\/train\/{video_path}\"\n    frame = frame - 1 \n    \n    !ffmpeg \\\n        -hide_banner \\\n        -loglevel fatal \\\n        -nostats \\\n        -i $video_path -vf \"select=eq(n\\,$frame)\" -vframes 1 frame.png\n    \n    img = Image.open('frame.png') #\u6253\u5f00\u56fe\u7247\n    os.remove('frame.png') #\u628a\u56fe\u7247\u5220\u53bb\n    return img","9efea512":"get_frame_from_video('57583_000082_Endzone.mp4', 4) #\u4ee557583_000082_Endzone.mp4\u7684\u56db\u79d2\u4e3a\u4f8b","3e5a1879":"def draw_rect(image, bbox_df):\n    \"\"\"\n    image\uff1a\u539f\u59cb\u56fe\u7247\n    bbox_df:box\u7684\u4f4d\u7f6e\uff08\u7531\u6807\u6ce8\u6587\u4ef6\u7ed9\u51fa\uff09\n    \"\"\"\n    new_image = image.copy()\n    draw = ImageDraw.Draw(new_image)\n    for _, (left, width, top, height) in bbox_df[['left', 'width', 'top', 'height']].iterrows():\n        # \u753b\u56fe\u7531\u5de6\u4e0a\u5230\u53f3\u4e0b\uff0c\u6240\u4ee5\u53c2\u6570\uff1a(left, top), (left + width, top + height)\n        draw.rectangle(((left, top), (left + width, top + height)), outline=(255, 0, 0), width=2)\n    \n    return new_image","e5a2079d":"def frame_bbox(df, video_frame):\n    \"\"\"\n    df:\n    video_frame:\u8f93\u5165\u53c2\u6570 57583_000082_Endzone \u52a0\u4e0a \"_\u79d2\"\n    \"\"\"\n    video_name = '_'.join(video_frame.split('_')[:3]) + '.mp4'\n#     print(video_name)\n    #string\u5206\u5272\n    frame = int(video_frame.split('_')[-1])\n#     print(frame)\n    #\u8c03\u7528\u4e0a\u9762\u7684\u53d6\u796f\u65b9\u6cd5\n    image = get_frame_from_video(video_name, frame)\n    #\u5229\u7528pandas\u7684query\u67e5\u8be2\uff08@\u53ef\u4ee5\u5f15\u5165\u73af\u5883\u53d8\u91cf\uff09\n    #https:\/\/blog.csdn.net\/qq_45176548\/article\/details\/112755795\n    bbox_df = df.query('video_frame == @video_frame')\n    #\u8c03\u7528\u65b9\u6cd5\u753b\u51fa\u8fb9\u6846\n    bbox_image = draw_rect(image, bbox_df)\n    \n    return bbox_image","2d069017":"frame_bbox(train_df, '57583_000082_Endzone_4')","2b0e70dc":"from IPython.display import Video, display\ndef video(video_path, ratio=0.5):\n    \"\"\"\n    video_path:\u89c6\u9891\u8def\u5f84\n    ratio:\u6bd4\u4f8b\n    \"\"\"\n    nfl_video = Video(f\"{DATA_DIR}\/train\/{video_path}\",\n                      embed=True,\n                      height=int(720 * ratio),\n                      width=int(1280 * ratio))\n    return nfl_video\nvideo('57583_000082_Endzone.mp4')","d04437ce":"# \u53ef\u53c2\u8003\uff1ahttps:\/\/www.kaggle.com\/robikscube\/nfl-helmet-assignment-getting-started-guide\ndef add_track_features(tracks, fps=59.94, snap_frame=10):\n    \"\"\"\n    Add column features helpful for syncing with video data.\n    \n    track:csv\u4fe1\u606f\n    \n    \"\"\"\n    tracks = tracks.copy()\n    \n    tracks[\"game_play\"] = (\n        tracks[\"gameKey\"].astype(\"str\")\n        + \"_\"\n        + tracks[\"playID\"].astype(\"str\").str.zfill(6)\n    )\n    #\u627e\u5230\u6bd4\u8d5b\u65f6\u95f4\n    tracks[\"time\"] = pd.to_datetime(tracks[\"time\"])\n    # The time when snap happened\n    # print(tracks.query('event == \"ball_snap\"').groupby(\"game_play\")[\"time\"].first())\n    # \u4e00\u4e2a\u5b57\u5178\uff0c\u7531track\uff08df\uff09\u67e5\u8be2\uff0c\u7136\u540e\u8f6c\u4e3adict\n    snap_dict = (\n        tracks.query('event == \"ball_snap\"')\n        .groupby(\"game_play\")[\"time\"]\n        .first()\n        .to_dict()\n    )\n#     print(tracks[\"game_play\"].map(snap_dict))\n    # \u76ee\u524d\u8fd8\u4e0d\u592a\u6e05\u695asnap\u662f\u4ec0\u4e48\n    tracks[\"snap\"] = tracks[\"game_play\"].map(snap_dict)\n    tracks[\"isSnap\"] = tracks[\"snap\"] == tracks[\"time\"]\n    #\u961f\u5458\u5206\u6210\u4e3b\u961f\u4e0e\u5ba2\u961f\n    tracks[\"team\"] = tracks[\"player\"].str[0].replace(\"H\", \"Home\").replace(\"V\", \"Away\")\n    tracks[\"snap_offset\"] = (tracks[\"time\"] - tracks[\"snap\"]).astype(\n        \"timedelta64[ms]\"\n    ) \/ 1_000\n    # \u89c6\u9891\u796f\n    tracks[\"est_frame\"] = (\n        ((tracks[\"snap_offset\"] * fps) + snap_frame).round().astype(\"int\")\n    )\n    # \u770b\u4e00\u773c\u6570\u636e\n    print(\"game_play:\",tracks[\"game_play\"][0])\n    print(\"snap:\",tracks[\"snap\"][0])\n    print(\"team:\",tracks[\"team\"][0])\n    print(\"isSnap:\",tracks[\"isSnap\"][0])\n    print(\"snap_offset:\",tracks[\"snap_offset\"][0])\n    \n    return tracks\n\ntrain_tracking_df = add_track_features(train_tracking_df)","9dc8f71c":"import plotly.express as px\nimport plotly.graph_objects as go\nimport plotly\n\n#\u753b\u51fa\u573a\u5730\ndef add_plotly_field(fig):\n    # \u53c2\u8003 https:\/\/www.kaggle.com\/ammarnassanalhajali\/nfl-big-data-bowl-2021-animating-players\n    fig.update_traces(marker_size=20)\n    \n    fig.update_layout(paper_bgcolor='#29a500', plot_bgcolor='#29a500', font_color='white',\n        width = 800,\n        height = 600,\n        title = \"\",\n        \n        xaxis = dict(\n        nticks = 10,\n        title = \"\",\n        visible=False\n        ),\n        \n        yaxis = dict(\n        scaleanchor = \"x\",\n        title = \"Temp\",\n        visible=False\n        ),\n        showlegend= True,\n  \n        annotations=[\n       dict(\n            x=-5,\n            y=26.65,\n            xref=\"x\",\n            yref=\"y\",\n            text=\"ENDZONE\",\n            font=dict(size=16,color=\"#e9ece7\"),\n            align='center',\n            showarrow=False,\n            yanchor='middle',\n            textangle=-90\n        ),\n        dict(\n            x=105,\n            y=26.65,\n            xref=\"x\",\n            yref=\"y\",\n            text=\"ENDZONE\",\n            font=dict(size=16,color=\"#e9ece7\"),\n            align='center',\n            showarrow=False,\n            yanchor='middle',\n            textangle=90\n        )]  \n        ,\n        legend=dict(\n        traceorder=\"normal\",\n        font=dict(family=\"sans-serif\",size=12),\n        title = \"\",\n        orientation=\"h\",\n        yanchor=\"bottom\",\n        y=1.00,\n        xanchor=\"center\",\n        x=0.5\n        ),\n    )\n    ####################################################\n        \n    fig.add_shape(type=\"rect\", x0=-10, x1=0,  y0=0, y1=53.3,line=dict(color=\"#c8ddc0\",width=3),fillcolor=\"#217b00\" ,layer=\"below\")\n    fig.add_shape(type=\"rect\", x0=100, x1=110, y0=0, y1=53.3,line=dict(color=\"#c8ddc0\",width=3),fillcolor=\"#217b00\" ,layer=\"below\")\n    for x in range(0, 100, 10):\n        fig.add_shape(type=\"rect\", x0=x,   x1=x+10, y0=0, y1=53.3,line=dict(color=\"#c8ddc0\",width=3),fillcolor=\"#29a500\" ,layer=\"below\")\n    for x in range(0, 100, 1):\n        fig.add_shape(type=\"line\",x0=x, y0=1, x1=x, y1=2,line=dict(color=\"#c8ddc0\",width=2),layer=\"below\")\n    for x in range(0, 100, 1):\n        fig.add_shape(type=\"line\",x0=x, y0=51.3, x1=x, y1=52.3,line=dict(color=\"#c8ddc0\",width=2),layer=\"below\")\n    \n    for x in range(0, 100, 1):\n        fig.add_shape(type=\"line\",x0=x, y0=20.0, x1=x, y1=21,line=dict(color=\"#c8ddc0\",width=2),layer=\"below\")\n    for x in range(0, 100, 1):\n        fig.add_shape(type=\"line\",x0=x, y0=32.3, x1=x, y1=33.3,line=dict(color=\"#c8ddc0\",width=2),layer=\"below\")\n    \n    \n    fig.add_trace(go.Scatter(\n    x=[2,10,20,30,40,50,60,70,80,90,98], y=[5,5,5,5,5,5,5,5,5,5,5],\n    text=[\"G\",\"1 0\",\"2 0\",\"3 0\",\"4 0\",\"5 0\",\"4 0\",\"3 0\",\"2 0\",\"1 0\",\"G\"],\n    mode=\"text\",\n    textfont=dict(size=20,family=\"Arail\"),\n    showlegend=False,\n    ))\n    \n    fig.add_trace(go.Scatter(\n    x=[2,10,20,30,40,50,60,70,80,90,98], y=[48.3,48.3,48.3,48.3,48.3,48.3,48.3,48.3,48.3,48.3,48.3],\n    text=[\"G\",\"1 0\",\"2 0\",\"3 0\",\"4 0\",\"5 0\",\"4 0\",\"3 0\",\"2 0\",\"1 0\",\"G\"],\n    mode=\"text\",\n    textfont=dict(size=20,family=\"Arail\"),\n    showlegend=False,\n    ))\n    \n    return fig","844b15c3":"#\u7ecf\u8fc7add_track_features \u4fee\u6539\u7684df\ntrain_tracking_df\ntrain_tracking_df.head(3)","abed53f7":"def football_animation(game_play):\n    train_tracking_df[\"track_time_count\"] = (\n        train_tracking_df.sort_values(\"time\")\n        .groupby(\"game_play\")[\"time\"]\n        .rank(method=\"dense\")\n        .astype(\"int\")\n    )\n\n    fig = px.scatter(\n        train_tracking_df.query(\"game_play == @game_play\"),\n        x=\"x\",\n        y=\"y\",\n        #\u8c03\u6574\u5927\u5c0f\n        range_x=[-10, 110],\n        range_y=[-10, 53.3],\n        hover_data=[\"player\", \"s\", \"a\", \"dir\"],#\u53c2\u6570\n        color=\"team\", #\u7528\u4e3b\u5ba2\u961f\u5206\u7c7b\n        animation_frame=\"track_time_count\",#\u52a8\u753b\u7684\u796f\n        text=\"player\",\n        title=f\"Animation of NGS data for game_play {game_play}\",\n    )\n\n    fig.update_traces(textfont_size=10)\n    fig = add_plotly_field(fig)\n    fig.show()\nfootball_animation('57583_000082')","c097433e":"train_videos = os.listdir(f'{DATA_DIR}\/train')\ntest_videos = os.listdir(f'{DATA_DIR}\/test')\n#\u8bad\u7ec3\u89c6\u9891\u4e0e\u6d4b\u8bd5\u89c6\u9891\u7684\u6570\u91cf\nlen(train_videos), len(test_videos)","177ec6f6":"set(test_videos).issubset(set(train_videos))\n#\u4e5f\u5c31\u662ftest\u662ftrain\u7684\u5b50\u96c6\uff0c\u5305\u542b\u5728\u91cc\u5934\n#\u6709120\u4e2atrain_video\u4e0e6\u4e2atest_video","73804d02":"test_df = train_df.query(\"video in @test_videos\").reset_index().copy()\ntest_df","bea2a951":"#\u533a\u5206\u4e0d\u540c\u573a\u5730\u89c6\u89d2\uff0cendzone\uff0csideline\nend_count = 0\nside_count = 0\nendzone_list = []\nsideline_list = []\nfor train_video in train_videos:\n    name = train_video.split('.')[0]\n    video_id, play_id, view = name.split('_')\n    \n    if view == \"Endzone\":\n        endzone_list.append('_'.join([video_id, play_id]))\n        end_count += 1\n    else:\n        sideline_list.append('_'.join([video_id, play_id]))\n        side_count += 1\n\nprint(end_count, side_count)\n#\u90fd\u5404\u81ea\u670960\u4e2a\nprint(set(train_videos) == set(train_df.video.unique()))\n#\u4ee3\u8868train_videos \u5728train_labels.csv\u80fd\u627e\u5230\nset(test_videos) == set(test_df.video.unique())","6f83f21b":"#\u56e0\u4e3a\u540c\u65f6\u6709\u4e24\u4e2a\u4e0d\u540c\u573a\u666f\u7684\u89c6\u89d2\uff0c\u9700\u8981\u5206\u6790\u4e0d\u540c\u89c6\u89d2\u662f\u5426\u6709\u76f8\u540c\u796f\u6570\nnot_match_video = []\n\nfor play_id in train_df.playID.unique():\n    end_frame_n = train_df.query('playID == @play_id and view == \"Endzone\"').frame.max()\n    side_frame_n = train_df.query('playID == @play_id and view == \"Sideline\"').frame.max()\n    \n    if end_frame_n != side_frame_n:\n        not_match_video.append(play_id)\n        print(f'Not same at playID {play_id} endzone [{end_frame_n}] sideline [{side_frame_n}] difference [{abs(end_frame_n - side_frame_n)}]')\nprint(\"no_match_num:\",len(not_match_video))\n#\u670925\u4e2avideo\u4e0d\u5339\u914d\u796f\u6570","b5555a7f":"## \u5206\u6790\u6bcf\u4e2a\u796f\u662f\u5426\u5728csv\u90fd\u662f\u80fd\u5bf9\u7684\u4e0a\u7684\ndef get_total_frame(video_path):\n    \"\"\"\n    video_path:\u89c6\u9891\u8def\u5f84\n    \"\"\"\n    cap = cv2.VideoCapture(f\"{DATA_DIR}\/train\/{video_path}\")\n    property_id = int(cv2.CAP_PROP_FRAME_COUNT) \n    length = int(cv2.VideoCapture.get(cap, property_id))\n    \n    return length\n\nplay2frame = train_df.groupby('video').frame.max().to_dict()\n\nfor video_name, label_frame_n in play2frame.items():\n    video_frame_n = get_total_frame(video_name)\n    if video_frame_n != label_frame_n:\n        print('Not Match!')","51dffd51":"#\u662f\u5426\u6709frame\u4e3a0\u7684\u60c5\u51b5\ntrain_df.query(\"frame == 0\")\n#\u53ea\u6709\u4e00\u796f frame\u6807\u4e3a0 \uff08\u5e94\u8be5\u4e3a1\uff09 =>\u76f4\u63a5\u820d\u5f03\u5373\u53ef\n# \u53ef\u4ee5\u7528\u8fd9\u4e2a\u770b\u4e00\u4e0b\u8be5\u89c6\u9891\u7684\u60c5\u51b5\uff0c\u53d1\u73b0\u53ea\u6709\u4e00\u4e2a\u4e3a0\u6240\u4ee5\u76f4\u63a5\u820d\u5f03\n# frame_df = train_df.query('video == \"57584_000336_Sideline.mp4\"')\n# frame_df\n# frame_df.frame.max()\n# get_total_frame(\"57584_000336_Sideline.mp4\")","0cd35dec":"train_df.head(2)","5b16c575":"print(train_df.gameKey.nunique())\nprint(train_df.playID.nunique())\nprint(train_df.groupby('gameKey')['playID'].unique())","acd37813":"# 300 ~ 600 images per play\n# \u53ef\u4ee5\u770b\u4e00\u4e0b'gameKey', 'playID', 'view'\u7684\u533a\u522b\ntrain_df.groupby(['gameKey', 'playID', 'view'])['frame'].nunique()","d0715d57":"#\u753b\u56fe\uff1a\u796f\u6570\u5206\u5e03\nsns.displot(train_df.groupby(['gameKey', 'playID', 'view'])['frame'].nunique().values)\nprint(\"total_frame:\",train_df.groupby(['gameKey', 'playID', 'view'])['frame'].nunique().sum())","b6117853":"play_per_game = train_df.groupby('gameKey')['playID'].nunique().reset_index().groupby('playID')['gameKey'].unique().to_dict()\nplay_per_game #game\u4e0eplayid\u7684\u5206\u7c7b\n# \u4e00\u573agame\u53ef\u80fd\u6709\u51e0\u4e2aplayid ","2520471b":"train_df.groupby(['gameKey', 'playID', 'view'])['label'].nunique().value_counts()\n#\u6bcf\u573a\u6bd4\u8d5b\u7403\u573a\u7684\u4eba\u6570","ea999b3e":"#\u786e\u8ba4\u4e00\u4e0b\u54ea\u573a\u6bd4\u8d5b\u53ea\u670916\u4eba\ntrain_df.groupby(['gameKey', 'playID', 'view'])['label'].nunique().reset_index().query('label == 16')","9d6c7e26":"video('57680_002206_Endzone.mp4')","2ca2fe58":"train_df.groupby(['gameKey', 'playID', 'view'])['label'].nunique().reset_index().query('label == 24')","803ef423":"frame_bbox(train_df, '57997_003691_Sideline_4')\n#\u6807\u7a0b24\u4e2a\u6846\u7684\u5176\u4e2d\u4e00\u796f","602b6d54":"print(\"\u7403\u5458\u4eba\u6570\uff1a\",len(train_df.label.unique()))\ntrain_df.label.unique()","685bca2f":"train_df['isHome'] = train_df.label.str[0]\ntrain_df['num'] = train_df.label.str[1:].astype(int)\ntrain_df[['isHome', 'num']]","1113f651":"home_players = train_df.query('isHome == \"H\"').num.unique()\nvisitor_players = train_df.query('isHome == \"V\"').num.unique()\n\nhome_players.sort(), visitor_players.sort()\nhome_players, visitor_players","d371dac1":"print(\"\u4e3b\u961f\u4eba\u6570\uff1a\",len(home_players), \"\u5ba2\u961f\u4eba\u6570\uff1a\",len(visitor_players))\nprint(set(home_players) - set(visitor_players)) #\u4e3b\u573a\u624d\u6709\u7684\u80cc\u53f7\nprint(set(visitor_players) - set(home_players)) #\u5ba2\u573a\u624d\u6709\u7684\u80cc\u53f7","fcebce0d":"# \u6709\u8fb9\u7ebf\u7403\u5458\u88ab\u8bb0\u5f55\u7684\uff1f\nsideline_play = train_df.query('isSidelinePlayer == True').playID.unique()\nprint(\"playid:\",sideline_play,\"\u6570\u91cf\uff1a\",len(sideline_play))","35a0cc42":"# \u5305\u62ec\u8fb9\u7ebf\u7403\u5458\u7684\u6bd4\u8d5b\u4e2d\u6709\u591a\u5c11\u7403\u5458\uff1fisSidelinePlayer == 2\nsideline_df = train_df.groupby(['gameKey', 'playID', 'view'])['label', 'isSidelinePlayer'].nunique().query('isSidelinePlayer == 2')\nsideline_df.head(2)\n# sideline_df = train_df.groupby(['gameKey', 'playID', 'view'])['label', 'isSidelinePlayer'].nunique().query('isSidelinePlayer == 1')\n# sideline_df.head(2)\n","5f45a2d1":"# \u670925\u4e2aSideline\u770b\u5230\u8fb9\u7ebf\u7403\u5458\uff0c5\u4e2aEndzone\u770b\u5230\u8fb9\u7ebf\u7403\u5458\nsideline_df.reset_index().view.value_counts()","29648aa2":"sideline_df.label.value_counts()","3ab1be0c":"train_df['helmet_size'] = train_df.width * train_df.height\ntrain_df.helmet_size.hist();","3d815976":"# \u5934\u76d4\u6700\u591asize\u7684\u524d10\ntrain_df.helmet_size.value_counts()[:10]","d2860218":"# \u5934\u76d4\u6700\u5c11size\u7684\u524d10\u4e2a\ntrain_df.helmet_size.value_counts()[-10:]","910e8f37":"# \u6700\u5927\u5c3a\u5bf8\u7684\u5934\u76d4\uff0c\u6700\u5c0f\u5c3a\u5bf8\u7684\u5934\u76d4\ntrain_df.helmet_size.max(), train_df.helmet_size.min()","791d2b0b":"train_df.query('helmet_size == 5928')","6e856990":"get_frame_from_video('57686_002546_Endzone.mp4', 429)\nframe_bbox(train_df, '57686_002546_Endzone_429')","4b41c21a":"train_df.query('helmet_size == 9')","cb949e14":"frame_bbox(train_df, '57680_002206_Sideline_149')","2249e545":"# \u770b\u4e00\u4e0b\u51b2\u649e\u7684\u7c7b\u578b\ntrain_df.impactType.value_counts()","6f3edc9a":"# \u51b2\u649e\nimpact_index = train_df.query('impactType != \"None\"').index\nimpact_index","9ce89e22":"# \u51b3\u5b9a\u6027\u51b2\u649e\ndefinite_impact_index = train_df.query('isDefinitiveImpact == True').index\ndefinite_impact_index","43116e92":"# \u51b2\u649e\u4e0d\u662f\u51b3\u5b9a\u51b2\u649e\u7684\u5b50\u96c6\uff0c\u4f46\u662f\u51b3\u5b9a\u51b2\u649e\u662f\u51b2\u649e\u7684\u5b50\u96c6\nset(impact_index).issubset(set(definite_impact_index)), set(definite_impact_index).issubset(set(impact_index))","d1f10cff":"# isDefinitiveImpact == True \u7684\u51b2\u649e\u90fd\u7b97\u51b2\u649e\ntrain_df.query('isDefinitiveImpact == True').impactType.value_counts()","cfaf1387":"train_df.isDefinitiveImpact = train_df.isDefinitiveImpact.astype(int)\n# train_df.isDefinitiveImpact.head(5)\nprint(\"DefinitiveImpact\u7684\u53d1\u751f\u9891\u7387\uff1a\",train_df.isDefinitiveImpact.value_counts()[0]\/train_df.isDefinitiveImpact.value_counts()[1])\ntrain_df.isDefinitiveImpact.value_counts()\n","5ef7151d":"train_tracking_df.gameKey.nunique()","7a85f71c":"train_tracking_df.playID.nunique()","bd613b68":"# \u67e5\u770b\u796f\u6570\nframe_df = train_tracking_df.groupby(['gameKey', 'playID'])['time'].nunique().reset_index()\nprint(\"\u603b\u796f\u6570\uff1a\",frame_df.time.sum())\nprint(\"\u6700\u5927\u796f\u6570\uff1a\",frame_df.time.max(),\"\u6700\u5c0f\u796f\u6570\uff1a\",frame_df.time.min())\nframe_df.head(3)","671b5271":"# \u753b\u4e00\u4e0bframe\u7684\u56fe\nsns.displot(frame_df.time)","61766ef2":"# Dividing 22 is considering the total player number 22\nlen(train_tracking_df.query('event == \"ball_snap\"'))\/\/22","e845c130":"train_tracking_df.query('event == \"ball_snap\"').playID.value_counts() \/ 22","c7ecc708":"train_tracking_df.query('playID == 82 & event == \"ball_snap\"').head(1)","566796bf":"# We can see that the player is not moving while 15 seconds flow\ntrain_tracking_df.query('playID == 82 and snap_offset < 0 and player == \"H97\"')","ab53dd02":"#\u51e0\u4e4e\u6ca1\u6709\u79fb\u52a8\nbefore_snap_df = train_tracking_df.query('playID == 82 and snap_offset < 0 and player == \"H97\"')\nbefore_snap_df.s.min(), before_snap_df.s.max()","b7c26cdf":"sns.displot(before_snap_df.s);","2e77f577":"# \u5f00\u59cb\u79fb\u52a8\nafter_snap_df = train_tracking_df.query('playID == 82 and snap_offset > 0 and player == \"H97\"')\nafter_snap_df.s.min(), after_snap_df.s.max()","491f6ad4":"sns.displot(after_snap_df.s);","48780137":"train_tracking_df.groupby(['playID', 'time']).count()['player'].value_counts()","8bf8dcf8":"player_n_df = train_tracking_df.groupby(['playID', 'time']).count()['player'].reset_index()\nplayer_n_df.head(5)","1c9e4eaa":"player_n_df.query('player == 11')\n#\u627e\u5230\u53ea\u6709\u90a3\u4e2a\u65f6\u95f4\u70b9","fa61e034":"train_tracking_df.query('time == \"2018-10-29 02:22:44.099000+00:00\"')\n# \u7684\u786e\u662f11\u4e2a\u7403\u5458","9d984e8a":"# bbox\u7684\u4e2a\u6570\nlen(image_df)","c2d6b653":"# \u603b\u56fe\u7247\u6570\nimage_df.image.nunique()","4716471b":"# This feature doesn't seem useful to our competition\nimage_df.label.hist();","78b636a2":"image_df.groupby('image').count().head(5)","0a4069f2":"# remove \"frame\", \".jpg\" to compare with the whole frame\nimage_df.image = image_df.image.str.replace('frame', '')\nimage_df.image = image_df.image.str.replace('.jpg', '')\nimage_df.head(5)","d7812390":"## \u8f85\u52a9\u56fe\u7247\naux_images = image_df.image","9a7bca7f":"aux_games_set = set(aux_images.str.split('_').str[0])\ntrain_games_set = set(train_df.gameKey.astype(str))","6c7e8c04":"len(aux_games_set), len(train_games_set)","4441f615":"common_games = list(aux_games_set & train_games_set)\nprint(common_games)","30acc96a":"# 38 games matches between one play only games and common games\none_play_only = set([str(game) for game in play_per_game[1]])\nlen(set(common_games).intersection(one_play_only))","74787eac":"# 3 two play only games matches with common games\ntwo_play_only = set([str(game) for game in play_per_game[2]])\nlen(set(common_games).intersection(two_play_only))","494f47e0":"train_df.head(2)","7039c4e7":"aux_play_set = set(aux_images.str.replace('_\\d*$', ''))\ntrain_play_set = set(train_df.video_frame.str.replace('_\\d*$', ''))","ea59aaf9":"len(aux_play_set), len(train_play_set)","2c28c922":"aux_play_set & train_play_set","3fcf55a7":"aux_frame_set = set(aux_images)\ntrain_frame_set = set(train_df.video_frame)","737f7639":"len(aux_frame_set), len(train_frame_set)","bd52ac78":"# both are not subset for each other\naux_frame_set.issubset(train_frame_set), train_frame_set.issubset(aux_frame_set)","e83cda8f":"aux_frame_set & train_frame_set","af8272a4":"train_predict_df['video'] = train_predict_df.video_frame.str.replace('_\\d*$', '')\ntest_predict_df['video'] = test_predict_df.video_frame.str.replace('_\\d*$', '')","660acc1c":"train_predict_df.head(5)","4be52d46":"test_predict_df.head(5)","8014746f":"# prediction is for the train set that we are using\nset(train_predict_df.video.unique()) == set(train_df.video_frame.str.replace('_\\d*$', ''))","5fbdcd50":"set(test_predict_df.video.unique())","90260c13":"test_videos.sort()\ntest_videos","294ccf29":"# 82 bbox was predicted in max for 1 frame\ntrain_predict_df.groupby('video_frame').count()['left'].max()","9d247528":"# 2 bbox was predicted in max for 1 frame\ntrain_predict_df.groupby('video_frame').count()['left'].min()","c331603e":"# bbox number doesn't seem quite right\nsns.displot(train_predict_df.groupby('video_frame').count()['left']);","461341fc":"train_predict_df.groupby('video_frame').count().query('left == 82')","161b9480":"frame_bbox(train_predict_df, '58094_002819_Sideline_169')","29714cfe":"train_predict_df.groupby('video_frame').count().query('left == 2')","4a8adf9c":"frame_bbox(train_predict_df, '57584_000336_Sideline_454')","fc079b42":"# \u67e5\u770b\u7f6e\u4fe1\u5ea6\u4e0e\u6807\u6ce8\u7684\u5173\u7cfb\nfilter_df = train_predict_df.copy().query('conf > 0.75')\nfilter_df","a2d9a1f5":"filter_df = train_predict_df.copy().query('conf < 0.35')\nfilter_df","0a5e82e1":"How many bbox was predicted for 1 frame?","64241308":"# \u5206\u6790snap\u7684\u5f71\u54cd","d4ede46e":"# \u753b\u51fa\u56fe\u7247\u4e0a\u7684box","258e62b0":"# image_labels.csv\u5206\u6790","5a14df82":"# \u5bfc\u5165\u89c6\u9891\u89c2\u770b","6f9c8085":"# Train\/Test player tracking.csv\n# \u4e0d\u7528\u8003\u8651test_player_tracking.csv\u56e0\u4e3a\u8fd9\u662f\u9700\u8981submission\u7684","ce3f0e82":"# \u5bfc\u5165\u6570\u636e\u96c6","37f68fb7":"# \u6807\u7b7e\u4fe1\u606f\u662f\u5426\u603b\u662f\u6bcf\u65f6\u6bcf\u523b\u8ddf\u8e2a22\u540d\u7403\u5458\uff1f\n# \u5e76\u4e0d\u662f\uff0c\u5927\u90e8\u5206\u662f\u7684\uff0c\u4f46\u662f\u6709\u65f6\u5019\u4f1a\u5c11\u4e8e22\u4eba","28ab97e3":"# \u591a\u4e45\u53d1\u751f\u4e00\u6b21DefinitiveImpact","683ebd56":"How many plays match? Only 1 matches. 58000_001306. Besides image_labels.csv has lot's of various plays!","02f6e2c2":"# \u67e5\u770btrain_labels.csv\uff01\uff01","6b098d4f":"# Train \/ Test baseline helmets.csv\u5206\u6790","ecf84e3d":"How many frames match? Only 2 matches. image_labels.csv has mostly one image per play","d94adb4e":"# \u4ee5\u62bd\u89c6\u9891\u796f\u7684\u65b9\u5f0f\u6765\u5f97\u5230img","0d055232":"# \u5206\u6790\u4f20\u611f\u5668\u8d44\u6599\uff0c\u5339\u914d\u4e0a\u7403\u5458id\u4e0e\u901f\u5ea6\u7b49\u4fe1\u606f\uff0c\u5236\u4f5c\u52a8\u753b","5c0d8fe2":"# \u5206\u6790\u5934\u76d4\u5c3a\u5bf8","76695225":"How many games match?\n41\u573a\u6bd4\u8d5b\u3002\n38\u573a\u6bd4\u8d5b\u6709\u4e00\u573a\u6bd4\u8d5b\n3\u573a\u6bd4\u8d5b\u6709\u4e24\u573a\u6bd4\u8d5b","def96ffb":"# \u51b2\u649e\u7c7b\u578b\u5728\u6570\u636e\u4e2d\u7684\u5f71\u54cd"}}