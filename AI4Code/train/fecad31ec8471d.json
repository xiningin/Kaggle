{"cell_type":{"6635bcad":"code","b00379dd":"code","8452de98":"code","72936d53":"code","818102ae":"code","b6e51547":"code","9f3d02b7":"code","b37c6a0d":"code","e75e718d":"code","3d3f1cb3":"code","c13a6ae7":"code","2500da46":"code","3f7fad0c":"code","09c36701":"code","e5f43f78":"code","4636ea6a":"code","128a7383":"code","1c7a301d":"code","b1b56b02":"code","3a4f42a6":"code","388dd7a5":"code","eb494ef9":"markdown","45829390":"markdown","32eb4acc":"markdown","14ec8154":"markdown","c7fe6c6a":"markdown","9ea3bcb0":"markdown","8e87ae4a":"markdown","1f3a0e14":"markdown","7b05172a":"markdown","fc392297":"markdown","fbbb1b6f":"markdown"},"source":{"6635bcad":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nimport numpy as np \nimport pandas as pd \nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB,BernoulliNB\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\n\nfrom sklearn.metrics import accuracy_score,confusion_matrix,roc_auc_score,ConfusionMatrixDisplay,precision_score,recall_score,f1_score,classification_report,roc_curve,plot_roc_curve,auc,precision_recall_curve,plot_precision_recall_curve,average_precision_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\n\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder","b00379dd":"data=pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndata.head()","8452de98":"data.info()","72936d53":"data.isnull().sum()","818102ae":"import missingno as msno\nmsno.bar(data)\nplt.show()","b6e51547":"bmi_mean=data['bmi'].mean()\ndata['bmi']=data['bmi'].fillna(bmi_mean)","9f3d02b7":"data.isnull().sum()","b37c6a0d":"sns.set_theme(style='darkgrid')\nax=sns.countplot(data=data,x='stroke')","e75e718d":"df_cat=['gender','hypertension','heart_disease','ever_married','work_type','Residence_type','smoking_status', 'stroke']\nfig,axs=plt.subplots(4,2,figsize=(14,20))\naxs=axs.flatten()\nfor i, col_name in enumerate(df_cat):\n    sns.countplot(x=col_name, data=data, ax=axs[i], hue =data['stroke'], palette = 'flare')\n    plt.title(\"Bar chart of\")\n    axs[i].set_xlabel(f\"{col_name}\", weight = 'bold')\n    axs[i].set_ylabel('Count', weight='bold')","3d3f1cb3":"df_num = ['age', 'avg_glucose_level', 'bmi']\n\nfig, axs = plt.subplots(1, 3, figsize=(16,5))\naxs = axs.flatten()\n\n# iterate through each column in df_num and plot\nfor i, col_name in enumerate(df_num):\n    sns.boxplot(x=\"stroke\", y=col_name, data=data, ax=axs[i],  palette = 'Set1')\n    axs[i].set_xlabel(\"Stroke\", weight = 'bold')\n    axs[i].set_ylabel(f\"{col_name}\", weight='bold')","c13a6ae7":"bmi_outliers=data.loc[data['bmi']>50]\nbmi_outliers['bmi'].shape","2500da46":"data[\"bmi\"] = pd.to_numeric(data[\"bmi\"])\ndata[\"bmi\"] = data[\"bmi\"].apply(lambda x: 50 if x>50 else x)","3f7fad0c":"sns.boxplot(data=data,x=data[\"bmi\"],color='green')\nplt.title(\"Boxplot of BMI Distribution\");","09c36701":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\ndata['gender'] = le.fit_transform(data['gender'])\ndata['ever_married'] = le.fit_transform(data['ever_married'])\ndata['work_type'] = le.fit_transform(data['work_type'])\ndata['Residence_type'] = le.fit_transform(data['Residence_type'])\ndata['smoking_status'] = le.fit_transform(data['smoking_status'])\n\ndf_en = data\ndf_en.head()","e5f43f78":"corr = df_en.corr().round(2)\nplt.figure(figsize=(10,7))\nsns.heatmap(corr, annot = True, cmap = 'RdYlGn');","4636ea6a":"df_en = df_en.drop(['ever_married'], axis = 1)\ndf_en.head(3)","128a7383":"from sklearn.preprocessing import StandardScaler\ns = StandardScaler()\ncolumns = ['avg_glucose_level','bmi','age']\nstand_scaled = s.fit_transform(df_en[['avg_glucose_level','bmi','age']])\nstand_scaled = pd.DataFrame(stand_scaled,columns=columns)\n\ndf_en=df_en.drop(columns=columns,axis=1)\nstand_scaled.head()","1c7a301d":"df = pd.concat([df_en, stand_scaled], axis=1)\ndf.head(3)","b1b56b02":"x=df.drop(['stroke'], axis=1)\ny=df['stroke']\n# Models\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.cluster import KMeans\n\n# Evaluation\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state= 124)","3a4f42a6":"models = dict()\nmodels['Decision Tree'] = DecisionTreeClassifier()\nmodels['Logreg'] = LogisticRegression()\nmodels['Random Forest'] = RandomForestClassifier()\nmodels['Support Vector Machine'] = SVC(kernel = 'sigmoid', gamma='scale')\nmodels['kNN'] = KNeighborsClassifier()\nmodels['Naive Bayes'] = GaussianNB()\nmodels['KMeans'] = KMeans(n_clusters=2, n_init=10, random_state=42)\nfor model in models:\n    \n    models[model].fit(x_train, y_train)\n    print(model + \" model fitting completed.\")\n\nprint(\"Test Set Prediction:\\n\")\n\nfor x in models:\n\n    print('-'*20+x+'-'*20)\n    model = models[x]\n    y_pred = model.predict(x_test)\n    arg_test = {'y_true':y_test, 'y_pred':y_pred}\n    print(confusion_matrix(**arg_test))\n    print(classification_report(**arg_test))","388dd7a5":"df.head()","eb494ef9":"we can see 206 missing values in BMI","45829390":"Let's try to explore data first.","32eb4acc":"age: Subjects with stroke tends to have higher mean age.\n\navg glucose level: Subjects with stroke tends to have higher average glucose level.\n\nbmi: bmi index does not give much indication on the likelihood of experiencing stroke. bmi index for super obesity is 50. \n\nOutliers in this feature should be replaced to its highest limit (50).","14ec8154":"df = pd.concat([df_en, stand_scaled], axis=1)\ndf.head(3)","c7fe6c6a":"# fixing outliers","9ea3bcb0":"**Decision Tree Model:  0.9159\n\nLogreg Model:  0.955\n\nRandom Forest Model:  0.9543\n\nSupport Vector Machine Model:  0.9243\n\nkNN Model:  0.9524\n\nNaive Bayes Model:  0.8728\n\nKMeans Model:  0.2172**","8e87ae4a":"hypertension: Subjects that previously diagnosed with hypertension have highly risk of having stroke.\n\nheart disease: Subjects that previously diagnosed with heart disease have highly risk of having stroke.\n\never married: Subjects that ever married have highly risk of having stroke.\n\nwork type: Subjects that have any work experience and in government related work have highly risk of having stroke while those with no work experience barely experienced stroke.\n\nResidence type: No obvious relationship with likelihood of experiencing stroke.\n\nsmoking status: Being a smoker or former smoker increases risk of having a stroke.","1f3a0e14":"There are 79 outliers","7b05172a":"**Data is highly unbalanced.We will find a way to deal with it later.**","fc392297":"Null values imputed","fbbb1b6f":"**Let's look wheather data is balanced or not.**"}}