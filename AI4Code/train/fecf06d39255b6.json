{"cell_type":{"f59bfd11":"code","b34592cd":"code","7dfb0fc4":"code","e55f36ba":"code","529454d0":"code","c07d7905":"code","4803349f":"code","15d74196":"code","83ce9375":"code","21892b24":"markdown","1067ef79":"markdown","df3c832a":"markdown","b37f5511":"markdown","05d3959e":"markdown","5fbb45d2":"markdown","9734ce53":"markdown"},"source":{"f59bfd11":"# 1D Data\nimport numpy as np\nx = np.linspace(0, 10, 10)\ny = np.cos(x)\nz = np.sin(x)\n\n# 2D Data or Images\ndata = 2 * np.random.random((10, 10))\ndata2 = 3 * np.random.random((10, 10))\nY, X = np.mgrid[-3:3:100j, -3:3:100j]\nU = -1 - X**2 + Y\nV = 1 + X - Y**2\n","b34592cd":"import matplotlib.pyplot as plt\n\n# Figure\nfig = plt.figure()\nfig2 = plt.figure(figsize=plt.figaspect(2.0))\n\n# Axes\n# All plotting is done with respect to an Axes. In most cases, a\n# subplot will fit your needs. A subplot is an axes on a grid system.\nfig.add_axes()\nax = fig.add_subplot(221) # row-col-num\nax1 = fig.add_subplot(212)\nfig3, axes = plt.subplots(nrows=2,ncols=2)\nfig4, axes2 = plt.subplots(ncols=2)\n","7dfb0fc4":"# 1D Data\nlines = ax.plot(x,y) \t# Draw points with lines or markers connecting them\nax.scatter(x,y) \t# Draw unconnected points, scaled or colored\naxes[0,0].bar([1,2,3],[3,4,5]) \t# Plot vertical rectangles (constant width)\naxes[1,0].barh([0.5,1,2.5],[0,1,2]) \t# Plot horiontal rectangles (constant height)\naxes[1,1].axhline(0.45) \t# Draw a horizontal line across axes\naxes[0,1].axvline(0.65)\t# Draw a vertical line across axes\nax.fill(x,y,color='blue') \t# Draw filled polygons\nax.fill_between(x,y,color='yellow') \t# Fill between y-values and 0\n\n# Vector Fields\naxes[0,1].arrow(0,0,0.5,0.5) \t# Add an arrow to the axes\naxes[1,1].quiver(y,z) \t# Plot a 2D field of arrows\naxes[0,1].streamplot(X,Y,U,V) \t# Plot 2D vector fields\n\n# Data Distributions\nax1.hist(y) \t# Plot a histogram\nax1.boxplot(y) \t#Make a box and whisker plot\nax1.violinplot(z) \t#Make a violin plot\n\n# 2D Data or Images\nfig, ax = plt.subplots()\n# Colormapped or RGB arrays\ndelta = 0.025\nx = y = np.arange(-3.0, 3.0, delta)\nX, Y = np.meshgrid(x, y)\nZ1 = np.exp(-X**2 - Y**2)\nZ2 = np.exp(-(X - 1)**2 - (Y - 1)**2)\nZ = (Z1 - Z2) * 2\nim = ax.imshow(Z, cmap='gist_earth', interpolation='nearest', vmin=-2, vmax=2)\n\n\naxes2[0].pcolor(data2) \t# Pseudocolor plot of 2D array\naxes2[0].pcolormesh(data) \t# Pseudocolor plot of 2D array\naxes2[0].contourf(data) \t# Plot filled contours","e55f36ba":"# Colors, Color Bars & Color Maps\nplt.plot(x, x, x, x**2, x, x**3)\nax.plot(x, y, alpha = 0.4)\nax.plot(x, y, c='k')\nfig.colorbar(im, orientation='horizontal')\nim = ax.imshow(Z, cmap='seismic')\n\n# Markers\nfig, ax = plt.subplots()\nax.scatter(x,y,marker=\".\")\nax.plot(x,y,marker=\"o\")\n\n# Linestyles\nplt.plot(x,y,linewidth=4.0)\nplt.plot(x,y,ls='solid')\nplt.plot(x,y,ls='--')\nplt.plot(x,y,'--',x**2,y**2,'-.')\nplt.setp(lines,color='r',linewidth=4.0)\n\n# Text & Annotations\nax.text(1,  -2.1, 'Example Graph', style='italic')\nax.annotate(\"This is a plot, you don't say?\", xy=(8, 0),  xycoords='data', xytext=(10.5, 0),\n            textcoords='data', arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3\"),);\n","529454d0":"# Mathtext\nplt.title(r'$sigma_i=15$', fontsize=20)\n\n# Limits & Autoscaling\nax.margins(x=0.0,y=0.1) \t# Add padding to a plot\nax.axis('equal') \t#Set the aspect ratio of the plot to 1\nax.set(xlim=[0,10.5],ylim=[-1.5,1.5]) \t# Set limits for x-and y-axis\nax.set_xlim(0,10.5) \t# Set limits for x-axis\n","c07d7905":"# Legends\nax.set(title='An Example Axes', ylabel='Y-Axis', xlabel='X-Axis') \t# Set a title and x-and y-axis labels\nax.legend(loc='best') \t# No overlapping plot elements\n\n# Ticks\nax.xaxis.set(ticks=range(1,5), ticklabels=[3,100,-12,\"foo\"]) \t# Manually set x-ticks\nax.tick_params(axis='y', direction='inout', length=10) \t# Make y-ticks longer and go in and out\n\n# Subplot Spacing\n# Adjust the spacing between subplots\nfig3.subplots_adjust(wspace=0.5, hspace=0.3, left=0.125, right=0.9, top=0.9, bottom=0.1)\nfig.tight_layout() # Fit subplot(s) in to the figure area\n\n# Axis Spines\nax1.spines['top'].set_visible(False) \t# Make the top axis line for a plot invisible\nax1.spines['bottom'].set_position(('outward',10)) \t# Move the bottom axis line outward","4803349f":"# Save figures\nplt.savefig('foo.png')\n# Save transparent figures\nplt.savefig('foo.png', transparent=True)\n","15d74196":"plt.show()","83ce9375":"plt.cla() \t# Clear an axis\nplt.clf() \t# Clear the entire figure\nplt.close() # Close a window","21892b24":"## Save Plot","1067ef79":"## Customize Plot","df3c832a":"## Plotting Routines","b37f5511":"## Create Plot","05d3959e":"## Close & Clear","5fbb45d2":"## Show Plot","9734ce53":"## Prepare The Data"}}