{"cell_type":{"f0a0988e":"code","666d693a":"code","a5bf9f96":"code","14a002fb":"code","619177a7":"code","f9dbe55f":"code","4c7869ae":"code","f8043155":"code","55cf8a15":"code","b26d3101":"code","0bbb2b14":"code","1476700a":"code","0a4c09ab":"code","f25750b1":"code","92a9b154":"code","d20e0c07":"code","44f620cf":"code","5fb890d8":"code","36b942e7":"code","49c7546c":"code","9a278541":"code","8245dc7e":"code","389f712a":"code","4d04eadb":"code","04d92763":"code","0adec992":"code","6c952d2a":"code","27f9a9d1":"code","0854c9f8":"code","590fef45":"code","fec30c66":"code","0eca8796":"code","9fccb215":"code","661e1e8f":"code","bf7ecc10":"code","5fe3ac9b":"code","07d91018":"code","add0cf1d":"code","78a0123f":"code","2a0cd354":"code","6f72f4e8":"code","38163ddf":"code","8dcc95d3":"code","72d7456e":"code","c92f783f":"code","026dc8b3":"code","43e1b6b2":"code","6289fc7c":"code","e8e67a5a":"code","0ab1d7cb":"code","c673f684":"code","b8e8d784":"code","ef1347e8":"code","2e46a84b":"code","59fbeb13":"code","0d5cabc1":"code","64b43747":"code","48e94400":"code","5effb95a":"code","21b41d28":"code","f5ea0815":"code","36a7f459":"code","3a0fd27d":"code","0725bfe0":"code","a4074c6f":"code","df5fb764":"code","a759cfb5":"code","227083bd":"code","7eb9d941":"code","2becdc49":"code","bbfd25a3":"code","d3ec3179":"code","8fbc86bf":"code","af05447f":"markdown","ac550e35":"markdown","bc1770d9":"markdown","16d15011":"markdown","637cb120":"markdown","d573e115":"markdown","3e79e5ef":"markdown","87ee2a5a":"markdown","68e62bf2":"markdown","e413390a":"markdown","17ac31d6":"markdown","1923248f":"markdown","0afd99f8":"markdown","e9840b26":"markdown","dc879958":"markdown","635edbb4":"markdown","1e7e9bf3":"markdown"},"source":{"f0a0988e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport warnings\nimport pickle\nfrom sklearn.model_selection import train_test_split\n\n#Suppressing all warnings\nwarnings.filterwarnings(\"ignore\")","666d693a":"df=pd.read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\ndf.head()","a5bf9f96":"df.shape","14a002fb":"df.info()","619177a7":"df.describe()","f9dbe55f":"df.isnull().sum()","4c7869ae":"\ndf.DEATH_EVENT.value_counts()","f8043155":"plt.figure(figsize=(10,8))\nax=sns.countplot(df['DEATH_EVENT'], palette='OrRd')\nax.set_xticklabels(['Survived','Not Survived'])\nfor p in ax.patches:\n    ax.annotate('{:d}'.format(p.get_height()), (p.get_x()+0.40, p.get_height()+1))","55cf8a15":"sources_pie = go.Pie( values=df.DEATH_EVENT.value_counts())\n\n\nlayout = go.Layout(height = 600,\n                   width = 800,\n                   autosize = False,\n                   title = 'Death Event')\nfig = go.Figure(data = [sources_pie], layout = layout)\nfig.show()","b26d3101":"import plotly.express as px\nimport plotly.figure_factory as ff\nfig = px.histogram(df, x=\"age\")\nfig.show()","0bbb2b14":"\n\nsns.pairplot(df)","1476700a":"c=df.corr()","0a4c09ab":"f, ax = plt.subplots(figsize=(11, 11)) \nsns.heatmap(c,annot=True)","f25750b1":"df.columns","92a9b154":"X = df[['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes',\n       'ejection_fraction', 'high_blood_pressure', 'platelets',\n       'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']]\ny = df['DEATH_EVENT']","d20e0c07":"X.head()","44f620cf":"y.head()","5fb890d8":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=42)\nX_train.shape, X_test.shape","36b942e7":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score\nfrom sklearn.tree import plot_tree","49c7546c":"dt = DecisionTreeClassifier(max_depth=3)\ndt.fit(X_train, y_train)","9a278541":"#from IPython.display import Image  \n#from sklearn.externals.six import StringIO  \n#from sklearn.tree import export_graphviz\n#import pydotplus, graphviz","8245dc7e":"plt.figure(figsize=(60,30))\nplot_tree(dt, feature_names = X.columns,class_names=['Survived', \"Death\"],filled=True);","389f712a":"y_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)","4d04eadb":"print(\"Accuracy Score-Train: \",accuracy_score(y_train, y_train_pred))\nprint(\"Train ROC_AUC Score :\", roc_auc_score(y_train, y_train_pred))\nconfusion_matrix(y_train, y_train_pred)","04d92763":"print(\"Accuracy Score-Test: \",accuracy_score(y_test, y_test_pred))\nprint(\"Test ROC_AUC Score :\", roc_auc_score(y_test, y_test_pred))\nconfusion_matrix(y_test, y_test_pred)","0adec992":"#Helper Function","6c952d2a":"def get_dt_graph(dt_classifier):\n    plt.figure(figsize=(60,30))\n    plot_tree(dt_classifier, feature_names = X.columns,class_names=['Survived', \"Death\"],filled=True);","27f9a9d1":"def evaluate_model(dt_classifier):\n    print(\"Train Accuracy :\", accuracy_score(y_train, dt_classifier.predict(X_train)))\n    print(\"Train ROC_AUC Score :\", roc_auc_score(y_train, dt_classifier.predict(X_train)))\n    print(\"Train Confusion Matrix:\")\n    print(confusion_matrix(y_train, dt_classifier.predict(X_train)))\n    print(\"-\"*50)\n    print(\"Test Accuracy :\", accuracy_score(y_test, dt_classifier.predict(X_test)))\n    print(\"Train ROC_AUC Score :\", roc_auc_score(y_test, dt_classifier.predict(X_test)))\n    print(\"Test Confusion Matrix:\")\n    print(confusion_matrix(y_test, dt_classifier.predict(X_test)))","0854c9f8":"dt_default = DecisionTreeClassifier(random_state=42)\ndt_default.fit(X_train, y_train)","590fef45":"get_dt_graph(dt_default)\n","fec30c66":"evaluate_model(dt_default)","0eca8796":"dt_depth = DecisionTreeClassifier(max_depth=3)\ndt_depth.fit(X_train, y_train)","9fccb215":"get_dt_graph(dt_depth) \n","661e1e8f":"evaluate_model(dt_depth)","bf7ecc10":"dt_min_split = DecisionTreeClassifier(min_samples_split=20)\ndt_min_split.fit(X_train, y_train)","5fe3ac9b":"get_dt_graph(dt_min_split) \n","07d91018":"evaluate_model(dt_min_split)","add0cf1d":"dt_min_leaf = DecisionTreeClassifier(min_samples_leaf=20, random_state=42)\ndt_min_leaf.fit(X_train, y_train)","78a0123f":"get_dt_graph(dt_min_leaf)\n","2a0cd354":"evaluate_model(dt_min_leaf)","6f72f4e8":"dt_min_leaf_entropy = DecisionTreeClassifier(min_samples_leaf=20, random_state=42, criterion=\"entropy\")\ndt_min_leaf_entropy.fit(X_train, y_train)","38163ddf":"get_dt_graph(dt_min_leaf_entropy)\n","8dcc95d3":"evaluate_model(dt_min_leaf_entropy)","72d7456e":"dt = DecisionTreeClassifier(random_state=42)","c92f783f":"from sklearn.model_selection import GridSearchCV","026dc8b3":"params = {\n    'max_depth': [2, 3, 5, 10, 20],\n    'min_samples_leaf': [5, 10, 20, 50, 100],\n    'criterion': [\"gini\", \"entropy\"]\n}","43e1b6b2":"grid_search = GridSearchCV(estimator=dt, \n                           param_grid=params, \n                           cv=4, n_jobs=-1, verbose=1, scoring = \"roc_auc\")","6289fc7c":"%%time\ngrid_search.fit(X_train, y_train)","e8e67a5a":"score_df = pd.DataFrame(grid_search.cv_results_)\nscore_df.head()","0ab1d7cb":"score_df.nlargest(5,\"mean_test_score\")","c673f684":"grid_search.best_estimator_","b8e8d784":"dt_best = grid_search.best_estimator_\nevaluate_model(dt_best)","ef1347e8":"from sklearn.metrics import classification_report","2e46a84b":"print(classification_report(y_test, dt_best.predict(X_test)))","59fbeb13":"get_dt_graph(dt_best)\n","0d5cabc1":"from sklearn.ensemble import RandomForestClassifier","64b43747":"rf = RandomForestClassifier(random_state=42, n_estimators=10, max_depth=3)","48e94400":"rf.fit(X_train, y_train)","5effb95a":"rf.estimators_[0]","21b41d28":"sample_tree = rf.estimators_[4]","f5ea0815":"get_dt_graph(sample_tree)\n","36a7f459":"get_dt_graph(rf.estimators_[2])\n","3a0fd27d":"evaluate_model(rf)","0725bfe0":"classifier_rf = RandomForestClassifier(random_state=42, n_jobs=-1)","a4074c6f":"params = {\n    'max_depth': [1, 2, 5, 10, 20],\n    'min_samples_leaf': [5, 10, 20, 50, 100],\n    'max_features': [2,3,4],\n    'n_estimators': [10, 30, 50, 100, 200]\n}","df5fb764":"grid_search = GridSearchCV(estimator=classifier_rf, param_grid=params, \n                          cv=4, n_jobs=-1, verbose=1, scoring = \"roc_auc\")","a759cfb5":"%%time\ngrid_search.fit(X,y)","227083bd":"rf_best = grid_search.best_estimator_\nrf_best","7eb9d941":"evaluate_model(rf_best)","2becdc49":"rf_best.feature_importances_","bbfd25a3":"imp_df = pd.DataFrame({\n    \"Varname\": X_train.columns,\n    \"Imp\": rf_best.feature_importances_\n})","d3ec3179":"imp_df.sort_values(by=\"Imp\", ascending=False)","8fbc86bf":"#with open('HDClassifierRF.pkl','wb')as pickle_file:\n   # pickle.dump(rf_best,pickle_file)","af05447f":"# Understanding  Decision Tree and Random Forest using  heart disease patient data","ac550e35":"### Without setting any hyper-parameters","bc1770d9":"#### Here  survived are 203 and  not survived are  96","16d15011":"## Decision Tree","637cb120":"### Using Entropy instead of Gini","d573e115":"### EDA","3e79e5ef":"## Most of patients are from 50-70 age group","87ee2a5a":"### Hyper-parameter tuning","68e62bf2":"### Controlling the depth of the tree","e413390a":"### Reading and exploring dataset","17ac31d6":"### Specifying minimum samples before split","1923248f":"### Grid search for hyper-parameter tuning","0afd99f8":"### Checking for null values and imputing null values if exist","e9840b26":"### Variable importance in RandomForest and Decision trees","dc879958":"### Specifying minimum samples in leaf node","635edbb4":"#### Evaluating model performance","1e7e9bf3":"## Random Forest"}}