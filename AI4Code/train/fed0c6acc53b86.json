{"cell_type":{"555b8fe3":"code","48cfb81d":"code","1873e305":"code","73e10f89":"code","b0a558eb":"code","7fc40f20":"code","4c5fab8b":"code","3f888f74":"code","28b1dc89":"code","b1b5efe2":"code","f900c228":"code","ab25460d":"code","af34db75":"code","dec7bbc8":"code","199e97f8":"code","6f80e6f2":"code","a3697a71":"code","3b248681":"code","c35d570e":"code","e0108e56":"code","1471cc51":"code","f58540f5":"code","f03ebc13":"code","19361e3c":"code","d9f9a155":"code","7692afb5":"code","00ab26d4":"code","70a0d2d4":"code","a734def9":"code","93e30c50":"code","d8fda002":"code","1bcdeb67":"code","3fbe1a74":"code","05471744":"code","75e0dc9a":"code","3c83a9f4":"code","ceb2ddf2":"code","c066fb1f":"code","3047e7ed":"code","b99374c6":"code","0a407319":"code","fddc9693":"code","30c11eaf":"code","d94e1d23":"code","91fe02dc":"code","b34a6a13":"code","cf226888":"code","ef88d195":"code","5651f1cc":"code","cd1d631d":"code","0e840d8d":"code","34f74321":"code","4fcc1c1f":"code","b03f1eb5":"code","6caeb615":"code","0f1a0b02":"code","3f50b3a8":"code","423a7a8f":"code","fe764f18":"code","fac5ae55":"code","b0c6ea05":"code","292f7039":"code","848f99b2":"code","92f63888":"code","e5cc2dc0":"code","ec0dc924":"code","5bd1b0b8":"code","d14b98e8":"code","8e6cf358":"code","152e4100":"code","21df9f52":"code","93805998":"code","e7ecb200":"code","2c4b34d8":"code","931eb02d":"code","e0eff1d2":"code","049c8ca4":"code","6feb6bf0":"code","48292845":"code","c71a4f89":"code","6342a91b":"code","789373c3":"code","5d4532ed":"code","e58b79e7":"code","ec65050d":"code","1373326d":"code","be869d16":"code","b7142b05":"code","5ab62b2e":"code","80a2ee43":"code","cf0baefc":"code","11df9526":"code","0690d1b1":"code","27d676d4":"code","628e8408":"code","fb761a4e":"code","dc17228d":"code","46311dcc":"code","d1ea7e22":"code","750c9ed3":"code","897f536a":"code","8cab3338":"code","c7c628a0":"code","31188a33":"code","0d8268f2":"code","9076d565":"code","89514026":"code","0b70e05f":"code","f9ef3c64":"code","86bcc0cf":"code","380f6541":"code","f36e6ca0":"code","031fd2a9":"code","8796bcaa":"code","4766958c":"code","8300d55d":"code","8fd3b7ad":"code","4c575612":"code","f8f0aabf":"code","7034c944":"code","2e569cf8":"code","5d383779":"code","7e8fc152":"code","cf03101c":"code","d30191bc":"code","9158d380":"code","41680f97":"code","c3606069":"markdown","85b996c7":"markdown","7acd0cce":"markdown","5ee02a68":"markdown","07b500df":"markdown","0c76c684":"markdown","d8c350f5":"markdown","b7772710":"markdown","9af62e7f":"markdown","a66c2344":"markdown","2d4b150d":"markdown","d70cf08f":"markdown","982ce714":"markdown","c726579b":"markdown"},"source":{"555b8fe3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","48cfb81d":"#Bibliotecas neces\u00e1rias para an\u00e1lise\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\nfrom sklearn import linear_model\n\n\nimport scipy as sp\nfrom scipy.stats import norm\n\nfrom IPython.core.pylabtools import figsize\n\n\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import r2_score, make_scorer, mean_squared_error, mean_absolute_error, accuracy_score\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import LabelEncoder\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport plotly\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.offline as py\nplotly.offline.init_notebook_mode(connected=True)\nfrom plotly.offline import plot, iplot\n","1873e305":"dados = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx')","73e10f89":"dados.head(5)","b0a558eb":"dados.tail(5)","7fc40f20":"list(dados.columns.values)","4c5fab8b":"dados.shape","3f888f74":"print('No. de atributos categ\u00f3ricos: ', dados.select_dtypes(exclude = ['int64','float64']).columns.size)","28b1dc89":"print('No. de atributos num\u00e9ricos: ', dados.select_dtypes(exclude = ['object']).columns.size)","b1b5efe2":"plt.figure(figsize=(20,6))\nsns.heatmap(dados.select_dtypes(include=['object']).isnull(), yticklabels=False, cbar = False, cmap = 'viridis')\nplt.title('Valores Nulos presentes nas vari\u00e1veis Object',fontsize=18)\nplt.show()","f900c228":"dados.select_dtypes(include=['object'])","ab25460d":"dados['SARS-Cov-2 exam result'].unique()","af34db75":"dados.groupby(['SARS-Cov-2 exam result']).count()","dec7bbc8":"# 'SARS-Cov-2 exam result' #negativo 0 e positivo 1\n\ndef transforma(s):\n        if s == 'negative':\n            return 0\n        elif s == 'positive':\n            return 1\n        \ndados['SARS-Cov-2 exam result'] = dados['SARS-Cov-2 exam result'].apply(transforma)","199e97f8":"dados.dtypes","6f80e6f2":"dados = dados.fillna(0)  #Preencher os valores nulos com 0 ","a3697a71":"dados.isnull().sum().sort_values(ascending=False)","3b248681":"#Exclus\u00e3o de dados sem representatividade\n\ndados.drop('Mycoplasma pneumoniae', axis = 1, inplace=True)\ndados.drop('Fio2 (venous blood gas analysis)', axis = 1, inplace=True)\ndados.drop('Promyelocytes', axis = 1, inplace=True)\ndados.drop('Myeloblasts', axis = 1, inplace=True)\ndados.drop('Partial thromboplastin time\\xa0(PTT)\\xa0', axis = 1, inplace=True)\ndados.drop('Prothrombin time (PT), Activity', axis = 1, inplace=True)\ndados.drop('D-Dimer', axis = 1, inplace=True)\ndados.drop('Urine - Sugar', axis = 1, inplace=True)\n","c35d570e":"def transformacao(s):\n        if s == 'not_detected':\n            return 0\n        if s == 'None':\n            return 0\n        elif s == 'detected':\n            return 1\n        elif s == 'negative':\n            return 0\n        elif s == 'positive':\n            return 1\n        \n#DICION\u00c1RIO DE DADOS: # 0 not-detected, 1 detected\ndados['Respiratory Syncytial Virus'] = dados['Respiratory Syncytial Virus'].apply(transformacao)\ndados['Influenza A'] = dados['Influenza A'].apply(transformacao)\ndados['Influenza B'] = dados['Influenza B'].apply(transformacao)\ndados['Parainfluenza 1'] = dados['Parainfluenza 1'].apply(transformacao)\ndados['CoronavirusNL63'] = dados['CoronavirusNL63'].apply(transformacao)\ndados['Rhinovirus\/Enterovirus'] = dados['Rhinovirus\/Enterovirus'].apply(transformacao)\ndados['Coronavirus HKU1'] = dados['Coronavirus HKU1'].apply(transformacao)\ndados['Parainfluenza 3'] = dados['Parainfluenza 3'].apply(transformacao)\ndados['Chlamydophila pneumoniae'] = dados['Chlamydophila pneumoniae'].apply(transformacao)\ndados['Adenovirus'] = dados['Adenovirus'].apply(transformacao)\ndados['Parainfluenza 4'] = dados['Parainfluenza 4'].apply(transformacao)\ndados['Coronavirus229E'] = dados['Coronavirus229E'].apply(transformacao)\ndados['CoronavirusOC43'] = dados['CoronavirusOC43'].apply(transformacao)\ndados['Inf A H1N1 2009'] = dados['Inf A H1N1 2009'].apply(transformacao)\ndados['Bordetella pertussis'] = dados['Bordetella pertussis'].apply(transformacao)\ndados['Metapneumovirus'] = dados['Metapneumovirus'].apply(transformacao)\ndados['Parainfluenza 2'] = dados['Parainfluenza 2'].apply(transformacao)\n    \n    \n#DICION\u00c1RIO DE DADOS: # 0 negative, 1 positive    \ndados['Influenza B, rapid test'] = dados['Influenza B, rapid test'].apply(transformacao)\ndados['Influenza A, rapid test'] = dados['Influenza A, rapid test'].apply(transformacao)\n","e0108e56":"def transformacao_2(s):\n        if s == 'not_done':\n            return 0\n        if s == 'None':\n            return 0\n        elif s == 'absent':\n            return 1\n        elif s == 'present':\n            return 2\n        elif s == 'negative':\n            return 0\n        elif s == 'positive':\n            return 1\n        elif s == 'N\u00e3o Realizado':\n            return 0\n        \n#DICION\u00c1RIO DE DADOS: # 0 = not-done, 1 = absent, 2 = present\ndados['Urine - Hemoglobin'] = dados['Urine - Hemoglobin'].apply(transformacao_2)\ndados['Urine - Esterase'] = dados['Urine - Esterase'].apply(transformacao_2)\ndados['Urine - pH'] = dados['Urine - pH'].apply(transformacao_2)\n#dados['Urine - Hemoglobin'] = dados['Urine - Hemoglobin'].apply(transformacao_2)\ndados['Urine - Bile pigments'] = dados['Urine - Bile pigments'].apply(transformacao_2)\ndados['Urine - Ketone Bodies'] = dados['Urine - Ketone Bodies'].apply(transformacao_2)\ndados['Urine - Nitrite'] = dados['Urine - Nitrite'].apply(transformacao_2)\ndados['Urine - Protein'] = dados['Urine - Protein'].apply(transformacao_2)\ndados['Urine - Hyaline cylinders'] = dados['Urine - Hyaline cylinders'].apply(transformacao_2)\ndados['Urine - Granular cylinders'] = dados['Urine - Granular cylinders'].apply(transformacao_2)\ndados['Urine - Yeasts'] = dados['Urine - Yeasts'].apply(transformacao_2)\n\n\n#DICION\u00c1RIO DE DADOS: # 0 negative, 1 positive\ndados['Strepto A'] = dados['Strepto A'].apply(transformacao_2)  ","1471cc51":"def transformacao_3(s):\n        if s == 'clear':\n            return 1\n        elif s == 'cloudy':\n            return 2\n        elif s == 'altered_coloring':\n            return 3\n        elif s == 'lightly_cloudy':\n            return 4\n        elif s == 'light_yellow':\n            return 1\n        elif s == 'yellow':\n            return 2\n        elif s == 'orange':\n            return 3\n        elif s == 'citrus_yellow':\n            return 4\n        elif s == 'normal':\n            return 1\n        elif s == 'not_done':\n            return 0\n        elif s == 'Ausentes':\n            return 1\n        elif s == 'Urato Amorfo --+':\n            return 2\n        elif s == 'Oxalato de C\u00e1lcio +++':\n            return 3\n        elif s == 'Oxalato de C\u00e1lcio -++':\n            return 4\n        elif s == 'Urato Amorfo +++':\n            return 5\n        \n        \n        \n#DICION\u00c1RIO DE DADOS: # 1'clear', 2'cloudy', 3'altered_coloring', 4'lightly_cloudy'\ndados['Urine - Aspect'] = dados['Urine - Aspect'].apply(transformacao_3)      \n        \n#DICION\u00c1RIO DE DADOS: # 1'normal', 0'not_done'\ndados['Urine - Urobilinogen'] = dados['Urine - Urobilinogen'].apply(transformacao_3)  \n\n#DICION\u00c1RIO DE DADOS: # 1'Ausentes', 2'Urato Amorfo --+', 3'Oxalato de C\u00e1lcio +++',4'Oxalato de C\u00e1lcio -++', 5'Urato Amorfo +++'\ndados['Urine - Crystals'] = dados['Urine - Crystals'].apply(transformacao_3)  \n\n#DICION\u00c1RIO DE DADOS: # 1'light_yellow', 2'yellow', 3'orange', 4'citrus_yellow'\ndados['Urine - Color'] = dados['Urine - Color'].apply(transformacao_3)","f58540f5":"dados = dados.fillna(0)  #Preencher os valores nulos com 0 ","f03ebc13":"# Foi analisado cada resultado \u00fanicos apresentados nas vari\u00e1veis.\n\ndados['Respiratory Syncytial Virus'].unique()","19361e3c":"dados['Urine - Hemoglobin'].unique()\n","d9f9a155":"dados['Urine - Leukocytes'].unique()\n","7692afb5":"#Transformando Urine - Leukocytes de Object para Num\u00e9rico:\n\ndados['Urine - Leukocytes'] = pd.to_numeric(dados['Urine - Leukocytes'], errors='coerce')","00ab26d4":"dados.info()","70a0d2d4":"dados.select_dtypes(include=['object'])","a734def9":"dados['SARS-Cov-2 exam result'].value_counts()","93e30c50":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','Hematocrit', 'Platelets', 'Mean platelet volume ', 'Red blood Cells', 'Lymphocytes', 'Hemoglobin']\nsns.pairplot(dados[cols])\nplt.show()","d8fda002":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','Mean corpuscular hemoglobin concentration\\xa0(MCHC)', 'Leukocytes', 'Basophils', 'Mean corpuscular hemoglobin (MCH)', 'Eosinophils']\nsns.pairplot(dados[cols])\nplt.show()","1bcdeb67":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','Mean corpuscular volume (MCV)', 'Monocytes', 'Red blood cell distribution width (RDW)', 'Serum Glucose', 'Neutrophils']\nsns.pairplot(dados[cols])\nplt.show()","3fbe1a74":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','Urea', 'Proteina C reativa mg\/dL', 'Creatinine', 'Potassium', 'Sodium']\nsns.pairplot(dados[cols])\nplt.show()","05471744":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','Alanine transaminase', 'Aspartate transaminase', 'Gamma-glutamyltransferase\\xa0', 'Total Bilirubin', 'Direct Bilirubin']\nsns.pairplot(dados[cols])\nplt.show()","75e0dc9a":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','Indirect Bilirubin', 'Alkaline phosphatase', 'Ionized calcium\\xa0', 'Strepto A', 'Magnesium']\nsns.pairplot(dados[cols])\nplt.show()","3c83a9f4":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','pCO2 (venous blood gas analysis)', 'Hb saturation (venous blood gas analysis)', 'Base excess (venous blood gas analysis)', 'pO2 (venous blood gas analysis)', 'Total CO2 (venous blood gas analysis)']\nsns.pairplot(dados[cols])\nplt.show()","ceb2ddf2":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','pH (venous blood gas analysis)', 'HCO3 (venous blood gas analysis)', 'Rods #', 'Segmented', 'Metamyelocytes', 'Myelocytes']\nsns.pairplot(dados[cols])\nplt.show()","c066fb1f":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','Urine - Nitrite', 'Urine - Density', 'Urine - Urobilinogen', 'Urine - Protein', 'Urine - Leukocytes', 'Urine - Red blood cells']\nsns.pairplot(dados[cols])\nplt.show()","3047e7ed":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','Relationship (Patient\/Normal)', 'International normalized ratio (INR)', 'Lactic Dehydrogenase', 'Creatine phosphokinase\\xa0(CPK)\\xa0', 'Vitamin B12']\nsns.pairplot(dados[cols])\nplt.show()","b99374c6":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','Ferritin', 'Arterial Lactic Acid', 'Lipase dosage', 'Albumin', 'Hb saturation (arterial blood gases)']\nsns.pairplot(dados[cols])\nplt.show()","0a407319":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','pCO2 (arterial blood gas analysis)', 'Base excess (arterial blood gas analysis)', 'pH (arterial blood gas analysis)', 'Total CO2 (arterial blood gas analysis)', 'HCO3 (arterial blood gas analysis)']\nsns.pairplot(dados[cols])\nplt.show()","fddc9693":"sns.set_style('whitegrid')\ncols = ['SARS-Cov-2 exam result','pO2 (arterial blood gas analysis)', 'Arteiral Fio2', 'Phosphor', 'ctO2 (arterial blood gas analysis)']\nsns.pairplot(dados[cols])\nplt.show()","30c11eaf":"def bar_chart(feature):\n    positivo = dados[dados['SARS-Cov-2 exam result']==1][feature].value_counts()\n    negativo = dados[dados['SARS-Cov-2 exam result']==0][feature].value_counts()\n    df = pd.DataFrame([positivo,negativo])\n    df.index = ['positivo','negativo']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","d94e1d23":"bar_chart('Patient age quantile')","91fe02dc":"dados.groupby('SARS-Cov-2 exam result')[u'Patient age quantile'].value_counts()","b34a6a13":"add_regular = dados[dados['Patient addmited to regular ward (1=yes, 0=no)']==1]['SARS-Cov-2 exam result'].value_counts()\nadd_semi = dados[dados['Patient addmited to semi-intensive unit (1=yes, 0=no)']==1]['SARS-Cov-2 exam result'].value_counts()\nadd_intensive = dados[dados['Patient addmited to intensive care unit (1=yes, 0=no)']==1]['SARS-Cov-2 exam result'].value_counts()\ndf = pd.DataFrame([add_regular, add_semi, add_intensive])\ndf.index = ['Regular','Semi', 'Intensive']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","cf226888":"#bar_chart('Influenza A')\n\ninfluA = dados[dados['Influenza A']==1]['SARS-Cov-2 exam result'].value_counts()\ninfluB = dados[dados['Influenza B']==1]['SARS-Cov-2 exam result'].value_counts()\ndf = pd.DataFrame([influA, influB])\ndf.index = ['Influenza A','Influenza B']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","ef88d195":"bar_chart('Parainfluenza 1')","5651f1cc":"bar_chart('Parainfluenza 2')","cd1d631d":"bar_chart('Parainfluenza 3')","0e840d8d":"bar_chart('Parainfluenza 4')","34f74321":"bar_chart('Respiratory Syncytial Virus')","4fcc1c1f":"bar_chart('CoronavirusNL63')","b03f1eb5":"bar_chart('Coronavirus HKU1')","6caeb615":"bar_chart('Rhinovirus\/Enterovirus')","0f1a0b02":"bar_chart('Chlamydophila pneumoniae')","3f50b3a8":"bar_chart('Adenovirus')","423a7a8f":"bar_chart('Coronavirus229E')","fe764f18":"bar_chart('CoronavirusOC43')","fac5ae55":"bar_chart('Inf A H1N1 2009')","b0c6ea05":"bar_chart('Bordetella pertussis')","292f7039":"bar_chart('Metapneumovirus')","848f99b2":"bar_chart('Influenza B, rapid test')","92f63888":"bar_chart('Influenza A, rapid test')","e5cc2dc0":"bar_chart('Strepto A')","ec0dc924":"bar_chart('Urine - Hemoglobin')","5bd1b0b8":"bar_chart('Urine - Esterase')","d14b98e8":"bar_chart('Urine - pH')","8e6cf358":"bar_chart('Urine - Bile pigments')","152e4100":"bar_chart('Urine - Ketone Bodies')","21df9f52":"bar_chart('Urine - Nitrite')","93805998":"bar_chart('Urine - Protein')","e7ecb200":"bar_chart('Urine - Hyaline cylinders')","2c4b34d8":"bar_chart('Urine - Granular cylinders')","931eb02d":"bar_chart('Urine - Yeasts')","e0eff1d2":"bar_chart('Urine - Aspect')","049c8ca4":"bar_chart('Urine - Urobilinogen')","6feb6bf0":"bar_chart('Urine - Crystals')","48292845":"bar_chart('Urine - Color')","c71a4f89":"corr = dados.corr()\n\ndados_corr = corr[corr>=.8]\nplt.figure(figsize=(12,8))\nsns.heatmap(dados_corr, cmap=\"Greens\")","6342a91b":"dados_matrix = dados.corr().abs()\ndados_corr_var = np.where(dados_matrix>0.8)\ndados_corr_var=[(dados_matrix.columns[x],dados_matrix.columns[y]) for x,y in zip(*dados_corr_var) if x!=y and x<y]","789373c3":"list(dados_corr_var)","5d4532ed":"dados['SARS-Cov-2 exam result'].value_counts()","e58b79e7":"dados_exames_positivos = dados.loc[dados['SARS-Cov-2 exam result']==1]\ndados_exames_negativos = dados.loc[dados['SARS-Cov-2 exam result']==0]\ndados_exames_positivos.drop('Patient ID', axis = 1, inplace=True)\ndados_exames_negativos.drop('Patient ID', axis = 1, inplace=True)","ec65050d":"dados_exames_positivos.shape","1373326d":"dados_exames_negativos.shape","be869d16":"dados_exames_negativos","b7142b05":"dados_exames_negativos['Hemoglobin'].value_counts()","5ab62b2e":"dados_exames_negativos = dados_exames_negativos.loc[dados_exames_negativos['Hemoglobin'] !=0]","80a2ee43":"dados_exames_negativos['Hemoglobin'].value_counts()","cf0baefc":"dados_exames_negativos.shape","11df9526":"base = dados_exames_negativos.append(dados_exames_positivos, ignore_index=True, sort=False)","0690d1b1":"base.shape","27d676d4":"base","628e8408":"dados_modelo = base[['Influenza B','Respiratory Syncytial Virus',\n                      'CoronavirusNL63','Coronavirus HKU1','Rhinovirus\/Enterovirus','Chlamydophila pneumoniae','Adenovirus',\n                      'Coronavirus229E','CoronavirusOC43','Inf A H1N1 2009','Metapneumovirus','Influenza B, rapid test',\n                      'Influenza A, rapid test','Strepto A','Hemoglobin','Red blood Cells','Hematocrit','Platelets',\n                      'Patient age quantile','Basophils','Lymphocytes','Leukocytes','Hematocrit','SARS-Cov-2 exam result']]\n\ndados_modelo_outros = base[['Mean corpuscular hemoglobin (MCH)','Mean corpuscular volume (MCV)','Alanine transaminase',\n                           'Aspartate transaminase','Total Bilirubin','Direct Bilirubin','Indirect Bilirubin',\n                           'Hb saturation (venous blood gas analysis)','pO2 (venous blood gas analysis)','Base excess (venous blood gas analysis)',\n                           'Total CO2 (venous blood gas analysis)','HCO3 (venous blood gas analysis)','Urine - Esterase',\n                           'Urine - Hemoglobin','Urine - Ketone Bodies','Urine - Urobilinogen','Urine - Protein',\n                           'Urine - Hyaline cylinders','Urine - Granular cylinders','Urine - Yeasts','Urine - Color',\n                           'Urine - Aspect','Urine - Bile pigments','Urine - Crystals','Urine - Ketone Bodies','Urine - Protein',\n                           'pH (arterial blood gas analysis)','Total CO2 (arterial blood gas analysis)','HCO3 (arterial blood gas analysis)', 'SARS-Cov-2 exam result']]\n\n#Patient addmited to regular ward (1=yes, 0=no)','Patient addmited to semi-intensive unit (1=yes, 0=no)',\n#'Patient addmited to intensive care unit (1=yes, 0=no)',","fb761a4e":"dados_modelo","dc17228d":"X = dados_modelo.iloc[:, 1:-1].values    \ny = dados_modelo.iloc[:, -1].values","46311dcc":"X.shape","d1ea7e22":"y.shape","750c9ed3":"y","897f536a":"# Dividindo o dataset em treino e teste. \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 42)","8cab3338":"tree = DecisionTreeClassifier(max_leaf_nodes=38)\nmodel_tree = tree.fit(X_train, y_train)","c7c628a0":"resultado_tree = model_tree.predict(X_test)","31188a33":"mean_squared_error(y_test, resultado_tree)","0d8268f2":"model_tree.score(X_test, y_test)","9076d565":"print(\"Acur\u00e1cia para o Modelo Decision Tree: \",accuracy_score(resultado_tree,y_test), \"%\")","89514026":"#Iniciando o modelo de regress\u00e3o logistica\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)","0b70e05f":"y_train_pred_lg = model.predict(X_train)\ny_test_pred_lg = model.predict(X_test)","f9ef3c64":"#Apresentando a acur\u00e1cia do modelo, o quanto o modelo conseguiu aprender com os dados. \nprint(\"Acur\u00e1cia para o Modelo Regress\u00e3o Logistica: \",accuracy_score(y_train_pred_lg, y_train), \"%\")","86bcc0cf":"#Observando o valor de F1-Score, \u00e9 recomendado que o modelo seja avaliado por este n\u00famero pois ele \u00e9 o \n#balanceamento entre a precis\u00e3o e recall apresentados abaixo:  \nprint(classification_report(y_train, y_train_pred_lg))","380f6541":"#Observa-se a Matriz de Confus\u00e3o, valores previsto corretamente (Verdadeiro positivo), valores previsto incorretamente (Falso positivo), \n#valores que n\u00e3o estavamos buscando prever e foi prevista corretamente(Falso verdadeiro) e valores que n\u00e3o estavamos buscando prever foi prevista incorretamente (Falso negativo). \ncm = confusion_matrix(y_test_pred_lg, y_test)\nprint(cm)\nfig = plt.figure()\nax = fig.add_subplot(111)\ncax = ax.matshow(cm)\nplt.title('Matriz de Confus\u00e3o para a Classifica\u00e7\u00e3o')\nfig.colorbar(cax)\nax.set_xticklabels([''])\nax.set_yticklabels([''])\nplt.xlabel('Previsto')\nplt.ylabel('Atual')\nplt.show()","f36e6ca0":"#Importanto biblioteca do segundo modelo, a Gaussiana \u00e9 usada para classifica\u00e7\u00e0o e assume-se que segue uma disribui\u00e7\u00e3o normal\nfrom sklearn.naive_bayes import GaussianNB","031fd2a9":"#Executando modelo de predi\u00e7\u00e3o\nNB_sk = GaussianNB()\nNB_sk.fit(X_train, y_train)\nsk_pred = NB_sk.predict(X_test)","8796bcaa":"#Definindo uma fun\u00e7\u00e3o para calculo da acur\u00e1cia, com objetivo de apresentar visualmente em gr\u00e1ficos a dimens\u00e3o dos dados de 0 a 100000, \n#assim como a faixa de dados testes x previsto.\ndef accuracy(y_tes, y_pred):\n    correct = 0\n    for i in range(len(y_pred)):\n        if(y_tes[i] == y_pred[i]):\n            correct += 1\n            \n    #Quantidade de Acertos\n    return (correct\/len(y_tes))*100","4766958c":"print(\"Acur\u00e1cia para o Modelo Naive Bayes: \",accuracy_score(sk_pred, y_test), \"%\")","8300d55d":"def sigmoid(z):\n  '''\n  Retorna o sigm\u00f3ide, (conhecido como log das probabilidades), o sigmoide inverte o log e retorna o valor original das probabilidades.\n  '''\n  return 1 \/ (1 + np.exp(-z))\n\n\ndef predict(features, weights):\n  '''\n  Retorna uma matriz 1D de probabilidades de que o r\u00f3tulo da classe seja True \/ Yes \/ 1\n  O produto escalar dos recursos (Verdadeiro ou Falso) e theta \/ beta \/ pesos (B_k) fornecer\u00e1 o logit (p), que \u00e9 B0 + B1 Verdadeiro + B2 Falso\n  O sigm\u00f3ide inverte o logit para nos dar p, a probabilidade.\n  '''\n  return sigmoid( np.dot(features, weights) )","8fd3b7ad":"def cost_function_for_all_training_samples(features, labels, weights):\n  m = features.shape[0]  # m = n\u00famero de samples\n  predictions = predict(features, weights)\n  return -(1\/m) * np.sum( labels*np.log(predictions) + (1-labels)*np.log(1-predictions) )","4c575612":"def decision_boundary(probability, threshold=0.5):\n  return 1 if probability >= threshold else 0","f8f0aabf":"def calculate_gradient(features, labels, weights):\n    predictions = predict(features, weights)\n    matrixOfAggregateSlopeOfCostFunction = np.dot(features.T, predictions - labels)\n    return matrixOfAggregateSlopeOfCostFunction\n  \n\ndef update_weights(features, labels, weights, lr):\n\n    matrixOfAggregateSlopeOfCostFunction = calculate_gradient(features, labels, weights)\n\n    m = len(features)\n    averageCostDerivativeForEachFeature = matrixOfAggregateSlopeOfCostFunction \/ m\n\n    gradient = averageCostDerivativeForEachFeature * lr\n\n    return weights - gradient\n\n\ndef fit(features, labels, weights, lr, iterations):\n\n    for i in range(iterations):\n        weights = update_weights(features, labels, weights, lr)\n\n        # Processo Log\n        if i % 100 == 0:\n          cost = cost_function_for_all_training_samples(features, labels, weights)\n          print(\"iteration:\", str(i), \"cost:\", str(cost))\n\n    return weights\n  \n  \ndef classify(predictions):\n  '''\n  input - matriz de elementos N de previs\u00f5es entre 0 e 1\n  output - matriz do elemento N de 0s (False) e 1s (True)\n  '''\n  decide = np.vectorize(decision_boundary)\n  return decide(predictions).flatten()","7034c944":"initial_weights = [0] * X_train.shape[1]\nlr = 0.2\niterations = 3001\n\nweights = fit(X_train, y_train, initial_weights, lr, iterations)","2e569cf8":"#Resultado Final do Modelo - Gradient - Sigmoid\ny_test_probabilities = predict(X_test, weights).flatten()\ny_test_pred = classify(y_test_probabilities)\n\n#accuracy_score(y_test_pred, y_test)\n\nprint(\"Acur\u00e1cia para o Modelo Gradient Descent: \",accuracy_score(y_test_pred, y_test), \"%\")","5d383779":"#Regression scored 0.82 and the scikit learn one scored 0.84.\n#For 0, this was slightly more precise, but with worse recall and f1-score. For 1, this was less precise but had a better recall and f1-score.\n# Scikit was this:\n#                 precision    recall  f1-score   support\n#           0       0.88      0.93      0.90      4945\n#           1       0.72      0.60      0.65      1568\n\nprint(classification_report(y_test, y_test_pred))","7e8fc152":"cm = confusion_matrix(y_test_pred, y_test)\nprint(cm)\nfig = plt.figure()\nax = fig.add_subplot(111)\ncax = ax.matshow(cm)\nplt.title('Matriz de Confus\u00e3o para a Classifica\u00e7\u00e3o')\nfig.colorbar(cax)\nax.set_xticklabels([''])\nax.set_yticklabels([''])\nplt.xlabel('Predi\u00e7\u00e3o')\nplt.ylabel('Atual')\nplt.show()","cf03101c":"comparacao = pd.DataFrame(y_test, columns=[\"Ocorrido\"])\ncomparacao.insert(loc=1, column=\"Previsao\", value=resultado_tree)\ncomparacao.head(25)","d30191bc":"comparacao.tail(25)","9158d380":"plt.figure(figsize =(15,4))\nplt.plot(np.arange(len(y_train)), y_train, label = 'Treino')\nplt.plot(np.arange(len(y_train), (len(y_test)+len(y_train)), 1), y_test, label = 'Teste')\nplt.plot(np.arange(len(y_train), (len(resultado_tree)+len(y_train)), 1), resultado_tree, label = 'Previsto')\nplt.legend(loc = 'best')\nplt.title('Previsao: ' + str(accuracy(y_test, resultado_tree)) + '%')","41680f97":"plt.figure(figsize =(15,4))\nplt.plot(np.arange(len(y_train), (len(y_test)+len(y_train)), 1), y_test, label = 'Teste')\nplt.plot(np.arange(len(y_train), (len(resultado_tree)+len(y_train)), 1), resultado_tree, label = 'Previsto')\nplt.legend(loc = 'best')\nplt.title('Previsao: ' + str(accuracy(y_test, resultado_tree)) + '%')","c3606069":"# Utilizando Regress\u00e3o Logistica","85b996c7":"# Utilizando Fun\u00e7\u00e3o Sigmoid e de Custo para Probabilidades para compara\u00e7\u00e3o aos demais modelos","7acd0cce":"# Utilizando NaiveBayes","5ee02a68":"# Visualizando o resultado com a predi\u00e7\u00e3o do melhor \u00c1rvore de Decis\u00e3o","07b500df":"# # Cientista de Dados: Romulo Siqueira Santos\n# # Base de Dados: Hospital Israelita Albert Einstein","0c76c684":"# COM BASE NOS RESULTADOS DE EXAMES LABORATORIAIS COLETADOS PARA CASOS SUSPEITOS DE COVID-19 DURANTE VISITA \u00c0 SALA DE EMERG\u00caNCIA, SERIA POSSIVEL PREVER O RESULTADO DO TESTE (POSITIVO \/ NEGATIVO) ?****","d8c350f5":"# CORRELA\u00c7\u00d5ES E DEFINI\u00c7\u00c3O DAS VARI\u00c1VEIS IMPORTANTES PARA O MODELO","b7772710":"# EXPLORA\u00c7\u00c3O E VISUALIZA\u00c7\u00c3O SOBRE AS VARI\u00c1VEIS  ******","9af62e7f":"Resultados de exames positivo de SARS-Cov-2 em pacientes adimitidos em Regular, Semi e Intensive   ","a66c2344":"Conclus\u00e3o: \n    \nFoi utilizado modelos de aprendizado de m\u00e1quina para predi\u00e7\u00e3o sobre os dados de treino e teste,\nconforme a normalidade dos dados utilizou-se Regress\u00e3o Logistica, Gaussiana e Gradient para Classifica\u00e7\u00e3o e Decision Tree. \n    \nPrevisao: 89% com Modelo de \u00c1rvore de Decis\u00e3o - Decision Tree. \n\nH\u00e1 possibilidade de melhora da acur\u00e1cia e utiliza\u00e7\u00e3o de outros modelos, o qual ser\u00e1 realizado em outra release(vers\u00e3o). \n","2d4b150d":"# Utilizando \u00c1rvore de Decis\u00e3o","d70cf08f":"# **1. > 558 EXAMES DE SARS-COV-2 POSITIVOS> **","982ce714":"# EXPLORA\u00c7\u00c3O E NORMALIZA\u00c7\u00c3O DOS DADOS ****","c726579b":"# SEPARA\u00c7\u00c3O DOS DADOS (dados_modelo) PARA AS PREDI\u00c7\u00d5ES"}}