{"cell_type":{"0bee1cef":"code","62d23b36":"code","d383a858":"code","e5a226c7":"code","7d2bbe09":"code","f317ad64":"code","7245172c":"code","2866d125":"code","ddbd56e7":"code","38e4f5ae":"code","d0b89e01":"code","eb83e8a1":"code","7a823c3d":"code","59b90913":"code","90ee6783":"code","5824255d":"code","0b2c10c4":"code","f02b7fdb":"code","9cc6163d":"code","9712b3d1":"code","0f211210":"markdown","f08cc0bd":"markdown","64b2c65d":"markdown","858e443b":"markdown","09d81eb5":"markdown","aaf8eb9b":"markdown","6e73b32c":"markdown","032dbc17":"markdown","6a20b106":"markdown","8ee50ce7":"markdown","61415fa3":"markdown","2e5bc1af":"markdown","1e2575ca":"markdown","cc29546a":"markdown","0406a9e4":"markdown","88d439cc":"markdown","16d7ed80":"markdown","be665194":"markdown","a0eaf91c":"markdown","65be4bf2":"markdown","e8254ef7":"markdown","8b857448":"markdown","9d0e7fe3":"markdown","a102e4ea":"markdown"},"source":{"0bee1cef":"import itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import NullFormatter\nimport pandas as pd\nimport numpy as np\nimport matplotlib.ticker as ticker\nfrom sklearn import preprocessing\n%matplotlib inline","62d23b36":"df = pd.read_csv('..\/input\/teleCust1000t.csv')\ndf.head()","d383a858":"df[\"custcat\"].value_counts()","e5a226c7":"df1=df[\"custcat\"].value_counts()","7d2bbe09":"df.hist(column=\"custcat\", bins=50)","f317ad64":"df.columns","7245172c":"X = df[['region', 'tenure','age', 'marital', 'address', 'income', 'ed', 'employ','retire', 'gender', 'reside']] .values\nX[0:5]","2866d125":"y=df[\"custcat\"].values\ny[0:5]","ddbd56e7":"X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\nX[0:5]","38e4f5ae":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)\nprint ('Train set:', X_train.shape,  y_train.shape)\nprint ('Test set:', X_test.shape,  y_test.shape)","d0b89e01":"from sklearn.neighbors import KNeighborsClassifier","eb83e8a1":"k = 4\n#Train Model and Predict  \nneigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\nneigh","7a823c3d":"yhat = neigh.predict(X_test)\nyhat[0:5]","59b90913":"from sklearn import metrics\nprint(\"Train set Accuracy: \", metrics.accuracy_score(y_train, neigh.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(y_test, yhat))","90ee6783":"k1 = 6\n#Train Model and Predict  \nneigh1 = KNeighborsClassifier(n_neighbors = k1).fit(X_train,y_train)\nneigh1","5824255d":"yhat1 = neigh1.predict(X_test)\nyhat1[0:5]","0b2c10c4":"print(\"Train set Accuracy: \", metrics.accuracy_score(y_train, neigh1.predict(X_train)))\nprint(\"Test set Accuracy: \", metrics.accuracy_score(y_test, yhat1))","f02b7fdb":"Ks = 10\nmean_acc = np.zeros((Ks-1))\nstd_acc = np.zeros((Ks-1))\nConfustionMx = [];\nfor n in range(1,Ks):\n    \n    #Train Model and Predict  \n    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n    yhat=neigh.predict(X_test)\n    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n\n    \n    std_acc[n-1]=np.std(yhat==y_test)\/np.sqrt(yhat.shape[0])\n\nmean_acc","9cc6163d":"plt.plot(range(1,Ks),mean_acc,'g')\nplt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\nplt.legend(('Accuracy ', '+\/- 3xstd'))\nplt.ylabel('Accuracy ')\nplt.xlabel('Number of Nabors (K)')\nplt.tight_layout()\nplt.show()","9712b3d1":"print( \"The best accuracy was with\", mean_acc.max(), \"with k=\", mean_acc.argmax()+1) ","0f211210":"**Training**","f08cc0bd":"**About dataset**\n\nA telecommunications provider has segmented its customer base by service usage patterns, categorizing the customers into four groups. If demographic data can be used to predict group membership, the company can customize offers for individual prospective customers\n\nThe example focuses on using demographic data, such as region, age, and marital, to predict usage patterns.\n\nThe target field, called custcat, has four possible values that correspond to the four customer groups, as follows: \n**1- Basic Service** \n**2- E-Service**\n**3- Plus Service**\n**4- Total Service**\n\nOur objective is to build a classifier, to predict the class of unknown cases. We will use a specific type of classification called K nearest neighbour.","64b2c65d":"**Normalize Data**","858e443b":"**Load Data From CSV File**","09d81eb5":"Let\u2019s see how many of each class is in our data set","aaf8eb9b":"**Data Visualization and Anylisis**","6e73b32c":"**Searching the best K**","032dbc17":"Lets start the algorithm with k=4 for now:","6a20b106":" **We will load a customer dataset, fit the data, and use K-Nearest Neighbors to predict a data point**\n \n Our objective is to build a classifier, to predict the class of unknown cases. We will use a specific type of classification called K nearest neighbour.","8ee50ce7":"**Plot model accuracy for Different number of Neighbors**","61415fa3":"**Accuracy evaluation**","2e5bc1af":"**Predicting**","1e2575ca":"**Lets load requiered libraries**","cc29546a":"Lets defind feature sets, X:","0406a9e4":"Exploring Data using histograms","88d439cc":"To use scikit-learn library, we have to convert the Pandas data frame to a Numpy array:","16d7ed80":"Lets now try  with k1=6 :","be665194":"we can use the model to predict the test set:","a0eaf91c":"**Train Test Split**","65be4bf2":"**K nearest neighbor (K-NN)**","e8254ef7":"our lables","8b857448":"**Feature set**","9d0e7fe3":"We will use **accuracy classification score** function .\nhis function is equal to the jaccard_similarity_score function. Essentially, it calculates how match the actual labels and predicted labels are in the test set.","a102e4ea":"**Classification**"}}