{"cell_type":{"b0c2ac24":"code","ee0c2749":"code","f7a55415":"code","11118beb":"code","a0bc0eac":"code","b29b24a6":"code","74d4275d":"code","67a8c3b2":"code","dda4e733":"code","88e04df0":"code","04f13185":"code","7ada1ed2":"code","75d07115":"code","8c4dae42":"code","17824e79":"code","f45fc5f9":"markdown","1a387726":"markdown"},"source":{"b0c2ac24":"import matplotlib.pyplot as plt\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime, timedelta\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ee0c2749":"PATH = '\/kaggle\/input\/m5-forecasting-accuracy\/'\ncal = pd.read_csv(f'{PATH}calendar.csv')\n# sell_prices = pd.read_csv(f'{PATH}sell_prices.csv')\nss = pd.read_csv(f'{PATH}sample_submission.csv')\nstv = pd.read_csv(f'{PATH}sales_train_validation.csv')","f7a55415":"# We need to select only the last 28 days\nlast_28 = stv.iloc[:, pd.np.r_[0,-28:0]]\nlast_28.head()","11118beb":"# melt the days into the d column and the values into the demand cloumn\nlast = last_28.melt('id', var_name='d', value_name='demand')\nlast.head()","a0bc0eac":"# merge with calander to use the dates to aggregate\nlast = last.merge(cal)\nlast.head()","b29b24a6":"# get the demand for each product, grouped by weekday\nby_weekday = last.groupby(['id','wday'])['demand'].mean()","74d4275d":"# make a copy of the sample submission\nsub = ss.copy()\n# change the column names to match the last 28 days\nsub.columns = ['id'] + ['d_' + str(1914+x) for x in range(28)]\n# select only the rows with an id with the validation tag\nsub = sub.loc[sub.id.str.contains('validation')]","67a8c3b2":"# melt this dataframe and merge it with the calendar so we can join it with by_weekday dataframe\nsub = sub.melt('id', var_name='d', value_name='demand')\nsub = sub.merge(cal)[['id', 'd', 'wday']]\ndf = sub.join(by_weekday, on=['id', 'wday'])\ndf.head()","dda4e733":"# pivot df to get it into the proper format for submission\ndf = df.pivot(index='id', columns='d', values='demand')\n# need to reset index to take care of columns. comment next line out to see what i mean \ndf.reset_index(inplace=True)\ndf.head()","88e04df0":"\nsubmission = ss[['id']].copy()","04f13185":"submission = submission.merge(df)","7ada1ed2":"# we must copy the dataframe to match the format of the submission file which is twice as long as what we have\nsubmission = pd.concat([submission, submission], axis=0)","75d07115":"# reset the id colum to have the same values as the sample submission\nsubmission['id'] = ss.id.values","8c4dae42":"# rename the columns to match the sample submission format \nsubmission.columns = ['id'] + ['F' + str(i) for i in range(1,29)]\nsubmission.head()","17824e79":"submission.to_csv('submission.csv', index=False)","f45fc5f9":"I notice that I have the id column out of order. Therefore I will merge a copy of the submission file to df so that the items will be in the right order. I'm not sure if this is necessary.","1a387726":"# Simple model: Just using the last known 28 days, which should be the most useful since they happened most recently, we use the average demand, grouped by weekday. "}}