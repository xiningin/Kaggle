{"cell_type":{"f5961d7a":"code","b6fa9767":"code","173eeef7":"code","536a9c54":"code","587611d2":"code","d6c163c1":"code","1d8781ca":"code","bfa69472":"code","14b37f26":"code","6d05df35":"code","1072ffb2":"code","c457d8b5":"code","d2465aca":"code","545da800":"code","2fc7efc9":"code","b410c14c":"code","719dd10b":"code","23939681":"code","c90e96d9":"code","d65c9bda":"code","506d4f3f":"code","88c92c62":"code","3a3cdad5":"code","53db9d08":"code","6fab5a4c":"code","5244a47a":"code","599d4f09":"code","0eaa1370":"code","da46df23":"code","13cd8ed8":"code","4acdda89":"code","8706ebd0":"code","3494a406":"code","14586cba":"code","dffa76bc":"code","7b23dcae":"code","6c41f9b1":"code","6d5357ce":"code","67bc04b5":"code","993ab1d9":"code","a96ce11b":"code","f81ec4c9":"code","b2998cdb":"code","884c9213":"code","3b316836":"code","c521b578":"code","fe2b62f0":"code","fb706820":"code","af5c453b":"code","01912757":"code","7fd8ddde":"code","25fc8c14":"code","c5d95381":"code","61dc5e89":"code","efd2b911":"code","522da3a7":"code","efc9aa8e":"code","78a9ce37":"code","e43e51ac":"code","b3f7c396":"code","8bdcb1de":"code","c2f61225":"code","11f877a4":"code","f067686d":"code","30cca50f":"code","1efb8f6d":"code","fc7c8029":"code","38b112af":"code","7cbdde52":"code","cbc3d357":"code","c565817b":"code","67b55bf4":"code","d9d6e45d":"code","6ec27340":"code","f430ac6d":"code","2e8c8985":"code","299a4706":"code","1aeb5c31":"code","f711242f":"markdown","3beca794":"markdown","3a9f3e63":"markdown","e85e83b8":"markdown","f46cd229":"markdown","9bc7730c":"markdown","f1b6465b":"markdown","dad14816":"markdown","30264844":"markdown","a9cd2c3f":"markdown","b4089a0a":"markdown","77a3bfa7":"markdown","ce701764":"markdown","295e751f":"markdown","c39ca9c7":"markdown","66e0187b":"markdown","f20c6270":"markdown","f37b000f":"markdown","c6b2a2ff":"markdown","54456088":"markdown","6a1679fe":"markdown","b2ca45a1":"markdown","680da0cd":"markdown","fbc51ca2":"markdown","4558b5da":"markdown","6085fc04":"markdown","769b71db":"markdown","21002c72":"markdown","81132745":"markdown"},"source":{"f5961d7a":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nprint(os.listdir(\"..\/input\"))\n\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points\n%matplotlib inline","b6fa9767":"#pd.set_option('display.max_rows', 500)\n#pd.set_option('display.max_columns', 500)\n# Read files\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","173eeef7":"print(test.shape)\ntest.head()","536a9c54":"print(train.shape)\ntrain.head()","587611d2":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","d6c163c1":"sns.heatmap(test.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","1d8781ca":"#missing data percent plot\ntotal = train.isnull().sum().sort_values(ascending=False)\npercent = (train.isnull().sum()\/train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=('Total', 'Percent'))\nmissing_data.head(20)","bfa69472":"#missing data percent plot\ntotal = test.isnull().sum().sort_values(ascending=False)\npercent = (test.isnull().sum()\/test.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=('Total', 'Percent'))\nmissing_data.head(34)","14b37f26":"train['SalePrice'].describe()\nsns.distplot(train['SalePrice']);\n#skewness and kurtosis\nprint(\"Skewness: %f\" % train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % train['SalePrice'].kurt())","6d05df35":"from scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\n# Plot histogram and probability\nfig = plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\n\n\nsns.distplot(train['SalePrice'] , fit=norm);\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\nplt.subplot(1,2,2)\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.suptitle('Before transformation')\n\n\n# Apply transformation\ntrain.SalePrice = np.log1p(train.SalePrice )\n\n\n\n# Plot histogram and probability after transformation\nfig = plt.figure(figsize=(15,5))\nplt.subplot(1,2,1)\nsns.distplot(train['SalePrice'] , fit=norm);\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')\nplt.subplot(1,2,2)\nres = stats.probplot(train['SalePrice'], plot=plt)\nplt.suptitle('After transformation')","1072ffb2":"# train.SalePrice = np.log1p(train.SalePrice )\n\ny_train = train.SalePrice.values   # type(train.SalePrice.values) = numpy.ndarray\n\ny_train_orig = train.SalePrice  #y_train_orig is original sales Price","c457d8b5":"train.SalePrice.values","d2465aca":"train.SalePrice","545da800":"#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#Now drop the  'Id' columns since they are unnecessary for  the prediction process.\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)","2fc7efc9":"train.head(1)","b410c14c":"print(train.shape)\nprint(test.shape)","719dd10b":"# Dropping \"SalePrice\" before concating Test & Train so that we don't get NAN value after concat\n#train.drop(\"SalePrice\", axis = 1, inplace = True)","23939681":"print(train.shape)","c90e96d9":"# data_features is our combined feature after Conacating\n# It doesn't involve SalePrice Column\ndata_features = pd.concat((train, test)).reset_index(drop=True)\nprint(data_features.shape)","d65c9bda":"data_features.head()","506d4f3f":"data_features_na = data_features.isnull().sum()\ndata_features_na = data_features_na[data_features_na>0]\ndata_features_na.sort_values(ascending=False)","88c92c62":"#missing data percent plot\ntotal = data_features.isnull().sum().sort_values(ascending=False)\npercent = (data_features.isnull().sum()\/data_features.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=('Total', 'Percent'))\nmissing_data.head(35)","3a3cdad5":"# missing value more than 80% fill then with 'None' means that feature is no available\nfor col in ['PoolQC','MiscFeature','Alley','Fence']:\n    data_features[col] = data_features[col].fillna('None')\n  ","53db9d08":"# Filling GarageX Variables\nfor col in [ 'GarageCond','GarageQual','GarageFinish','GarageType']:\n    data_features[col] = data_features[col].fillna('None')","6fab5a4c":"# Filling BsmtX Variables\nfor col in ['BsmtCond','BsmtExposure','BsmtQual','BsmtFinType2','BsmtFinType1']:\n    data_features[col] = data_features[col].fillna('None')\n    ","5244a47a":"# FireplaceQu: Fireplace quality  NA\tNo Fireplace\ndata_features['FireplaceQu'] = data_features['FireplaceQu'].fillna('None')","599d4f09":"sns.heatmap(data_features.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","0eaa1370":"# data description says NA means typical\ndata_features['Functional'] = data_features['Functional'].fillna('Typ')","da46df23":"# Replacing missing data with 0 (Since No garage = no cars in such garage.)\nfor col in ('BsmtFinSF1','BsmtFinSF2','BsmtFullBath','BsmtHalfBath','BsmtUnfSF','TotalBsmtSF'):\n    data_features[col] = data_features[col].fillna(0)","13cd8ed8":"common_vars = ['Exterior1st','Exterior2nd','SaleType','KitchenQual']\nfor var in common_vars:\n    data_features[var] = data_features[var].fillna(data_features[var].mode()[0])","4acdda89":"data_features['MSZoning'] = data_features['MSZoning'].fillna(data_features['MSZoning'].mode())\ndata_features['Electrical'] = data_features['Electrical'].fillna(data_features['Electrical'].mode())","8706ebd0":"data_features['LotFrontage'] = data_features['LotFrontage'].fillna(data_features['LotFrontage'].mean())\n\n\ndata_features['MasVnrType'] = data_features['MasVnrType'].fillna(data_features['MasVnrType'].mode())\ndata_features['MasVnrType'] = data_features['MasVnrType'].fillna(data_features['MasVnrType'].mode())","3494a406":"data_features['GarageCars'] = data_features['GarageCars'].fillna(int(0))\ndata_features['GarageArea'] = data_features['GarageArea'].fillna(int(0))\ndata_features['GarageYrBlt'] = data_features['GarageYrBlt'].fillna(int(0))","14586cba":"data_features['Electrical'] = data_features['Electrical'].fillna(value='SBrkr')\ndata_features['Utilities'] = data_features['Utilities'].fillna(value='AllPub')\ndata_features['MSZoning'] = data_features['MSZoning'].fillna(value='RL')\ndata_features['MasVnrType'] = data_features['MasVnrType'].fillna(value='None')\ndata_features['MasVnrArea'] = data_features['MasVnrArea'].fillna(int(0))","dffa76bc":"\nsns.heatmap(data_features.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","7b23dcae":"# Differentiate numerical features (minus the target) and categorical features\n\ncategorical_features = data_features.select_dtypes(include=['object']).columns\nprint(categorical_features)\n      \nnumerical_features = data_features.select_dtypes(exclude = [\"object\"]).columns\nprint(numerical_features)\n\nprint(\"Numerical features : \" + str(len(numerical_features)))\nprint(\"Categorical features : \" + str(len(categorical_features)))\nfeat_num = data_features[numerical_features]\nfeat_cat = data_features[categorical_features]\n","6c41f9b1":"feat_num.head()","6d5357ce":"feat_cat.head()","67bc04b5":"# Plot skew value for each numerical value\nfrom scipy.stats import skew \nskewness = feat_num.apply(lambda x: skew(x))\nskewness.sort_values(ascending=False)","993ab1d9":"skewness = skewness[abs(skewness) > 0.5]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\nprint(\"Mean skewnees: {}\".format(np.mean(skewness)))","a96ce11b":"skewness.index","f81ec4c9":"from scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    feat_num[feat] = boxcox1p(feat_num[feat], lam)\n    data_features[feat] = boxcox1p(data_features[feat], lam)\n    \n    \nfrom scipy.stats import skew \nskewness.sort_values(ascending=False)","b2998cdb":"skewness = feat_num.apply(lambda x: skew(x))\nskewness = skewness[abs(skewness) > 0.5]\n\nprint(\"There are {} skewed numerical features after Box Cox transform\".format(skewness.shape[0]))\nprint(\"Mean skewnees: {}\".format(np.mean(skewness)))\nskewness.sort_values(ascending=False)","884c9213":"len(y_train)","3b316836":"print(train.shape)\nprint(test.shape)","c521b578":"train = data_features.iloc[:len(y_train), :]\ntest = data_features.iloc[len(y_train):, :]\nprint(['Train data shape: ',train.shape,'Prediction on (Sales price) shape: ', y_train.shape,'Test shape: ', test.shape])","fe2b62f0":"\npd.set_option('display.max_columns', 1000)  # or 1000\npd.set_option('display.max_rows', 1000)\ntrain.head(1)","fb706820":"test.head(1)","af5c453b":"cols = list(train.columns.values) #Make a list of all of the columns in the df\ncols.pop(cols.index('SalePrice')) #Remove b from list\n\ntrain = train[cols+['SalePrice']] #Create new dataframe with columns in the order you want","01912757":"#correlation matrix\ncorrmat = train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True,cmap=\"RdYlGn\")\nbottom,top = ax.get_ylim()\nax.set_ylim(bottom + 0.5,top - 0.5);","7fd8ddde":"#saleprice correlation matrix\nk = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(train[cols].values.T)\nsns.set(font_scale=1.25)\nf, ax = plt.subplots(figsize=(15, 9))\nhm = sns.heatmap(cm,cmap=\"RdYlGn\", cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nbottom,top = ax.get_ylim()\nax.set_ylim(bottom + 0.5,top - 0.5);","25fc8c14":"train.drop('GarageArea', axis = 1, inplace = True)","c5d95381":"train.drop('TotRmsAbvGrd', axis = 1, inplace = True)","61dc5e89":"data_features = pd.concat((train, test)).reset_index(drop=True)\nprint(data_features.shape)","efd2b911":"data_features = data_features.drop(\"SalePrice\", axis = 1)","522da3a7":"\nfinal_features = pd.get_dummies(data_features)","efc9aa8e":"\nfinal_features.shape","78a9ce37":"#There's a one line solution to the problem. This applies if some column names are duplicated and you wish to remove them:\n\n#df = df.loc[:,~df.columns.duplicated()]","e43e51ac":"\n\nprint(final_features.shape)\nX_train = final_features.iloc[:len(y_train), :]\nX_test = final_features.iloc[len(y_train):, :]\n#.shape, y_train.shape, X_test.shape\n\n\nprint(X_train.shape,y_train.shape,X_test.shape)","b3f7c396":"X_train.shape","8bdcb1de":"X_test= X_test.loc[:,~X_test.columns.duplicated()]","c2f61225":"X_test.shape","11f877a4":"y_train","f067686d":"import xgboost\nclassifier=xgboost.XGBRegressor()\nimport xgboost\nregressor=xgboost.XGBRegressor()","30cca50f":"booster=['gbtree','gblinear']\nbase_score=[0.25,0.5,0.75,1]","1efb8f6d":"\n\nn_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }","fc7c8029":"# Set up the random search with 4-fold cross validation\nfrom sklearn.model_selection import RandomizedSearchCV\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_absolute_error',n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)","38b112af":"random_cv.fit(X_train,y_train)","7cbdde52":"random_cv.best_estimator_","cbc3d357":"regressor=xgboost.XGBRegressor(base_score=0.25, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0,\n             importance_type='gain', learning_rate=0.1, max_delta_step=0,\n             max_depth=2, min_child_weight=1, missing=None, n_estimators=900,\n             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n             silent=None, subsample=1, verbosity=1)","c565817b":"regressor.fit(X_train,y_train)","67b55bf4":"X_test.shape","d9d6e45d":"y_pred=regressor.predict(X_test)\ny_pred","6ec27340":"y_pred_aftr  = np.expm1(y_pred)","f430ac6d":"y_pred_aftr ","2e8c8985":"##Create Sample Submission file and Submit using ANN\npred=pd.DataFrame(y_pred_aftr)\nsub_df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\ndatasets=pd.concat([sub_df['Id'],pred],axis=1)\ndatasets.columns=['Id','SalePrice']\ndatasets.to_csv('sample_submission10122.csv',index=False)","299a4706":"pred.shape","1aeb5c31":"sub_df=pd.read_csv('sample_submission10122.csv')\nsub_df.head()","f711242f":"- 'TotRmsAbvGrd' and 'GrLivArea', twin brothers again.\n\nGrLivArea: Above grade (ground) living area square feet\n\nTotRmsAbvGrd: Total rooms above grade (does not include bathrooms)","3beca794":"PoolQC\t0.996574            NA    No Pool\nMiscFeature \t0.964029    NA    None\nAlley\t0.932169            NA     No alley access\nFence \t0.804385            NA    No Fence","3a9f3e63":"## Dealing with missing values","e85e83b8":"## Concatenate train and test\n- Now , we are merging train and test datasets , so that we can handle 'noise' and missing data in the dataset .","f46cd229":"### Split the data\n","9bc7730c":"## Box cox transform for skewd numerical data\n- Another transformation to reduce skew.","f1b6465b":"for column in data_features.columns:\n    if (data_features[column].isnull().sum() > 0) :\n        print(column, end='------>')\n        print(type(data_features[column][0]))","dad14816":"## Visualising Missing Values in Percentage\n- We have 34 Column\/features that have some kind of missing values","30264844":"- 'GarageCars' and 'GarageArea' are also some of the most strongly correlated variables. However, as we discussed in the last sub-point, the number of cars that fit into the garage is a consequence of the garage area. 'GarageCars' and 'GarageArea' are like twin brothers. You'll never be able to distinguish them. Therefore, we just need one of these variables in our analysis (we can keep 'GarageCars' since its correlation with 'SalePrice' is higher).","a9cd2c3f":"## Visualising Missing Values Numerically","b4089a0a":"# Imputting missing values","77a3bfa7":"# Numerical and Categorial features\n- Splitting the data into categorial and numerical features","ce701764":"## The predicted variable - Sales price Skew & kurtosis analysis\nThe predicted variable is probably the most important variable, therefore it should be inspected throughly.\nIt turns out models work better with symmetric gaussian distributions, therefore we want to get rid of the skewness by using log transformation. More on log transformation later\n\nSkew:\nskew(X)=E[X\u2212\u03bc\u03c3]3","295e751f":"## New prediction\n-  New prediction values After Apllying the Tranformation (i.e train.SalePrice = np.log1p(train.SalePrice )","c39ca9c7":"## Tansforming:","66e0187b":"Fence: Fence quality\n\n       NA\tNo Fence\n\t\nMiscFeature: Miscellaneous feature not covered in other categories\n\n       NA\tNone\nAlley: Type of alley access to property\n\n       NA \tNo alley access\n       \n BsmtQual: Evaluates the height of the basement\n\n       NA\tNo Basement\n BsmtCond: Evaluates the general condition of the basement\n\n       NA\tNo Basement\n\t\nBsmtExposure: Refers to walkout or garden level walls\n\n       NA\tNo Basement\n\t\nBsmtFinType1: Rating of basement finished area\n\n       NA\tNo Basement\n\nBsmtFinType2: Rating of basement finished area (if multiple types)\n\n       NA\tNo Basement\nFireplaceQu: Fireplace quality\n\n       NA\tNo Fireplace\n\t\t\nGarageType: Garage location\n\n       NA\tNo Garage\nGarageFinish: Interior finish of the garage\n\n       NA\tNo Garage\nGarageQual: Garage quality\n\n       NA\tNo Garage\n\t\t\nGarageCond: Garage condition\n\n       NA\tNo Garage\nPoolQC: Pool quality\n\n       NA\tNo Pool","f20c6270":"## Deal with IDs\n-  Leaving out the ID column , as it doesn't add any information for our model.","f37b000f":"#### According to our crystal ball, these are the variables most correlated with 'SalePrice'. My thoughts on this:\n\n- 'OverallQual', 'GrLivArea' and 'GarageCars' are strongly correlated with 'SalePrice'. Check!\n\n- 'TotalBsmtSF' and '1stFloor' also seem to be twin brothers. We can keep 'TotalBsmtSF' just to say that our first guess was right (re-read 'So... What can we expect?').\n- 'FullBath'?? Really?\n\n- Ah... 'YearBuilt'... It seems that 'YearBuilt' is slightly correlated with 'SalePrice'. Honestly, it scares me to think about 'YearBuilt' because I start feeling that we should do a little bit of time-series analysis to get this right. I'll leave this as a homework for you.","c6b2a2ff":"GarageType: Garage location\n\n       NA\tNo Garage\nGarageFinish: Interior finish of the garage\n\n       NA\tNo Garage\nGarageQual: Garage quality\n\n       NA\tNo Garage\n\t\t\nGarageCond: Garage condition","54456088":"### Key Observations:-\n- 19 features have some kind of missing values in Train data set.\n- 33 features have some kind of missing values in Test data set.","6a1679fe":"## Check dtype in above missing Values","b2ca45a1":"# From EDA obvious outliers\ntrain = train[train.GrLivArea < 4500]\ntrain.reset_index(drop=True, inplace=True)\n\noutliers = [30, 88, 462, 631, 1322]\ntrain = train.drop(train.index[outliers]","680da0cd":"### All missing values are dealt with","fbc51ca2":"BsmtQual: Evaluates the height of the basement\n\n       NA\tNo Basement\n BsmtCond: Evaluates the general condition of the basement\n\n       NA\tNo Basement\n\t\nBsmtExposure: Refers to walkout or garden level walls\n\n       NA\tNo Basement\n\t\nBsmtFinType1: Rating of basement finished area\n\n       NA\tNo Basement\n\nBsmtFinType2: Rating of basement finished area (if multiple types)\n\n       NA\tNo Basement","4558b5da":"## Visualising missing Values in Train & Train using heatmap","6085fc04":"train_features = train.drop(['SalePrice'], axis=1)\ntest_features = test\nfeatures = pd.concat([train_features, test_features]).reset_index(drop=True)","769b71db":"## Dealing With Outliers","21002c72":"## Observing Sale price histogram","81132745":"- First Handle missing values for features where median\/mean\/mode doesn't make sense \n- Refer data.description for more information \n- Ctrl+F to find \"NA\"  --> what does it means\n- There are total 15 such features\neg Fence: \n\nFence quality\n\t\t\n       GdPrv\tGood Privacy\n       MnPrv\tMinimum Privacy\n       GdWo\tGood Wood\n       MnWw\tMinimum Wood\/Wire\n       NA\tNo Fence\n\t\nMiscFeature: Miscellaneous feature not covered in other categories\n\t\t\n       Elev\tElevator\n       Gar2\t2nd Garage (if not described in garage section)\n       Othr\tOther\n       Shed\tShed (over 100 SF)\n       TenC\tTennis Court\n       NA\tNone\nAlley: Type of alley access to property\n\n       Grvl\tGravel\n       Pave\tPaved\n       NA \tNo alley access\nBsmtQual: Evaluates the height of the basement\n\n       Ex\tExcellent (100+ inches)\t\n       Gd\tGood (90-99 inches)\n       TA\tTypical (80-89 inches)\n       Fa\tFair (70-79 inches)\n       Po\tPoor (<70 inches\n       NA\tNo Basement\n BsmtCond: Evaluates the general condition of the basement\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       NA\tNo Basement\n\t\nBsmtExposure: Refers to walkout or garden level walls\n\n       Gd\tGood Exposure\n       Av\tAverage Exposure (split levels or foyers typically score average or above)\t\n       Mn\tMimimum Exposure\n       No\tNo Exposure\n       NA\tNo Basement\n\t\nBsmtFinType1: Rating of basement finished area\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n\nBsmtFinType2: Rating of basement finished area (if multiple types)\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\nFireplaceQu: Fireplace quality\n\n       Ex\tExcellent - Exceptional Masonry Fireplace\n       Gd\tGood - Masonry Fireplace in main level\n       TA\tAverage - Prefabricated Fireplace in main living area or Masonry Fireplace in basement\n       Fa\tFair - Prefabricated Fireplace in basement\n       Po\tPoor - Ben Franklin Stove\n       NA\tNo Fireplace\n\t\t\nGarageType: Garage location\n\t\t\n       2Types\tMore than one type of garage\n       Attchd\tAttached to home\n       Basment\tBasement Garage\n       BuiltIn\tBuilt-In (Garage part of house - typically has room above garage)\n       CarPort\tCar Port\n       Detchd\tDetached from home\n       NA\tNo Garage\nGarageFinish: Interior finish of the garage\n\n       Fin\tFinished\n       RFn\tRough Finished\t\n       Unf\tUnfinished\n       NA\tNo Garage\nGarageQual: Garage quality\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\n\t\t\nGarageCond: Garage condition\n\n       Ex\tExcellent\n       Gd\tGood\n       TA\tTypical\/Average\n       Fa\tFair\n       Po\tPoor\n       NA\tNo Garage\nPoolQC: Pool quality\n\t\t\n       Ex\tExcellent\n       Gd\tGood\n       TA\tAverage\/Typical\n       Fa\tFair\n       NA\tNo Pool\n\t\nMiscFeature: Miscellaneous feature not covered in other categories\n\t\t\n       Elev\tElevator\n       Gar2\t2nd Garage (if not described in garage section)\n       Othr\tOther\n       Shed\tShed (over 100 SF)\n       TenC\tTennis Court\n       NA\tNone\n- \"NA\" means there no availabilty of the given feature \n- Ethier replace it with \"None or \"0\""}}