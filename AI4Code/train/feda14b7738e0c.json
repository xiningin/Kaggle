{"cell_type":{"2cabbb26":"code","cc98a0ff":"code","f31d872e":"code","f4e4ff25":"code","d0bf1286":"code","cbff368a":"code","78481b14":"code","e46832ee":"code","13a4a663":"code","1fd7b589":"code","d1be9eaa":"code","9e2290fe":"code","b3d2d78d":"code","fb612ff0":"code","ef666006":"code","021ddf96":"code","6a993ba7":"code","0bd8c72e":"code","bcc18e83":"code","dea55e77":"code","ee256966":"code","acd83792":"code","5430038e":"code","94d3e460":"code","877d007b":"code","7e27c9cd":"code","cf2dddc3":"code","9a78fc4b":"code","f8c6a604":"code","c94af9ab":"code","6e63114b":"code","dccc1cc6":"code","20160916":"code","25ecdd55":"code","5e1d9737":"code","f829a3a2":"code","abeeaf68":"code","264e49b2":"code","a1d50d0f":"code","ba80e2ec":"code","8f6223e8":"code","4accebe8":"code","6104a374":"code","751712ee":"code","04010cc5":"code","564085eb":"code","11c274b2":"code","f5ef4ae5":"code","81608499":"code","41d23206":"code","5785d722":"code","3124987a":"code","f9476bc5":"code","971bc687":"code","4db45b16":"code","44e2e11c":"code","d827fe1c":"code","e53d4036":"code","47ab1b11":"code","49414c8c":"code","32b39d8b":"code","07f8f517":"code","a93b39cf":"code","08911df1":"code","9704d4cd":"code","5580c1f2":"code","868a4fb8":"code","f9500763":"code","27b78dbf":"code","29cbc56f":"code","9b086045":"code","d40534cb":"code","c3fc7044":"code","28c0e137":"code","c786fb87":"code","5cd03ca7":"code","6271d8ff":"code","2d7af8fb":"code","53cef999":"code","dd35a7a5":"code","236f5ff8":"code","011f72ba":"code","e0a47f31":"code","b0b72f96":"code","f77e1ce2":"code","2886ceb8":"code","19b5f64a":"code","9d3db009":"code","0aeb2b1a":"code","80980dba":"code","7d4f13a0":"code","5f607d53":"code","4e0085c4":"code","433f4981":"code","5cb6c9f4":"code","e78d4b3b":"code","ed1819b9":"code","69e50e27":"code","dbc80235":"code","41cdfa8c":"code","79cf9a46":"code","90284de7":"code","180a8035":"code","8f769fd3":"code","310a0a5c":"code","911714c7":"code","7e027031":"code","92427d96":"code","12f76670":"code","8141d157":"markdown","a4dfbd28":"markdown","c77bbbf0":"markdown","f1dc8d40":"markdown","86c7eee2":"markdown","9fe4817d":"markdown","be7e23b9":"markdown","a3223729":"markdown","4ab7436d":"markdown","bf495c0f":"markdown","58402eb8":"markdown","2ee1ebd7":"markdown","b16f0ee2":"markdown","f0b4c08e":"markdown","bfeba07e":"markdown","c7eddc5a":"markdown","25d0f034":"markdown","31b7abc3":"markdown","eb4a25a5":"markdown","231466ca":"markdown","c7cdee0b":"markdown","0f9fd94b":"markdown","484ff9d6":"markdown","b5691a26":"markdown","89e4c8ca":"markdown","b8118c52":"markdown","d5329fb2":"markdown","939eeb78":"markdown","5a771e8d":"markdown","deb508a6":"markdown","1a868a7d":"markdown","d6adf08f":"markdown","4e2b6029":"markdown","cf13997e":"markdown","11efd050":"markdown","42612bb7":"markdown","c195f4e7":"markdown","e7ad1935":"markdown","85a9824a":"markdown","ab4c7627":"markdown","699a1a32":"markdown","a2786415":"markdown","4d44ced3":"markdown"},"source":{"2cabbb26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","cc98a0ff":"data_2015=pd.read_csv('..\/input\/2015.csv')\ndata_2016=pd.read_csv('..\/input\/2016.csv')\ndata_2017=pd.read_csv('..\/input\/2017.csv')\n","f31d872e":"data_2015.info()\nprint(\"****************************************\")\ndata_2016.info()\nprint(\"****************************************\")\ndata_2017.info()\n","f4e4ff25":"data_2015.corr()\n","d0bf1286":"data_2016.corr()\n","cbff368a":"data_2017.corr()\n","78481b14":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data_2015.corr(), annot=True, linewidths=.5, fmt= '.3f',ax=ax)\nplt.show()\n","e46832ee":"data_2015.head(3)\n\n","13a4a663":"data_2016.head(3)","1fd7b589":"data_2017.head(3)","d1be9eaa":"data_2015.columns\n\n\n","9e2290fe":"data_2016.columns\n","b3d2d78d":"data_2017.columns\n","fb612ff0":"data_2015.columns=[each.split()[0]+\"_\"+each.split()[1] if(len(each.split())>1) else each for each in data_2015.columns]\ndata_2016.columns=[each.split()[0]+\"_\"+each.split()[1] if(len(each.split())>1) else each for each in data_2016.columns]\ndata_2015.rename(columns = {\"Economy_(GDP\": \"Economy\",\"Health_(Life\": \"Health\",\"Trust_(Government\": \"Trust\"},inplace = True)\ndata_2016.rename(columns = {\"Economy_(GDP\": \"Economy\",\"Health_(Life\": \"Health\",\"Trust_(Government\": \"Trust\"},inplace = True)\ndata_2015.columns\n\n    \n    \n    ","ef666006":"data_2017.columns=[each.replace(\".\",\"_\") for each in data_2017.columns]\ndata_2017.columns","021ddf96":"### Line Plot\ndata_2015.Happiness_Score.plot(kind='line',color='y', label='Happiness Score 2015',linewidth=1.5,alpha=0.9,grid=True,linestyle='--')\ndata_2016.Happiness_Score.plot(kind='line',color='b', label='Happiness Score 2016',linewidth=1.5,alpha=0.9,grid=True,linestyle='--')\ndata_2017.Happiness_Score.plot(kind='line',color='g', label='Happiness Score 2017',linewidth=1.5,alpha=0.9,grid=True,linestyle='--')\nplt.legend(loc='upper right')\nplt.xlabel('Rank')\nplt.ylabel('Score')\nplt.title('Happiness Score Line Plot')\nplt.show()\n","6a993ba7":"# Scatter Plot \n# x = Economy, y = Happiness Score\ndata_2015.plot(kind='scatter', x='Economy', y='Happiness_Score',alpha = 0.5,color = 'orange')\ndata_2016.plot(kind='scatter', x='Economy', y='Happiness_Score',alpha = 0.5,color = 'black')\ndata_2017.plot(kind='scatter', x='Economy__GDP_per_Capita_', y='Happiness_Score',alpha = 0.5,color = 'purple')\nplt.xlabel('Economy')              # label = name of label\nplt.ylabel('Happiness Score')\nplt.title('Economy Happiness Scatter Plot')            # title = title of plot\nplt.show()","0bd8c72e":"# Histogram\n# bins = number of bar in figure\ndata_2015.Happiness_Score.plot(kind = 'hist',bins = 10,figsize = (10,10))\nplt.show()","bcc18e83":"#create dictionary and look its keys and values\ndictionary={'Name':'Murat', 'Height':'180','Weight':'70'}\nprint(dictionary.keys())\nprint(dictionary.values())","dea55e77":"dictionary['Name']=\"Ahmet\"        #update existing entry\nprint(dictionary)\ndictionary['Country']=\"Turkey\"    # add new entry\nprint(dictionary)\ndel dictionary['Weight']          #remove 'Weight'\nprint(dictionary)\nprint('Height' in dictionary)     #check include or not\ndictionary.clear()                #remove all \nprint(dictionary)\n","ee256966":"data=pd.read_csv('..\/input\/2015.csv')","acd83792":"series=data['Country']           #data['Country'] = series\nprint(type(series))\ndata_frame=data[['Country']]     #data[['Country']] = data frame\nprint(type(data_frame))","5430038e":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","94d3e460":"# 1- Filtering Pandas data frame \nmeanHappiness_Score2015=data_2015.Happiness_Score.mean()\nmeanHappiness_Score2016=data_2016.Happiness_Score.mean()\nmeanHappiness_Score2017=data_2017.Happiness_Score.mean()\n\nx=data_2015['Happiness_Score']>meanHappiness_Score2015*1.33\ndata_2015[x]\n","877d007b":"# 2- Filtering pandas with logical\ndata_2016[(data_2016['Happiness_Score']>meanHappiness_Score2016) & (data_2016.Economy.mean()>data_2016['Economy'])]\n### or\n#data_2016[np.logical_and(data_2016['Happiness_Score']>meanHappiness_Score2016), (data_2016.Economy.mean()>data_2016['Economy'])]","7e27c9cd":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5')","cf2dddc3":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index,value in data[['Country']][0:1].iterrows():\n    print(index,\" : \",value)","9a78fc4b":"# example of what we learn above\ndef tuble_ex():\n    \"\"\" return defined t tuble\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","f8c6a604":"# guess print what\nx = 2\ndef f():\n    x = 3\n    return x\nprint(x)      # x = 2 global scope\nprint(f())    # x = 3 local scope","c94af9ab":"# What if there is no local scope\nx = 5\ndef f():\n    y = 2*x        # there is no local scope x\n    return y\nprint(f())         # it uses global scope x\n# First local scopesearched, then global scope searched, if two of them cannot be found lastly built in scope searched.","6e63114b":"#nested function\ndef ort():\n    \"\"\" return square of value \"\"\"\n    def topla():\n        \"\"\" add two local variable \"\"\"\n        vize = 20\n        final = 80\n        topl = vize + final\n        return topl\n    return topla()\/2\nprint(ort())    ","dccc1cc6":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))","20160916":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,\"murat\",\"ali\")\n\n\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","25ecdd55":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\n\n#long way\ndef Square(x):\n    return x**2\nprint(Square(5))\n","5e1d9737":"tot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))\n\n#long way\n\ndef Tot(x,y,z):\n    return x+y+z\nprint(Tot(1,5,9))","f829a3a2":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","abeeaf68":"# iteration example\nname = \"murat\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(next(it))\nprint(*it)         # print remaining iteration\n\n#population=985614\n#it2=iter(population)\n#print(next(it2))\n#print(*it2)\n\n#'int' object is not iterable\n\n","264e49b2":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i**2 for i in num1 ]\nprint(num2)","a1d50d0f":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","ba80e2ec":"threshold=sum(data_2015.Happiness_Score)\/len(data_2015.Happiness_Score)\ndata_2015[\"Happiness_Level\"]=[\"high\" if i > threshold else \"low\" for i in data_2015.Happiness_Score]\ndata_2015.loc[:5,[\"Happiness_Level\",\"Happiness_Score\"]]\n\n","8f6223e8":"data=pd.read_csv('..\/input\/2015.csv')\ndata.head()","4accebe8":"data.tail()","6104a374":"data.columns","751712ee":"data.shape","04010cc5":"data.info()","564085eb":"print(data['Region'].value_counts(dropna =False))  # if there are nan values that also be counted","11c274b2":"data.describe()","f5ef4ae5":"# Black line at top is max\n# Blue line at top is 75%\n# Red line is median (50%)\n# Blue line at bottom is 25%\n# Black line at bottom is min\n# There are no outliers\ndata.boxplot(column='Happiness Score',by = 'Region',rot=90, fontsize=8)","81608499":"data_new=data.head()\ndata_new","41d23206":"# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted=pd.melt(frame=data_new,id_vars='Country',value_vars=['Happiness Score','Freedom'])\nmelted","5785d722":"# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\nmelted.pivot(index = 'Country', columns = 'variable',values='value')","3124987a":" # Firstly lets create 2 data frame\ndata1=data.head()\ndata2=data.tail()\nconc_data_row=pd.concat([data1,data2],axis=0,ignore_index=True)  # axis = 0 : adds dataframes in row\nconc_data_row\n","f9476bc5":"data11=data['Generosity'].head()\ndata22=data['Freedom'].head()\nconc_data_col=pd.concat([data11,data22],axis=1)\nconc_data_col","971bc687":"data.dtypes","4db45b16":"data['Happiness Rank']=data['Happiness Rank'].astype('float')\ndata['Region']=data['Region'].astype('category')","44e2e11c":"data.dtypes\n","d827fe1c":"#data frames from dictionary\nname=[\"murat\",\"volkan\",\"sedat\"]\nprovince=[\"kocaeli\",\"erzurum\",\"ankara\"]\nlist_label=[\"name\",\"province\"]\nlist_col=[name,province]\nzipped=list(zip(list_label,list_col))\ndata_dict=dict(zipped)\ndf=pd.DataFrame(data_dict)\ndf","e53d4036":"#add new columns\ndf[\"age\"]=[21,28,32]\ndf","47ab1b11":"#broadcasting\ndf[\"height\"]=180\ndf","49414c8c":"# Plotting all data \ndata1=data.loc[:,[\"Family\",\"Freedom\",\"Generosity\"]]\ndata1.plot()\n# it is confusing","32b39d8b":"#subplots\ndata1.plot(subplots=True)\nplt.show()","07f8f517":"#scatter plot\ndata1.plot(kind=\"scatter\",x=\"Freedom\",y=\"Generosity\")\nplt.show()","a93b39cf":"#hist plot\ndata1.plot(kind=\"hist\",y=\"Freedom\",bins=50,range=(0,1),normed=True)\nplt.show()\n","08911df1":"#histogram subplot with non cumulative and cumulative\nfig,axes=plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind=\"hist\",y=\"Freedom\",bins=50,range=(0,1),ax=axes[0])\ndata1.plot(kind=\"hist\",y=\"Freedom\",bins=50,range=(0,0.8),ax=axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","9704d4cd":"data.describe()","5580c1f2":"data.Region.unique()\n\n\n","868a4fb8":"data.Region.value_counts()","f9500763":"time_list=[\"1997-08-12\",\"2019-01-21\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object=pd.to_datetime(time_list)\nprint(type(datetime_object))\n","27b78dbf":"### close warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\ndata2=data.head()\ndate_list=[\"1997-01-02\",\"1997-08-12\",\"1997-07-19\",\"2008-07-12\",\"2012-10-23\"]\ndatetime_object=pd.to_datetime(date_list)\ndata2[\"date\"]=datetime_object\n# lets make date as index\ndata2=data2.set_index(\"date\")\ndata2","29cbc56f":"# now we can select according to our date index\nprint(data2.loc[\"1997-01-02\"])\nprint(data2.loc[\"1997-01-01\":\"2010-05-23\"])","9b086045":"# we will use data2 that we create at previous part\ndata2.resample(\"A\").mean()","d40534cb":"# lets resample with month\ndata2.resample(\"M\").mean()","c3fc7044":"# In real life (data is real. Not created from us like data2) we can solve this problem with interpolate\n# We can interpolete from first value\ndata2.resample(\"M\").first().interpolate(\"linear\")","28c0e137":"data2.resample(\"M\").mean().interpolate(\"linear\")","c786fb87":"data_t=pd.read_csv('..\/input\/2015.csv')\ndata_t=data_t.set_index(\"Happiness Rank\")\ndata_t.head()","5cd03ca7":"#indexing using square brackets\ndata_t[\"Family\"][4]","6271d8ff":"# using columns attribute and row label\ndata_t.Family[4]","2d7af8fb":"#using loc accessor\ndata_t.loc[1,[\"Family\"]]","53cef999":"# selecting only some columns\ndata_t[[\"Family\",\"Freedom\"]]","dd35a7a5":"# difference between selecting columns: series and dataframes\nprint(type(data_t[\"Family\"])) #series\nprint(type(data_t[[\"Family\"]])) #data frames","236f5ff8":"# slicing and indexing series\ndata.loc[1:9,\"Happiness Rank\":\"Family\"]","011f72ba":"#reverse slicing\ndata.loc[10:1:-1,\"Happiness Rank\":\"Family\"]","e0a47f31":"data.loc[1:10,\"Standard Error\":]","b0b72f96":"boolean=data.Family>1.31\ndata[boolean]","f77e1ce2":"#combining filters\nfirst_filter=data.Family>1.31\nsecond_filter=data.Freedom>0.64\ndata[first_filter&second_filter]","2886ceb8":"#filtering column based others\ndata.Region[data.Generosity<0.1]","19b5f64a":"# plain python functions\ndef div(n):\n    return n*10\ndata.Generosity.apply(div)","9d3db009":"# or we can use lambda function\ndata.Generosity.apply(lambda n:n*10)","0aeb2b1a":"data[\"my_rank\"]=data.Freedom+data.Family+data.Generosity\ndata=data.set_index(\"my_rank\")\ndata.head()","80980dba":"#our index name is this:\nprint(data.index.name)\n#lets change it\ndata.index.name=\"index_name\"\ndata.head()","7d4f13a0":"#overwrite index\n#if we want to modify index we need to change all of them\ndata.head()\n#first copy of our data to data3 then change index\ndata3=data.copy()\n# lets make index start from 100. it is not remarkable change but it is just example\ndata3.index=range(100,258,1)\ndata3.head()","5f607d53":"data4=pd.read_csv('..\/input\/2015.csv')\ndata4.head()","4e0085c4":"data5=data4.set_index([\"Region\",\"Family\"])\ndata5.head(30)","433f4981":"dic={\"lesson\":[\"Math\",\"Math\",\"Phy\",\"Phy\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"vize\":[\"55\",\"40\",\"70\",\"40\"],\"final\":[\"60\",\"70\",\"60\",\"80\"]}\ndf=pd.DataFrame(dic)\ndf","5cb6c9f4":"#pivoting\ndf.pivot(index=\"lesson\",columns=\"gender\",values=\"final\")","e78d4b3b":"df1=df.set_index([\"lesson\",\"gender\"])\ndf1\n#lets unstack it","ed1819b9":"#level determines indexes\ndf1.unstack(level=0)\n","69e50e27":"df1.unstack(level=1)","dbc80235":"#change inner and outer level index position\ndf2=df1.swaplevel(0,1)\ndf2","41cdfa8c":"df","79cf9a46":"#df.pivot(index=\"lesson\",columns=\"gender\",values=\"final\")\npd.melt(df,id_vars=\"lesson\",value_vars=[\"vize\",\"final\"])","90284de7":"dic={\"lesson\":[\"Math\",\"Math\",\"Phy\",\"Phy\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"vize\":[55,40,70,40],\"final\":[60,70,60,80]}\ndf3=pd.DataFrame(dic)\ndf3","180a8035":"df3.groupby(\"lesson\").mean()","8f769fd3":"df3.groupby(\"lesson\").vize.max()","310a0a5c":"df3.groupby(\"lesson\")[[\"vize\",\"final\"]].min()","911714c7":"df3.info()","7e027031":"WestEU=data_2015[data_2015.Region==\"Western Europe\"]\nmean_WestEU=WestEU.Happiness_Score.mean()\nNorthA=data_2015[data_2015.Region==\"North America\"]\nmean_NorthA=NorthA.Happiness_Score.mean()\nAust=data_2015[data_2015.Region==\"Australia and New Zealand\"]\nmean_Aust=Aust.Happiness_Score.mean()\nMiddAfrica=data_2015[data_2015.Region==\"Middle East and Northern Africa\"]\nmean_MiddAfrica=MiddAfrica.Happiness_Score.mean()\nLatin=data_2015[data_2015.Region==\"Latin America and Caribbean\"]\nmean_Latin=Latin.Happiness_Score.mean()\nAsia=data_2015[data_2015.Region==\"Southeastern Asia\"]\nmean_Asia=Asia.Happiness_Score.mean()\nEastEU=data_2015[data_2015.Region==\"Central and Eastern Europe\"]\nmean_EastEU=EastEU.Happiness_Score.mean()\nEastAsia=data_2015[data_2015.Region==\"Eastern Asia\"]\nmean_EastAsia=EastAsia.Happiness_Score.mean()\nSubAf=data_2015[data_2015.Region==\"Sub-Saharan Africa\"]\nmean_SubAf=SubAf.Happiness_Score.mean()\nSouthAsia=data_2015[data_2015.Region==\"Southern Asia\"]\nmean_SouthAsia=SouthAsia.Happiness_Score.mean()\n\n","92427d96":"dictionary={\"Region\":[\"Western Europe\",\"North America\",\"Australia and New Zealand\",\n                      \"Middle East and Northern Africa\",\"Latin America and Caribbean\",\n                      \"Southeastern Asia\",\"Central and Eastern Europe\",\"Eastern Asia\",\"Sub-Saharan Africa\",\"Southern Asia\"],\n            \"Mean\":[mean_WestEU,mean_NorthA,mean_Aust,mean_MiddAfrica,mean_Latin,mean_Asia,mean_EastEU,mean_EastAsia,mean_SubAf,mean_SouthAsia]}\ndataframe1=pd.DataFrame(dictionary)\ndataframe1","12f76670":"plt.barh(dataframe1.Region,dataframe1.Mean)\nplt.show()","8141d157":"<a id=\"11\"><\/a> <br>\n### DEFAULT and FLEXIBLE ARGUMENTS\n* Default argument example:\n<br> def f(a, b=1):\n        \"\"\" b = 1 is default argument\"\"\"\n* Flexible argument example:\n<br> def f(*args):\n       \"\"\" *args can be one or more\"\"\"\n<br>def f(** kwargs)\n       \"\"\" **kwargs is a dictionary\"\"\"\n       \n<br><br> lets write some code to practice  ","a4dfbd28":"<a id=\"21\"><\/a> <br>\n### PIVOTING DATA\nReverse of melting.","c77bbbf0":"<a id=\"19\"><\/a> <br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n* Box plots: visualize basic statistics like outliers, min\/max or quantiles","f1dc8d40":"**Content:**\n1. [Introduction to Python:](#1)\n    1. [Matplotlib](#2)\n    1. [Dictionaries ](#3)\n    1. [Pandas](#4)\n    1. [Logic, control flow and filtering](#5)\n    1. [Loop data structures](#6)\n1. [Python Data Science Toolbox:](#7)\n    1. [User defined function](#8)\n    1. [Scope](#9)\n    1. [Nested function](#10)\n    1. [Default and flexible arguments](#11)\n    1. [Lambda function](#12)\n    1. [Anonymous function](#13)\n    1. [Iterators](#14)\n    1. [List comprehension](#15)\n1. [Cleaning Data](#16)\n    1. [Diagnose data for cleaning](#17)\n    1. [Exploratory data analysis](#18)\n    1. [Visual exploratory data analysis](#19)\n    1. [Tidy data](#20)\n    1. [Pivoting data](#21)\n    1. [Concatenating data](#22)\n    1. [Data types](#23)\n    \n1. [Pandas Foundation](#25)\n    1. [Review of pandas](#26)\n    1. [Building data frames from scratch](#27)\n    1. [Visual exploratory data analysis](#28)\n    1. [Statistical explatory data analysis](#29)\n    1. [Indexing pandas time series](#30)\n    1. [Resampling pandas time series](#31)\n    \n1. [Manipulating Data Frames with Pandas](#32)\n    1. [Indexing data frames](#33)\n    1. [Slicing data frames](#34)\n    1. [Filtering data frames](#35)\n    1. [Transforming data frames](#36)\n    1. [Index objects and labeled data](#37)\n    1. [Hierarchical indexing](#38)\n    1. [Pivoting data frames](#39)\n    1. [Stacking and unstacking data frames](#40)\n    1. [Melting data frames](#41)\n    1. [Categoricals and groupby](#42)","86c7eee2":"<a id=\"18\"><\/a> <br>\n### EXPLORATORY DATA ANALYSIS\n\n","9fe4817d":"<a id=\"41\"><\/a> <br>\n### MELTING DATA FRAMES\n* Reverse of pivoting","be7e23b9":"<a id=\"37\"><\/a> <br>\n### INDEX OBJECTS AND LABELED DATA\nindex: sequence of label\n","a3223729":"<a id=\"35\"><\/a> <br>\n### FILTERING DATA FRAMES\nCreating boolean series\nCombining filters\nFiltering column based others","4ab7436d":"<a id=\"29\"><\/a> <br>\n### STATISTICAL EXPLORATORY DATA ANALYSIS\nI already explained it at previous parts. However lets look at one more time.\n* count: number of entries\n* mean: average of entries\n* std: standart deviation\n* min: minimum entry\n* 25%: first quantile\n* 50%: median or second quantile\n* 75%: third quantile\n* max: maximum entry","bf495c0f":"<a id=\"3\"><\/a> <br>\n### DICTIONARY","58402eb8":"# CONCLUSION\nThank you for your votes and comments","2ee1ebd7":"<a id=\"2\"><\/a> <br>\n### MATPLOTLIB","b16f0ee2":"<a id=\"34\"><\/a> <br>\n### SLICING DATA FRAME\n* Difference between selecting columns\n    * Series and data frames\n* Slicing and indexing series\n* Reverse slicing \n* From something to end","f0b4c08e":"<a id=\"22\"><\/a> <br>\n### CONCATENATING DATA\nWe can concatenate two dataframe ","bfeba07e":"<a id=\"20\"><\/a> <br>\n### TIDY DATA\nWe tidy data with melt().\nDescribing melt is confusing. Therefore lets make example to understand it.","c7eddc5a":"<a id=\"28\"><\/a> <br>\n### VISUAL EXPLORATORY DATA ANALYSIS\n* Plot\n* Subplot\n* Histogram:\n    * bins: number of bins\n    * range(tuble): min and max values of bins\n    * normed(boolean): normalize or not\n    * cumulative(boolean): compute cumulative distribution","25d0f034":"<a id=\"38\"><\/a> <br>\n### HIERARCHICAL INDEXING\n* Setting indexing","31b7abc3":"<a id=\"23\"><\/a> <br>\n### DATA TYPES\nThere are 5 basic data types: object(string),booleab,  integer, float and categorical.\n<br> We can make conversion data types like from str to categorical or from int to float\n<br> Why is category important: \n* make dataframe smaller in memory \n* can be utilized for anlaysis especially for sklear(we will learn later)","eb4a25a5":"<a id=\"13\"><\/a> <br>\n### ANONYMOUS FUNCT\u0130ON\nLike lambda function but it can take more than one arguments.\n* map(func,seq) : applies a function to all the items in a list\n","231466ca":"<a id=\"26\"><\/a> <br>\n### REV\u0130EW of PANDAS\nAs you notice, I do not give all idea in a same time. Although, we learn some basics of pandas, we will go deeper in pandas.\n* single column = series\n* NaN = not a number\n* dataframe.values = numpy","c7cdee0b":"<a id=\"14\"><\/a> <br>\n### ITERATORS\n* iterable is an object that can return an iterator\n* iterable: an object with an associated iter() method\n<br> example: list, strings and dictionaries\n* iterator: produces next value with next() method","0f9fd94b":"<a id=\"40\"><\/a> <br>\n### STACKING and UNSTACKING DATAFRAME\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","484ff9d6":"<a id=\"6\"><\/a> <br>\n### WHILE and FOR LOOPS\nWe will learn most basic while and for loops","b5691a26":"<a id=\"27\"><\/a> <br>\n### BUILDING DATA FRAMES FROM SCRATCH\n* We can build data frames from csv as we did earlier.\n* Also we can build dataframe from dictionaries\n    * zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n* Adding new column\n* Broadcasting: Create new column and assign a value to entire column","89e4c8ca":"What we need to know about functions:\n* docstrings: documentation for functions. Example:\n<br>for f():\n    <br>\"\"\"This is docstring for documentation of function f\"\"\"\n* tuble: sequence of immutable python objects. \n<br>cant modify values\n<br>tuble uses paranthesis like tuble = (1,2,3)\n<br>unpack tuble into several variables like a,b,c = tuble","b8118c52":"<a id=\"9\"><\/a> <br>\n### SCOPE\nWhat we need to know about scope:\n* global: defined main body in script\n* local: defined in a function\n* built in scope: names in predefined built in scope module such as print, len\n<br><br>Lets make some basic examples","d5329fb2":"<a id=\"25\"><\/a> <br>\n# 4. PANDAS FOUNDATION ","939eeb78":"<a id=\"31\"><\/a> <br>\n### RESAMPLING PANDAS TIME SERIES\n* Resampling: statistical method over different time intervals\n    * Needs string to specify frequency like \"M\" = month or \"A\" = year\n* Downsampling: reduce date time rows to slower frequency like from daily to weekly\n* Upsampling: increase date time rows to faster frequency like from daily to hourly\n* Interpolate: Interpolate values according to different methods like \u2018linear\u2019, \u2018time\u2019 or index\u2019 \n    * https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.interpolate.html\n","5a771e8d":"<a id=\"32\"><\/a> <br>\n# MANIPULATING DATA FRAMES WITH PANDAS","deb508a6":"<a id=\"33\"><\/a> <br>\n### INDEXING DATA FRAMES\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","1a868a7d":"<a id=\"7\"><\/a> <br>\n# 2. PYTHON DATA SCIENCE TOOLBOX","d6adf08f":"<a id=\"4\"><\/a> <br>\n### PANDAS","4e2b6029":"<a id=\"16\"><\/a> <br>\n# 3.CLEANING DATA","cf13997e":"<a id=\"10\"><\/a> <br>\n### NESTED FUNCTION\n* function inside function.\n* There is a LEGB rule that is search local scope, enclosing function, global and built in scopes, respectively.","11efd050":"<a id=\"12\"><\/a> <br>\n### LAMBDA FUNCTION\nFaster way of writing function","42612bb7":"<a id=\"8\"><\/a> <br>\n### USER DEFINED FUNCTION","c195f4e7":"<a id=\"1\"><\/a> <br>\n# 1. INTRODUCTION TO PYTHON","e7ad1935":"<a id=\"39\"><\/a> <br>\n### PIVOTING DATA FRAMES\n* pivoting: reshape tool","85a9824a":"<a id=\"42\"><\/a> <br>\n### CATEGORICALS AND GROUPBY","ab4c7627":"<a id=\"5\"><\/a> <br>\nBefore continue with pandas,   we need to learn **logic, control flow** and **filtering.**\n<br>Comparison operator:  ==, <, >, <=\n<br>Boolean operators: and, or ,not\n<br> Filtering pandas","699a1a32":"<a id=\"30\"><\/a> <br>\n### INDEXING PANDAS TIME SERIES\n* datetime = object\n* parse_dates(boolean): Transform date to ISO 8601 (yyyy-mm-dd hh:mm:ss ) format","a2786415":"<a id=\"36\"><\/a> <br>\n### TRANSFORMING DATA\n* Plain python functions\n* Lambda function: to apply arbitrary python function to every element\n* Defining column using other columns","4d44ced3":"<a id=\"15\"><\/a> <br>\n### LIST COMPREHENS\u0130ON\n**One of the most important topic of this kernel**\n<br>We use list comprehension for data analysis often. \n<br> list comprehension: collapse for loops for building lists into a single line\n<br>Ex: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is  unnecessarily long. We can make it one line code that is list comprehension."}}