{"cell_type":{"3a0ca933":"code","3dd40721":"code","a0cde3eb":"code","34c52113":"code","01912e75":"code","c6a5a6cc":"code","2718009e":"code","8454af17":"code","88a2eb85":"code","f8564ef3":"code","aa94e0c6":"code","bee24d44":"code","d568d3a4":"code","93a1b10e":"code","0bfc1b38":"code","115704b2":"code","ef4be97e":"code","ae5588d1":"code","4ed8f04d":"code","88756fd3":"code","080ca2b9":"code","07a4150a":"code","323fc3eb":"code","c3a01973":"code","85234e3a":"code","ca8bee5b":"markdown","fc67e9b6":"markdown","075bbd8f":"markdown"},"source":{"3a0ca933":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3dd40721":"df=pd.read_csv(\"..\/input\/game-of-thronesgot\/game of thrones.csv\")","a0cde3eb":"df.head()","34c52113":"df.info()","01912e75":"df.shape","c6a5a6cc":"df.isnull().sum()","2718009e":"df[df['U.S. viewers(millions)'].isnull()]","8454af17":"df[df['Original air date'].isnull()]","88a2eb85":"#Filling values in U.S. viewers(millions) column----\ndf.at[26,['U.S. viewers(millions)']]=4.84\ndf.at[38,['U.S. viewers(millions)']]=6.95\ndf.at[55,['U.S. viewers(millions)']]=6.71","f8564ef3":"df[df['U.S. viewers(millions)'].isnull()]","aa94e0c6":"#Filling Values in Original air date column---\ndf.at[6,['Original air date']]='29-May-11'\ndf.at[11,['Original air date']]='8-April-12'\ndf.at[12,['Original air date']]='15-April-12'\ndf.at[16,['Original air date']]='13-May-12'\ndf.at[26,['Original air date']]='12-May-13'\ndf.at[36,['Original air date']]='18-May-14'\ndf.at[46,['Original air date']]='24-May-15'\ndf.at[47,['Original air date']]='31-May-15'\ndf.at[54,['Original air date']]='22-May-16'\ndf.at[60,['Original air date']]='16-July-17'\ndf.at[67,['Original air date']]='14-April-19'\ndf.at[68,['Original air date']]='21-April-19'","bee24d44":"df.isnull().sum()","d568d3a4":"#Converting dtype object to datetime64[ns] dtype---\ndf['Original air date']=pd.to_datetime(df['Original air date'])","93a1b10e":"df.info()","0bfc1b38":"df.head()","115704b2":"import matplotlib.pyplot as plt\nfrom matplotlib.pyplot import style\nstyle.use('fivethirtyeight')","ef4be97e":"#Imdb rating <=8\nplt.gcf().set_size_inches(12,19)\nplt.barh(df['Title'],df['Imdb rating'],color=(df['Imdb rating']<=8).map({True:'green',False:'maroon'}))\nplt.xlabel('IMDB RATING')\nplt.show()","ae5588d1":"df['Directed by'].unique()","4ed8f04d":"#Who directed the most.......\ndf['Directed by'].max()","88756fd3":"df['Written by'].unique()","080ca2b9":"#Who wrote the most.......\ndf['Written by'].max()","07a4150a":"df['Novel(s) adapted'].unique()","323fc3eb":"df['Novel(s) adapted'].max()","c3a01973":"df.head()","85234e3a":"plt.gcf().set_size_inches(12,19)\nplt.ylabel(\"U.S. Viewers(millions)\")\nplt.barh(df['Title'],df['U.S. viewers(millions)'].values,color='#030764')","ca8bee5b":"# Data Cleaning","fc67e9b6":"# Plotting Graphs","075bbd8f":"**From this graph and from the previous graph we observe that the title which has max viewers has the min IMDB rating....**"}}