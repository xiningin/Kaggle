{"cell_type":{"d941b6f8":"code","22648162":"code","bd91976c":"code","565c4cdb":"code","46fb40be":"code","afb1abad":"code","1b94fd26":"code","92566b8a":"code","5f5b89db":"code","c049ce66":"code","084e5e82":"code","4c956bf9":"code","24991baa":"code","1c369040":"markdown","25e05d3d":"markdown","435ef7d1":"markdown","8374cdbd":"markdown","50fcebc7":"markdown","ca94956e":"markdown","a5f21212":"markdown","d598764b":"markdown","9c20ccc0":"markdown","a7dbeffe":"markdown","bd600876":"markdown","4a6482e4":"markdown"},"source":{"d941b6f8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\ndata = pd.read_csv('..\/input\/divorce-prediction\/divorce_data.csv', sep=\";\")\ndata.head()","22648162":"data.describe()","bd91976c":"data.isna().sum()","565c4cdb":"data.isnull().sum()","46fb40be":"import math\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ndef make_box_plots(df, cols=4, rows=-1):\n    if (rows == -1):\n        rows = math.ceil(len(df.columns)\/cols)\n    fig = make_subplots(\n        rows,\n        cols,\n        subplot_titles = df.columns\n    )\n\n    i = 1\n    j = 1\n\n    for col in df.columns:\n        fig.append_trace(go.Box(y=df[:][col]), i, j)\n        if j < cols:\n            j += 1\n        else:\n            j = 1\n            i += 1\n    fig.update_layout(\n        autosize=False,\n        width=1200,\n        height=2000,\n        margin=dict(\n            l=50,\n            r=50,\n            b=100,\n            t=100,\n            pad=4\n        ),\n        paper_bgcolor=\"LightSteelBlue\",\n    )\n    fig.show()\n    \nmake_box_plots(data)","afb1abad":"corr = data.corr()\ncorr.style.background_gradient(cmap='plasma').set_precision(2)","1b94fd26":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(rows=(data.shape[1]\/\/3)+1, cols=3)\n\nfor i, col in enumerate(data.columns):\n    if col == 'Divorce':\n        fig.add_trace(go.Histogram(x=data[col], name=col, nbinsx=3),row=(i\/\/3)+1, col=(i%3)+1)\n    else:\n        fig.add_trace(go.Histogram(x=data[col], name=col), row=(i\/\/3)+1, col=(i%3)+1)\n    \nfig.update_layout(height=1500,)\n    \nfig.show()","92566b8a":"# Split data\nfrom sklearn.model_selection import train_test_split\n\ny = data['Divorce']\nX = data.drop('Divorce',axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","5f5b89db":"from sklearn.linear_model import Perceptron\n\nmodel = Perceptron(tol=1e-3, random_state=0, penalty='l2', alpha=0.0005)\nmodel.fit(X_train, y_train)\n\nprint(f'Train mean accuracy: %0.3f' % model.score(X_train, y_train))","c049ce66":"print(f'Test mean accuracy: %0.3f' % model.score(X_test, y_test))\n","084e5e82":"import matplotlib.pyplot as plt\nfrom sklearn.metrics import plot_confusion_matrix\n\nnp.set_printoptions(precision=2)\n\nmatrices = [\n    ['Train', model, X_train, y_train],\n    ['Test', model, X_test, y_test],\n]\n\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 3), sharey='row')\n\nfor matrix, ax in zip(matrices, axes.flatten()):\n    plot_confusion_matrix(\n    matrix[1], \n    matrix[2],\n    matrix[3],\n    ax=ax,\n    display_labels=matrix[1].classes_, \n    normalize=None\n)\n    ax.title.set_text(matrix[0])\n\nplt.tight_layout()  \nplt.show()","4c956bf9":"questions = pd.read_csv(\"..\/input\/divorce-prediction\/reference.tsv\", sep=\"|\", index_col=0)\nquestions.head()","24991baa":"w = model.coef_\nw1 = pd.DataFrame(w).T\nw1.columns = ['coef']\nw1['questions'] = questions\n\nw1[w1['coef'] > 4].sort_values(by='coef', ascending=False)","1c369040":"### Check for null entries","25e05d3d":"### Test Accuracy","435ef7d1":"## SciKit Learn Perceptron Model","8374cdbd":"### Most Relevant Questions","50fcebc7":"### Train Accuracy","ca94956e":"# Divorce Predictors","a5f21212":"### Box Plots","d598764b":"## Data Analyisis\n### Statistical Description","9c20ccc0":"### Correlation Matrix","a7dbeffe":"### Check for NA entries","bd600876":"### Histograms","4a6482e4":"## Confusion Matrix and Results Report"}}