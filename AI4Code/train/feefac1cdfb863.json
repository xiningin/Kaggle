{"cell_type":{"1fdf6ff5":"code","dfaf40de":"code","d4975251":"code","283187d5":"code","37051533":"code","f72919e1":"code","737e99cd":"code","48afdf2f":"code","e6740926":"code","a5fd5686":"code","23e2d35d":"code","f1f4fd06":"code","0d677067":"code","764af083":"code","e1ee8552":"code","0a8638e3":"code","de8680be":"code","20d38727":"code","a7a8d9f9":"code","5c28e86e":"code","30440092":"code","85ef0951":"code","fdc84fda":"code","7846fe8d":"code","ca718c2f":"code","aa19da3b":"code","71604401":"code","36d4ef6a":"code","dae595d8":"code","7452b69b":"code","b52c06bb":"code","55ce64bd":"code","bbb24130":"code","c2f89d7f":"code","e0cbaecc":"code","84902037":"code","8e04c6f2":"code","110a2fff":"code","31b0baa7":"code","59c1c559":"code","f263b13e":"code","d5eea800":"code","688648a5":"code","bdd097d9":"code","389319d6":"code","7fca7b13":"code","708b56c9":"markdown","aa842a00":"markdown"},"source":{"1fdf6ff5":"from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier, GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression","dfaf40de":"import pandas as pd\nimport numpy as np","d4975251":"train_data = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest_data = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\n","283187d5":"def int_downcast(df):\n    int_cols = df.select_dtypes(include=['int64'])\n\n    for col in int_cols.columns:\n        print(col, 'min:',df[col].min(),'; max:',df[col].max())\n        df[col] = pd.to_numeric(df[col], downcast ='integer')\n    return df\n\nint_downcast(train_data)\n# test_data['claim'].dtype","37051533":"def float_downcast(df):\n  float_cols = df.select_dtypes(include = ['float64'])\n  for col in float_cols.columns:\n    df[col] = pd.to_numeric(df[col],downcast = 'float')\n  return df\n\nfloat_downcast(train_data)\ntrain_data.info()","f72919e1":"features = [x for x in train_data.columns.values if x[0]==\"f\"]\ntrain_data['n_missing'] = train_data[features].isna().sum(axis=1)\ntest_data['n_missing'] = test_data[features].isna().sum(axis=1)","737e99cd":"train_data['kurt'] = train_data[features].kurtosis(axis=1)\ntest_data['kurt'] = test_data[features].kurtosis(axis=1)","48afdf2f":"from sklearn.impute import SimpleImputer\nimputer =SimpleImputer(np.nan , strategy = 'mean')","e6740926":"train_data","a5fd5686":"target = train_data.loc[:,'claim']","23e2d35d":"target","f1f4fd06":"train_data = train_data.drop(['id','claim'],axis=1)","0d677067":"test_data.drop('id',axis=1,inplace=True)","764af083":" train_data['std'] = train_data[features].std(axis=1)\ntest_data['std'] = test_data[features].std(axis=1)\n\ntrain_data['min'] = train_data[features].min(axis=1)\ntest_data['min'] = test_data[features].min(axis=1)\n\ntrain_data['max'] = train_data[features].max(axis =1)\ntest_data['max'] = test_data[features].max(axis=1)\n","e1ee8552":"train_data = imputer.fit_transform(train_data)","0a8638e3":"test_data = imputer.transform(test_data)","de8680be":"from sklearn.preprocessing import RobustScaler","20d38727":"scaler = RobustScaler()","a7a8d9f9":"train_data = scaler.fit_transform(train_data)\ntest_data = scaler.transform(test_data)","5c28e86e":"features = features + ['N_missing','std_row','min','max','kurt']","30440092":"train_data = pd.DataFrame(train_data,columns =features)","85ef0951":"test_data = pd.DataFrame(test_data,columns =features)","fdc84fda":"from sklearn.model_selection import train_test_split\n","7846fe8d":"xtrain,xval, ytrain,yval= train_test_split(train_data, target, test_size= 0.3 ,random_state=1)","ca718c2f":"! pip install catboost","aa19da3b":"\n!pip uninstall -y lightgbm\n!apt-get install -y libboost-all-dev\n!git clone --recursive https:\/\/github.com\/Microsoft\/LightGBM","71604401":"%%bash\ncd LightGBM\nrm -r build\nmkdir build\ncd build\ncmake -DUSE_GPU=1 -DOpenCL_LIBRARY=\/usr\/local\/cuda\/lib64\/libOpenCL.so -DOpenCL_INCLUDE_DIR=\/usr\/local\/cuda\/include\/ ..\nmake -j$(nproc)","36d4ef6a":"!cd LightGBM\/python-package\/;python setup.py install --precompile\n","dae595d8":"!mkdir -p \/etc\/OpenCL\/vendors && echo \"libnvidia-opencl.so.1\" > \/etc\/OpenCL\/vendors\/nvidia.icd\n!rm -r LightGBM","7452b69b":"from lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom xgboost import XGBClassifier","b52c06bb":"LGBMClassifier().get_params()","55ce64bd":"# paramsXGB = {'max_depth': 2, 'learning_rate': 0.021537077920105466, 'n_estimators': 3000, 'min_child_weight': 150, 'gamma': 0.11611920725914951, 'alpha': 0.0021839958087869794, 'lambda': 0.0018567979557499344, 'colsample_bytree': 0.7139742731494992, 'subsample': 0.6258627743440968,\n#              'tree_method': 'gpu_hist',\n#              'booster': 'gbtree',\n#              'random_state': 228,\n#              'use_label_encoder': False,\n#              'objective': 'binary:logistic',\n#              'eval_metric': 'auc',\n#               }","bbb24130":"paramsXGB = {'max_depth': 3, 'learning_rate': 0.015702659398906191, 'n_estimators': 10000, 'min_child_weight': 25, 'gamma': 0.00010151247994797229, 'alpha': 7.148020356730985, 'lambda': 0.1378423649746119, 'colsample_bytree': 0.7969227570988136, 'subsample': 0.6382893449313995,\n             'tree_method': 'gpu_hist',\n             'booster': 'gbtree',\n             'random_state': 228,\n             'use_label_encoder': False,\n             'eval_metric': 'auc'}","c2f89d7f":"# paramsCB = {'depth': 3, 'learning_rate': 0.014530866870832323, 'iterations': 6000, 'max_bin': 265, 'min_data_in_leaf': 14, 'l2_leaf_reg': 0.004427550682515904, 'subsample': 0.5402586792667279, 'grow_policy': 'SymmetricTree', 'leaf_estimation_method': 'Gradient',\n#             'bootstrap_type': 'Bernoulli',\n#             'random_seed': 228,\n#             'loss_function': 'Logloss',\n#             'eval_metric': 'AUC',}\n#             'task_type': 'GPU' }","e0cbaecc":"paramsCB = {'depth': 3, 'learning_rate': 0.017585381726501453, 'iterations': 11636, 'max_bin': 461, 'min_data_in_leaf': 162, 'l2_leaf_reg': 0.02724781040038058, 'subsample': 0.6892384815879177, 'grow_policy': 'Depthwise', 'leaf_estimation_method': 'Gradient',\n            'bootstrap_type': 'Bernoulli',\n            'random_seed': 228,\n            'loss_function': 'Logloss',\n            'eval_metric': 'AUC',\n            'task_type': 'GPU' }","84902037":"paramsLGBM = {'n_estimators':11990 , 'max_depth': 3, 'learning_rate': 0.016501612373246877, 'reg_alpha': 7.555087388180319, 'reg_lambda': 0.9534606245427513, 'num_leaves': 155, 'min_data_per_group': 177, 'min_child_samples': 150, 'colsample_bytree': 0.22781593823447946,\n            'boosting_type': 'gbdt',\n            'objective': 'binary',\n            'random_state': 228,\n            'metric': 'auc',\n            'device_type': 'gpu'}","8e04c6f2":"# model=StackNetClassifier(models, metric=\"auc\", folds=3,\n# \trestacking=False,use_retraining=True, use_proba=True, \n# \trandom_state=12345,n_jobs=1, verbose=1)","110a2fff":"from sklearn.ensemble import StackingClassifier","31b0baa7":"estimators = [('lgb',LGBMClassifier(**paramsLGBM)),\n               ('xgb',XGBClassifier(**paramsXGB)),\n             ('cb',CatBoostClassifier(**paramsCB)),\n             ('log',LogisticRegression(max_iter =200,random_state=1,solver='liblinear')  )]\nfinal_layer = StackingClassifier(\n               estimators=[('lgb',LGBMClassifier(n_estimators=  5000,objective= 'binary',\n                                                 random_state= 1,\n                                                 metric= 'auc',\n                                                 device_type= 'gpu')),\n                            ('cat',CatBoostClassifier(bootstrap_type= 'Bernoulli',\n                                                      random_seed= 1,\n                                                      loss_function= 'Logloss',\n                                                      eval_metric= 'AUC',\n                                                      task_type= 'GPU',\n                                                      n_estimators=5000))],\n              final_estimator=LogisticRegression(max_iter=200,solver = 'liblinear')\n     )","59c1c559":"model = StackingClassifier(estimators =estimators , final_estimator = final_layer,cv=3,verbose=1)","f263b13e":"model.fit(train_data,target)","d5eea800":"preds=model.predict_proba(test_data)","688648a5":"submission = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')","bdd097d9":"submission.claim = preds[:,1]","389319d6":"submission","7fca7b13":"submission.to_csv('submission13.csv',index=False)","708b56c9":"## Changing datatype of features for memory reduction.\n\ni.e. float64 to float 32.","aa842a00":"## Preprocessing and Feature engineering."}}