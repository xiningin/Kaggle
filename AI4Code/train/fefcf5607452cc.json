{"cell_type":{"79e63d48":"code","cc865b6f":"code","db49d2bc":"code","bfc730fa":"code","6f7fb5d9":"code","5706113a":"code","a79e65c7":"code","10678f82":"code","18e0750a":"code","a0ff23c1":"code","387cdb6c":"code","af12fd06":"code","f98487ea":"code","36388cf9":"code","7d8d47c3":"code","6a060025":"code","044f4ac8":"code","4defd330":"code","02a066b2":"markdown","2e1060b7":"markdown","b2de84f0":"markdown","8d44e0df":"markdown","5c8ee3ab":"markdown","5730b315":"markdown","c7748e23":"markdown","a60990e5":"markdown","2ec09940":"markdown","39e7e939":"markdown","e23352a9":"markdown","c0a66f96":"markdown","fb58a112":"markdown","61cd5fb4":"markdown","ebfbe0ee":"markdown"},"source":{"79e63d48":"from fastai.conv_learner import *\nfrom fastai.dataset import *\nfrom tqdm import tqdm\nimport pandas as pd\nimport numpy as np\nimport os\nfrom sklearn.model_selection import train_test_split, StratifiedShuffleSplit\nimport matplotlib.pyplot as plt\nimport math","cc865b6f":"MODEL_PATH = 'Resnet34_v1'\nTRAIN = '..\/input\/train\/'\nTEST = '..\/input\/test\/'\nLABELS = '..\/input\/train.csv'\nSAMPLE_SUB = '..\/input\/sample_submission.csv'\n","db49d2bc":"arch = resnet18\nnw = 6","bfc730fa":"train_df = pd.read_csv(LABELS).set_index('Image')\nunique_labels = np.unique(train_df.Id.values)\n\nlabels_dict = dict()\nlabels_list = []\nfor i in range(len(unique_labels)):\n    labels_dict[unique_labels[i]] = i\n    labels_list.append(unique_labels[i])\nprint(\"Number of classes: {}\".format(len(unique_labels)))\ntrain_names = train_df.index.values\ntrain_df.Id = train_df.Id.apply(lambda x: labels_dict[x])\ntrain_labels = np.asarray(train_df.Id.values)\ntest_names = [f for f in os.listdir(TEST)]","6f7fb5d9":"labels_count = train_df.Id.value_counts()\n_, _,_ = plt.hist(labels_count,bins=100)\nlabels_count","5706113a":"print(\"Count for class new_whale: {}\".format(labels_count[0]))\n\nplt.figure(figsize=(20,8))\n\nplt.hist(labels_count[1:],bins=100,range=[0,100])\nplt.hist(labels_count[1:],bins=100,range=[0,100])","a79e65c7":"dup = []\nfor idx,row in train_df.iterrows():\n    if labels_count[row['Id']] < 5:\n        dup.extend([idx]*math.ceil((5 - labels_count[row['Id']])\/labels_count[row['Id']]))\ntrain_names = np.concatenate([train_names, dup])\ntrain_names = train_names[np.random.RandomState(seed=42).permutation(train_names.shape[0])]\nlen(train_names)","10678f82":"sss = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42069)\nfor train_idx, val_idx in sss.split(train_names, np.zeros(train_names.shape)):\n    tr_n, val_n = train_names[train_idx], train_names[val_idx]\nprint(len(tr_n), len(val_n))","18e0750a":"avg_width = 0\navg_height = 0\nfor fn in os.listdir(TRAIN)[:1000]:\n    img = cv2.imread(os.path.join(TRAIN,fn))\n    avg_width += img.shape[1]\n    avg_height += img.shape[0]\navg_width \/\/= 1000\navg_height \/\/= 1000\nprint(avg_width, avg_height)","a0ff23c1":"class HWIDataset(FilesDataset):\n    def __init__(self, fnames, path, transform):\n        self.train_df = train_df\n        super().__init__(fnames, transform, path)\n\n    def get_x(self, i):\n        img = open_image(os.path.join(self.path, self.fnames[i]))\n        # We crop the center of the original image for faster training time\n        img = cv2.resize(img, (self.sz, self.sz))\n        return img\n\n    def get_y(self, i):\n        if (self.path == TEST): return 0\n        return self.train_df.loc[self.fnames[i]]['Id']\n\n\n    def get_c(self):\n        return len(unique_labels)\n","387cdb6c":"class RandomLighting(Transform):\n    def __init__(self, b, c, tfm_y=TfmType.NO):\n        super().__init__(tfm_y)\n        self.b, self.c = b, c\n\n    def set_state(self):\n        self.store.b_rand = rand0(self.b)\n        self.store.c_rand = rand0(self.c)\n\n    def do_transform(self, x, is_y):\n        if is_y and self.tfm_y != TfmType.PIXEL: return x  # add this line to fix the bug\n        b = self.store.b_rand\n        c = self.store.c_rand\n        c = -1 \/ (c - 1) if c < 0 else c + 1\n        x = lighting(x, b, c)\n        return x\n    \ndef get_data(sz, bs):\n    aug_tfms = [RandomRotateZoom(deg=20, zoom=2, stretch=1),\n                RandomLighting(0.05, 0.05, tfm_y=TfmType.NO),\n                RandomBlur(blur_strengths=3,tfm_y=TfmType.NO),\n                RandomFlip(tfm_y=TfmType.NO)]\n    tfms = tfms_from_model(arch, sz, crop_type=CropType.NO, tfm_y=TfmType.NO,\n                           aug_tfms=aug_tfms)\n    ds = ImageData.get_ds(HWIDataset, (tr_n[:-(len(tr_n) % bs)], TRAIN),\n                          (val_n, TRAIN), tfms, test=(test_names, TEST))\n    md = ImageData(\".\/\", ds, bs, num_workers=nw, classes=None)\n    return md\n","af12fd06":"sz = (avg_width\/\/2, avg_height\/\/2)\nbatch_size = 128\nmd = get_data(avg_width\/\/4, batch_size)\nlearn = ConvLearner.pretrained(arch, md) \nlearn.opt_fn = optim.Adam","f98487ea":"# learn.lr_find()\n# learn.sched.plot()\nlr = 1e-3","36388cf9":"learn.fit(lr, 1, cycle_len=1)\nlearn.unfreeze()\nlrs = np.array([lr\/10, lr\/20, lr\/40])\nlearn.fit(lrs, 4, cycle_len=4, use_clr=(20, 16))\nlearn.fit(lrs\/4, 2, cycle_len=4, use_clr=(10, 16))\nlearn.fit(lrs\/16, 1, cycle_len=4, use_clr=(10, 16))","7d8d47c3":"# batch_size = 32\n# md = get_data(avg_width\/\/2, batch_size)\n# learn.set_data(md)\n# learn.fit(lrs\/4, 3, cycle_len=2, use_clr=(10, 8))\n","6a060025":"# batch_size = 16\n# md = get_data(avg_width, batch_size)\n# learn.set_data(md)\n# learn.fit(lrs\/16, 1, cycle_len=4, use_clr=(10, 8))","044f4ac8":"# preds_t,y_t = learn.predict_with_targs(is_test=True) # Predicting without TTA\npreds_t,y_t = learn.TTA(is_test=True,n_aug=8)\npreds_t = np.stack(preds_t, axis=-1)\npreds_t = np.exp(preds_t)\npreds_t = preds_t.mean(axis=-1)","4defd330":"sample_df = pd.read_csv(SAMPLE_SUB)\nsample_list = list(sample_df.Image)\npred_list = [[labels_list[i] for i in p.argsort()[-5:][::-1]] for p in preds_t]\npred_dic = dict((key, value) for (key, value) in zip(learn.data.test_ds.fnames,pred_list))\npred_list_cor = [' '.join(pred_dic[id]) for id in sample_list]\ndf = pd.DataFrame({'Image':sample_list,'Id': pred_list_cor})\ndf.to_csv('submission.csv'.format(MODEL_PATH), header=True, index=False)\ndf.head()","02a066b2":"Uncomment these lines to run Fastai's automatic learning rate finder. \n","2e1060b7":"## Predictions","b2de84f0":"Let's start by importing our libararies.","8d44e0df":"## Training ","5c8ee3ab":"May be keep training on bigger image for potential performance boost.","5730b315":"We start by training only the newly initialized weights, then unfreeze the model and finetune the pretrained weights with reduced learning rate.","c7748e23":"**Credits for the notebook goes to Khoi Nguyen's : https:\/\/www.kaggle.com\/suicaokhoailang\/wip-resnet18-baseline-with-fastai-0-375-lb .\nI just wanted to play with resnet34 and see if we can fit a bigger architecture in kaggle kernels.**  <br>\n**If the notebooks gets published then we certainly can.**","a60990e5":"The image sizes seem to vary, so we'll try to see what the average width and height are:","2ec09940":"The architecture is flexible, I chose Resnet18 since it can fit quite well into a kernel. You may play with this if you want to. ","39e7e939":"Finally, our submission.","e23352a9":"Next, we prapare out dataset to work with Fastai's pipeline.","c0a66f96":"So most of the classes have only one or two sample(s), making **train_test_split** directly on the data impossible. We'll try a simple fix by duplicating the minor classes so that each class have a minimum of 5 samples.","fb58a112":"Ugh, okay, let's kick the elephant out of the room and try again","61cd5fb4":"They turn out to be quite big, especially the width, so below you'll see I resize everything back to **average_width\/4**. You may consider continue training on bigger size, but that probably won't fit in a kernel. ","ebfbe0ee":"Let's draw a simple histogram to see the sample-per-class distribution."}}