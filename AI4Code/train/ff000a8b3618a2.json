{"cell_type":{"736afea9":"code","d3477188":"code","cfa717e7":"code","de632f1f":"code","bfaf79ce":"code","c621344b":"code","80b13a5d":"code","0e3c2097":"code","02e03703":"code","3c2f06a6":"code","e12d2416":"code","fbe7f132":"code","cd1b201f":"code","4876dcd9":"code","748f287b":"code","27d2d149":"code","f0208bfd":"code","63cb997e":"code","f3c42dff":"code","f13e295b":"code","57f55bd1":"code","a61fbc3d":"code","d0fc889f":"code","8b3cc738":"code","a056a370":"code","36387b0e":"code","3cd25a1f":"code","721bac08":"code","f0a81d68":"code","944876c5":"markdown","99625e7f":"markdown","900be527":"markdown","447d0167":"markdown","f92a74cf":"markdown","19260fff":"markdown","f53b01a1":"markdown","fd35b2aa":"markdown","4ce670a7":"markdown","c2865934":"markdown","b7545cb8":"markdown","a8f1ca41":"markdown","f87f728e":"markdown"},"source":{"736afea9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3477188":"train_df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId=test_df[\"PassengerId\"]","cfa717e7":"train_df.columns","de632f1f":"train_df.head()","bfaf79ce":"train_df.describe()","c621344b":"train_df.info()","80b13a5d":"def bar_plot(variable):\n    var = train_df[variable]\n    varValue =  var.value_counts()\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n","0e3c2097":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","02e03703":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","3c2f06a6":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","e12d2416":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","fbe7f132":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","cd1b201f":"train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","4876dcd9":"train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","748f287b":"train_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","27d2d149":"train_df[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","f0208bfd":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        \n        Q1 = np.percentile(df[c],25)\n    \n        Q3 = np.percentile(df[c],75)\n        \n        IQR = Q3 - Q1\n        \n        outlier_step = IQR * 1.5\n        \n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        \n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n    ","63cb997e":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","f3c42dff":"train_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","f13e295b":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)","57f55bd1":"train_df.head()","a61fbc3d":"train_df.columns[train_df.isnull().any()]\n","d0fc889f":"train_df.isnull().sum()\n","8b3cc738":"train_df[train_df[\"Embarked\"].isnull()]","a056a370":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","36387b0e":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","3cd25a1f":"train_df[train_df[\"Fare\"].isnull()]","721bac08":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","f0a81d68":"train_df[train_df[\"Fare\"].isnull()]","944876c5":"<a id = '5'><\/a><br>\n\n## *Numerical Variable*","99625e7f":"<a id = '6'><\/a><br>\n## *Data Analysis*","900be527":"<font color = 'blue'>\n    \n1. PassengerId: id number to each passenger\n1. Survived   : 1= survive 0= died\n1. Pclass     : 1=1st ticket class 2= 2nd ticket class 3= 3rd ticket class\n1. Name       : Passenger name\n1. Sex        : Gender of passenger\n1. Age        : Age of passenger\n1. SibSp      : # of siblings\/spouses\n1. Parch      : # of parents\/children\n1. Ticket     : Ticket no\n1. Fare       : Passenger fare\n1. Cabin      : Cabin number\n1. Embarked   : Port of embarkation (C=CHERBOURG, Q= QUEENSTOWN, S=SOUTHAMPTON)","447d0167":"* \nfloat64(2) = Age,Fare\n* \nint64(5)   = PassengerId, Survived, Pclass, SibSp, Parch\n* \nobject(5)  = Name, Sex, Ticket, Cabin, Embarked","f92a74cf":"<a id = '4'><\/a><br>\n\n## *Categorical Variable*","19260fff":"<a id = '2'><\/a><br>\n## *Variable Description*","f53b01a1":"<a id = '7'><\/a><br>\n\n## *Outlier Detection*","fd35b2aa":"<a id = '3'><\/a><br>\n## *Univariate Variable Analysis*\n\n<font color = 'red'>\n\n* Categorical Variable : Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp, Parch\n* Numerical Variable   : Age, PassengerId, Fare","4ce670a7":"<a id = '9'><\/a><br>\n## *Finding Missing Value*","c2865934":"<a id = '10'><\/a><br>\n## *Filling Missing Value*","b7545cb8":"<a id = '8'><\/a><br>\n\n## *Missing Value*\n\n* Finding Missing Value\n* Filling Missing Value","a8f1ca41":"<a id = '1'><\/a><br>\n## *Load and Check Data*","f87f728e":"# INTRODUCTION\n\nThe Titanic sank in the South Atlantic Ocean in the early morning hours of April 15, 1912, colliding with an iceberg during her journey from Southampton to New York. Of the estimated 2,224 passengers and crew, more than 1,500 people died. This accident caused it to be cited as one of the deadliest marine disasters in modern history.\n\n<font color = 'red'>\n  \n Content : \n    \n 1. [Load and Check Data](#1)\n 2. [Variable Description](#2)\n      * [Univariate Variable Analysis](#3)\n    \n       *  [Categorical Variable](#4)\n       *  [Numerical Variable](#5)\n    \n 3. [Data Analysis](#6)\n 4. [Outlier Detection](#7)\n 5. [Missing Value](#8)\n       \n       * [Finding Missing Value](#9)\n       * [Filling Missing Value](#10)"}}