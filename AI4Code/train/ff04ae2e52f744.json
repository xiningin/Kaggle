{"cell_type":{"043777f9":"code","e4dde303":"code","b6cc79fd":"code","b5e24b8d":"code","13437b3b":"code","0731aa96":"code","416046a2":"code","29bfdcad":"code","27338d08":"code","82df2089":"code","1acd1e9f":"code","4dd42143":"code","a702e1bf":"code","43b42a97":"code","73541bdb":"code","b86a7874":"markdown","00b59521":"markdown","6f754a49":"markdown","abf730f3":"markdown","d43755e0":"markdown","93ad51e3":"markdown","fef8e0a1":"markdown","79dbaf39":"markdown"},"source":{"043777f9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e4dde303":"# features.txt \ud30c\uc77c\uc5d0\ub294 feature \uc774\ub984 index\uc640 feature\uba85\uc774 \uacf5\ubc31\uc73c\ub85c \ubd84\ub9ac\ub418\uc5b4 \uc788\uc74c. \uc774\ub97c dataframe\uc73c\ub85c load\nfeature_name_df = pd.read_csv('..\/input\/human-activity-recognition-using-smart-phone\/UCI HAR Dataset\/features.txt',\n                             sep = '\\s+',\n                             header = None,\n                             names = ['column_index', 'column_name'])\n\n# feature\uba85 index\ub97c \uc81c\uac70\ud558\uace0, feature\uba85\ub9cc list \uac1d\uccb4\ub85c \uc0dd\uc131\ud55c \ub4a4 sample\ub85c 10\uac1c\ub9cc \ucd94\ucd9c\nfeature_name = feature_name_df.iloc[:, 1].values.tolist()\nprint('\uc804\uccb4 feature\uba85\uc5d0\uc11c 10\uac1c\ub9cc \ucd94\ucd9c: ', feature_name[:10])","b6cc79fd":"feature_dup_df =feature_name_df.groupby('column_name').count()\nprint(feature_dup_df[feature_dup_df['column_index'] > 1].count())\nfeature_dup_df[feature_dup_df['column_index'] > 1].head()","b5e24b8d":"# \ucd1d 42\uac1c\uc758 feature\uba85\uc774 \uc911\ubcf5\ub418\uc5b4 \uc788\uc74c\n# \uc774 \uc911\ubcf5\ub41c feature\uba85\uc5d0 \ub300\ud574\uc11c\ub294 \uc6d0\ubcf8 \ud53c\ucc98\uba85\uc5d0 \uc22b\uc790\ub97c \ucd94\uac00\ub85c \ubd80\uc5ec\ud574 \uc0c8\ub85c\uc6b4 feature\uba85\uc744 \uac00\uc9c0\ub294 dataframe \uc0dd\uc131\n\ndef get_new_feature_name_df(old_feature_name_df):\n    feature_dup_df = pd.DataFrame(data = old_feature_name_df.groupby('column_name').cumcount(),\n                                 columns = ['dup_cnt'])\n    feature_dup_df = feature_dup_df.reset_index()\n    new_feature_name_df = pd.merge(old_feature_name_df.reset_index(),\n                                  feature_dup_df,\n                                  how = 'outer')\n    new_feature_name_df['column_name'] = new_feature_name_df[['column_name', 'dup_cnt']].apply(lambda x: x[0] + '_' + str(x[1]) if x[1] > 0 else x[0], axis=1)\n    new_feature_name_df = new_feature_name_df.drop(['index'], axis=1)\n    return new_feature_name_df","13437b3b":"# train\uacfc test directory\uc5d0 \uc788\ub294 data file\uc744 \uac01\uac01 train\/test dataframe\uc5d0 \ud560\ub2f9\n# dataframe \uc0dd\uc131\ud558\ub294 \uac04\ub2e8\ud55c \ud568\uc218 \uc0dd\uc131\n\ndef get_human_dataset():\n    \n    # \uac01 \ub370\uc774\ud130 \ud30c\uc77c\uc740 \uacf5\ubc31\uc73c\ub85c \ubd84\ub9ac\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c read_csv\uc5d0\uc11c \uacf5\ubc31 \ubb38\uc790\ub97c sep\ub85c \ud560\ub2f9\n    feature_name_df = pd.read_csv('..\/input\/human-activity-recognition-using-smart-phone\/UCI HAR Dataset\/features.txt',\n                                 sep = '\\s+',\n                                 header = None,\n                                 names = ['column_index', 'column_name'])\n    \n    # \uc911\ubcf5\ub41c feature\uba85\uc744 \uc218\uc815\ud558\ub294 get_new_feature_name_df()\ub97c \uc774\uc6a9, \uc2e0\uaddc feature\uba85 dataframe \uc0dd\uc131\n    new_feature_name_df = get_new_feature_name_df(feature_name_df)\n    \n    # dataframe\uc5d0\uc11c feature\uba85\uc744 column\uc73c\ub85c \ubd80\uc5ec\ud558\uae30 \uc704\ud574 list \uac1d\uccb4\ub85c \ubc18\ud658\n    feature_name = new_feature_name_df.iloc[:, 1].values.tolist()\n    \n    # train feature dataset\uc640 test feature dataset\uc744 dataframe\uc73c\ub85c load. column\uba85\uc740 feature_name \uc801\uc6a9\n    X_train = pd.read_csv('..\/input\/human-activity-recognition-using-smart-phone\/UCI HAR Dataset\/train\/X_train.txt',\n                         sep = '\\s+',\n                         names = feature_name)\n    X_test = pd.read_csv('..\/input\/human-activity-recognition-using-smart-phone\/UCI HAR Dataset\/test\/X_test.txt',\n                        sep = '\\s+',\n                        names = feature_name)\n    \n    # column\uba85\uc744 action\uc73c\ub85c \ubd80\uc5ec\n    y_train = pd.read_csv('..\/input\/human-activity-recognition-using-smart-phone\/UCI HAR Dataset\/train\/y_train.txt',\n                         sep = '\\s+',\n                         header = None,\n                         names = ['action'])\n    y_test = pd.read_csv('..\/input\/human-activity-recognition-using-smart-phone\/UCI HAR Dataset\/test\/y_test.txt',\n                        sep = '\\s+',\n                        header = None,\n                        names = ['action'])\n    \n    return X_train, X_test, y_train, y_test\n\nX_train, X_test, y_train, y_test = get_human_dataset()","0731aa96":"print('## train feature dataset info()')\nprint(X_train.info())","416046a2":"X_train.head(3)","29bfdcad":"print(y_train['action'].value_counts())","27338d08":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n\n# \uc608\uc81c \ubc18\ubcf5 \uc2dc\ub9c8\ub2e4 \ub3d9\uc77c\ud55c \uc608\uce21 \uacb0\uacfc \ub3c4\ucd9c\ud558\uae30 \uc704\ud574 random_state \uac12 \ubd80\uc5ec\ndt = DecisionTreeClassifier(random_state=156)\ndt.fit(X_train, y_train)\npred = dt.predict(X_test)\naccuracy = accuracy_score(y_test, pred)\nprint('\uacb0\uc815 \ud2b8\ub9ac \uc608\uce21 \uc815\ud655\ub3c4: {0:.4f}'.format(accuracy))\n\n# DecisionTreeClassifier\uc758 hyper-parameter \ucd94\ucd9c\nprint('DecisionTreeClassifier \uae30\ubcf8 hyper-parameter: \\n', dt.get_params())","82df2089":"from sklearn.model_selection import GridSearchCV\n\nparams = {\n    'max_depth' : [6, 8, 10, 12, 16, 20, 24]\n}\n\ngrid_cv = GridSearchCV(dt,\n                      param_grid = params,\n                      scoring = 'accuracy',\n                      cv = 5, \n                      verbose = 1) # verbose: log \ucd9c\ub825\uc758 level \uc870\uc815 (\uc22b\uc790\uac00 \ud074\uc218\ub85d \ub9ce\uc740 log \ucd9c\ub825)\ngrid_cv.fit(X_train, y_train)\nprint('GridSearchCV \ucd5c\uace0 \ud3c9\uade0 \uc815\ud655\ub3c4 \uc218\uce58: {0:.4f}'.format(grid_cv.best_score_))\nprint('GridSearchCV \ucd5c\uc801 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130: ', grid_cv.best_params_)","1acd1e9f":"# GridSearchCV \uac1d\uccb4\uc758 cv_results_ \uc18d\uc131 dataframe \ubcc0\ud658\ncv_results_df = pd.DataFrame(grid_cv.cv_results_)\n\n# max_depth parameter \uac12\uacfc \uadf8\ub54c\uc758 train\/test datsaset\uc758 \uc815\ud655\ub3c4 \uc218\uce58 \ucd94\ucd9c\ncv_results_df[['param_max_depth', 'mean_test_score']]","4dd42143":"# mean_test_score\ub294 cv=5\uc5d0\uc11c test dataset\uc758 \uc815\ud655\ub3c4 \ud3c9\uade0 \uc218\uce58\n# \ud604\uc7ac max_depth params \uac12\ub4e4\uc5d0\uc11c\ub294 85.48%\ub97c \ub2a5\uac00\ud558\ub294 \uc815\ud655\ub3c4\uac00 \ub098\uc624\uc9c0 \uc54a\uc74c\n# max_depth\uc758 \ubcc0\ud654\uc5d0 \ub530\ub978 \uac12 \uce21\uc815\uc744 \ud655\uc778\ud574\ubcf4\uc790\n\nmax_depths = [6, 8, 10, 12, 16, 20, 24]\nfor depth in max_depths:\n    dt = DecisionTreeClassifier(max_depth = depth,\n                               random_state = 156)\n    dt.fit(X_train, y_train)\n    pred = dt.predict(X_test)\n    accuracy = accuracy_score(y_test, pred)\n    print('max_depth = {0} \uc815\ud655\ub3c4: {1:.4f}'.format(depth, accuracy))","a702e1bf":"params = {\n    'max_depth' : [8, 12, 16, 20],\n    'min_samples_split': [16, 24],\n}\n\ngrid_cv = GridSearchCV(dt,\n                      param_grid = params,\n                      scoring = 'accuracy', \n                      cv = 5,\n                      verbose = 1)\ngrid_cv.fit(X_train, y_train)\nprint('GridSearchCV \ucd5c\uace0 \ud3c9\uade0 \uc815\ud655\ub3c4 \uc218\uce58: {0:.4f}'.format(grid_cv.best_score_))\nprint('GridSearchCV \ucd5c\uc801 \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130: ', grid_cv.best_params_)","43b42a97":"best_dt = grid_cv.best_estimator_\npred1 = best_dt.predict(X_test)\naccuracy = accuracy_score(y_test, pred1)\nprint('\uacb0\uc815 \ud2b8\ub9ac \uc608\uce21 \uc815\ud655\ub3c4: {0:.4f}'.format(accuracy))","73541bdb":"# \uc911\uc694\ub3c4\uac00 \ub192\uc740 \uc21c\uc11c\ub300\ub85c feature_importance_ \ud655\uc778\ud558\uae30\nimport seaborn as sns\n\nfeature_importance_values = best_dt.feature_importances_\n# top \uc911\uc694\ub3c4\ub85c \uc815\ub82c\uc744 \uc27d\uac8c \ud558\uace0, \ub9c9\ub300\uadf8\ub798\ud504\ub85c \uc27d\uac8c \ud45c\ud55c\ud558\uae30 \uc704\ud574 series \ubcc0\ud658\nfeature_importances = pd.Series(feature_importance_values,\n                              index = X_train.columns)\n# \uc911\uc694\ub3c4\uac12 \uc21c\uc73c\ub85c series\ub97c \uc815\ub82c\nfeature_top20 = feature_importances.sort_values(ascending = False)[:20]\nplt.figure(figsize=(8, 6))\nplt.title('Feature Importance Top 20')\nsns.barplot(x = feature_top20,\n           y = feature_top20.index)\nplt.show()","b86a7874":"train dataset\uc740 7352\uac1c\uc758 \ub808\ucf54\ub4dc\ub85c 561\uac1c\uc758 feature\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.","00b59521":"label \uac12\uc740 1\ubd80\ud130 6\uae4c\uc9c0 \ube44\uad50\uc801 \uace0\ub974\uac8c \ubd84\ud3ec\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.","6f754a49":"---","abf730f3":"sklearn\uc758 DecisionTreeClassifier\ub97c \uc774\uc6a9\ud558\uc5ec \ub3d9\uc791 \uc608\uce21 \ubd84\ub958\ub97c \uc218\ud589\ud569\ub2c8\ub2e4.","d43755e0":"max_depth\uac00 8\uc77c \ub54c \uc815\ud655\ub3c4\uac00 87.07%\ub85c \uac00\uc7a5 \ub192\uc558\uc2b5\ub2c8\ub2e4.\n\n\uc55e\uc758 GridSearchCV \uc608\uc81c\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c, \uae4a\uc774\uae30 \uae4a\uc5b4\uc9c8\uc218\ub85d test dataset\uc758 \uc815\ud655\ub3c4\ub294 \ub354 \ub5a8\uc5b4\uc9d1\ub2c8\ub2e4.\n\n<br>\n\uc774\ucc98\ub7fc \uacb0\uc815\ud2b8\ub9ac\ub294 \uae4a\uc774\uac00 \uae4a\uc5b4\uc9c8\uc218\ub85d \uacfc\uc801\ud569\uc758 \uc601\ud5a5\ub825\uc774 \ucee4\uc9c0\ubbc0\ub85c hyper-parameter\ub97c \uc774\uc6a9\ud574 \uae4a\uc774\ub97c \uc81c\uc5b4\ud560 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\n`max_depth`\uc640 `min_sample_split`\uc744 \uac19\uc774 \ubcc0\uacbd\ud558\uba74\uc11c \uc815\ud655\ub3c4 \uc131\ub2a5\uc744 \ud29c\ub2dd\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","93ad51e3":"feature\uba85\uc744 \ubcf4\uba74, \uc778\uccb4\uc758 \uc6c0\uc9c1\uc784\uacfc \uad00\ub828\ub41c \uc18d\uc131\uc758 \ud3c9\uade0\/\ud45c\uc900\ud3b8\ucc28\uac00 x,y,z\ucd95 \uac12\uc73c\ub85c \ub3fc \uc788\uc74c\uc744 \uc720\uce04\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc774 \ud30c\uc77c\uc744 dataset dataframe\uc5d0 \ub85c\ub529\ud558\uae30 \uc804\uc5d0 \uc720\uc758\ud574\uc57c \ud560 \ubd80\ubd84\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\n<br>\n\uc704\uc5d0\uc11c feature\uba85\uc744 \uac00\uc9c0\uace0 \uc788\ub294 `features_info.txt` \ud30c\uc77c\uc740 \uc911\ubcf5\ub41c feature\uba85\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ub530\ub77c\uc11c \uc911\ubcf5\ub41c \ud53c\ucc98\uba85\uc5d0 \ub300\ud574\uc120 \uc6d0\ubcf8 \ud53c\ucc98\uba85\uc5d0 _1 \ub610\ub294 _2\ub97c \ucd94\uac00\ub85c \ubd80\uc5ec\ud574 \ubcc0\uacbd\ud55c \ub4a4\uc5d0 \uc774\ub97c \uc774\uc6a9\ud574 load\ud558\uaca0\uc2b5\ub2c8\ub2e4.","fef8e0a1":"## [Tutorial] Human Activity Recognition Using Smartphone (\uc0ac\uc6a9\uc790 \ud589\ub3d9 \uc778\uc2dd)\n### \ucc45 <\ud30c\uc774\uc36c \uba38\uc2e0\ub7ec\ub2dd \uc644\ubcbd \uac00\uc774\ub4dc> \ud544\uc0ac \ucf54\ub4dc\uc785\ub2c8\ub2e4.\n","79dbaf39":"\uacb0\uc815 \ud2b8\ub9ac\uc758 \uc815\ud655\ub3c4\ub294 \uc57d 85.48%\ub97c \ub098\ud0c0\ub0b4\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\n<br>\n\uc774\ubc88\uc5d0\ub294 \uacb0\uc815 \ud2b8\ub9ac\uc758 \ud2b8\ub9ac \uae4a\uc774\uac00 \uc608\uce21 \uc815\ud655\ub3c4\uc5d0 \uc8fc\ub294 \uc601\ud5a5\uc744 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\uacb0\uc815 \ud2b8\ub9ac\uc758 \uacbd\uc6b0 \ubd84\ub958\ub97c \uc704\ud574 leaf nod\uac00 \ub420 \uc218 \uc788\ub294 \uc801\ud569\ud55c \uc218\uc900\uc774 \ub420 \ub54c\uae4c\uc9c0 \uc9c0\uc18d\ud574\uc11c \ud2b8\ub9ac\uc758 \ubd84\ud560\uc744 \uc218\ud589\ud558\uba74\uc11c \uae4a\uc774\uac00 \uae4a\uc5b4\uc9c4\ub2e4\uace0 \ub9d0\ud588\uc2b5\ub2c8\ub2e4.\n\nGridSearchCV\ub97c \uc774\uc6a9\ud574 \uacb0\uc815 \ud2b8\ub9ac\uc758 \uae4a\uc774\ub97c \uc870\uc808\ud560 \uc218 \uc788\ub294 `max_depth` \uac12\uc744 \ubcc0\ud654\ud558\uba74\uc11c \uc608\uce21 \uc131\ub2a5\uc744 \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4."}}