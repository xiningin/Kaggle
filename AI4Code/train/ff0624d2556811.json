{"cell_type":{"ca6d2e02":"code","7d0561b6":"code","08376524":"code","1570ac22":"code","88322725":"code","a654f2bd":"code","c0804d2b":"code","96da668c":"code","99f0ce29":"code","5282a21d":"code","152d087c":"code","8419e5f0":"code","6e61f8b4":"code","c6c6bff4":"code","e1f4cd44":"markdown","07fd761a":"markdown","25b64a7e":"markdown","77fe318d":"markdown","e2247153":"markdown","e4bf6917":"markdown","fd5c69d1":"markdown","c67f209a":"markdown","75908925":"markdown","c9798ca7":"markdown","d9674f3d":"markdown"},"source":{"ca6d2e02":"import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport plotly.express as px\nfrom plotly import graph_objs as go\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm \nimport cv2\nimport pydicom as dicom\nimport tqdm\nimport plotly.express as px\nfrom colorama import Fore, Back, Style\ny_ = Fore.GREEN\nr_ = Fore.YELLOW\ng_ = Fore.CYAN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nsr_ = Style.RESET_ALL","7d0561b6":"PATH = '..\/input\/lish-moa\/'","08376524":"train_df = pd.read_csv('{}train_features.csv'.format(PATH))\ntrain_targets_nonscored = pd.read_csv('{}train_targets_nonscored.csv'.format(PATH))\ntrain_targets_scored = pd.read_csv('{}train_targets_scored.csv'.format(PATH))\ntest_df = pd.read_csv('{}test_features.csv'.format(PATH))\nsample = pd.read_csv('{}sample_submission.csv'.format(PATH))","1570ac22":"print(f\"{y_}Number of rows in train data: {r_}{train_df.shape[0]}\\n{y_}Number of columns in train data: {r_}{train_df.shape[1]}\")\nprint(f\"{g_}Number of rows in test data: {r_}{test_df.shape[0]}\\n{g_}Number of columns in test data: {r_}{test_df.shape[1]}\")\nprint(f\"{b_}Number of rows in submission data: {r_}{sample.shape[0]}\\n{b_}Number of columns in submission data:{r_}{sample.shape[1]}\")","88322725":"sample.head().style.applymap(lambda x: 'background-color:khaki')","a654f2bd":"test_df.head().style.applymap(lambda x: 'background-color:wheat')","c0804d2b":"train_df.head().style.applymap(lambda x: 'background-color:LightSalmon')","96da668c":"train_targets_nonscored.head().style.applymap(lambda x: 'background-color:Tomato')","99f0ce29":"train_targets_scored.head().style.applymap(lambda x: 'background-color:Plum')","5282a21d":"top = Counter([ i for i in train_df['cp_dose']])\ntemp = pd.DataFrame(top.most_common(10))\ntemp.columns = ['cp_dose','count']\ntemp.style.background_gradient(cmap='Reds')","152d087c":"top = Counter([ i for i in train_df['cp_type']])\ntemp = pd.DataFrame(top.most_common(10))\ntemp.columns = ['cp_type','count']\ntemp.style.background_gradient(cmap='Greens')","8419e5f0":"train_df['dataset'] = 'train'\ntest_df['dataset'] = 'test'\ndf = pd.concat([train_df, test_df])\nds = df.groupby(['cp_type', 'dataset'])['sig_id'].count().reset_index()\nds.columns = ['cp_type', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='cp_type', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='cp_type in train\/test counts', \n    width=600,\n    height=500\n)\nfig.show()","6e61f8b4":"train_df['dataset'] = 'train'\ntest_df['dataset'] = 'test'\ndf = pd.concat([train_df, test_df])\nds = df.groupby(['cp_dose', 'dataset'])['sig_id'].count().reset_index()\nds.columns = ['cp_dose', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='cp_dose', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='cp_dose in train\/test counts', \n    width=600,\n    height=500\n)\nfig.show()","c6c6bff4":"ds = df.groupby(['cp_time', 'dataset'])['sig_id'].count().reset_index()\nds.columns = ['cp_time', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='cp_time', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='cp_time in train\/test counts', \n    width=600,\n    height=500\n)\nfig.show()","e1f4cd44":"### In the next version, we will implement the metric and the basic solution to the problem)","07fd761a":"### Compare the \u0441ount of Cp_type in training and test data","25b64a7e":"### \u0441ount of species cp_dose in train data","77fe318d":"### Compare the \u0441ount of Cp_dose in training and test data","e2247153":"The aim of this challenge is to \u201cclassify drugs based on their biological activity\u201d. Pharmaceutical drug discovery aims to identify certain proteins that are associated with a specific disease, and then to develop molecules that can target those proteins. The MoA of a molecule encodes its biological activity. Our dataset describes the response of 100 different types of human cells to various drugs. Those response patterns will be used to classify the MoA reponse. Note, that drugs can have multiple MoA annotations.\n\nThis is a multi-label classification problem. The evaluation metric is the mean columnwise log loss.","e4bf6917":"![](https:\/\/saratov24.tv\/upload\/iblock\/e83\/e8373183d6c272a23427a0c2ae66c445.jpg)","fd5c69d1":"# EDA","c67f209a":"### Compare the \u0441ount of Cp_time in training and test data","75908925":"### \u0441ount of species cp_dose in train data","c9798ca7":"### Welcome","d9674f3d":"# Introduction"}}