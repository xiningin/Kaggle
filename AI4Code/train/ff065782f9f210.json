{"cell_type":{"13d28a55":"code","ccfe433b":"code","ab94b702":"code","b6bbf761":"code","13f3e9ca":"code","0caaa457":"code","2de85bab":"code","d8483f50":"code","2ce9759c":"code","8bac14ba":"code","906c639c":"code","1fd45973":"code","75e4abe4":"code","8a935226":"code","76701ca6":"code","85582607":"code","fb49e4f3":"code","aef45b69":"code","dca6c79e":"code","4cf274a9":"code","5fb96e6c":"code","5c4d0f39":"code","357e722f":"code","fd9d99f5":"code","2eb0cd71":"code","d5518765":"code","7c6f0946":"code","af7dc58b":"code","2ea7b6fd":"code","61ee040b":"code","251867c4":"code","ebf3e3ec":"code","d6f2c087":"code","0fcbfafb":"code","2258a810":"code","516c849b":"code","69645a83":"code","8920121a":"code","10ada584":"code","ab59c65b":"code","15c3bf8f":"code","3babed4a":"code","66dad5b1":"code","13f5eac9":"code","4d02e28d":"code","659bd763":"code","d2209837":"code","56b67878":"code","2a332b7a":"code","554826c6":"code","595d73fe":"code","cc95f4fa":"code","5d8435c9":"code","cf5c5e4c":"code","35c7020c":"code","9df279f3":"code","140317a9":"code","bddbd478":"code","5e6da25c":"code","c4f2af73":"markdown","b00d0562":"markdown","fff9bcfd":"markdown","8d5322af":"markdown","7f2da8d0":"markdown","021a1943":"markdown","8ba0ec54":"markdown","9b433b10":"markdown","05fd8e95":"markdown","6f23a36d":"markdown","a44d5721":"markdown","7c0f0b2c":"markdown","bf226244":"markdown","220bdf43":"markdown","a8340c06":"markdown","660b4792":"markdown","834ad996":"markdown","dfcaf687":"markdown","4e2eaeed":"markdown","999791c7":"markdown","41b7d384":"markdown","a735d009":"markdown","72b90c28":"markdown","70f6e03c":"markdown"},"source":{"13d28a55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ccfe433b":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\npd.pandas.set_option('display.max_columns', None)\n\nimport nltk\nimport re\nnltk.download('punkt')\nnltk.download('stopwords')\nnltk.download('wordnet')\n\nfrom nltk.stem import PorterStemmer\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nimport spacy\nnlp = spacy.load('en_core_web_sm')\n\nfrom textblob import Word, TextBlob\n\nnltk.download('stopwords')\nnltk.download('wordnet')\nstop_words = stopwords.words('english')\n","ab94b702":"df = pd.read_csv('..\/input\/pfizer-vaccine-tweets\/vaccination_tweets.csv')\ndf.head()","b6bbf761":"df.shape","13f3e9ca":"df.isnull().sum()","0caaa457":"df.drop(['id', 'user_description', 'hashtags'], axis = 1, inplace = True)\ndf.head()","2de85bab":"# Create a function to clean the tweets\ndef cleanTxt(text):\n    text = re.sub('@[A-Za-z0\u20139]+', '', text) #Removing @mentions\n    text = re.sub('#', '', text) # Removing '#' hash tag\n    text = re.sub('RT[\\s]+', '', text) # Removing RT\n    text = re.sub('https?:\\\/\\\/\\S+', '', text) # Removing hyperlink\n \n    return text\n\n# Clean the tweets\ndf['text'] = df['text'].apply(cleanTxt)\n\n# Show the cleaned tweets\ndf.head()\n\n","d8483f50":"# Create a function to get the subjectivity\ndef getSubjectivity(text):\n    return TextBlob(text).sentiment.subjectivity\n\n# Create a function to get the polarity\ndef getPolarity(text):\n    return  TextBlob(text).sentiment.polarity\n","2ce9759c":"# Create two new columns 'Subjectivity' & 'Polarity'\ndf['Subjectivity'] = df['text'].apply(getSubjectivity)\ndf['Polarity'] = df['text'].apply(getPolarity)\n\ndf\n\n","8bac14ba":"#Segregating tweets to positive and negative\ndef getAnalysis(score):\n  if score < 0:\n    return 'Negative'\n  elif score == 0:\n    return 'Neutral'\n  else:\n    return 'Positive'\n\ndf['Analysis'] = df['Polarity'].apply(getAnalysis)\n\n# Show the dataframe\ndf\n","906c639c":"# Word cloud visualization\nfrom wordcloud import WordCloud\n\nallWords = ' '.join([twts for twts in df['text']])\nwordCloud = WordCloud(width=500, height=300, random_state=21, max_font_size=110).generate(allWords)\nplt.figure(figsize = (18,18))\n\nplt.imshow(wordCloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()\n","1fd45973":"# Plotting \nplt.figure(figsize=(15,10)) \nfor i in range(0, df.shape[0]):\n    plt.scatter(df[\"Polarity\"][i], df[\"Subjectivity\"][i], color='Red') \nplt.title('Sentiment Analysis') \nplt.xlabel('Polarity') \nplt.ylabel('Subjectivity') \nplt.show()\n","75e4abe4":"#To plot pie chart\n\ncounts = df['Analysis'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df['Analysis'].value_counts(), labels = df['Analysis'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","8a935226":"df.isnull().sum()","76701ca6":"#Replace Missing values with a new label(Categorical features)\n#features_na contains values with missing categorical features\nfeatures_na = [features for features in df.columns if df[features].isnull().sum() > 1 and df[features].dtypes == 'O']\ndef replace(df, features_na):\n    data = df.copy()\n    data[features_na] = data[features_na].fillna('Missing') #NaN values replaced by Missing\n    return data\n\ndf = replace(df, features_na)\n\ndf[features_na].isnull().sum() #to check if any NaN values exist\n\n  \n","85582607":"\ndf['user_location'].value_counts().sort_values(ascending=False).head(30)\n","fb49e4f3":"df.isnull().sum()","aef45b69":"df = df.dropna()","dca6c79e":"df.isnull().sum()","4cf274a9":"df","5fb96e6c":"#To plot pie chart\n\ncounts = df['user_verified'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df['user_verified'].value_counts(), labels = df['user_verified'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","5c4d0f39":"df_verified = df[df['user_verified'] == True]\n\ndf_verified","357e722f":"df_unverified = df[df['user_verified'] == False]\n\ndf_unverified","fd9d99f5":"# word cloud visualization\nfrom wordcloud import WordCloud\n\nallWords = ' '.join([twts for twts in df_verified['text']])\nwordCloud = WordCloud(width=500, height=300, random_state=21, max_font_size=110).generate(allWords)\nplt.figure(figsize = (20,20))\n\nplt.imshow(wordCloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()\n","2eb0cd71":"# word cloud visualization\nfrom wordcloud import WordCloud\n\nallWords = ' '.join([twts for twts in df_unverified['text']])\nwordCloud = WordCloud(width=500, height=300, random_state=21, max_font_size=110).generate(allWords)\nplt.figure(figsize = (20,20))\n\nplt.imshow(wordCloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()\n","d5518765":"#To plot pie chart\n\ncounts = df_verified['Analysis'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df_verified['Analysis'].value_counts(), labels = df_verified['Analysis'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","7c6f0946":"#To plot pie chart\n\ncounts = df_unverified['Analysis'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df_unverified['Analysis'].value_counts(), labels = df_unverified['Analysis'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","af7dc58b":"df_positive = df[df['Analysis'] == 'Positive']\n\ndf_positive","2ea7b6fd":"df_neg = df[df['Analysis'] == 'Negative']\n\ndf_neg","61ee040b":"df_neu = df[df['Analysis'] == 'Neutral']\n\ndf_neu","251867c4":"# word cloud visualization\nfrom wordcloud import WordCloud\n\nallWords = ' '.join([twts for twts in df_positive['text']])\nwordCloud = WordCloud(width=500, height=300, random_state=21, max_font_size=110).generate(allWords)\nplt.figure(figsize = (20,20))\n\nplt.imshow(wordCloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()\n","ebf3e3ec":"# word cloud visualization\nfrom wordcloud import WordCloud\n\nallWords = ' '.join([twts for twts in df_neg['text']])\nwordCloud = WordCloud(width=500, height=300, random_state=21, max_font_size=110).generate(allWords)\nplt.figure(figsize = (20,20))\n\nplt.imshow(wordCloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()\n","d6f2c087":"# word cloud visualization\nfrom wordcloud import WordCloud\n\nallWords = ' '.join([twts for twts in df_neu['text']])\nwordCloud = WordCloud(width=500, height=300, random_state=21, max_font_size=110).generate(allWords)\nplt.figure(figsize = (20,20))\n\nplt.imshow(wordCloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()\n","0fcbfafb":"df['is_retweet'].unique()","2258a810":"df.drop(['is_retweet'], axis = 1, inplace = True)\n\ndf","516c849b":"df['source'].value_counts()","69645a83":"df_iPhone = df[df['source'] == 'Twitter for iPhone']\ndf_webApp = df[df['source'] == 'Twitter Web App']\ndf_android = df[df['source'] == 'Twitter for Android']\n\n","8920121a":"#To plot pie chart\n\ncounts = df_iPhone['Analysis'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df_iPhone['Analysis'].value_counts(), labels = df_iPhone['Analysis'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","10ada584":"#To plot pie chart\n\ncounts = df_webApp['Analysis'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df_webApp['Analysis'].value_counts(), labels = df_webApp['Analysis'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","ab59c65b":"#To plot pie chart\n\ncounts = df_android['Analysis'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df_android['Analysis'].value_counts(), labels = df_android['Analysis'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","15c3bf8f":"df.head()","3babed4a":"df_unverified.describe()","66dad5b1":"df_unverified_1 = df_unverified[df_unverified['user_followers'] < 1360]\ndf_unverified_2 = df_unverified[df_unverified['user_followers'] >= 1360]","13f5eac9":"df_unverified_1.shape","4d02e28d":"df_unverified_2.shape","659bd763":"#To plot pie chart\n\ncounts = df_unverified_1['Analysis'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df_unverified_1['Analysis'].value_counts(), labels = df_unverified_1['Analysis'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","d2209837":"#To plot pie chart\n\ncounts = df_unverified_2['Analysis'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df_unverified_2['Analysis'].value_counts(), labels = df_unverified_2['Analysis'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","56b67878":"df_verified.describe()","2a332b7a":"df_verified_1 = df_verified[df_verified['user_followers'] < 4.611270e+05]\ndf_verified_2 = df_verified[df_verified['user_followers'] >= 4.611270e+05]","554826c6":"#To plot pie chart\n\ncounts = df_verified_1['Analysis'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df_verified_1['Analysis'].value_counts(), labels = df_verified_1['Analysis'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","595d73fe":"#To plot pie chart\n\ncounts = df_verified_2['Analysis'].value_counts().sort_index()\nprint(counts)\n# Plot a pie chart\nplt.figure(figsize = (10,8))\nplt.pie(df_verified_2['Analysis'].value_counts(), labels = df_verified_2['Analysis'].value_counts().index, autopct=\"%.1f%%\")\n\nplt.legend()\nplt.show()\n","cc95f4fa":"df_positive_1 = df_positive.copy()\ndf_negative_1 = df_neg.copy()\ndf_neutral_1 = df_neu.copy()\n\n\ndf_positive_1 = df_positive[df_positive['user_location'] != 'Missing']\ndf_negative_1 = df_neg[df_neg['user_location'] != 'Missing']\ndf_neutral_1 = df_neu[df_neu['user_location'] != 'Missing']\n\n","5d8435c9":"df_positive_1.shape","cf5c5e4c":"df_negative_1.shape","35c7020c":"df_neutral_1.shape","9df279f3":"\nplt.figure(figsize = (10,7))\nchains = df_positive_1['user_location'].value_counts()[:20] #top 20\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"Location (Positive)\")\nplt.xlabel(\"Number of outlets\")\n","140317a9":"\nplt.figure(figsize = (10,7))\nchains = df_negative_1['user_location'].value_counts()[:20] #top 20\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"Location (Negative)\")\nplt.xlabel(\"Number of outlets\")\n","bddbd478":"\nplt.figure(figsize = (10,7))\nchains = df_neutral_1['user_location'].value_counts()[:20] #top 20\nsns.barplot(x = chains, y = chains.index)\nplt.title(\"Location (Neutral)\")\nplt.xlabel(\"Number of outlets\")\n","5e6da25c":"# To plot the correlation chart\n\ncorrelations = df.corr()\nf,ax = plt.subplots(figsize=(20,20))\nsns.heatmap(correlations, annot = True)\n","c4f2af73":"# Verified vs Unverified user distribution","b00d0562":"# Sentiment distribution of verified users with higher no. of followers (> 75 percentile)","fff9bcfd":"# Word Cloud for Positive Tweets","8d5322af":"# Sentiment Distribution","7f2da8d0":"# Sentiment Distribution based on location","021a1943":"# Negative Sentiment Distribution based on location ","8ba0ec54":"# Android","9b433b10":"# Word Cloud for Negative Tweets","05fd8e95":"# Sentiment Distribution plot","6f23a36d":"# Word Cloud for verified accounts","a44d5721":"# Word Cloud","7c0f0b2c":"# Sentiment Distribution for verified accounts","bf226244":"# Sentiment distribution of verified users with lower no. of followers (< 75 percentile)","220bdf43":"# Sentiment Distribution for unverified accounts","a8340c06":"# Positive Sentiment Distribution based on location ","660b4792":"**Dropping is_retweet as all values are false**","834ad996":"# Word Cloud for Neutral Tweets","dfcaf687":"# iPhone vs webApp vs android (Nothing conclusive)","4e2eaeed":"# Neutral Sentiment Distribution based on location ","999791c7":"# Sentiment distribution of unverified users with higher no. of followers (>1360, 75%)","41b7d384":"# Sentiment distribution of unverified users with lower no. of followers (<1360, 75%)","a735d009":"# iPhone","72b90c28":"# Web App","70f6e03c":"# Word Cloud for unverified accounts"}}