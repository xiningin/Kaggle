{"cell_type":{"60ac400c":"code","668c7d89":"code","e254aea3":"code","a5c7c4c2":"code","75167f35":"code","0ead5d8f":"code","ef90451f":"code","437ec00a":"code","3106b7f1":"code","8252fce2":"code","5348e605":"code","0a887fe7":"code","31d12b81":"code","aa9c602e":"markdown","d83c9de5":"markdown","cd6f461c":"markdown","61797282":"markdown","8e9a29e9":"markdown","40c96bef":"markdown","871b7205":"markdown","4e3b1b4b":"markdown","d7e64acb":"markdown","a23ec262":"markdown","ca56b305":"markdown"},"source":{"60ac400c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","668c7d89":"## common imports\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import recall_score\n\n## to plot pretty figures\n%matplotlib inline\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nmpl.rc('axes', labelsize=14)\nmpl.rc('xtick', labelsize=12)\nmpl.rc('ytick', labelsize=12)","e254aea3":"df = pd.read_csv('\/kaggle\/input\/creditcardfraud\/creditcard.csv')","a5c7c4c2":"print('Dataset dimensions:',df.shape)\ndf.info()\ndf.describe()","75167f35":"df.hist(bins=50,figsize=[20,20])\nplt.show()","0ead5d8f":"## Apply z-score standardization (with mean of 0 and standard deviation of 1) on the column 'Amount'.\n\nscaler = StandardScaler()\namount = df['Amount'].values\ndf['Amount'] = scaler.fit_transform(amount.reshape(-1,1))","ef90451f":"X = df.drop(['Time','Class'],axis=1).values\ny= df['Class'].values","437ec00a":"X_train,X_test,y_train,y_test = train_test_split(X,y,stratify=y,random_state=42)","3106b7f1":"lr = LogisticRegression(random_state=42,max_iter=1000)\nlr.fit(X_train,y_train)\ny_prob_lr = lr.predict_proba(X_test)\ny_pred_lr = lr.predict(X_test)","8252fce2":"print('Area Under the Precision-Recall Curve (AUPRC):',roc_auc_score(y_test, y_prob_lr[:, 1]))\nprint('\\n Confusion Matrix:\\n',confusion_matrix(y_test,y_pred_lr))\nprint('\\n',classification_report(y_test,y_pred_lr))","5348e605":"import xgboost as xgb\nxg_clf = xgb.XGBClassifier(use_label_encoder=False,random_state=42)\nxg_clf.fit(X_train,y_train)\ny_prob_xg = xg_clf.predict_proba(X_test)\ny_pred_xg = xg_clf.predict(X_test)","0a887fe7":"print('Area Under the Precision-Recall Curve (AUPRC):',roc_auc_score(y_test, y_prob_xg[:, 1]))\nprint('\\n Confusion Matrix:\\n',confusion_matrix(y_test,y_pred_xg))\nprint('\\n',classification_report(y_test,y_pred_xg))","31d12b81":"classifiers = {\n    'Decision Tree': DecisionTreeClassifier(),\n    'Random Forest': RandomForestClassifier(),\n    'Support Vector Machine': SVC(),\n    'K-Nearest Neighbours': KNeighborsClassifier()\n}\n\n## results to store the Recall_score and F1_score for all classifiers\nresults = pd.DataFrame(columns=['recall_score','F1_socre'])\n\nfor method,func in classifiers.items():\n    func.fit(X_train,y_train)\n    pred = func.predict(X_test)\n    recall = recall_score(y_test,pred)\n    f1 = f1_score(y_test,pred)\n    results.loc[method] = [recall,f1]\n    \nresults.loc['Logistic Regression'] = [recall_score(y_test,y_pred_lr),f1_score(y_test,y_pred_lr)]\nresults.loc['eXtreme Gradient Boosting'] = [recall_score(y_test,y_pred_xg),f1_score(y_test,y_pred_xg)]\n    \nresults","aa9c602e":"XGBoost and Random Forest outperform other classifiers with regards to F1_score. The Area Under Precision-Recall Curve (AUPRC) evaluation of the XGBoost model is 0.9768 with all hyperparameters set as default.","d83c9de5":"It seems that all PCA columns V1-V28 are normally distributed with mean around 0, with some columns might be (left or right)skewed.\nThe columns time and amount have much greater scale. We will need to apply standardization on the column Amount.","cd6f461c":"## EDA - Visualization","61797282":"## Train Test Split","8e9a29e9":"From above confusion matrix, in the test set (71202 transactions) there are 123 fraudulent transactions, from which \n95 are correctly identified as fraudulent, and the other 28 transactions are mislabelled as non-fraudulent. 77% of \npositive cases have been picked up (the recall rate is 0.77).","40c96bef":"### Other Classifiers: Decision Tree, Random Forest, SVC, K-Nearest Neighbors","871b7205":"### Logistic Regression","4e3b1b4b":"## Select and train a model","d7e64acb":"## Get the Data","a23ec262":"### eXtreme Gradient Boosting","ca56b305":"## Prepare the data for Machine Learning Algorithms"}}