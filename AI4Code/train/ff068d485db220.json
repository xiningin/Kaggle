{"cell_type":{"cfb4d811":"code","f8b40787":"code","88da0cfc":"code","caa5f026":"code","f37e2dc4":"code","f8fad639":"code","63fecf07":"code","1cc570aa":"code","33154ce7":"code","fd913ad6":"code","7d4b0be5":"code","0986c4b9":"code","8e06e6fd":"markdown","1af1191b":"markdown","2197d762":"markdown","8aa00e7a":"markdown","2fe6d9b6":"markdown","3225f62e":"markdown","af7ffae7":"markdown","78f585cc":"markdown","6f3e2b8b":"markdown","01945bdd":"markdown","42f505ab":"markdown","f19ac7e8":"markdown"},"source":{"cfb4d811":"!pip install kaggle-environments -U","f8b40787":"# run this if using kaggle notebooks\n!cp -r ..\/input\/lux-ai-2021\/* .","88da0cfc":"from kaggle_environments import make\n# pick interesting seed shown in tutorial\n# https:\/\/www.kaggle.com\/stonet2000\/lux-ai-season-1-jupyter-notebook-tutorial\n# env = make(\"lux_ai_2021\", configuration={\"seed\": 562124210, \"loglevel\": 2}, debug=True)\nenv = make(\"lux_ai_2021\", configuration={\"seed\": 562124210, \"loglevel\": 0}, debug=True)","caa5f026":"from lux.game import Game\nfrom lux.game_map import Cell, RESOURCE_TYPES, Position\nfrom lux.constants import Constants\nfrom lux.game_constants import GAME_CONSTANTS\nfrom lux import annotate\nimport math\nimport sys\nimport random","f37e2dc4":"DIRECTIONS = Constants.DIRECTIONS","f8fad639":"north = (\"move\", Constants.DIRECTIONS.NORTH)\neast = (\"move\", Constants.DIRECTIONS.EAST)\nsouth = (\"move\", Constants.DIRECTIONS.SOUTH)\nwest = (\"move\", Constants.DIRECTIONS.WEST)\ncenter = (\"move\", Constants.DIRECTIONS.CENTER)\ncity = (\"city\", )\n# transfer = (\"transfer\", dest_id, resourceType, amount)\npillage = (\"pillage\", )","63fecf07":"research = (\"research\", )\nworker = (\"worker\", )\ncart = (\"cart\", )","1cc570aa":"def unit_action(unit, action):\n    if action[0] == \"move\":\n        return unit.move(action[1])\n    elif action[0] == \"city\":\n        return unit.build_city()\n    elif action[0] == \"pillage\":\n        return unit.pillage()\n    elif action[0] == \"transfer\":\n        return unit.transfer(action[1], action[2], action[3])  # dest_id, resourceType, amount\n    return None\n\n\ndef city_tile_action(city_tile, action):\n    if action[0] == \"research\":\n        return city_tile.research()\n    elif action[0] == \"worker\":\n        return city_tile.build_worker()\n    elif action[0] == \"cart\":\n        return city_tile.build_cart()\n    return None","33154ce7":"game_state = None\n\ndef hand_agent(observation, configuration):\n    \n    global game_state\n\n    ### Do not edit ###\n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state._update(observation[\"updates\"][2:])\n        game_state.id = observation.player\n    else:\n        game_state._update(observation[\"updates\"])\n    \n    ### AI Code goes down here! ### \n    player = game_state.players[observation.player]\n    opponent = game_state.players[(observation.player + 1) % 2]\n    width, height = game_state.map.width, game_state.map.height\n    \n    actions = []\n\n    ### AI Code goes down here! ### \n    player = game_state.players[observation.player]\n    for unit in player.units:\n        # print(unit.id)\n        if unit.can_act():\n            action_tuple = unit_actions[unit.id][observation[\"step\"]]\n            action = unit_action(unit, action_tuple)\n            if action is not None:\n                actions.append(action)   \n    for city in player.cities.values():\n        for city_tile in city.citytiles:\n            # print(city_tile.pos)\n            city_tile_key = f\"ct_{city_tile.pos.x}_{city_tile.pos.y}\"\n            if city_tile.can_act():\n                action_tuple = city_tile_actions[city_tile_key][observation[\"step\"]]\n                action = city_tile_action(city_tile, action_tuple)\n                # print(action)\n                if action is not None:\n                    actions.append(action) \n    # print(actions)\n    return actions","fd913ad6":"city_tile_actions = {}\nfor i in range(32):\n    for j in range(32):\n        city_tile_actions[f\"ct_{i}_{j}\"] = [research] * 400\ncity_tile_actions[\"ct_12_21\"][4] = worker\ncity_tile_actions[\"ct_12_21\"][14] = worker\ncity_tile_actions[\"ct_13_22\"][20] = worker\ncity_tile_actions[\"ct_12_21\"][24] = worker\ncity_tile_actions[\"ct_12_22\"][31] = cart\ncity_tile_actions[\"ct_10_21\"][32] = cart\ncity_tile_actions[\"ct_8_21\"][71] = cart","7d4b0be5":"u_1_actions = [\n    west, north, center, city, west, east, center, west, east, center, \n    west, center, city, west, east, center, south, center, city, west, \n    east, center, west, east, center, west, center, center, city, south, \n    north, center, center, center, center, south, north, center, center, center, \n    \n    north, west, north, center, center, center, city, west, east, west, \n    east, west, center, center, city, north, north, east, west, center, \n    city, north, west, west, west, north, center, center, north, center, \n    center, center, center, center, center, center, center, center, center, center, \n] + [random.choice([north, east, south, west, center]) for _ in range(400)]\nu_3_actions = [\n    center, center, center, center, center, south, east, center, west, east, \n    center, west, east, center, west, east, center, west, north, center, \n    south, east, center, center, center, center, center, center, center, center, \n    south, north, center, center, center, south, north, center, center, center, \n    \n    center, center, center, center, center, center, center, center, center, center, \n    center, center, center, center, center, center, center, center, center, center, \n    center, center, center, center, center, center, center, center, center, center, \n    center, center, center, center, center, center, center, center, center, center, \n] + [random.choice([north, east, south, west, center]) for _ in range(400)]\nu_4_actions = [center] * 10 + [\n    center, center, center, center, center, west, west, east, center, west, \n    center, city, west, east, center, west, east, center, west, east,  \n    center, south, west, east, center, center, center, center, north, north, \n    \n    north, center, west, center, north, center, city, center, south, north, \n    center, west, east, west, east, west, west, city, north, south, \n    north, west, west, north, center, north, center, city, center, center, \n    center, center, center, center, center, center, center, center, \n] + [random.choice([north, east, south, west, center]) for _ in range(400)]\nu_5_actions = [center] * 20 + [\n    center, south, west, center, north, center, center, center, center, center, \n    city, south, north, center, center, center, west, west, center, north, \n    \n    north, center, center, center, center, center, center, west, center, center, \n    south, west, west, north, center, north, center, east, center, east, \n    city, center, center, center, center, center, center, center, center, center, \n    center, center, center, center, center, center, center, center, center, center, \n] + [random.choice([north, east, south, west, center]) for _ in range(400)]\nu_6_actions = [center] * 20 + [\n    center, center, center, center, center, center, center, center, center, center, \n    center, south, center, center, center, west, west, center, north, west, \n    \n    north, center, south, center, city, west, east, west, center, center, \n    city, south, north, south, north, south, south, south, south, south, \n    south, south, south, south, center, west, south, center, center, (\"transfer\", \"u_7\", \"coal\", 20), \n    center, (\"transfer\", \"u_7\", \"coal\", 100), center, center, center, (\"transfer\", \"u_7\", \"coal\", 100), center, center, center, (\"transfer\", \"u_7\", \"coal\", 100), \n    \n    center, center, center, center, (\"transfer\", \"u_7\", \"coal\", 100), center, center, center, center, (\"transfer\", \"u_7\", \"coal\", 100), \n    center, center, center, center, (\"transfer\", \"u_9\", \"coal\", 100), center, center, center, center, (\"transfer\", \"u_9\", \"coal\", 100), \n    center, center, center, center, (\"transfer\", \"u_9\", \"coal\", 100), center, center, center, center, (\"transfer\", \"u_9\", \"coal\", 100), \n    center, center, center, center, (\"transfer\", \"u_9\", \"coal\", 100), center, center, center, center, (\"transfer\", \"u_9\", \"coal\", 100), \n    \n    center, center, center, center, (\"transfer\", \"u_9\", \"coal\", 100), center, center, center, center, (\"transfer\", \"u_9\", \"coal\", 100), \n] + [random.choice([north, east, south, west, center]) for _ in range(400)]\nu_7_actions = [center] * 30 + [\n    center, center, west, west, center, center, center, center, center, center, \n    \n    west, west, center, center, south, center, south, center, south, center, \n    center, south, center, south, center, south, center, center, south, center, \n    south, center, west, center, center, west, center, east, center, center, \n    center, center, center, center, center, center, center, center, center, center, \n    \n    center, center, center, center, center, center, center, center, center, center, \n    center, center, center, east, north, north, north, north, north, center, \n    north, north, north, north, center, center, center, center, center, center, \n    center, center, center, center, center, center, center, center, center, center, \n    \n] + [random.choice([north, east, south, west, center]) for _ in range(400)]  # cart\nu_8_actions = [center] * 30 + [\n    center, center, center,  center, center, center, center, center, center, center, \n    \n    west, west, center, center, north, center, north, center, north, center, \n    center, north, center, west, center, west, center, center, west, center, \n    west, center, north, center, center, north, center, center, east, center, \n    center, center, center, center, center, center, center, center, center, center, \n] + [random.choice([north, east, south, west, center]) for _ in range(400)]  # cart\nu_9_actions = [center] * 80 + [\n    south, south, south, center, south, center, south, south, center, south, \n    south, center, south, west, south, center, center, center, center, center, \n    center, center, center, center, center, center, center, center, center, center, \n    center, center, center, center, center, center, center, center, center, center, \n    \n    center, center, center, center, center, center, center, center, center, center, \n    center, center, center, center, center, center, center, center, center, center, \n    center, center, center, center, center, center, center, center, center, center, \n    center, center, center, center, center, center, center, center, center, center, \n] + [random.choice([north, east, south, west, center]) for _ in range(400)]  # cart\nunit_actions = {\n    'u_1': u_1_actions, \n    'u_3': u_3_actions, \n    'u_4': u_4_actions,\n    'u_5': u_5_actions, \n    'u_6': u_6_actions, \n    'u_7': u_7_actions, \n    'u_8': u_8_actions, \n    'u_9': u_9_actions, \n}","0986c4b9":"env.reset()\n_ = env.run([hand_agent, \"simple_agent\"])\nenv.render(mode=\"ipython\", width=800, height=600)","8e06e6fd":"## Run and Watch\nand edit commans and run and edit commands and run and ...","1af1191b":"## Imports\nsee [tutorial notebook](https:\/\/www.kaggle.com\/stonet2000\/lux-ai-season-1-jupyter-notebook-tutorial) for details. ","2197d762":"# Issues found","8aa00e7a":"function to return command","2fe6d9b6":"## Motivation\n\nIn this note we show an example played by hand.  \nI hope this helps you understand environments and strategies.   \n\nYou will feel tired if you write commands by hand one by one. If so, it's time for you to write your program.  \n\n\nReference: \n- Turorial: https:\/\/www.kaggle.com\/stonet2000\/lux-ai-season-1-jupyter-notebook-tutorial\n- API: https:\/\/github.com\/Lux-AI-Challenge\/Lux-Design-2021\/blob\/master\/kits\/README.md\n- lux-ai-specifications: https:\/\/www.kaggle.com\/c\/lux-ai-2021\/overview\/lux-ai-specifications","3225f62e":"## My Commands\nWe should return list of commands(strings) such as 'm u_1 w'(unit u_1 move west) or 'r 13 22'(citytile at (13, 22) research).  \nIt seems hard to make right command from outside, so I use my command and make functions that refers a unit and returns a command.  ","af7ffae7":"## Hand Agent\nrefer unit_actions and city_tile_actions writtten in my commands defined below","78f585cc":"actions for units(workers and carts), default is random move","6f3e2b8b":"My commands fot units","01945bdd":"actions for citytiles, default is research","42f505ab":"Specs are updated and fixed, Great!","f19ac7e8":"My command for citytiles"}}