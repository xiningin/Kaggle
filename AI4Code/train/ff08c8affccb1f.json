{"cell_type":{"1f7fe7d9":"code","fb1b8335":"code","19dfa8d0":"code","77a2853f":"code","6ad4ad5e":"code","1d357a88":"code","d6f0bac2":"code","2503433a":"code","385e75d4":"code","3d899ca7":"code","fce9520b":"code","3c832514":"code","0bea5230":"code","e4f7a28d":"code","9c20c206":"code","6f67ee83":"code","571c097e":"code","3cfe1150":"code","82359c59":"code","91f7d9d9":"code","f82532fd":"code","f12393af":"code","5e8fcfea":"code","0620d85e":"code","c5304e59":"code","8285e6ac":"code","c529f97e":"code","dcac8756":"code","cb755a4a":"code","2dc310d7":"markdown","1c60a45c":"markdown","90b1e376":"markdown","cfe7c4f6":"markdown","7c938659":"markdown","2902e204":"markdown","140e1f55":"markdown","dd9893bd":"markdown","2fd975ca":"markdown","987797ac":"markdown","77fb6908":"markdown","1275e7b1":"markdown","a13a8017":"markdown"},"source":{"1f7fe7d9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb1b8335":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport keras\nimport PIL\nfrom PIL import Image\nfrom keras.preprocessing import image_dataset_from_directory\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Flatten,Conv2D,MaxPool2D,Dropout , BatchNormalization, Activation\n","19dfa8d0":"print(np.asarray(Image.open(\"\/kaggle\/input\/brain-tumor-classification-mri\/Testing\/glioma_tumor\/image.jpg\")).shape)\nImage.open(\"\/kaggle\/input\/brain-tumor-classification-mri\/Testing\/glioma_tumor\/image.jpg\")","77a2853f":"train_data = image_dataset_from_directory(directory = \"\/kaggle\/input\/brain-tumor-classification-mri\/Training\",labels =\"inferred\",label_mode = 'categorical',image_size=(224, 224))\ntest_data = image_dataset_from_directory(directory = \"\/kaggle\/input\/brain-tumor-classification-mri\/Testing\",labels =\"inferred\",label_mode = 'categorical',image_size=(224, 224))","6ad4ad5e":"# Build model\n\nmodel=Sequential()\n# layer 1\nmodel.add(Conv2D(128,kernel_size=(5,5),\n                 strides=1,padding='same',activation='relu',input_shape=(224,224,3)))\nmodel.add(MaxPool2D(pool_size=(3,3),strides=2,padding='same'))\n\n# layer 2 \nmodel.add(Conv2D(64,kernel_size=(2,2),\n                strides=1,activation='relu',padding='same'))\nmodel.add(MaxPool2D((2,2),2,padding='same'))\n\n#layer 3\nmodel.add(Conv2D(32,kernel_size=(2,2),\n                strides=1,activation='relu',padding='same'))\nmodel.add(MaxPool2D((2,2),2,padding='same'))\n\n# flatten image\nmodel.add(Flatten())\n\n# dense layers\nmodel.add(Dense(units=512,activation='relu'))\nmodel.add(Dropout(rate=0.25))\n\n# output layer\nmodel.add(Dense(units=4,activation='softmax'))\n\n# view model summary\nmodel.summary()\n\n# compile data\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","1d357a88":"model.fit(train_data, epochs=10, validation_data=test_data)","d6f0bac2":"# Model after first 10 epochs\nmodel.evaluate(test_data)[1]","2503433a":"model.fit(train_data, epochs=30, validation_data=test_data)","385e75d4":"model.evaluate(test_data)[1]","3d899ca7":"# Build model\n\nmodel=Sequential()\n# layer 1\nmodel.add(Conv2D(128,kernel_size=(5,5),\n                 strides=1,padding='same',activation='relu',input_shape=(224,224,3)))\nmodel.add(MaxPool2D(pool_size=(3,3),strides=2,padding='same'))\nmodel.add(BatchNormalization())\n\n# layer 2 \nmodel.add(Conv2D(64,kernel_size=(2,2),\n                strides=1,activation='relu',padding='same'))\nmodel.add(MaxPool2D((2,2),2,padding='same'))\nmodel.add(BatchNormalization())\n\n#layer 3\nmodel.add(Conv2D(32,kernel_size=(2,2),\n                strides=1,activation='relu',padding='same'))\nmodel.add(MaxPool2D((2,2),2,padding='same'))\nmodel.add(BatchNormalization())\n\n# flatten image\nmodel.add(Flatten())\n\n# dense layers\nmodel.add(Dense(units=512,activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Activation('relu'))\nmodel.add(Dropout(rate=0.25))\n# output layer\nmodel.add(Dense(units=4,activation='softmax'))\n\n# view model summary\nmodel.summary()\n\n# compile data\nmodel.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","fce9520b":"model.fit(train_data, epochs=30, validation_data=test_data)","3c832514":"temp1 = model.history.history","0bea5230":"plt.plot(temp1[\"loss\"],label ='Traing Loss')\nplt.plot(temp1[\"val_loss\"],label ='Validation Loss')\nplt.legend()\nplt.show()\n\nplt.plot(temp1[\"accuracy\"],label=\"Training Accuracy\")\nplt.plot(temp1[\"val_accuracy\"],label=\"Validation Accuracy\")\nplt.legend()\nplt.show()","e4f7a28d":"model.evaluate(test_data)[1]","9c20c206":"# trainig 2 \nmodel.fit(train_data, epochs=75, validation_data=test_data, batch_size = 75)","6f67ee83":"hist1 = model.history.history","571c097e":"plt.plot(hist1[\"loss\"],label ='Traing Loss')\nplt.plot(hist1[\"val_loss\"],label ='Validation Loss')\nplt.legend()\nplt.show()\n\nplt.plot(hist1[\"accuracy\"],label=\"Training Accuracy\")\nplt.plot(hist1[\"val_accuracy\"],label=\"Validation Accuracy\")\nplt.legend()\nplt.show()","3cfe1150":"model.evaluate(test_data)[1]","82359c59":"train_data = image_dataset_from_directory(directory = \"\/kaggle\/input\/brain-tumor-classification-mri\/Training\",labels =\"inferred\",label_mode = 'categorical',image_size=(299, 299))\ntest_data = image_dataset_from_directory(directory = \"\/kaggle\/input\/brain-tumor-classification-mri\/Testing\",labels =\"inferred\",label_mode = 'categorical',image_size=(299, 299))","91f7d9d9":"from keras.applications import Xception\nfrom keras import Model","f82532fd":"base_model = Xception(include_top=False,input_shape=(299,299,3))\nbase_model.trainable = False","f12393af":"base_model.summary()","5e8fcfea":"flat1 = Flatten()(base_model.layers[-1].output)\nclass1 = Dense(1024, activation='relu')(flat1)\noutput = Dense(4, activation='softmax')(class1)\n# define new model\nmodel = Model(inputs=base_model.inputs, outputs=output)","0620d85e":"model.summary()","c5304e59":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","8285e6ac":"model.fit(train_data, epochs=30, validation_data=test_data)","c529f97e":"hist2 = model.history.history","dcac8756":"plt.plot(hist2[\"loss\"],label ='Traing Loss')\nplt.plot(hist2[\"val_loss\"],label ='Validation Loss')\nplt.legend()\nplt.show()\n\nplt.plot(hist2[\"accuracy\"],label=\"Training Accuracy\")\nplt.plot(hist2[\"val_accuracy\"],label=\"Validation Accuracy\")\nplt.legend()\nplt.show()","cb755a4a":"model.evaluate(test_data)[1]","2dc310d7":"# Training Data ","1c60a45c":"# Create new model by adding batch normalization ","90b1e376":"# View Sample Image ","cfe7c4f6":"# Round two of training after 10 epochs","7c938659":"# Training model with normalisation ","2902e204":"\n\n# Model result after first 10 epochs","140e1f55":"# Model result after second round of training","dd9893bd":"# Training result 2 with visulisation ","2fd975ca":"# Second round of training increasing batch size and epochs","987797ac":"# Importing Data","77fb6908":"# Building Model without normalisation","1275e7b1":"# Visulisation and Result of training","a13a8017":"# Use Xception as a base model"}}