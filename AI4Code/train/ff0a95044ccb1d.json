{"cell_type":{"ddfe2844":"code","59962a8a":"code","703f63ff":"code","b68d7b11":"code","f654a921":"code","94c1e6b5":"code","c0a8c1ee":"code","e74f3419":"code","16b96cc5":"markdown","306370df":"markdown","6e286a8d":"markdown","ee2fd4e8":"markdown"},"source":{"ddfe2844":"import cv2\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\nfrom PIL import Image","59962a8a":"def preprocessing(src):\n  src = np.array(src)\n  src = src.astype('uint8')\n  grayScale = cv2.cvtColor( src, cv2.COLOR_RGB2GRAY )\n  kernel = cv2.getStructuringElement(1,(17,17))\n  blackhat = cv2.morphologyEx(grayScale, cv2.MORPH_BLACKHAT, kernel)\n  ret,thresh2 = cv2.threshold(blackhat,10,255,cv2.THRESH_BINARY)\n  dst = cv2.inpaint(src,thresh2,1,cv2.INPAINT_TELEA)\n  dst = dst.astype('float32')\n  return dst","703f63ff":"train_dir = '..\/input\/skin-cancer-malignant-vs-benign\/train'\ntest_dir = '..\/input\/skin-cancer-malignant-vs-benign\/test'","b68d7b11":"datagen = ImageDataGenerator(rescale=1.\/255,preprocessing_function=preprocessing)\n\ntrain_generator = datagen.flow_from_directory(train_dir,\n                                              class_mode='binary',\n                                              target_size=(224,224),\n                                              color_mode='rgb',\n                                              batch_size=50)\ntest_generator = datagen.flow_from_directory(test_dir,\n                                              class_mode='binary',\n                                              target_size=(224,224),\n                                              color_mode='rgb',\n                                              batch_size=50)","f654a921":"from tensorflow.keras.applications.inception_v3 import InceptionV3\n\ninception = InceptionV3(include_top=False,weights='imagenet',input_shape=(224,224,3))\n\nfor layer in inception.layers:\n    layer.trainable=False\n\nmodel = tf.keras.Sequential([\n              inception,\n              tf.keras.layers.Flatten(),\n              tf.keras.layers.Dense(1,activation='sigmoid')\n])\n","94c1e6b5":"model.summary()","c0a8c1ee":"model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\nclass myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs={}):\n    if(logs.get('accuracy')>0.99):\n      print(\"\\nReached 99% accuracy so cancelling training!\")\n      self.model.stop_training = True\ncallbacks = myCallback()","e74f3419":"history = model.fit_generator(train_generator,epochs=5,validation_data=test_generator,callbacks=[callbacks])","16b96cc5":"# **Making of Model**","306370df":"# **Importing the libraries**","6e286a8d":"# **Training the model**","ee2fd4e8":"# **Preprocessing Function**\n"}}