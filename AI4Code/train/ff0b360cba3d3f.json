{"cell_type":{"483c30b2":"code","256443f1":"code","cd7c70d7":"code","0e77191f":"code","7d82be72":"code","5066b095":"code","b86a6512":"code","569f6d2a":"code","190e03ac":"code","dbfe4b75":"code","6d22b742":"code","97109c20":"code","86534831":"code","ff73b197":"code","b7d05a34":"code","e3d575f3":"code","53f281b8":"code","d23b5284":"code","60ced3b8":"code","0f837340":"code","07dee90c":"code","6005be37":"code","4eb553c5":"code","bb14c269":"code","5ad8c8f3":"code","3cd47e30":"code","b9a53e9c":"markdown","c7427a29":"markdown","e5becdb4":"markdown","22ace125":"markdown","89cd7733":"markdown","66cb73a6":"markdown","6d735578":"markdown","8e729d0e":"markdown","8292d901":"markdown","14a7703a":"markdown","eeb32ff4":"markdown","49f2940d":"markdown","da41a71a":"markdown","5720151d":"markdown","e43e7dfa":"markdown","430a840e":"markdown","46d9b42f":"markdown","f35fb163":"markdown","83c8e226":"markdown","0d1b6eaa":"markdown","ca92a64f":"markdown","ebe21a0a":"markdown","316ae28c":"markdown","87460539":"markdown"},"source":{"483c30b2":"import pandas as pd \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier","256443f1":"data = pd.read_csv(\"..\/input\/daily_weather.csv\")\ndata.head()","cd7c70d7":"# Let's look at the columns in the dataset \ndata.columns","0e77191f":"data.isnull().any().any()","7d82be72":"data.isnull().sum() ","5066b095":"# Print the rows with missing values \ndata[data.isnull().any(axis = 1)]","b86a6512":"# We do not need to number the rows as Pandas provides its's own indexing \ndel data['number']\ndata.columns","569f6d2a":"before_rows = data.shape[0]\ndata = data.dropna()\nafter_rows = data.shape[0]","190e03ac":"print(\"The number of dropped rows are {}\".format(before_rows - after_rows))","dbfe4b75":"clean_data = data.copy() # New data frame to avoid confusion \nclean_data['high_humidity_label'] = (clean_data['relative_humidity_3pm'] > 24.99) * 1\nprint(clean_data['high_humidity_label'])","6d22b742":"y = clean_data[['high_humidity_label']].copy()\ny","97109c20":"clean_data['relative_humidity_3pm'].head()","86534831":"y.head()","ff73b197":"time = '9am'\nfeatures = list(clean_data.columns[clean_data.columns.str.contains(time)])\n\n# we do not need relative humidity at 9am \nfeatures.remove('relative_humidity_9am')\n\nfeatures","b7d05a34":"# Make the data of these features as X\nX = clean_data[features].copy()\n#X","e3d575f3":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 324)","53f281b8":"# type(X_train)\n# type(X_test)\n# type(y_train)\n# type(y_test)\n# X_train.head()\n# #y_train.describe()","d23b5284":"y_train.describe()\n","60ced3b8":"X_train.describe()","0f837340":"humidity_classifier = DecisionTreeClassifier(max_leaf_nodes = 10, random_state = 0)\nhumidity_classifier.fit(X_train, y_train)","07dee90c":"type(humidity_classifier)","6005be37":"predictions = humidity_classifier.predict(X_test)\ntype(predictions)","4eb553c5":"predictions[:10]\n#predictions[:len(predictions)]","bb14c269":"y_test[['high_humidity_label']][:10]\n","5ad8c8f3":"accuracy_score(y_test, y_pred = predictions)","3cd47e30":"from sklearn.metrics import mean_squared_error\nmean_squared_error(y_test, y_pred = predictions)","b9a53e9c":"#### Data Cleaning Steps ","c7427a29":"Next, we drop out the rows with null values","e5becdb4":"We have to look for any null values and get rid of those values to make a clean data set","22ace125":"## Classification of Weather Data using scikit-learn\nIn this notebook, we will use scikit-learn to perform a decision tree based classification of weather data.","89cd7733":"<br>Each row in daily_weather.csv captures weather data for a separate day.  <br><br>\nSensor measurements from the weather station were captured at one-minute intervals.  These measurements were then processed to generate values to describe daily weather. Since this dataset was created to classify low-humidity days vs. non-low-humidity days (that is, days with normal or high humidity), the variables included are weather measurements in the morning, with one measurement, namely relatively humidity, in the afternoon.  The idea is to use the morning weather values to predict whether the day will be low-humidity or not based on the afternoon measurement of relative humidity.\n\nEach row, or sample, consists of the following variables:\n\n* **number:** unique number for each row\n* **air_pressure_9am:** air pressure averaged over a period from 8:55am to 9:04am (*Unit: hectopascals*)\n* **air_temp_9am:** air temperature averaged over a period from 8:55am to 9:04am (*Unit: degrees Fahrenheit*)\n* **air_wind_direction_9am:** wind direction averaged over a period from 8:55am to 9:04am (*Unit: degrees, with 0 means coming from the North, and increasing clockwise*)\n* **air_wind_speed_9am:** wind speed averaged over a period from 8:55am to 9:04am (*Unit: miles per hour*)\n* ** max_wind_direction_9am:** wind gust direction averaged over a period from 8:55am to 9:10am (*Unit: degrees, with 0 being North and increasing clockwise*)\n* **max_wind_speed_9am:** wind gust speed averaged over a period from 8:55am to 9:04am (*Unit: miles per hour*)\n* **rain_accumulation_9am:** amount of rain accumulated in the 24 hours prior to 9am (*Unit: millimeters*)\n* **rain_duration_9am:** amount of time rain was recorded in the 24 hours prior to 9am (*Unit: seconds*)\n* **relative_humidity_9am:** relative humidity averaged over a period from 8:55am to 9:04am (*Unit: percent*)\n* **relative_humidity_3pm:** relative humidity averaged over a period from 2:55pm to 3:04pm (*Unit: percent *)\n","66cb73a6":"### Use 9am Sensor signals to predict Humidity at 3PM","6d735578":"Target is now stored as y. Here, target is the label - 'high_humidity_label'","8e729d0e":"Create a Pandas DataFrame to read from a CSV file","8292d901":"We are assigning the values 0 or 1 and adding a new column 'high humidity label'. We are basically classifying the data into two categories ( binary problem ) by setting a desired value ( 24.99 , in this case ) to be the threshold and anything above is high ( 1 ) and anything below is low ( 0 ). ","14a7703a":"### Fit the model on the training set\n\nWe will build a model using the Decision Tree Classifier using the fit functions. ","eeb32ff4":"### Measuring the mean squared error","49f2940d":"## Daily Weather Data Description\n\n\nThe file **daily_weather.csv** is a comma-separated file that contains weather data. This data comes from a weather station located in San Diego, California. The weather station is equipped with sensors that capture weather-related measurements such as air temperature, air pressure, and relative humidity. Data was collected for a period of three years, from September 2011 to September 2014, to ensure that sufficient data for different seasons and weather conditions is captured.\n","da41a71a":"This means that there are sum null values. Let's have a look at the columns which have null values. ","5720151d":"## Convert to a Classification task","e43e7dfa":"**Binarize the relative humidity_3pm to 0 or 1**","430a840e":"We have predictd the humidity at 3PM based on the 9AM measurements with an 81% accuracy and 19% loss which are very good stats. Hence, it's a success. ","46d9b42f":"Let us look at these sets using the following commands below. ","f35fb163":"So, we have the actual values in the y_test result and the predicted values in the predictions set and now we can compare all the predictions with the actual results to see if we were correct or not. Let's find out the accuracy using accuracy_score.","83c8e226":"### Data Cleaning ","0d1b6eaa":"### Test the model on thetesting set\n\n","ca92a64f":"### Measure the accuracy of the data","ebe21a0a":"**Importing necessary libraries**","316ae28c":"### REMINDER: Training Phase\n\n* In the **training phase**, the learning algorithm uses the training data to adjust the model\u2019s parameters to minimize errors.  At the end of the training phase, you get the trained model.\n\n\n* In the **testing phase**, the trained model is applied to test data.  Test data is separate from the training data, and is previously unseen by the model.  The model is then evaluated on how it performs on the test data.  The goal in building a classifier model is to have the model perform well on training as well as test data.\n","87460539":"## Perform the test and Train split"}}