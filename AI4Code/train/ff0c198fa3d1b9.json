{"cell_type":{"9df44576":"code","a2145702":"code","c6e02f7f":"code","7eaf9ff4":"code","22d44003":"code","77c5f0e7":"code","e218678d":"code","758d630f":"code","a40bd12c":"code","f3e7ca7b":"code","9e82b74b":"code","49e82fa4":"code","96cb1287":"code","d7b4d11b":"code","f77fa8dc":"code","d0655a61":"code","e033c7c3":"code","06eb7a57":"code","71c4b571":"code","d53584e1":"code","c59c457a":"code","f8169cd2":"code","1d571894":"code","29e733a6":"code","e73d1167":"code","6aaf2c78":"code","20715633":"code","53cb707b":"code","a793f85a":"code","d17b2946":"code","fb3c9cfc":"code","058cc4b5":"code","57c6edb6":"markdown"},"source":{"9df44576":"import pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split, cross_val_score, RandomizedSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor","a2145702":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","c6e02f7f":"train.head()","7eaf9ff4":"test.head()","22d44003":"train.columns","77c5f0e7":"plt.figure(figsize = (12, 8))\nsns.kdeplot(train['SalePrice'], color = 'darkturquoise', shade= True)\nplt.grid()\nplt.xlabel('Sale Price')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')","e218678d":"plt.figure(figsize = (16, 12))\nsns.heatmap(train.corr(), annot = True)\nplt.title('Correlation matrix')","758d630f":"corr_for_sale_price = train.corr()\ncorr_for_sale_price['SalePrice'].sort_values(ascending=False)","a40bd12c":"plt.figure(figsize = (12, 8))\nsns.boxplot(x = train['OverallQual'], y = train['SalePrice'])\nplt.title('The boxplot for OverallQual')","f3e7ca7b":"plt.figure(figsize = (12, 8))\nsns.boxplot(x = train['YearBuilt'], y = train['SalePrice'])\nplt.title('The boxplot for YearBuilt')\nplt.xticks(rotation=60)","9e82b74b":"plt.figure(figsize = (12, 8))\nsns.scatterplot(x = train['GrLivArea'], y = train['SalePrice'])\nplt.grid()\nplt.title('Scatter plot for GrLivArea')","49e82fa4":"plt.figure(figsize = (12, 8))\nsns.boxplot(x = train['GarageCars'], y = train['SalePrice'])","96cb1287":"def prepare_data(df):\n    if df.dtype=='object':\n        df = df.fillna('N')\n    if df.dtype=='float32' or df.dtype=='float64':\n        df = df.fillna(0)\n    return df\n\ntrain = train.apply(lambda x: prepare_data(x))\ntest = test.apply(lambda x: prepare_data(x))","d7b4d11b":"def garage_area_category(area):\n    if area <= 250:\n        return 1\n    elif 250 < area <= 500:\n        return 2\n    elif 500 < area <= 1000:\n        return 3\n    return 4\ntrain['GarageArea_category'] = train['GarageArea'].apply(garage_area_category)\ntest['GarageArea_category'] = test['GarageArea'].apply(garage_area_category)","f77fa8dc":"def grlivarea_category(area):\n    if area <= 1000:\n        return 1\n    elif 1000 < area <= 2000:\n        return 2\n    elif 2000 < area <= 3000:\n        return 3\n    return 4\ntrain['GrLivArea_category'] = train['GrLivArea'].apply(grlivarea_category)\ntest['GrLivArea_category'] = test['GrLivArea'].apply(grlivarea_category)","d0655a61":"def flrSF_and_bsmt_category(square):\n    if square <= 500:\n        return 1\n    elif 500 < square <= 1000:\n        return 2\n    elif 1000 < square <= 1500:\n        return 3\n    elif 1500 < square <= 2000:\n        return 4\n    return 5\n\ntrain['1stFlrSF_category'] = train['1stFlrSF'].apply(flrSF_and_bsmt_category)\ntrain['2ndFlrSF_category'] = train['2ndFlrSF'].apply(flrSF_and_bsmt_category)\n\ntest['1stFlrSF_category'] = test['1stFlrSF'].apply(flrSF_and_bsmt_category)\ntest['2ndFlrSF_category'] = test['2ndFlrSF'].apply(flrSF_and_bsmt_category)\n\ntrain['BsmtUnfSF_category'] = train['BsmtUnfSF'].apply(flrSF_and_bsmt_category)\ntest['BsmtUnfSF_category'] = test['BsmtUnfSF'].apply(flrSF_and_bsmt_category)","e033c7c3":"def lot_frontage_category(frontage):\n    if frontage <= 50:\n        return 1\n    elif 50 < frontage <= 100:\n        return 2\n    elif 100 < frontage <= 150:\n        return 3\n    return 4\ntrain['LotFrontage_category'] = train['LotFrontage'].apply(lot_frontage_category)\ntest['LotFrontage_category'] = test['LotFrontage'].apply(lot_frontage_category)","06eb7a57":"def lot_area_category(area):\n    if area <= 5000:\n        return 1\n    elif 5000 < area <= 10000:\n        return 2\n    elif 10000 < area <= 15000:\n        return 3\n    elif 15000 < area <= 20000:\n        return 4\n    elif 20000 < area <= 25000:\n        return 5\n    return 6\ntrain['LotArea_category'] = train['LotArea'].apply(lot_area_category)\ntest['LotArea_category'] = test['LotArea'].apply(lot_area_category)","71c4b571":"def year_category(year):\n    if year <= 1910:\n        return 1\n    elif 1910 < year <= 1950:\n        return 2\n    elif 1950 < year <= 1980:\n        return 3\n    elif 1980 < year <= 2000:\n        return 4\n    return 5\n\ntrain['YearBuilt_category'] = train['YearBuilt'].apply(year_category)\ntest['YearBuilt_category'] = test['YearBuilt'].apply(year_category)\n\ntrain['YearRemodAdd_category'] = train['YearRemodAdd'].apply(year_category)\ntest['YearRemodAdd_category'] = test['YearRemodAdd'].apply(year_category)\n\ntrain['GarageYrBlt_category'] = train['GarageYrBlt'].apply(year_category)\ntest['GarageYrBlt_category'] = test['GarageYrBlt'].apply(year_category)","d53584e1":"def vnr_area_category(area):\n    if area <= 250:\n        return 1\n    elif 250 < area <= 500:\n        return 2\n    elif 500 < area <= 750:\n        return 3\n    return 4\n\ntrain['MasVnrArea_category'] = train['MasVnrArea'].apply(vnr_area_category)\ntest['MasVnrArea_category'] = test['MasVnrArea'].apply(vnr_area_category)","c59c457a":"train['AllSF'] = train['GrLivArea'] + train['TotalBsmtSF']\ntest['AllSF'] = test['GrLivArea'] + test['TotalBsmtSF']\n\ndef allsf_category(area):\n    if area < 1000:\n        return 1\n    elif 1000 < area <= 2000:\n        return 2\n    elif 2000 < area <= 3000:\n        return 3\n    elif 3000 < area <= 4000:\n        return 4\n    elif 4000 < area <= 5000:\n        return 5\n    elif 5000 < area <= 6000:\n        return 6\n    return 7\n\ntrain['AllSF_category'] = train['AllSF'].apply(allsf_category)\ntest['AllSF_category'] = test['AllSF'].apply(allsf_category)","f8169cd2":"train = train.drop(['AllSF', 'MasVnrArea', 'GarageYrBlt', 'YearRemodAdd', 'YearBuilt', 'LotArea',\n                   'LotFrontage', '1stFlrSF', '2ndFlrSF', 'BsmtUnfSF', 'Neighborhood', 'BldgType', 'Exterior1st', 'Exterior2nd', \n                   'MiscFeature', 'MiscVal'], axis = 1)\ntest = test.drop(['AllSF', 'MasVnrArea', 'GarageYrBlt', 'YearRemodAdd', 'YearBuilt', 'LotArea',\n                   'LotFrontage', '1stFlrSF', '2ndFlrSF', 'BsmtUnfSF', 'Neighborhood', 'BldgType', 'Exterior1st', 'Exterior2nd',\n                 'MiscFeature', 'MiscVal'], axis = 1)","1d571894":"def object_to_int(df):\n    if df.dtype=='object':\n        df = LabelEncoder().fit_transform(df)\n    return df\ntrain = train.apply(lambda x: object_to_int(x))\ntest = test.apply(lambda x: object_to_int(x))","29e733a6":"dummy_col = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour',\n          'Utilities', 'LotConfig', 'LandSlope', 'Condition1', 'Condition2',\n          'HouseStyle', 'RoofStyle', 'RoofMatl', 'MasVnrType', 'ExterQual', 'ExterCond', \n            'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', \n            'BsmtFinType2', 'BsmtFinSF2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', \n             'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr',\n            'KitchenQual', 'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n            'GarageFinish', 'GarageCars', 'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC',\n            'Fence', 'MoSold', 'YrSold', 'SaleType', 'SaleCondition', 'GarageArea_category', \n             'GrLivArea_category', '1stFlrSF_category', '2ndFlrSF_category', 'BsmtUnfSF_category', 'LotFrontage_category',\n            'LotArea_category', 'YearBuilt_category', 'YearRemodAdd_category', \n             'GarageYrBlt_category', 'MasVnrArea_category', 'AllSF_category']\n#train = pd.get_dummies(train, columns = dummy_col, drop_first = True)","e73d1167":"X = train.drop(['SalePrice'], axis = 1)\ny = train['SalePrice']\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.25, random_state = 12345)","6aaf2c78":"std_col = ['MSSubClass', 'OverallQual', 'OverallCond', 'TotalBsmtSF', \n           'LowQualFinSF', 'GrLivArea', 'GarageArea', 'WoodDeckSF',\n          'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', \n          'PoolArea']\nscaler = StandardScaler()\nscaler.fit(X_train[std_col])\nX_train[std_col] = scaler.transform(X_train[std_col])\nX_valid[std_col] = scaler.transform(X_valid[std_col])\ntest[std_col] = scaler.transform(test[std_col])","20715633":"lr = LinearRegression()\nlr.fit(X_train, y_train)\npredict_lr = lr.predict(X_valid)\nmse_lr = cross_val_score(lr, X_valid, y_valid, scoring = 'neg_mean_squared_error', cv=10)\nrmse_lr = np.sqrt(-mse_lr)\nprint(rmse_lr.mean())","53cb707b":"rf = RandomForestRegressor(random_state = 12345)\nrf.fit(X_train, y_train)\npredict_lrf = lr.predict(X_valid)\nmse_rf = cross_val_score(rf, X_valid, y_valid, scoring = 'neg_mean_squared_error', cv=10)\nrmse_rf = np.sqrt(-mse_rf)\nprint(rmse_rf.mean())","a793f85a":"xgb = XGBRegressor(random_state = 12345)\nxgb.fit(X_train, y_train)\npredict_xgb= xgb.predict(X_valid)\nmse_xgb = cross_val_score(xgb, X_valid, y_valid, scoring ='neg_mean_squared_error', cv=10)\nrmse_xgb= np.sqrt(-mse_xgb)\nprint(rmse_xgb.mean())","d17b2946":"rf_rs = RandomForestRegressor(random_state = 12345)\nparameters_rf = {'n_estimators': range(1, 1800, 25), \n                 'max_depth':range(1, 100), \n                 'min_samples_split': range(1, 12), \n                 'min_samples_leaf': range(1, 12), \n                 'max_features':['auto', 'log2', 'sqrt']}\nsearch_rf = RandomizedSearchCV(rf_rs, parameters_rf, cv=5, scoring = 'neg_mean_squared_error', n_jobs = -1, random_state = 12345)\nsearch_rf.fit(X_train, y_train)\nbest_rf = search_rf.best_estimator_\npredict_rf = best_rf.predict(X_valid)\nmse_rf_rs = cross_val_score(best_rf, X_valid, y_valid, scoring = 'neg_mean_squared_error', cv=10)\nrmse_rf_rs = np.sqrt(-mse_rf_rs)\nprint(rmse_rf_rs.mean())","fb3c9cfc":"xgb_rs = XGBRegressor(random_state = 12345)\nparams_xgb = {'eta': [0.01, 0.05, 0.1, 0.001, 0.005, 0.04, 0.2, 0.0001],  \n                  'min_child_weight':range(1, 5), \n                  'max_depth':range(1, 6), \n                  'learning_rate': [0.01, 0.05, 0.1, 0.001, 0.005, 0.04, 0.2], \n                  'n_estimators':range(0, 2001, 50)}\nsearch_xgb = RandomizedSearchCV(xgb_rs, params_xgb, scoring = 'neg_mean_squared_error',cv=5, random_state = 12345)\nsearch_xgb.fit(X_train, y_train)\nbest_xgb = search_xgb.best_estimator_\npredict_xgb_rs = best_xgb.predict(X_valid)\nmse_xgb_rs = cross_val_score(best_xgb, X_valid, y_valid, scoring=\"neg_mean_squared_error\", cv=10)\nrmse_xgb_rs = np.sqrt(-mse_xgb_rs)\nprint(rmse_xgb_rs.mean())","058cc4b5":"submission = pd.DataFrame({'Id': test['Id'], 'SalePrice': best_rf.predict(test)})\nsubmission.to_csv('Submission.csv', index=False)\nsubmission.head()","57c6edb6":"Data imputation and feature engeneering"}}