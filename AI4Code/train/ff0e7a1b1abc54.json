{"cell_type":{"fdda9825":"code","2a922259":"code","4e4c0fa3":"code","8a55291d":"code","ae2eef8b":"code","5091f800":"code","c0bba2ea":"code","aa65bd7d":"code","d66bba9a":"code","254659eb":"code","3c3b7ca6":"code","975a4e7c":"code","dad42bf1":"code","6d2110bd":"code","d4dfbce3":"code","542e6f3a":"code","303d7505":"code","0bcde500":"code","0659fdf8":"code","eacf670f":"code","63b73fa9":"code","2315baba":"code","b4d41713":"code","6a289399":"code","b9b75ef5":"code","1db6ee27":"code","b050081d":"code","12a487ed":"code","19a7db88":"code","7cd195f1":"code","56701ff5":"code","cd48b967":"code","c34e938d":"code","1f1a6ba2":"code","398dab5c":"code","bdf199f7":"code","e29f76d6":"code","e6651884":"code","5a412620":"code","8bc6bc20":"code","2b234dd5":"code","70e36fc0":"code","abac56c2":"code","dc90a564":"code","9603db86":"code","53827b64":"code","326741f7":"code","ba3b784a":"code","209cd1f3":"code","a4c6456e":"code","7b41fbea":"code","de3223e8":"code","5ab5678b":"code","116d0dc6":"code","c8089a53":"code","64e556ae":"code","7403a0f7":"code","7b19fb2d":"code","912255d9":"code","406dd9f5":"code","00567292":"code","9c963d9b":"code","74ccc880":"code","c25e689e":"markdown","ea161d63":"markdown","06e9a92a":"markdown","e4ce6c58":"markdown","ce491a0e":"markdown","a4bbf7b2":"markdown","0e33ef20":"markdown","32140134":"markdown","e56c4f42":"markdown","43e731ee":"markdown","5ca1e03d":"markdown","e9def735":"markdown","f4762189":"markdown","82b94620":"markdown","797659c0":"markdown","60365ca0":"markdown","d7c9891a":"markdown","96882dae":"markdown","1359a140":"markdown","6f7049f3":"markdown","3f8d832f":"markdown","d6e252ff":"markdown","059eb62c":"markdown","e6382153":"markdown","ceeffd7f":"markdown","89eb18db":"markdown","ba6b0b69":"markdown","b455527e":"markdown","b179bdfe":"markdown","0669f8da":"markdown","e34de3ae":"markdown","5a992e49":"markdown"},"source":{"fdda9825":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom plotly.offline import init_notebook_mode, plot, iplot\nimport plotly.graph_objs as go\nimport surprise\nimport math\n\n%matplotlib inline","2a922259":"rating_df = pd.read_csv('..\/input\/anime-recommendations-database\/rating.csv')\nanime_df = pd.read_csv('..\/input\/anime-recommendations-database\/anime.csv')\n# anime_with_synopsis = pd.read_csv('..\/input\/anime-recommendation-database-2020\/anime_with_synopsis.csv')\n# anime_with_synopsis.drop(['MAL_ID', 'Score', 'Genders'], axis=1, inplace=True)\n# anime_with_synopsis = anime_with_synopsis.rename(columns={\"Name\": \"name\"})\n# anime_df = anime_df.merge(anime_with_synopsis, on=[\"name\"])\n# # anime_with_synopsis.head(5)\n\nprint('rating_df shape:', rating_df.shape)\nprint('anime_df shape:', anime_df.shape)\nanime_df.drop(['rating'], axis=1, inplace=True)\n\n\n","4e4c0fa3":"rating_df = rating_df[rating_df['user_id'] <= 10000] \nrating_df.head()","8a55291d":"anime_df.head()","ae2eef8b":"rating_df.describe() # \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438","5091f800":"#  rating_df.rating.hist()","c0bba2ea":"data = rating_df['rating'].value_counts().sort_index(ascending=False)\ntrace = go.Bar(x = data.index,\n               text = ['{:.1f} %'.format(val) for val in (data.values \/ rating_df.shape[0] * 100)],\n               textposition = 'auto',\n               textfont = dict(color = '#000000'),\n               y = data.values,\n               )\nlayout = dict(title = 'Distribution Of {} anime-ratings'.format(rating_df.shape[0]),\n              xaxis = dict(title = 'Rating'),\n              yaxis = dict(title = 'Count'))\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","aa65bd7d":"rating_df = rating_df.loc[rating_df['rating'] != -1]\nlen(rating_df)","d66bba9a":"data = rating_df['rating'].value_counts().sort_index(ascending=False)\ntrace = go.Bar(x = data.index,\n               text = ['{:.1f} %'.format(val) for val in (data.values \/ rating_df.shape[0] * 100)],\n               textposition = 'auto',\n               textfont = dict(color = '#000000'),\n               y = data.values,\n               )\nlayout = dict(title = 'Distribution Of {} anime-ratings'.format(rating_df.shape[0]),\n              xaxis = dict(title = 'Rating'),\n              yaxis = dict(title = 'Count'))\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","254659eb":"# # \u0412\u043e\u043e\u0431\u0449\u0435 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043b\u0443\u0447\u0448\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c id \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0430\u043d\u0438\u043c\u0435 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043e\u0442 0 \u0434\u043e \u043a-\u0432\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u0414\u0435\u043b\u0430\u0435\u043c \u044d\u0442\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e LabelEncoder\n# from sklearn.preprocessing import LabelEncoder\n# enc_user = LabelEncoder() #\u0441\u043e\u0437\u0434\u0430\u0435\u043c \u044d\u043a\u0437. \u043a\u043b\u0430\u0441\u0441\u0430\n# enc_anime = LabelEncoder()\n# enc_user = enc_user.fit(rating_df.user_id.values)\n# enc_anime = enc_anime.fit(rating_df.anime_id.values)\n# # \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0435\u0440\u0435\u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n# rating_df.loc[:, 'user_id'] = enc_user.transform(rating_df.loc[:,'user_id'].values)\n# rating_df.loc[:, 'anime_id'] = enc_anime.transform(rating_df.loc[:,'anime_id'].values)\n# rating_df.anime_id.nunique()","3c3b7ca6":"user_item_df = rating_df.pivot_table(index='user_id', columns='anime_id', values='rating')\n","975a4e7c":"user_item_df.head()","dad42bf1":"user_item_df.describe()","6d2110bd":"user_item_df.loc[5][:10]","d4dfbce3":"# \u0441\u043f\u0438\u0441\u043e\u043a id \u0430\u043d\u0438\u043c\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0446\u0435\u043d\u0438\u043b\nitem_rated_user_5 = user_item_df.loc[5].dropna().index\nitem_rated_user_5","542e6f3a":"user_item_df = user_item_df.fillna(0)\nuser_item_df.head()","303d7505":"R = user_item_df.values # \u043f\u043e\u043c\u0435\u0449\u0430\u0435\u043c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\nR","0bcde500":"from scipy.sparse.linalg import svds\nU, sigma, Vt = svds(user_item_df, k = 50) #k- \u043a-\u0432\u043e \u043b\u0430\u0442\u0435\u043d\u0442\u043d\u044b\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432","0659fdf8":"U #\u044d\u0442\u043e \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \"\u0444\u0443\u043d\u043a\u0446\u0438\u0439\" \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043e\u043d\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \"\u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f\" \u043a\u0430\u0436\u0434\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f,","eacf670f":"sigma #\u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0441\u0438\u043d\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 (\u043f\u043e \u0441\u0443\u0442\u0438, \u0432\u0435\u0441\u043e\u0432)","63b73fa9":"Vt #\u044d\u0442\u043e \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \"\u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\" \u0444\u0438\u043b\u044c\u043c\u0430, \u043e\u043d\u0430 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u0436\u0434\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0444\u0438\u043b\u044c\u043c\u0430,","2315baba":"sigma = np.diag(sigma)","b4d41713":"R_after_svd = np.dot(np.dot(U, sigma), Vt)\nR_after_svd","6a289399":"R_after_svd_df = pd.DataFrame(R_after_svd, columns = user_item_df.columns)\nR_after_svd_df.head()\n","b9b75ef5":"def recommend_movies(predictions_df, user_id, anime_id, original_ratings_df, num_recommendations=5):\n    \n    # Get and sort the user's predictions\n    user_row_number = user_id - 1 # UserID starts at 1, not 0\n    sorted_user_predictions = R_after_svd_df.iloc[user_row_number].sort_values(ascending=False) # UserID starts at 1\n    \n    # Get the user's data and merge in the movie information.\n    user_data = original_ratings_df[original_ratings_df.user_id == (user_id)]\n    user_full = (user_data.merge(anime_id, how = 'left', left_on = 'anime_id', right_on = 'anime_id').\n                     sort_values(['rating'], ascending=False)\n                 )\n\n    print ( 'User {0} has already rated {1} movies.'.format(user_id, user_full.shape[0]))\n    print ('Recommending highest {0} predicted ratings movies not already rated.'.format(num_recommendations))\n    \n    # Recommend the highest predicted rating movies that the user hasn't seen yet.\n    recommendations = (anime_id[~anime_id['anime_id'].isin(user_full['anime_id'])].\n         merge(pd.DataFrame(sorted_user_predictions).reset_index(), how = 'left',\n               left_on = 'anime_id',\n               right_on = 'anime_id').\n         rename(columns = {user_row_number: 'Predictions'}).\n         sort_values('Predictions', ascending = False).\n                       iloc[:num_recommendations, :-1]\n                      )\n\n    return user_full, recommendations","1db6ee27":"already_rated, predictions = recommend_movies(R_after_svd, 123, anime_df, rating_df, 10)","b050081d":"already_rated.head(10)","12a487ed":"from collections import defaultdict\n\nall_genres = defaultdict(int)\n\nfor genres in already_rated['genre']:\n    for genre in genres.split(','):\n        all_genres[genre.strip()] += 1","19a7db88":"from wordcloud import WordCloud\n\ngenres_cloud = WordCloud(width=800, height=400, background_color='white', colormap='gnuplot').generate_from_frequencies(all_genres)\n\nplt.imshow(genres_cloud, interpolation='bilinear')\nplt.axis('off')\nplt.show()\n","7cd195f1":"predictions","56701ff5":"def encode_ids(data):\n    ''' \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0444\u0440\u0435\u0439\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442:\n     -  \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u044b\u0439 \u0444\u0440\u0435\u0439\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c\u0438 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 (\u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440) \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0444\u0438\u043b\u044c\u043c\u043e\u0432\n     -  2 mapping \u0441\u043b\u043e\u0432\u0430\u0440\u044f\n    \n    '''\n\n    data_encoded = data.copy()\n    \n    users = pd.DataFrame(data_encoded.user_id.unique(),columns=['user_id'])  # df of all unique users\n    dict_users = users.to_dict()    \n    inv_dict_users = {v: k for k, v in dict_users['user_id'].items()}\n\n    items = pd.DataFrame(data_encoded.anime_id.unique(),columns=['anime_id']) # df of all unique items\n    dict_items = items.to_dict()    \n    inv_dict_items = {v: k for k, v in dict_items['anime_id'].items()}\n\n    data_encoded.user_id = data_encoded.user_id.map(inv_dict_users)\n    data_encoded.anime_id = data_encoded.anime_id.map(inv_dict_items)\n\n    return data_encoded, dict_users, dict_items","cd48b967":"def SGD1(data,           # \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 1 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f | \u044d\u043b\u0435\u043c\u0435\u043d\u0442 | \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\n        n_factors = 20, # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432\n        alpha =  0.001,   \n        n_epochs = 5,   # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b SGD\n       ):\n    '''\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440 P \u0438 Q (ie all the weights p_u and q_i) \u0441 SGD.\n    '''\n    epoch_count = range(1, n_epochs+1)\n    # \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 userId \u0438 itemId\n    data, dict_users, dict_items = encode_ids(data)\n    \n    n_users = data.user_id.nunique()  # \u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n    n_items = data.anime_id.nunique()  # \u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0430\u043d\u0438\u043c\u0435\n   \n    \n    # \u0420\u0430\u043d\u0434\u043e\u043c\u043d\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0444\u0430\u043a\u0442\u043e\u0440\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    p = np.random.normal(0, .1, (n_users, n_factors))\n    q = np.random.normal(0, .1, (n_items, n_factors))\n    \n    list_err = []\n    # \u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n    for epoch in range(n_epochs):\n        print ('epoch: ', epoch)\n        sum_kvadrat_err = 0\n        n = 0\n        # \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\n        for index in range(data.shape[0]):\n            row = data.iloc[[index]]\n            u = int(row.user_id)      # current userId = \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 p (\u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0435)\n            i = int(row.anime_id)      # current itemId = \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 q\n            r_ui = float(row.rating) # \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043f\u0430\u0440\u043e\u0439 (user u , item i)\n               \n            err = r_ui - np.dot(p[u],(q[i]).transpose(), out=None)    # \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c (p_u. q_i) \u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c r_ui         \n            kvadrat_err = err * err\n            n += 1\n            sum_kvadrat_err += kvadrat_err\n            # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u044b p_u \u0438 q_i\n            p_old = p[u]\n            p[u] = p[u] + alpha * err * q[i]\n            q[i] = q[i] + alpha * err * p_old  \n        sum_kvadrat_err_n =  sum_kvadrat_err \/ n\n        rmse = math.sqrt(sum_kvadrat_err_n)\n        list_err.append(rmse)\n        print(rmse)       \n    plt.plot(epoch_count, (list_err), 'g--')\n    return p, q\n    \n    \ndef estimate(u, i, p, q):\n    '''\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f u \u0434\u043b\u044f \u0430\u043d\u0438\u043c\u0435 i.'''\n     \n    return np.dot(p[u],q[i].transpose())           ## \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435  p[u] and q[i] \/!\\ dimensions\n   ","c34e938d":"%%time\np1, q1 = SGD1(rating_df)","1f1a6ba2":"def SGD2(data,           # \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 1 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f | \u044d\u043b\u0435\u043c\u0435\u043d\u0442 | \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\n        n_factors = 10, # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432\n        alpha = 0.001,   \n        n_epochs = 5,   # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b SGD\n       ):\n    '''\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440 P \u0438 Q (ie all the weights p_u and q_i) \u0441 SGD.\n    '''\n    epoch_count = range(1, n_epochs+1)\n    # \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 userId \u0438 itemId\n    data, dict_users, dict_items = encode_ids(data)\n    \n    n_users = data.user_id.nunique()  # \u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n    n_items = data.anime_id.nunique()  # \u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0430\u043d\u0438\u043c\u0435\n   \n    \n    # \u0420\u0430\u043d\u0434\u043e\u043c\u043d\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0444\u0430\u043a\u0442\u043e\u0440\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    p = np.random.normal(0, .1, (n_users, n_factors))\n    q = np.random.normal(0, .1, (n_items, n_factors))\n    \n    list_err = []\n    # \u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n    for epoch in range(n_epochs):\n        print ('epoch: ', epoch)\n        sum_kvadrat_err = 0\n        n = 0\n        # \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\n        for index in range(data.shape[0]):\n            row = data.iloc[[index]]\n            u = int(row.user_id)      # current userId = \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 p (\u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0435)\n            i = int(row.anime_id)      # current itemId = \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 q\n            r_ui = float(row.rating) # \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043f\u0430\u0440\u043e\u0439 (user u , item i)\n               \n            err = r_ui - np.dot(p[u],(q[i]).transpose(), out=None)    # \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c (p_u. q_i) \u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c r_ui         \n            kvadrat_err = err * err\n            n += 1\n            sum_kvadrat_err += kvadrat_err\n            # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u044b p_u \u0438 q_i\n            p_old = p[u]\n            p[u] = p[u] + alpha * err * q[i]\n            q[i] = q[i] + alpha * err * p_old  \n        sum_kvadrat_err_n =  sum_kvadrat_err \/ n\n        rmse = math.sqrt(sum_kvadrat_err_n)\n        list_err.append(rmse)\n        print(rmse)       \n    plt.plot(epoch_count, (list_err), 'g--')\n    return p, q\n    \n    \ndef estimate(u, i, p, q):\n    '''\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f u \u0434\u043b\u044f \u0430\u043d\u0438\u043c\u0435 i.'''\n     \n    return np.dot(p[u],q[i].transpose())           ## \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435  p[u] and q[i] \/!\\ dimensions\n   ","398dab5c":"%%time\np2, q2 = SGD2(rating_df)","bdf199f7":"def SGD3(data,           # \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 1 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f | \u044d\u043b\u0435\u043c\u0435\u043d\u0442 | \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\n        n_factors = 15, # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432\n        alpha = 0.001,    \n        n_epochs = 10,   # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b SGD\n       ):\n    '''\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440 P \u0438 Q (ie all the weights p_u and q_i) \u0441 SGD.\n    '''\n    epoch_count = range(1, n_epochs+1)\n    # \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 userId \u0438 itemId\n    data, dict_users, dict_items = encode_ids(data)\n    \n    n_users = data.user_id.nunique()  # \u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n    n_items = data.anime_id.nunique()  # \u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0430\u043d\u0438\u043c\u0435\n   \n    \n    # \u0420\u0430\u043d\u0434\u043e\u043c\u043d\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0444\u0430\u043a\u0442\u043e\u0440\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    p = np.random.normal(0, .1, (n_users, n_factors))\n    q = np.random.normal(0, .1, (n_items, n_factors))\n    \n    list_err = []\n    # \u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n    for epoch in range(n_epochs):\n        print ('epoch: ', epoch)\n        sum_kvadrat_err = 0\n        n = 0\n        # \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\n        for index in range(data.shape[0]):\n            row = data.iloc[[index]]\n            u = int(row.user_id)      # current userId = \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 p (\u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0435)\n            i = int(row.anime_id)      # current itemId = \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 q\n            r_ui = float(row.rating) # \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043f\u0430\u0440\u043e\u0439 (user u , item i)\n               \n            err = r_ui - np.dot(p[u],(q[i]).transpose(), out=None)    # \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c (p_u. q_i) \u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c r_ui         \n            kvadrat_err = err * err\n            n += 1\n            sum_kvadrat_err += kvadrat_err\n            # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u044b p_u \u0438 q_i\n            p_old = p[u]\n            p[u] = p[u] + alpha * err * q[i]\n            q[i] = q[i] + alpha * err * p_old  \n        sum_kvadrat_err_n =  sum_kvadrat_err \/ n\n        rmse = math.sqrt(sum_kvadrat_err_n)\n        list_err.append(rmse)\n        print(rmse)       \n    plt.plot(epoch_count, (list_err), 'g--')\n    return p, q\n    \n    \ndef estimate(u, i, p, q):\n    '''\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f u \u0434\u043b\u044f \u0430\u043d\u0438\u043c\u0435 i.'''\n     \n    return np.dot(p[u],q[i].transpose())           ## \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435  p[u] and q[i] \/!\\ dimensions\n   ","e29f76d6":"%%time\np3, q3 = SGD3(rating_df)","e6651884":"def SGD4(data,           # \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 1 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f | \u044d\u043b\u0435\u043c\u0435\u043d\u0442 | \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\n        n_factors = 30, # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432\n        alpha = 0.001,    \n        n_epochs = 10,   # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b SGD\n       ):\n    '''\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440 P \u0438 Q (ie all the weights p_u and q_i) \u0441 SGD.\n    '''\n    epoch_count = range(1, n_epochs+1)\n    # \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 userId \u0438 itemId\n    data, dict_users, dict_items = encode_ids(data)\n    \n    n_users = data.user_id.nunique()  # \u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n    n_items = data.anime_id.nunique()  # \u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0430\u043d\u0438\u043c\u0435\n   \n    \n    # \u0420\u0430\u043d\u0434\u043e\u043c\u043d\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0444\u0430\u043a\u0442\u043e\u0440\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    p = np.random.normal(0, .1, (n_users, n_factors))\n    q = np.random.normal(0, .1, (n_items, n_factors))\n    \n    list_err = []\n    # \u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n    for epoch in range(n_epochs):\n        print ('epoch: ', epoch)\n        sum_kvadrat_err = 0\n        n = 0\n        # \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\n        for index in range(data.shape[0]):\n            row = data.iloc[[index]]\n            u = int(row.user_id)      # current userId = \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 p (\u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0435)\n            i = int(row.anime_id)      # current itemId = \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 q\n            r_ui = float(row.rating) # \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043f\u0430\u0440\u043e\u0439 (user u , item i)\n               \n            err = r_ui - np.dot(p[u],(q[i]).transpose(), out=None)    # \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c (p_u. q_i) \u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c r_ui         \n            kvadrat_err = err * err\n            n += 1\n            sum_kvadrat_err += kvadrat_err\n            # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u044b p_u \u0438 q_i\n            p_old = p[u]\n            p[u] = p[u] + alpha * err * q[i]\n            q[i] = q[i] + alpha * err * p_old  \n        sum_kvadrat_err_n =  sum_kvadrat_err \/ n\n        rmse = math.sqrt(sum_kvadrat_err_n)\n        list_err.append(rmse)\n        print(rmse)       \n    plt.plot(epoch_count, (list_err), 'g--')\n    return p, q\n    \n    \ndef estimate(u, i, p, q):\n    '''\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f u \u0434\u043b\u044f \u0430\u043d\u0438\u043c\u0435 i.'''\n     \n    return np.dot(p[u],q[i].transpose())           ## \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435  p[u] and q[i] \/!\\ dimensions\n   ","5a412620":"%%time\np4, q4 = SGD4(rating_df)","8bc6bc20":"def SGD5(data,           # \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 1 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f | \u044d\u043b\u0435\u043c\u0435\u043d\u0442 | \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\n        n_factors = 20, # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432\n        alpha = 0.001,    \n        n_epochs = 15,   # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b SGD\n       ):\n    '''\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440 P \u0438 Q (ie all the weights p_u and q_i) \u0441 SGD.\n    '''\n    epoch_count = range(1, n_epochs+1)\n    # \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 userId \u0438 itemId\n    data, dict_users, dict_items = encode_ids(data)\n    \n    n_users = data.user_id.nunique()  # \u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n    n_items = data.anime_id.nunique()  # \u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0430\u043d\u0438\u043c\u0435\n   \n    \n    # \u0420\u0430\u043d\u0434\u043e\u043c\u043d\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0444\u0430\u043a\u0442\u043e\u0440\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    p = np.random.normal(0, .1, (n_users, n_factors))\n    q = np.random.normal(0, .1, (n_items, n_factors))\n    \n    list_err = []\n    # \u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n    for epoch in range(n_epochs):\n        print ('epoch: ', epoch)\n        sum_kvadrat_err = 0\n        n = 0\n        # \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\n        for index in range(data.shape[0]):\n            row = data.iloc[[index]]\n            u = int(row.user_id)      # current userId = \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 p (\u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0435)\n            i = int(row.anime_id)      # current itemId = \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 q\n            r_ui = float(row.rating) # \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043f\u0430\u0440\u043e\u0439 (user u , item i)\n               \n            err = r_ui - np.dot(p[u],(q[i]).transpose(), out=None)    # \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c (p_u. q_i) \u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c r_ui         \n            kvadrat_err = err * err\n            n += 1\n            sum_kvadrat_err += kvadrat_err\n            # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u044b p_u \u0438 q_i\n            p_old = p[u]\n            p[u] = p[u] + alpha * err * q[i]\n            q[i] = q[i] + alpha * err * p_old  \n        sum_kvadrat_err_n =  sum_kvadrat_err \/ n\n        rmse = math.sqrt(sum_kvadrat_err_n)\n        list_err.append(rmse)\n        print(rmse)       \n    plt.plot(epoch_count, (list_err), 'g--')\n    return p, q\n    \n    \ndef estimate(u, i, p, q):\n    '''\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f u \u0434\u043b\u044f \u0430\u043d\u0438\u043c\u0435 i.'''\n     \n    return np.dot(p[u],q[i].transpose())           ## \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435  p[u] and q[i] \/!\\ dimensions\n   ","2b234dd5":"%%time\np5, q5 = SGD5(rating_df)","70e36fc0":"def SGD6(data,           # \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 1 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f | \u044d\u043b\u0435\u043c\u0435\u043d\u0442 | \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\n        n_factors = 20, # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432\n        alpha = 0.001,    \n        n_epochs = 25,   # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b SGD\n       ):\n    '''\u041e\u0431\u0443\u0447\u0430\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440 P \u0438 Q (ie all the weights p_u and q_i) \u0441 SGD.\n    '''\n    epoch_count = range(1, n_epochs+1)\n    # \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 userId \u0438 itemId\n    data, dict_users, dict_items = encode_ids(data)\n    \n    n_users = data.user_id.nunique()  # \u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\n    n_items = data.anime_id.nunique()  # \u043a-\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0430\u043d\u0438\u043c\u0435\n   \n    \n    # \u0420\u0430\u043d\u0434\u043e\u043c\u043d\u043e \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0444\u0430\u043a\u0442\u043e\u0440\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    p = np.random.normal(0, .1, (n_users, n_factors))\n    q = np.random.normal(0, .1, (n_items, n_factors))\n    \n    list_err = []\n    # \u041f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n    for epoch in range(n_epochs):\n        print ('epoch: ', epoch)\n        sum_kvadrat_err = 0\n        n = 0\n        # \u041f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\n        for index in range(data.shape[0]):\n            row = data.iloc[[index]]\n            u = int(row.user_id)      # current userId = \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 p (\u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0435)\n            i = int(row.anime_id)      # current itemId = \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u0435 q\n            r_ui = float(row.rating) # \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u0441 \u043f\u0430\u0440\u043e\u0439 (user u , item i)\n               \n            err = r_ui - np.dot(p[u],(q[i]).transpose(), out=None)    # \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c (p_u. q_i) \u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c r_ui         \n            kvadrat_err = err * err\n            n += 1\n            sum_kvadrat_err += kvadrat_err\n            # \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u044b p_u \u0438 q_i\n            p_old = p[u]\n            p[u] = p[u] + alpha * err * q[i]\n            q[i] = q[i] + alpha * err * p_old  \n        sum_kvadrat_err_n =  sum_kvadrat_err \/ n\n        rmse = math.sqrt(sum_kvadrat_err_n)\n        list_err.append(rmse)\n        print(rmse)       \n    plt.plot(epoch_count, (list_err), 'g--')\n    return p, q\n    \n    \ndef estimate(u, i, p, q):\n    '''\u041e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f u \u0434\u043b\u044f \u0430\u043d\u0438\u043c\u0435 i.'''\n     \n    return np.dot(p[u],q[i].transpose())           ## \u0441\u043a\u0430\u043b\u044f\u0440\u043d\u043e\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435  p[u] and q[i] \/!\\ dimensions\n   ","abac56c2":"%%time\np6, q6 = SGD6(rating_df)","dc90a564":"df_user_item_filled = pd.DataFrame(np.dot(p5, q5.transpose()))\ndf_user_item_filled.head()","9603db86":"df_ratings_encoded, dict_users, dict_items = encode_ids(rating_df)","53827b64":"df_user_item_filled.rename(columns=(dict_items['anime_id']), inplace=True)\ndf_user_item_filled.rename(index=(dict_users['user_id']), inplace=True)\n\n# Sort index\/rows (userId's) and columns (itemId's)\ndf_user_item_filled.sort_index(axis=0, inplace=True)\ndf_user_item_filled.sort_index(axis=1, inplace=True)\n\ndf_user_item_filled.head()","326741f7":"user_item_df.loc[123][:10]","ba3b784a":"df_user_item_filled.loc[123][:10]","209cd1f3":"#\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c - \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u043d\u0438\u043c\u0435 \u0441 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\u043c\u0438\nrecommendations = list((df_user_item_filled.loc[10]).sort_values(ascending=False)[:10].index)\nrecommendations","a4c6456e":"anime_df[anime_df.anime_id.isin(recommendations)]","7b41fbea":"already_rated = list((user_item_df.loc[10]).sort_values(ascending=False)[:20].index)\nalready_rated","de3223e8":"anime_df[anime_df.anime_id.isin(already_rated)]","5ab5678b":"!pip install surprise","116d0dc6":"surprise_rating_df = rating_df[rating_df['user_id'] <= 9000] #\u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0435\u043c \u043a-\u0432\u043e \u044e\u0437\u0435\u0440\u043e\u0432\n","c8089a53":"%%time\n# from surprise import Reader, Dataset, SVD, evaluate\nfrom surprise import Reader, Dataset, SVD, NormalPredictor\nfrom surprise.model_selection import cross_validate\nfrom surprise.model_selection import cross_validate\nfrom collections import defaultdict\n\n# \u041a\u043e\u0433\u0434\u0430 \u043c\u044b \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c reader-a.\nreader = Reader(rating_scale=(0, 10))\n\n# \u0421\u0442\u043e\u043b\u0431\u0446\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\u043c (\u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435).\ndata = Dataset.load_from_df(surprise_rating_df[['user_id', 'anime_id', 'rating']], reader)\n\n# \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c SVD \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c.\nalgo = SVD()\n\n# \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c 5-fold \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b\ncross_validate(algo, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)","64e556ae":"%%time\nfrom surprise.model_selection import GridSearchCV\n\nparam_grid = {'n_epochs': [5, 15], 'lr_all': [0.001, 0.005],\n              'reg_all': [0.4, 0.6]}\ngs = GridSearchCV(SVD, param_grid, measures=['rmse', 'mae'], cv=3)\n\ngs.fit(data)\n\n# best RMSE score\nprint(gs.best_score['rmse'])\n\n# \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u0443\u0435\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441 best RMSE score\nprint(gs.best_params['rmse'])","7403a0f7":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0430\u0435\u0442 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0435\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435:\nalgo = gs.best_estimator['rmse']\ntrainset = data.build_full_trainset()\nalgo.fit(trainset)","7b19fb2d":"algo.predict(123,1)","912255d9":"df_data = data.df\ndf_data = df_data.join(anime_df,how=\"left\", on='anime_id',rsuffix='_', lsuffix='')\ndf_data[df_data['user_id']==123].sort_values(by = 'rating',ascending=False)[:10]","406dd9f5":"def get_top_n(predictions, n=10):\n    '''Return the top-N recommendation for each user from a set of predictions.\n\n    Args:\n        predictions(list of Prediction objects): The list of predictions, as\n            returned by the test method of an algorithm.\n        n(int): The number of recommendation to output for each user. Default\n            is 10.\n\n    Returns:\n    A dict where keys are user (raw) ids and values are lists of tuples:\n        [(raw item id, rating estimation), ...] of size n.\n    '''\n\n    # First map the predictions to each user.\n    top_n = defaultdict(list)\n    for uid, iid, true_r, est, _ in predictions:\n        top_n[uid].append((iid, est))\n\n    # Then sort the predictions for each user and retrieve the k highest ones.\n    for uid, user_ratings in top_n.items():\n        user_ratings.sort(key=lambda x: x[1], reverse=True)\n        top_n[uid] = user_ratings[:n]\n\n    return top_n","00567292":"%%time\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0440 (u, i), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u041d\u0415 \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443.\ntestset = trainset.build_anti_testset()\npredictions = algo.test(testset)","9c963d9b":"\ntop_n = get_top_n(predictions, n=10)","74ccc880":"# Print the recommended items for all user 123\nfor uid, user_ratings in top_n.items():\n    if uid == 123:\n        print(uid, [iid for (iid, _) in user_ratings])\n        rec = [iid for (iid, _) in user_ratings]\nanime_df[anime_df.anime_id.isin(rec)]","c25e689e":"<!-- ![image.png](attachment:82a52cb0-99c8-45d2-afb0-20a0a2a7bfe3.png) -->","ea161d63":"\u041e\u0434\u043d\u0430\u043a\u043e \u043e\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f; \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432 \u0441 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c\u0438 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c\u0438 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0435:","06e9a92a":"### \u0412\u044b\u0431\u043e\u0440 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n#### \u041e\u0434\u043d\u0430 \u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u0430\u044f \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f - \u044d\u0442\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u044e\u0442 \u0441\u0443\u043c\u043c\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u043e\u0448\u0438\u0431\u043e\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u0430\u0440\u0430\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439:\n![image.png](attachment:image.png)\n#### \u0412 \u044d\u0442\u043e\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u044b \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u044b\u0435 \u043f\u0430\u0440\u044b (i, j), \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u043d\u0443\u043b\u0435\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0435 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438. \u041e\u0434\u043d\u0430\u043a\u043e \u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0438\u0434\u0435\u0435\u0439 - \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0432\u0441\u0435\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u0442\u0435\u0440\u0438 \u0438 \u0434\u0430\u0441\u0442 \u043c\u043e\u0434\u0435\u043b\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0434\u0430\u0432\u0430\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u0438 \u043f\u043b\u043e\u0445\u043e \u043e\u0431\u043e\u0431\u0449\u0430\u0435\u0442.\n#### \u041f\u041e\u042d\u0422\u041e\u041c\u0423 \u043c\u044b \u0432\u044b\u0448\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043b\u0438 \u043d\u0435\u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u043a *\u043d\u043e\u043b\u044c* \u0438 \u0431\u0443\u0434\u0435\u043c \u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u043c\u0430\u0442\u0440\u0438\u0446\u0435. \u042d\u0442\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0424\u0440\u043e\u0431\u0435\u043d\u0438\u0443\u0441\u0430 \u043c\u0435\u0436\u0434\u0443 \u0410 \u0438 Vt\n![image-2.png](attachment:image-2.png)\n#### \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0440\u0435\u0448\u0438\u0442\u044c \u044d\u0442\u0443 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u0438\u043d\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c ( SVD ) \u043c\u0430\u0442\u0440\u0438\u0446\u044b. ","e4ce6c58":"### \u041c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u044b\u0432\u0435\u0441\u0442\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 userId = 5 \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u044b\u0445 10 \u0444\u0438\u043b\u044c\u043c\u043e\u0432 ","ce491a0e":"![image-2.png](attachment:image-2.png)\n","a4bbf7b2":"\u0427\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u044d\u0442\u043e \u0432 \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u043d, \u0432\u044b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043d\u0430\u0431\u043e\u0440 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0438 \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043a\u0440\u044b\u0442\u044b\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432 (n_factors), \u043c\u0438\u043d\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u043e\u0448\u0438\u0431\u043a\u0443. \u041f\u0440\u043e\u0449\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u0443\u044e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443, \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0435\u0442\u043a\u0435 \u0438 \u0442. \u0414.","0e33ef20":"# \u041f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c SVD (\u043c\u0430\u0442\u0440\u0438\u0447\u043d\u043e\u0435 \u0440\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u043d\u043e\u0440\u043c\u0435 \u0424\u0440\u043e\u0431\u0435\u043d\u0438\u0443\u0441\u0430) \u043a R","32140134":"## \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043e\u0446\u0435\u043d\u043a\u0443 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c - \u0430\u043d\u0438\u043c\u0435:\n#### \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u0430\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u044b\u043c\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430\u043c\u0438:","e56c4f42":"# Approximate SVD with stochastic gradient descend (SGD)\n### \u0412 \u044d\u0442\u043e\u0442 \u0440\u0430\u0437 \u043c\u044b **\u043d\u0435** \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n### \u041c\u044b \u0432\u0432\u043e\u0434\u0438\u043c $\\Sigma$ \u0432 U \u0438 V, \u0438 \u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u043d\u0430\u0439\u0442\u0438 P \u0438 q \u0442\u0430\u043a\u0438\u0435 \u0447\u0442\u043e $\\widehat{R} = P Q^{T}$ \u0431\u043b\u0438\u0437\u043a\u043e \u043a  $R$ **\u0434\u043b\u044f \u0443\u0436\u0435 \u043e\u0446\u0435\u043d\u0435\u043d\u043d\u044b\u0445 \u043f\u0430\u0440 item-user**.","43e731ee":"![image.png](attachment:image.png)","5ca1e03d":"## \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043c\u043d\u043e\u0433\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043d\u0435 \u0445\u043e\u0442\u044f\u0442 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u043f\u043e \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u043f\u0440\u0438\u0447\u0438\u043d\u0435, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d\u0438 \u043b\u0435\u043d\u0438\u0432\u044b. -1 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043c\u043e\u0442\u0440\u0435\u043b \u0430\u043d\u0438\u043c\u0435, \u043d\u043e \u043d\u0435 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043b \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u044d\u0442\u043e.","e9def735":"# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u0438\u043b\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438, \u0437\u0430\u0442\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u0438\u043d\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u0435 \u0440\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435(SVD). \u041d\u0435\u043b\u044c\u0437\u044f \u044d\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043a \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u0435.","f4762189":"# \u0424\u0430\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u044b","82b94620":"\u041e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 approximate SVD:","797659c0":"# 1 \u0448\u0430\u0433. \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c user-item \u043c\u0430\u0442\u0440\u0438\u0446\u0443","60365ca0":"## \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043b\u044e\u0431\u0438\u0442 \u044d\u043a\u0448\u043d, \u0434\u0440\u0430\u043c\u0443, \u043a\u043e\u043c\u0435\u0434\u0438\u0438. \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0432\u044b\u0434\u0430\u043b\u0430 \u0435\u043c\u0443 \u0444\u0438\u043b\u044c\u043c\u044b \u0438\u043c\u0435\u043d\u043d\u043e \u0442\u0430\u043a\u0438\u0445 \u0436\u0430\u043d\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u043b\u044e\u0431\u0438\u0442","d7c9891a":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f 123:","96882dae":"### \u041c\u044b \u0445\u043e\u0442\u0438\u043c \u043d\u0430\u0439\u0442\u0438 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0440\u0430\u043d\u0433\u0430 k, \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0431\u043b\u0438\u0437\u043a\u0443\u044e \u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u0435.","1359a140":"### Sigma - \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0430 \u043d\u0435 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u0430. \u042d\u0442\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u043e, \u043d\u043e \u043f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u044f \u0441\u043e\u0431\u0438\u0440\u0430\u044e\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0440\u0438\u0446 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0439, \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0435\u0451 \u0432  \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443.","6f7049f3":"### \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043a\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430:\n\n* \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (\u0437\u0434\u0435\u0441\u044c \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u043d\u0443\u043b\u044f\u043c\u0438) - \u044d\u0442\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f \u0441\u0432\u044f\u0437\u044c, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u0434\u0430\u0432\u0430\u043b, \u043c\u044b \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0435\u0435 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \/ \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u043e\u0439.\n* \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0433\u0440\u043e\u043c\u043d\u0430, \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435 SVD \u043d\u0435 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442\u0441\u044f.","3f8d832f":"\u041e\u0434\u043d\u0430\u043a\u043e SVD - \u0442\u043e\u0436\u0435 \u043d\u0435 \u043b\u0443\u0447\u0448\u0435\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0432 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\u0445 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0447\u0435\u043d\u044c \u0440\u0435\u0434\u043a\u043e\u0439. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0434\u0443\u043c\u0430\u0439\u0442\u0435 \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u0432\u0438\u0434\u0435\u043e \u043d\u0430 YouTube \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0432\u0438\u0434\u0435\u043e, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u043b \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 Vt (\u0447\u0442\u043e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0430\u043f\u043f\u0440\u043e\u043a\u0441\u0438\u043c\u0430\u0446\u0438\u0438 \u0432\u0445\u043e\u0434\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043c\u043e\u0434\u0435\u043b\u044c\u044e), \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u0431\u0443\u0434\u0435\u0442 \u0431\u043b\u0438\u0437\u043a\u043e \u043a \u043d\u0443\u043b\u044e, \u0447\u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043a \u043f\u043b\u043e\u0445\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043e\u0431\u043e\u0431\u0449\u0435\u043d\u0438\u044f.","d6e252ff":"Singular Value Decomposition decomposes a matrix $R$ into the best lower rank (i.e. smaller\/simpler) approximation of the original matrix $R$. Mathematically, it decomposes R into a two unitary matrices and a diagonal matrix:\n\n$$\\begin{equation}\nR = U\\Sigma V^{T}\n\\end{equation}$$\n\nwhere: \n- R is users's ratings matrix, \n- $U$ is the user \"features\" matrix, it represents how much users \"like\" each feature,\n- $\\Sigma$ is the diagonal matrix of singular values (essentially weights), \n- $V^{T}$ is the movie \"features\" matrix, it represents how relevant each feature is to each movie,\n\nwith $U$ and $V^{T}$ orthogonal.","059eb62c":"\u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0442\u0435\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043e\u0446\u0435\u043d\u0435\u043d\u044b \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e:","e6382153":"### \u041d\u0430\u0433\u043b\u044f\u0434\u043d\u043e \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043c\u0430\u0442\u0430\u0440\u0438\u0446\u0430 \u043e\u0447\u0435\u043d\u044c \u0440\u0430\u0437\u0440\u0435\u0436\u0435\u043d\u043d\u0430","ceeffd7f":"# \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\n\u0412\u043e\u0442 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u044b \u0445\u043e\u0442\u0435\u043b\u0438 \u0431\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 SGD ():\n\n1. \u041f\u0440\u0438\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c P \u0438 Q \u0432 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n\n2. \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437 (\u0442. \u0435. \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043f\u043e\u0445) \u043f\u043e\u0432\u0442\u043e\u0440\u0438\u0442\u0435:\n\n     * \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432 $ r_ {ui} $: \n         * \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0443 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u0435\u043c\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c pu * qi \u0438 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u043e\u043c rui:\n         ![image.png](attachment:image.png)\n         * \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 pu \u0438 qi \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u043f\u0440\u0430\u0432\u0438\u043b\u0443:\n       ![image-2.png](attachment:image-2.png)","89eb18db":"<h3 style=\"background-color:orange;font-family:newtimeroman;font-size:250%;text-align:center;border-radius: 15px 50px;\"> \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u0442\u0435\u043e\u0440\u0438\u0438 <\/h3>","ba6b0b69":"##### \u041f\u0435\u0440\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u0435\u0439 (userId \/ itemId):","b455527e":"# \u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0441\u043f\u0443\u0441\u043a SVD \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Surprise","b179bdfe":"p.s \u0424\u0430\u043a\u0442\u043e\u0440\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u2013 \u044d\u0442\u043e \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043e\u0442\u043d\u043e\u0441\u044f\u0449\u0438\u0445\u0441\u044f \u043a \u0438\u043c\u0435\u044e\u0449\u0438\u043c\u0441\u044f \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f\u043c, \u0441\u0432\u043e\u0434\u044f\u0442 \u043a \u043c\u0435\u043d\u044c\u0448\u0435\u043c\u0443\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u0432\u0435\u043b\u0438\u0447\u0438\u043d, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u0430\u043c\u0438:\u2022 \u0432 \u043e\u0434\u0438\u043d \u0444\u0430\u043a\u0442\u043e\u0440 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u043c\u0435\u0436\u0434\u0443\n\u0441\u043e\u0431\u043e\u0439. \u2022 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0437 \u0440\u0430\u0437\u043d\u044b\u0445 \u0444\u0430\u043a\u0442\u043e\u0440\u043e\u0432 \u0441\u043b\u0430\u0431\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439.\n\u0424\u0430\u043a\u0442\u043e\u0440 (Factor) \u2013 \u043b\u0430\u0442\u0435\u043d\u0442\u043d\u0430\u044f (\u0441\u043a\u0440\u044b\u0442\u0430\u044f) \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f, \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u0443\u0435\u043c\u0430\u044f \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c,\n\u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043c\u0435\u0436\u0434\u0443 \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445.\n","0669f8da":"## \u041d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","e34de3ae":"## \u0414\u0430\u0435\u043c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e","5a992e49":"![image.png](attachment:image.png)"}}