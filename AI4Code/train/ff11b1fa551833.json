{"cell_type":{"bb5e1227":"code","1d95ce92":"code","33c05d5d":"code","81761271":"code","8811777c":"code","6d5686b0":"code","52ec6739":"code","cada2105":"code","b9b943aa":"code","091a234a":"code","c2c609e7":"code","151095e8":"code","9f723279":"markdown","1f8244d7":"markdown","b3045bb3":"markdown","0e54a7da":"markdown","246bc7fe":"markdown","96bd1337":"markdown"},"source":{"bb5e1227":"import os\nimport numpy as np\nimport pandas as pd\n# import tensorflow as tf\n\nimport matplotlib.pyplot as plt\nimport seaborn as sn\nimport cv2\n\nimport glob\n\nfrom sklearn.cluster import KMeans\nfrom sklearn import metrics\nfrom sklearn.cluster import MiniBatchKMeans","1d95ce92":"base_path = \"..\/input\/cracked-screen-dataset\"","33c05d5d":"img = cv2.imread(\"..\/input\/cracked-screen-dataset\/Datacluster Cracked Screen (10).jpg\")\nplt.imshow(img)","81761271":"img.shape","8811777c":"# Reshaping the image into a 2D array of pixels and 3 color values (RGB)\npixel_vals = img.reshape((-1,3))\n \n# Convert to float type\npixel_vals = np.float32(pixel_vals)\n\npixel_vals.shape","6d5686b0":"# os.listdir(base_path)\nlen(os.listdir(base_path))","52ec6739":"data = []\nc = 0\nd = 0\nIMG_SIZE = 32\nfor file in os.listdir(base_path):\n#     print(base_path +'\/'+ file)\n    img=cv2.imread(base_path +'\/'+ file)\n    img=cv2.resize(img,(IMG_SIZE,IMG_SIZE))\n    img=img.astype('float32') # Convert to float type\n#     img = img.reshape((-1,3))\n#     img = np.float32(img) # Convert to float type\n    data.append(img)\ndata = np.array(data)\n","cada2105":"# data[1]","b9b943aa":"data = data\/255.0\nreshaped_data = data.reshape(len(data),-1)\nreshaped_data.shape","091a234a":"kmeans = KMeans(n_clusters=2, random_state=0)\nclusters = kmeans.fit_predict(reshaped_data)\nkmeans.cluster_centers_.shape","c2c609e7":"x_data = [i for i in range(3072)]\nplt.scatter(x_data,kmeans.cluster_centers_[0], color = 'red',alpha=0.2,s=70)\nplt.scatter(x_data,kmeans.cluster_centers_[1] , color = 'blue',alpha=0.2,s=50)","151095e8":"sse = []\nlist_k = [2,3,4,5,6,7,8,9,10]\nfor k in list_k:\n    km = KMeans(n_clusters=k)\n    clusters = km.fit_predict(reshaped_data)\n    sse.append(km.inertia_)\n    \n# Plot sse against k\nplt.figure(figsize=(6, 6))\nplt.plot(list_k, sse, '-o')\nplt.xlabel(r'Number of clusters *k*')\nplt.ylabel('Sum of squared distance');","9f723279":"# ELBOW METHOD","1f8244d7":"Now we will implement the K means algorithm for segmenting an image. \n\nCode:  Taking k = 3, which means that the algorithm will identify 3 clusters in the image.","b3045bb3":"# STANDARD KMEANS\nkmeans = KMeans(n_clusters=2, random_state=0)","0e54a7da":"Now we have to prepare the data for K means. The image is a 3-dimensional shape but to apply k-means clustering on it we need to reshape it to a 2-dimensional array.","246bc7fe":"# SCATTER PLOT OF CENTROIDS\n","96bd1337":"# DATA PROCESSING"}}