{"cell_type":{"146d0156":"code","cadd81f5":"code","087f4ba0":"code","4724556e":"code","2c3ad989":"code","9bbdee73":"code","b88c8c2d":"code","a9253ce6":"code","1873dc44":"code","d64777bb":"code","cd53b40a":"code","e443e7de":"code","041c9e9b":"code","ecf4ae2d":"code","092b3032":"code","f31fd872":"code","17fb2e2e":"markdown","0ad7959b":"markdown","5e990991":"markdown","72313944":"markdown"},"source":{"146d0156":"# Importing libraries\n\n# Machine Learning\nimport tensorflow as tf\n\n# Plotting\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\n\n# Data Preparation\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split","cadd81f5":"train = pd.read_csv(r'..\/input\/digit-recognizer\/train.csv')\nkaggle_test = pd.read_csv(r'..\/input\/digit-recognizer\/test.csv')","087f4ba0":"# Split data into X and y\nX = train[[col for col in train.columns if 'pixel' in col]]\ny = train['label']\n\n# Split data into Train and Test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","4724556e":"# Preview the data\n\nplt.figure(figsize = (4,4))\ngs1 = gridspec.GridSpec(4, 4)\ngs1.update(wspace=0.025, hspace=0.05) # set the spacing between axes. \n\nfor i in range(16):\n    a = X_train.sample(1).values.reshape(28, 28)\n    \n    ax1 = plt.subplot(gs1[i])\n    ax1.set_xticks([])\n    ax1.set_yticks([])\n    ax1.imshow(a, cmap=plt.cm.binary)","2c3ad989":"X_train = tf.keras.utils.normalize(X_train, axis=1)\nX_test = tf.keras.utils.normalize(X_test, axis=1)","9bbdee73":"avg_values = X_train.mean().values.reshape(28, 28)\n\nplt.imshow(avg_values, cmap=plt.cm.binary)\nplt.title('Average Values of Training Data');","b88c8c2d":"model = tf.keras.models.Sequential()\n#model.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu)) # relu is the go-to activation function for hidden layer\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\n\nmodel.compile(optimizer='adam', # adam is the go-to optimizer\n                loss='sparse_categorical_crossentropy',\n                metrics=['accuracy'])","a9253ce6":"model.fit(X_train, y_train, epochs=30)","1873dc44":"val_loss, val_acc = model.evaluate(X_test, y_test)\nprint(val_loss, val_acc)","d64777bb":"output = model.predict(X_test)\npredictions = np.argmax(output, axis=1)","cd53b40a":"print(f'Predicted {predictions[0]}\\nActual Value {y_test.head(1).values[0]}')\nplt.imshow(X_test.head(1).values.reshape(28,28), cmap=plt.cm.binary);","e443e7de":"kaggle_test = tf.keras.utils.normalize(kaggle_test, axis=1)","041c9e9b":"kaggle_output = model.predict(kaggle_test)\nkaggle_predictions = np.argmax(kaggle_output, axis=1)","ecf4ae2d":"kaggle_predictions","092b3032":"kaggle_submission = pd.DataFrame({'ImageId': range(1,kaggle_test.shape[0]+1), 'Label': kaggle_predictions})","f31fd872":"kaggle_submission.to_csv('Submission.csv', index=False)","17fb2e2e":"## Kaggle Submission","0ad7959b":"## Modeling","5e990991":"## Predicting","72313944":"# MNIST Digit Recognition\n\nBased on @[Sentdex](https:\/\/www.youtube.com\/channel\/UCfzlCWGWYyIQ0aLC5w48gBQ) [tutorial](https:\/\/pythonprogramming.net\/introduction-deep-learning-python-tensorflow-keras\/)"}}