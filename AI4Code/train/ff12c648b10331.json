{"cell_type":{"b19952c3":"code","554135d0":"code","cb83e5b1":"code","8e2571bd":"code","18cebc1e":"code","f1f25996":"code","c74ff80c":"code","03fd2864":"code","85be8408":"code","4b38eca2":"code","afae1056":"code","659a6ee7":"code","295dba84":"code","cafd2a6d":"code","a2ade0a9":"code","96d85fd7":"code","934ba95f":"code","048113a4":"code","9b5a6a08":"code","543d6375":"code","036c050f":"code","f8b11592":"code","1761d96b":"code","13e78e18":"code","cd9ea09b":"code","eef06868":"code","f906503c":"code","c2ba0fd0":"code","22d255d5":"code","a122be2f":"code","4263d70b":"code","c13368de":"code","fb62a651":"code","5d416c4b":"code","2fc833a5":"code","ac2a1cb5":"code","40077762":"code","7c124df7":"code","26c4dfdf":"code","a526c032":"code","6c3f7b29":"code","6767d42a":"code","df9525be":"code","6c4be63b":"code","b8091294":"code","144a57c8":"code","82f454dd":"code","82d46efe":"code","e5c850af":"code","06fadc04":"code","d6542575":"code","97d7852b":"code","b97ac82d":"code","3844e923":"code","56051f07":"code","798b113f":"code","55111234":"code","a3a69116":"code","91186240":"code","3366d198":"code","7ad5fa82":"code","9e9d37e5":"code","741aa447":"code","263c921d":"code","9d20f849":"code","71258f4a":"code","85b28816":"code","e409f541":"code","21b157ca":"code","5c818ee3":"code","93a3b6ad":"code","931d887e":"code","e59de63c":"code","d13f9058":"code","fa400b0e":"code","90f7d44b":"code","be09415d":"code","cfa17c3c":"code","c5677af2":"code","f4b54aba":"code","cf4a4f16":"code","cab3fa5f":"code","370b0ccc":"code","b66976df":"code","54187069":"code","d9449c9b":"code","a275c5dc":"code","140a3411":"code","ebab0172":"code","dc54930e":"code","0a5a5867":"code","0621066a":"code","a88c7bb7":"code","ad628d45":"code","8eb32b40":"code","a01f5051":"code","193d0f2a":"code","6d592ef7":"code","a00f7595":"code","3c0fcf54":"code","76648880":"code","1b04eebd":"code","2fffb6f3":"code","ff857b52":"code","fa042f77":"code","2d2d6e56":"code","eb6cf8d1":"markdown","82c12a60":"markdown","52c61686":"markdown","6372dd73":"markdown","96f71e9d":"markdown","5ba6b611":"markdown"},"source":{"b19952c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","554135d0":"from warnings import filterwarnings\nfilterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows',None)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nfrom scipy import stats\nfrom folium import plugins\nimport branca.colormap as cm\nimport folium\n!pip install researchpy\nimport researchpy\n!pip install dython\nfrom dython import nominal\nfrom scipy.stats import shapiro,kstest\nfrom sklearn.model_selection import train_test_split,cross_val_score,GridSearchCV\nfrom sklearn.metrics import mean_squared_error\n!pip install feature_engine\nfrom feature_engine.categorical_encoders import RareLabelCategoricalEncoder,OrdinalCategoricalEncoder,OneHotCategoricalEncoder\nfrom tpot import TPOTRegressor\nfrom statsmodels.tools.eval_measures import mse,rmse\nfrom sklearn.metrics import r2_score,mean_squared_error\nimport xgboost as xgb\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor,ExtraTreesRegressor\nfrom sklearn.experimental import enable_hist_gradient_boosting  \nfrom sklearn.ensemble import HistGradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import cross_val_score,KFold\nfrom xgboost import plot_importance\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.inspection import partial_dependence\nfrom sklearn.inspection import plot_partial_dependence","cb83e5b1":"data=pd.read_csv(\"\/kaggle\/input\/craigslist-carstrucks-data\/vehicles.csv\")\ndf=data.copy()\ndf.head()","8e2571bd":"df=df.drop(columns=[\"id\",\"url\",\"region_url\",\"image_url\",\"description\",\"vin\",\"county\"],axis=1)\ndf.head()","18cebc1e":"m = folium.Map([44 ,68], zoom_start=5,width=\"%100\",height=\"%100\")\nlocations = list(zip(df.dropna().lat, df.dropna().long))\nicons = [folium.Icon(icon=\"airbnb\", prefix=\"fa\") for i in range(len(locations))]\n\ncluster = plugins.MarkerCluster(locations=locations,popups=df[\"region\"].tolist())\nm.add_child(cluster)\nm","f1f25996":"df.isnull().sum().to_frame()","c74ff80c":"df.describe().T","03fd2864":"df.describe(include=[\"object\"]).T","85be8408":"pd.DataFrame(df.isnull().sum()\/len(df),columns=[\"Missing_Rate\"]).plot.bar(figsize=(12,5));\nplt.axhline(0.05,color=\"red\");","4b38eca2":"df.dropna().shape","afae1056":"msno.matrix(df);","659a6ee7":"msno.bar(df);","295dba84":"msno.heatmap(df);","cafd2a6d":"# H0 : eksik de\u011ferlerin ortaya \u00e7\u0131kmas\u0131 X \u00f6zniteli\u011finin i\u00e7erdi\u011fi farkl\u0131 de\u011ferlerle da\u011f\u0131l\u0131m\u0131 rastgeledir\n# H1 : eksik de\u011ferlerin ortaya \u00e7\u0131kmas\u0131 X \u00f6zniteli\u011finin i\u00e7erdi\u011fi farkl\u0131 de\u011ferlerle da\u011f\u0131l\u0131m\u0131 rastgele de\u011fildir\ntestKolon=\"manufacturer\"\nfor column in df.select_dtypes(include=[\"object\"]).columns :\n\n        crosstab = pd.crosstab(df[column], df[testKolon])\n        \n        chi_square_value,pval,degrees_of_freedom,table=stats.chi2_contingency(crosstab)  \n        print(column,testKolon)\n        print('chi_square_value : ',chi_square_value,'\\np value : ',pval)\n        print('degrees of freedom : ',degrees_of_freedom,'\\n')\n        \n        if pval <0.05:\n            print(\"H0 rejected\\n\")\n        else:\n            print(\"H0 accepted\\n\")\n        \n      \n    # Actually I applied this to learn how to do chi2 test for missing values.","a2ade0a9":"df=df.dropna()\ndf.shape","96d85fd7":"df.head()","934ba95f":"df.info()","048113a4":"df.odometer=df.odometer.astype(int)\ndf.year=df.year.astype(int)\ndf.dtypes","9b5a6a08":"plt.figure(figsize=(16,5));\nsns.countplot(df.manufacturer).set_xticklabels(labels=df.manufacturer.value_counts().index ,rotation=90);","543d6375":"df.hist(figsize=(7,7));","036c050f":"def diagnostic_plots(df, variable):\n    \n    plt.figure(figsize=(12, 5))\n\n    plt.subplot(1, 3, 1)\n    sns.distplot(df[variable], bins=30,kde_kws={'bw': 1.5})\n    plt.title('Histogram')\n    \n    plt.subplot(1, 3, 2)\n    stats.probplot(df[variable], dist=\"norm\", plot=plt)\n    plt.ylabel('RM quantiles')\n\n    plt.subplot(1, 3, 3)\n    sns.boxplot(y=df[variable])\n    \n    \n    plt.title('Boxplot')\n    \n    plt.show()\n    \n    \nto_plot_labels=df.manufacturer.value_counts().nlargest(10).index","f8b11592":"for i in to_plot_labels:\n    print(\"--\"*10,str(i).upper(),\"--\"*10,end=\"\\n\")\n    print(stats.describe(df[df[\"manufacturer\"]==i][\"price\"]))\n    diagnostic_plots(df[df[\"manufacturer\"]==i],\"price\")","1761d96b":"df.eq(0).sum().to_frame()\n","13e78e18":"df[df.price==0].shape[0]","cd9ea09b":"df=df.drop(df[df[\"price\"]==0].index)","eef06868":"stats.describe(df.price)","f906503c":"nominal.associations(df,figsize=(20,10),mark_columns=True);","c2ba0fd0":"plt.figure(figsize=(12,5))\ncorr=df.corr(method=\"spearman\").abs()\nmask=np.zeros_like(corr,dtype=np.bool)\nmask[np.triu_indices_from(mask)]=True\nsns.heatmap(corr,annot=True,cmap=\"coolwarm\",mask=mask);","22d255d5":"df.drop(df[(df.price<500 )|( df.price>28000)].index)[\"price\"].describe()","a122be2f":"stats.describe(df.drop(df[(df.price<500 )|( df.price>28000)].index)[\"price\"])","4263d70b":"sns.boxplot(df.drop(df[(df.price<500 )|( df.price>28000)].index)[\"price\"]);","c13368de":"diagnostic_plots(df,\"price\");","fb62a651":"df_cleaned=df.copy()\ndf_cleaned=df.drop(df[(df.price<500 )|( df.price>28000)].index)\ndiagnostic_plots(df_cleaned,\"price\")","5d416c4b":"plt.figure(figsize=(17,5))\n\nplt.subplot(141);\nsns.distplot(df_cleaned.price);\nprint(\"Normality Test before boxcox transformation:\",stats.shapiro(df_cleaned.price))\n\nplt.subplot(142);\nsns.boxplot(df_cleaned.price);\n\nplt.subplot(143);\nsns.distplot(stats.boxcox(df_cleaned.price)[0]);\n\nplt.subplot(144);\nsns.boxplot(stats.boxcox(df_cleaned.price)[0]);\nprint(\"Normality Test after boxcox transformation:\",stats.shapiro(stats.boxcox(df_cleaned.price)[0]))\n","2fc833a5":"stats.boxcox(df_cleaned.price)[0][:5]","ac2a1cb5":"stats.probplot(stats.yeojohnson(df_cleaned.price)[0],dist=\"norm\", plot=plt);","40077762":"stats.probplot(df_cleaned.price**1\/2,dist=\"norm\", plot=plt);","7c124df7":"stats.probplot(1\/df_cleaned.price,dist=\"norm\", plot=plt);","26c4dfdf":"stats.probplot(df_cleaned.price**(1\/1.5),dist=\"norm\",plot=plt);","a526c032":"plt.figure(figsize=(12,5))\ncorr=df_cleaned.corr(method=\"spearman\").abs()\nmask=np.zeros_like(corr,dtype=np.bool)\nmask[np.triu_indices_from(mask)]=True\nsns.heatmap(corr,annot=True,cmap=\"coolwarm\",mask=mask);","6c3f7b29":"researchpy.correlation.corr_pair(df_cleaned.select_dtypes(exclude=\"object\"))","6767d42a":"df_cleaned.select_dtypes(include=\"object\").columns[1:]","df9525be":"nominal.associations(df_cleaned,figsize=(20,10),mark_columns=True); # for nominal and categorical (Cramer's V)","6c4be63b":"for i in df_cleaned.select_dtypes(include=\"object\").columns[1:]:\n    print(str(i) + \" and \" + \"model\")\n    \n    crosstab, res = researchpy.crosstab(df_cleaned[i], df_cleaned[\"model\"], test= \"chi-square\")\n    print(res);","b8091294":"for i in to_plot_labels:\n    print(\"--\"*10,str(i).upper(),\"--\"*10,end=\"\\n\")\n    print(stats.describe(df_cleaned[df_cleaned[\"manufacturer\"]==i][\"price\"]))\n    diagnostic_plots(df_cleaned[df_cleaned[\"manufacturer\"]==i],\"price\")\n    ","144a57c8":"cols=[\"manufacturer\",\"condition\",\"cylinders\",\"fuel\",\"title_status\",\"transmission\",\"drive\",\"size\",\"type\",\"paint_color\"]\n\nfor i in cols:\n    plt.figure(figsize=(12,5));\n    sns.countplot(df_cleaned[i]).set_xticklabels(labels=df_cleaned[i].value_counts().index,rotation=90);\n    \n    plt.show();","82f454dd":"\nfor i in cols:\n    df_cleaned.groupby(i)[\"price\"].mean().sort_values(ascending=False).plot.bar(figsize=(16,5));\n    plt.title(\"Mean Price According to \" + str(i))\n    plt.show();","82d46efe":"df_cleaned.head()","e5c850af":"df_cleaned=df_cleaned.drop(columns=[\"lat\",\"long\",\"model\"],axis=1)\ndf_cleaned.head()","06fadc04":"df_cleaned.state.value_counts().count()","d6542575":"df_cleaned.region.value_counts().count()","97d7852b":"df_cleaned=df_cleaned.drop(columns=[\"region\"],axis=1)","b97ac82d":"nominal.associations(df_cleaned,figsize=(20,10),mark_columns=True,cmap=\"coolwarm\");","3844e923":"df_cleaned.head()","56051f07":"def find_skewed_boundaries(df, variable, distance):\n\n    IQR = df[variable].quantile(0.75) - df[variable].quantile(0.25)\n    #stats.iqr(df[variable])\n    print(\"IQR Value :\",IQR)\n    lower_boundary = df[variable].quantile(0.25) - (IQR * distance)\n    upper_boundary = df[variable].quantile(0.75) + (IQR * distance)\n\n    return upper_boundary, lower_boundary\n\n\n\nfind_skewed_boundaries(df_cleaned,\"price\",1.5)","798b113f":"upper_odo,lower_odo=find_skewed_boundaries(df_cleaned,\"odometer\",1.5)\nupper_odo,lower_odo","55111234":"df_cleaned[(df_cleaned.odometer>upper_odo)].shape,df_cleaned[~(df_cleaned.odometer>upper_odo)].shape","a3a69116":"df_cleaned[df_cleaned.odometer<0]","91186240":"plt.figure(figsize=(12,5));\nplt.subplot(121);\nsns.boxplot(df_cleaned.odometer);\n\nplt.subplot(122);\nsns.boxplot(df_cleaned[~(df_cleaned.odometer>upper_odo)][\"odometer\"]);","3366d198":"df_cleaned=df_cleaned[~(df_cleaned.odometer>upper_odo)]\ndf_cleaned.head()","7ad5fa82":"X=df_cleaned.drop(columns=[\"price\"])\ny=df_cleaned[\"price\"]\nX.head()","9e9d37e5":"y.head()","741aa447":"X_train,X_test,y_train,y_test=train_test_split(X,y,\n                                               test_size=0.20,\n                                                random_state=42)","263c921d":"X_train.shape,X_test.shape,y_train.shape,y_test.shape","9d20f849":"multi_cat_cols = []\n\nfor col in X_train.columns:\n\n    if X_train[col].dtypes =='O': # if variable  is categorical\n    \n        if X_train[col].nunique() > 10: # and has more than 10 categories\n            \n            multi_cat_cols.append(col)  # add to the list\n            \n            print(X_train.groupby(col)[col].count()\/ len(X_train)) # and print the percentage of observations within each category\n            \n            print()","71258f4a":"for col in ['manufacturer', 'state', 'title_status']:\n\n    temp_df = pd.Series(X_train[col].value_counts() \/ len(X_train) )\n    plt.figure(figsize=(12,5));\n    # make plot with the above percentages\n    fig = temp_df.sort_values(ascending=False).plot.bar()\n    fig.set_xlabel(col)\n\n    # add a line at 5 % to flag the threshold for rare categories\n    fig.axhline(y=0.0125, color='red')\n    fig.set_ylabel('Percentage')\n    plt.show()","85b28816":"X_train.manufacturer.value_counts().to_frame()","e409f541":"X_train.manufacturer.value_counts().index[-10:]","21b157ca":"X_train[\"year\"]=2020-X_train[\"year\"]\nX_test[\"year\"]=2020-X_test[\"year\"]\nX_train.head()","5c818ee3":"rare_encoder = RareLabelCategoricalEncoder(\n    tol=0.0125,  # minimal percentage to be considered non-rare\n    n_categories=10, # minimal number of categories the variable should have to re-cgroup rare categories\n    variables=[\"manufacturer\",\"state\",\"title_status\"] # variables to re-group\n)  ","93a3b6ad":"rare_encoder.fit(X_train)","931d887e":"rare_encoder.encoder_dict_","e59de63c":"X_train = rare_encoder.transform(X_train)\nX_test = rare_encoder.transform(X_test)","d13f9058":"rare_encoder = RareLabelCategoricalEncoder(\n    tol=0.05,  # minimal percentage to be considered non-rare\n    n_categories=3, # minimal number of categories the variable should have to re-cgroup rare categories\n    variables=[\"title_status\"],\n    replace_with='NotClean' # variables to re-group\n)  \n\nrare_encoder.fit(X_train)\nX_train = rare_encoder.transform(X_train)\nX_test = rare_encoder.transform(X_test)","fa400b0e":"X_train.title_status.value_counts()","90f7d44b":"X_train.head()","be09415d":"X_train.condition.value_counts()","cfa17c3c":"X_train.condition=X_train.condition.replace({\"salvage\":1,\"new\":2,\"fair\":3,\"like new\":4,\"good\":5,\"excellent\":6})\nX_test.condition=X_test.condition.replace({\"salvage\":1,\"new\":2,\"fair\":3,\"like new\":4,\"good\":5,\"excellent\":6})","c5677af2":"\nX_train_encoded=pd.get_dummies(X_train,drop_first=True)\nX_test_encoded=pd.get_dummies(X_test,drop_first=True)\nX_train_encoded.head()","f4b54aba":"models=[]\n\nmodels.append(XGBRegressor(random_state=42,tree_method=\"hist\",max_depth=5))\nmodels.append((LGBMRegressor(random_state=42)))\nmodels.append(RandomForestRegressor(random_state=42,max_depth=5))\nmodels.append(ExtraTreesRegressor(random_state=42,bootstrap=True,max_depth=5))\nmodels.append(HistGradientBoostingRegressor(random_state=42))\n\nr2_values_test = []\nr2_values_train=[]\nrmse_values_test=[]\nmse_values_test=[]\nfor model in models:\n    \n    model_=model.fit(X_train_encoded,y_train)\n    y_pred=model_.predict(X_test_encoded)\n    \n    r2_train=model_.score(X_train_encoded,y_train)\n    r2_values_train.append(r2_train)\n    \n    r2 = model_.score(X_test_encoded,y_test)\n    r2_values_test.append(r2)\n       \n    \n    rmse_test=np.sqrt(mean_squared_error(y_test,y_pred))   \n    rmse_values_test.append(rmse_test)\n    \n    mse_test=mean_squared_error(y_test,y_pred)\n    mse_values_test.append(mse_test)\n    \nresult=pd.DataFrame(list(zip(r2_values_test,r2_values_train)),columns=[\"r2_score_test\",\"r2_score_train\"])\nresult[\"rmse_test\"] =rmse_values_test\nresult[\"mse_test\"]=mse_values_test\nresult[\"model\"]=[\"XGBoost\",\"LGBM\",\"RF\",\"ExtraTree\",\"HGBoost\"]  \nresult","cf4a4f16":"xgb_=XGBRegressor(random_state=42)\nxgb_model=xgb_.fit(X_train_encoded,y_train)\npreds=xgb_model.predict(X_test_encoded)","cab3fa5f":"xgb_model.score(X_train_encoded,y_train),xgb_model.score(X_test_encoded,y_test)","370b0ccc":"y_test.mean(),y_test.std()\n","b66976df":"preds.mean(),preds.std()","54187069":"pd.DataFrame(list(zip(y_test,preds)),columns=[\"test\",\"preds\"]).head(10)","d9449c9b":"ax=plot_importance(xgb_model,max_num_features=15,height=0.5);\nfig = ax.figure\nfig.set_size_inches(12, 5)","a275c5dc":"xgb.to_graphviz(xgb_model)","140a3411":"X_train,X_test,y_train,y_test=train_test_split(X,y,\n                                               test_size=0.20,\n                                                random_state=42)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","ebab0172":"X_train.head()","dc54930e":"X_test.head()","0a5a5867":"X_train[\"year\"]=2020-X_train[\"year\"]\nX_test[\"year\"]=2020-X_test[\"year\"]\nX_train.head()","0621066a":"X_test.head()","a88c7bb7":"pipeline_used_car=Pipeline([\n    \n    (\"encoder_rare_label\",RareLabelCategoricalEncoder(tol=0.05,n_categories=7, variables=[\"manufacturer\",\"state\",\"title_status\"])),\n    \n    (\"encoder_rare_label_\",RareLabelCategoricalEncoder(tol=0.05, n_categories=7, variables=[\"title_status\"],replace_with='NotClean')),  \n    \n    (\"categorical_encoder\",OrdinalCategoricalEncoder(encoding_method='ordered',variables=['condition'])),\n    \n    (\"categorical_encoder_\",OneHotCategoricalEncoder(drop_last=False)),\n    \n    (\"xgb\",XGBRegressor(random_state=42))\n    \n    \n        \n])","ad628d45":"pipeline=make_pipeline(RareLabelCategoricalEncoder(tol=0.05,n_categories=7, variables=[\"manufacturer\",\"state\",\"title_status\"]),\n                     RareLabelCategoricalEncoder(tol=0.05, n_categories=7, variables=[\"title_status\"],replace_with='NotClean'),\n                      OrdinalCategoricalEncoder(encoding_method='ordered',variables=['condition']),\n                      OneHotCategoricalEncoder(drop_last=False),\n                      XGBRegressor(random_state=42))","8eb32b40":"pipeline_used_car.fit(X_train,y_train)","a01f5051":"pipeline.fit(X_train,y_train)","193d0f2a":"preds=pipeline_used_car.predict(X_test)\nr2_score(y_test,preds)","6d592ef7":"predicts=pipeline.predict(X_test)\nr2_score(y_test,predicts)","a00f7595":"param_grid={'categorical_encoder__encoding_method': ['ordered', 'arbitrary'],\n            \n             'xgb__max_depth': [None, 1, 3]}","3c0fcf54":"grid_search = GridSearchCV(pipeline_used_car, param_grid,cv=5,n_jobs=-1,scoring=\"r2\")","76648880":"grid_search.fit(X_train, y_train)","1b04eebd":"print((\"best score from grid search: %.3f\" % grid_search.score(X_train, y_train)))","2fffb6f3":"grid_search.best_estimator_","ff857b52":"grid_search.cv_results_['params']","fa042f77":"grid_search.cv_results_['mean_test_score']","2d2d6e56":"print((\"best xgboost regressor from grid search: %.3f\"% grid_search.score(X_test, y_test)))","eb6cf8d1":"# Make Pipeline","82c12a60":"# Train-Test Split","52c61686":"# Import the Libraries","6372dd73":"# Feauture Engineering","96f71e9d":"# Models","5ba6b611":"# EDA and Data Preprocessing"}}