{"cell_type":{"1788d5e1":"code","e3b26a29":"code","b8301bf5":"code","6ab46a96":"code","e473dd83":"code","32246981":"code","0d520b7b":"code","cefba73b":"code","f2e3269c":"code","4dbae08a":"code","41f9708e":"code","746729d6":"code","b3db82b7":"code","bff60b61":"code","f137f473":"code","803e8226":"code","f0b2f58b":"code","71d5c4a3":"code","5fdfda7a":"code","7f31f2ae":"code","84ba30e8":"code","8bd9d5c7":"code","77062e59":"code","18734088":"code","915e8f32":"code","126c9da4":"code","4d2534b0":"code","d7b774d7":"code","fa178bca":"code","93ad817e":"code","623ffc0f":"code","ab14afa8":"code","b40a2a9c":"code","72cad205":"code","9be8c6c5":"markdown","163936e0":"markdown","aeea2da3":"markdown","415ff68b":"markdown","4a4049f2":"markdown","cb81ae2c":"markdown","6d96d2b7":"markdown"},"source":{"1788d5e1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e3b26a29":"#\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u8fbc\u307f\u306f\u300cimport\u300d\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b8301bf5":"#\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u306fPandas\u306e\u300cread_csv()\u300d\ndata_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndata_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndata_gender_submission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')","6ab46a96":"#\u30c7\u30fc\u30bf\u6570\u304c\u591a\u3044\u3068\u5168\u4ef6\u8868\u793a\u306f\u6642\u9593\u304c\u304b\u304b\u308b\n#head()\u3067\u8868\u793a\u884c\u6570\u3092\u6307\u5b9a\uff08\u30c7\u30d5\u30a9\u30eb\u30c85\u884c\uff09\ndata_train.head()","e473dd83":"data_test.head(10)","32246981":"data_gender_submission.head()","0d520b7b":"#describe()\u3092\u4f7f\u3048\u3070\u3001\u4e3b\u8981\u306a\u7d71\u8a08\u6307\u6a19\u3092\u307e\u3068\u3081\u3066\u78ba\u8a8d\u3067\u304d\u308b\ndata_train.describe()","cefba73b":"#\u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u3056\u3063\u3068\u78ba\u8a8d\u3059\u308b\u306b\u306f\u300cpandas_profiling\u300d\u304c\u4fbf\u5229\nimport pandas_profiling","f2e3269c":"#\u5b9f\u884c\u306fpandas.DataFrame\u306e\u300cprofile_report()\u300d\n# data_train.profile_report()\n\n# profile = pandas_profiling.ProfileReport(data_train)\n# profile.to_file(\"myoutputfile.html\")","4dbae08a":"#Pclass\u3068Survived\u306e\u4ef6\u6570\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316\nsns.countplot(x='Pclass', hue='Survived', data=data_train)","41f9708e":"#Sex\u3068Survived\u306e\u4ef6\u6570\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316\nsns.countplot(x='Sex', hue='Survived', data=data_train)","746729d6":"#\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u5e45\u3092\u53d6\u3063\u3066\u78ba\u8a8d\nplt.hist(data_train.loc[data_train['Survived'] == 0, 'Age'].dropna(), bins=30, alpha=0.7, label='0')\nplt.hist(data_train.loc[data_train['Survived'] == 1, 'Age'].dropna(), bins=30, alpha=0.7, label='1')\n\nplt.xlabel('Age')\nplt.ylabel('Count')\nplt.legend(title='Survived')","b3db82b7":"#SibSp\u3068Survived\u306e\u4ef6\u6570\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316 \u2192\u5144\u5f1f\uff08Siblings\uff09\u3084\u914d\u5076\u8005\uff08Spouses\uff09\u306e\u6570\nsns.countplot(x='SibSp', hue='Survived', data=data_train)","bff60b61":"#Parch\u3068Survived\u306e\u4ef6\u6570\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316 \u2192\u89aa\uff08Parents\uff09\u3084\u5b50\u4f9b\uff08Children\uff09\u306e\u6570\nsns.countplot(x='Parch', hue='Survived', data=data_train)\n#\u51e1\u4f8b\u306e\u4f4d\u7f6e\u56fa\u5b9a\nplt.legend(loc='upper right', title='Survived')","f137f473":"#\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u5e45\u3092\u53d6\u3063\u3066\u78ba\u8a8d\n#\u7279\u5b9a\u306e\u7bc4\u56f2\u306b\u96c6\u307e\u3063\u3066\u3044\u308b\u3068\u304d\u306f\u30d3\u30f3\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u305f\u307b\u3046\u304c\u898b\u3084\u3059\u3044\nplt.hist(data_train.loc[data_train['Survived'] == 0, 'Fare'].dropna(), bins=30, alpha=0.7, label='0')\nplt.hist(data_train.loc[data_train['Survived'] == 1, 'Fare'].dropna(), bins=30, alpha=0.7, label='1')\nplt.xlabel('Fare')\nplt.ylabel('Count')\nplt.legend(title='Survived')","803e8226":"#\u518d\u78ba\u8a8d\n#\u7279\u5b9a\u306e\u7bc4\u56f2\u306b\u96c6\u307e\u3063\u3066\u3044\u308b\u3068\u304d\u306f\u30d3\u30f3\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u305f\u307b\u3046\u304c\u898b\u3084\u3059\u3044\nplt.hist(data_train.loc[data_train['Survived'] == 0, 'Fare'].dropna(), range=(0,250), bins=20, alpha=0.7, label='0')\nplt.hist(data_train.loc[data_train['Survived'] == 1, 'Fare'].dropna(), range=(0,250), bins=20, alpha=0.7, label='1')\nplt.xlabel('Fare')\nplt.ylabel('Count')\nplt.legend(title='Survived')","f0b2f58b":"#Embarked\u3068Survived\u306e\u4ef6\u6570\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u53ef\u8996\u5316\nsns.countplot(x='Embarked', hue='Survived', data=data_train)","71d5c4a3":"#\u6559\u5e2b\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3001\u53cc\u65b9\u306b\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u3001\u4e00\u65e6\u3072\u3068\u3064\u306b\u7d50\u5408\ndata_all = pd.concat([data_train, data_test], sort=False)\ndata_all","5fdfda7a":"#\u5404\u7279\u5fb4\u91cf\u306e\u6b20\u640d\u5024\u306e\u6570\u3092\u78ba\u8a8d\n#\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306f\u300cSurvived\u300d\u304c\u306a\u3044\u305f\u3081\u6b20\u640d\u5024\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u3066\u3044\u308b\ndata_all.isnull().sum()","7f31f2ae":"#Sex\u306e\u5024\u3092\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\ndata_all['Sex'].replace(['male', 'female'], [0, 1], inplace=True)","84ba30e8":"data_all.head()","8bd9d5c7":"#Embarked\u306e\u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3057\u3001\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\u308b\ndata_all['Embarked'].fillna('S', inplace=True)\ndata_all['Embarked'].replace(['S', 'C', 'Q'], [0, 1, 2], inplace=True)","77062e59":"data_all.head()","18734088":"#Fare\u306e\u6b20\u640d\u5024\u3092\u5e73\u5747\u5024\u3067\u88dc\u5b8c\u3059\u308b\ndata_all['Fare'].fillna(np.mean(data_all['Fare']), inplace=True)","915e8f32":"#Age\u306e\u6b20\u640d\u5024\u3092\u5e73\u5747\u5024\u3067\u88dc\u5b8c\u3059\u308b\ndata_all['Age'].fillna(np.mean(data_all['Age']), inplace=True)","126c9da4":"#\u5f71\u97ff\u306e\u5c11\u306a\u305d\u3046\u306a\u7279\u5fb4\u91cf\u306f\u4e00\u65e6\u524a\u9664\u3059\u308b\ndrop_columns = ['PassengerId', 'Name', 'Parch', 'SibSp', 'Ticket', 'Cabin']\ndata_all.drop(drop_columns, axis=1, inplace=True)","4d2534b0":"#\u518d\u78ba\u8a8d\ndata_all.isnull().sum()","d7b774d7":"#\u7d50\u5408\u3057\u305f\u30c7\u30fc\u30bf\u3092\u3001\u518d\u5ea6\u6559\u5e2b\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5206\u96e2 \u2192\u30b9\u30e9\u30a4\u30b9\u3092\u5229\u7528 sequence[start:stop]\ndata_train = data_all[:len(data_train)]\ndata_test = data_all[len(data_train):]","fa178bca":"#\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u6295\u5165\u3059\u308b\u305f\u3081\u3001\u7279\u5fb4\u91cf\u3068\u76ee\u7684\u5909\u6570\u3092\u5206\u96e2\ny_data_train = data_train['Survived']\nX_data_train = data_train.drop('Survived', axis=1)\nX_data_test = data_test.drop('Survived', axis=1)","93ad817e":"#\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\nfrom sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=0)","623ffc0f":"#\u6559\u5e2b\u30c7\u30fc\u30bf\u306e\u5b66\u7fd2\nclf.fit(X_data_train, y_data_train)","ab14afa8":"#\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\n#predict\u306e\u95be\u5024\u306f0.5\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u306a\u306e\u3067\u30010.5\u4ee5\u4e0a\u30921\u3001\u672a\u6e80\u30920\u3068\u3057\u3066\u8fd4\u3059\ny_data_pred = clf.predict(X_data_test)","b40a2a9c":"y_data_pred","72cad205":"#\u4e88\u6e2c\u7d50\u679c\u3092Submit\u7528\u306ecsv\u3068\u3057\u3066\u4f5c\u6210\nsubmit = data_gender_submission\nsubmit['Survived'] = list(map(int, y_data_pred))\nsubmit.to_csv('randomForest_submit.csv', index=False)","9be8c6c5":"# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8aad\u307f\u8fbc\u307f","163936e0":"# \u30e2\u30c7\u30eb\u4f5c\u6210","aeea2da3":"# Submit","415ff68b":"# \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0","4a4049f2":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","cb81ae2c":"# EDA\uff08\u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u5206\u6790\uff09","6d96d2b7":"## \u5404\u7279\u5fb4\u91cf\u3068\u76ee\u7684\u5909\u6570\u306e\u95a2\u4fc2\u6027\u3092\u78ba\u8a8d"}}