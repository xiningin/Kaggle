{"cell_type":{"2967dd59":"code","d86bc6c4":"code","b7760b45":"code","2eafa063":"code","e9fc2ccb":"code","c31b61a7":"code","ad407f57":"code","35e92de2":"code","accc379f":"markdown","4f9ce716":"markdown"},"source":{"2967dd59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nDATA_TRAIN_FPATH = '\/kaggle\/working\/train.csv'\nDATA_TEST_FPATH = '\/kaggle\/working\/test.csv'\nDATA_FPATH = '\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv'","d86bc6c4":"df = pd.read_csv(DATA_FPATH)\ndf['date'] = pd.to_datetime(df['date'])\ndf = df.sort_values('date')\ndf.loc[df.date <= '2019-06-21'].to_csv(DATA_TRAIN_FPATH, index=False)\ndf.loc[df.date > '2019-06-21'].to_csv(DATA_TEST_FPATH, index=False)","b7760b45":"import matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nfrom sklearn.metrics import (\n    mean_squared_error,\n    mean_absolute_error,\n    explained_variance_score\n)\nfrom catboost import CatBoostRegressor, CatBoostClassifier\nfrom catboost import CatBoost, Pool, MetricVisualizer, cv\n\nSEED = 42\n\n\ndef get_data(type='train', return_df = False):\n    assert type in ('train', 'test')\n    \n    if type == 'train':\n        data_path = DATA_TRAIN_FPATH\n    else:\n        data_path = DATA_TEST_FPATH\n    df = pd.read_csv(data_path)\n    df['date'] = pd.to_datetime(df['date'])\n\n    df.drop(['order_id' , \n             'line_item_type_id',\n             'integration_type_id',\n            ], axis = 1, inplace=True)\n\n    def weird_division(n, d):\n        return n \/ d if d else 0\n\n\n\n    #calculating CPM\n    #calculating the value that the Advertisers Bid for the month of June\n    # CPM(the value which was the winning bid value) = \n    #((revenue of the publisher*100)\/revenue_share_percentage)\/measurable_impressions)*1000\n    df['CPM'] = df.apply(lambda x: 1e3 * \\\n                         weird_division(x['total_revenue'] * (x['revenue_share_percent'] * 100.),\n                                        x['measurable_impressions']),\n                                        axis=1)\n    df.drop(['revenue_share_percent'], axis=1, inplace=True)\n    df['View\/measurable'] = df.apply(lambda x: weird_division(x['viewable_impressions'],x['measurable_impressions']) , axis=1)\n\n    # CPM can't be less then zero\n    # also filter out anomaly high values\n    df = df[df['CPM'].between(0, df['CPM'].quantile(.95))]\n        \n    if return_df:\n        return df\n    \n    \n    X = (df\n         .drop(['date', 'CPM', 'total_revenue'], axis=1)\n    )\n    X['total_impressions'] =  X['total_impressions'].apply(lambda x: np.log(x + 1))\n    X['viewable_impressions'] =  X['viewable_impressions'].apply(lambda x: np.log(x + 1))\n    X['measurable_impressions'] =  X['measurable_impressions'].apply(lambda x: np.log(x + 1))\n    \n    y = (df\n         .CPM#.apply(lambda x: np.log(x + 1))\n    )\n    return X, y","2eafa063":"# import scipy\n# params = {'loss_function': 'RMSE', 'custom_metric': ['RMSE'], 'verbose':True}\n# max_depth = np.unique(np.random.randint(3, 10, size=5))\n# learning_rate = np.random.uniform(0.001,1,5)\n# l2_leaf_reg = scipy.stats.reciprocal.rvs(a=1e-2, b=1e1, size=5)\n\n# X, y = get_data()\n\n# df_cv = Pool(data=X, label=y, cat_features = ['ad_type_id', \n#                                               'site_id', \n#                                               'geo_id',\n#                                               'device_category_id',\n#                                               'advertiser_id',\n#                                               'os_id',\n#                                               'monetization_channel_id',\n#                                               'ad_unit_id'\n#                                              ])\n\n# tuning_table = pd.DataFrame()\n# print('start cv')\n# for depth in max_depth:\n#     for _lr in learning_rate:\n#         for l2 in l2_leaf_reg:\n#             params['learning_rate'] = _lr\n#             params['l2_leaf_reg'] = l2\n#             params['max_depth'] = depth\n#             print(f\"start training on params lr={params['learning_rate']};l2={params['l2_leaf_reg']};max_depth={params['max_depth']};\")\n#             tuning_table = cv(df_cv,\n#                      params = params,\n#                      plot=False,\n#                      nfold=3,\n#                      shuffle=True,\n#                      iterations = 1000, \n#                      early_stopping_rounds=50,\n#                      logging_level='Silent', \n#                      seed = SEED)\n#             name = f\"lr={params['learning_rate']};l2={params['l2_leaf_reg']};max_depth={params['max_depth']};iterations={tuning_table.iterations.max()}\"\n#             tuning_table['model'] = name\n#             tuning_table.to_pickle(f'catboost_res\/{name}.pkl')\n#             display(tuning_table.groupby('model')[\n#                 ['train-RMSE-mean', 'train-RMSE-std','test-RMSE-mean', 'test-RMSE-std']\n#             ].min())","e9fc2ccb":"params = {}\nparams['learning_rate'] = 0.7\nparams['l2_leaf_reg'] = 0.09\nparams['max_depth'] = 3\nparams['task_type'] = 'CPU'\nparams['random_seed'] = SEED\n\n\ncbr = CatBoostRegressor(objective='RMSE',\n                        iterations=400,\n                       **params)\nX, y = get_data()\nX_train = X#.iloc[:TRAIN_END_IDX_18]\ny_train = y#.iloc[:TRAIN_END_IDX_18]\n\nX_train_pool = Pool(\n    data=X_train, \n    label=y_train, \n    cat_features = ['ad_type_id', \n                    'site_id', \n                    'geo_id',\n                    'device_category_id',\n                    'advertiser_id',\n                    'os_id',\n                    'monetization_channel_id',\n                    'ad_unit_id'\n                 ])\n\n# X_val = X.iloc[TRAIN_END_IDX_18 + 1:]\n# y_val = y.iloc[TRAIN_END_IDX_18 + 1:]\n\n# X_val_pool = Pool(data=X_val, label=y_val, cat_features = ['ad_type_id', \n#                                               'site_id', \n#                                               'geo_id',\n#                                               'device_category_id',\n#                                               'advertiser_id',\n#                                               'os_id',\n#                                               'monetization_channel_id',\n#                                               'ad_unit_id'\n#                                              ])\n\n\n\n\ncbr.fit(X_train_pool)#, eval_set=X_val_pool, plot=True)","c31b61a7":"preds = np.array([x if x >=0 else 0 for x in cbr.predict(X_train_pool)])\nplt.hist(preds);\n\nmean_squared_error(\n    y_train, \n    preds\n)","ad407f57":"X_test, y_test = get_data('test')\nX_test_pool = Pool(\n    data = X_test.loc[:, X_train.columns],\n    label = y_test,\n    cat_features = ['ad_type_id', \n                    'site_id', \n                    'geo_id',\n                    'device_category_id',\n                    'advertiser_id',\n                    'os_id',\n                    'monetization_channel_id',\n                    'ad_unit_id'\n                  ]\n)","35e92de2":"preds = np.array([x if x >=0 else 0 for x in cbr.predict(X_test_pool)])\n\nplt.hist(preds);\n\nmean_squared_error(\n    y_test, \n    cbr.predict(X_test_pool)\n)","accc379f":"# MSE on test set","4f9ce716":"# CV\nUncoment if you want to run cv"}}