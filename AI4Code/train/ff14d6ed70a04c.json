{"cell_type":{"ffada54f":"code","c95429e8":"code","a11d3f0d":"code","523f24fc":"code","71b7d0c5":"code","0cad2fec":"code","d1c2f672":"code","fe13121b":"code","085b7c25":"code","23a29e84":"code","8a3f7ee6":"code","a075d14f":"code","3d4e2b21":"markdown","f5332a87":"markdown","831f9489":"markdown","7c1a53ca":"markdown","32d81723":"markdown","f5b2a924":"markdown"},"source":{"ffada54f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf \nimport matplotlib.pyplot as plt \nfrom tensorflow.keras import models","c95429e8":"print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))\n","a11d3f0d":"train_images_labels  = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest_images_labels = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","523f24fc":"from termcolor import colored\nprint(\"train : \",colored(train_images_labels.shape,'blue'),\"test : \",colored(test_images_labels.shape,'blue'))","71b7d0c5":"number_One=np.array(train_images_labels.iloc[10,1:]).reshape((28,28))\nf, axarr = plt.subplots(3,3)\naxarr[0,0].imshow(np.array(test_images_labels.iloc[0,0:]).reshape((28,28)))\naxarr[0,1].imshow(np.array(train_images_labels.iloc[1,1:]).reshape((28,28)))\naxarr[0,2].imshow(np.array(train_images_labels.iloc[9,1:]).reshape((28,28)))\naxarr[1,0].imshow(np.array(train_images_labels.iloc[3,1:]).reshape((28,28)))\naxarr[1,1].imshow(np.array(train_images_labels.iloc[46,1:]).reshape((28,28)))\naxarr[1,2].imshow(np.array(train_images_labels.iloc[52,1:]).reshape((28,28)))\naxarr[2,0].imshow(np.array(train_images_labels.iloc[6,1:]).reshape((28,28)))\naxarr[2,1].imshow(np.array(train_images_labels.iloc[7,1:]).reshape((28,28)))\naxarr[2,2].imshow(np.array(train_images_labels.iloc[8,1:]).reshape((28,28)))","0cad2fec":"train_labels , test_labels = train_images_labels.iloc[:,0],test_images_labels.iloc[:,0]","d1c2f672":"# callbacks help you to stop the training when you reach a% accuracy or b% loss it depends on you (:\nclass myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('accuracy')> 0.9999):\n            print(\"\\nReached 100% accuracy so cancelling training!\")\n            self.model.stop_training = True\n\ncallbacks = myCallback()\n\n\nmnist = tf.keras.datasets.mnist\n(training_images, training_labels), (test_images, test_labels) = mnist.load_data()\n\ntraining_images=training_images.reshape(training_images.shape[0], 28, 28, 1)\ntraining_images=training_images \/ 255.0\ntest_images = test_images.reshape(test_images.shape[0], 28, 28, 1)\ntest_images=test_images\/255.0\n\n#define layers of our model\n#each element in parametre list is a layer of our CNN\nmodel = tf.keras.models.Sequential([\n        \n        tf.keras.layers.Conv2D(72, (3,3), activation='relu', input_shape=(28, 28, 1)),\n        tf.keras.layers.MaxPooling2D(2, 2),\n        tf.keras.layers.Conv2D(72, (3,3), activation='relu'),\n        tf.keras.layers.MaxPooling2D(2, 2),\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(128, activation='relu'),\n        tf.keras.layers.Dense(10, activation='softmax')\n        \n])\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\n# this part is very interesting if you want to the input an output of each layer in you Neural Network\nmodel.summary()\n\n# model fitting\nhistory = model.fit(\n   \n    training_images, training_labels, epochs=100 ,  callbacks=[callbacks]\n    \n)\n# model fitting\n#history.epoch, history.history['acc'][-1]\n\n","fe13121b":"predictions = model.predict(np.array(test_images_labels.iloc[0:,0:]).reshape((28000,28,28,1)))","085b7c25":"prediction_s = predictions.argmax(axis=1) ","23a29e84":"#prediction_s","8a3f7ee6":"submit = pd.DataFrame({\"ImageId\":np.array(range(1,28001)),\"Label\":prediction_s})","a075d14f":"submit.to_csv('submission.csv', index=False)","3d4e2b21":"## We have 42 000 images to train and 28 000 to test our model","f5332a87":"![](https:\/\/www.researchgate.net\/profile\/Amir_Hossein_Yazdani_Abyaneh\/publication\/329608053\/figure\/download\/fig2\/AS:703218313080832@1544671719021\/Typical-CNN-architecture.jpg)","831f9489":"### If ou are interesting in understanding CNN from scratch i recommend this amazing playist from Andrew NG :\nhttps:\/\/www.youtube.com\/watch?v=ArPaAX_PhIs&list=PLkDaE6sCZn6Gl29AoE31iwdVwSG-KnDzF&index=1","7c1a53ca":"![](https:\/\/i.ytimg.com\/vi\/KMPHZrsAPfw\/maxresdefault.jpg)","32d81723":"## Plot 9 random images","f5b2a924":"## Convolutional Neural Network"}}