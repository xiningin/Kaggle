{"cell_type":{"5dca76db":"code","5c9ed2ab":"code","95e542a1":"code","88bb4ec3":"code","b69f4ef0":"code","11c78c31":"code","6e3517ba":"code","1aa14989":"code","a885391b":"code","db0a5c1c":"code","802ff233":"code","a98591bf":"code","1e9fec77":"code","0db49c59":"code","11479c30":"code","7971e3a2":"code","b657fd86":"code","eae60b87":"code","0349fac2":"code","87eb5b52":"code","74e40180":"code","a45f99f7":"code","5b02ff49":"code","9cd18aa9":"code","e3bb75ec":"code","80e00c63":"code","fb3264ac":"code","2e48b566":"code","79464a1e":"code","d792a0fe":"code","80e7d793":"code","fbdf37a1":"code","e156791e":"code","ac05a922":"code","3b7efa81":"code","75d03b51":"code","80bf0762":"code","18ec0f44":"code","0fc9b51f":"code","72b8aaa7":"code","b25ee9cd":"code","81572497":"code","ce65b463":"code","900743b3":"code","96680bd8":"code","7009e8cb":"code","c6b6bc98":"code","04eb66f7":"code","32f0ae20":"code","c435c57d":"code","4326c0c5":"code","7d878cd6":"code","0afc59fe":"code","910753cf":"code","2154b6b8":"code","29b84a0e":"code","4f7b5fca":"code","f1f80877":"code","c86f97ae":"code","21959573":"code","10c5013d":"code","e07c3538":"code","0709b781":"code","0ad9c856":"code","8e60e807":"code","64e481e7":"code","11ececa7":"code","e03fb7fd":"code","83db3525":"code","cda81390":"code","a9a48aa5":"code","80e43df7":"code","828bf1c4":"code","0132221b":"code","283d75e6":"code","7b5b803a":"code","3acea8aa":"code","9add1ac6":"code","0fa7a9cd":"code","692dc89d":"markdown","c4f25812":"markdown","8719b611":"markdown","7c75294b":"markdown","ee5cc016":"markdown","ca0e60e1":"markdown","3f88a4f0":"markdown","f8dd7206":"markdown","17e4242d":"markdown","909dfb72":"markdown","77fd85ae":"markdown","064a7cf7":"markdown","9b1e3722":"markdown","0cb5547f":"markdown","30b93ce1":"markdown","68dc7c5a":"markdown","74874410":"markdown","1a83c3ab":"markdown","55c0a61e":"markdown","99476f1d":"markdown","668307de":"markdown","435f2ae0":"markdown","c5597dad":"markdown","7e2b4365":"markdown"},"source":{"5dca76db":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.utils import resample\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.impute import SimpleImputer\nfrom statsmodels.graphics.gofplots import qqplot\nfrom scipy.stats import shapiro\nfrom scipy.stats import boxcox\nfrom pandas_profiling import ProfileReport\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC, LinearSVC","5c9ed2ab":"train_data = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_data.head()","95e542a1":"train_data.columns","88bb4ec3":"def delete_unique_obs(data: pd.DataFrame) -> pd.DataFrame:\n    valid_cols = []\n    for col in data:\n        if data[col].nunique()\/len(data) <= 0.7:\n            valid_cols.append(col)\n        else:\n            print(\"[INFO] Deleting \"+ col)\n    return data[valid_cols]","b69f4ef0":"train_data = delete_unique_obs(train_data)\ntrain_data.head()","11c78c31":"msno.matrix(train_data,\n            figsize=(16,7),\n            width_ratios=(15,1)\n           )","6e3517ba":"def handle_missing_data(data):\n    for col in data:\n        missing_proportion = data[col].isna().sum()\/len(data) \n        if missing_proportion > 0.6:\n            print(\"[INFO] Deleting \" + col + \" since it is having \" +str(missing_proportion) + \" missing proportion\")\n            data.drop(col, axis=1, inplace=True)\n        if missing_proportion < 0.02 and missing_proportion != 0.0:\n            print(\"[INFO] Deleting the nan rows from \" + col + \" with missing proportion \" +str(missing_proportion))\n            data = data[data[col].notna()]\n            \n    return data","1aa14989":"train_data = handle_missing_data(train_data)\ntrain_data.head()","a885391b":"msno.matrix(train_data,\n            figsize=(16,7),\n            width_ratios=(15,1)\n           )","db0a5c1c":"# Impute missing data in Age\ntrain_data.describe()","802ff233":"# impute the missing data with the mean\nimputer = SimpleImputer(missing_values=np.nan, strategy=\"mean\")\nimputer.fit(train_data.Age.to_numpy().reshape(-1,1))\ntrain_data[\"Age\"] = imputer.transform(train_data.Age.to_numpy().reshape(-1,1))","a98591bf":"msno.matrix(train_data,\n            figsize=(16,7),\n            width_ratios=(15,1)\n           )","1e9fec77":"train_data.info()","0db49c59":"ohe = OneHotEncoder(categories='auto')\nfeature_arr = ohe.fit_transform(train_data[['Sex','Embarked']]).toarray()\nfeature_labels = ohe.categories_","11479c30":"feature_labels = np.concatenate(feature_labels)","7971e3a2":"features = pd.DataFrame(feature_arr, columns=feature_labels)\nfeatures.head()","b657fd86":"features.info()","eae60b87":"train_data = pd.concat([train_data, features], axis=1).drop([\"Sex\",\"Embarked\"], axis=1)\n","0349fac2":"train_data.Pclass.unique()","87eb5b52":"train_data.Survived.value_counts()","74e40180":"# separate the survival classes\nsurvived = train_data[train_data.Survived == 1]\nnot_survived = train_data[train_data.Survived == 0]","a45f99f7":"not_survived.Survived.unique()","5b02ff49":"# resample the minority class ie., survived\nsurvived_resampled = resample(survived, replace=True, n_samples=len(not_survived), random_state=2)\nlen(survived_resampled)","9cd18aa9":"resampled_train_data = pd.concat([survived_resampled,not_survived])\nresampled_train_data.head()","e3bb75ec":"# # SMOTE\n# train_data.dropna(inplace=True)\n# y = train_data.Survived \n# x = train_data.drop(\"Survived\", axis=1)\n# sm = SMOTE(random_state=2)\n# smote_x, smote_y = sm.fit_sample(x,y)","80e00c63":"# train_smote_data = smote_x.merge(smote_y.to_frame(), left_index=True, right_index=True)\n# train_smote_data.head()","fb3264ac":"# train_smote_data.Survived.value_counts()","2e48b566":"# train_smote_data.head()","79464a1e":"resampled_train_data.Pclass.unique()","d792a0fe":"sns.countplot(x=\"Pclass\", data=resampled_train_data)","80e7d793":"sns.distplot(resampled_train_data.Age)","fbdf37a1":"plt.hist(resampled_train_data.Age)\nplt.show()","e156791e":"# Quantile Quantile plot\nqqplot(resampled_train_data.Age, line='s')\nplt.show()","ac05a922":"stat, p = shapiro(resampled_train_data.Age)\nprint('Statistics=%.3f, p=%.3f' % (stat, p))\n# interpret\nalpha = 0.05\nif p > alpha:\n    print('Sample looks Gaussian (fail to reject H0)')  # Is a Gaussian distribution\nelse:\n    print('Sample does not look Gaussian (reject H0)')  #Not a Gaussian distribution","3b7efa81":"# Find the optimal value for lambda of boxcox\ntime_duration_trans, lmbda = boxcox(resampled_train_data.Age)\nlmbda","75d03b51":"qqplot(boxcox(resampled_train_data.Age,lmbda), line='s')\nplt.show()","80bf0762":"resampled_train_data[\"Age\"] = boxcox(resampled_train_data.Age,lmbda)\nresampled_train_data.head()","18ec0f44":"plt.hist(resampled_train_data.Age)\nplt.show()","0fc9b51f":"resampled_train_data.describe()","72b8aaa7":"# Observations with Fare as 0\nlen(resampled_train_data[resampled_train_data.Fare == 0])","b25ee9cd":"resampled_train_data = resampled_train_data[resampled_train_data.Fare != 0]\nlen(resampled_train_data[resampled_train_data.Fare == 0])","81572497":"plt.hist(resampled_train_data.Fare)\nplt.show()","ce65b463":"resampled_train_data = resampled_train_data[resampled_train_data.Fare < 150]\nplt.hist(resampled_train_data.Fare)\nplt.show()","900743b3":"# Find the optimal value for lambda of boxcox\ntime_duration_trans, lmbda = boxcox(resampled_train_data.Fare)\nlmbda","96680bd8":"qqplot(boxcox(resampled_train_data.Fare,lmbda), line='s')\nplt.show()","7009e8cb":"resampled_train_data[\"Fare\"] = boxcox(resampled_train_data.Fare,lmbda)\nplt.hist(resampled_train_data.Fare)\nplt.show()","c6b6bc98":"resampled_train_data.head()","04eb66f7":"#Which gender survived more\nsns.countplot(x=\"Survived\", hue=\"female\", data=resampled_train_data)","32f0ae20":"#Age group of better survival\nsns.boxplot(x=\"Survived\", y=\"Age\", data=resampled_train_data)","c435c57d":"# Family Size\nresampled_train_data[\"FamilySize\"] = resampled_train_data[\"SibSp\"] + resampled_train_data[\"Parch\"]\nresampled_train_data.drop([\"SibSp\",\"Parch\"], axis=1, inplace=True)\nresampled_train_data.head()","4326c0c5":"# Assuming that if the family size is 0, then he\/she is travelling alone. \nprint(len(resampled_train_data[resampled_train_data.FamilySize == 0]))\nresampled_train_data['FamilySize'] = np.where(resampled_train_data['FamilySize'] == 0, 1, resampled_train_data['FamilySize'])\nprint(len(resampled_train_data[resampled_train_data.FamilySize == 0]))","7d878cd6":"sns.countplot(x=\"FamilySize\", data=resampled_train_data)","0afc59fe":"corr = resampled_train_data.corr()\n# mask for upper triangle\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","910753cf":"profile = ProfileReport(resampled_train_data)\nprofile","2154b6b8":"# train-valid split\ndata = resampled_train_data.copy()\ndata = data.dropna()\ny = data.Survived\nx = data.drop(\"Survived\", axis=1)\ntrain_x, test_x, train_y, test_y = train_test_split(x, y, test_size=0.20, random_state=2)\n# sc = StandardScaler()\n# train_x = sc.fit_transform(train_x)\n# test_x = sc.transform(test_x)","29b84a0e":"log_reg = LogisticRegression()\nlog_reg.fit(train_x, train_y)\npreds = log_reg.predict(test_x)\nprint(classification_report(test_y, preds))","4f7b5fca":"knn = KNeighborsClassifier(n_neighbors=2)\nknn.fit(train_x, train_y)\npreds = knn.predict(test_x)\nprint(classification_report(test_y, preds))","f1f80877":"gnb = GaussianNB()\ngnb.fit(train_x, train_y)\npreds = gnb.predict(test_x)\nprint(classification_report(test_y, preds))","c86f97ae":"svc = SVC(gamma=0.01)\nsvc.fit(train_x, train_y)\npreds = svc.predict(test_x)\nprint(classification_report(test_y, preds))","21959573":"tree = DecisionTreeClassifier()\ntree.fit(train_x, train_y)\npreds = tree.predict(test_x)\nprint(classification_report(test_y, preds))","10c5013d":"forest = RandomForestClassifier(max_depth=3, random_state=0)\nforest.fit(train_x, train_y)\npreds = forest.predict(test_x)\nprint(classification_report(test_y, preds))","e07c3538":"linear_SVC = LinearSVC(C=0.01)\nlinear_SVC.fit(train_x, train_y)\npreds = linear_SVC.predict(test_x)\nprint(classification_report(test_y, preds))","0709b781":"from xgboost import XGBClassifier","0ad9c856":"xgboost = XGBClassifier(n_estimators=1000,reg_alpha = 0.1, gamma=0.001)\nxgboost.fit(train_x, train_y)\npreds = xgboost.predict(test_x)\nprint(classification_report(test_y, preds))","8e60e807":"test_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest = pd.DataFrame(test_data.PassengerId)\ntest_data.head()","64e481e7":"test_data.drop([\"PassengerId\",\"Name\", \"Cabin\", \"Ticket\"], axis=1, inplace=True)\ntest_data.head()","11ececa7":"# Encode Sex, Embarcked\nohe = OneHotEncoder(categories='auto')\nfeature_arr = ohe.fit_transform(test_data[['Sex','Embarked']]).toarray()\nfeature_labels = ohe.categories_","e03fb7fd":"feature_labels = np.concatenate(feature_labels)","83db3525":"features = pd.DataFrame(feature_arr, columns=feature_labels)\nfeatures.head()","cda81390":"test_data = pd.concat([test_data, features], axis=1).drop([\"Sex\",\"Embarked\"], axis=1)\ntest_data.head()","a9a48aa5":"test_data[\"FamilySize\"] = test_data[\"SibSp\"] + test_data[\"Parch\"]\nprint(len(test_data[test_data.FamilySize == 0]))\ntest_data['FamilySize'] = np.where(test_data['FamilySize'] == 0, 1, test_data['FamilySize'])\nprint(len(test_data[test_data.FamilySize == 0]))","80e43df7":"test_data.drop([\"SibSp\",\"Parch\"], axis=1, inplace=True)\ntest_data.head()","828bf1c4":"# Check for missing data\nmsno.matrix(test_data,\n            figsize=(16,7),\n            width_ratios=(15,1)\n           )","0132221b":"# Impute age with mean\nimputer = SimpleImputer(missing_values=np.nan, strategy=\"mean\")\nimputer.fit(test_data.Age.to_numpy().reshape(-1,1))\ntest_data[\"Age\"] = imputer.transform(test_data.Age.to_numpy().reshape(-1,1))","283d75e6":"predictions = xgboost.predict(test_data).astype(int)","7b5b803a":"test[\"Survived\"] = predictions","3acea8aa":"test.head()","9add1ac6":"test.to_csv(\"my_preds.csv\", index=False)","0fa7a9cd":"test.Survived.value_counts()","692dc89d":"We can see a Gaussian-like shape to the data, that although is not strongly the familiar bell-shape, is a rough approximation.","c4f25812":"**- Which gender survived more** <br>\n**- Age group of better survival**<br>\n**- Average Family size of travel**<br>\n**- Highest Embarking location**<br>","8719b611":"I have missing data in the columns ```Age```, ```Cabin``` and ```Embarked``` <br>\n- If the data has greater than 60% of missing data, then delete those columns.\n- If the data has less than 2% of missing data, then delete those observations.\n- Else, replace","7c75294b":"## Logistic Regression","ee5cc016":"```Age```\n- Check for data distribution\n- Bin them ","ca0e60e1":"## KNN classification","3f88a4f0":"Most of the people travelled alone","f8dd7206":"### Delete all the columns with 70% unique observations.","17e4242d":"# Bivariate Analysis","909dfb72":"## Naive Bayes","77fd85ae":"# Predictions","064a7cf7":"# Missing Data","9b1e3722":"1. ## Handling Categorical Data","0cb5547f":"```Fare```","30b93ce1":"Here, we can see that the classes are imbalanced. We can try the below possible options\n1. Resampling: Oversample the minor class\n    - Before resampling, we need to train-test split to avoid having the same observations in both train and test sets thereby avoiding overfitting. Here, we have a separete test file ```test.csv```. So, we can directly oversample\n2. SMOTE(Synthetic Minority OverSampling technique","68dc7c5a":"**```Survived```**\n- Do we have the balanced class data?","74874410":"```Pclass```\n- Check for categories frequency","1a83c3ab":"- Fare is positively correlated with the Survival\n- Pclass is negatively correlated with the SUrvival","55c0a61e":"Remove these outliers","99476f1d":"We see that, the survival rate & the non-survival rate is higher in males. ","668307de":"Now transform the data to be normal","435f2ae0":"### Normalizing the distribution\n- Try binning and check the distribution\n- Transformations: sqrt, log","c5597dad":"# Univariate Analysis","7e2b4365":"Remove the outliers"}}