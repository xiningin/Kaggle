{"cell_type":{"43d79e6d":"code","3818646a":"code","fc0a7b59":"code","cc89db3f":"code","e7753b03":"code","fc97dc9d":"code","e4006b47":"code","24a43feb":"code","1ed6b1f3":"code","11198555":"code","8bed9c28":"code","1e9cbe5b":"code","85f19663":"markdown","62e34904":"markdown"},"source":{"43d79e6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3818646a":"import re\nimport pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport string\nimport nltk\nimport warnings \nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\n%matplotlib inline","fc0a7b59":"df = pd.read_csv(\"..\/input\/iron-man-synopsis\/iron man synopsis.csv\")\ndf.head()","cc89db3f":"#Removing Punctuations, Numbers, and Special Characters\n\ndf['Synopsis'] = df['Synopsis'].str.replace(\"[^a-zA-Z]\", \" \")\ndf.head()","e7753b03":"#remove all the words having length 3 or less\n\ndf['Synopsis'] = df['Synopsis'].apply(lambda x: ' '.join([w for w in x.split() if len(w)>3]))\n\ndf.head()","fc97dc9d":"#Tokenization: Tokens are individual terms or words, and tokenization is the process of splitting a string of text into tokens.\n\ntokenized_Ironman = df['Synopsis'].apply(lambda x: x.split())\ntokenized_Ironman.head()","e4006b47":"#Stemming: Stemming is a rule-based process of stripping the suffixes (\u201cing\u201d, \u201cly\u201d, \u201ces\u201d, \u201cs\u201d etc) from a word.\n\nfrom nltk.stem.porter import *\nstemmer = PorterStemmer()\n\ntokenized_Ironman = tokenized_Ironman.apply(lambda x: [stemmer.stem(i) for i in x]) # stemming\ntokenized_Ironman.head()","24a43feb":"#join the tokens back together\n\nfor i in range(len(tokenized_Ironman)):\n    tokenized_Ironman[i] = ' '.join(tokenized_Ironman[i])\n\ndf['Synopsis'] = tokenized_Ironman","1ed6b1f3":"df.head()","11198555":"#Wordcloud: A wordcloud is a visualization wherein the most frequent words appear in large size and the less frequent words appear in smaller sizes.\n\nall_words = ' '.join([text for text in df['Synopsis']])\nfrom wordcloud import WordCloud\nwordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(all_words)\n\nplt.figure(figsize=(10, 7))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis('off')\nplt.show()","8bed9c28":"#features\nfrom sklearn.feature_extraction.text import CountVectorizer\ncount_vectorizer = CountVectorizer(max_features=200, stop_words='english')\n# bag-of-words feature matrix\n#create dictionary from corpus\nfeature_vector = count_vectorizer.fit(df.Synopsis)\n\n#get feature names\nfeatures = feature_vector.get_feature_names()\n\n#Transform the records into vectors\ndf_features = count_vectorizer.transform(df.Synopsis)\n\n#Count the frequency of features\nfeatures_counts = np.sum(df_features.toarray(), axis = 0)\nfeature_counts = pd.DataFrame(dict(features = features, counts = features_counts))","1e9cbe5b":"feature_counts.sort_values('counts', ascending = False)[:20]","85f19663":"![Bring me Tony](http:\/\/i.pinimg.com\/originals\/1e\/7a\/f2\/1e7af2c38e4771662d22813a32cc4883.jpg)","62e34904":"## If you liked it, an upvote will motivate us to upload more datasets and for analysis. :)"}}