{"cell_type":{"1aa39b42":"code","fdc4cdff":"code","81f976c4":"code","9ba20134":"code","cee818b7":"code","f522a392":"code","99b0da2e":"code","30894b6c":"code","c2a53e87":"code","ca7cabca":"code","19491a64":"code","3fc37305":"code","b8ee9e47":"code","6a57ced0":"code","2ff16b90":"code","e9072d71":"code","0d82862f":"code","0c35ecd4":"code","996ea649":"code","9083863c":"code","cadc33a7":"code","726ec3e6":"code","ad9615a9":"code","2770ff66":"code","463c4a01":"code","7d4ca74d":"code","82693ee0":"code","d130b760":"code","68f250ee":"markdown","16baa1e8":"markdown","802cae72":"markdown","1cc01fa2":"markdown","c6e7257c":"markdown","8edc1d71":"markdown","aee973da":"markdown","a23ab96b":"markdown","69fe5c84":"markdown","e6ce2173":"markdown","8dbb34d9":"markdown","ef0ab326":"markdown","d56462af":"markdown"},"source":{"1aa39b42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdc4cdff":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId = test_data[\"PassengerId\"]","81f976c4":"train_data.columns","9ba20134":"train_data.head(10)","cee818b7":"train_data.describe()","f522a392":"train_data.info()","99b0da2e":"def bar_plot(variable):\n    var =train_data[variable]\n    varValue = var.value_counts()\n    \n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    ","30894b6c":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","c2a53e87":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n \".format(train_data[c].value_counts()))","ca7cabca":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_data[variable], bins=40)\n    plt.xlabel(variable)\n    plt.ylabel(\"frequency\")\n    plt.title(\"{} distrubition with hist\".format(variable))\n    plt.show()\n","19491a64":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","3fc37305":"# Plcass vs Survived\ntrain_data[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","b8ee9e47":"# Sex - Survived\ntrain_data[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","6a57ced0":"# SibSp - Survived\ntrain_data[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"SibSp\",ascending = False)\n","2ff16b90":"# Parch - Survived\ntrain_data[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = False)","e9072d71":"def detect_outliers(df,features):\n    outlier_indices = []\n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","0d82862f":"train_data.loc[detect_outliers(train_data,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","0c35ecd4":"train_data_len = len(train_data)\ntrain_data = pd.concat([train_data,test_data],axis = 0).reset_index(drop = True)","996ea649":"train_data.head()","9083863c":"train_data.columns[train_data.isnull().any()]","cadc33a7":"train_data.isnull().sum()","726ec3e6":"train_data[train_data[\"Embarked\"].isnull()]","ad9615a9":"train_data.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","2770ff66":"train_data[\"Embarked\"] = train_data[\"Embarked\"].fillna(\"C\")\ntrain_data[train_data[\"Embarked\"].isnull()]","463c4a01":"train_data[train_data[\"Fare\"].isnull()]","7d4ca74d":"train_data[\"Fare\"] = train_data[\"Fare\"].fillna(np.mean(train_data[train_data[\"Pclass\"] == 3][\"Fare\"]))","82693ee0":"train_data[train_data[\"Fare\"].isnull()]","d130b760":"x_train = train_data[['Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'Parch', 'SibSp']]\nx_train = pd.get_dummies(x_train)\nx_train.head()","68f250ee":"## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","16baa1e8":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Pclass, Embarked, Cabin, Name, Ticked, Sibsp and Parch\n* Numerical Variable: Fare, Age and PassengerId\n","802cae72":"<a id = \"1\"><\/a><br>\n# Load and check data","1cc01fa2":"<a id = \"7\"><\/a><br>\n# Outlier Detection","c6e7257c":"<a id = \"4\"><\/b><br>\n## Categorical Variable ","8edc1d71":"* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","aee973da":"* float64(2): Fare and Age\n* int64(5): Pclass, Sibsp,Pacrh,PassengerId, Survived\n* object(5): Name, Sex, Cabin, Embarked,","a23ab96b":"<a id = \"2\"><\/a><br>\n# Variable and Description\n\n1. PassengerId: Unique id number to each passenger\n2. Survived: Passenger survive(1) or died(0) \n3. Pclass: Passenger class\n4. Name: Name\n5. Sex: Gender of pass\n6. Age: Age of Passenger\n7. SibSp: Number os siblings or spouses\n8. Parch: Number of parents\/children\n9. Ticket: Ticket number\n10. Fare: Amount of money spent on ticket\n11. Cabin: Cabin category\n12. Embarked: Port where passenger embarked (C= Cherbourg, Q= Queenstown, S= South)\n   ","69fe5c84":"<a id = \"8\"><\/a><br>\n # Missing Value\n* Find Missing Value\n* Fill Missing Value","e6ce2173":"<a id = \"5\"><\/a><br>\n## Numerical Variable","8dbb34d9":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis","ef0ab326":"\n<font color = 'Grey'>\nContent:\n    \n    \n1. [Load and check data](#1)\n2. [Variable description](#2)\n3. [Univariate Variable Analysis](#3)\n    *          [Categorical Variable ](#4)\n    *          [Numerical Variable ](#5)\n1. [Basic Data Analysis](#6)    \n1. [Outlier Detection](#7)    \n1. [Missing Value](#8)\n    *          [Find Missing Value](#9)\n    *          [Fill Missing Value](#10)","d56462af":"## Find Missing Value"}}