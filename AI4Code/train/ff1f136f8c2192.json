{"cell_type":{"345af29b":"code","a7747bc8":"code","ef676a9f":"code","87c01c3c":"code","2e92d417":"code","c9b304e9":"code","83ce2c1f":"code","8a2a3588":"code","89a3397e":"code","13a551b0":"code","e97cb684":"code","645f1d2e":"code","3a5e4b76":"code","821116d6":"code","862d2112":"code","3650269d":"code","7204b3e1":"code","b132e7e2":"code","32d047c8":"code","b357a3ba":"code","962c1d1c":"code","749978e7":"code","3bdd6268":"code","42aa3642":"code","ce02982d":"code","dc28c02f":"code","d45b4676":"code","7e28ec30":"code","f89dc84b":"code","85747dfa":"code","2343c076":"code","da963161":"code","5050d60a":"code","4349751e":"code","10b36d6a":"code","aa1511e4":"code","99393038":"code","7f53bf56":"code","513b647e":"markdown","0632e02c":"markdown","458f3ca9":"markdown","0319b690":"markdown","15ad8661":"markdown","d4182ca3":"markdown","b8b13bf9":"markdown"},"source":{"345af29b":"import numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly_express as px\n\nsns.set_palette('husl')\nsns.set_style(\"whitegrid\")\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler, LabelEncoder, PowerTransformer\nfrom sklearn.model_selection import train_test_split,  cross_val_score, GridSearchCV\n\nfrom sklearn.svm import SVR\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\n\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","a7747bc8":"# reading dataset\n\ndf = pd.read_csv('..\/input\/bike-sharing\/bike.csv', parse_dates=True, encoding = \"latin1\")\ndf.head()","ef676a9f":"# df.tail()","87c01c3c":"# df.sample()","2e92d417":"df.info()","c9b304e9":"df.describe()","83ce2c1f":"# changing column names\n\n\ndf.head()","8a2a3588":"df.columns = ['date', 'season', 'hr', 'holiday', 'day_of_week', \n              'working_day', 'weather_type', 'temp', 'temp_feels', \n              'humidity', 'wind_speed', 'casual_users', 'reg_users', 'total']\n\ndf['date'] = pd.to_datetime(df['date'])\n\ndf['day'] = pd.DatetimeIndex(df['date']).day\ndf['month'] = pd.DatetimeIndex(df['date']).month\n\ndf['year'] = pd.DatetimeIndex(df['date']).year\ndf['year']=df['year']-2011\n\ndf[\"season\"] = df['season'].map({1 : \"Spring\", \n                                 2 : \"Summer\", \n                                 3 : \"Fall\", \n                                 4 : \"Winter\" })\n\ndf[\"day_of_week\"] = df['day_of_week'].map({0 : \"Sunday\", \n                                           1 : \"Monday\", \n                                           2 : \"Tuesday\", \n                                           3 : \"Wednesday\", \n                                           4 : \"Thursday\", \n                                           5 : \"Friday\",\n                                           6 : \"Saturday\" })\n# Weather type\n# 1 : \" Clear + Few clouds + Partly cloudy + Partly cloudy\"\n# 2 : \" Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist \"\n# 3 : \" Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\"\n# 4 : \" Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog ","89a3397e":"# missing values\ndf.isna().sum()","13a551b0":"# df['wind_speed'].quantile([0.25, 0.75])","e97cb684":"# cat_cols = ['day_of_week', 'holiday', 'working_day']\n# for i in cat_cols:\n#     df[i] = df[i].astype('category')","645f1d2e":"# value counts\n\n# for i in df.columns:\n#     print(df[i].value_counts())","3a5e4b76":"# # target column distribution\n\n# plt.figure(figsize=(16,6))\n# sns.countplot(df['total'], kde=False)","821116d6":"# sns.pairplot(df)","862d2112":"# # heatmap\n# plt.figure(figsize=(10, 8))\n# sns.heatmap(df.corr(), annot=True, fmt='.2f', center=0)","3650269d":"# date vs count plot\n\nplt.figure(figsize=(16,6))\nplt.plot(df['date'], df['total'], alpha=0.8)\nplt.show()","7204b3e1":"# date vs temp plot\n\nplt.figure(figsize=(16,6))\nplt.plot(df['date'], df['temp_feels'], alpha=0.8, color='orange')","b132e7e2":"sns.set_palette('RdBu_r')","32d047c8":"fig, axes = plt.subplots(figsize=(15, 4), ncols=3)\nsns.barplot(x='season', y='total', data=df, ax=axes[0])\nsns.barplot(x='working_day', y='total', data=df, ax=axes[1])\nsns.barplot(x='holiday', y='total', data=df, ax=axes[2])\n\nfig, axes = plt.subplots(figsize=(15, 4), ncols=2)\nsns.barplot(x='month', y='total', data=df, ax=axes[0])\nsns.barplot(x='day_of_week', y='total', data=df, ax=axes[1])","b357a3ba":"sns.set_palette('rocket')\nfig, axes = plt.subplots(figsize=(15, 4))\nsns.barplot(x='day', y='total', data=df, palette='Greens')\n\nsns.set_palette('rocket')\nfig, axes = plt.subplots(figsize=(15, 4))\nsns.barplot(x='hr', y='total', data=df, color='Grey')","962c1d1c":"# for i in ['hr', 'month', 'day', 'day_of_week', 'season']:\n#     plt.figure(figsize=(16,6))\n#     # plt.bar(df['hr'], df['temp'], alpha=0.8)\n#     sns.barplot(x=i, y=\"total\", data=df, estimator=np.mean)","749978e7":"fig, axes = plt.subplots(figsize=(15, 10), ncols=2, nrows=2)\nsns.lineplot(x='hr', y='total', hue='season', data=df, ax=axes[0][0])\nsns.lineplot(x='hr', y='total', hue='day_of_week', data=df, ax=axes[0][1])\nsns.lineplot(x='hr', y='total', hue='weather_type', data=df, ax=axes[1][0])\nsns.lineplot(x='hr', y='total', hue='holiday', data=df, ax=axes[1][1])","3bdd6268":"plt.figure(figsize=(10,6))\nsns.boxplot(data=df[['temp_feels','humidity','wind_speed']], palette=\"Set2\")","42aa3642":"df.head()","ce02982d":"# min-max scaling\nfeatures=['temp', 'temp_feels', 'humidity', 'wind_speed']\nfor i in features:\n    scaler = MinMaxScaler()\n    df[i] = scaler.fit_transform(df[[i]])\n    \n# one hot encoding using pandas get_dummies\nfeatures=['weather_type', 'season']\nfor i in features:\n    temp=pd.get_dummies(df[i], prefix=i, prefix_sep='_')\n    df=pd.concat([df,temp], axis=1)\n    df=df.drop(i, axis=1)\n    \n# cyclic encoding cyclic variables\ndef cyc_enc(df, col, max_vals):\n    df[col+'_sin'] = np.sin(2 * np.pi * df[col]\/max_vals)\n    df[col+'_cos'] = np.cos(2 * np.pi * df[col]\/max_vals)\n    return df\ndf = cyc_enc(df, 'hr', 24)\ndf = cyc_enc(df, 'month', 12)\ndf = cyc_enc(df, 'day', 31)\n    \n# PCA to reduce components\npca = PCA(n_components=1)\ndf['temperature'] = pca.fit_transform(df[['temp','temp_feels']])\ndf = df.drop(columns=['temp', 'temp_feels'])","dc28c02f":"# plt.figure(figsize=(16,6))\n# plt.boxplot(df[['temp_feels','humidity','wind_speed']])","d45b4676":"# # final correlation matrix\n\nplt.figure(figsize=(14, 14))\nsns.heatmap(df.corr(), annot=True, fmt='.2f')","7e28ec30":"df.head()","f89dc84b":"X = df.drop(['date','total', 'day_of_week', 'reg_users', 'casual_users'], axis=1)\ny = df['total']\n\nX_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.3)","85747dfa":"# linear regression\n\nlr=LinearRegression()\nlr.fit(X_train, y_train)\ny_pred=lr.predict(X_test)\n\nprint(np.sqrt(mean_squared_error(y_pred, y_test)))\nprint(mean_absolute_error(y_pred, y_test))\n\nplt.scatter(y_test, y_pred)\nplt.show()","2343c076":"# k nearest neighbours regressor\n\nknn=KNeighborsRegressor(n_neighbors=3)\nknn.fit(X_train, y_train)\ny_pred=knn.predict(X_test)\n\nprint(np.sqrt(mean_squared_error(y_pred, y_test)))\nprint(mean_absolute_error(y_pred, y_test))\n\nplt.scatter(y_test, y_pred)\nplt.show()","da963161":"# decision tree regressor\n\ndt=DecisionTreeRegressor()\ndt.fit(X_train, y_train)\ny_pred=dt.predict(X_test)\n\nprint(np.sqrt(mean_squared_error(y_pred, y_test)))\nprint(mean_absolute_error(y_pred, y_test))\n# print(y_test[:10])\n# print(y_pred[:10])\n\nplt.scatter(y_test, y_pred)\nplt.show()","5050d60a":"# random forest regressor\n\nrf=RandomForestRegressor(n_estimators=10)\nrf.fit(X_train, y_train)\ny_pred=rf.predict(X_test)\n\nprint(np.sqrt(mean_squared_error(y_pred, y_test)))\nprint(mean_absolute_error(y_pred, y_test))\n\nplt.scatter(y_test, y_pred)\nplt.show()","4349751e":"from lightgbm import LGBMRegressor\nmodel=LGBMRegressor(boosting_type='gbdt', class_weight=None,\n              colsample_bytree=0.6746393485503049, importance_type='split',\n              learning_rate=0.03158974434726661, max_bin=55, max_depth=-1,\n              min_child_samples=159, min_child_weight=0.001, min_split_gain=0.0,\n              n_estimators=1458, n_jobs=-1, num_leaves=196, objective=None,\n              random_state=18, reg_alpha=0.23417614793823338,\n              reg_lambda=0.33890027779706655, silent=False,\n              subsample=0.5712459474269626, subsample_for_bin=200000,\n              subsample_freq=1)\n\nmodel.fit(X_train, y_train)\ny_pred=model.predict(X_test)\n\nprint(mean_squared_error(y_pred, y_test))\nprint(mean_absolute_error(y_pred, y_test))\nprint(y_test[:10])\nprint(y_pred[:10])\n\nplt.scatter(y_test, y_pred)","10b36d6a":"# from xgboost import XGBRegressor\n# model = XGBRegressor(objective ='reg:squarederror', learning_rate = 0.1,\n#                 max_depth = 15, n_estimators = 700, random_state=2019)","aa1511e4":"rf=RandomForestRegressor(n_estimators=10)\nrf.fit(X_train, y_train)\n\n\nhyperparameters = {\"criterion\": [\"mse\", \"mae\"],\n                   \"max_depth\": [5, 10],\n                   \"max_features\": [\"log2\", \"sqrt\"],\n                   # 'min_samples_leaf' : range(2,5),\n                   # 'min_samples_split' : range(2,5),\n#                    \"n_estimators\": range(10,12)\n}\n\ngrid = GridSearchCV(rf, \n                    param_grid=hyperparameters, \n                    cv=10)\n\ngrid.fit(X, y)\n\nbest_params = grid.best_params_\nbest_score = grid.best_score_\n\nrf = grid.best_estimator_\ny_pred = rf.predict(X_test)\n\nprint(grid.best_params_)\nprint(grid.best_estimator_)\nprint(grid.best_score_)\n\nprint(mean_squared_error(y_pred, y_test))\nprint(mean_absolute_error(y_pred, y_test))\nprint(y_test[:10])\nprint(y_pred[:10])\nplt.scatter(y_test, y_pred)","99393038":"# box plot - temp_feels, humidity, windspeed\n\n# one hot encode - holiday, weather_type\n# drop - temp, casual_users, reg_users\n# min-max scale - temp_feels, humidity, windspeed\n# cyclic encode - season, hr, day_of_week, month, day\n# year - current_year - 2011\n\n# X - all the required features\n# y - target\n\n# train-test split\n# linear regression model\n# fit\n# rmse\n# plot actural, predict\n\n\n# ----------------------------------------------\n\n#cross validation\n#grid search\n#cyclic encoding\n#","7f53bf56":"rf.feature_importances_","513b647e":"## Importing dataset","0632e02c":"## Preprocessing","458f3ca9":"## Visual EDA","0319b690":"## Importing libraries","15ad8661":"## Data Cleaning","d4182ca3":"## Regression Models","b8b13bf9":"## Train Test Split"}}