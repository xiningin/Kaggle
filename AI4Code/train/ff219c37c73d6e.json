{"cell_type":{"60a42ed9":"code","c7057549":"code","27d8f205":"code","6bf71fb9":"code","5b7c84ac":"code","c4702e06":"code","68748a4e":"markdown"},"source":{"60a42ed9":"# Used most of coding from this kernel https:\/\/www.kaggle.com\/lgreig\/simple-lgbm-baseline\n\nimport riiideducation\n#import dask.dataframe as dd\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics import roc_auc_score\n\nenv = riiideducation.make_env()\n\ntrain = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv',\n                   usecols=[1, 2, 3, 4, 7, 8, 9],\n                   dtype={'timestamp': 'int64',\n                          'user_id': 'int32',\n                          'content_id': 'int16',\n                          'content_type_id': 'int8',\n                          'answered_correctly':'int8',\n                          'prior_question_elapsed_time': 'float32',\n                          'prior_question_had_explanation': 'boolean'}\n                   )\n\ntrain = train[train.content_type_id == False]\ntrain = train.sort_values(['timestamp'], ascending=True)\ntrain.drop(['timestamp', 'content_type_id'], axis=1, inplace=True)\n\nresults_c = train.iloc[0:90_000_000,:][['content_id','answered_correctly']].groupby(['content_id']).agg(['mean', 'sum', 'count'])\nresults_c.columns = ['answered_correctly_content_mean', 'answered_correctly_content_sum', 'answered_correctly_content_count']\n\nresults_u = train.iloc[0:90_000_000,:][['user_id','answered_correctly']].groupby(['user_id']).agg(['mean', 'sum', 'count'])\nresults_u.columns = ['answered_correctly_user_mean', 'answered_correctly_user_sum', 'answered_correctly_user_count']\n\n","c7057549":"X = train.iloc[90_000_000:train.shape[0], :]\nX = pd.merge(X, results_u, on=['user_id'], how=\"left\")\nX = pd.merge(X, results_c, on=['content_id'], how=\"left\")\nX = X[X.answered_correctly!= -1 ]\nX = X.sort_values(['user_id'])\nY = X[[\"answered_correctly\"]]\nX = X.drop([\"answered_correctly\"], axis=1)\n","27d8f205":"from sklearn.preprocessing import LabelEncoder\n\nlb_make = LabelEncoder()\nX[\"prior_question_had_explanation_enc\"] = lb_make.fit_transform(X[\"prior_question_had_explanation\"])\nX.head()\n\nX = X[['answered_correctly_user_mean', 'answered_correctly_user_sum', 'answered_correctly_user_count',\n       'answered_correctly_content_mean', 'answered_correctly_content_sum', 'answered_correctly_content_count',\n       'prior_question_elapsed_time','prior_question_had_explanation_enc']] \n\nfrom  sklearn.tree import DecisionTreeClassifier\nfrom  sklearn.model_selection import train_test_split\n\nXt, Xv, Yt, Yv = train_test_split(X, Y, test_size =0.2, shuffle=False)\n\nimport lightgbm as lgb\n\nparams = {\n    'objective': 'binary',\n    'max_bin': 600,\n    'learning_rate': 0.01,\n    'num_leaves': 80\n}\n\n\nlgb_train = lgb.Dataset(Xt, Yt)\nlgb_eval = lgb.Dataset(Xv, Yv, reference=lgb_train)\n\nmodel = lgb.train(\n    params, lgb_train,\n    valid_sets=[lgb_train, lgb_eval],\n    verbose_eval=10,\n    num_boost_round=10000,\n    early_stopping_rounds=10\n)","6bf71fb9":"y_pred = model.predict(Xv)\ny_true = np.array(Yv)\nroc_auc_score(y_true, y_pred)","5b7c84ac":"test = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/example_test.csv')\n\ntest[\"prior_question_had_explanation_enc\"] = lb_make.fit_transform(test[\"prior_question_had_explanation\"])\n\ntest = pd.merge(test, results_u, on=['user_id'],  how=\"left\")\ntest = pd.merge(test, results_c, on=['content_id'],  how=\"left\")\n\ntest.fillna(0.5, inplace=True)\n\ny_pred = model.predict(test[['answered_correctly_user_mean', 'answered_correctly_user_sum', 'answered_correctly_user_count',\n                             'answered_correctly_content_mean', 'answered_correctly_content_sum', 'answered_correctly_content_count',\n                             'prior_question_elapsed_time','prior_question_had_explanation_enc']])\n\ntest['answered_correctly'] = y_pred\n\nresults_c = train[['content_id','answered_correctly']].groupby(['content_id']).agg(['mean', 'sum', 'count'])\nresults_c.columns = ['answered_correctly_content_mean', 'answered_correctly_content_sum', 'answered_correctly_content_count']\n\nresults_u = train[['user_id','answered_correctly']].groupby(['user_id']).agg(['mean', 'sum', 'count'])\nresults_u.columns = ['answered_correctly_user_mean', 'answered_correctly_user_sum', 'answered_correctly_user_count']","c4702e06":"iter_test = env.iter_test()\n\nfor (test_df, sample_prediction_df) in iter_test:\n    test_df = pd.merge(test_df, results_u, on=['user_id'],  how=\"left\")\n    test_df = pd.merge(test_df, results_c, on=['content_id'],  how=\"left\")\n\n    test_df['answered_correctly_user_mean'].fillna(0.5, inplace=True)\n    test_df['answered_correctly_user_sum'].fillna(0, inplace=True)\n    test_df['answered_correctly_user_count'].fillna(0, inplace=True)\n    test_df['answered_correctly_content_mean'].fillna(0.5, inplace=True)\n    test_df['answered_correctly_content_sum'].fillna(0, inplace=True)\n    test_df['answered_correctly_content_count'].fillna(0, inplace=True)\n\n    test_df['prior_question_had_explanation'].fillna(False, inplace=True)\n    test_df[\"prior_question_had_explanation_enc\"] = lb_make.fit_transform(test_df[\"prior_question_had_explanation\"])\n    \n    test_df['answered_correctly'] =  model.predict(test_df[['answered_correctly_user_mean', 'answered_correctly_user_sum', 'answered_correctly_user_count',\n                                                            'answered_correctly_content_mean', 'answered_correctly_content_sum', 'answered_correctly_content_count',\n                                                            'prior_question_elapsed_time','prior_question_had_explanation_enc']])\n    \n    env.predict(test_df.loc[test_df['content_type_id']==0, ['row_id', 'answered_correctly']])","68748a4e":"This a simple baseline using the LGBM algorithm. This is a small modification to https:\/\/www.kaggle.com\/jsylas\/riiid-lgbm-starter"}}