{"cell_type":{"4f921ecf":"code","53d7eded":"code","a40220fe":"code","f0032c84":"code","1b37981d":"markdown"},"source":{"4f921ecf":"import matplotlib.pyplot as plt\nimport numpy as np\nimport cvxpy as cp\n\n\"\"\"\nQ1, Q2, Q3:\nformatting the convex optimization problem:\nAf = b\nf_min <= f_i <= f_max\nminimize z = ||f||_p\nWe could always use regressive approach to obtain the global optimum because of the nature of convex\nBUT here we use the CVXPY library\n\"\"\"\n# Construct the problem.\nn = 4\nx=0\naux=np.zeros(n)\nfor i in range(-n \/\/ 2,0,1):\n    aux[x] = i\n    x+=1\nfor i in range(1,n \/\/ 2 + 1,1):\n    aux[x] = i\n    x+=1    \nA = np.array([np.ones(n), aux])\nb = np.array([10, 2])\n# number of rotors\n\n\n\n##############################################################################################\n##############################################################################################\nfrom scipy.optimize import minimize\n\n#objetctive function\ndef objective(fi):\n    return np.linalg.norm(fi,1)\n\n#contraint\ndef constraint1(fi):\n    return A.dot(fi.transpose())-b\n\ncon2 = {'type': 'eq', 'fun': constraint1}\n\n# initial guesses\nf0 = np.ones(n)\n\nbon = (0,60000)\nfor i in range(0,n-1,1):\n    bnds = np.vstack((bnds, bon)) \n\nsolution = minimize(objective,f0, constraints=con2)\nx_norm1 = solution.x\n\nplt.bar(A[1], x_norm1,width=0.2)\nplt.grid(True)","53d7eded":"\nfrom scipy.optimize import least_squares\n\nA1 = np.array([[1,1,1,1], [-2,-1,1,2]])\nb1 = np.array([10, 2])\n\n#objetctive function\ndef objective(fi):\n    return (fi[0]+fi[3])+fi[1]+fi[2]\n\n#contraint\ndef constraint1(fi):\n    return A1.dot(fi.transpose())-b1\n\ncon21 = {'type': 'eq', 'fun': constraint1}\n\n# initial guesses\nf01 = np.ones(4)\n\nbo = (0,60000)\nbnds1 = (bo,bo,bo,bo)\n\nsolution = minimize(objective,f01,bounds=bnds1, constraints=con21)\nx_least_squares = solution.x\n\nplt.bar(A1[1], x_least_squares,width=0.2)\nplt.grid(True)","a40220fe":"#objetctive function\ndef objective(fi):\n    return np.linalg.norm(fi,2)\n\n#contraint\ndef constraint1(fi):\n    return A.dot(fi.transpose())-b\n\ncon2 = {'type': 'eq', 'fun': constraint1}\n\n# initial guesses\nf0 = np.ones(n)\n\nbon = (0,60000)\nfor i in range(0,n-1):\n    bnds = np.vstack((bnds, bon)) \n    \nsolution = minimize(objective,f0, constraints=con2)\nx_norm2 = solution.x\n\nplt.bar(A[1], x_norm2,width=0.2)\nplt.grid(True)","f0032c84":"#objetctive function\ndef objective(fi):\n    return np.linalg.norm(fi,np.inf)\n\nsolution = minimize(objective,f0, constraints=con2)\nx_norm_infinit= solution.x\n\nplt.bar(A[1], x_norm_infinit,width=0.2)\nplt.grid(True)","1b37981d":"![](https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets\/559075\/1016976\/IMG_8969.jpg?GoogleAccessId=web-data@kaggle-161607.iam.gserviceaccount.com&Expires=1584660734&Signature=ss9vyarP4QyHPZW6flEkEb4zMgkvOwUGgIAwaEcJEUi85iiyolTL0xPwNpfjgK300yb9hOqwdSN8R%2FpmBDwhRxvL2yABHvs8uE%2FJwYxKjzymxsHvX8vLVteC1UBMJd%2FHCWx%2BKzFCLxb86GpXxiaL%2FtYXDOXX3JC3n21byYwc%2Fjv4QFk15Vk%2BM96vYy694hixm36XlkNobLjwLMdIH3qelUnebHqwtyyuAlnd5QVWZa4GvGGjfkWBPWIsIapf%2Ffuo%2FWjuYp7DJvcm9RkLALA0xEAsqS%2FeHqKl82FqxCB%2Ff18CviPuWVGMZnd5C9BLKUwHVfZGN161TL7yNJe%2BEtXDpg%3D%3D)\n\n\n\n$\n\\begin{bmatrix}\n  F \\\\\n  M_x \n \\end{bmatrix} = \n \\begin{bmatrix}\n 1 & 1 & 1 & 1\\\\ \n  -2 & -1 & 1 & 2 \n \\end{bmatrix}\n \\begin{bmatrix}\n  f_1 \\\\ f_2 \\\\ f_3 \\\\ f_4\n \\end{bmatrix}\\\\\nmin \\sum{F}\\\\\nmin \\sum{M_x}\\\\ \nf_{min} \\leq f_i \\leq f_{max}\\\\\nF=10 \\\\\nM_x=2$\n\n$Find \\ f_i$"}}