{"cell_type":{"eb3ca311":"code","fb619daa":"code","4d04b2bd":"code","b8c98a62":"code","7a410e11":"markdown","5e0d3f41":"markdown","e6ec631b":"markdown"},"source":{"eb3ca311":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fb619daa":"#dataset will be a python dictionary.\nwith open('..\/input\/iris-dataset-json-version\/iris.json') as f:\n  dataset = json.load(f)\n\n#dataFrame will be a Pandas dataframe.\ndataFrame = pd.read_json('..\/input\/iris-dataset-json-version\/iris.json')\nprint(dataFrame)","4d04b2bd":"# As you can see, this process is not very optimal. One creates a lot of variables and lists.  \nprint(dataset[0])\nsetosaSepalWidths = []\nversiColorSepalWidths = []\nvirginicaSepalWidths = []\n\nsetosaSepalLength = []\nversiSepalLength = []\nvirgincaSepalLength = []\n\nspecies = []\n\nfor i in dataset:\n    if i['species'] == (\"setosa\"):\n        setosaSepalWidths.append(i['sepalWidth'])\n        setosaSepalLength.append(i['sepalLength'])\n    if i['species'] == (\"versicolor\"):\n        versiColorSepalWidths.append(i['sepalWidth'])\n        versiSepalLength.append(i['sepalLength'])\n    if i['species'] == (\"virginica\"):\n        virginicaSepalWidths.append(i['sepalWidth'])\n        virgincaSepalLength.append(i['sepalLength'])\n    if i['species'] not in species:\n        species.append(i['species'])\n        \nsetosaAverage = sum(setosaSepalWidths)\/len(setosaSepalWidths)\nversiAverage = sum(versiColorSepalWidths)\/len(versiColorSepalWidths)\nvirgiAverage = sum(virginicaSepalWidths)\/len(virginicaSepalWidths)\n\nsepalLengthAverage = [sum(setosaSepalLength)\/len(setosaSepalLength), sum(versiSepalLength)\/len(versiSepalLength), sum(virgincaSepalLength)\/len(virgincaSepalLength)]\n\naverageWidth = [setosaAverage, versiAverage, virgiAverage]\n\nplt.title(\"Sepal Width Average by Species\")\nsns.barplot(x=species, y=averageWidth)\nplt.show()\n\nplt.title(\"Sepal Length Average by Species\")\nsns.barplot(x=species, y=sepalLengthAverage)\nplt.show()","b8c98a62":"plt.title(\"Sepal Width Average by Species\")\nsns.barplot(x=dataFrame['species'], y=dataFrame['sepalWidth'], ci=None)\nplt.show()\n\nplt.title(\"Sepal Length Average by Species\")\nsns.barplot(x=dataFrame['species'], y=dataFrame['sepalLength'], ci=None)\nplt.show()","7a410e11":"# Caculation using JSON and not PD happens below","5e0d3f41":"# The following is an example on the famous IRIS DATASET","e6ec631b":"# Calculation using PD happends below\nThe biggest take away? Take advantage of your tools. Both version accomplish the same task, but there is massive differences between the two. In the first case we are  adding a lot of syntax and operations that Seaborn already takes care of within its plotting functions. I recommend learning more about Pandas."}}