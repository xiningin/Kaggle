{"cell_type":{"27ef61ab":"code","ebf82d25":"code","d6793268":"code","0752e35e":"code","488e48e2":"code","80c67b3a":"markdown","b12c720c":"markdown","c54b27d2":"markdown"},"source":{"27ef61ab":"!pip install kaggle-environments -U","ebf82d25":"# run this if using kaggle notebooks\n!cp -r ..\/input\/lux-ai-2021\/* .","d6793268":"import time\nfrom kaggle_environments import make\n\nfrom lux.game import Game\nfrom lux.game_map import Cell, RESOURCE_TYPES, Position\nfrom lux.constants import Constants\nfrom lux.game_constants import GAME_CONSTANTS\nfrom lux import annotate\n\ngame_state = None\ndef agent(observation, configuration):\n    global game_state\n\n    ### Do not edit ###\n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state._update(observation[\"updates\"][2:])\n        game_state.id = observation.player\n    else:\n        game_state._update(observation[\"updates\"])\n    \n    actions = []\n\n    ### AI Code goes down here! ### \n    # No logic.\n    \n    return actions\n\n\n# Play N games to measure performance\nstart_time = time.time()\ntotal_steps = 0\nnum_episodes = 2000\n\nfor i in range(num_episodes):\n    env = make(\"lux_ai_2021\", debug=False) # Note, this line is needed here to reset the environment with a new seed. It doesn't effect performance significantly.\n    steps = env.run([agent, agent])\n    total_steps += len(steps)\n\ntotal_time = time.time() - start_time\n\nprint(\"Original game engine: %.3f seconds per full game, mean of %.1f steps per game.\" % (total_time \/ num_episodes, total_steps \/ num_episodes))\n","0752e35e":"!pip install git+https:\/\/github.com\/glmcdona\/LuxPythonEnvGym.git@main","488e48e2":"import time\nfrom luxai2021.game.game import Game\nfrom luxai2021.game.actions import *\nfrom luxai2021.game.constants import LuxMatchConfigs_Default\n\n# Create a game\nconfigs = LuxMatchConfigs_Default\ngame = Game(configs)\n\n# Play N games to measure performance\nstart_time = time.time()\ntotal_steps = 0\nnum_episodes = 2000\nfor i in range(num_episodes):\n    gameOver = False\n    while not gameOver:\n        gameOver = game.run_turn_with_actions(actions=[])\n    \n    total_steps += game.state[\"turn\"]\n    game.reset()\ntotal_time = time.time() - start_time\n\nprint(\"Python replica game engine: %.3f seconds per full game, mean of %.1f steps per game.\" % (total_time \/ num_episodes, total_steps \/ num_episodes))\n","80c67b3a":"## Test the original LuxAI2021 engine (TypeScript driven)","b12c720c":"# Lux AI 2021 python game engine performance comparison to original\nSee https:\/\/github.com\/glmcdona\/LuxPythonEnvGym for environment project and updates.\n\nThis is a python replica of the Lux game engine to speed up training and allow better game control for RL models. In this notebook we run a simple performance benchmark comparing the game engine performance of the two.","c54b27d2":"## Test the python-engine replica game performance"}}