{"cell_type":{"884b504b":"code","e8f69c25":"code","c1489c43":"code","bc96e008":"code","46d4dd45":"code","2e595b6f":"code","a3de7ed2":"code","d9f35048":"code","04bce472":"code","df80a609":"code","b45d1aa7":"code","62f432b7":"code","fe0284bd":"code","8fb9f37d":"code","3c2ec6b6":"code","e86e1656":"code","d4a42384":"code","6be47ebf":"markdown","4013d44c":"markdown","bfe59053":"markdown","f9081101":"markdown","444dc786":"markdown","a6e6df8f":"markdown","8cf24d91":"markdown","3db9b9e4":"markdown","f8507bff":"markdown","1c6c75b2":"markdown","65682afc":"markdown","6cccda61":"markdown","8f3d5b76":"markdown","66623d7c":"markdown","c6bf633f":"markdown","453f62bf":"markdown","13328aa8":"markdown"},"source":{"884b504b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom keras.layers import Dense, Dropout\nfrom keras.optimizers import SGD, Adam\nfrom keras.models import Sequential\nfrom collections import Counter\nfrom scipy import stats\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#sept, octo, nov, dec = day[:7417], day[7417:16238], day[16238:24522], day[24522:32686]\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e8f69c25":"data = pd.read_csv('..\/input\/SolarEnergy\/SolarPrediction.csv')","c1489c43":"data","bc96e008":"X = data.drop(['UNIXTime', 'Radiation'], axis=1)\ny = data['Radiation']","46d4dd45":"X['TSR_Minute'] = pd.to_datetime(X['TimeSunRise']).dt.minute\nX['TSS_Minute'] = pd.to_datetime(X['TimeSunSet']).dt.minute\nX['TSS_Hour'] = np.where(pd.to_datetime(X['TimeSunSet']).dt.hour==18, 1, 0)","2e595b6f":"time = np.array([])\n\nfor i in X['Data']:\n    splt = i.split()\n    time = np.append(time, splt[0])\n    \nX['Month'] = pd.to_datetime(X['Data']).dt.month\nX['Day'] = pd.to_datetime(X['Data']).dt.day","a3de7ed2":"X['Hour'] = pd.to_datetime(X['Time']).dt.hour\nX['Minute'] = pd.to_datetime(X['Time']).dt.minute\nX['Second'] = pd.to_datetime(X['Time']).dt.second","d9f35048":"count = Counter(time)\nplt.figure(figsize=(20, 7))\nplt.bar(count.keys(), count.values(), color='purple')\nplt.xticks([])\nplt.xlabel('Days in the year')\nplt.ylabel('Number of days recorded')\nplt.title('The amount of days recorded')\nplt.show()","04bce472":"norm = {'Temperature' : (X['Temperature']+1).transform(np.log), \n        'Humidity' : stats.boxcox(X['Humidity']+1)[0], 'Speed' : (X['Speed']+1).transform(np.log), \n        'WindDirection(Degrees)' : MinMaxScaler().fit_transform(np.array(X['WindDirection(Degrees)']).reshape(-1, 1)),\n        'TSS_Minute' : stats.boxcox(X['TSS_Minute']+1)[0]}\n\nfor i in norm:\n    b=50\n    fig, (ax1, ax2, ax3, ax4, ax5) = plt.subplots(5, 1, figsize=(10, 5))\n    pd.DataFrame(X[i]).hist(ax=ax1, bins=b)\n    pd.DataFrame((X[i]+1).transform(np.log)).hist(ax=ax2, bins=b)\n    pd.DataFrame(stats.boxcox(X[i]+1)[0]).hist(ax=ax3, bins=b)\n    \n    pd.DataFrame(StandardScaler().fit_transform(np.array(X[i]).reshape(-1, 1))).hist(ax=ax4, bins=b)\n    pd.DataFrame(MinMaxScaler().fit_transform(np.array(X[i]).reshape(-1, 1))).hist(ax=ax5, bins=b)\n    \n    ax1.set_ylabel('Normal')\n    ax2.set_ylabel('Log')\n    ax3.set_ylabel('Box Cox')\n    ax4.set_ylabel('Standard')\n    ax5.set_ylabel('MinMax')\n    \n    X[i] = norm[i]","df80a609":"X = X.drop(['Data', 'Time', 'TimeSunRise', 'TimeSunSet'], axis=1)","b45d1aa7":"X['WindDirection(Degrees)_bin'] = np.digitize(X['WindDirection(Degrees)'], np.arange(0.0, 1.0, 0.02).tolist())\nX['TSS_Minute_bin'] = np.digitize(X['TSS_Minute'], np.arange(0.0, 288.0, 12).tolist())\nX['Humidity_bin'] = np.digitize(X['Humidity'], np.arange(32, 3192, 128).tolist())","62f432b7":"feats = {'WindDirection(Degrees)_bin':'blue', 'TSS_Minute_bin':'red', 'Humidity_bin':'green'}\nfor i in feats:\n    count = Counter(X[i])\n    plt.bar(count.keys(), count.values(), color=feats[i])\n    plt.title('Distribution')\n    plt.ylabel('Occurrence')\n    plt.xlabel(i)\n    plt.show()","fe0284bd":"X","8fb9f37d":"sns.heatmap(X.corr())\nplt.show()","3c2ec6b6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","e86e1656":"model = Sequential()\n    \nmodel.add(Dense(128, activation='relu', input_dim=16))\nmodel.add(Dropout(0.33))\n    \nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dropout(0.33))\n\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dropout(0.33))\n\nmodel.add(Dense(1, activation='linear'))\n    \nmodel.compile(metrics='mse', loss='mae', optimizer=Adam(learning_rate=0.001))\nhistory = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, batch_size=32)","d4a42384":"fit = history.history\nscores = model.evaluate(X_test, y_test)\nmae = scores[0]\nmse = scores[1]\nprint('Mean absolute error: ' + str(mae) + '. Mean squared error: ' + str(mse) + '.')\n\nfor i in fit:\n    plt.plot(fit[i])\n    plt.title(i + ' over epochs')\n    plt.ylabel(i)\n    plt.xlabel('epochs')\n    plt.show()","6be47ebf":"Firstly, the minute of TimeSunRise feature is pulled out and then the minute and hour of TimeSunSet is found.","4013d44c":"Below are the scores we have achieved for mean absolute error and mean squared error.","bfe59053":"This is the correlation of all the variables in our dataset","f9081101":"This is a visualisation of the distribution of the different features compared to them being transformed with Log, BoxCox, Standard Scaler and MinMax Scaler.","444dc786":"### Feature transformation","a6e6df8f":"The next step is to use transformations on our dataset.","8cf24d91":"### Thank you for reading my notebook.\n### If you enjoyed it and found it helpful, please upvote it so that I can do more of these.","3db9b9e4":"The last piece of feature engineering with the X and y variables is to bin the WindDirection, TimeSunSet Minute and Humidity features.","f8507bff":"### Time data engineering","1c6c75b2":"We begin our feature engineering by extracting the time and date out of our Data, TimeSunRise and TimeSunSet features.","65682afc":"Finally, we have created a neural network which predicts the level of solar radiation.","6cccda61":"### Binning","8f3d5b76":"Here is a graph showing how many days were recorded throughout our dataset.","66623d7c":"# Solar radiation prediction\n### Welcome to the solar radiation notebook where we will be using the ***date, time, temperature, pressure, humidity, wind direction, speed, time of sun rise and time of sun set*** features to predict the level of solar radiation.","c6bf633f":"The following graphs are visualisations showing the distribution of the data we recorded.","453f62bf":"### Model training","13328aa8":"Then, the month and day are taken out of Data and the hour, minute and second out of Time."}}