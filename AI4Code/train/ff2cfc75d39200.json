{"cell_type":{"7b088091":"code","58e5a8ef":"code","c99f8141":"code","10bb956a":"code","865d81e1":"code","2988073c":"code","0560bbf0":"code","14aeacc2":"code","cc8f382f":"code","013f0a36":"code","bd8ea948":"code","027c35a2":"code","260c7cc4":"code","ee12cf6a":"code","cc7603b7":"code","c509ced1":"code","bd378264":"code","a3a681cc":"code","2684860f":"code","0e53970c":"code","a77a5267":"code","9a355bda":"code","4e154fb6":"code","bcfb75db":"code","d14b7946":"code","369903fd":"code","602bc77a":"code","818a852a":"code","f14f0cca":"code","bf337702":"code","adaf7b89":"code","f4f12d6c":"code","bf92582c":"code","d6533769":"code","a2427d23":"code","4eff9fc0":"code","20904291":"code","ed8c6a32":"code","f93be3a5":"code","2e01aa20":"code","becb81cf":"code","6d22d263":"code","b0d7e632":"code","3a209071":"code","aefe2998":"code","73b05693":"code","f38b7482":"code","53e56f80":"code","cc1389e0":"code","07e52cf9":"code","ef1fb241":"code","0a376320":"code","7414e2e2":"code","a0715a00":"code","ba292a14":"code","076a5884":"code","941ba3e0":"code","c00bb302":"code","dff65de8":"code","c8ae8685":"code","7be9574e":"code","bbcfff49":"code","29a4fa82":"code","55210c9d":"code","893ed46c":"code","013f1376":"code","f0f10ed1":"code","c8ad86d9":"code","12d9e86a":"code","c90028ea":"code","3383a802":"code","e2600224":"code","8cf8c89c":"code","c2a6ffa3":"code","dc94b90b":"code","ec778d43":"code","022f4781":"code","c6af38ea":"code","3a98d900":"code","55816a70":"code","d651fd0f":"code","7a56475d":"code","21dd1db2":"code","367d1957":"code","d728959f":"markdown","23316f07":"markdown","3c693084":"markdown","109a8542":"markdown","22696147":"markdown","90144cc8":"markdown","432a36ed":"markdown","69199d2e":"markdown","95b753aa":"markdown","75ccbd64":"markdown","7dc0660d":"markdown","c46eb337":"markdown","f3a7c514":"markdown","55f6811e":"markdown","46148218":"markdown","f1112d57":"markdown","65f57736":"markdown","71f80a1c":"markdown","a4f2c6ea":"markdown","1e0dd366":"markdown","3bd91874":"markdown","2ee68afc":"markdown","6710d6d6":"markdown","7fafd119":"markdown","e75ce892":"markdown","99e99cc4":"markdown","c63df0e4":"markdown","1c112aaa":"markdown"},"source":{"7b088091":"# [\uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30]\n# (\ub2e8, y_test \ub370\uc774\ud130\ub294 \ud65c\uc6a9\ud574\uc11c\ub294 \uc548\ub428)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[id_name, target])\n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[id_name, target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/customer-analytics\/Train.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, \n                                                  target='Reached.on.Time_Y.N', \n                                                  id_name='ID')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","58e5a8ef":"# \ub370\uc774\ud130 \ud655\uc778\nprint(X_train.shape)\nX_train.head()","c99f8141":"y_train","10bb956a":"# \ub808\uc774\ube14(\ud0c0\uac9f) \ud655\uc778\ny_train['Reached.on.Time_Y.N'].value_counts()","865d81e1":"# X_train \uacb0\uce21\uce58 \ud655\uc778\nX_train.isnull().sum()","2988073c":"# X_test \uacb0\uce21\uce58 \ud655\uc778\nX_test.isnull().sum()","0560bbf0":"# \ub370\uc774\ud130 \ud0c0\uc785 \ud655\uc778\nX_train.info()","14aeacc2":"# object \ud0c0\uc785 \uceec\ub7fc, \uace0\uc720\uac12 \uac1c\uc218 \ud655\uc778\nX_train[['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']].nunique()","cc8f382f":"# object \uceec\ub7fc \uc0ad\uc81c (\ub610\ub294 \ub77c\ubca8\uc778\ucf54\ub529, \uc6d0\ud56b\uc778\ucf54\ub529)\nX_train = X_train.drop(['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender'], axis=1)\nX_test = X_test.drop(['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender'], axis=1)\nX_train","013f0a36":"from sklearn.linear_model import LogisticRegression  # 1. \ub85c\uc9c0\uc2a4\ud2f1\ud68c\uadc0\nfrom sklearn.neighbors import KNeighborsClassifier   # 2. K-\uc774\uc6c3 \ubd84\ub958\nfrom sklearn.svm import SVC                          # 3. \uc11c\ud3ec\ud2b8 \ubca1\ud130 \uba38\uc2e0\nfrom sklearn.tree import DecisionTreeClassifier      # 4. \uc758\uc0ac\uacb0\uc815\ub098\ubb34 - \ubd84\ub958\nfrom sklearn.ensemble import RandomForestClassifier  # 5. \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 - \ubd84\ub958\nfrom xgboost import XGBClassifier                    # 6. XB \ubd80\uc2a4\ud2b8 - \ubd84\ub958","bd8ea948":"from sklearn.model_selection import train_test_split\nX_tr,X_val,y_tr,y_val = train_test_split(X_train,y_train['Reached.on.Time_Y.N'],test_size=0.2,random_state=2021)","027c35a2":"model = LogisticRegression()\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","260c7cc4":"model = KNeighborsClassifier()\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","ee12cf6a":"model = SVC()\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","cc7603b7":"model = DecisionTreeClassifier()\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","c509ced1":"model = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","bd378264":"model = XGBClassifier(eval_metric='mlogloss', use_label_encoder=False)\nmodel.fit(X_tr, y_tr)\nround(model.score(X_val, y_val) * 100, 2)","a3a681cc":"model = KNeighborsClassifier()\nmodel.fit(X_train, y_train['Reached.on.Time_Y.N'])\npred = model.predict(X_test)\npred","2684860f":"submission = pd.DataFrame({\n        \"ID\": y_test[\"ID\"],\n        \"Reached.on.Time_Y.N\": pred\n    })","0e53970c":"submission.head()","a77a5267":"submission.to_csv('submission.csv', index=False)  ## \uc218\ud5d8\ubc88\ud638.csv","9a355bda":"# \uc870\uae08 \ub5a8\uc5b4\uc9c4 \uc131\ub2a5\uc744 \ubcf4\uc5ec\uc8fc\uace0 \uc788\uc74c\nround(model.score(X_test, y_test['Reached.on.Time_Y.N']) * 100, 2)","4e154fb6":"import pandas as pd\ndf = pd.read_csv('..\/input\/customer-analytics\/Train.csv')\ndf","bcfb75db":"df.shape","d14b7946":"# [\uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30]\n# y_test \ub370\uc774\ud130\ub294 \ud65c\uc694\ud574\uc11c\ub294 \uc548\ub428\n\nfrom sklearn.model_selection import train_test_split\n\n# 1. df \ub97c (train: test = 8 : 2) \ub85c \ubd84\ud560  => X_train, X_test\nX_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=2021)\nprint(X_train.shape, X_test.shape)","369903fd":"# 2. \ud559\uc2b5\uc6a9 \ub77c\ubca8 \ub370\uc774\ud130 \uc0dd\uc131  => y_train\n#### X_train\uc5d0\uc11c 'ID' , 'Reached.on.Time_Y.N' \uceec\ub7fc\ub9cc \uac00\uc838\uc628 \ub370\uc774\ud130\uc14b\ny_train = X_train[['ID', 'Reached.on.Time_Y.N' ]]\ny_train.shape","602bc77a":"# 3. X_train\uc5d0\uc11c \ud559\uc2b5\uc5d0 \ubd88\ud544\uc694\ud55c 'ID' , 'Reached.on.Time_Y.N' \uceec\ub7fc \uc0ad\uc81c\nX_train = X_train.drop(['ID', 'Reached.on.Time_Y.N'], axis=1)\nX_train.shape","818a852a":"# 4. \ud6c8\ub828\uc6a9 \ub77c\ubca8 \ub370\uc774\ud130 \uc0dd\uc131 => y_test\ny_test = X_test[['ID', 'Reached.on.Time_Y.N']]\ny_test.shape","f14f0cca":"# 5. X_test\uc5d0\uc11c \ud559\uc2b5\uc5d0 \ubd88\ud544\uc694\ud55c 'ID' , 'Reached.on.Time_Y.N' \uceec\ub7fc \uc0ad\uc81c\nX_test = X_test.drop(['ID', 'Reached.on.Time_Y.N'], axis=1)\nX_test.shape","bf337702":"# 6. 4\uac00\uc9c0 \ub370\uc774\ud130\uc14b shape \ud655\uc778\nprint(X_train.shape, y_train.shape, X_test.shape, y_test.shape)\nprint(df.shape)","adaf7b89":"# \ub370\uc774\ud130 \ud655\uc778\nprint(X_train.shape)\nX_train.head()","f4f12d6c":"print(y_train.shape)\ny_train.head()","bf92582c":"# label \ud655\uc778\ny_train['Reached.on.Time_Y.N'].value_counts()","d6533769":"# \uacb0\uce21\uce58 \ud655\uc778\n# X_train.isnull().sum()  # >> Not null\n# X_test.isnull().sum()   # >> Not null\n# y_train.isnull().sum()  # >> Not null\n# y_test.isnull().sum()   # >> Not null","a2427d23":"# \ub370\uc774\ud130 \ud0c0\uc785 \ud655\uc778\n# >> \ubc94\uc8fc\ud615: 'Warehouse_block' ,'Mode_of_Shipment','Product_importance','Gender'\nX_train.info()  ","4eff9fc0":"# >> \ubc94\uc8fc\ud615: 'Warehouse_block' ,'Mode_of_Shipment','Product_importance','Gender'\nX_test.info()","20904291":"# \ubc94\uc8fc\ud615 \uceec\ub7fc\uc758 \uace0\uc720\uac12 \"\uac1c\uc218\" \ud655\uc778 \ud83d\udca5\nX_train[['Warehouse_block' ,'Mode_of_Shipment','Product_importance','Gender']].nunique()","ed8c6a32":"# \ubc94\uc8fc\ud615 \uceec\ub7fc\uc758 \"\uace0\uc720\uac12\" \ud655\uc778 \ud83d\udca5\ncols = ['Warehouse_block' ,'Mode_of_Shipment','Product_importance','Gender']\nfor col in cols:\n    print(col, X_train[col].unique())","f93be3a5":"X_train.info()","2e01aa20":"X_test.info()","becb81cf":"# \ubc94\uc8fc\ud615 \uceec\ub7fc \ucc98\ub9ac\n# (\uc0ad\uc81c \ub610\ub294 LabelEncoder \ub610\ub294 \uc6d0\ud56b\uc778\ucf54\ub529)\n# ## 1. Label Encoder\n# from sklearn.preprocessing import LabelEncoder\n# le = LabelEncoder()\n# cols = ['Warehouse_block' ,'Mode_of_Shipment','Product_importance','Gender']\n# for col in cols:\n#     X_train[col] = le.fit_transform(X_train[col])\n#     X_test[col] = le.fit_transform(X_test[col])\n    \n# print(X_train.info(), X_test.info())","6d22d263":"## 2. object \uceec\ub7fc \uc0ad\uc81c (\ub610\ub294 \ub77c\ubca8\uc778\ucf54\ub529, \uc6d0\ud56b\uc778\ucf54\ub529)\nX_train = X_train.drop(['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender'], axis=1)\nX_test = X_test.drop(['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender'], axis=1)\nX_train\nprint(X_train.info(), X_test.info())","b0d7e632":"##### \uc5ec\ub7ec\uac00\uc9c0 \ubaa8\ub378 \ud14c\uc2a4\ud2b8 #####\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier","3a209071":"# \ud559\uc2b5\uc6a9 \ub370\uc774\ud130(X_train, Y_train)\ub97c \ud559\uc2b5&\uac80\uc99d\uc6a9\uc73c\ub85c \ubd84\ud560 (8:2)\n# >> X_tr, X_val, y_tr, y_val\nfrom sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train['Reached.on.Time_Y.N'],\n                                            test_size=0.2, random_state=2021)","aefe2998":"print(X_train.shape, y_train.shape)\nprint(X_tr.shape, X_val.shape, y_tr.shape, y_val.shape)","73b05693":"import warnings\nwarnings.filterwarnings('ignore')","f38b7482":"# 1. LogisticRegression                               =>63.86\n# \ubc94\uc8fc\ud615 \ub370\uc774\ud130 \uceec\ub7fc\uc744 LableEncoder \ucc98\ub9ac\ud558\uba74 \uc5d0\ub7ec\ub0a8\n# \ubc94\uc8fc\ud615 \ub370\uc774\ud130 \uceec\ub7fc\uc744 \uc0ad\uc81c\ud558\uba74 \uad1c\uce08!.. (\uc65c \uc77c\uae4c..\u2753\u2754)\n\n### \ubaa8\ub378\uc815\uc758\nmodel = LogisticRegression()\n### \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n### \uac80\uc99d\nround(model.score(X_val, y_val) * 100, 2)","53e56f80":"# 2. KNeighborsClassifier                             => 65.97\n### \ubaa8\ub378\uc815\uc758\nmodel = KNeighborsClassifier()\n### \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n### \uac80\uc99d\nround(model.score(X_val, y_val)*100,2)","cc1389e0":"# 3. SVC                                               => 65.4\n### \ubaa8\ub378\uc815\uc758\nmodel = SVC()\n### \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n### \uac80\uc99d\nround(model.score(X_val, y_val)*100, 2)","07e52cf9":"# 4. DecisionTreeClassifier                              => 64.49\n### \ubaa8\ub378\uc815\uc758 \nmodel = DecisionTreeClassifier()\n### \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n### \uac80\uc99d\nround(model.score(X_val, y_val)*100, 2)","ef1fb241":"# 5. RandomForestClassifier                              => 65.34\n### \ubaa8\ub378\uc815\uc758\nmodel = RandomForestClassifier()\n### \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n### \uac80\uc99d\nround(model.score(X_val, y_val)*100, 2)","0a376320":"# 6. XGBClassifier                                        => 65.51\n### \ubaa8\ub378\uc815\uc758\nmodel = XGBClassifier()\n### \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n### \uac80\uc99d\nround(model.score(X_val, y_val)*100, 2)","7414e2e2":"# \ubaa8\ub378\uc815\uc758\nfinal_model = KNeighborsClassifier()\n\n# \ud559\uc2b5\nfinal_model.fit(X_train, y_train['Reached.on.Time_Y.N'])\n\n# \uc608\uce21\npred = model.predict(X_test)\n\nprint(pred)","a0715a00":"y_test","ba292a14":"# \ub2f5\uc548 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30\noutput = pd.DataFrame({ 'ID': y_test['ID'],\n                        'Reached.on.Time_Y.N': pred })\noutput","076a5884":"# csv \uc0dd\uc131\noutput.to_csv('20211203.csv', index=False)\n\n# csv \ud655\uc778\npd.read_csv('20211203.csv')","941ba3e0":"round(final_model.score(X_test, y_test['Reached.on.Time_Y.N'])*100, 2)","c00bb302":"# \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\nimport pandas as pd\nimport numpy as np\ndf = pd.read_csv('..\/input\/customer-analytics\/Train.csv')\ndf.head()","dff65de8":"# shape\ndf.shape","c8ae8685":"# \uacb0\uce21\uac12\ndf.isnull().sum()","7be9574e":"# \ub370\uc774\ud130\ud0c0\uc785\n# \ubc94\uc8fc\ud615: ['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']\ndf.info()   ","bbcfff49":"# \uae30\ucd08\ud1b5\uacc4\ndf.describe()","29a4fa82":"df.describe(include='object')","55210c9d":"# \ud0c0\uac9f \ubcc0\uc218: Reached.on.time\ny_train = df['Reached.on.Time_Y.N']\nX_train = df.drop(['Reached.on.Time_Y.N'], axis=1)  # \ud6c8\ub828\ub370\uc774\ud130\uc5d0 \ubd88\ud544\uc694\ud55c id \uceec\ub7fc \uc0ad\uc81c\ny_train","893ed46c":"X_train","013f1376":"print(type(y_train))\nprint(y_train.value_counts())","f0f10ed1":"# y_\ud615\ubcc0\ud658 \ud83d\udca5\ny_train = y_train.map(lambda x: int(x))","c8ad86d9":"print(type(y_train))\nprint(y_train.value_counts())","12d9e86a":"X_train.info()","c90028ea":"type(X_train)","3383a802":"# \ubc94\uc8fc\ud615: ['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']\n# \ubc94\uc8fc\ud615 \ubcc0\uc218\uc5d0 \uc5b4\ub5a4 \uac12\uc774 \uc788\ub294\uc9c0 \ud655\uc778\ncat_features = ['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']\nfor cat in cat_features:\n    print(cat, ':', set(X_train[cat]))","e2600224":"# \ubc29\ubc95 1>> mapping\n\n# 'Warehouse_block'\n# def wb_map(x):\n#     if x == 'A' : return 1\n#     elif x == 'B' : return 2\n#     elif x == 'C' : return 3\n#     elif x == 'D' : return 4\n#     else: return 5\n\n# #'Mode_of_Shipment'\n# def sp_map(x):\n#     if x == 'Flight' : return 1\n#     elif x == 'Ship' : return 2\n#     else: return 3\n\n# # 'Product_importance'\n# def imp_map(x):\n#     if x == 'low' : return 1\n#     elif x == 'high' : return 2\n#     else: return 3\n\n# # 'Gender'\n# def sex_map(x):\n#     if x == 'F' : return 1\n#     else: return 0\n\n# \ud568\uc218 \uc801\uc6a9\n# X_train['Warehouse_block'] = X_train['Warehouse_block'].map(wb_map)\n# X_train['Mode_of_Shipment'] = X_train['Mode_of_Shipment'].map(sp_map)\n# X_train['Product_importance'] = X_train['Product_importance'].map(imp_map)\n# X_train['Gender'] = X_train['Gender'].map(sex_map)\n\n# X_train","8cf8c89c":"# \ubaa8\ub4e0 \ubcc0\uc218\uac00 \uc218\uce58\ud615\uc73c\ub85c \ubcc0\ud658\ub41c \uac83\uc744 \ud655\uc778\nX_train.info()","c2a6ffa3":"# \ubc29\ubc95 2>> Label Encoder\nfrom sklearn.preprocessing import LabelEncoder\ncat_features = ['Warehouse_block', 'Mode_of_Shipment', 'Product_importance', 'Gender']\nfor cat in cat_features:\n    le = LabelEncoder()\n    X_train[cat] = le.fit_transform(X_train[cat])\nX_train","dc94b90b":"X_train.info()","ec778d43":"X_train.describe()","022f4781":"X_train.head()","c6af38ea":"'''\n[ \uc815\uaddc\ud654(Scaling) \ubc29\ubc95 ]\n1. StandardScaler : \ud3c9\uade0 0, \ud45c\uc900\ud3b8\ucc28 1\ub85c \ubcc0\ud658\n2. MinMaxScaler : \ucd5c\uc18c\uac12 0, \ucd5c\ub300\uac12 1\uc774 \ub418\ub3c4\ub85d \ubcc0\ud658\n3. RobustScaler: \uc911\uc559\uac12(median) 0, IQR(interquartile range) 1\uc774 \ub418\ub3c4\ub85d \ubcc0\ud658\n'''\n\n# \ub2e8\uc704\ub97c \ub9de\ucdb0\uc8fc\uae30 \uc704\ud574 \uc544\ub798 \uceec\ub7fc\uc744 StandardScaling\n# ['Cost_of_the_Product', 'Discount_offered', 'Weight_in_gms']\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nfeats = ['Cost_of_the_Product', 'Discount_offered', 'Weight_in_gms']\nfor ft in feats:\n    X_train[ft] = scaler.fit_transform(X_train[[ft]]).flatten()\n\nX_train.head()","3a98d900":"from sklearn.model_selection import train_test_split, KFold  # \ub370\uc774\ud130 \ubd84\ud560, KFold\nfrom sklearn.linear_model import LogisticRegression          # 1. \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0 => \uc815\uaddc\ud654 \ud544\uc218(StandardScaler)\nfrom sklearn.tree import DecisionTreeClassifier              # 2. \uc758\uc0ac\uacb0\uc815\ub098\ubb34 - \ubd84\ub958\nfrom sklearn.ensemble import RandomForestClassifier          # 3. \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 - \ubd84\ub958\nimport xgboost as xgb                                        # 4. Xgboost\n# from sklearn.svm import SVC                                  # 5. \uc11c\ud3ec\ud2b8 \ubca1\ud130 \uba38\uc2e0\n# from sklearn.neighbors import KNeighborsClassifier           # 6. K-\ucd5c\uadfc\uc811 \uc774\uc6c3 \ubd84\ub958\nfrom sklearn.metrics import roc_curve, roc_auc_score, auc    # roc_auc_score\nfrom datetime import datetime                                \n\n# help\n# print(help(LogisticRegression))\n# print(help(RandomForestClassifier))\n\n# \ubaa8\ub378 \uc815\uc758\n# 1. LogisticRegression\nlr = LogisticRegression(n_jobs = -1, random_state = 42, max_iter = 3000)\n\n# 2. DecisionTreeClassifier\ndtree = DecisionTreeClassifier(max_depth=9, min_samples_split=5, min_samples_leaf=3, \n                               max_features='auto', random_state=42)\n\n# 3. RandomForestClassifier\nrf = RandomForestClassifier(n_estimators=1000, max_depth=9, min_samples_split=5, min_samples_leaf=3, \n                               max_features='auto', random_state=42, n_jobs = -1)\n\n# 4. xgboost.XGBClassifier\nxgb_model = xgb.XGBClassifier(n_estimators=1000, max_depth=9, n_jobs=-1, random_state=42, gamma=0.7,\n                              learning_rate=0.05, eval_metric='logloss', use_label_encoder=False)\n\n# # 5. SVC\n# svc = SVC()\n\n# # 6. KNeighborsClassifier\n# knc = KNeighborsClassifier()\n","55816a70":"# \ub370\uc774\ud130 \ubd84\ud560 ( train : valid = 2 : 8 )\n# print(help(train_test_split))\ntrain_x, val_x, train_y, val_y = train_test_split(X_train, y_train, test_size=0.2, \n                                                  shuffle=True, random_state=42)\nprint(X_train.shape, y_train.shape)\nprint(train_x.shape, val_x.shape, train_y.shape, val_y.shape)","d651fd0f":"rf.__class__.__name__","7a56475d":"#\ubaa8\ub378 \ud559\uc2b5 (.fit)\nmodels = [lr, dtree, rf, xgb_model]\nfor m in models:\n    start = datetime.now()    # \ud559\uc2b5 \uc2dc\uc791\uc2dc\uac04\n    m.fit(train_x, train_y)   # \ubaa8\ub378 \ud559\uc2b5\n    end = datetime.now()      # \ud559\uc2b5 \uc885\ub8cc\uc2dc\uac04\n    \n    # \uc608\uce21 (.predict_proba())\n    # roc_auc_score\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574, predict_proba (\ud655\ub960)\uc774 \ud544\uc694\ud568\n    pred_y = m.predict_proba(val_x)[:,1]\n    \n    # \ud3c9\uac00\n    name = m.__class__.__name__         # \ubaa8\ub378\uba85 ('LogisticRegression','DecisionTreeClassifier',..)\n    auc = roc_auc_score(val_y, pred_y)  # \uc608\uce21\uac12\uc73c\ub85c roc_auc_score \ud655\uc778\n    time = end - start                  # \ud559\uc2b5 \uc18c\uc694\uc2dc\uac04\n    print('Model {0} - AUC score: {1}, Training time: {2}'.format(name, auc, time))","21dd1db2":"###################### \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 ######################\n\nimport pandas as pd\n\nimport warnings\nwarnings.filterwarnings('ignore')  # warning \ubb34\uc2dc\n\ndf = pd.read_csv('..\/input\/customer-analytics\/Train.csv')\n# print(df)\n\n# df => train, test \ub370\uc774\ud130\uc14b \ubd84\ud560 (8:2)\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test = train_test_split(df, test_size=0.2, shuffle=True, random_state=777 )  # \ud83d\udc9b\n\ny_train = X_train[['ID', 'Reached.on.Time_Y.N' ]]\nX_train = X_train.drop(['ID', 'Reached.on.Time_Y.N'], axis=1)\n\ny_test = X_test[['ID', 'Reached.on.Time_Y.N']]\nX_test = X_test.drop(['ID', 'Reached.on.Time_Y.N'], axis=1)\n\n# print(df.shape, X_train.shape, y_train.shape, X_test.shape, y_test.shape)\n\n######################             EDA           ######################\n# head\n# print(X_train.head())\n# print(y_train.head())\n# print(X_test.head())\n# print(y_test.head())\n\n# shape\n# print(X_train.shape)\n# print(y_train.shape)\n# print(X_test.shape)\n# print(y_test.shape)\n\n# \uacb0\uce21\uac12  => \uc804\uccb4 Not null\n# print(X_train.isnull().sum())\n# print(y_train.isnull().sum())\n# print(X_test.isnull().sum())\n# print(y_test.isnull().sum())\n\n# \ubc94\uc8fc\ud615 \ubcc0\uc218\ud655\uc778\n# cols = ['Warehouse_block','Mode_of_Shipment','Product_importance','Gender']\n# print(X_train.info())\n# print(y_train.info())\n# print(X_test.info())\n# print(y_test.info())\n\n# \uae30\ucd08\ud1b5\uacc4\n# \uc815\uaddc\ud654 \ud544\uc694 \uceec\ub7fc: 'Cost_of_the_Product' , 'Discount_offered', 'Weight_in_gms'\n# print(X_train.describe())\n# print(X_train.describe(include='object'))\n# print(X_test.describe())\n# print(X_test.describe(include='object'))\n\n# # label \uae42\n# print(y_train['Reached.on.Time_Y.N'].value_counts())\n# print(y_test['Reached.on.Time_Y.N'].value_counts())\n\n\n######################         \ub370\uc774\ud130 \uc804\ucc98\ub9ac       ######################\n# \uacb0\uce21\uac12 \ucc98\ub9ac\n# -> \uacb0\uce21\uac12 \uc5c6\uc73c\ubbc0\ub85c, pass\n\n# \ud6c8\ub828\uc5d0 \ubd88\ud544\uc694\ud55c \ub370\uc774\ud130 \uc0ad\uc81c\n# -> \uc55e\uc5d0\uc11c \ub370\uc774\ud130 \ubd88\ub7ec\uc62c\ub54c \ucc98\ub9ac\ud588\uc73c\ubbc0\ub85c, pass\n\n\n######################        \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1      ######################\n# \ubc94\uc8fc\ud615 \ub370\uc774\ud130 -> \uc0ad\uc81c \ub610\ub294 \uc218\uce58\ud615\uc73c\ub85c \ubcc0\ud658\n## [ \uc0ad\uc81c ]\nprint('\ubc94\uc8fc\ud615 \uceec\ub7fc \uc0ad\uc81c \uc804 X_train, X_test:\\n', X_train.shape, X_test.shape)\ncols = ['Warehouse_block','Mode_of_Shipment','Product_importance','Gender']\n\nfor col in cols:\n    X_train = X_train.drop([col], axis=1)\n    X_test = X_test.drop([col], axis=1)\nprint('\ubc94\uc8fc\ud615 \uceec\ub7fc \uc0ad\uc81c \ud6c4 X_train, X_test:\\n',X_train.shape, X_test.shape)\n\n# \uc815\uaddc\ud654(Scaling) => X_train \ub9cc !  \u2753\u2754 WHY \u2753\u2754\n# print(X_train.head())\n# print(X_test.head())\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nfeats = ['Cost_of_the_Product','Discount_offered','Weight_in_gms']\nfor ft in feats:\n    X_train[ft] = scaler.fit_transform(X_train[[ft]]).flatten()   # \ud83d\udc9b\ud83d\udc9b\n\n# print(X_train.head())\n# print(X_test.head())\n\n################  \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14  ##################\n\n# \ud559\uc2b5\uc6a9 \ub370\uc774\ud130(X_train, y_train)\ub97c \ud559\uc2b5&\uac80\uc99d \ub370\uc774\ud130\uc14b\uc73c\ub85c \ubd84\ud560 (8:2)  # \ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\n# >> X_tr, X_val, y_tr, y_val\nfrom sklearn.model_selection import train_test_split\n\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train['Reached.on.Time_Y.N'],   # \ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\n                                           test_size=0.2, random_state=777)\n\n\nprint('X_train, y_train:\\n', X_train.shape, y_train.shape)\nprint('X_tr, X_val, y_tr, y_val:\\n', X_tr.shape, X_val.shape, y_tr.shape, y_val.shape)\n\n# \uc5ec\ub7ec \ubaa8\ub378 \uc131\ub2a5 \ube44\uad50 \n'''\n1. \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\n2. \uc758\uc0ac\uacb0\uc815\ub098\ubb34 - \ubd84\ub958\n3. \ub79c\ub364\ud3ec\ub808\uc2a4\ud2b8 - \ubd84\ub958\n4. K\ucd5c\uadfc\uc811 - \ubd84\ub958\n5. xg\ubd80\uc2a4\ud2b8\n6. SVC\n'''\n# \ud83d\udc9b \ud83d\udc9b \ud83d\udc9b \ud83d\udc9b \ud83d\udc9b \ud83d\udc9b\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\n\n# 1.\n## \ubaa8\ub378\uc815\uc758\nmodel = LogisticRegression()  # \ud83d\udc9b\uad04\ud638 \uaf2d \ud3ec\ud568!\n## \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n## \uac80\uc99d\nprint('LogisticRegression: ', round(model.score(X_val, y_val)*100, 2))\n\n# 2.\n## \ubaa8\ub378\uc815\uc758\nmodel = DecisionTreeClassifier()  \n## \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n## \uac80\uc99d\nprint('DecisionTreeClassifier: ', round(model.score(X_val, y_val)*100, 2))\n\n# 3.\n## \ubaa8\ub378\uc815\uc758\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5)  # \ud83d\udc9b\ud83d\udc9b\n## \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n## \uac80\uc99d\nprint('RandomForestClassifier: ', round(model.score(X_val, y_val)*100, 2))\n\n# 4.\n## \ubaa8\ub378\uc815\uc758\nmodel = KNeighborsClassifier()  \n## \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n## \uac80\uc99d\nprint('KNeighborsClassifier: ', round(model.score(X_val, y_val)*100, 2))\n\n# 5.\n## \ubaa8\ub378\uc815\uc758\nmodel = XGBClassifier()  \n## \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n## \uac80\uc99d\nprint('XGBClassifier: ', round(model.score(X_val, y_val)*100, 2))\n\n# 6.\n## \ubaa8\ub378\uc815\uc758\nmodel = SVC()  \n## \ud559\uc2b5\nmodel.fit(X_tr, y_tr)\n## \uac80\uc99d\nprint('SVC: ', round(model.score(X_val, y_val)*100, 2))\n\n\n# \ucd5c\uc885 \ubaa8\ub378 \uc120\uc815\n# >> RandomForestClassifier\uc758 score\uac00 \uac00\uc7a5 \ub192\uc74c (69.89)\n\n### \ubaa8\ub378\uc815\uc758\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5)\n\n## \ud559\uc2b5 (X_train, y_train['target']) \ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\nmodel.fit(X_train, y_train['Reached.on.Time_Y.N']) \n\n## \uc608\uce21 (X_test) \ud83d\udc9b\ud83d\udc9b\ud83d\udc9b\npred = model.predict(X_test)\nprint('\uc608\uce21\uac12 pred:', pred)\n# print('y_test: ', y_test)\n\n######################       csv \uc0dd\uc131 \ubc0f \ud655\uc778     ######################\n# \uacb0\uacfc \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30\noutput = pd.DataFrame({'ID': y_test['ID'],  # \ud83d\udc9b\ud83d\udc9b\n                       'Reached.on.Time_Y.N': pred})\n# print('output:\\n', output.head())\n\n# csv \uc0dd\uc131\noutput.to_csv('20211203.csv', index=False)  # \ud83d\udc9bindex=False\ud83d\udc9b\n\n# csv \ud655\uc778\nprint('csv \ud655\uc778:\\n', pd.read_csv('20211203.csv'))\n\ncheck = pd.read_csv('20211203.csv')\nprint(check['Reached.on.Time_Y.N'].value_counts())\n\n######################            \uac00\ucc44\uc810         ######################\nprint('\uac00\ucc44\uc810: ', round(model.score(X_test, y_test['Reached.on.Time_Y.N'])*100,2))","367d1957":"###################### \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 ######################\n######################             EDA           ######################\n######################         \ub370\uc774\ud130 \uc804\ucc98\ub9ac       ######################\n######################        \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1      ######################\n################  \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14  ##################\n######################       csv \uc0dd\uc131 \ubc0f \ud655\uc778     ######################\n######################            \uac00\ucc44\uc810         ######################","d728959f":"## [\ucc38\uace0]\uc791\uc5c5\ud6152 \ubb38\uad6c\n- \ucd9c\ub825\uc744 \uc6d0\ud558\uc2e4 \uacbd\uc6b0 print() \ud568\uc218 \ud65c\uc6a9\n- \uc608\uc2dc) print(df.head())\n- getcwd(), chdir() \ub4f1 \uc791\uc5c5 \ud3f4\ub354 \uc124\uc815 \ubd88\ud544\uc694\n- \ud30c\uc77c \uacbd\ub85c \uc0c1 \ub0b4\ubd80 \ub4dc\ub77c\uc774\ube0c \uacbd\ub85c(C: \ub4f1) \uc811\uadfc \ubd88\uac00\n\n### \ub370\uc774\ud130 \ud30c\uc77c \uc77d\uae30 \uc608\uc81c\n- import pandas as pd\n- X_test = pd.read_csv(\"data\/X_test.csv\")\n- X_train = pd.read_csv(\"data\/X_train.csv\")\n- y_train = pd.read_csv(\"data\/y_train.csv\")\n\n### \uc0ac\uc6a9\uc790 \ucf54\ub529\n\n### \ub2f5\uc548 \uc81c\ucd9c \ucc38\uace0\n- \uc544\ub798 \ucf54\ub4dc \uc608\uce21\ubcc0\uc218\uc640 \uc218\ud5d8\ubc88\ud638\ub97c \uac1c\uc778\ubcc4\ub85c \ubcc0\uacbd\ud558\uc5ec \ud65c\uc6a9\n- pd.DataFrame({'cust_id': X_test.cust_id, 'gender': pred}).to_csv('003000000.csv', index=False)","23316f07":"## \ubaa8\ub378 \ubc0f \ud3c9\uac00","3c693084":"## \uacb0\uacfc \ucc44\uc810","109a8542":"### \ubc94\uc8fc\ud615 \ubcc0\uc218\ub97c \uc218\uce58\ud615\uc73c\ub85c \ubcc0\ud658","22696147":"# \ud83d\udc93\ud83d\udc28 \uc5f0\uc2b5_01 \ud83d\udc28\ud83d\udc93","90144cc8":"## \ub77c\uc774\ube0c\ub7ec\ub9ac \ubc0f \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","432a36ed":"#### => AUC score\ub85c \ubd24\uc744\ub54c, RandomForestClassifier\uac00 \uac00\uc7a5 \uc131\ub2a5\uc774 \uc88b\uc74c","69199d2e":"## \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14","95b753aa":"## \ub370\uc774\ud130 \uc804\ucc98\ub9ac","75ccbd64":"## \ubaa8\ub378 \uc120\ud0dd \ubc0f \uacb0\uacfc \ucd9c\ub825","7dc0660d":"### \uac01 \ubaa8\ub378 \uc131\ub2a5 \uac80\uc99d","c46eb337":"# EDA","f3a7c514":"## EDA","55f6811e":"## \uacb0\uacfc \uccb4\uc810 (\uc218\ud5d8\uc790\ub294 \uc54c \uc218 \uc5c6\ub294 \ubd80\ubd84\uc784)","46148218":"# \ud83d\udca5\ud83d\udca5\ud83d\udca5 \ud480\uc774 (Baseline)\ud83d\udca5\ud83d\udca5\ud83d\udca5 \n- \uc544\ub798\ucf54\ub4dc\ub294 \uc815\ub2f5\uc774 \uc544\ub2cc \ud480\uc774 \uc608\uc2dc\uc785\ub2c8\ub2e4.","f1112d57":"# \ud83d\udca5\ud83d\udca5\ud83d\udca5 \ud480\uc774_ver02 \ud83d\udca5\ud83d\udca5\ud83d\udca5 ","65f57736":"# \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","71f80a1c":"# \ub370\uc774\ud130 \uc804\ucc98\ub9ac","a4f2c6ea":"## \uc804\uc790\uc0c1\uac70\ub798 \ubc30\uc1a1 \ub370\uc774\ud130\n### \uc81c\ud488 \ubc30\uc1a1 \uc2dc\uac04\uc5d0 \ub9de\ucdb0 \ubc30\uc1a1\ub418\uc5c8\ub294\uc9c0 \uc608\uce21\ubaa8\ub378 \ub9cc\ub4e4\uae30\n\ud559\uc2b5\uc6a9 \ub370\uc774\ud130 (X_train, y_train)\uc744 \uc774\uc6a9\ud558\uc5ec \ubc30\uc1a1 \uc608\uce21 \ubaa8\ud615\uc744 \ub9cc\ub4e0 \ud6c4, \uc774\ub97c \ud3c9\uac00\uc6a9 \ub370\uc774\ud130(X_test)\uc5d0 \uc801\uc6a9\ud558\uc5ec \uc5bb\uc740 \uc608\uce21\uac12\uc744 \ub2e4\uc74c\uacfc \uac19\uc740 \ud615\uc2dd\uc758 CSV\ud30c\uc77c\ub85c \uc0dd\uc131\ud558\uc2dc\uc624(\uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 ROC-AUC \ud3c9\uac00\uc9c0\ud45c\uc5d0 \ub530\ub77c \ucc44\uc810)\n\n![image.png](attachment:f70c3a4b-9984-4656-af95-dac047a900cb.png)\n\n[\uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b \ub9cc\ub4e4\uae30] \ucf54\ub4dc\ub294 \uc608\uc2dc\ubb38\uc81c\uc640 \ub3d9\uc77c\ud55c \ud615\ud0dc\uc758 X_train, y_train, X_test \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uae30 \uc704\ud568\uc784\n\n(\uc720\uc758\uc0ac\ud56d)\n- \uc131\ub2a5\uc774 \uc6b0\uc218\ud55c \uc608\uce21\ubaa8\ud615\uc744 \uad6c\ucd95\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc801\uc808\ud55c \ub370\uc774\ud130 \uc804\ucc98\ub9ac, \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1, \ubd84\ub958\uc54c\uace0\ub9ac\uc998, \ud558\uc774\ud37c\ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd, \ubaa8\ud615 \uc559\uc0c1\ube14 \ub4f1\uc774 \uc218\ubc18\ub418\uc5b4\uc57c \ud55c\ub2e4.\n- \uc218\ud5d8\ubc88\ud638.csv\ud30c\uc77c\uc774 \ub9cc\ub4e4\uc5b4\uc9c0\ub3c4\ub85d \ucf54\ub4dc\ub97c \uc81c\ucd9c\ud55c\ub2e4.\n- \uc81c\ucd9c\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 ROC-AUC\ud615\ud0dc\ub85c \uc77d\uc5b4\ub4dc\ub9b0\ub2e4.","1e0dd366":"## \ud53c\ucc98 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","3bd91874":"## \ucd5c\uc885 \ubaa8\ub378 \uc120\uc815\ud83d\ude09\n### -> KNeighborsClassifier \ubaa8\ub378\uc758 score\uac00 65.97\ub85c \uac00\uc7a5 \ub192\uc74c","2ee68afc":"## EDA","6710d6d6":"# \ubaa8\ub378\ub9c1 & \ud558\uc774\ud37c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & \uc559\uc0c1\ube14","7fafd119":"# \ub77c\uc774\ube0c\ub7ec\ub9ac & \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30","e75ce892":"## \u2754\u2753 \uc81c\ud488 \ubc30\uc1a1 \uc2dc\uac04\uc5d0 \ub9de\ucdb0 \ubc30\uc1a1\ub418\uc5c8\ub294\uc9c0 \uc608\uce21\ubaa8\ub378 \ub9cc\ub4e4\uae30","99e99cc4":"### \uc815\uaddc\ud654","c63df0e4":"# \ud83d\udc93\ud83d\udc28 \uc5f0\uc2b5_02 \ud83d\udc28\ud83d\udc93","1c112aaa":"## csv \uc0dd\uc131 \ubc0f \ud655\uc778"}}