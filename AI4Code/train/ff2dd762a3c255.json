{"cell_type":{"87cad63f":"code","739da0a9":"code","46859e1f":"code","85e7e404":"code","cf8fc32b":"code","539a08e5":"code","0e694a2d":"code","f0bdc9f1":"code","b3e6e689":"code","f5f90887":"code","77cbf77c":"code","cf5672d1":"code","3116b6bd":"code","07bf6c76":"code","d531f891":"code","e384c441":"code","36373fa7":"code","97f4e5fb":"code","1db8952f":"code","43ae5d0b":"code","1b1a76bf":"code","51458170":"code","6e084797":"code","180ad39d":"code","884c8f96":"code","c98084aa":"code","a4381fb9":"code","3a93ab97":"code","9efb1d5a":"code","255f0c52":"code","b6a048b2":"code","84a10fc6":"code","ae11ffc1":"code","356e1252":"code","79661f42":"code","cd7ff361":"code","0cfcdbfb":"code","b567a0b1":"code","a47f1555":"code","6431418a":"code","a4def9c8":"code","8d638579":"code","faa1b64c":"code","730dd421":"markdown","8c6c7dfc":"markdown","11251ecf":"markdown","43178637":"markdown","7afbb289":"markdown"},"source":{"87cad63f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nprint(os.listdir(\"..\/input\"))\n\n\n# Any results you write to the current directory are saved as output.","739da0a9":"df=pd.read_csv('..\/input\/planecrashinfo_20181121001952.csv')\ndf.head()","46859e1f":"# FIrst thing lets see with the first column \ndf['Crash Year']= df['date'].str.split(',').str[1]\n","85e7e404":"q= df['Crash Year'].value_counts()","cf8fc32b":"df['Crash Year'].value_counts().tail(10)","539a08e5":"x=q.index\ny=q.values\nsns.set(style=\"whitegrid\")\n\n\nplt.figure(figsize=(28,8))\nax = sns.barplot(x=x, y=y)\nax.set_title('Year wise distribution of plane crashes')\nplt.xticks(rotation=55)\nplt.show()","0e694a2d":"df['Crash Month']=df['date'].str.split(' ').str[0]","f0bdc9f1":"print(\"Percent accident based on month\") \ndf['Crash Month'].value_counts(normalize=True)*100","b3e6e689":"x=df['Crash Month'].value_counts().index\ny=df['Crash Month'].value_counts().values\nsns.set(style=\"whitegrid\")\nplt.figure(figsize=(20,8))\nax = sns.barplot(x=x, y=y)\nax.set_title('Moth wise distribution of crashes.')\nplt.xticks(rotation=55)\nplt.show()","f5f90887":"df['time'].value_counts()","77cbf77c":"df['time']=df['time'].replace(['C ','Z','d ', 'c '], '', regex=True)","cf5672d1":"# Will work with time later .. a little complex cleaning is required","3116b6bd":"# Now I will work on what kind of Plane it was \nnew= df['operator'].str.split(\"-\", n = 1, expand = True)\ndf['Operator_type']=new[0]","07bf6c76":"df['Operator_type'].value_counts()","d531f891":"#I am recategorising them to military and non military planes based on text split. \n \ndf['Operator_types']= np.where(df['Operator_type']=='Military ', 'Military', 'Non-Military\/Personal')","e384c441":"df['Operator_types'].value_counts()","36373fa7":"# pie chart of workers\nfig = plt.figure(figsize=(6,6), dpi=100)\nax = plt.subplot(111)\n\ndf['Operator_types'].value_counts().plot(kind='pie', ax=ax, autopct='%1.1f%%', startangle=270, fontsize=12)\nplt.show()\n","97f4e5fb":"#Activities and rout seems to be combined together so I am now cleaning the rout column \ndf['route'].value_counts()","1db8952f":"# replacing ? to unknown to \ndf['route']=np.where(df['route']=='?', 'Unknown Route',df['route'])","43ae5d0b":"#List of activities involved other than moving from point a to b\nl=df['route'].value_counts()\nl[~l.index.str.contains(r\"-\", case = False)]","1b1a76bf":"# I am taking the top activities and creating the graph. Ploting flight path will be overwellming\ndf['route_edited']= np.where(df['route'].isin(['Training','Sightseeing','Test flight','Test','Unknown Route']),df['route'], 'International flight Path\/ Othe activity')\n#df['route'].value_counts()[0:5,]\n","51458170":"#df['route_edited'].value_counts()\n\nx=df['route_edited'].value_counts().index\ny=df['route_edited'].value_counts().values\nsns.set(style=\"whitegrid\")\nplt.figure(figsize=(20,15))\nax = sns.barplot(x=x, y=y)\nax.set_title('Condition during accident')\nplt.xticks(rotation=55)\nplt.show()\n\n\n#df['route_edited'].plot(kind=\"barh\", color=sns.color_palette(\"deep\", 3))","6e084797":"df.head()","180ad39d":"df['ac_type'].value_counts()\n# it seems the first name is the company name so lets see which company had most death\n\n\n","884c8f96":"\n#There is one company whose name is split in 2 parts de Havilland\nk=df[df['ac_type'].str.contains(r\"de Havilland\", case = False)]\no=k['ac_type'].value_counts().index","c98084aa":"df['ac_type']= np.where(df['ac_type'].isin(o),'de_Havilland ', df['ac_type'])\n#df['ac_type']=np.where(df['ac_type'])\n","a4381fb9":"new= df['ac_type'].str.split(\" \", n = 1, expand = True)\ndf['ac_company']=new[0]","3a93ab97":"#df['ac_company']=new[0]\n#q=df['ac_company'].apply(lambda x: x.map(x.value_counts()))\n#df['ac_company'].where(df['ac_company'].apply(lambda x: x.map(x.value_counts()))>=2, \"other\")\n\n\n\ndf['ac_company']=df['ac_company'].where(df['ac_company'].replace(df['ac_company'].value_counts())>=10, \"Other\")\ndf['ac_company']=np.where(df['ac_company']=='?', 'Unknown Mf',df['ac_company'])","9efb1d5a":"sns.set(style=\"whitegrid\")\n\n# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(10, 25))\n\n# Plot the total crashes\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=df['ac_company'].value_counts().values, y=df['ac_company'].value_counts().index, label=\"Total\", color=\"b\")\n\n#ax.legend(ncol=2, loc=\"lower right\", frameon=True)\nax.set(xlabel=\"Manufacturing Company whose plane crashed\")\nsns.despine(left=True, bottom=True)","255f0c52":"df.head()","b6a048b2":"# Now we will work with casualties","84a10fc6":"new= df['aboard'].str.split(\" \", n = 1, expand = True)\ndf['Total_crew']=new[0]\ndf['Total_crew']=np.where(df['Total_crew']=='?',9999,df['Total_crew'])","ae11ffc1":"new= df['fatalities'].str.split(\" \", n = 1, expand = True)\ndf['Total_fatalities']=new[0]\ndf['Total_fatalities']=np.where(df['Total_fatalities']=='?',9999,df['Total_fatalities'])\n","356e1252":"df['Total_fatalities'].value_counts()\n","79661f42":"# If no wo crew and facultie are same well then its percent is 0 \ndf['Casualty_percent']=(pd.to_numeric(df['Total_crew'])- pd.to_numeric(df['Total_fatalities']))\/pd.to_numeric(df['Total_crew'])*100","cd7ff361":"df[['Casualty_percent','Total_crew','Total_fatalities']].head(20)","0cfcdbfb":"df['Casualty_percent']= np.where(df['Total_crew']==df['Total_fatalities'], 100,df['Casualty_percent'])\ndf['Casualty_percent']=round(df['Casualty_percent'],0) # Setting the decimal place to 0, helps in plotting","b567a0b1":"df[['Casualty_percent','Total_crew','Total_fatalities']].head(20)","a47f1555":"df['Casualty_percent'].value_counts()","6431418a":"# pie chart of workers\nfig = plt.figure(figsize=(20,20))\nax = plt.subplot(111)\n\n\n\ndf['Casualty_percent'].value_counts().plot(kind='pie', ax=ax, autopct='%1.f%%', startangle=200, \n                                           fontsize=10)\n\nplt.title('Casualty count in percent in airaccident ')\nplt.show()","a4def9c8":"df.head()","8d638579":"p=df.groupby(['Crash Year'])[[\"Casualty_percent\"]].mean()\np=p.reset_index()","faa1b64c":"x=p['Crash Year']\ny=p['Casualty_percent']\nsns.set(style=\"whitegrid\")\n\nplt.figure(figsize=(30,10))\nax = sns.barplot(x=x, y=y)\nax.set_title('% casualty over the years')\nplt.xticks(rotation=90)\nplt.show()","730dd421":"**December seems to be the month when most crashes take place. To be noted december should be the busiesrt month.**","8c6c7dfc":"\n# Since time has lot of garbage value I am leaving it for now. I would like if anyone can help me clean the time data with minimum effort..\nI will work on it later.\n","11251ecf":"# The chances of surviving a plane crash seems prity low.. SAD ","43178637":"# It clearly shows that the passenger safety has not improved over time as the distribution is same throughout","7afbb289":"** Data cleaning Before Ploting **"}}