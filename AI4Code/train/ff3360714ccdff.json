{"cell_type":{"04193df1":"code","15d9d3d1":"code","e8d8ba5c":"code","caed8920":"code","24581712":"code","0d7c6250":"code","83a172aa":"code","d7b16660":"code","d684e38c":"code","62381a62":"code","86077632":"code","3ccb0597":"code","cc7b4853":"code","107ed2c1":"code","9ffbe310":"markdown","a9d29615":"markdown","81b0792f":"markdown","22d981be":"markdown"},"source":{"04193df1":"import sys; print(sys.version)\nimport os; print(os.uname())\nimport sklearn; print(sklearn.__version__)\n\ndata_dir, output_dir = '..\/input', '.\/'\ndata_dir, output_dir","15d9d3d1":"for i in sorted(os.listdir(data_dir)):\n    print(i)","e8d8ba5c":"# Python libraries\n# Classic,data manipulation and linear algebra\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', None)\n\n# To draw pictures in jupyter notebook\n%matplotlib inline \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Ignore warning messages\n# import warnings\n# warnings.filterwarnings('ignore')","caed8920":"# Plots\nimport plotly.offline as py\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\npy.init_notebook_mode(connected=True)","24581712":"filename = os.path.join(data_dir, 'train.csv')\ntrain = pd.read_csv(filename)\nprint(train.info())\n# print(train.describe())\nprint(train.shape)\ntrain.head()","0d7c6250":"filename = os.path.join(data_dir, 'test.csv')\ntest = pd.read_csv(filename)\nprint(test.info())\n# print(test.describe())\nprint(test.shape)\ntest.head()","83a172aa":"def get_train_data():\n    filename = os.path.join(data_dir, 'train.csv')\n    train = pd.read_csv(filename, index_col=0)\n    X_train = train.iloc[:, 1:]\n    y_train = train['target']\n    return X_train, y_train\n\ndef get_test_data():\n    filename = os.path.join(data_dir, 'test.csv')\n    test = pd.read_csv(filename, index_col=0)\n    return test","d7b16660":"X_train0, y_train = get_train_data()\nprint(X_train0.shape)\n\nX_test0 = get_test_data()\nprint(X_test0.shape)\n\nX_train0.head()","d684e38c":"from sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom datetime import datetime\n\nscaler = StandardScaler()\nX_train = pd.DataFrame(scaler.fit_transform(X_train0), columns=X_train0.columns, index=X_train0.index)\nX_test = pd.DataFrame(scaler.transform(X_test0), columns=X_test0.columns, index=X_test0.index)\n\ndef plot_scores(c_range, scores, x_label='x'):\n    plt.plot(c_range, scores)\n    plt.xlabel(x_label)\n    plt.ylabel('score')\n    plt.show()\n\ndef scores_table(model, X, y, subtitle, n_splits=5):\n    scores = ['accuracy', 'roc_auc']\n    res = []\n    for sc in scores:\n        scores = cross_val_score(model, X, y, cv=n_splits, scoring=sc)\n        res.append(scores)\n    df = pd.DataFrame(res).T\n    df.loc['mean'] = df.mean()\n    df.loc['std'] = df.std()\n    df= df.rename(columns={0: 'accuracy', 1: 'roc_auc'})\n\n    trace = go.Table(\n        header = dict(values=['<b>Fold', '<b>Accuracy','<b>Roc auc'],\n                    line = dict(color='#7D7F80'),\n                    fill = dict(color='#a1c3d1'),\n                    align = ['center'],\n                    font = dict(size = 15)),\n        cells = dict(values=[(*[i+1 for i in range(n_splits)],'mean', 'std'),\n                           np.round(df['accuracy'],3),\n                           np.round(df['roc_auc'],3)],\n                   line = dict(color='#7D7F80'),\n                   fill = dict(color='#EDFAFF'),\n                   align = ['center'], font = dict(size = 15)))\n\n    layout = dict(width=800, height=400,\n                  title = '<b>Cross Validation - {0} folds<\/b><br>{1}'.format(n_splits, subtitle),\n                  font = dict(size = 15))\n    fig = dict(data=[trace], layout=layout)\n\n    py.iplot(fig, filename = 'styled_table')","62381a62":"# Find best hyperparameters (roc_auc)\nlog_clf = LogisticRegression(random_state=42)\nparam_grid = {\n    'class_weight' : ['balanced', None], \n    'penalty' : ['l2','l1'],  \n    'C' : [0.001, 0.01, 0.1, 1, 10, 100, 1000],\n    'solver' : ['liblinear', 'saga'],\n}\n# Solver newton-cg supports only l2 penalties\n# Solver lbfgs supports only l2 penalties\n# Solver sag supports only l2 penalties\n\ngrid = GridSearchCV(estimator=log_clf, cv=5, param_grid=param_grid,\n                    scoring='roc_auc', verbose=1, n_jobs=-1)\n\ngrid.fit(X_train, y_train)\n\nprint(\"Best Score: {0}\".format(grid.best_score_))\nprint(\"Best Parameters: {0}\".format(grid.best_params_))\n\nbest_parameters = grid.best_params_","86077632":"log_clf = LogisticRegression(**best_parameters)\nlog_clf.fit(X_train, y_train)\n\nselector = RFE(log_clf, 25, step=1)\nselector.fit(X_train, y_train)\nscores_table(selector, X_train, y_train, 'selector_clf', n_splits=10)","3ccb0597":"ranking = selector.ranking_.reshape([-1, 30])\n\n# Plot pixel ranking\nplt.matshow(ranking, cmap=plt.cm.Blues)\nplt.colorbar()\nplt.title(\"Ranking with RFE\")\nplt.show()","cc7b4853":"y_test = log_clf.predict_proba(X_test)","107ed2c1":"filename = os.path.join(data_dir, 'sample_submission.csv')\nsubmission = pd.read_csv(filename)\n\nfilename = os.path.join(output_dir, 'submission.csv')\nsubmission['target'] = y_test\nsubmission.to_csv('submission.csv', index=False)\n\nsubmission.head()","9ffbe310":"# Observe data","a9d29615":"# Load prepared data","81b0792f":"# Logistic Regression","22d981be":"# Importing"}}