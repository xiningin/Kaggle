{"cell_type":{"4e2dc900":"code","ffd6113d":"code","0de1184f":"code","ed0b5902":"code","8ec2ef18":"code","16d70767":"code","abadf6da":"code","4f36666b":"code","2cca0a4d":"code","2e37e56a":"code","bf3acf5c":"code","a2bb24c5":"code","b849729f":"code","0389556f":"code","79f443f2":"code","54da9d7c":"code","60fa5fa3":"code","396626c9":"code","aa5440fc":"code","8c564fa3":"code","42cd05fa":"markdown","b71f4c86":"markdown","85dd52bb":"markdown"},"source":{"4e2dc900":"# All the necessary libraries has imported\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer, SimpleImputer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, RepeatedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import (\n    confusion_matrix, plot_confusion_matrix, accuracy_score, precision_score,\n    recall_score, f1_score, plot_roc_curve, plot_precision_recall_curve, precision_recall_curve,\n    roc_auc_score\n)","ffd6113d":"# load and check train and test data\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","0de1184f":"# print\nprint(train.shape)\nprint(test.shape)","ed0b5902":"train.sample(5)","8ec2ef18":"X = train.drop(['Survived'], axis=1)\nY = train.Survived","16d70767":"print(X.shape)\nprint(Y.shape)","abadf6da":"X.sample(5)","4f36666b":"test.sample(5)","2cca0a4d":"# Number of total missing values in each column\ntrain.isnull().sum(axis=0)","2e37e56a":"# Percentage of missing values in each column\ntest.isnull().sum(axis=0)","bf3acf5c":"pipeline1 = ColumnTransformer([\n    ('drop', 'drop', ['PassengerId', 'Name', 'Cabin', 'Ticket']),\n    ('ageimputer', IterativeImputer(max_iter=10, random_state=27), ['Age', 'Fare']),\n    ('embarkedimputer', SimpleImputer(strategy='most_frequent'), ['Embarked'])],\n    remainder='passthrough'\n)\n\npipeline2 = ColumnTransformer([\n    ('scaler', MinMaxScaler(), [0, 1, 5, 6]),\n    ('onehot', OneHotEncoder(), [2, 3, 4])\n])\n\npipeline = make_pipeline(pipeline1, pipeline2)","a2bb24c5":"pipeline.fit(X)\nX_train = pipeline.transform(X)\nX_test = pipeline.transform(test)","b849729f":"pd.DataFrame(X_train).sample(5)","0389556f":"pd.DataFrame(X_test).sample(5)","79f443f2":"lr = LogisticRegression(penalty='none', verbose=2)\nrr = SGDClassifier(penalty='l2', n_jobs=4, loss='log')\nls = SGDClassifier(penalty='l1', n_jobs=4, loss='log')\nen = SGDClassifier(penalty='elasticnet', n_jobs=4, loss='log')","54da9d7c":"metrics.SCORERS.keys()","60fa5fa3":"cv = RepeatedKFold(n_splits=5, n_repeats=1, random_state=27)\n\ngrid_ridge_lasso = {\n    'alpha': np.arange(0, 1, 0.05),\n    'learning_rate': np.array(['constant']),\n    'eta0': np.array([0.1, 0.01, 0.001])\n}\n\ngrid_elastic = {\n    'alpha': np.arange(0, 1, 0.05),\n    'l1_ratio': np.arange(0, 1, 0.05),\n    'learning_rate': np.array(['constant']),\n    'eta0': np.array([0.1, 0.01, 0.001])\n}\n\nlr_score = cross_val_score(lr, X_train, Y, cv=cv, scoring='accuracy')\n\nrr_search = GridSearchCV(rr, grid_ridge_lasso, cv=cv, scoring='accuracy')\nrr_score = rr_search.fit(X_train, Y)\n\nls_search = GridSearchCV(ls, grid_ridge_lasso, cv=cv, scoring='accuracy')\nls_score = ls_search.fit(X_train, Y)\n\nen_search = GridSearchCV(en, grid_elastic, cv=cv, scoring='accuracy')\nen_score = en_search.fit(X_train, Y)","396626c9":"print(np.mean(lr_score))\nprint(rr_score.best_score_)\nprint(ls_score.best_score_)\nprint(en_score.best_score_)","aa5440fc":"predictions = en_score.best_estimator_.predict(X_test)","8c564fa3":"pd.DataFrame({\n    'PassengerId': test.PassengerId,\n    'Survived': predictions\n}).to_csv('\/kaggle\/working\/submission.csv', index=False)","42cd05fa":"# Shouman Barua Shuvo\n# ID: 181-35-2321","b71f4c86":"**Models**","85dd52bb":"**Pre-processing Pipeline**"}}