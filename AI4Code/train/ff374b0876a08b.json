{"cell_type":{"1c9279bb":"code","63d9cb22":"code","610e79dd":"code","1be2c6c5":"code","6dfb4e05":"code","f5b001e4":"code","183cb459":"code","20dc1ab7":"code","7bc54a59":"code","f98e0ec4":"code","9af354d9":"code","06faffee":"code","0d476d54":"code","c3d1a47e":"code","c9add573":"code","3ece70ec":"markdown","e1530512":"markdown","923a81f9":"markdown","8b858e42":"markdown","0e933005":"markdown","54df470b":"markdown","689a8696":"markdown","a34aedbf":"markdown","1d817070":"markdown","48b87af7":"markdown","3dad53aa":"markdown","7b040862":"markdown","132880b5":"markdown","93ecad2a":"markdown","aed120d4":"markdown","518276d7":"markdown","9af7c6fc":"markdown"},"source":{"1c9279bb":"from keras.datasets import cifar10","63d9cb22":"#import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras as kr\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import MaxPooling2D\nfrom tensorflow.keras.layers import Dense, Activation, Flatten\nfrom tensorflow.keras.optimizers import Adam","610e79dd":"#load cifer10 dataset and split it.\n(x_train, y_train), (x_test, y_test) = cifar10.load_data()","1be2c6c5":"#change train data and test data into float32 and divide by 255\n#That normalizes data from 1 to 0. \nx_train = x_train.astype('float32')\/255\ny_train = y_train.astype('float32')\nx_test = x_test.astype('float32')\/255\n","6dfb4e05":"#convert y_train and y_test into 10 categories\ny_train = kr.utils.to_categorical(y_train, 10)\ny_test  = kr.utils.to_categorical(y_test,10)","f5b001e4":"plt.figure(figsize=(8,8))\nfor i in range(10):\n    plt.subplot(5, 5, i+1)\n    plt.title(i)\n    plt.imshow(x_train[i].reshape(32,32,3))","183cb459":"#build 1st model\nmodel = Sequential()\nmodel.add(Conv2D(32,(3,3), activation='relu',padding='same', input_shape=x_train.shape[1:]))\nmodel.add(Conv2D(32,(3,3),padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(optimizer='adam',loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","20dc1ab7":"#model fitting\nresult1=model.fit(x_train, y_train,batch_size=128, epochs=20)","7bc54a59":"#Build 2nd model.\nmodel = Sequential()\nmodel.add(Conv2D(32,(3,3), activation='relu',padding='same', input_shape=x_train.shape[1:]))\nmodel.add(Conv2D(32,(3,3),padding='same', activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))\nmodel.compile(optimizer='rmsprop',loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()\n","f98e0ec4":"#model fitting\nresult2=model.fit(x_train, y_train,batch_size=128, epochs=20)","9af354d9":"#Evaluate the two models by using two metrics, loss and accuracy.\nmetrics = ['loss', 'accuracy']\n#show the evaluation result by using matoplot.\nplt.figure(figsize=(10, 5))\n#Use \"For Loop\".\nfor i in range(len(metrics)):\n    metric = metrics[i]\n    #set subplots to show the result\n    plt.subplot(1, 2, i+1)\n    #Titles of subplots are \"loss\" and \"accuracy\"\n    plt.title(metric) \n    plt_result1 = result1.history[metric] \n    plt_result2 = result2.history[metric]\n\n    #plot them all\n    plt.plot(plt_result1, label='1st model') \n    plt.plot(plt_result2, label='2nd model') \n    plt.legend() \nplt.show()","06faffee":"plt.imshow(x_test[[98]].reshape(32,32,3))","0d476d54":"#Let's predict.\nprediction=model.predict(x_test[[98]]) \nprediction","c3d1a47e":"names=[\"airplane\",\"automobile\",\"bird\",\"cat\",\"deer\",\"dog\",\"frog\",\"horse\",\"ship\",\"truck\"]\n#Preparation for this predction. \nlist1=[]\n[list1.append(i) for i in range(26)]\nlist2=[]\n[list2.append(i) for i in names]\ndic = dict(zip(list1, list2))\n#Let's check the result.\nprint(\"The answer is\",dic[np.argmax(prediction)],\"!\")","c9add573":"#Let's predict whole test data! \npredictions = model.predict(x_test)\nresults = np.argmax(predictions,axis=1)\nresults = pd.Series(results, name=\"Label\")\nresults.tail()","3ece70ec":"## 10. Let's fit 2nd CNN model with RMSprop optimizer. ","e1530512":"The 1st model is better.","923a81f9":"## 9. Let's build 2nd CNN model with RMSprop optimizer. ","8b858e42":"## 8. Let's fit 1st CNN model with Adam optimizer. ","0e933005":"## 2. import libraries","54df470b":"## 7. Let's build 1st CNN model with Adam optimizer.","689a8696":"Thanks for reading my notebook :-)","a34aedbf":"## 5. Convert y_train and y_test into 10 categories","1d817070":"## <font color=\"blue\">Let's enjoy Cifer-10 dataset and classification by using CNN deep learning tech.<font>\n    \n### What is Cifer-10?\n    CIFAR-10 is a dataset that consists of 60000 32x32 colour images in 10 classes like\n    \"airplane\",\"automobile\",\"bird\",\"cat\",\"deer\",\"dog\",\"frog\" .etc.\n    \n### What is CNN?\n    CNN stands for Convolutional Neural Network. CNN is a most commonly applied to analyze\n    visual imagery like this.","48b87af7":"<B>\"Correct!\"<B>","3dad53aa":"## 3. Split the dataset into x_train,y_train,x_test,y_test.","7b040862":"## 13. Let's predict whole test data! ","132880b5":"## 1. load dataset.","93ecad2a":"## 12. How to predict a single photo data?","aed120d4":"## 6. Let's show images of Cifer-10 images.","518276d7":"## 4. Change train data and test data into float32 and divide by 255.","9af7c6fc":"## 11. Evaluate the two models by using two metrics, loss and accuracy."}}