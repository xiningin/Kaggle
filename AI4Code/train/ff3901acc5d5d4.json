{"cell_type":{"a84b868c":"code","288bd3cc":"code","af31663c":"code","49bc4fd9":"code","52261c56":"code","4de95938":"code","aff2d56b":"code","5f5138db":"code","24635ae6":"code","930fcb71":"code","4cf8eb8e":"code","1d78663b":"code","0215c7dc":"code","b4d75663":"code","e099c0b5":"code","f7e45733":"code","e626f14f":"code","20fbf353":"code","8ec400a5":"code","162188e0":"code","9c1021cf":"code","072325f5":"code","f1512826":"code","7dddbcd5":"code","be9c6602":"code","862c1ac4":"code","c6772d71":"code","07a1d7cb":"code","f15bec38":"markdown","30717ffb":"markdown","22a52a3d":"markdown","3421edf3":"markdown","17cb1474":"markdown","b1a380e9":"markdown","d7e09bfa":"markdown","bcaf104f":"markdown"},"source":{"a84b868c":"import pandas as pd\nimport numpy as np\nimport os\nprint(os.listdir(\"..\/input\"))","288bd3cc":"data=pd.read_csv(\"..\/input\/heart.csv\")\ndata.head()","af31663c":"print(data.shape)","49bc4fd9":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    a = pd.concat([total], axis=1, keys=['Total'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    a['Types'] = types\n    return(np.transpose(a))","52261c56":"%%time\nmissing_data(data)","4de95938":"#descriptive analysis\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nf,ax=plt.subplots(1,2,figsize=(18,8))\ndata['target'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('target')\nax[0].set_ylabel('')\nsns.countplot('target',data=data,ax=ax[1])\nax[1].set_title('target')\nplt.show()","aff2d56b":"data[\"trestbps\"].hist();\n","5f5138db":"\nplt.boxplot(x=data.trestbps[data.target==1])","24635ae6":"data[\"thalach\"].hist();","930fcb71":"data[\"chol\"].hist();","4cf8eb8e":"plt.boxplot(x=data.chol[data.target==1])","1d78663b":"data['sex'].value_counts().plot.bar();","0215c7dc":"pd.crosstab(data.sex,data.target).plot(kind=\"bar\",figsize=(15,6))\nplt.title('Heart Disease Frequency for Sex')\nplt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.xticks(rotation=0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency')\nplt.show()","b4d75663":"data['fbs'].value_counts().plot.bar();","e099c0b5":"pd.crosstab(data.fbs,data.target).plot(kind=\"bar\",figsize=(15,6))\nplt.title('Heart Disease Frequency According To FBS')\nplt.xlabel('FBS - (Fasting Blood Sugar > 120 mg\/dl) (1 = true; 0 = false)')\nplt.xticks(rotation = 0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","f7e45733":"data[\"age\"].hist();","e626f14f":"plt.scatter(x=data.age[data.target==1], y=data.thalach[(data.target==1)], c=\"red\")\nplt.scatter(x=data.age[data.target==0], y=data.thalach[(data.target==0)])\nplt.legend([\"Disease\", \"Not Disease\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","20fbf353":"a=pd.get_dummies(data['sex'], prefix = \"cp\")\nb=pd.get_dummies(data['cp'], prefix = \"cp\")\nc=pd.get_dummies(data['thal'], prefix = \"thal\")\nd=pd.get_dummies(data['slope'], prefix = \"slope\")","8ec400a5":"frames = [data, a, b, c,d]\ndata = pd.concat(frames, axis = 1)\ndata.head()","162188e0":"#remove existing categorical variable.(dummy variables are there)\ndata = data.drop(columns = ['sex','cp', 'thal', 'slope'])\ndata.head()","9c1021cf":"#seperating predictor & response variable\ny = data.target.values\nx = data.drop(['target'], axis = 1)\n","072325f5":"#spliting train and test data\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)","f1512826":"#Random forest classifier\nfrom sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=20000, max_depth=5, random_state=0)\nclf.fit(x_train,y_train)","7dddbcd5":"y_pred = clf.predict(x_test)","be9c6602":"# Model Accuracy\nfrom sklearn import metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","862c1ac4":"#Gradient boosting classifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nmodel = GradientBoostingClassifier(n_estimators=100,max_depth=3,learning_rate=0.5,random_state=0)\nmodel.fit(x_train, y_train)","c6772d71":"y_pre = model.predict(x_test)","07a1d7cb":"# Model Accuracy\nfrom sklearn import metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pre))","f15bec38":"No missing values in this dataset.","30717ffb":"According to this sample, most of the people have heart disease.\nAnd also this is not the bias sample because the presentage of have disease or not is approximatly equal.","22a52a3d":"Distribution of chol when the patients have heart disease.","3421edf3":"dummy the categorical variable","17cb1474":"Distribution of gender.","b1a380e9":"Final accuracy of the model is 81%","d7e09bfa":"Final accuracy of random forest model is 88.52%","bcaf104f":"Distribution of trestbps when the patients have heart disease."}}