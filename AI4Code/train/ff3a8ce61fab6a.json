{"cell_type":{"056d1bc5":"code","08a73d48":"code","7e5c94f1":"code","e7b50e4d":"code","2a927902":"code","10ce0b9c":"code","b82bde27":"code","d448466b":"code","980361d0":"code","22cd6bb9":"code","0efd9a96":"code","99020303":"code","aff002b6":"code","35b03407":"code","1d07400b":"code","7a8a20ec":"code","2377a439":"code","a3c9cc9b":"code","1c0b1f31":"code","e0d6de45":"code","24804851":"code","2f893316":"code","e0c759af":"code","fd257812":"code","8dbddf65":"code","78a962f4":"code","5e6c1dff":"code","e8391e0b":"code","0992147c":"code","51a87c93":"markdown","50f148b6":"markdown","d125db95":"markdown","b3ed5d25":"markdown","37fd8a1b":"markdown","ad1d7b4c":"markdown","b7b8d6de":"markdown","5410b7ef":"markdown","b2c2bca1":"markdown","c7b5fc79":"markdown","9e1e6b05":"markdown","6648fab5":"markdown","fad47d53":"markdown","7f2b292a":"markdown","e3591beb":"markdown","230b2b9e":"markdown","c45d9e4f":"markdown","ba1cff48":"markdown","ab20f02e":"markdown","b6b35fb7":"markdown","237bbc52":"markdown","6a37454e":"markdown","1d672e4f":"markdown","fb991ecb":"markdown","22a99fe7":"markdown","280d50d3":"markdown","2da0ba4d":"markdown","c0499e8c":"markdown","7227ff7f":"markdown","f2a5f291":"markdown","16a5e4d6":"markdown","ae311ff9":"markdown","c78481ec":"markdown","a05586d8":"markdown","ca5139ba":"markdown"},"source":{"056d1bc5":"#import tensorflow\nimport tensorflow as tf\n\n#Becuse tensorflow 2.1.0 enable eager_execution by defulte\n#We must disable it to can use session\n#We will know about eager_execution later\n\ntf.compat.v1.disable_eager_execution()\n\n#print tensorflow version\nprint(\"tensorflow version : \",tf.__version__)","08a73d48":"#Define session \nsession =  tf.compat.v1.Session()\n\n#Define pi constant = 3.14\npi = tf.constant(3.14)\n\n#Print value of it using session\nprint(\"pi = \",session.run(pi))\n\n#Close session\nsession.close()","7e5c94f1":"print(pi)","e7b50e4d":"pi = tf.constant(3.14)\nwith tf.compat.v1.Session() as sess : \n    print(sess.run(pi))\n","2a927902":"a = tf.constant(3)\nb = tf.constant(3,tf.float32)\nc = tf.constant([2,5,6,9,6])\nd = tf.constant([[2,5,6],\n                 [8,5,8],\n                 [8,8,1]])\ne = tf.constant('I love TensorFlow')\n\nwith tf.compat.v1.Session() as sess : \n    print(sess.run(a))\n    print(sess.run(b))\n    print(sess.run(c))\n    print(sess.run(d))\n    print(sess.run(e))\n","10ce0b9c":"a = tf.Variable(3)\nb = tf.Variable(3,tf.float32)\nc = tf.Variable([2,5,6,9,6])\nd = tf.Variable([[2,5,6],[8,5,8], [8,8,1]])\ne = tf.Variable('I love TensorFlow')\n\nwith tf.compat.v1.Session() as sess :\n    sess.run(tf.compat.v1.global_variables_initializer())\n    print(sess.run(a))\n    print(sess.run(b))\n    print(sess.run(c))\n    print(sess.run(d))\n    print(sess.run(e))\n","b82bde27":"session = tf.compat.v1.Session()\n\npizza = tf.Variable(45.5)\njuice = tf.Variable(7.25)\ntomatos = tf.Variable(5)\n\nsession.run(tf.compat.v1.global_variables_initializer())\n\nprint('pizza price   = ',session.run(pizza))\nprint('juice price   = ',session.run(juice))\nprint('tomatos price = ',session.run(tomatos))\n\nsession.close()","d448466b":"session = tf.compat.v1.Session()\n\n#Change variable value using = operator \nx = tf.Variable(5)\nsession.run(tf.compat.v1.global_variables_initializer())\nprint(\"x before change = \",session.run(x))\n\nx = tf.Variable(10)\nsession.run(tf.compat.v1.global_variables_initializer())\nprint(\"x after change = \",session.run(x))\n\n#Change variable value using assign keyord\n#variableName = tf.compat.v1.assign(variableName,newValue)\n\nx = tf.compat.v1.assign(x,20)\nprint(\"x after change using assign = \",session.run(x))","980361d0":"for i in range(5):\n    x = tf.compat.v1.assign(x,x+10)\n    print(\"x = \",session.run(x))\n    \nsession.close()    ","22cd6bb9":"session = tf.compat.v1.Session()\n\n#intialize constant = 2\ntwo = tf.constant(2.0)\n\n#intialize constant = 3.14\npi = tf.constant(3.14)\n\n#intialize placeholder r\nr  = tf.compat.v1.placeholder(tf.float32)\n\n#intialize two_pi variable = 2.0*3.14\ntwo_pi = two*pi\n\n#equation = 2\u03c0r\nc = two_pi*r\n\n#Note : we use feed_dict argument to set palceholders variables \n\nwith tf.compat.v1.Session() as sess : \n    result = session.run(c , feed_dict ={r:[1,2,3,4,5]})\n    print(result)\n\n","0efd9a96":"session = tf.compat.v1.Session()\n\n#intialize constant = 2\ntwo = tf.constant(2.0)\n\n#intialize constant = 3.14\npi = tf.constant(3.14)\n\n#intialize placeholder r\nr  = tf.compat.v1.placeholder(tf.float32)\n\n#intialize two_pi variable = 2.0*3.14\ntwo_pi = two*pi\n\n#equation = 2\u03c0r\nc = two_pi*r\n\n#Note : we use feed_dict argument to set palceholders variables \nresult = session.run(c, feed_dict = {r:[1,2,3,4,5]})\nprint(result)\n\nsession.close()","99020303":"session = tf.compat.v1.Session()\n\nx = tf.compat.v1.placeholder(tf.float32)\ny = tf.compat.v1.placeholder(tf.float32)\n\neq = x**2 + y**0.5 \n\n#Note : we can set palceholders variables in dictionry without use feed_dict keyword \nresult = session.run(eq , {x:[5,2],y:[25,4]})\nprint(result)\n\nsession.close()","aff002b6":"import matplotlib.pyplot as plt\n%matplotlib inline\nsession = tf.compat.v1.Session()\n\nw = tf.constant(5.0)\nX = tf.compat.v1.placeholder(tf.float32)\nb = tf.constant(2.0)\n\ny = w*X + b\nXval = list(range(0,10))\n\nprint(\"X values : \",Xval)\n\nresult = session.run(y, feed_dict = {X:Xval})\nprint(\"y values : \",result)\n\nplt.style.use('fivethirtyeight')\nplt.plot(Xval,result,marker='o', markersize = 7,linewidth=3)\nplt.show()\n\nsession.close()","35b03407":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(5.0)\nnum2 = tf.constant(10.5)\nresult = tf.add(num1,num2)\n\nprint(session.run(num1),' + ',session.run(num2),' = ',session.run(result))\n\nsession.close()","1d07400b":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(5)\nnum2 = tf.constant([1,2,3,4,5])\nresult = tf.add(num1,num2)\n\nprint(session.run(num1),' + ',session.run(num2),' = ',session.run(result))\n\nsession.close()","7a8a20ec":"session = tf.compat.v1.Session()\n\nstr1 = tf.constant('Hellow')\nstr2 = tf.constant(' World')\nresult = tf.add(str1,str2)\n\nprint(session.run(str1),' + ',session.run(str2),' = ',session.run(result))\n\nsession.close()","2377a439":"session = tf.compat.v1.Session()\n\nstr1 = tf.constant('Hellow')\nstr2 = tf.constant([' World',' Python',' Machine Learning'])\nresult = tf.add(str1,str2)\n\nprint(session.run(str1),' + ',session.run(str2),' = ',session.run(result))\n\nsession.close()","a3c9cc9b":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(5)\nnum2 = tf.constant(10)\nresult = tf.multiply(num1,num2)\n\nprint(session.run(num1),' x ',session.run(num2),' = ',session.run(result))\n\nsession.close()","1c0b1f31":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(-5.25)\nnum2 = tf.constant(10.15)\nresult = tf.multiply(num1,num2)\n\nprint(session.run(num1),' x ',session.run(num2),' = ',session.run(result))\n\nsession.close()","e0d6de45":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(5)\nnum2 = tf.constant(10)\nresult = tf.subtract(num1,num2)\n\nprint(session.run(num1),' - ',session.run(num2),' = ',session.run(result))\n\nsession.close()","24804851":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(-5.25)\nnum2 = tf.constant(10.15)\nresult = tf.multiply(num1,num2)\n\nprint(session.run(num1),' x ',session.run(num2),' = ',session.run(result))\n\nsession.close()","2f893316":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(25)\nnum2 = tf.constant(10)\nresult = tf.divide(num1,num2)\n\nprint(session.run(num1),' \/ ',session.run(num2),' = ',session.run(result))\n\nsession.close()","e0c759af":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(-25.25)\nnum2 = tf.constant(10.0)\nresult = tf.divide(num1,num2)\n\nprint(session.run(num1),' \/ ',session.run(num2),' = ',session.run(result))\n\nsession.close()","fd257812":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(2)\nnum2 = tf.constant(10)\nresult = tf.pow(num1,num2)\n\nprint(session.run(num1),'^',session.run(num2),' = ',session.run(result))\n\nsession.close()","8dbddf65":"session = tf.compat.v1.Session()\n\nnum1 = tf.constant(-5.0)\nnum2 = tf.constant(3.0)\nresult = tf.pow(num1,num2)\n\nprint(session.run(num1),'^',session.run(num2),' = ',session.run(result))\n\nsession.close()","78a962f4":"session = tf.compat.v1.Session()\n\n# matrix size = 3x3\nmatrix1 = tf.constant([[1.0,2.0,3.0],\n                       [4.0,5.0,6.0],\n                       [7.0,8.0,9.0]])\n# matrix size = 3x2\nmatrix2 = tf.constant([[1.0,2.0],\n                       [3.0,4.0],\n                       [5.0,6.0]])\n\n# result will be matrix has size = 3x2\nresult = tf.matmul(matrix1,matrix2)\n\nprint(session.run(matrix1))\nprint('x')\nprint(session.run(matrix2))\nprint('=')\nprint(session.run(result))\n\nsession.close()","5e6c1dff":"session = tf.compat.v1.Session()\n\n# matrix size = 3x3\nmatrix1 = tf.constant([[1.04,2.20,3.40],\n                       [4.10,5.01,6.20],\n                       [7.051,8.0,9.10]])\n# matrix size = 3x2\nmatrix2 = tf.constant([[1,2],\n                       [3,4.0],\n                       [5,6]])\n\n# result will be matrix has size = 3x2\nresult = tf.matmul(matrix1,matrix2)\n\nprint(session.run(matrix1))\nprint('x')\nprint(session.run(matrix2))\nprint('=')\nprint(session.run(result))\n\nsession.close()","e8391e0b":"session = tf.compat.v1.Session()\n\n# matrix size = 3x3\nmatrix = tf.constant([[1.0,2.0,3.0],\n                       [4.0,5.0,6.0],\n                       [7.0,8.0,9.0]])\n# matrix size = 3x3\nmatrixTransport = tf.compat.v1.matrix_transpose(matrix)\n\n# result will be matrix has size = 3x3\nresult = tf.matmul(matrix,matrixTransport)\n\nprint('original matrix')\nprint(session.run(matrix))\nprint('-------------------------------')\n\nprint('transport matrix')\nprint(session.run(matrixTransport))\nprint('-------------------------------')\n\nprint('original matrix x transport matrix : ')\nprint(session.run(result))\n\nsession.close()","0992147c":"graph = tf.compat.v1.get_default_graph()\nfor operation in graph.get_operations():\n    print(operation.name)","51a87c93":"We will go through this Nootebook via following items \ud83d\udc47\n\n1. TensorFlow Overview\n2. Session\n3. Constants\n4. Variables\n5. Placeholders\n6. Operations\n7. Graph","50f148b6":"<hr>\n<div>\n    \ud83d\udd3a <b>Alert<\/b><br><br>\n    <b>datatype equavilant<\/b> which we talk about it at first                 <b>alert<\/b> \u261d has same importance when we use <b>matmul<\/b> function.\n    But \u270b you must know following two case <br> \n    <ol>\n        <li>one matrix has compination datatype as float and int<\/li>\n        <li>one matrix has same datatype as float or int<\/li>\n    <\/ol>\n    At first case if this matrix multiplay by other matrix has same           datatype as float or int you will not have error.<br><br>\n    This we see it in <b>Exampel 2<\/b> when first matrix has same float       datatype and second has compination float at 4.0 and int at other numbers.\n    <br><br>\n    At second case if this matrix multiplay by other matrix has same           datatype and this datatype different from datatype of it you will get     error.\n    <br><br>\n    You can try this case at <b>Exampel 2<\/b> by change 4.0 at second         matrix which stored in <b>matrix2<\/b> constant to 4.  \n    \n<\/div>\n\n\n\n<p>\n    Let's talk about <b>matrix_transpose<\/b> function  We can use it to     get a value of <b>Matrix transport.<\/b>\n<\/p>\n<h2>Matrix transport [......] <sup>T<\/sup><\/h2>\n<hr>\n\n### Exampel ","d125db95":"# Hello everyone in this kenel we will learn together Tensorflow and Tensorflow tools","b3ed5d25":"<hr>\n\n# 7. Graph\n\n<p>\n    We can consider <b>graph<\/b> as a history that contain all operations\n    we do it through our code.\n<\/p>","37fd8a1b":"\n# 1. tensorflow Overview\n<br>\n\ntensorflow is consist of two words \u27a1 tensor \u2795 flow.<br><br>\n**Tensor :** refer to a matrix of numbers consist of (nxn) dimensions.<br>\n**Flow :** refer to graph that contain computational operations on tensors.<br>\n\n<div>\n    <img src='https:\/\/miro.medium.com\/max\/1594\/1*EHugUlJHdFnUecICP8DM9Q.png' style=\"float:left\">\n<\/div>\n<div style=\"clear:both\"><\/div>\n<br><br>\nAs we said that **graph** contain all computational operations on tensors for this graph consist of two elements.<br><br>\n\n**Edges :** refere to data flow or tensors. <br>\n**Nodes :** refere to computational operations.<br><br>\n\n<div>\n    <img src='https:\/\/static.packt-cdn.com\/products\/9781786468574\/graphics\/image_01_006.jpg' width= 400 style=\"float:left\">\n<\/div>\n<div style=\"clear:both\"><\/div>\n\n<br>\n\nThere is important term called **Rank** that refere to dimensions of data into tensors. let's see \ud83d\udc47<br>\n\n* Rank 0 : refer to tensor that contain singel value.\n* Rank 1 : refer to tensor that contain a vector (1x1) dimension\n* Rank 2 : refer to tensor that contain a 2D matrix\n* Rank 3 : refer to tensor that contain a 3D matrix\n* Rank n : refer to tensor that contain a nD matrix\n\n<div>\n    <img src='https:\/\/miro.medium.com\/max\/1000\/0*jGB1CGQ9HdeUwlgB' style=\"float:left\">\n<\/div>\n<div style=\"clear:both\"><\/div>\n\n<hr>\n\n\n# 2.  Session\n\n<p>A session allows to execute graphs or part of graphs.<br>\nIt allocates resources for that and holds the actual values of intermediate results and variables.<\/p>\n\n<div>\n    <img src='https:\/\/www.easy-tensorflow.com\/files\/1_1.gif' style=\"float:left\">\n<\/div>\n<div style=\"clear:both\"><\/div>\n\n**So taht we can say that Session is a framework that combine edges and nodes.**\n<br>\n\nThere is other image that show session content.\n\n<div>\n    <img src='https:\/\/miro.medium.com\/max\/2994\/1*vPb9E0Yd1QUAD0oFmAgaOw.png' width= 500 style=\"float:left\">\n<\/div>\n\n<div style=\"clear:both\"><\/div><hr>\n\n","ad1d7b4c":"<hr>\n\nLet's know variable type.\n# 4. Variables\n\nWe can defiend our constants using **Variables** keyword.<br>\n\nWe must run the below \ud83d\udc47 code into session before using our variable by consider that session variable name is **session**.\n<br>\n\n<code>session.run(tf.compat.v1.global_variables_initializer())<\/code>\n\n## Exampel 1","b7b8d6de":"1. <hr>\n1. ### Exampel 2 ","5410b7ef":"<hr>\n### Exampel 2 ","b2c2bca1":"# Now let's take fast overview about tensorflow.","c7b5fc79":"\nLet's start with Constant type.\n\n# 3. Constants\n\nWe can defiend our constants using **constant** keyword.","9e1e6b05":"\n<p>\n    Let's talk about <b>multiply<\/b> function We can use it to  <b>Number multiplication.<\/b>\n<\/p>\n\n## Number multiplication<hr>\n\n### Exampel 1 ","6648fab5":"<hr>\n# 6. Operations\n\n<p>\n    In this section we will talk about <b>Tensorflow Operations<\/b> <br>\n    <ul>\n        <li>add<\/li>\n        <li>multiply<\/li>\n        <li>subtract<\/li>\n        <li>divide<\/li>\n        <li>pow<\/li>\n        <li>matmul<\/li>\n        <li>matrix_transpose<\/li>\n    <\/ul>\n<\/p>\n\n<p>\n    Let's talk about <b>add<\/b> function We can use it to  <br>\n    <ul>\n        <li>Number summition<\/li>\n        <li>String concatination<\/li>\n     <\/ul>\n     \n<\/p>\n\n## Number summition<hr>\n### Exampel 1 \n    \n","fad47d53":"<hr>\n# 5. Placeholders\n\n<p>\nA <b>placeholder<\/b> is simply a variable that we will assign data to \nat a later date.<br>It allows us to create our operations and build our computation graph, without needing the data.\n<br>\n    \nIn <b>TensorFlow<\/b> terminology,we then feed data into the graph through these <b>placeholders.<\/b> \n<\/p>\n\n## Exampel 1 \n\n<p>\n    Assume we want to know a values of <b>C<\/b> for this equation \n    <code>C = 2\u03c0r<\/code> for this follwing values <br>For \n    <code>r = 1,2,3,4,5<\/code> to compute a circle perimeter for each         value of <b>r<\/b>.\n<\/p>\n\n<p>\nYou can try it using <a href='https:\/\/www.google.com\/search?q=circle+perimeter+equation&oq=circle+perimeter+equation&aqs=chrome..69i57j0l6.1413j0j9&sourceid=chrome&ie=UTF-8'>this link<\/a> \n<\/p>","7f2b292a":"<hr>\n\n<div>\n    \ud83c\udf81 <b>Congratulations<\/b> \ud83d\ude0a<br><br>\n    Now we finish <b>Tensorflow basics<\/b> and we will know more about <b>Tensorflow Framework<\/b> in other kernels.<br>\n    Good luck \ud83d\udc4d\n<\/div>\n\n<br>\n\n<h1>Please If you find this kernel useful, upvote it to help others see it \ud83d\ude0a<\/h1>","e3591beb":"# As most programming language like **C++, C#, Java, etc** we must define variable type. So let's know variable types in tensorflow.<br>","230b2b9e":"<hr>\n\n### Exampel 2 ","c45d9e4f":"<hr>\n\n### Exampel 2 ","ba1cff48":"<hr>\n\n### Exampel 2 ","ab20f02e":"<hr>\n\n## Exampel 2 ","b6b35fb7":"An other way in this way we don't need to close a session because it defined only into [with] block \n","237bbc52":"**We can change variable value by equal operator (=) or assign keyword**\n<br>\n\n## Exampel 1 ","6a37454e":"<hr>\n\n## Exampel 2 ","1d672e4f":"[[[](http:\/\/)](http:\/\/)](http:\/\/)**In above code pi is a tensor of rank 0**\n<br>\n\nLet's print pi without use session for clearly understand.","fb991ecb":"<hr>\n### Exampel 2 ","22a99fe7":"<hr>\n## Exampel 3 \n\nIn this exampel we will build **linear regression** equation using tensorflow. <code>equation = w.X + b<\/code>","280d50d3":"<hr>\n### Exampel 2 ","2da0ba4d":"<hr>\n<div>\n    <b>Alert<\/b><br><br>\n    You must make sure that two numbers you will add have the same             <b>datatype<\/b><br>\n    If you add <code>5 + 10.5<\/code> you will get error because 5 is <b>int<\/b> but 10.5 is <b>float<\/b>,<br> To avoid this problem you must add <code>5.0 + 10.5<\/code> to get 15.5 \n<\/div>\n<br>\n\n## String concatination<hr>\n\n### Exampel 1 ","c0499e8c":"<hr>\n\n<div>\n    \ud83d\udd3a <b>Alert<\/b><br><br>\n    <b>datatype equavilant<\/b> which we talk about it at first             <b>alert<\/b> \u261d has same importance in <b>dividation<\/b>.\n<\/div>\n\n\n<p>\n    Let's talk about <b>pow<\/b> function We can use it to  get a value of <b>x<sup>y<\/sup>.<\/b>\n<\/p>\n\n<h3>x<sup>y<\/sup><\/h3><hr>\n\n### Exampel 1 ","7227ff7f":"or Another way","f2a5f291":"Another example","16a5e4d6":"<hr>\n\n<div>\n    \ud83d\udd3a <b>Alert<\/b><br><br>\n    <b>datatype equavilant<\/b> which we talk about it at previous             <b>alert<\/b> \u261d has same importance in <b>multiplication<\/b>.\n<\/div>\n\n\n<p>\n    Let's talk about <b>subtract<\/b> function We can use it to <b>Number subtraction.<\/b>\n<\/p>\n\n## Number subtraction<hr>\n\n### Exampel 1 ","ae311ff9":"![images.jpg](attachment:images.jpg)","c78481ec":"<hr>[](http:\/\/)\n\n<div>\n    \ud83d\udd3a <b>Alert<\/b><br><br>\n    <b>datatype equavilant<\/b> which we talk about it at first             <b>alert<\/b> \u261d has same importance in <b>subtraction<\/b>.\n<\/div>\n\n<p>\n    Let's talk about <b>divide<\/b> function We can use it to  <b>Number dividation.<\/b>\n<\/p>\n\n## Number dividation<hr>\n\n### Exampel 1 ","a05586d8":"<hr>\n<div>\n    \ud83d\udd3a <b>Alert<\/b><br><br>\n    <b>datatype equavilant<\/b> which we talk about it at first             <b>alert<\/b> \u261d has same importance when we use <b>pow<\/b> function.\n<\/div>\n\n\n<p>\n    Let's talk about <b>matmul<\/b> function  We can use it to   get a value of <b>Matrix multiplication.<\/b>\n<\/p>\n\n## Matrix multiplication [......] x [......]\n<hr>\n\n### Exampel 1 ","ca5139ba":"<hr>\n## Exampel 2 "}}