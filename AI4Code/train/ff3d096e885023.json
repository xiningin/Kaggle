{"cell_type":{"8da63e59":"code","a225d240":"code","b94d9266":"code","555a2853":"code","f5797604":"code","3256c895":"code","e1b747e7":"code","793d6b0c":"code","031a49f4":"code","0bd8822a":"code","57652230":"code","9e1c32d7":"code","fecdae13":"code","1658ad92":"code","5d457e1e":"code","c600d3a8":"code","749921fa":"code","422b0de9":"code","a15b5d56":"code","9cbef1a3":"code","4d2f336d":"code","58bd7a4a":"code","92946fa2":"code","46152c41":"code","4dc624ed":"code","c7356158":"code","231e9188":"code","df82b074":"code","a1cef02f":"code","7fdd1cc4":"code","afe4ed6f":"code","a90b21a9":"code","1f5d3f49":"code","61df50c8":"code","b04dfbb6":"code","cff86478":"code","dc79c224":"code","f2c97453":"code","fea97ea8":"code","b4ece2fd":"code","b4c71b48":"code","a7d9652a":"code","8eb6d8c6":"code","aaeda65e":"code","d1297eb6":"code","0a472d07":"code","9c35b309":"code","2ae22a71":"code","abd5d8b5":"code","5cf1ea73":"markdown","a7a55969":"markdown","873e3e4c":"markdown","c64806b3":"markdown"},"source":{"8da63e59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a225d240":"# Importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime as dt","b94d9266":"import sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.cluster import AgglomerativeClustering","555a2853":"# Display multiple commands output from a cell\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","f5797604":"securities = pd.read_csv('..\/input\/nyse-clustering\/securities.csv')\nnyse = pd.read_csv('..\/input\/fundamentals-df\/fundamentals.csv')","3256c895":"nyse.head(5)","e1b747e7":"nyse = nyse.drop('Unnamed: 0', axis = 1)","793d6b0c":"nyse.describe().T","031a49f4":"pd.options.display.max_rows = 20","0bd8822a":"nyse.isna().sum()","57652230":"nyse[nyse.columns[nyse.isna().any()]].isna().sum()","9e1c32d7":"# for renaming the columns\nimport re\nnyse_re = {n : re.sub('[^A-Za-z0-9]+','',n) for n in nyse.columns.values}\nnyse.rename(columns = nyse_re, inplace = True)","fecdae13":"nyse[nyse.columns[nyse.isna().any()]].isna().sum()","1658ad92":"nyse['PeriodEnding'] = pd.to_datetime(nyse['PeriodEnding'])\nnyse['ForYear'] = nyse['PeriodEnding'].dt.year.astype('category')","5d457e1e":"fwm = [\"TickerSymbol\",\"ForYear\",\"AccountsPayable\",\"AccountsReceivable\",\"GrossProfit\",\"Liabilities\",\"NetCashFlow\",\"OperatingIncome\",\"TotalAssets\",\"TotalEquity\",\"TotalLiabilities\",\"TotalLiabilities&Equity\",\"TotalRevenue\",\"EarningsPerShare\"]\nto_drop= [x for x in nyse.columns.values if x not in fwm]\nto_drop","c600d3a8":"nyse.drop(columns = to_drop,inplace = True)","749921fa":"# Reducing the data set to some of the important variables\nnyse.head(5)","422b0de9":"nyse.shape","a15b5d56":"len(nyse['TickerSymbol'].unique())","9cbef1a3":"nyse_grp = nyse.groupby(['TickerSymbol'])\nnyse_grp","4d2f336d":"nyse_agg = nyse_grp.agg(np.nanmean)\nnyse_agg.head()","58bd7a4a":"nyse_fn = nyse_agg.copy()","92946fa2":"nyse_fn['TickerSymbol'] = nyse_fn.index\nnyse_fn.head()","46152c41":"# scatter plots for visualising the \n\nfig, ax = plt.subplots(1,6, figsize = (16,6))\n_=sns.scatterplot(data = nyse_fn, y = 'AccountsPayable', x = 'TickerSymbol', ax = ax[0])\n_=sns.scatterplot(data = nyse_fn, y = 'AccountsReceivable', x = 'TickerSymbol', ax = ax[1])\n_=sns.scatterplot(data = nyse_fn, y = 'GrossProfit', x = 'TickerSymbol', ax = ax[2])\n_=sns.scatterplot(data = nyse_fn, y = 'TotalRevenue', x = 'TickerSymbol', ax = ax[3])\n_=sns.scatterplot(data = nyse_fn, y = 'EarningsPerShare', x = 'TickerSymbol', ax = ax[4])\n_=sns.scatterplot(data = nyse_fn, y = 'OperatingIncome', x = 'TickerSymbol', ax = ax[5])","4dc624ed":"import plotly.express as px","c7356158":"fig = px.density_heatmap(\n                         nyse_fn,\n                         x=\"TickerSymbol\",\n                         y=\"EarningsPerShare\"\n                         )\nfig.show()","231e9188":"fig = px.density_heatmap(\n                         nyse_fn,\n                         x=\"TickerSymbol\",\n                         y=\"TotalRevenue\",\n                         )\nfig.show()","df82b074":"fig = px.density_heatmap(\n                         nyse_fn,\n                         x=\"TickerSymbol\",\n                         y=\"OperatingIncome\",\n                         )\nfig.show()","a1cef02f":"fig = px.density_heatmap(\n                         nyse_fn,\n                         x=\"TickerSymbol\",\n                         y=\"TotalRevenue\",\n                         )\nfig.show()","7fdd1cc4":"nyse_fn.drop(columns = ['TickerSymbol'],inplace=True)\ny_col = nyse_fn.columns[nyse_fn.isna().any(axis =0)]\nfn_pred = nyse_fn[nyse_fn.isna().any(axis =1)]\nfn_prem = nyse_fn[~nyse_fn.isna().any(axis =1)]\ny = fn_prem[y_col]\nfn_prem.drop(columns = y_col)\nss = StandardScaler()\nX = ss.fit_transform(fn_prem)\nX_train, X_test, y_train, y_test = train_test_split( X,y, test_size = 0.2)","afe4ed6f":"dist = []\nsil_sc = []\nfor i in range(1, 11):\n    km = KMeans(n_clusters=i)\n    km.fit(X_train)\n    dist.append(km.inertia_)\n    if(i>1) : \n        sil_sc.append(silhouette_score(X_train, km.labels_))\n        \n# plot\nplt.title('Scree Plot')\nplt.plot(range(1, 11), dist, marker='*')\nplt.xlabel('Number of clusters')\nplt.ylabel('Distortion')\nplt.show()\n\nfor i in range(0,9): print('\\nFor ',(i+2),' clusters avg silhoutte score is #',sil_sc[i])\nplt.plot(range(0, 10), dist, marker='*')\nplt.title('Silhouette Plot')\nplt.xlabel('Number of clusters')\nplt.ylabel('Silhouette Score')\nplt.show()","a90b21a9":"colors = ['red', 'blue','orange','black']\nkm = KMeans(n_clusters=4)\nclusters = km.fit(X_train)\nlabels = clusters.labels_\nctr = clusters.cluster_centers_\n\nfig = plt.figure(figsize = (10,10))\nfig.suptitle('K-mean clusters formed with n_cluster = 4',fontsize = 16)\nfor k, col in zip(range(X_train.shape[0]), colors):\n    my_members = (labels == k)\n    cluster_center = ctr[k]\n    plt.plot(X_train[my_members, 0], X_train[my_members, 1], 'w', markerfacecolor=col, marker='.')\n    plt.plot(cluster_center[0], cluster_center[1], '*', markerfacecolor=col,  markeredgecolor='k', markersize=6)","1f5d3f49":"nyse_fn.isna().sum()","61df50c8":"nyse_fn = nyse_fn.dropna(axis=1)","b04dfbb6":"km = KMeans(n_clusters=5)\nclusters = km.fit_predict(nyse_fn)\nnyse_fn['cluster'] = clusters\nnyse_fn.head(2)","cff86478":"nyse_fn['cluster'].value_counts()","dc79c224":"nyse_fn.groupby('cluster')['TotalRevenue'].mean().plot(kind = 'barh')","f2c97453":"nyse_fn.groupby('cluster')['OperatingIncome'].mean().plot(kind = 'barh')","fea97ea8":"nyse_fn.groupby('cluster')['GrossProfit'].mean().plot(kind = 'barh')","b4ece2fd":"from sklearn.mixture import GaussianMixture\n\ngm4 = GaussianMixture(n_components=4)","b4c71b48":"gm4 = GaussianMixture(\n                     n_components = 4,\n                     n_init = 200,  # The number of initializations \n                                   # to perform. The best results are kept.\n                     max_iter = 400,\n                     covariance_type= 'tied'\n                     )  # 'tied', 'diag', 'full', \n","a7d9652a":"gm4.fit(nyse_fn)","8eb6d8c6":"print(\"\\n-----cluster means----\\n\")\ngm4.means_\nprint(\"\\n-----Did it converge?----\\n\")\ngm4.converged_\nprint(\"\\n-----How many iteratons?----\\n\")\ngm4.n_iter_","aaeda65e":"silhouette_avg = silhouette_score(\n                                  X = nyse_fn,\n                                  metric = 'mahalanobis',\n                                  labels =gm4.predict(nyse_fn)\n                                  )\n# 21.1\nprint(\"Silhoutte score as per Mahalanobis distance: \",silhouette_avg)","d1297eb6":"cid = gm4.predict(nyse_fn)","0a472d07":"nyse_fn['cid'] = cid\nnyse_fn.head()\nnyse_fn['cid'].value_counts()","9c35b309":"fig, ax = plt.subplots(1,3, figsize = (16,6))\nsns.boxplot(x='cid', y='TotalRevenue', data=nyse_fn,ax = ax[0]);\nsns.boxplot(x='cid', y='GrossProfit', data=nyse_fn,ax = ax[1]);\nsns.boxplot(x='cid', y='OperatingIncome', data=nyse_fn,ax = ax[2]);","2ae22a71":"gm4.means_    # Shape is (n_cluster_components, n_features)\nprint()\ngm4.means_.T  # Shape is (n_features, n_cluster_components)\nprint()\nprint()\nnp.corrcoef(gm4.means_.T)","abd5d8b5":"fig, ax = plt.subplots(1,2, figsize = (16,6))\n\n# 23.1 Cluster from GMM\n\nsns.scatterplot(\n                x='TickerSymbol',\n                y='TotalRevenue',\n                hue = 'cid',\n                data=nyse_fn,\n                palette=\"deep\",\n                ax = ax[0]\n                );\n\n# 23.2 Cluster from KMEans\nsns.scatterplot(\n                x='TickerSymbol',\n                y='TotalRevenue',\n                hue = 'cluster',\n                data=nyse_fn,\n                palette=\"deep\",\n                ax = ax[1]\n                );       ","5cf1ea73":"## Clusters from KMeans and GMM--Compare","a7a55969":"Identification of number of clusters for the data\nWe are using here k-means clustering for which the number of clusters is to be predetermined. In order to achieve that we can draw a Scree Chart or check silhouette Plot.","873e3e4c":"The number of cluster we choose is 4","c64806b3":"## Performing Gaussian mixture model"}}