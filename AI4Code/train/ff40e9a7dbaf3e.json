{"cell_type":{"5559b7b9":"code","0592403e":"code","8328227a":"code","616e7646":"code","916bf6b5":"code","ccd96503":"code","4d0f4675":"code","fd2e26c6":"code","57ee2400":"code","cc5daf0a":"code","4f51273e":"code","d10d61dc":"code","7a40a595":"code","86216319":"code","253bd5d0":"code","7d3b4205":"code","b669c8ed":"code","dbf222ab":"code","31b8551a":"code","191d7d03":"code","2fe099cc":"code","9417d089":"code","428edd77":"code","77cca3ad":"code","2f8b4a33":"code","e0b94d46":"code","c8d4cfe6":"code","a25ce87c":"code","77d0d514":"markdown","408445e9":"markdown","964bffc6":"markdown","2a23dd5f":"markdown","d103bec7":"markdown","2174f266":"markdown","3106ac2d":"markdown","86fce57e":"markdown","ab668b66":"markdown","44532838":"markdown","5f2ee160":"markdown","27e4f20a":"markdown","f1daebb7":"markdown","c5f3d714":"markdown","1c9fbc4c":"markdown","6d98c7a7":"markdown","88e8d16d":"markdown","8cd25516":"markdown","8bbc28c7":"markdown","7f26d287":"markdown","f0aae44a":"markdown","379b6507":"markdown","ad93ef66":"markdown","358ca5e1":"markdown","51b776dc":"markdown","7fe9979b":"markdown","1a9bd7eb":"markdown","e9f9cd17":"markdown"},"source":{"5559b7b9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport re\nimport datetime\nimport seaborn as sns","0592403e":"print(os.listdir(\"..\/input\"))\nTrain_df= pd.read_csv('..\/input\/train.csv')\nTest_df= pd.read_csv('..\/input\/test.csv')","8328227a":"print(Train_df.shape)\nprint(Test_df.shape)","616e7646":"Train_df['Train_Test']='Train'\nTest_df['Train_Test']='Test'\ndf= Train_df.append(Test_df)","916bf6b5":"df.head()","ccd96503":"df.describe()","4d0f4675":"missing_var= df.isnull().sum()\nprint(missing_var)","fd2e26c6":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","57ee2400":"df['EMPLOYMENT_TYPE'] = df['EMPLOYMENT_TYPE'].fillna(method = 'bfill')","cc5daf0a":"df.info()","4f51273e":"for col in ['UNIQUEID','AADHAR_FLAG', 'BRANCH_ID', 'CURRENT_PINCODE_ID', 'DRIVING_FLAG',\n            'EMPLOYEE_CODE_ID', 'LOAN_DEFAULT', 'MANUFACTURER_ID' , \n            'MOBILENO_AVL_FLAG', 'STATE_ID', 'SUPPLIER_ID', 'VOTERID_FLAG',\n            'PAN_FLAG', 'PASSPORT_FLAG', 'PERFORM_CNS_SCORE_DESCRIPTION',\n            'EMPLOYMENT_TYPE']:\n    df[col] = df[col].astype('category')","d10d61dc":"df['DATE_OF_BIRTH'] = pd.to_datetime(df['DATE_OF_BIRTH'])\ndf['DISBURSAL_DATE'] = pd.to_datetime(df['DISBURSAL_DATE'])","7a40a595":"df.select_dtypes(include=['category']).nunique()","86216319":"df=df.drop(['BRANCH_ID','CURRENT_PINCODE_ID','EMPLOYEE_CODE_ID','SUPPLIER_ID'],axis=1)","253bd5d0":"df.PERFORM_CNS_SCORE_DESCRIPTION.value_counts()","7d3b4205":"df = df.replace({'PERFORM_CNS_SCORE_DESCRIPTION':{'C-Very Low Risk':'Low', 'A-Very Low Risk':'Low',\n                                                       'B-Very Low Risk':'Low', 'D-Very Low Risk':'Low',\n                                                       'F-Low Risk':'Low', 'E-Low Risk':'Low', 'G-Low Risk':'Low',\n                                                       'H-Medium Risk': 'Medium', 'I-Medium Risk': 'Medium',\n                                                       'J-High Risk':'High', 'K-High Risk':'High','L-Very High Risk':'Very High',\n                                                       'M-Very High Risk':'Very High','Not Scored: More than 50 active Accounts found':'Not Scored',\n                                                       'Not Scored: Only a Guarantor':'Not Scored','Not Scored: Not Enough Info available on the customer':'Not Scored',\n                                                        'Not Scored: No Activity seen on the customer (Inactive)':'Not Scored','Not Scored: No Updates available in last 36 months':'Not Scored',\n                                                       'Not Scored: Sufficient History Not Available':'Not Scored', 'No Bureau History Available':'Not Scored'\n                                                       }})\ndf.PERFORM_CNS_SCORE_DESCRIPTION.value_counts()","b669c8ed":"df['AVERAGE_ACCT_AGE']=df['AVERAGE_ACCT_AGE'].map(lambda x : re.sub(\"[^0-9]+\",\" \",x))\ndf['AVERAGE_ACCT_AGE']=df['AVERAGE_ACCT_AGE'].str.split(\" \",expand=True)[0].astype(int)*12+df['AVERAGE_ACCT_AGE'].str.split(\" \",expand=True)[1].astype(int)\n\ndf['CREDIT_HISTORY_LENGTH']=df['CREDIT_HISTORY_LENGTH'].map(lambda x : re.sub(\"[^0-9]+\",\" \",x))\ndf['CREDIT_HISTORY_LENGTH']=df['CREDIT_HISTORY_LENGTH'].str.split(\" \",expand=True)[0].astype(int)*12+df['CREDIT_HISTORY_LENGTH'].str.split(\" \",expand=True)[1].astype(int)","dbf222ab":"df['TODAY']=pd.to_datetime(datetime.date.today())\n\ndf['AGE']=df['TODAY']-df['DATE_OF_BIRTH']\nnew = df[\"AGE\"].astype(str).str.split(\" \", n = 1, expand = True)\ndf['AGE']=new[0].astype(int)\n\ndf['LOAN_AGE']=df['TODAY']-df['DISBURSAL_DATE']\nnew = df[\"LOAN_AGE\"].astype(str).str.split(\" \", n = 1, expand = True)\ndf['LOAN_AGE']=new[0].astype(int)","31b8551a":"print(df.corr())\nsns.heatmap(df.corr(), cmap='BuGn')","191d7d03":"from statsmodels.stats.outliers_influence import variance_inflation_factor\ndf_Numeric=pd.DataFrame(df[['ASSET_COST',\n'AVERAGE_ACCT_AGE',\n'CREDIT_HISTORY_LENGTH',\n'DELINQUENT_ACCTS_IN_LAST_SIX_MONTHS',\n'DISBURSED_AMOUNT','LTV','NEW_ACCTS_IN_LAST_SIX_MONTHS',\n'NO_OF_INQUIRIES','PERFORM_CNS_SCORE',\n'PRIMARY_INSTAL_AMT',\n'PRI_ACTIVE_ACCTS',\n'PRI_CURRENT_BALANCE',\n'PRI_DISBURSED_AMOUNT',\n'PRI_NO_OF_ACCTS',\n'PRI_OVERDUE_ACCTS',\n'PRI_SANCTIONED_AMOUNT',\n'SEC_ACTIVE_ACCTS',\n'SEC_CURRENT_BALANCE',\n'SEC_DISBURSED_AMOUNT',\n'SEC_INSTAL_AMT',\n'SEC_NO_OF_ACCTS',\n'SEC_OVERDUE_ACCTS',\n'SEC_SANCTIONED_AMOUNT',\n'AGE',\n'LOAN_AGE']])\nX = df_Numeric.assign(const=0)\npd.Series([variance_inflation_factor(X.values, i) \n               for i in range(X.shape[1])], \n              index=X.columns)","2fe099cc":"Event_Imbalance = df.groupby('LOAN_DEFAULT').agg({'LOAN_DEFAULT':'count'})\nEvent_Imbalance['PERCENTAGE_CONTRIBUTION']=Event_Imbalance['LOAN_DEFAULT']\/sum(Event_Imbalance['LOAN_DEFAULT'])\nprint(Event_Imbalance)\ndf.LOAN_DEFAULT.value_counts().plot(kind='bar')","9417d089":"Predictors= df[['AADHAR_FLAG','DRIVING_FLAG','MOBILENO_AVL_FLAG','STATE_ID',\n                'VOTERID_FLAG','PAN_FLAG','PASSPORT_FLAG', 'PERFORM_CNS_SCORE_DESCRIPTION',\n                'EMPLOYMENT_TYPE']]\n\nOne_hot_encoded_training_predictors = pd.get_dummies(Predictors)\n\ndf=pd.merge(df[['ASSET_COST','AVERAGE_ACCT_AGE',\n'CREDIT_HISTORY_LENGTH','DELINQUENT_ACCTS_IN_LAST_SIX_MONTHS',\n'DISBURSED_AMOUNT','LTV','NEW_ACCTS_IN_LAST_SIX_MONTHS','NO_OF_INQUIRIES','PERFORM_CNS_SCORE',\n'PRIMARY_INSTAL_AMT','PRI_ACTIVE_ACCTS','PRI_CURRENT_BALANCE','PRI_DISBURSED_AMOUNT',\n'PRI_NO_OF_ACCTS','PRI_OVERDUE_ACCTS','PRI_SANCTIONED_AMOUNT','SEC_ACTIVE_ACCTS',\n'SEC_CURRENT_BALANCE','SEC_DISBURSED_AMOUNT','SEC_INSTAL_AMT','SEC_NO_OF_ACCTS',\n'SEC_OVERDUE_ACCTS','SEC_SANCTIONED_AMOUNT','AGE','LOAN_AGE','LOAN_DEFAULT','Train_Test']],\nOne_hot_encoded_training_predictors,left_index=True, right_index=True)\n","428edd77":"Train_df= df[df.Train_Test=='Train']\nTrain_df=Train_df.drop(['Train_Test'],axis=1)\nTest_df= df[df.Train_Test=='Test']\nTest_df=Test_df.drop(['Train_Test'],axis=1)","77cca3ad":"from sklearn.model_selection import train_test_split\nX_Train, X_Test, Y_Train, Y_Test = train_test_split(Train_df.drop('LOAN_DEFAULT',axis=1),Train_df['LOAN_DEFAULT'],\n                                                    test_size=0.30,random_state=101)","2f8b4a33":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\n\nlogreg = LogisticRegression()\nlogreg.fit(X_Train, Y_Train)\n","e0b94d46":"import statsmodels.api as sm\nlogit_model=sm.Logit(Y_Train,X_Train)\nresult=logit_model.fit()\nresult.summary()","c8d4cfe6":"\nfrom sklearn.metrics import classification_report\npredictions = logreg.predict(X_Train)\nprint(classification_report(Y_Train,predictions))\nprint(\"Accuracy:\",metrics.accuracy_score(Y_Train, predictions))","a25ce87c":"from sklearn.metrics import confusion_matrix\npredictions = logreg.predict(X_Train)\nprint(confusion_matrix (Y_Train, predictions))","77d0d514":"## Logistic Regression","408445e9":"## Importing the data","964bffc6":"We will proceed to drop those variables that have too many categories. These will only add noise to the model.","2a23dd5f":"## Importing the required packages","d103bec7":"## Analysis of Date Time Variables","2174f266":"## Analysis of Categorical Variables","3106ac2d":"We have missing values only in the variable \"EMPLOYMENT_TYPE\" which we will impute it using the backward fill method","86fce57e":"We will begin by checking the number of unique categories in the categorical variables.","ab668b66":"## Glimpse of the data","44532838":"## Data Dictionary\n...","5f2ee160":"Similarly, we need to convert the date time variables into its respective data type.","27e4f20a":"## Event Imbalance Check","f1daebb7":"There are multiple categories in the variable 'PERFORM_CNS_SCORE_DESCRIPTION' which are similar and can be clubbed.","c5f3d714":"The event and non-event ratio is 78% to 22% and hence its absolutely fine.","1c9fbc4c":"## Appending the Train and Test data","6d98c7a7":"We need to convert the data type of the categorical variables into category ","88e8d16d":"## Descriptive Stats","8cd25516":"## Structure of the data","8bbc28c7":"## Missing value check","7f26d287":"## Confusion Matrix","f0aae44a":"## Splitting into Train and Test data","379b6507":"## Work in Progress....Any suggestions are welcome","ad93ef66":"## Correlation","358ca5e1":"Next we will use the variables 'DATE_OF_BIRTH' and 'DISBURSAL_DATE' to calculate the age of the customer and the age of the loan respectively.","51b776dc":"## Introduction\n\nFinancial institutions incur significant losses due to the default of vehicle loans. This has led to the tightening up of vehicle loan underwriting and increased vehicle loan rejection rates. The need for a better credit risk scoring model is also raised by these institutions. This warrants a study to estimate the determinants of vehicle loan default. A financial institution has hired you to accurately predict the probability of loanee\/borrower defaulting on a vehicle loan in the first EMI (Equated Monthly Instalments) on the due date. Following Information regarding the loan and loanee are provided:\n\n* Loanee Information (Demographic data like age, income, Identity proof etc.)\n* Loan Information (Disbursal details, amount, EMI, loan to value ratio etc.)\n* Bureau data & history (Bureau score, number of active accounts, the status of other loans, credit history etc.)\n\nDoing so will ensure that clients capable of repayment are not rejected and important determinants can be identified which can be further used for minimising the default rates.","7fe9979b":"## Variance Infaltion Factor","1a9bd7eb":"We will convert the variables 'AVERAGE_ACCT_AGE' and 'CREDIT_HISTORY_LENGTH' in number of months from its present format.","e9f9cd17":"## Dimensions of the data"}}