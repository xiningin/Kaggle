{"cell_type":{"6f0f30d7":"code","7105cc06":"code","8f9be40a":"code","60da1b86":"code","760cd0bd":"code","fd7d28ff":"code","256af0f2":"code","200c0fdb":"code","224f0081":"code","bb771419":"code","1add13fe":"code","0634e620":"code","4160a86a":"code","7738fb3b":"code","e86c04db":"code","3e27370b":"code","d153b77e":"code","ae2c26e4":"code","3ea5e718":"code","18259ce2":"markdown","11bd0cd7":"markdown","7d8190a4":"markdown","988b17bf":"markdown","f0946a8e":"markdown","1da67fff":"markdown","1faff256":"markdown","35337739":"markdown","59d4f21a":"markdown","17735732":"markdown","9c160fc7":"markdown","f28f8148":"markdown","fafde8d0":"markdown","d8e87e71":"markdown","56771fb2":"markdown","f14ce4bc":"markdown","1081cbe8":"markdown","66df025c":"markdown","17dcc45c":"markdown","d87ddf4b":"markdown"},"source":{"6f0f30d7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7105cc06":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Activation, Dropout, Flatten, Dense\nfrom keras.preprocessing.image  import ImageDataGenerator, img_to_array,load_img\nimport matplotlib.pyplot as plt\nfrom glob import glob","8f9be40a":"train_path = \"\/kaggle\/input\/fruits\/fruits-360\/Training\/\"\ntest_path = \"\/kaggle\/input\/fruits\/fruits-360\/Test\/\"","60da1b86":"img = load_img(train_path + \"Apple Golden 1\/0_100.jpg\")\nplt.imshow(img)\nplt.title(\"Apple Golden\")\nplt.axis(\"off\")\nplt.show()","760cd0bd":"shape_of_image = img_to_array(img)\nprint(shape_of_image.shape)","fd7d28ff":"classes = glob(train_path + \"\/*\")\nnumber_of_class = len(classes)\nprint(\"Number of class : \" , number_of_class)","256af0f2":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                   shear_range = 0.3,\n                   horizontal_flip = True,\n                   zoom_range = 0.3)\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(train_path,\n                                                   target_size = shape_of_image.shape[:2],\n                                                   batch_size = 32,\n                                                   color_mode = 'rgb',\n                                                   class_mode = 'categorical')\ntest_generator = test_datagen.flow_from_directory(test_path,\n                                                   target_size = shape_of_image.shape[:2],\n                                                   batch_size = 32,\n                                                   color_mode = 'rgb',\n                                                   class_mode = 'categorical')","200c0fdb":"model = Sequential()","224f0081":"model.add(Conv2D(32,(3,3),activation = 'relu', input_shape = shape_of_image.shape))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(32,(3,3),activation = 'relu', input_shape = shape_of_image.shape))\nmodel.add(MaxPooling2D())\n\nmodel.add(Conv2D(64,(3,3),activation = 'relu', input_shape = shape_of_image.shape))\nmodel.add(MaxPooling2D())","bb771419":"model.add(Flatten())\nmodel.add(Dense(1024,activation='relu'))","1add13fe":"model.add(Dropout(0.5))\nmodel.add(Dense(number_of_class,activation = 'softmax'))","0634e620":"model.compile(loss = 'categorical_crossentropy',\n              optimizer = 'rmsprop',\n              metrics = ['accuracy'])","4160a86a":"batch_size = 32\nnumber_of_batch = 1600 \/\/ batch_size","7738fb3b":"hist = model.fit_generator(\n    generator = train_generator,\n    steps_per_epoch = number_of_batch,\n    epochs = 100,\n    validation_data = test_generator,\n    validation_steps = 800 \/\/ batch_size\n                   )","e86c04db":"model.save_weights(\"trial.h5\")","3e27370b":"print(hist.history.keys())\nplt.plot(hist.history[\"loss\"],label = \"Train Loss\")\nplt.plot(hist.history[\"val_loss\"],label = \"Validaton Loss\")\nplt.legend()\nplt.show()","d153b77e":"plt.figure()\nplt.plot(hist.history[\"accuracy\"],label = \"Train Accuracy\")\nplt.plot(hist.history[\"val_accuracy\"],label = \"Validaton Accuracy\")\nplt.legend()\nplt.show()","ae2c26e4":"import json\nwith open(\"traial.json\",\"w\") as f:\n    json.dump(hist.history,f)","3ea5e718":"import codecs \nwith codecs.open(\"traial.json\",\"r\",encoding = \"utf-8\") as f:\n    h = json.loads(f.read())","18259ce2":"**Compiling Our Model**","11bd0cd7":"**Initializing model**","7d8190a4":"* **Needed Libraries**\n\n> Sequential provides us to add our layers with order.\n\n> In my model, I plan to use \n    1. Convolutional layers(CNN), \n    2. Maxpooling layers, \n    3. Activation layers, \n    4. Droupout Layers, \n    5. Fully Connected Layers.\n  \n> I need to make preprocessing to my data; therefore, I need to import ralated libraries, namely \n    1. ImageDataGenerator\n    2. img_to_array => convert image to array\n    3. load_img => to load image\n    \n> To plot and visualize the data and results, matplotlib.pyplot will be used. \n\n> To learn how many class I have, glob library will be used","988b17bf":"# Data Generation - Train and Test\n\n> We may have not adequate image to train and test data to classify them. Therefore, we should generate more images with using our real data, namely images.","f0946a8e":"**Our Train and Test Path**","1da67fff":"**Flatten process and Fully Conncected Neural Network**","1faff256":"# Model Evaluation","35337739":"**3 Convolutional Layers and 3 Max Pooling Layers**","59d4f21a":"> Lets look at one example image","17735732":"> To evaluate our model, We can utilize graph.","9c160fc7":"**Number of Class**","f28f8148":"> To learn different proporties of image, we use Dropout\n\n**Dropout and Output Layers**","fafde8d0":"**Shape of images**","d8e87e71":"# Loading Data","56771fb2":"# Implementing CNN Module","f14ce4bc":"**Save Model**","1081cbe8":"**Save History**","66df025c":"**Load History**","17dcc45c":"**Batch and its size**","d87ddf4b":"**Fitting Our Model**"}}