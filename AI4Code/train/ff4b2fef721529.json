{"cell_type":{"54df4a37":"code","19ab49df":"code","df3146aa":"code","02e26544":"code","9bf249d3":"code","e1339714":"code","2d63159c":"code","6aae1b44":"code","979703a0":"code","e1e27330":"code","c06a9364":"code","f5b4ccde":"code","59ae42bd":"code","14a7707c":"code","11b1a746":"markdown","853d29cc":"markdown","1b5c8bcd":"markdown","be21162b":"markdown","0689c88e":"markdown","1f40d86c":"markdown","653fd5bd":"markdown","a2fff7a4":"markdown","fcff7f55":"markdown","ad61e769":"markdown","b2d3bc5d":"markdown"},"source":{"54df4a37":"import numpy as np \nimport pandas as pd","19ab49df":"train_data = pd.read_csv(\"..\/input\/train.csv\", parse_dates=True, index_col =0)\ny_train = train_data.iloc[:,-1].values\ntrain_data.drop('sales', 1, inplace=True)\ntrain_data['y'] = train_data.index.year-train_data.index.year.min()\ntrain_data['m'] = train_data.index.month\ntrain_data['d'] = train_data.index.day\ntrain_data['dow'] = train_data.index.dayofweek","df3146aa":"from sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(train_data, y_train, test_size=.1, random_state=0, shuffle = True)","02e26544":"cat_vars = list(train_data.columns)\ncat_vars.remove('y')\ncont_vars = ['y']","9bf249d3":"X_train = []\nX_val = []\nX_train.append(x_train[cont_vars].astype('float32').values)\nX_val.append(x_val[cont_vars].astype('float32').values)\nfor cat in cat_vars:\n    X_train.append(x_train[cat].values)\n    X_val.append(x_val[cat].values)","e1339714":"cat_sizes = {}\ncat_embsizes = {}\nfor cat in cat_vars:\n    cat_sizes[cat] = train_data[cat].nunique()\n    cat_embsizes[cat] = min(50, cat_sizes[cat]\/\/2+1)","2d63159c":"cat_embsizes","6aae1b44":"test_data = pd.read_csv(\"..\/input\/test.csv\", parse_dates=True, index_col =1)\ntest_data['y'] = test_data.index.year-train_data.index.year.min()\ntest_data['m'] = test_data.index.month\ntest_data['d'] = test_data.index.day\ntest_data['dow'] = test_data.index.dayofweek\n# test_data['special_store'] = test_data['store'].isin([5,6,7])*1","979703a0":"X_test = []\nX_test.append(test_data[cont_vars].astype('float32').values)\nfor cat in cat_vars:\n    X_test.append(test_data[cat].values)","e1e27330":"from keras.layers import Dense, Dropout, Embedding, Input, Reshape, Concatenate\nfrom keras.models import Model","c06a9364":"import keras.backend as K\n\ndef custom_smape(x, x_):\n    return K.mean(2*K.abs(x-x_)\/(K.abs(x)+K.abs(x_)))","f5b4ccde":"y = Input((len(cont_vars),), name='cont_vars')\nins = [y]\nconcat = [y]\nfor cat in cat_vars:\n    x = Input((1,), name=cat)\n    ins.append(x)\n    x = Embedding(cat_sizes[cat]+1, cat_embsizes[cat], input_length=1)(x)\n    x = Reshape((cat_embsizes[cat],))(x)\n    concat.append(x)\ny = Concatenate()(concat)\ny = Dense(100, activation= 'relu')(y)\n# y = Dense(100, activation= 'relu')(y)\ny = Dense(1)(y)\nmodel = Model(ins, y)\nmodel.summary()\nmodel.compile('adadelta', custom_smape)","59ae42bd":"model.fit(X_train, y_train, 64, 2, validation_data=[X_val, y_val])","14a7707c":"test_preds = model.predict(X_test)\nsample_data = pd.read_csv(\"..\/input\/sample_submission.csv\", index_col=0)\nsample_data['sales'] = test_preds\nsample_data.to_csv('preds.csv')","11b1a746":"Structuring data for training and validation. You will see in the Keras model why we had to form the data like this( A list of numpy arrays).","853d29cc":"Splitting the data if cross validation is needed, but for the submission it is not needed.","1b5c8bcd":"Loading the train data and creating simple features","be21162b":"Determining the embedding size for each category. The formula has been working good in practice.","0689c88e":"Each category has to have its own embedding matrix so they should be individually added as inputs. A very simple model of input-> embedding-> dense-> dense-> output is used","1f40d86c":"Determining the categorical variables. Only year is not categorical, as the value of years are numerically comparable.","653fd5bd":"Only 2 epochs are enough to train the network.","a2fff7a4":"Submitting the test results.","fcff7f55":"# Keras Model","ad61e769":"Loading the test data.","b2d3bc5d":"# Loading the data"}}