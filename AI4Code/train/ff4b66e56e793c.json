{"cell_type":{"cdd76eb2":"code","19cbbeb6":"code","bdc07b34":"code","8e79389e":"code","932d66fb":"code","1f4989a8":"code","56a1af9e":"code","55dca42c":"code","c7fd67c8":"code","ccfb5d6f":"code","cac55893":"code","4e71a719":"code","c56e5f7d":"code","61238f93":"code","808a6909":"code","4aa824f3":"code","35f38212":"code","4bc729a6":"code","dcb158c6":"code","78ae4144":"code","4294c525":"code","68edf964":"code","a384b7cd":"code","3dd745a2":"code","a83435c7":"code","73c0d436":"code","5afb517a":"code","cfc10c71":"code","4d6fafae":"code","92a33d19":"code","f48b28d8":"code","fbdf171b":"markdown","5bc205c5":"markdown","9d652631":"markdown","139e07d0":"markdown","c9490928":"markdown","d8e4ea89":"markdown","f9242f64":"markdown","816b844f":"markdown","3440924a":"markdown"},"source":{"cdd76eb2":"import pandas as pd\nimport re\n\nimport plotly.express as px\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\nimport cufflinks as cf\n\n# Importing Necessary Libraries.","19cbbeb6":"sal = pd.read_csv('..\/input\/sf-salaries\/Salaries.csv')\n\n# Importing \"Salaries.csv\" file as \"sal\".","bdc07b34":"sal\n\n# Top & bottom 5 rows of \"sal\".","8e79389e":"sal.info()","932d66fb":"sal['Id'] = sal['Id'].astype('int32')\nsal['EmployeeName'] = sal['EmployeeName'].astype('string')\nsal['JobTitle'] = sal['JobTitle'].astype('string')\nsal['TotalPay'] = sal['TotalPay'].astype('float32')\nsal['TotalPayBenefits'] = sal['TotalPayBenefits'].astype('float32')\nsal['Agency'] = sal['Agency'].astype('string')\nsal['Status'] = sal['Status'].astype('string')\n\nsal['BasePay'] = pd.to_numeric(sal['BasePay'], errors = 'coerce')\nsal['OvertimePay'] = pd.to_numeric(sal['OvertimePay'], errors = 'coerce')\nsal['OtherPay'] = pd.to_numeric(sal['OtherPay'], errors = 'coerce')\nsal['Benefits'] = pd.to_numeric(sal['Benefits'], errors = 'coerce')\n\n# Converting Data types of all columns.\n\nsal.dtypes","1f4989a8":"sal = sal.drop(columns = ['Notes', 'Status'])\n\n# Removing columns \"Notes & Status\".\n\nsal.columns","56a1af9e":"sal.isna().sum()\n\n# Number of Null values in each columns.","55dca42c":"sal[sal.duplicated()]\n\n# Checking any duplicate rows.","c7fd67c8":"sal.nunique()\n\n# Number of Unique values in each columns.","ccfb5d6f":"sal['JobTitle'] = sal['JobTitle'].str.strip()\n\n# Removing leading and Trailing white spaces in \"JobTitle\" column.\n\nsal['JobTitle'].value_counts().head(60)\n\n# Lets see the Top 60 Jobtitles.","cac55893":"sal.loc[sal['JobTitle'].str.lower().str.contains('transit operator'), 'JobTitle'].value_counts()\n\n# Here I decided to combine these 2.","4e71a719":"sal.loc[sal['JobTitle'].str.lower().str.contains('nurse'), 'JobTitle'].value_counts()\n\n# Here I decided to group these different \"Nurse Jobtitles\" into a single Jobtitle as \"Nurse\".","c56e5f7d":"sal.loc[sal['JobTitle'].str.lower().str.contains('police officer'), 'JobTitle'].value_counts()\n\n# Here as earlier these should be grouped into one Jobtitle.","61238f93":"def JobTitle_New(job):\n    if bool(re.search('nurse\\s|\\snurse\\s|\\snurse$|nurses\\s', job.lower())):\n        return 'Nurse'\n    elif job.lower().__contains__('transit operator'):\n        return 'Transit Operator'\n    elif job.lower().__contains__('clerk'):\n        return 'Clerk'\n    elif job.lower().__contains__('police'):\n        return 'Police'\n    elif job.lower().__contains__('firefighter'):\n        return 'Firefighter'\n    elif job.lower().__contains__('engineer'):\n        return 'Engineer'\n    elif job.lower().__contains__('custodian'):\n        return 'Custodian'\n    elif bool(re.search('sheriff\\s|\\ssheriff$|.sheriff|^sheriff$', job.lower())):\n        return 'Sheriff'\n    elif job.lower().__contains__('eligibility worker'):\n        return 'Eligibility Worker'\n    elif job.lower().__contains__('recreation leader'):\n        return 'Recreation Leader'\n    elif job.lower().__contains__('public svc aide-public works'):\n        return 'Public Svc Aide-Public Works'\n    elif job.lower().__contains__('guard'):\n        return 'Guard'\n    elif job.lower().__contains__('administrative analyst'):\n        return 'Administrative Analyst'\n    elif job.lower().__contains__('patient care assistant'):\n        return 'Patient Care Assistant'\n    elif job.lower().__contains__('sergeant'):\n        return 'Sergeant'\n    elif job.lower().__contains__('attorney'):\n        return 'Attorney'\n    elif job.lower().__contains__('public service trainee'):\n        return 'Public Service Trainee'\n    elif job.lower().__contains__('general laborer'):\n        return 'General Laborer'\n    elif bool(re.search('^porter$|^porter\\s', job.lower())):\n        return 'Porter'\n    elif job.lower().__contains__('gardener'):\n        return 'Gardener'\n    elif job.lower().__contains__('parking control officer'):\n        return 'Parking Control Officer'\n    elif job.lower().__contains__('library'):\n        return 'Library Page & Assistant'\n    elif job.lower().__contains__('food service'):\n        return 'Food Service'\n    elif job.lower().__contains__('public service'):\n        return 'Public Service'\n    elif job.lower().__contains__('librarian'):\n        return 'Librarian'\n    elif job.lower().__contains__('truck driver'):\n        return 'Truck Driver'\n    elif job.lower().__contains__('safety'):\n        return 'Public Safety Officer'\n    elif job.lower().__contains__('social worker'):\n        return 'Social Worker'\n    elif job.lower().__contains__('medical'):\n        return 'Medical Staff'\n    \nsal['JobTitle_New'] = sal['JobTitle'].map(JobTitle_New)","808a6909":"sal.loc[sal['JobTitle_New'].isna(), 'JobTitle_New'] = sal.loc[sal['JobTitle_New'].isna(), 'JobTitle_New'].fillna((sal['JobTitle']).str.capitalize())\n\n# Rest of the rows in column \"JobTitle_New\" is filled with Jobtitle in \"JobTitle\" column. Jobtitle string is Capitalised to make it unifrom.","4aa824f3":"sal['JobTitle_New'].value_counts().head(50)\n\n# Top 50 Jobtitles and Counts in new column \"JobTitle_New\".","35f38212":"sal['JobTitle_New'] = sal['JobTitle_New'].astype('string')\n                          \n# Converting data type of column \"JobTitle_New\".","4bc729a6":"sal.isna().sum()\n\n# Number of Null values in each columns.","dcb158c6":"sal.shape\n\n# Total Rows & Columns.","78ae4144":"sal.loc[sal['JobTitle'] == \"Not provided\"]\n\n# The Rows in which \"JobTitle\" column does not have any Jobtitle.","4294c525":"sal = sal.loc[sal['JobTitle'] != \"Not provided\"]\n\n# Removing the Rows in which \"JobTitle\" column does not have any Jobtitle.","68edf964":"sal.isna().sum()\n\n# Number of Null values in each columns.","a384b7cd":"sal.loc[sal['TotalPayBenefits'] < 0]\n\n# These rows contain Total Pay Benefits as negative values which is not possible.","3dd745a2":"sal = sal.loc[sal['TotalPayBenefits'] >= 0]\n\n# Removing the rows containing Total Pay Benefits as negative values.","a83435c7":"sal.isna().sum()\n\n# Number of Null values in each columns.","73c0d436":"sal.loc[sal['Benefits'].isna(), 'Benefits'] = sal.loc[sal['Benefits'].isna(), 'Benefits'].fillna(sal['TotalPayBenefits'] - sal['TotalPay'])\n\n# Filling the Null values in \"Benefits\" column.\n# The \"Benefits\" column can be calculated by Subtracting \"Total Pay\" column from \"Total Pay Benefits\" column.","5afb517a":"sal.isna().sum()\n\n# Number of Null values in each columns.","cfc10c71":"sal.loc[sal['BasePay'].isna(), 'BasePay'] = sal.loc[sal['BasePay'].isna(), 'BasePay'].fillna(round(sal['TotalPay'] - sal['OtherPay'] - sal['OvertimePay'],0).abs())\n\n# Filling the Null values in \"BasePay\" column.\n# The \"BasePay\" column can be calculated by Subtracting \"OvertimePay\" column and \"OtherPay\" column from \"Total Pay\" column.","4d6fafae":"sal.isna().sum()\n\n# Number of Null values in each columns.","92a33d19":"sal = sal.reset_index()\nsal = sal.drop(columns=['index'])\nsal","f48b28d8":"sal_1 = sal.groupby('JobTitle_New', as_index=False).count().sort_values('Id', ascending=False).head(50)\n\nfig_1 = px.bar(sal_1, x = 'JobTitle_New', y = 'Id',\n        labels = {'Id': 'Count', 'JobTitle_New': 'Job Title'},\n        color = 'JobTitle_New',\n        title = 'Top 50 In-Demand Jobs From 2011 To 2014')\nfig_1.update_layout(showlegend=False)\nfig_1.show()","fbdf171b":"# **2. Process**","5bc205c5":"# In the results, we can see that the top Jobtitle is \"Transit Operator\". But in the 7th row also we can see \"TRANSIT OPERATOR\".\n# These 2 are considered as 2 different Jobtitles. So the count of Jobtitles are not accurate.\n# This pattern can be seen in almost all Jobtitles. Lets see a few examples.","9d652631":"# **1. Introduction**","139e07d0":"# I'm going to create a new column \"JobTitle_New\". In this column, I'm grouping appropriate Jobtitles in existing column \"JobTitle\".\n# Only the top few Jobtitles are grouped because it takes a lot of time to group the rest.","c9490928":"I have done rest of the visualisations in Tableau. Please check it out [**Here (Link to Tableau)**](https:\/\/public.tableau.com\/app\/profile\/joseph.arackaparambil\/viz\/Salaries_16406203791290\/Dashboard_1).","d8e4ea89":"# **3. Analyze & Visualization**","f9242f64":"> # 2.1\n> \n> # **Cleaning Process**","816b844f":"# Now we can take the case of \"JobTitle\" column.\n# It contains 2159 unique values. It means it contains 2159 Jobtitles.","3440924a":"**SF Salaries** Dataset contains **San Francisco City employee salary data**. This data contains the names, job title, and compensation for San Francisco City employees on an annual basis from **2011 to 2014**. You can check the dataset **[Here](https:\/\/www.kaggle.com\/kaggle\/sf-salaries)**\n\nAs a beginner, I tried to clean the dataset using Python."}}