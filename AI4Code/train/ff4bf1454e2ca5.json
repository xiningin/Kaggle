{"cell_type":{"6134d513":"code","3d1104cf":"code","03425027":"code","222cfa6d":"code","5fbdc9f4":"code","d890e1f3":"code","148bbe0f":"code","ca39f93b":"code","5df754c3":"code","0a2b4b95":"code","e0c522ee":"code","3e34c31a":"code","ac5e9413":"code","3872301e":"code","91708521":"code","7680be22":"code","5340b19e":"code","e0ec687d":"code","46394d63":"markdown","1e931d16":"markdown","31720a5d":"markdown","24763f83":"markdown","fa391682":"markdown","7dd115dc":"markdown","5ee60fc8":"markdown","c4f38f83":"markdown","ec767679":"markdown","8c69577d":"markdown","7e150eed":"markdown","357dfb3c":"markdown","f7f24954":"markdown","044215a0":"markdown","68f1b3d5":"markdown","8c7f6148":"markdown","88d31a42":"markdown","4585e38e":"markdown"},"source":{"6134d513":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.ensemble import RandomForestClassifier","3d1104cf":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","03425027":"train_data.info()","222cfa6d":"train_data[\"Age_Filled\"] = train_data[\"Age\"].fillna(train_data[\"Age\"].mean())\ntest_data[\"Age_Filled\"] = test_data[\"Age\"].fillna(test_data[\"Age\"].mean())","5fbdc9f4":"train_data['Survived'].groupby(train_data['Pclass']).mean()","d890e1f3":"train_data[\"Titles\"] = train_data[\"Name\"].str.split(\" \").str.get(1)\ntest_data[\"Titles\"] = test_data[\"Name\"].str.split(\" \").str.get(1)\ntrain_data[\"Titles\"].value_counts()","148bbe0f":"train_data['Titles']=train_data.Name.str.extract('([A-Za-z]+)\\.')\ntrain_data['Titles'].replace([\"Dr\", \"Rev\", \"Major\", \"Col\", \"Mlle\", \"Capt\", \"Jonkheer\", \"Don\", \"Mme\", \"Ms\", \"Countess\", \"Lady\", \"Sir\"],\n                             [\"Mr\", \"Unknown\", \"Mr\", \"Unknown\", \"Miss\", \"Mr\", \"Unknown\", \"Mr\", \"Miss\", \"Miss\", \"Mrs\", \"Mrs\", \"Mr\"],inplace=True)","ca39f93b":"test_data['Titles']=test_data.Name.str.extract('([A-Za-z]+)\\.')\ntest_data['Titles'].replace([\"Col\", \"Rev\", \"Ms\", \"Dr\", \"Dona\"],\n                             [\"Unknown\", \"Unknown\", \"Miss\", \"Mr\", \"Miss\"],inplace=True)","5df754c3":"train_data[\"Survived\"].groupby(train_data[\"Titles\"]).mean()","0a2b4b95":"test_data[\"Fare_Filled\"] = train_data[\"Fare\"].fillna(train_data[\"Fare\"].mean())","e0c522ee":"y_train = train_data[\"Survived\"]","3e34c31a":"train_data[\"Sex_cat\"] = train_data[\"Sex\"].astype(\"category\")\ntest_data[\"Sex_cat\"] = test_data[\"Sex\"].astype(\"category\")\n\ntrain_data[\"Sex_cat_codes\"] = train_data[\"Sex_cat\"].cat.codes\ntest_data[\"Sex_cat_codes\"] = test_data[\"Sex_cat\"].cat.codes\n\ntrain_data[\"Titles_cat\"] = train_data[\"Titles\"].astype(\"category\")\ntest_data[\"Titles_cat\"] = test_data[\"Titles\"].astype(\"category\")\n\ntrain_data[\"Titles_cat_codes\"] = train_data[\"Titles_cat\"].cat.codes\ntest_data[\"Titles_cat_codes\"] = test_data[\"Titles_cat\"].cat.codes","ac5e9413":"train_data.columns","3872301e":"new_train_data = train_data.drop([\"PassengerId\", \"Survived\", \"SibSp\", \"Parch\", \"Cabin\", \"Embarked\", \"Ticket\", \"Age\", \"Name\", \"Sex\", \"Sex_cat\", \"Titles\", \"Titles_cat\"], axis = 1)\nnew_test_data = test_data.drop([\"PassengerId\", \"Fare\", \"SibSp\", \"Parch\", \"Cabin\", \"Embarked\", \"Ticket\", \"Age\", \"Name\", \"Sex\", \"Sex_cat\", \"Titles\", \"Titles_cat\"], axis = 1)","91708521":"X_test = new_test_data.copy()\nX_train = new_train_data.copy()","7680be22":"model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X_train, y_train)","5340b19e":"predictions = model.predict(X_test)","e0ec687d":"output = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","46394d63":"Having done this I'll now repeat the same action for the test set. To further exemplify how this is done I'd like to create a fictive person, `Dona. Morits Veronica`. In this event the person's title would show up as `Dona`. In order to figure out which title is appropriate for them I run the following code `df[df[\"rowWithTitles\"].str.contains(\"theirName\")]` which would bring up her row from the df. Here I'll look at her age and who she's traveling with in order to determine which title fits her the best. Let's say that she is 39 and isn't traveling with anyone else it can be assumed she is unmarried and therefore will be given the `Miss` title.","1e931d16":"I'm importing the necessary csv files, which is split into two different types. One is a training set, which is used to train the machinelearning algorith while the other is a test set used to test it in the end. This split is important because otherwise you'll end up overfitting, in other words; the algorithm would end up being carefully tailored to the specific data giving a generally unaccurate result. In addition to that, it's important to apply the same changes and processes to both train and test dataset.","31720a5d":"With that out of the way I'll then transform the necessary features into a categorical type. When doing this I chose to create a new column and give it the suffix `_cat` and `_cat_codes` so that I don't start mixing it up and forgetting which is which. ","24763f83":"Lastly this will be written to a file, which can then be submitted on the kaggle website. It comes in the form of a .csv file. Here it will use the prediction that was created earlier.","fa391682":"These values shows us that there's undoubtedly a correlation between survival and which class the passenger belonged to. Knowing this could become important later when chosing which features to include.\n\nThis is going to be the general direction that I will focus on. In other words, I'd like to examine the chance of survival based mainly on parameters that points to socioeconomic status.\n\nAnother indicator of ones status is their title and the passengers onboard the titanic mostly shared the following titles:\n- `Mr.` - Men 18 years old or above.\n- `Miss.` - Women younger than 30 years, unmarried\n- `Mrs.` - Women 30 years old or above, married.\n\nA new column containing the title of each passenger is created, using the same method as earlier when targeting the surname. I use the `.value_counts()` to check that the values seems inline with the amount of passengers onboard.","7dd115dc":"Getting the predictions from running the model on the test data.","5ee60fc8":"Exploring the data in order to get a general sense of its state, which  will enlighten me about potential missing data, size, columns et cetera.","c4f38f83":"I'll then define `X_test` and `X_train`","ec767679":"At this point I've identified the features I'd like to include in my model, these are `Titles`, `Pclass`, `Sex`, `Age_Filled` and `Fare\/Fare_Filled`. Now I need to start working on my model and transforming the features so that I can use them. In other words, the feature `Sex` is currently filled with strings that says `Male` or `Female`. These non-nummerical values don't fit into the model and therefore has to be transformed in a way so that they can be observed in a numerical value. The result of this is that `Male` will be represented by the integer `0` and `Female` by `1`.\n\nInitially I start out by declaring the y variable, which is needed for training the algorithm.","8c69577d":"**Oliver \u00d8dum Larsen - xgk459**","7e150eed":"The model is based on the RandomForestClassifier, which works by creating a multitude of random decision trees (). A decision tree presents options such as whether the person was a man or a woman and choose one each time. The goal of this is that in the end it will arrive at a prediction, which in this case will be predicting survival. In this case it works really well because there's just five different features and a fair amount of data with hundreds of rows. It can create a lot of random decision trees without any of them becoming too deep, which would risk overfitting.","357dfb3c":"Taking a step back and focusing on just the women, namely the two titles `Miss.` and `Mrs.`, it seems to mirror my assumption that socioeconomic status played a noticeable role. This is seen in the sizeable increase from 70% survival rate that women with the `Miss.` title had, to approximately 80% survival rate that women with the `Mrs.` title had. In other words, women who were married were more likely to survive than those who weren't, since they're likely of higher status with more wealth.\n\nLastly the `Fare` column that cointains the fare price could be the same type of indicator as `Pclass`. As such, I'll fill in the one empty row in the test set with the mean fare value.","f7f24954":"From earlier we know that the `Pclass` had an impact on a persons chance of survival. Since this is a new dataset I'd like to check if this is still the case. This can be done by looking at the mean survival rate grouped by each passenger class.","044215a0":"It appears that the `Cabin`, `Age` and `Embarked` columns all have missing values. Knowing this is good since it tells me that I should find a way to treat the empty rows.\n\nIn this case I opt for filling the missing values with the mean age. To do this I create a new column that consists of the original `Age` values, and fill the empty ones with the mean value.","68f1b3d5":"Both the `train_data` and `test_data` will have a lot of columns by now, this can be seen with the `.columns` command.","8c7f6148":"There's a lot of different titles and I'd like to reduce the amount of outliers so that there's only around ~ 5 titles in total, instead of the initial 31. To do this I'll change the titles such as `Capt` to `Mr.`. A way to look up each individual is by running `df[df['column'].str.contains(\"\")]`. In the cases where it isn't possible to determine which title fits the best, I'll put them into the `Unknown` group.\n\nI target the column with the titles and use the `Series.str.extract` followed by a regular expression that targets any lower\/uppercased character followed by a `.`. This is done because informal titles such as `Pelsmaeker,` aren't relevant. Doing this will exclude these making it possible to only keep the titles I want to work with. I can now replace each title with an appropriate new title.","88d31a42":"Following this I use the `.groupby()` function to gauge whether or not there's a correlation between ones title and survival, as well as check that only the 5 specified titles remain.","4585e38e":"A lot of these aren't needed and therefore I'll drop them."}}