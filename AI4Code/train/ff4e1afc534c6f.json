{"cell_type":{"aa92a264":"code","6d877679":"code","1276d079":"code","f6f9cf09":"code","9d56c2a2":"code","23dab286":"code","1a9961d5":"code","98cf75cc":"code","6798bcda":"code","a6f5a295":"code","298344f6":"code","6b2abc1b":"code","a4f9c792":"code","c6ec1e4f":"code","cfebe219":"code","c2cc04cd":"code","bb544026":"code","ff19c46e":"code","a15abed1":"code","6f77ef75":"code","433a0562":"code","f88857a2":"code","8a44fde9":"code","ec9ff5e1":"code","e2f3aa9f":"code","aeef7c88":"code","bd510211":"code","95ae931f":"code","b2902b95":"code","7c5aa55e":"code","95cf5c6d":"code","3823cb79":"code","1045121b":"code","23797a34":"code","c8e1a15d":"code","d5ab4aab":"code","7ef2a4f3":"code","cf26968d":"code","ff8808de":"code","9211ffaa":"code","9ea5b366":"code","57206a65":"code","6c92800c":"code","58ea58b7":"code","16900c5e":"code","2e1422fc":"code","523eafb1":"code","ad22fce5":"code","c7ab4ec1":"code","6986233f":"code","24bb73fc":"code","c32d0a92":"code","2de032bf":"code","aae2d1fe":"code","67b196fe":"code","f472f7ff":"code","31f3e6dc":"code","56aaa80c":"code","47a7075f":"code","f6664471":"code","17ad0d58":"markdown","dd1273a4":"markdown","84e984b2":"markdown","7f97a7f2":"markdown","d769241a":"markdown","4bd0dea6":"markdown","240cc399":"markdown","96eecc90":"markdown","98d2fcbd":"markdown","f96e587f":"markdown","2d72d6be":"markdown","48883903":"markdown","eff32a20":"markdown","1ef677c7":"markdown","ed19219d":"markdown","e6922748":"markdown","ffe5489d":"markdown","4d2afa0f":"markdown","2a69fe64":"markdown","ac724b35":"markdown","0e9bdf4f":"markdown","eb6bacf4":"markdown","2cd02030":"markdown","dc9ab2d7":"markdown","5e65d10e":"markdown","70ee3cd3":"markdown","e5018708":"markdown"},"source":{"aa92a264":"#basic imports\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set()\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nprint(os.walk('\/kaggle\/input'))","6d877679":"#Import Train and Test data\ntrain_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","1276d079":"train_data.head()","f6f9cf09":"test_data.head()\n","9d56c2a2":"#Coorlation of people who survived given that they are a female\nwomen = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","23dab286":"def bar_chart(feature):\n    survived = train_data[train_data['Survived']==1][feature].value_counts()\n    dead = train_data[train_data['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","1a9961d5":"\ntrain_test_data = [train_data, test_data] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n\ntitle_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\nprint(train_data['Title'])\n","98cf75cc":"train_data.head()\n","6798bcda":"bar_chart('Title')","a6f5a295":"sex_mapping = {\"male\": 0, \"female\":1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)\nprint(train_data['Sex'])","298344f6":"bar_chart('Sex')","6b2abc1b":"train_data.head(10)\ntrain_data[\"Age\"].fillna(train_data.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest_data[\"Age\"].fillna(test_data.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\n","a4f9c792":"train_data.head(10)","c6ec1e4f":"\nfacet = sns.FacetGrid(train_data, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train_data['Age'].max()))\nfacet.add_legend()\n \nplt.show()","cfebe219":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","c2cc04cd":"train_data.head(100)","bb544026":"bar_chart('Age')","ff19c46e":"Pclass1 = train_data[train_data['Pclass'] == 1]['Embarked'].value_counts()\nPclass2 = train_data[train_data['Pclass'] == 2]['Embarked'].value_counts()\nPclass3 = train_data[train_data['Pclass'] == 3]['Embarked'].value_counts()\n\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","a15abed1":"for data in train_test_data:\n    data['Embarked'] = data['Embarked'].fillna(\"S\")\n    \nembarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)\n","6f77ef75":"train_data.head(10)","433a0562":"train_data[\"Fare\"].fillna(train_data.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest_data[\"Fare\"].fillna(test_data.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain_data.head(20)","f88857a2":"facet = sns.FacetGrid(train_data, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train_data['Fare'].max()))\nfacet.add_legend()\n \nplt.show()","8a44fde9":"\nfacet = sns.FacetGrid(train_data, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train_data['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 30)","ec9ff5e1":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","e2f3aa9f":"train_data.Cabin.value_counts()\n","aeef7c88":"test_text = 'abc'\nprint(test_text[:1])\nfor data in train_test_data:\n    data[\"Cabin\"] = data[\"Cabin\"].str[:1]\ntrain_data.head()","bd510211":"Pclass1 = train_data[train_data['Pclass'] == 1]['Cabin'].value_counts()\nPclass2 = train_data[train_data['Pclass'] == 2]['Cabin'].value_counts()\nPclass3 = train_data[train_data['Pclass'] == 3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1,Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))\n","95ae931f":"train_data.head()","b2902b95":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)\n    ","7c5aa55e":"#fill in missing values\ntrain_data[\"Cabin\"].fillna(train_data.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest_data[\"Cabin\"].fillna(test_data.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","95cf5c6d":"train_data[\"FamilySize\"] = train_data['SibSp'] + train_data['Parch'] + 1\ntest_data[\"FamilySize\"] = test_data['SibSp'] + test_data['Parch'] + 1","3823cb79":"\nfacet = sns.FacetGrid(train_data, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train_data['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","1045121b":"#adding it to the dataset\nfamily_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","23797a34":"train_data.head()","c8e1a15d":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain_data = train_data.drop(features_drop, axis =1)\ntest_data = test_data.drop(features_drop, axis=1)\ntrain_data = train_data.drop(['PassengerId'], axis=1)","d5ab4aab":"train_data.head()","7ef2a4f3":"test_data.head()","cf26968d":"bar_chart('Pclass')\n","ff8808de":"train_data.shape\ntest_data.shape","9211ffaa":"#imports\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder\nfrom sklearn import model_selection\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score\n\nimport numpy as np\n","9ea5b366":"train_data.info","57206a65":"train_data.head()","6c92800c":"target = train_data['Survived']\nid = test_data['PassengerId']\n\ntrain_data.drop('Survived', axis=1, inplace = True)\ntrain_data.drop('Name', axis=1, inplace = True)\n\ntest_data.drop('Name', axis=1, inplace = True)\ntest_data.head()\ntrain_data.head()\n\ntrain = train_data\ntest = test_data","58ea58b7":"#X_train, X_test, y_train, y_train = train_test_split(train_data, survived, random_state=0, test_size=0.2, shuffle=False)","16900c5e":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits = 10, shuffle = True, random_state = 0)\n\n\ntrain_data.shape, target.shape\ntrain_data.head()\n","2e1422fc":"test_data.head()","523eafb1":"test.head()","ad22fce5":"#coltest = train.drop('Cabin', axis=1)\n#coltest = coltest.drop('Embarked', axis=1)\n#coltest = coltest.drop('Title', axis=1)\n#coltest = coltest.drop('Age', axis=1)\n\n\nclf = KNeighborsClassifier(n_neighbors = 50)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train, target, cv = k_fold, n_jobs = 1, scoring = scoring)\nprint(score)\nprint(np.mean(score))\n\n","c7ab4ec1":"clf = LogisticRegression()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train, target, cv = k_fold, n_jobs = 1, scoring = scoring)\nprint(score)\nprint(np.mean(score))","6986233f":"from sklearn.linear_model import LogisticRegression\nclf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train, target, cv = k_fold, n_jobs = 1, scoring = scoring)\nprint(score)\nprint(np.mean(score))","24bb73fc":"clf = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=1)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train, target, cv = k_fold, n_jobs = 1, scoring = scoring)\nprint(score)\nprint(np.mean(score))","c32d0a92":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train, target, cv = k_fold, n_jobs = 1, scoring = scoring)\nprint(score)\nprint(np.mean(score))","2de032bf":"train.head()","aae2d1fe":"test.head()","67b196fe":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train, target, cv = k_fold, n_jobs = 1, scoring = scoring)\nprint(score)\nclf.fit(train, target)\nprint(np.mean(score))\n\ny_pred = clf.predict(test)\n\npred=pd.DataFrame(y_pred)\nprint(pred)","f472f7ff":"'''xgb = xgb.XGBClassifier(random_state=0)\nxgb.fit(train, target)\npreds = xgb.predict(test)\nprint('XGBoost: ', accuracy_score(y_val, preds))\n\ndef create_model(trial):\n    max_depth = trial.suggest_int(\"max_depth\", 2, 30)\n    n_estimators = trial.suggest_int(\"n_estimators\", 1, 500)\n    learning_rate = trial.suggest_uniform('learning_rate', 0.0000001, 1)\n    gamma = trial.suggest_uniform('gamma', 0.0000001, 1)\n    model = XGBClassifier(learning_rate=learning_rate, n_estimators=n_estimators, max_depth=max_depth, gamma=gamma, random_state=0)\n    return model\n\ndef objective(trial):\n    model = create_model(trial)\n    model.fit(X, y)\n    preds = model.predict(X_val)\n    score = accuracy_score(y_val, preds)\n    return score\n\nstudy = optuna.create_study(direction=\"maximize\", sampler=sampler)\nstudy.optimize(objective, n_trials=50)\n\nxgb_params = study.best_params\nxgb_params['random_state'] = 0\n'''","31f3e6dc":"'''xgb = XGBClassifier(**xgb_params)\nxgb.fit(X, y)\n#preds = xgb.predict(X_val)\n#print('Optimied XGBoost: ', accuracy_score(y_val, preds))'''\n","56aaa80c":"\n\npred=pd.DataFrame(y_pred)\nsub = pd.concat([test_data['PassengerId'],pred], axis=1)\nsub.columns=['PassengerId','Survived']\nsub.to_csv('submission66.csv', index = False)\nprint(sub.to_csv)","47a7075f":"\n#submission = pd.read_csv('submission1.csv')\n#submission.head()","f6664471":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train, target, cv = k_fold, n_jobs = 1, scoring = scoring)\nprint(score)\nprint(np.mean(score))","17ad0d58":"\nReferences\n\nMinsuk Heo \ud5c8\ubbfc\uc11d\nThis notebook is created by learning from the following notebooks:\n\nMukesh ChapagainTitanic Solution: A Beginner's Guide\nHow to score 0.8134 in Titanic Kaggle Challenge\nTitanic: factors to survive\nTitanic Survivors Dataset and Data Wrangling","dd1273a4":"# **KNN**","84e984b2":"# **Title**","7f97a7f2":"Let's use train_test_split to split our data for validation!","d769241a":"# **Random Forest**","4bd0dea6":"# **Split Data**","240cc399":"# **SVM**","96eecc90":"1. IMPORTS\n2. EDA\n3. FEATURE ENGINEERING\n4. MODELING (KNN, DECISION TREE, RANDOMFOREST, ETC)\n5. HYPER PARAMATER TUNING\n6. XG BOOST","98d2fcbd":"# **Cabin**","f96e587f":"Binning\/Converting Numerical Age to Categorical Variable\n\nfeature vector map:\nchild: 0\nyoung: 1\nadult: 2\nmid-age: 3\nsenior: 4","2d72d6be":"# **Class**","48883903":"![](http:\/\/)**Hey guys, thanks for stopping by my notebook. I will be going over step by step on how to finish the Titanic competition with many different techniques. If you found this helpful, please drop an upvote : )**\n","eff32a20":"# **Family Size**","1ef677c7":"![](https:\/\/kwmp.ca\/wp-content\/uploads\/2018\/04\/titanic-the-musical-768x403.jpg)","ed19219d":"# **Fare**","e6922748":"If you hope you place high on the leaderboard, I suggest you check out my titanic model with neural networks! (Linked below)\nhttps:\/\/www.kaggle.com\/sshikamaru\/titanic-keras-nn","ffe5489d":"# **Decision Tree**","4d2afa0f":"# **Embarked**","2a69fe64":"# **Modeling**","ac724b35":"# **Dropping**","0e9bdf4f":"# **Feature Enineering**","eb6bacf4":"#  **Cross Validation K fold**","2cd02030":"# **Naive Beyes**","dc9ab2d7":"# **Gender**","5e65d10e":"# **Age**","70ee3cd3":"# **XGBOOST**","e5018708":"# **Introduction**"}}