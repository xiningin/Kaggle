{"cell_type":{"52c91e52":"code","1b7db664":"code","676afccf":"code","829e223e":"code","888c8b53":"code","6c0974b3":"code","7b418083":"code","78953ca1":"code","59a98c48":"code","a3c16d26":"code","e1626666":"code","65ee3f51":"code","bf0893b6":"code","e0e283f1":"code","0c8e8a09":"code","54d64b66":"code","f659e66f":"code","e29f065f":"markdown","6cbebbb2":"markdown","31de9ba2":"markdown","42a0cc4e":"markdown","71167b8e":"markdown","bc1e2d78":"markdown","187bae85":"markdown","d80cc66b":"markdown","0e0afce6":"markdown","38d08ffc":"markdown"},"source":{"52c91e52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1b7db664":"# Read .csv file into pandas dataframe\ndata = pd.read_csv('\/kaggle\/input\/condon-usage-dataset\/codon_usage.csv', low_memory=False)\ndata=data.set_index('SpeciesID')\ndata.head()","676afccf":"# Checking the shape of data \nprint(\"The shape of data of is \" ,data.shape)\n# info of data \ndata.info()","829e223e":"# Checking for null values\nimport seaborn as sns \nsns.heatmap(data.isnull(), cbar=False)","888c8b53":"# lets check some value_counts for kingdom \ndata['Kingdom'].value_counts()","6c0974b3":"# Columns is a float value with type object we have to change the data type\ndata['UUU']=data['UUU'].replace(['non-B hepatitis virus','12;I'],'NaN')\ndata['UUC']=data['UUC'].replace('-','NaN')\ndata['UUU'] = data['UUU'].astype('float32')\ndata['UUC'] = data['UUC'].astype('float32')\ndata.dropna(inplace=True)","7b418083":"# spilt dataset into X & Y \nX = data.drop(columns = ['Kingdom','SpeciesName'], axis = 1 )\ny = data['Kingdom']","78953ca1":"# lets chk the shape of X\nprint(\"The shape of is X \", X.shape)\nprint(\"The shape of is y \", y.shape)","59a98c48":"# Describe the dataset\nX.describe()","a3c16d26":"# let's see how data is distributed for every column.\nimport matplotlib.pyplot as plt\nplt.figure(figsize = (20, 25))\nplotnumber = 1\nfor column in X:\n    if plotnumber <= 9:\n        ax = plt.subplot(3, 3, plotnumber)\n        sns.distplot(X[column])\n        plt.xlabel(column, fontsize = 15)\n        \n    plotnumber += 1\nplt.show()","e1626666":"# Checking the value counts of target variable\ny.value_counts()","65ee3f51":"# splitting the data into testing and training data.\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","bf0893b6":"# Decision Tree\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier\n\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)\n\ny_pred = dtc.predict(X_test)\n\ndtc_train_acc = accuracy_score(y_train, dtc.predict(X_train))\ndtc_test_acc = accuracy_score(y_test, y_pred)\n\nprint(f\"Training Accuracy of Decision Tree Model is {dtc_train_acc}\")\nprint(f\"Test Accuracy of Decision Tree Model is {dtc_test_acc}\")","e0e283f1":"# hyper parameter tuning\n\nfrom sklearn.model_selection import GridSearchCV\n\ngrid_params = {\n    'criterion' : ['gini', 'entropy'],\n    'max_depth' : [3, 5, 7, 10],\n    'min_samples_split' : range(2, 10, 1),\n    'min_samples_leaf' : range(2, 10, 1)\n}\n\ngrid_search = GridSearchCV(dtc, grid_params, cv = 5, n_jobs = -1, verbose = 1)\ngrid_search.fit(X_train, y_train)\n","0c8e8a09":"# best parameters and best score\nprint(grid_search.best_params_)\nprint(grid_search.best_score_)","54d64b66":"dtc = grid_search.best_estimator_\ny_pred = dtc.predict(X_test)\ndtc_train_acc = accuracy_score(y_train, dtc.predict(X_train))\ndtc_test_acc = accuracy_score(y_test, y_pred)\n\nprint(f\"Training Accuracy of Decesion Tree Model is {dtc_train_acc}\")\nprint(f\"Test Accuracy of Decesion Tree Model is {dtc_test_acc}\")","f659e66f":"# Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier\n\nrand_clf = RandomForestClassifier(criterion = 'entropy', max_depth = 10, max_features = 'sqrt', min_samples_leaf = 3, min_samples_split = 4, n_estimators = 180)\nrand_clf.fit(X_train, y_train)\n\ny_pred = rand_clf.predict(X_test)\n\nrand_clf_train_acc = accuracy_score(y_train, rand_clf.predict(X_train))\nrand_clf_test_acc = accuracy_score(y_test, y_pred)\n\nprint(f\"Training Accuracy of Random Forest Model is {rand_clf_train_acc}\")\nprint(f\"Test Accuracy of Random Forest Model is {rand_clf_test_acc}\")","e29f065f":"# **\ud83d\udd25 Best Model.**","6cbebbb2":"**We will apply some Hyperametertuing on DTC model for better accuracy.**","31de9ba2":"#### **STEP - 04 \ud83d\ude47 Model Building**\n\n**We will train Decision tree, Random forest & at last we will select our best model.**","42a0cc4e":"# **STEP 01 - \u2699\ufe0f Data Pre Processing**","71167b8e":"**We can see that the distribution of data is normal. we will move further.**","bc1e2d78":"***We will select Random forest becuase it gives best accuracy of 95%. We will use Random Forest Model for production.***\n\n<img src= \"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAMAAAAJbSJIAAABhlBMVEX\/\/\/\/\/5AD\/5gD\/5wD\/6QD\/4gD\/zAD\/\/f\/\/\/\/3\/6wD\/K5\/\/\/vT\/gWX\/1+n\/9\/\/\/1QD\/yOL\/5vb\/617\/1Bb\/+dD\/\/OX\/\/vf\/5Rz\/ml7\/lmf\/\/OH\/rFH\/\/e3\/7nj\/HqH\/+tf\/7XD\/uUD\/2gz\/hHX\/6D3\/8ZL\/6lX\/86H\/98D\/QJ7\/WrT\/OqL\/xiv\/+tL\/5iz\/9a3\/8Ij\/WpL\/b3n\/l8v\/9az\/+Mb\/7\/j\/O5T\/rEL\/6Ur\/jnH\/dr3\/dor\/197\/Ep7\/8pn\/o1P\/u9r\/wwD\/m7v\/q9b\/c27\/0Sv\/vzb\/fbP\/h7b\/Tpr\/aK3\/4O7\/ud3\/Z4n\/ZoL\/r9H\/t5n\/sHv\/zNf\/hML\/poX\/1Fb\/zF7\/w6r\/K5L\/jsb\/C5b\/E6X\/Z5L\/jJP\/Yq7\/S5X\/eX\/\/Uof\/w8P\/mon\/r7f\/w0v\/viz\/pU3\/sKH\/4br\/jqv\/tLn\/mnP\/hHH\/45P\/08j\/imD\/eMX\/oKL\/sTf\/cqj\/0H3\/n7f\/q4\/\/l1D\/0\/L\/7OL\/pnX\/0NX\/xLf\/wGr\/tIv\/1Jx+2H+cAAATKElEQVR4nO2d+3vaRrrH0c2ACARjLjYGYWNjg8GAL+BrhB27vt+aZLu1cY4vmzbbbtM2PXFPLs3Zc\/7zMxJIet+RBLaDd3ueZ755+oM1ktBHM\/POO++8o3o8TExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMd1Yglmyrlo8m4\/\/ux7mHUplotDY\/WW3kGtNxn610JFEm4iQijpO4dMB2g0AuEomkq9V0rlHJ\/Ese+W6aLCfIg7dUjtqKIxyliu2UEVBaztkq2ZfJZzLJQDxge3s9VSCQrFXmcyPzSaoglgDPJ\/zFSxXXaEBuKUWd8iTLw\/IGVextaEcT5aXISKVN7\/P0DjYVS8VIs0qml4wH+KYfnzEPn87\/aB2X+mD9tJWnfmNuCxEmcLl347FVrNNPjyxNTFQb85XY\/ft0IJmJVnLVyES5nJC4kXqgbNXSaCHYgXD5Bb5Txg7IRagH28GEXBn11LMFUMXj5NLNvxp\/S+PT94CLT89XIwkNzJS0+q0ICOUFVIuY8CuKsOpAyFENnSbkRkBh6BQRJutnap\/19wh8GfFUyudeq\/FANF+Zn5+0WiPQ8ap1T2G02ESVmOtEmCrbbkaU60LIzVuF9QUZFicPm+cl6+9EzDoxN07ewEh6sjadsvfSJKk2p0fRxXMv36A6PEWEqJb8X82hG0863rEcQyfZCRPWmBE6Vb4XAOFmUxm0niZhNAfv+n9YR8tp\/AMeT8WVTmfaLg5DQuX0AF6MRgP\/VxuwzOfUIjja1uxsC\/QJE2ZrCxVk8Otcfl1Wlv0WYa11VvBiAdgjTqLscXz8DoTi6Pkp7Ic+THh9Au9sHypaiqBmtLMo2s6oGoXeKUwYPoWEUouwPiWvwXu0D5tKurdQB8JBZSoEXw8mvESEDkOFrgSyNU6EVjVjwkpQVr6yCLlJffzdUa942NLTVEdMArvpIHEUEV51IOSzC5AwBu0M6mvI1jgSjhtd6UKB1VPpLyozHDVAhpszyGko065fp27IC6I0Bq2XMIsJAxPw7IEFOOJDOyNmwZvnxg0rr1XBrhMhV23Xw+45JMzVi\/LegPU42quqF2R8B5vr6GjweFHktUrZfj2mwBGJEO5Dz4wm\/AiqFxQJowuD8Clq4B6bjoTcpCNhaF+BhGntDHUZvj2rgZi\/AZ\/RfKKtxcGr46NrRVZUlSLcga8nAM0UJpwGBdLLFy9hQxoBt3AhHG+1tQ31Cjx\/xIsJIx7PujKDOqFph01A34TWFkW\/328ZbX5rRlGUZrG4f7O7ufk3YIqEVWUH1iHAoAh9aXDV6znPx6fwOYD77ULIRQJtQlAc8dzIxQHoxh0UC9vw+nKSdv49nvzS49GhoUdHq4smon\/oXJZvgvW6fnYNEi6fwzqMIVOKCOGkQ1wOe0Jv4INUrOdwI2y100P1SAJ1Fj+TZTD0lQMr6s\/ocvvkjCh+MLevqmpxzGgOvHSkyIW6UQ4J+YG3r4h\/V5ls5NLppSU80CBC6LDyL8nNvoMGb9zyKF0JE1FHQujklE\/UI9RGc27zKm8wGOw3japOuGJVMhxOiAlyfh6d0PJZA8Cf0RopcTxQM7UM3qEbIbdEXkOYIpyTFTB4+X++LEGPaIKefGIBwhlZPrMIXZHshKa\/A\/0Z\/7JWtXVkTdMW4d9d31mVJiwHTmTomPJSFl6coOfnlBrWddeyumE\/fgtCs2kDf4ZYUn0I\/QE2U2tasL7sSkhmw8HmNSBMBNYRIYeaqDHCuMqcJvBZWVYt7wRNkDoTmnPHFDzct6sfe4KaqWkSKEL0zJFU8HQGEsYoQiw6fEDLfO1kiiQ3LcK02w0dCI06hG6E\/23L\/vRDD9MatzAhv70FO1b6ABFy0bCsDHUltA8YLZmDN5nmymCe6zhR70zoA44An11t+XneH5AHbIQgwpCQH9i7HACI\/I\/yJSL82IlwokuEChNadv\/2dfj9adtnjcKjpd32jf4GJ3Fcw+tAyJU3VFRp45fozxqZXPyMnDQkatpEKeBWh05unaOE7+WQ\/aWIHwx3\/GAUNkBjqh8eg0eXvCvqEEDiS9vwtWiER+6E5szTsZ1ahGSaC+NNzoQ8j+0YJERBVG7VuJX3FTq93WvCx\/BgIlUvFOEYh38lXy8oLzn6hy11rMSURbhICE27jwk1H1bzYnktTM\/jHiEYrRTaGT77D\/NOP6HTJ9qEs5jQsy4XJDeGfH1PwbNBrCX7ogEgNE8T3yjygjkLTMEK4aXFv6+trf18NXt0dHx8tYhuLw4W9KviaEqV\/dr8iV\/w4ySdCEnb3VHG3Kqp0oWw45AICK\/cCPnssaJc7MxtEh2GiZDnLQ5O6VdAO0OuKVcndTVGqHhJzoWQtMRRF3s5H+pCON6hEq3nIpNAecrsq5BQGD1vHsKLkJ01CG\/rIpTjjq2UDJHqnguFI6HgB+9j3uMqy5PUCc3jMFLlH1OKdXgRgmkTBjqHtoB0W0NZGt3CnqlXzu3UiVDcPl6GrqsroRWvwYQpTHgDwzSOdZjvHNoCGtFODzoQEnu6aIuiakqTST5FyG\/tKQVgfd17IiAk\/fDCqkMQMiOEKEzjSOgWRHRQxk7Ymv+su\/S2tGdFucQl47+qxAuw2um46wzKIhTJ9HDXPE4R3ugHjZHVgTB260baigYGbZaGyPsCxWcQ4QImrHinZLkAlgbMSqSH\/YoZ1MSEcIXMP9sm7FCHt55sES0RWxNcRYTtGiD2dNjBntoJiUE+aRJn1XofruY0nualVmsWjxEh6FYaobdzHcZdFiucRXyQfkxozBvXm07t1EaohY5DBVmGTde1JwZ+nW3FfgVyhTUBpgnhJXiNVyd0W6xwVtqV0LOjvrkFoT44bDZRbMO9J34stAyYIHcgROFShzrEcy2e1+KUlkTqocspV8L+glyy2VNCKKMVxby3dary8haVmPqx1H7SojuhilcIbYQBtCjKS31Dj6A+9FGda96VkHSvGdugqBEqkLB1+q4sQzdowrknxiPt+\/ElMnnabLVC8l\/t9oRDK3gVhJdmzz4G+4E+nqzhh56wEVoWcF+xhXAivjNZKcE61M8MEsIr66iUd5w9WaE2jdDyzVBA4hgTUv3w7W94xVQc3rT9zOFTjBilCEH2QbCwQK+ejsTnVLTe1p4u7chyEZzrPNk3H1YntBaRYK34Cx0JB39Lwr95a2poqT6MH7oaHHMj9GxS8V5C6NvAhMYkk9iaMRgLcAC0VnMpQlSHFGEcEQqLv6G\/+a0dNLS09J94JE\/8FTY6QggamHf\/fAifveRCqA0YcEFjxKESXQlheL4zIZ99jd648O7Q9jMeaomGoxZPUR2SdlrE86hx34ljK\/WQwyjMaM8\/A9NWd0I+SxPitDWqSYlHB7afIc10zTVWZiP0zKmraNy3ERo2pX5KRn1Q3yP21BqfSSiUFEgIhnBhoNDEtiOtx2uc5X\/9wtGkbfSJrtdoAySU90Id9LeL9AcnYwiqK7PDvSDmFKyzOQX4G5K27ELEk6mFbL39QFWLzvC8IHCPl9UCrpZYJNvnpg83djujv+5\/vHO9JkuHresXzbetEoHnpHLUU19QL1+LerRI4CRr5AuSUX9mwHobDs00kBv5\/dXyow9rswtTF3A9PhCd\/\/ZrXf81t063u\/inYBgpaCnkcZbXOMF2zYHdQISC64c\/ffvt1+Tfr3ltfD842d19\/\/7Vq1fv3\/\/SaPsHXtJYwheFhesPT3WVy1UX99tbD3lDXm\/70dyC439WeUN14lN8\/NjfH+sUcmNiYmJiYmLqqbzeen+d+BB\/Zs8hVvv0\/GRd18mm7oWhp41\/evL5SVvBA+CkeUnBs2fP\/njd9+6PP549+ykcdHRR6\/2taz99etKv3xjd3XsQfq6J\/PjzTMpH\/LeTQ+1Jvvvhc6XWI6clNs5Lj9t6d9nc1xdlLNdxcilrlD7ue1vYNEo+\/fc\/v3\/8WCDitQVVQSTFwz98tkEGV4f7Wvd+9274dzrv1btTGOwzbi+VM56NU3Ww9YPEsY7Q2er3k7bsZM6FSnJzDhFOcnDq5J9dadVA9NmAJOAlcPKXKD0d\/qnFaFbUjTGN0l6Gbfk2qB7r92lPFtLegnJlTR2kbrkzt5MPLub6l8+LcGYRQxnwvFQI60cnsvYF\/halkH33XR0whlZxhMKY+xo5GiqKYCzFi8oYOJDrTe+GAWw+e6nugjK8Diqs6aFi5x0Wxh3E7BuwWSP0CBNSM7p1FSXOTIQowp4AUmkjg0ozbJbgFH9hS0veSNn24tGMwuvnPSKs9shCw6U1UonKhXlfHIPijg8J4C0yb8Q+c3L956hDtAwBKxFnIwhDK6FbAWqxHgPxjoR1qg57RYgy1PgZ5aI96uH0563LoMN2UTfE526EqOF1IeyNLdUE82fFbaUda8NZtfzVXBcjg85erLsQIp3YCZcfhBDtbOKPFT3\/G+UEEfCpEN4h05lQauUQ1e\/cSkGgtEfjoS64yi2QStSGfbSvks8uBO0ZjGRMXMo1JhtV+8Yxvk8fV+\/eD8GBROc0xLsJ7e4ZOi8GQQqcjqLtOkRLMtrRgV\/afpUvk6ZzF4T\/cSKk3DaHVgr6YaI3XltLMO2eH1hQ93EygjiqpdhQabZCCbo\/UQqR76vfmTDivXgwQmRW+DVZfY5y+bIvwx5cq4S69ATdIUN1Uv5\/b0OIkjGqnhtI2DEJ8e5CifdX1yhdSVzTdmZQyXpPqV3rNCL\/je8WhHB\/rE44a13gtHz2BYLGhsfLYcKWnuiGGikvvbIF9KkEhr5MV8I59Z+I0HumvrQu6JHjbco1C4iXrnUvh3IA5mx3oLd1\/9iV8IU6AF9llSAXrJU2x\/1NXyCf3eS35F9b0aoLZ3qJHz7ab0GNJiN2QmrXGUU46dlUC9Ze\/F4OFrpc8oD4rT3dZmZwHrHD8j29tyhiI0xQeT42wnW5YB3psv\/nHnLedCE8arXHDNr8Ja06rKvF8JVLqXsQWiv17mlP91bMqZ2Ki+1NwTiLpnTjYAbiVEeM0V5bV8LnTcU8MvEAX\/JBjppRWQvtyRTyuoV3O043oEb9jKe\/C2EBEeY9QZANlXb6hS+VfXLkf2Rs4aMI7aaU6HccvZnuQuhdoQkPQHpet11q95ItM1bc3jNcM0w46liHX+NMoQzdSumudUET1sGWpx7OLIAmcf42Lx2beRn3IIzSdUjt\/\/Tu0YShPYuwp16pKfwNDE5YLJgGhSJ0sjTdCSlPcx8RShlI2GlXxZcIDWlkVmil1iBbKozuOxG+v1sdhnAdSklSq4pxxdIDfRULJTiLi6oVWkRfSxK28Z6Mtp5hQpulsRPCbCgp5vHum4Q9C0NRQpmI4pBqTSCS6CMf0nXQfnGISmdL0oT4my6eerEAi7W9fJbr3WFjzJcJ+pb8KqhDavfXtUPGXj8mJD2pcz88kK8RISnt35lp79Hsvc\/WFnTd\/GMq4MDx4eUL+7WfMaHdL6UI19VZRKjXcPAb7SaJhxkrNMGlCv8y2O5NxTUWZXtS4nc4I5H0pNArdIj6VN0K\/mRJpGW8Uvl8PvowQ4UuaDLFtXPwUSg09+Czl2f0pf1UzqVWDZgQzw+D8jnKgO5ZEL+zoG+KCdFXXLSIXJi6dKMPNVI9kPQebxmBnljoQjlChVFyrD8YPjnZ2Fh\/wFVzFP9eO3dda+O5IxkjHg7hsUIf0MKImi99Mk+v76kK\/ihLyhPea6qamgs39Ot7IMJhBRJO41n+dlE+sV61d\/Ml8sA4SQ9C1Ev44F\/aoYH6SUGR8ZcTSLe9kJXC4OBaaWBg4PHSQ3VF2NvEYRlZTByl8G8X1P2TVvpBfX3qegBXYSuD1\/uM+l7E0MXZ3NzcTkE9vxzEu2tqntCUXCj5xda6+AN53th1IYRTsAx9bUiLmI7Jqrz\/4sUL8u7HKEDDJ\/mMPkHA8cLi8alMdD20hVfKiTdQL8Bg4kMN+TB0TxPSoSZe3Bo6LhAdLb+mdzsZSdiftqkCUdwqlUpbokAdJ2b24FQZs6r8oQjhDl9+SzlF7qePXnziRX+WdBq\/aNufNW90UXuU0kpaB9I2Yh6cnoMY+EO1UrSCkV3AhLbVCc7xwwuc8Y0rTbdbNtbnSsHm+ei\/gBA8EBnWF6igYdTh6RwUAc7LbXYrtr6\/F27K4LMa9\/k2620UR4QzTTosequN+Dge0\/nDmxagp18GhL1deYICs3xCWLCFRWvddzlHqHBMt69QLRnziODFO5Mw8lCA8I3zj28cZoGZbh1rxBbK7VyLOev8\/m\/0I+QlRjIP5rj5GuWEUU2JT05nxBud1vPLTgsqGfckjokanBan8ulqpZKPJh\/0y96BzHS0Nt\/IpXNun0+PVRPOH1WQyvMxx3cfrzjt\/5bK6dqDonyBAvkR+xpAIlJxj8T7phuRcXDN+HikEU39mTNvPYHkfDUSmUjomohEJmtdrV8gpX2hPx\/N12qp1P+PXT0+X6At+\/9QgImJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJienfo\/8DHDR32zvTzAYAAAAASUVORK5CYII=\" alt =\"Titanic\" class='center' style='width: 700px;'>\n\n**If you like the notebook please upvote & give your valubale suggestions for improvment \u2764\ufe0f**","187bae85":"**We can use two approaches for solving this data. The first one is we will apply the label encoding technique & One Hot Encoding on Kingdom feature data but this technique we will apply if we are using logistic regression or other models. But we are using DTC & Random forest so thats why this technique is not needed also we are getting better accuracy from DTC and random forest. If I'm wrong please correct me. \ud83d\ude09**","d80cc66b":"# **STEP - 02 \ud83d\ude00 Data Transformation**","0e0afce6":"#  **Getting Started**\n\n#### **Title : Genetic Code**\n\n#### **Description**\n\n**We will predict the kingdom of each gene**.\n\n> **bct (bacteria)** \n\n> **inv (invertebrates)** \n\n> **mam (mammals)** \n\n> **pln (plants)** \n\n> **pri (primates)** \n\n> **rod (rodents)** \n\n> **vrt (vertebrates)**","38d08ffc":"# **STEP - 03 \u2728 Model Preparation**"}}