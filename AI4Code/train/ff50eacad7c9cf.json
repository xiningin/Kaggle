{"cell_type":{"c91d82af":"code","59e582cc":"code","7cb719b3":"code","e0d1a5b5":"code","89a40d36":"code","4b88fd17":"code","084b1d35":"code","e6499ec1":"code","b989103e":"code","414a3e3a":"code","828f9f9c":"code","b6d74b70":"code","8f36982d":"code","f274782c":"code","e9160e33":"code","70f76470":"code","7be24379":"code","4afa21d7":"code","9df3df54":"markdown","231bddaa":"markdown"},"source":{"c91d82af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59e582cc":"ratings = pd.read_csv('\/kaggle\/input\/amazon-product-reviews\/ratings_Electronics (1).csv')\nratings_df = ratings.copy()","7cb719b3":"# Let's rename the columns \nratings_df.columns = ['userId', 'productId', 'Rating', 'timestamp']\nratings_df","e0d1a5b5":"total_votes = pd.DataFrame(ratings_df.groupby('productId')['Rating'].count().reset_index())\ntotal_votes.columns = ['productId', 'vote_count']\ntotal_votes = total_votes.merge(ratings_df, on = \"productId\")\n\nmean_rating = total_votes.groupby('productId')['Rating'].mean().reset_index()\nmean_rating = mean_rating.merge(total_votes, on = \"productId\")\nmean_rating.columns = ['productId', 'avg rating', 'vote_count', 'userId', 'rating', 'timestamp']","89a40d36":"mean_rating.shape","4b88fd17":"v = mean_rating['vote_count']\nm = mean_rating['vote_count'].quantile(0.95)\nR = mean_rating['avg rating']\nC = mean_rating['rating'].mean()\n\nmean_rating = mean_rating[mean_rating['vote_count'] >= m]","084b1d35":"mean_rating.shape","e6499ec1":"recommended_products = mean_rating.drop(['userId', 'timestamp', 'rating'], axis = 1)\nrecommended_products.drop_duplicates(inplace = True)","b989103e":"def recommendation(x):\n    v = x['vote_count']\n    R = x['avg rating']\n    return (v\/(v+m) * R) + (m\/(m+v) * C)\nrecommended_products['score'] = recommended_products.apply(recommendation, axis = 1)","414a3e3a":"recommended_products.sort_values(by =\"score\", ascending = False, inplace = True)","828f9f9c":"recommended_products","b6d74b70":"df_ratings = ratings.copy()","8f36982d":"df_ratings.columns = ['userId', 'productId', 'rating', 'timestamp']\ndf_ratings.drop('timestamp', axis = 1, inplace = True)","f274782c":"df_ratings = df_ratings.head(10000)","e9160e33":"products_matrix = df_ratings.pivot_table(index = \"productId\", columns = \"userId\", values = \"rating\").fillna(0)","70f76470":"from scipy.sparse import csr_matrix\nfrom sklearn.neighbors import NearestNeighbors\n\nmodel_knn = NearestNeighbors(metric = 'cosine', algorithm = \"brute\")\nproducts_sparse = csr_matrix(products_matrix.values)\nmodel_knn.fit(products_sparse)","7be24379":"def get_recommendations(prod_id):\n    distances, indices = model_knn.kneighbors(products_matrix.loc[prod_id].values.reshape(1, -1), n_neighbors = 6)\n    for i in range(0, len(distances.flatten())):\n        if i == 0:\n            print('Recommendations for {0}:\\n'.format(products_matrix.index[i]))\n        else:\n            print('{0}: {1}, with distance of {2}:'.format(i, products_matrix.index[indices.flatten()[i]], distances.flatten()[i]))","4afa21d7":"get_recommendations('B00000J1EP')","9df3df54":"### Collaborative Filtering ","231bddaa":"### Weighted recommendation"}}