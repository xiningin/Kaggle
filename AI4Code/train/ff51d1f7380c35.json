{"cell_type":{"cdb64f46":"code","aed39c0d":"code","927f777c":"code","47eebfac":"code","78495b1a":"code","ac7313e1":"code","ae6249c2":"code","69a6dd51":"code","7cfab923":"code","176125f4":"code","237a0afc":"markdown","8054a138":"markdown","d9e051b9":"markdown"},"source":{"cdb64f46":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aed39c0d":"\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\n\ndata = pd.read_csv(\"\/kaggle\/input\/google-play-store-apps\/googleplaystore.csv\")\n\n#-remove Nas from dataset\n#-View dataset\ndata = data.dropna()\n\n#-display unique values in each column\nfor col in data:\n    print(data[col].unique())\n","927f777c":"#Remove rows that contains \"Varies with device\"\nfor col in data:\n    data = data[data[col] != \"Varies with device\"]\n\n","47eebfac":"#removing duplicates in App\n#View duplicated data\ndata[data.duplicated(['App'])]\n#Eg:\n#data[data['App'] == \"Zenefits\" ]\n#data.loc[237]\n#data.loc[266]\n\ndata.drop_duplicates(subset = ['App'], inplace = True)","78495b1a":"print(data.dtypes)\n#this is pandas automatic type converter\ndata = data.convert_dtypes()","ac7313e1":"#Reviews data type\ndata['Reviews'] = pd.to_numeric(data['Reviews'])","ae6249c2":"#converting to timestamp\ndata['Last Updated'] = pd.to_datetime(data['Last Updated'], format= '%B %d, %Y')\n###\n#Install data type\ndata.Installs = data.Installs.str.replace(\"+\",\"\")\ndata.Installs = data.Installs.str.replace(\",\",\"\")\ndata['Installs'] = pd.to_numeric(data['Installs'])","69a6dd51":"#Size data type\n\n#returns as list in each cell\ndata.Size = data.Size.str.findall(r'\\d+\\.?\\d+')\ndata.reset_index(drop = True, inplace = True)\n#removing values from list (flattening list)\nfor i in range(len(data)):\n    if data.loc[i,'Size']:\n            data.loc[i,'Size'] = data.loc[i,'Size'][0]\n    else:\n        data.loc[i,'Size'] = np.nan\n\n#changing data type to float    \ndata['Size'] = pd.to_numeric(data['Size']) ","7cfab923":"#Price data type\ndata.Price = data.Price.str.replace(\"$\",\"\")\ndata['Price'] = pd.to_numeric(data['Price'])","176125f4":"print(data.dtypes)","237a0afc":"NOT: At below, we have index holes(1,2,4..), which causes error in loop. To prevent it we are using reset_index() function.","8054a138":"In columns we can see that some some of them defined as 'Vaires with device' which is vague explanation, depending on the usage data we can remove all data containing vague explanation","d9e051b9":"we have cleaned the dataset, the next step is to adjust dataset types to make it ready to use\n\n* Reviews:Int\n* Last Update -> date\n* Installs-> Int \n* Size: float -> all of the app size are defined as M so there shouldn't be problem\n* Price: float -> payment is only in $(dollars)"}}