{"cell_type":{"b1b506e9":"code","a284774d":"code","553d421f":"code","85daea4d":"code","ad3cde51":"code","339562be":"code","897d670c":"code","ccf896fc":"code","38c9614e":"code","fcfc098f":"code","2ee72398":"code","33b193d7":"code","5a0c4fb7":"markdown","6b6cabdb":"markdown","a3933bcc":"markdown","c8143934":"markdown","983b3cbb":"markdown","7bb930f2":"markdown","b58a1b72":"markdown","2ae52f80":"markdown","abbef796":"markdown","6e524e1c":"markdown"},"source":{"b1b506e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport keras\nfrom keras.datasets import cifar10\nfrom keras.utils import np_utils\nfrom keras.models import Model\nfrom keras.layers import Input, Dense, Flatten, Dropout, BatchNormalization\nfrom keras.applications.vgg16 import VGG16\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom sklearn.metrics import accuracy_score\nfrom keras.preprocessing.image import ImageDataGenerator","a284774d":"LABEL_NAMES = ['Plane', 'Car', 'Bird', 'Cat', 'Deer', 'Dog', 'Frog', 'Horse', 'Ship', 'Truck']\n\nVALIDATION_SIZE = 10000","553d421f":"(x_train_all, y_train_all), (x_test, y_test) = cifar10.load_data()","85daea4d":"LABEL_NAMES[y_train_all[1][0]]","ad3cde51":"x_train_all = x_train_all \/255.0\nx_test = x_test \/255.0 ","339562be":"x_val = x_train_all[:VALIDATION_SIZE]\ny_val = y_train_all[:VALIDATION_SIZE]\nx_val.shape","897d670c":"x_train = x_train_all[VALIDATION_SIZE:]\ny_train = y_train_all[VALIDATION_SIZE:]\nx_train.shape","ccf896fc":"# Convert to One Hot Encoding\ny_train_ohe = np_utils.to_categorical(y_train, num_classes=10)\ny_test_ohe = np_utils.to_categorical(y_test, num_classes=10)\ny_val_ohe = np_utils.to_categorical(y_val, num_classes=10)\n\nprint(y_val_ohe)\ny_val_ohe.shape","38c9614e":"\ndef create_cnn_model():\n    image_input = Input(shape=(32, 32, 3))\n    \n    vgg_model  = VGG16(weights='imagenet',include_top=False, input_tensor=image_input)\n    \n    flatt = Flatten()(vgg_model.output)\n    \n    couche1 = Dense(128, activation='relu')(flatt) \n    couche1_normalization = BatchNormalization()(couche1)\n    couche1_dropout = Dropout(0.2)(couche1_normalization)\n    couche2 = Dense(64, activation='relu')(couche1_dropout)\n    couche2_normalization = BatchNormalization()(couche2)\n    output = Dense(10, activation='softmax', name='output')(couche2_normalization)     \n    model = Model( image_input, output )\n    return model\n\nmodel = create_cnn_model()\nmodel.summary()","fcfc098f":"\nmodel.compile(optimizer='adam', \n              loss='categorical_crossentropy',\n                metrics=['accuracy'])","2ee72398":"# Use Data Augmentation\ndatagen = ImageDataGenerator(width_shift_range=0.1, height_shift_range=0.1, horizontal_flip= True)\nes = EarlyStopping(patience=10, monitor='val_accuracy', mode='max')\nmc = ModelCheckpoint('.\/weights.h5', monitor='val_accuracy', mode='max', save_best_only=True)\n\nmodel.fit_generator(datagen.flow(x_train, y_train_ohe,batch_size = 32), steps_per_epoch = 1250, epochs=500, validation_data=[x_val, y_val_ohe], callbacks = [es,mc])\n# Load The Best weights in the ModelCheckpoint\nmodel.load_weights('.\/weights.h5')\n\n# Predict The Test\npreds = model.predict(x_val)\nscore_test = accuracy_score( y_val, np.argmax(preds, axis=1) )\n\nprint (' LE SCORE DE TEST : ', score_test)\nprint('')","33b193d7":"# after fit we can evaluate our model\n_, evaluate = model.evaluate(x_test, y_test_ohe, verbose=1)\nprint('>%.3f' % (evaluate * 100.0))","5a0c4fb7":"# Get the Data","6b6cabdb":"# Explore Data","a3933bcc":"# Constants","c8143934":"# Preprocess Data\n## Normalisation ","983b3cbb":"## Create Validation Dataset","7bb930f2":"# Build Our Model\n## Define the Model","b58a1b72":"## The Rest of Training Dataset","2ae52f80":"# Evaluate model","abbef796":"## Compile Our Dataset","6e524e1c":"## Fit Our Model"}}