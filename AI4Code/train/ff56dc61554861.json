{"cell_type":{"6d8b3f24":"code","fb1c673f":"code","1f594c38":"code","eb47087e":"code","987ee3a5":"code","62be0109":"code","8b30c6c8":"code","4b231796":"code","a3132fa5":"code","6d4fb6b8":"code","c6a3aacb":"code","c25b1e35":"code","318e7fa9":"code","b5901563":"code","f9fd0c3f":"code","be20f821":"code","f8ec5315":"code","54e19731":"code","b7f1b129":"code","8a4b8a98":"code","138a8680":"code","e0d08623":"code","8245c253":"code","1a289422":"code","5fd950c8":"code","caaeb9d0":"code","db28e626":"code","c11cad2e":"code","90dd5bc5":"code","b23f016a":"code","a0e454b6":"code","939a74b1":"code","091975da":"code","e2354f96":"markdown","bd8e395d":"markdown","000c233f":"markdown","7a82cb14":"markdown","cb2466ae":"markdown","9da64dd1":"markdown","fcea4957":"markdown","97d19df1":"markdown","56e9ba3d":"markdown","8ae38265":"markdown","1e4e9930":"markdown","68f8c4c7":"markdown","47b75473":"markdown","2e541d89":"markdown","e7b4deb7":"markdown","9ef619f8":"markdown","c241472b":"markdown","017c846d":"markdown","b029409a":"markdown","63c50efa":"markdown","4c979291":"markdown","8e00e743":"markdown","3219bd20":"markdown","8495daee":"markdown","42a920f0":"markdown","c1caa08e":"markdown","e8edc54c":"markdown","47b1d912":"markdown"},"source":{"6d8b3f24":"# importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score, mean_squared_error\n\n# display settings\npd.set_option(\"display.max_rows\", None)\npd.set_option(\"display.max_columns\", None)\n\n# filterning warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","fb1c673f":"# reading data from csv and creating dataframe\ndf = pd.read_csv(\"..\/input\/car-price-prediction\/CarPrice_Assignment.csv\")","1f594c38":"# displaying first 5 rows\ndf.head()","eb47087e":"# dropping the ID column as it will not be useful in predicting our dependent variable\ndf.drop(columns=\"car_ID\", inplace=True)","987ee3a5":"# dimensions of dataframe\nprint(\"No. of rows: {}\\tNo. of columns: {}\".format(*df.shape))","62be0109":"# columns info\ndf.info()","8b30c6c8":"# descriptive statistics\ndf.describe().T","4b231796":"# % of missing values\n(df.isna().sum() \/ df.shape[0]) * 100","a3132fa5":"# converting from numeric to categorical variable type\ndf[\"symboling\"] = df[\"symboling\"].astype(str)","6d4fb6b8":"# extracting make from the values\ndf[\"make\"] = df['CarName'].str.split(' ', expand=True)[0]","c6a3aacb":"# unique values in make\ndf[\"make\"].unique()","c25b1e35":"# correcting the typo errors in make values\ndf[\"make\"] = df[\"make\"].replace({\"maxda\":\"mazda\",\n                               \"Nissan\":\"nissan\",\n                               \"porcshce\":\"porsche\",\n                               \"toyouta\":\"toyota\",\n                               \"vokswagen\":\"volkswagen\",\n                               \"vw\":\"volkswagen\"})","318e7fa9":"# dropping the car name variable\ndf.drop(columns=\"CarName\", inplace=True)","b5901563":"# categorizing price into standard and high-end\ndf[\"price_category\"] = df[\"price\"].apply(lambda x: \"standard\" if x <= 18500 else \"high-end\")","f9fd0c3f":"# creating list of numeric and categorical columns\ncol_numeric = list(df.select_dtypes(exclude=\"object\"))\n\ncol_categorical = list(df.select_dtypes(include=\"object\"))","be20f821":"# visualizing the car make\nplt.figure(figsize=(15,6))\ndf[\"make\"].value_counts().sort_values(ascending=False).plot.bar()\nplt.xticks(rotation=90)\nplt.xlabel(\"Make\", fontweight=\"bold\")\nplt.ylabel(\"Count\", fontweight=\"bold\")\nplt.title(\"Countplot of Car Make\", fontweight=\"bold\")\nplt.show()","f8ec5315":"# visualizing the other categorical variables\nplt.figure(figsize=(15,20))\nfor i,col in enumerate(col_categorical[:-2], start=1):\n    plt.subplot(5,2,i)\n    sns.countplot(df[col])\n    plt.xlabel(col, fontweight=\"bold\")\nplt.show()","54e19731":"# pair plot to understand the correlation between the numeric variables (except price)\nsns.pairplot(df[col_numeric[:-1]])\nplt.show()","b7f1b129":"# heatmap to visualize the pearson's correlation matrix between the numeric variables (except price)\nplt.figure(figsize=(12,8))\nsns.heatmap(df.drop(columns=\"price\").corr(), annot=True, cmap=\"RdYlGn\", square=True, mask=np.triu(df.drop(columns=\"price\").corr(), k=1))\nplt.show()","8a4b8a98":"# visualizing our dependent variable for outliers and skewnwss\nplt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nsns.boxplot(df[\"price\"])\nplt.title(\"Boxplot for outliers detection\", fontweight=\"bold\")\n\nplt.subplot(1,2,2)\nsns.distplot(df[\"price\"])\nplt.title(\"Distribution plot for skewness\", fontweight=\"bold\")\n\nplt.show()","138a8680":"# average price of each make\ndf.groupby(\"make\")[\"price\"].mean().sort_values(ascending=False).plot.bar(figsize=(12,6))\nplt.title(\"Average price of each make\", fontweight=\"bold\")\nplt.ylabel(\"Price\", fontweight=\"bold\")\nplt.xlabel(\"Make\", fontweight=\"bold\")\nplt.show()","e0d08623":"# proportion of high-end models in each make\npd.crosstab(df[\"make\"], df[\"price_category\"], normalize=\"index\").plot.bar(stacked=True, figsize=(10,5))\nplt.xlabel(\"Make\", fontweight=\"bold\")\nplt.ylabel(\"Proportion\", fontweight=\"bold\")\nplt.title(\"Proportion of high-end models in each make\", fontweight=\"bold\")\nplt.show()","8245c253":"# price analysis for each carbody type\nfig, ax = plt.subplots(1,2, figsize=(15,5))\n\npd.crosstab(df[\"carbody\"], df[\"price_category\"], normalize=\"index\").plot.bar(stacked=True, ax=ax[0])\nax[0].set(xlabel=\"Carbody type\", ylabel=\"Proportion\", title=\"Proportion of high-end models in each carbody type\")\n\ndf.groupby(\"carbody\")[\"price\"].mean().sort_values(ascending=False).plot.bar(ax=ax[1])\nax[1].set(xlabel=\"Carbody type\", ylabel=\"Average price\", title=\"Average price of models in each carbody type\")\n\nplt.show()","1a289422":"# visualizing distribution of price with the other categorical variables\nplt.figure(figsize=(15,20))\nfor i,col in enumerate(col_categorical[:-2], start=1):\n    plt.subplot(5,2,i)\n    sns.violinplot(data=df, x=col, y=\"price\", split=True, hue=\"price_category\")\n    plt.xlabel(col, fontweight=\"bold\")\nplt.show()","5fd950c8":"# visualizing distribution of price with continuous variables\ncol_numeric_pc = col_numeric.copy()\ncol_numeric_pc.append(\"price_category\")\nsns.pairplot(df[col_numeric_pc], hue=\"price_category\")\nplt.show()","caaeb9d0":"# heatmap to visualize the pearson's correlation between price and other the numeric variables\nplt.figure(figsize=(12,8))\nsns.heatmap(df.corr(), annot=True, cmap=\"RdYlGn\", square=True, mask=np.triu(df.corr(), k=1))\nplt.show()","db28e626":"# converting categorical variables into numeric variables using label encoding\nle = LabelEncoder()\n\ndf_encoded = df.drop(columns=[\"price_category\"])\ndf_encoded[col_categorical[:-1]] = df_encoded[col_categorical[:-1]].apply(lambda col: le.fit_transform(col))\n\ndf_encoded.head()","c11cad2e":"# independent variables\nX = df_encoded.drop(columns=\"price\")\n\n# dependent variable\ny = df_encoded[\"price\"]","90dd5bc5":"# splitting into train and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","b23f016a":"# building a base model\nbase_model = DecisionTreeRegressor()\nbase_model.fit(X_train, y_train)","a0e454b6":"# scoring using test data\ny_pred = base_model.predict(X_test)\nprint(\"R-squared:\", r2_score(y_pred, y_test))","939a74b1":"# hyperparameter tuning for best model\nparameters = {\"max_depth\":list(range(1,15))}\n\nbase_model = DecisionTreeRegressor()\ncv_model = GridSearchCV(estimator=base_model, param_grid=parameters, scoring='r2', return_train_score=True, cv=5).fit(X_train,y_train)\n\npd.DataFrame(cv_model.cv_results_)#[[\"mean_test_score\",\"mean_train_score\"]]\n\n# train and test scores\nplt.plot(pd.DataFrame(cv_model.cv_results_)[\"param_max_depth\"], pd.DataFrame(cv_model.cv_results_)[\"mean_test_score\"], label=\"test score\")\nplt.plot(pd.DataFrame(cv_model.cv_results_)[\"param_max_depth\"], pd.DataFrame(cv_model.cv_results_)[\"mean_train_score\"], label=\"train score\")\nplt.title(\"Training vs. Test score\")\nplt.ylabel(\"R-squared\")\nplt.xlabel(\"Max depth\")\nplt.legend()\nplt.grid()\nplt.show()","091975da":"# building final model\nmodel = DecisionTreeRegressor(max_depth=8)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\nprint(\"R-squared:\", r2_score(y_pred, y_test))","e2354f96":"## Feature engineering","bd8e395d":"**Insights:**\n\n* `jaguar` make is having highest average price.\n* `chevrolet` make is having least average price.","000c233f":"### 1. Symboling","7a82cb14":"**Insights:**\n\n* `price` and `symboling`, `fueltype`, `doornumber`, `carbody` doesn't seem to have much correlation.\n* Safest (symboling -2) seems to have only standard priced models.\n* `price` and `drivewheel` seems to have little correlation. All 4 wheel drive models are standard priced models.\n* `price` and `enginelocation` seems to have correlation. All the rear engine models are high-end models.\n* `price` and `enginetype` seems to have little correlation. While standard priced models are having all types of engines, high-end models are having 'dohc', 'ohc', 'ohcv' and 'ohcf' engine types.\n* `price` and `cylindernumber` seems to have correlation. As the number of cylinders increases price of the model increases.\n* `price` and `fuelsystem` seems to have little correlation. High-end models are having only 'idi' and 'mpfi' fuel systems.","cb2466ae":"## Reading and understanding data","9da64dd1":"**Hyperparameter tuning**","fcea4957":"## Variable information\n\n**symboling:** \tIts assigned insurance risk rating, A value of +3 indicates that the auto is risky, -3 that it is probably pretty safe. (Categorical) \n\n**carname:**\tName of car make and model. (Categorical)\n\n**fueltype:**\tCar fuel type i.e. gas or diesel. (Categorical)\n\n**aspiration:**\tAspiration used in a car. Mode of air intake for the internal combustion engine i.e. natural (standard) or turbocharger. (Categorical)\n\n**doornumber:**\tNumber of doors in a car i.e. two or four. (Categorical)\n\n**carbody:**\tBody of car i.e. convertible or hardtop or hatchback or sedan or wagon. (Categorical)\n\n**drivewheel:**\tType of drive wheel. The wheel connected to the motor\/engine transmission, which causes the vehicle to move i.e. Front-wheel drive or Rear-wheel drive or Four-wheel drive. (Categorical)\n\n**enginelocation:**\tLocation of car engine i.e. front or rear. (Categorical)\n\n**wheelbase:**\tLength of wheelbase of car. Wheelbase is the distance between centers of front and rear wheels. (Numeric)\n\n**carlength:**\tLength of car. (Numeric)\n\n**carwidth:**\tWidth of car. (Numeric)\n\n**carheight:**\tHeight of car. (Numeric)\n\n**curbweight:**\tThe weight of a car without occupants or baggage. (Numeric)\n\n**enginetype:**\tType of engine i.e. I, ohc, ohcf, ohcv, dohc, dohcv, rotor. (Categorical)\n\n**cylindernumber:**\tNumber of cylidners used inside the engine i.e. two - twelve. (Categorical)\n\n**enginesize:**\tEngine size, or the engine displacement in the car. Engine displacement is the swept volume of all the pistons inside the cylinders of a reciprocating engine in a single movement from top dead centre to bottom dead centre. (Numeric)\n\n**fuelsystem:**\tFuel system used in the car i.e. 1bbl, 2bbl, 4bbl, idi, mfi, mpfi, spdi, spfi. Fuel-system provided fuel-air mixture to the engine. (Categorical)\n\n**boreratio:**\tBore ratio of car. It is the ratio between cylinder bore diameter and piston stroke. (Numeric)\n\n**stroke:**     Stroke or volume inside the engine. It is the distance travelled by the piston in each cycle. (Numeric)\n\n**compressionratio:**\tCompression ratio of car. It is the ratio of the maximum to minimum volume in the cylinder of an internal combustion engine. (Numeric)\n\n**horsepower:**\tHorsepower of the engine. The power an engine produces is called horsepower. In mathematical terms, one horsepower is the power needed to move 550 pounds one foot in one second. (Numeric)\n\n**peakrpm:**\tRPM at which engine delivers peak horsepower. (Numeric)\n\n**citympg:**\tMileage in city. (Numeric)\n\n**highwaympg:**\tMileage on highway. (Numeric)\n\n**price:**      Price of car. (Numeric) (Dependent variable)","97d19df1":"### Creating dependent and independent variables","56e9ba3d":"**Observations:**\n- There is no improvement in training score after max depth 8, so we build our model with max depth 8.","8ae38265":"# Car Price Prediction\n\n## Problem Statement\n\nA Chinese automobile company Geely Auto aspires to enter the US market by setting up their manufacturing unit there and producing cars locally to give competition to their US and European counterparts.\n\nThey have contracted an automobile consulting company to understand the factors on which the pricing of cars depends. Specifically, they want to understand the factors affecting the pricing of cars in the American market, since those may be very different from the Chinese market. The company wants to know:\n\n* Which variables are significant in predicting the price of a car\n* How well those variables describe the price of a car\n\nBased on various market surveys, the consulting firm has gathered a large data set of different types of cars across the America market.\n\n## Business goal\n\nWe are required to model the price of cars with the available independent variables. It will be used by the management to understand how exactly the prices vary with the independent variables. They can accordingly manipulate the design of the cars, the business strategy etc. to meet certain price levels. Further, the model will be a good way for management to understand the pricing dynamics of a new market.","1e4e9930":"## Exploratory Data Analysis","68f8c4c7":"### Decision tree regressor","47b75473":"**Correcting typo errors in make values:**\n\nmaxda = mazda\n\nNissan = nissan\n\nporcshce = porsche\n\ntoyouta = toyota\n\nvokswagen = vw = volkswagen","2e541d89":"**Missing values:**\n* There are no missing values observed.","e7b4deb7":"### 3. Creating price category","9ef619f8":"**Insights:**\n\n* `price` is having high positive correlation with `curbweight`, `enginesize`, `horsepower`.\n* `price` is having high negative correlation with `mpg`.","c241472b":"**Insights:**\n\n* `buick`, `jaguar` and `porsche` are having only high-end models.\n* `bmw` is having 80% of their models as high-end.\n* `volvo` is having equal proportion of high-end and standard price models.\n* `audi`, `nissan` and `saab` are having less than 33% of models as high-end.\n* The rest (majority) of the car makers are having only standard price models.","017c846d":"**Insights:**\n\n* `hardtop` and `convertible` are having highest average price, and also high proportion of high-end price models.","b029409a":"**Building base model**","63c50efa":"**Insights:**\n\n* Toyota seems to be the most favourite make.\n* Mercury seems to be the least favourite make.","4c979291":"**Insights:**\n\n* There are few outliers towards the higher price range, suggesting that there are few high price models.\n* The distribution of price is right skewed, maybe we should think about applying transformation methods.\n* Most of the models are within 5000 and 18000 price range.","8e00e743":"### Splitting data into train test data","3219bd20":"## Model building","8495daee":"### Converting categorical variables into numeric\n\nApplying label encoding since I will be using a tree based model.","42a920f0":"### 2. CarName","c1caa08e":"**Insights:**\n\n* Model specifications (`wheelbase`, `carlenght`, `carweight`, `carheight`, `crubweight`, `enginesize`, `boreratio`, `stroke`, `compressionratio`, `horsepower`) and performance metrics (`peakrpm`, `citympg`, `highwaympg`) are mostly negatively correlated.","e8edc54c":"**Insights:**\n\n* `symboling`: A majority of auto makers are neither safe nor risky. Looks like there are more number of risky autos as compared to safe ones.\n* `fueltype`: Majority of the automobiles are gas fuel type.\n* `aspiration`: Majority of the automobiles use standard aspiration.\n* `doornumber`: Majority of the automobiles are 4 door models.\n* `carbody`: Sedan is the most common model, convertible is the least common model.\n* `drivewheel`: Forward wheel drive is the most common model, 4 wheel drive is the least common model.\n* `enginelocation`: Almost all the models are having engine location as front.\n* `enginetype`: Majority (almost all) of the models are having 'ohc' engine type.\n* `cylindernumber`: Majority (almost all) of the models are 4 cylinder models.\n* `fuelsystem`: Majority of the models are having 'mpfi' and '2bbl' fuel systems.","47b1d912":"## Data preperation"}}