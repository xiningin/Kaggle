{"cell_type":{"35c52edd":"code","186edd77":"code","f767b030":"code","d59bdfd0":"code","e3286569":"code","d5e7b3ac":"code","e8fbfd07":"code","f7ec8882":"code","6c05f972":"code","669f39f7":"code","84e30515":"code","ec0e3498":"code","cb36703f":"markdown","7647b9d2":"markdown","ac9c72eb":"markdown","9feb5daa":"markdown","1e2e1c44":"markdown","781ef796":"markdown","af67d514":"markdown","52d352d8":"markdown","a6a4dda1":"markdown","96501705":"markdown","66e15b63":"markdown"},"source":{"35c52edd":"from __future__ import print_function\n\nimport time, sys, os, copy\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '2' \nimport numpy as np\nimport pandas as pd\nfrom math import sqrt\nimport random\nimport subprocess\nfrom collections import Counter\n\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nimport matplotlib.lines as lines\nimport matplotlib.patches as patches\n\nfrom multiprocessing import Pool\nimport multiprocessing\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Activation, Dropout, TimeDistributed, BatchNormalization\nfrom tensorflow.keras.layers import LSTM, GRU\nfrom tensorflow.keras.optimizers import RMSprop, Adagrad, Adam, SGD\n#from keras.models import load_model\nimport tensorflow.keras.backend as K\n\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ntracking_data = []\nother = []\n\nfor dirname, _, filenames in os.walk('..\/input\/nfl-big-data-bowl-2021'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        if 'week' in filename:\n            tracking_data.append(os.path.join(dirname, filename))\n        else:\n            other.append(os.path.join(dirname, filename))","186edd77":"### functions for plotting and unrolling \n\n\ndef get_sequences_from_game(tracking, play_info,game_info, gameId,  num_players = 14):\n    ###\n    game_info['homeTeamAbbr'] = game_info['homeTeamAbbr'].astype('category')\n    teams = game_info['homeTeamAbbr'].value_counts().index\n    team_dict = {t: n for n, t in enumerate(teams)}\n    gameIndex = tracking['gameId'].value_counts().index\n    defensive_lineup = ['CB','SS', 'FS', 'S', 'MLB', 'OLB', 'ILB', 'LB', 'DB', 'DE']\n    offensive_lineup = ['WR', 'RB', 'HB','TE', 'FB', 'QB']\n    sorter = defensive_lineup + offensive_lineup + ['NaN'] #nan is football\n    sorterIndex = dict(zip(sorter, range(len(sorter))))\n    sequences = []\n    seq_play = []\n    \n    added_plays = [[] for _ in gameIndex]\n    aborted_plays = [[] for _ in gameIndex]\n    \n    print('Starting with game: ' + str(gameId))\n    start_game = time.time()\n    playIds = tracking.query('gameId== ' + str(gameId))['playId'].value_counts().index\n    for playId in playIds:\n\n\n        ### compute meta info \n        play = tracking.query('playId == ' +str(playId) + 'and gameId== ' + str(gameId))\n        yardline = play_info.query('playId == ' +str(playId) + 'and gameId== ' + str(gameId))\n        absoluteYardlineNumber = yardline['absoluteYardlineNumber'].to_numpy()\n        if np.isnan(absoluteYardlineNumber).any():\n            print(gameId)\n            print(playId)\n            continue\n\n        yardsLeft = absoluteYardlineNumber if play['playDirection'].all() == 'left' else 100 - absoluteYardlineNumber\n        play['yardsLeft'] = np.ones(len(play))*yardsLeft\/100\n        play['down'] = np.ones(len(play))*yardline['down'].to_numpy()\n\n\n        ## compute team info\n        team_info = game_info.query('gameId=='+str(gameId))\n        if yardline.possessionTeam.to_numpy() == team_info['homeTeamAbbr'].to_numpy():\n            team = team_dict[team_info['visitorTeamAbbr'].to_numpy()[0]]\n        else:\n            team = team_dict[team_info['homeTeamAbbr'].to_numpy()[0]]\n        play['teamInfo'] = np.ones(len(play))*team\n\n\n\n        start = time.time()\n        if (set(list(play.position.value_counts().index)) <= set(sorter)) and (len(play.displayName.value_counts().index)==num_players): \n            try:\n                play = play.apply(compute_speed, axis=1)\n                player_trajectories = []\n                football = play.query('team==\"football\"')\n                football = football.sort_values('frameId')\n                devensive_players = 0\n                off_player = 0 \n                for player in sorter:\n                    trajectory1 = play.loc[play['position']==player]\n                    for i in trajectory1.displayName.value_counts().index:\n                        if i == 'Football':\n                            continue\n                        if player in defensive_lineup:\n                            devensive_players +=1    \n                        else:\n                            off_player +=1 \n                        trajectory = trajectory1.loc[trajectory1['displayName']==i]\n                        player_seq = trajectory.sort_values(['frameId'])\n                        try:\n                            dist_to_ball_x = np.absolute(player_seq[['x']].to_numpy()-football[['x']].to_numpy())\n                            dist_to_ball_y = np.absolute(player_seq[['y']].to_numpy()-football[['y']].to_numpy())\n                        except:\n                            px = np.vstack([player_seq[['x']].to_numpy(),player_seq[['x']].to_numpy()[-1]])\n                            py = np.vstack([player_seq[['y']].to_numpy(),player_seq[['y']].to_numpy()[-1]])\n                            dist_to_ball_x = np.absolute(px-football[['x']].to_numpy())\n                            dist_to_ball_y = np.absolute(py-football[['y']].to_numpy())\n                        player_seq['x'] -=  football['x'].iloc[0]\n                        player_seq['y'] -=  football['y'].iloc[0]\n                        player_seq = player_seq[['x','y','v_x','v_y']].to_numpy()\n                        final_player_traj = np.hstack((player_seq, dist_to_ball_x, dist_to_ball_y))\n                        player_trajectories.append(final_player_traj)\n                football['x'] -=  football['x'].iloc[0]\n                football['y'] -=  football['y'].iloc[0]\n                football_seq = football[['x','y']].to_numpy()\n                a = np.hstack(player_trajectories)\n\n                a = np.hstack((a,football_seq,np.expand_dims(trajectory['yardsLeft'].to_numpy(),-1), \n                              np.expand_dims(trajectory['down'].to_numpy(),-1)))#,\n                              #np.expand_dims(trajectory['teamInfo'].to_numpy(),-1)))\n                sequences.append(a)\n                seq_play.append(yardline)\n            except:\n                print(playId)\n        else:\n            print(playId)\n            continue\n    print('Done with one game - Time Passed in Seconds: ' + str(time.time()-start_game))\n    return sequences, seq_play, added_plays, aborted_plays\n\n\n\n\ndef create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12, 6.33)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax\n\n","f767b030":"### load example data\nplays = pd.read_csv(other[-1])\ntracking = pd.read_csv(tracking_data[-1])\ngames =pd.read_csv(other[1])\nplay = tracking.query('gameId == 2018123013 and playId == 1930')\nplay_red = play.query('frameId >= 11 and frameId <= 29')\nyardlineNumber = plays.query('gameId==' + str(2018123013) + ' and playId==' + str(1930))['yardlineNumber'].item()\nfig, ax = create_football_field(highlight_line=True, highlight_line_number=yardlineNumber)\nexample_play_home = play_red.query('team==\"home\"')\nexample_play_away = play_red.query('team == \"away\"')\nexample_football = play_red.query('team == \"football\"')\nexample_play_home.plot(x='x', y='y', kind='scatter', ax=ax, color='orange', s=30, legend='Away')\n#example_play_away.plot(x='x', y='y', kind='scatter', ax=ax, color='blue', s=30, legend='Home')\nexample_football.plot(x='x', y='y', kind='scatter', ax=ax, color='red', s=30, legend='football')\n\nplt.title('Scatch of the play before throwing')\nplt.legend()\nplt.show()","d59bdfd0":"fig, ax = create_football_field(highlight_line=True, highlight_line_number=yardlineNumber)\nexample_play_home = play_red.query('team==\"home\"')\nexample_play_away = play_red.query('team == \"away\"')\nexample_football = play_red.query('team == \"football\"')\nexample_play_home.plot(x='x', y='y', kind='scatter', ax=ax, color='orange', s=30, legend='Away')\nexample_play_away.plot(x='x', y='y', kind='scatter', ax=ax, color='blue', s=30, legend='Home')\nexample_football.plot(x='x', y='y', kind='scatter', ax=ax, color='red', s=30, legend='football')\n\nplt.title('Players Movement until the Quaterback threw the forward pass')\nplt.legend()\nplt.show()","e3286569":"#### Functions\ndef compute_speed(data):\n    data['v_x'] = np.sin(data['dir']*np.pi\/180) * data['s']\n    data['v_y'] = np.cos(data['dir']*np.pi\/180) * data['s']\n    data['v_theta'] = np.arctan(data['v_x']\/data['v_y']) if data['v_y'] != 0 else 0 \n    return data\n\ndef roll_out(params):\n\n    prev_feature_vector, legacy_feature_vector, pos_prediction, roleOrder = params\n    #prev_feature_vector = np.concatenate((prev_feature_vector[:roleOrder*13], np.zeros(3),prev_feature_vector[roleOrder*13:]   ))\n    #legacy_feature_vector = np.concatenate((legacy_feature_vector[:roleOrder*13], np.zeros(3),legacy_feature_vector[roleOrder*13:]   ))\n    ### Automate rollout for different amount of players\n    legacy_current = legacy_feature_vector[:,0:78] # 308 = 28*11\n    ball_current = legacy_feature_vector[:,-4:-2] # 317 = 28*11 +9\n    meta_current = legacy_feature_vector[:,-2:]\n    legacy = legacy_current.reshape(legacy_current.shape[0],13,6)#30,13)\n    previous = prev_feature_vector[:,:78].reshape(legacy_current.shape[0],13,6)\n    ball = ball_current[:,0:2]\n    new_matrix = np.array(legacy)\n\n\n    for person in range(pos_prediction.shape[0]):\n        player = legacy[:,person]\n        player[:,:2] = pos_prediction[person,:, :] #position\n        player[:,2:4] = pos_prediction[person,:, :] - previous[:,person, :2] #velocity\n        player[:,4:] = np.abs(player[:, :2]-ball)\n        new_matrix[:, person] = player\n    new_matrix = new_matrix.reshape(new_matrix.shape[0],new_matrix.shape[1]* new_matrix.shape[2])\n    new_feature_vector = np.hstack([new_matrix,ball,meta_current])\n    return new_feature_vector\n\ndef roll_out_val(params):\n    prev_feature_vector, legacy_feature_vector, pos_prediction, roleOrder = params\n    #prev_feature_vector = np.concatenate((prev_feature_vector[:roleOrder*13], np.zeros(3),prev_feature_vector[roleOrder*13:]   ))\n    #legacy_feature_vector = np.concatenate((legacy_feature_vector[:roleOrder*13], np.zeros(3),legacy_feature_vector[roleOrder*13:]   ))\n\n    legacy_current = legacy_feature_vector[:78] # 308 = 28*11\n    ball_current = legacy_feature_vector[-4:-2] # 317 = 28*11 +9\n    meta_current = legacy_feature_vector[-2:]\n    legacy = legacy_current.reshape(13,6)#30,13)\n    previous = prev_feature_vector[:78].reshape(13,6)\n    ball = ball_current[0:2]\n    new_matrix = np.array(legacy)\n\n\n    for person in range(pos_prediction.shape[0]):\n        player = legacy[person]\n        player[:2] = pos_prediction[person,:] #position\n        player[2:4] = pos_prediction[person, :] - previous[person, :2] #velocity\n        player[4:] = np.abs(player[ :2]-ball)\n        new_matrix[person] = player\n    new_matrix = new_matrix.flatten()\n    new_feature_vector = np.concatenate((new_matrix,ball,meta_current))\n    return new_feature_vector\n\n","d5e7b3ac":"def get_sequences_from_game(tracking, play_info,game_info, gameId,  num_players = 14):\n    ###\n    game_info['homeTeamAbbr'] = game_info['homeTeamAbbr'].astype('category')\n    teams = game_info['homeTeamAbbr'].value_counts().index\n    team_dict = {t: n for n, t in enumerate(teams)}\n    gameIndex = tracking['gameId'].value_counts().index\n    defensive_lineup = ['CB','SS', 'FS', 'S', 'MLB', 'OLB', 'ILB', 'LB', 'DB', 'DE']\n    offensive_lineup = ['WR', 'RB', 'HB','TE', 'FB', 'QB']\n    sorter = defensive_lineup + offensive_lineup + ['NaN'] #nan is football\n    sorterIndex = dict(zip(sorter, range(len(sorter))))\n    sequences = []\n    seq_play = []\n    \n    added_plays = [[] for _ in gameIndex]\n    aborted_plays = [[] for _ in gameIndex]\n    \n    print('Starting with game: ' + str(gameId))\n    start_game = time.time()\n    playIds = tracking.query('gameId== ' + str(gameId))['playId'].value_counts().index\n    for playId in playIds:\n\n\n        ### compute meta info \n        play = tracking.query('playId == ' +str(playId) + 'and gameId== ' + str(gameId))\n        yardline = play_info.query('playId == ' +str(playId) + 'and gameId== ' + str(gameId))\n        absoluteYardlineNumber = yardline['absoluteYardlineNumber'].to_numpy()\n        if np.isnan(absoluteYardlineNumber).any():\n            print(gameId)\n            print(playId)\n            continue\n\n        yardsLeft = absoluteYardlineNumber if play['playDirection'].all() == 'left' else 100 - absoluteYardlineNumber\n        play['yardsLeft'] = np.ones(len(play))*yardsLeft\/100\n        play['down'] = np.ones(len(play))*yardline['down'].to_numpy()\n\n\n        ## compute team info\n        team_info = game_info.query('gameId=='+str(gameId))\n        if yardline.possessionTeam.to_numpy() == team_info['homeTeamAbbr'].to_numpy():\n            team = team_dict[team_info['visitorTeamAbbr'].to_numpy()[0]]\n        else:\n            team = team_dict[team_info['homeTeamAbbr'].to_numpy()[0]]\n        play['teamInfo'] = np.ones(len(play))*team\n\n\n\n        start = time.time()\n        if (set(list(play.position.value_counts().index)) <= set(sorter)) and (len(play.displayName.value_counts().index)==num_players): \n            try:\n                play = play.apply(compute_speed, axis=1)\n                player_trajectories = []\n                football = play.query('team==\"football\"')\n                football = football.sort_values('frameId')\n                devensive_players = 0\n                off_player = 0 \n                for player in sorter:\n                    trajectory1 = play.loc[play['position']==player]\n                    for i in trajectory1.displayName.value_counts().index:\n                        if i == 'Football':\n                            continue\n                        if player in defensive_lineup:\n                            devensive_players +=1    \n                        else:\n                            off_player +=1 \n                        trajectory = trajectory1.loc[trajectory1['displayName']==i]\n                        player_seq = trajectory.sort_values(['frameId'])\n                        try:\n                            dist_to_ball_x = np.absolute(player_seq[['x']].to_numpy()-football[['x']].to_numpy())\n                            dist_to_ball_y = np.absolute(player_seq[['y']].to_numpy()-football[['y']].to_numpy())\n                        except:\n                            px = np.vstack([player_seq[['x']].to_numpy(),player_seq[['x']].to_numpy()[-1]])\n                            py = np.vstack([player_seq[['y']].to_numpy(),player_seq[['y']].to_numpy()[-1]])\n                            dist_to_ball_x = np.absolute(px-football[['x']].to_numpy())\n                            dist_to_ball_y = np.absolute(py-football[['y']].to_numpy())\n                        player_seq['x'] -=  football['x'].iloc[0]\n                        player_seq['y'] -=  football['y'].iloc[0]\n                        player_seq = player_seq[['x','y','v_x','v_y']].to_numpy()\n                        final_player_traj = np.hstack((player_seq, dist_to_ball_x, dist_to_ball_y))\n                        player_trajectories.append(final_player_traj)\n                football['x'] -=  football['x'].iloc[0]\n                football['y'] -=  football['y'].iloc[0]\n                football_seq = football[['x','y']].to_numpy()\n                a = np.hstack(player_trajectories)\n\n                a = np.hstack((a,football_seq,np.expand_dims(trajectory['yardsLeft'].to_numpy(),-1), \n                              np.expand_dims(trajectory['down'].to_numpy(),-1)))#,\n                              #np.expand_dims(trajectory['teamInfo'].to_numpy(),-1)))\n                sequences.append(a)\n                seq_play.append(yardline)\n            except:\n                print(playId)\n        else:\n            print(playId)\n            continue\n    print('Done with one game - Time Passed in Seconds: ' + str(time.time()-start_game))\n    return sequences, seq_play, added_plays, aborted_plays\n\n","e8fbfd07":"\n\ndefensive_lineup = ['CB','SS', 'FS', 'S', 'MLB', 'OLB', 'ILB', 'LB', 'DB', 'DE']\n### load models \nmodel_list = 7#defensive_lineup\nnumOfPrevSteps = 15\nfeaturelen = 82\nprint('Load models...')\npolicies = []\n#### Load the model\nfor model_name in range(model_list):\n    model = Sequential()\n    model.add(tf.keras.layers.Bidirectional(LSTM(512 ,return_sequences=True)))\n    model.add(tf.keras.layers.Bidirectional(LSTM(512 , return_sequences=False)))\n    model.add(Dense(32,activation='relu'))\n    model.add(Dense(2, activation = 'linear') )\n    model.compile(loss='mae', optimizer='adam')\n    #model.load_weights(model_name)\n    #model.load_weights('init_weights_minibatch1024_10epochs.h5') # Load the pretrained model\n    model.reset_states()\n    policies.append(model)   \nprint('Loaded!')\n\n### loading pretrained models:\nval_policies = []\nfor n,model in enumerate(range(model_list)): \n    val_policies.append(tf.keras.models.load_model('\/kaggle\/input\/train-average-model\/model_'+str(n)))\nval_policies\nfor n,model in enumerate(range(model_list)): \n    val_policies[n].save('model_'+str(n))","f7ec8882":"plays = pd.read_csv(other[-1])\ntracking = pd.read_csv(tracking_data[-1])\ngames =pd.read_csv(other[1])\nsequences, seq_play, added_plays, aborted_plays = get_sequences_from_game(tracking, plays, games, gameId = 2018123013)","6c05f972":"### load example data\ngId = 2018123013\npId = 3286\nplays = pd.read_csv(other[-1])\ntracking = pd.read_csv(tracking_data[-1])\ngames =pd.read_csv(other[1])\nplay = tracking.query('gameId =='+str(gId)+ ' and playId ==' +str(pId))\n\nframeId_snap = play.query( 'event == \"ball_snap\"').frameId.to_numpy()[0]\nframeId_pass = play.query('event==\"pass_forward\"').frameId.to_numpy()[0]\n\n\nplay_red = play.query('frameId >= '+str(frameId_snap)+' and frameId <=' + str(frameId_pass))\nyardlineNumber = plays.query('gameId==' + str(gId) + ' and playId==' + str(pId))['yardlineNumber'].item()\nfig, ax = create_football_field(highlight_line=True, highlight_line_number=yardlineNumber)\nexample_play_home = play_red.query('team==\"home\"')\nexample_play_away = play_red.query('team == \"away\"')\nexample_football = play_red.query('team == \"football\"')\nexample_play_home.plot(x='x', y='y', kind='scatter', ax=ax, color='orange', s=30, legend='Away')\nexample_play_away.plot(x='x', y='y', kind='scatter', ax=ax, color='blue', s=30, legend='Home')\nexample_football.plot(x='x', y='y', kind='scatter', ax=ax, color='red', s=30, legend='football')\n\nplt.title(seq_play[15].playDescription.item())\nplt.legend()\nplt.show()","669f39f7":"## forward pass through the model \nseq_play[15]\nsample_seq = sequences[15]\nbatchSize=10\nsequence_length= 15\nk=1\npred = []\nfor index in range(len(policies)):\n    val_policies[index].reset_states()\n\nfor i in range(sample_seq.shape[0]-2): ### roll out over the whole play \n    next_prediction_all = []\n    n_fts = 6\n    if i<15:\n        continue\n    for index in range(len(policies)):\n        inp = np.array(sample_seq[i-sequence_length:i,:])\n        next_prediction = val_policies[index].predict(np.expand_dims(inp,0))\n        next_prediction_all.append(next_prediction.flatten())\n    next_prediction_all = np.vstack(next_prediction_all)\n    pred.append(next_prediction_all)\n\n    ## rollout \n    for index in range(len(policies)):\n        prev_feature = sample_seq[i+k,:].copy()\n        legacy_feature =  sample_seq[i+k+1, :].copy()\n        order = np.empty(batchSize).astype(int)\n        params = (prev_feature, legacy_feature, next_prediction_all, order)\n        result = roll_out_val(params)\n        sample_seq[i+k+1,:] = np.array(result)","84e30515":"yardlineNumber = plays.query('gameId==' + str(gId) + ' and playId==' + str(pId))['yardlineNumber'].item()\nfig, ax = create_football_field(highlight_line=True, highlight_line_number=yardlineNumber)\nexample_play_home = play_red.query('team==\"home\"')\nexample_play_away = play_red.query('team == \"away\"')\nexample_football = play_red.query('team == \"football\"')\nexample_football_ = play.query('team == \"football\"')\n\nexample_play_home.plot(x='x', y='y', kind='scatter', ax=ax, color='orange', s=30, legend='Away')\n#example_play_away.plot(x='x', y='y', kind='scatter', ax=ax, color='blue', s=30, legend='Home')\nexample_football.plot(x='x', y='y', kind='scatter', ax=ax, color='red', s=30, legend='football')\n\nfor p in pred[:frameId_pass]: \n    offset = [example_football_.query('frameId ==1')['x'].to_numpy(),  example_football_.query('frameId ==1')['y'].to_numpy()]\n    ax.scatter(p[:,0].flatten() + offset[0],\n               p[:,1].flatten() + offset[1], color='blue', s=30)\n","ec0e3498":"## forward pass through the model \nseq_play[0]\nsample_seq = sequences[0]\n\ngId = 2018123013\npId = 1930\n\nbatchSize=10\nsequence_length= 15\nk=1\npred = []\nfor index in range(len(policies)):\n    val_policies[index].reset_states()\n\nfor i in range(sample_seq.shape[0]-2): ### roll out over the whole play \n    next_prediction_all = []\n    n_fts = 6\n    if i<15:\n        continue\n    for index in range(len(policies)):\n        inp = np.array(sample_seq[i-sequence_length:i,:])\n        next_prediction = val_policies[index].predict(np.expand_dims(inp,0))\n        next_prediction_all.append(next_prediction.flatten())\n    next_prediction_all = np.vstack(next_prediction_all)\n    pred.append(next_prediction_all)\n\n    ## rollout \n    for index in range(len(policies)):\n        prev_feature = sample_seq[i+k,:].copy()\n        legacy_feature =  sample_seq[i+k+1, :].copy()\n        order = np.empty(batchSize).astype(int)\n        params = (prev_feature, legacy_feature, next_prediction_all, order)\n        result = roll_out_val(params)\n        sample_seq[i+k+1,:] = np.array(result)\n\nplay = tracking.query('gameId =='+str(gId)+ ' and playId ==' +str(pId))\n\nframeId_snap = play.query( 'event == \"ball_snap\"').frameId.to_numpy()[0]\nframeId_pass = play.query('event==\"pass_forward\"').frameId.to_numpy()[0]\n\n\nplay_red = play.query('frameId >= '+str(frameId_snap)+' and frameId <=' + str(frameId_pass))        \n        \n        \nyardlineNumber = plays.query('gameId==' + str(gId) + ' and playId==' + str(pId))['yardlineNumber'].item()\nfig, ax = create_football_field(highlight_line=True, highlight_line_number=yardlineNumber)\nexample_play_home = play_red.query('team==\"home\"')\nexample_play_away = play_red.query('team == \"away\"')\nexample_football = play_red.query('team == \"football\"')\nexample_football_ = play.query('team == \"football\"')\n\nexample_play_home.plot(x='x', y='y', kind='scatter', ax=ax, color='orange', s=30, legend='Away')\n#example_play_away.plot(x='x', y='y', kind='scatter', ax=ax, color='blue', s=30, legend='Home')\nexample_football.plot(x='x', y='y', kind='scatter', ax=ax, color='red', s=30, legend='football')\n\nfor p in pred[:frameId_pass]: \n    offset = [example_football_.query('frameId ==1')['x'].to_numpy(),  example_football_.query('frameId ==1')['y'].to_numpy()]\n    ax.scatter(p[:,0].flatten() + offset[0],\n               p[:,1].flatten() + offset[1], color='blue', s=30)\nplt.title(seq_play[0].playDescription.item())\nplt.legend()\nplt.show()\n","cb36703f":"# 3. Model \n\nThe problem of synthesising the defensive team can be formulated as predicting the next position of a set of previous positions of a single agent and collaborators. Therefore, our dataset consist of a sequence of demonstrations of the players positions and its meta data described in (2. Data). We assume, that every single agents identity does not change over a single demonstration - this means that the role does NOT change dynamically within the same sequence, this reduces our prediciton problem, as we do not need to match the agents with their corresponding models in training.\n\nThis problem is described in [Ross et al.](https:\/\/arxiv.org\/abs\/1011.0686) and is a subarea of reinforcement learning -> Policy Learning. \nThe problem is abstracted to learning the action $a_k$ of agent k corresponding to policy $\\pi_k$ as $\\pi_k(s_k)=a_k$ where $s_k$ describes the state of agent k. This decentralized setting can be decomposed into minimizing $$\\mathcal{L}_{imitation} = \\sum_k \\mathrm{E}_s[l(\\pi_k(s_k))]$$ where $l$ determines the loss function: In our case its the L1-Loss.\n\nTo prevent the model to deveate to much from the training distribution we use DAgger to train the estimator. DAgger is coded as: \n1. Predict next action with estimator from the baseline dataset\n2. Update trainig Data with prediction from 1. and create an updated dataset $\\mathcal{D}_{star}$\n3. Train Estimator with dataset $\\mathcal{D}_{star}$\n\n> The main idea is to use the learned policy's own prediction in the construction of subsequent states, thus simulating the test time performance during training. \n[Le et al.](https:\/\/arxiv.org\/abs\/1703.03121)\n\nAs estimator we use LSTM Networks as they are especially matching the requirements of learning sequential information. The training data are all the plays from ball snap until the (bitter) end. We use a sequence length of 15 frames and train with sequence overlap of 5 frames.\nOverall we train with 62.000 training samples a 15 frame sequences with 82 features. The validation set contains 8.000 samples. The test set is the last week of the regualar season.","7647b9d2":"# 4. Summary and Future Outlook\n\nWe trained a neural network witch is able to capture general movement of players. Theoretically, it is possible to scatch offensive plays and let the model generate the defensive player movement. The models are not fully converged and we assume that after a few more hours of training we are going to have a more precise model without any wiggeling. With the current model it is not really useful to change meta data as number of down, yards-to-go or player alignment, as the details of the predicted position would vanish in the noise of the model, yet I am confident future models in the [Repository](https:\/\/github.com\/marcimarc1\/NFL2021) are going to be able to capture small differences in defender movement.","ac9c72eb":"# 3. Results\n\nDue to a lag of time, we did not train our networks till the validation set did not further improve or build ensamble models -> those will be found in the github repository belonging to this report. The models discussed here hat a mean training error of 1.2m, were not pretrained with the pure immitation dataset and were not fully converged at the time of submitting the report.\n\n\nLet's compare the estimated trajectories from ball snap to Quarterback forward pass with the true trajectories to get a feeling for the accuracy of the predictions:","9feb5daa":"## Visual Investigation \n\nLet's investigate the play where Keenum is passing deep left to Sutton and gained 25 yards.\n\nAbove we can see the play from ball snap to forward pass. Denver is shown in yellow while the LA Chargers are defending in blue.\n\nBelow we can see, how our algorithm is predicting the defensive sequence.\n","1e2e1c44":"# 1. Data\n\nFor training the model, we used 14 weeks of the regular season game data, 2 weeks for evaluation and one week for testing. \n\nthe input data consists of all the plays conducted with 13 tracked players and the football.\n\nFor each player, we had the features: \n* absolute position,\n* relative position to the ball,\n* velocity in x and y coordinates \n\nfor each timestep, we hand the model the information of:\n\n* features of each player, \n* down, \n* yards left for the offensive team to get the next touchdown\n\nWe do NOT use the orientation of the players, as it is hard to predict the upper body orientation, as it is somewhat uncorrelated to the movement and have not really improved the prediction as it also needed to be estimated.\n\nAll the presented features resulted in a feature vector length of 82. 78 of those entries are features correlated to specific players 2 are the ball absolute position and the last 2 features are the meta data.\n\nThe players are sorted according to their team and position. first we included the features of the defensive team sorted after following positions: \n\n1. 'CB'\n2. 'SS'\n3. 'FS'\n4. 'S'\n5. 'DB'\n6. 'DE'\n\nThe offensive team is sorted as follows: \n\n\n1. 'WR'\n2. 'RB'\n3. 'TE'\n4. 'FB'\n5. 'QB'\n\nAs the most positions are double staffed, we filled up the positions in the appearing order. So if the defensive team looks i.e. somewhat: 2CB-2S-2DE- 1DB, the positions where filled as CB-CB-S-S-DB-DE-DE. \n","781ef796":"Would you guessed the movement in a similar faishon? Or your defensive coach?\n\nWe present the **Average Defense Behavior Prediction Network**, which is able to simulate the average defensive team behavior.","af67d514":"After scatching your offensive play, you basically need your defensive coach, who tells you how he would defend it. And he would scribble something on the board, which helps to adapt your offensive play. This is how the players actually moved before the pass was thrown: ","52d352d8":"The model seems to be a little bit more defensive then the players actually would be, but it predicts the movement of the players for this simple formation well, while in the previous (more complicated play) the defensive positions were predicted worse.","a6a4dda1":"# -1. Links and Resources\n[Repo](https:\/\/github.com\/marcimarc1\/NFL2021)\n\n[DAgger](https:\/\/arxiv.org\/abs\/1011.0686)\n\n[Immitation Learning](https:\/\/arxiv.org\/abs\/1703.03121)\n","96501705":"Seems like our model is a little bit stuttery and a few inches of, yet it already captures the movement of players and their running destination. \n\n\n## How is Denver doing in our first example AND how are our policies doing?\nWell to answer this quesition just have a look into our models prediction for the respective play\n","66e15b63":"# 0. Introduction \n\nin this report we present our analysis for the NFL Big Data Bowl Competition.\nOne of the most interesting questions, posed by the NFL was: \n* How does a defense react to certain types of offensive plays?\n\n\nIn this report, we want to give a tool, that can estimate how defense is reacting to specific offensive plays. \nTherefore:\n\n* We leveraged immitation learning to simulate defensive team behavior [(Paper)](https:\/\/arxiv.org\/abs\/1703.03121)\n* Analysed player movement of the simulation\n* Included Meta data of the game state to change behavior\n\n### Case No. 1\nImagine you are the coach of the Denver Broncos - your team is a few yards away of scoring a touchdown and you and your team are, *of course*, interested how the opposing teams defense is going to behave. So you basically scatched the offensive play, and you know how the defensive team is going to line up.\nThis could look like:"}}