{"cell_type":{"c2901cb0":"code","a53be769":"code","abaef40d":"code","7f5e21a1":"code","be8daf54":"code","ac421f1e":"code","9dbd3cb0":"code","617c6463":"code","8057066b":"code","77600368":"code","ccc15903":"code","1c7d3c34":"code","c8f673a4":"code","9c418ac4":"code","02751e25":"code","f0ac7aa7":"code","034cfebf":"code","7b40e83b":"code","7d952d42":"code","92b85aa4":"code","0fd09d65":"code","2ee1bc9b":"code","f2a36c8b":"code","5ec6d33f":"code","c12f8479":"code","12ea6cce":"code","808fd111":"code","fa60540c":"code","e161d49f":"code","7c48ebca":"code","49d42447":"code","0ff7e627":"code","7b4b03e4":"code","ca0c08c5":"code","dac85f9b":"code","3cd5da06":"code","a89579db":"code","fcb39f28":"code","b75ce929":"code","0c61be37":"code","06a79d21":"code","2a782158":"code","3e09d669":"code","6a0885e7":"code","787116d1":"code","50d21554":"code","47cce288":"code","bdc20609":"code","b5b1b43b":"code","1107ce79":"code","a03d4fd5":"code","087c9109":"markdown","7a1491d6":"markdown","a72524bf":"markdown","09a933ff":"markdown","80d6b456":"markdown","c9645cc2":"markdown","39ab5bcf":"markdown","e158d7d3":"markdown","ffaa9b35":"markdown","e7fbc7d9":"markdown","c78d7999":"markdown","90672e8b":"markdown","9b2964d5":"markdown","603698ee":"markdown","7ab1ad9e":"markdown","40591c34":"markdown","1b119849":"markdown","63292fc8":"markdown","4106c187":"markdown","a562c29f":"markdown","3b595daf":"markdown"},"source":{"c2901cb0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nimport gc\nfrom fbprophet import Prophet\nfrom sklearn.preprocessing import RobustScaler,StandardScaler,MinMaxScaler\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import metrics\nfrom lightgbm import LGBMClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve,RocCurveDisplay,ConfusionMatrixDisplay,confusion_matrix,roc_auc_score,accuracy_score\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import (AdaBoostClassifier,BaggingClassifier,ExtraTreesClassifier,GradientBoostingClassifier,RandomForestClassifier,VotingClassifier)\nfrom IPython.display import clear_output\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom sklearn import preprocessing\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os, psutil\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a53be769":"# !pip install pystan\n# !pip install fbprophet","abaef40d":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/test.csv\")\nsample_submission = pd.read_csv(\"..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv\")\n\ntrain_copy = train","7f5e21a1":"%%time\n# taken from https:\/\/www.kaggle.com\/ryanholbrook\/getting-started-september-2021-tabular-playground\n\ndef cpu_stats():\n    pid = os.getpid()\n    py = psutil.Process(pid)\n    memory_use = py.memory_info()[0] \/ 2. ** 30\n    return 'memory GB:' + str(np.round(memory_use, 2))\n\ndef score(X, y, model, cv):\n    scoring = [\"roc_auc\"]\n    scores = cross_validate(\n        model, X_train, y_train, scoring=scoring, cv=cv, return_train_score=True\n    )\n    scores = pd.DataFrame(scores).T\n    return scores.assign(\n        mean = lambda x: x.mean(axis=1),\n        std = lambda x: x.std(axis=1),\n    )\n\n## from: https:\/\/www.kaggle.com\/bextuychiev\/how-to-work-w-million-row-datasets-like-a-pro\ndef reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df\n\nprint('Function built')","be8daf54":"train = reduce_memory_usage(train, verbose=True)\ntest = reduce_memory_usage(test, verbose=True)\nprint(cpu_stats())\nprint('Memory reduced')","ac421f1e":"train_copy.head()","9dbd3cb0":"countries = train_copy['country'].unique()\nstores = train_copy['store'].unique()\nproducts = train_copy['product'].unique()\n\nprint(\"The countries that sold the products are {}\".format(countries))\nprint(\"The stores that sold the products are {}\".format(stores))\nprint(\"The products that are sold are {}\".format(products))","617c6463":"df_Finland_KaggleMart = train_copy[(train_copy['country'] == \"Finland\") & (train_copy['store'] == \"KaggleMart\")]\ndf_Finland_KaggleMart.head()","8057066b":"df_Finland_KaggleMart_KaggleMug = df_Finland_KaggleMart[df_Finland_KaggleMart['product'] == \"Kaggle Mug\"]\ndf_Finland_KaggleMart_KaggleHat = df_Finland_KaggleMart[df_Finland_KaggleMart['product'] == \"Kaggle Hat\"]\ndf_Finland_KaggleMart_KaggleSticker = df_Finland_KaggleMart[df_Finland_KaggleMart['product'] == \"Kaggle Sticker\"]","77600368":"df_Finland_KaggleRama = train_copy[(train_copy['country'] == \"Finland\") & (train_copy['store'] == \"KaggleRama\")]\ndf_Finland_KaggleRama.head()","ccc15903":"df_Finland_KaggleRama_KaggleMug = df_Finland_KaggleMart[df_Finland_KaggleMart['product'] == \"Kaggle Mug\"]\ndf_Finland_KaggleRama_KaggleHat = df_Finland_KaggleMart[df_Finland_KaggleMart['product'] == \"Kaggle Hat\"]\ndf_Finland_KaggleRama_KaggleSticker = df_Finland_KaggleMart[df_Finland_KaggleMart['product'] == \"Kaggle Sticker\"]","1c7d3c34":"df_Norway_KaggleMart = train_copy[(train_copy['country'] == \"Norway\") & (train_copy['store'] == \"KaggleMart\")]\ndf_Norway_KaggleMart.head()","c8f673a4":"df_Norway_KaggleMart_KaggleMug = df_Norway_KaggleMart[df_Norway_KaggleMart['product'] == \"Kaggle Mug\"]\ndf_Norway_KaggleMart_KaggleHat = df_Norway_KaggleMart[df_Norway_KaggleMart['product'] == \"Kaggle Hat\"]\ndf_Norway_KaggleMart_KaggleSticker = df_Norway_KaggleMart[df_Norway_KaggleMart['product'] == \"Kaggle Sticker\"]","9c418ac4":"df_Norway_KaggleRama = train_copy[(train_copy['country'] == \"Norway\") & (train_copy['store'] == \"KaggleRama\")]\ndf_Norway_KaggleRama.head()","02751e25":"df_Norway_KaggleRama_KaggleMug = df_Norway_KaggleRama[df_Norway_KaggleRama['product'] == \"Kaggle Mug\"]\ndf_Norway_KaggleRama_KaggleHat = df_Norway_KaggleRama[df_Norway_KaggleRama['product'] == \"Kaggle Hat\"]\ndf_Norway_KaggleRama_KaggleSticker = df_Norway_KaggleRama[df_Norway_KaggleRama['product'] == \"Kaggle Sticker\"]","f0ac7aa7":"df_Sweden_KaggleMart = train_copy[(train_copy['country'] == \"Sweden\") & (train_copy['store'] == \"KaggleMart\")]\ndf_Sweden_KaggleMart.head()","034cfebf":"df_Sweden_KaggleMart_KaggleMug = df_Sweden_KaggleMart[df_Sweden_KaggleMart['product'] == \"Kaggle Mug\"]\ndf_Sweden_KaggleMart_KaggleHat = df_Sweden_KaggleMart[df_Sweden_KaggleMart['product'] == \"Kaggle Hat\"]\ndf_Sweden_KaggleMart_KaggleSticker = df_Sweden_KaggleMart[df_Sweden_KaggleMart['product'] == \"Kaggle Sticker\"]","7b40e83b":"df_Sweden_KaggleRama = train_copy[(train_copy['country'] == \"Sweden\") & (train_copy['store'] == \"KaggleRama\")]\ndf_Sweden_KaggleRama.head()","7d952d42":"df_Sweden_KaggleRama_KaggleMug = df_Sweden_KaggleRama[df_Sweden_KaggleRama['product'] == \"Kaggle Mug\"]\ndf_Sweden_KaggleRama_KaggleHat = df_Sweden_KaggleRama[df_Sweden_KaggleRama['product'] == \"Kaggle Hat\"]\ndf_Sweden_KaggleRama_KaggleSticker = df_Sweden_KaggleRama[df_Sweden_KaggleRama['product'] == \"Kaggle Sticker\"]","92b85aa4":"df_Finland_KaggleMart_KaggleMug","0fd09d65":"df_Finland_KaggleMart_KaggleMug_preprocessed = df_Finland_KaggleMart_KaggleMug[['date','num_sold']]\ndf_Finland_KaggleMart_KaggleMug_preprocessed.head()","2ee1bc9b":"df_Finland_KaggleMart_KaggleMug_preprocessed.date = pd.to_datetime(df_Finland_KaggleMart_KaggleMug_preprocessed.date)\ndf_Finland_KaggleMart_KaggleMug_preprocessed.columns = ['ds', 'y']","f2a36c8b":"df_Finland_KaggleMart_KaggleMug_preprocessed.dtypes","5ec6d33f":"m = Prophet(interval_width=0.95, daily_seasonality=True)\nmodel = m.fit(df_Finland_KaggleMart_KaggleMug_preprocessed)","c12f8479":"# Here we predict 1000 days to the future\nfuture = m.make_future_dataframe(periods=1000,freq='D')","12ea6cce":"forecast = m.predict(future)\nforecast.head()","808fd111":"forecast.tail()","fa60540c":"plot1 = m.plot(forecast)","e161d49f":"plt2 = m.plot_components(forecast)","7c48ebca":"mask = (forecast['ds'] > '2018-12-31')& (forecast['ds'] <'2020-01-01')\nforecast_mask = forecast.loc[mask]","49d42447":"forecast_mask.tail()","0ff7e627":"#function\ndef predict(dataset):\n    df_preprocessed = dataset[['date','num_sold']]\n    df_preprocessed.date = pd.to_datetime(df_preprocessed.date)\n    df_preprocessed.columns = ['ds', 'y']\n    m = Prophet(interval_width=0.95, daily_seasonality=True)\n    model = m.fit(df_preprocessed)\n    future = m.make_future_dataframe(periods=1000,freq='D')\n    forecast = m.predict(future)\n    mask = (forecast['ds'] > '2018-12-31')& (forecast['ds'] <'2020-01-01')\n    forecast_mask = forecast.loc[mask]\n    forecast_mask['ds'] = forecast_mask['ds'].dt.strftime('%Y-%m-%d')\n    return forecast_mask","7b4b03e4":"forecast_Finland_KaggleMart_KaggleMug = predict(df_Finland_KaggleMart_KaggleMug)\nforecast_Finland_KaggleMart_KaggleHat = predict(df_Finland_KaggleMart_KaggleHat)\nforecast_Finland_KaggleMart_KaggleSticker = predict(df_Finland_KaggleMart_KaggleSticker)\nforecast_Finland_KaggleRama_KaggleMug = predict(df_Finland_KaggleRama_KaggleMug)\nforecast_Finland_KaggleRama_KaggleHat = predict(df_Finland_KaggleRama_KaggleHat)\nforecast_Finland_KaggleRama_KaggleSticker = predict(df_Finland_KaggleRama_KaggleSticker)\nforecast_Norway_KaggleMart_KaggleMug = predict(df_Norway_KaggleMart_KaggleMug) \nforecast_Norway_KaggleMart_KaggleHat = predict(df_Norway_KaggleMart_KaggleHat) \nforecast_Norway_KaggleMart_KaggleSticker = predict(df_Norway_KaggleMart_KaggleSticker) \nforecast_Norway_KaggleRama_KaggleMug = predict(df_Norway_KaggleRama_KaggleMug) \nforecast_Norway_KaggleRama_KaggleHat = predict(df_Norway_KaggleRama_KaggleHat) \nforecast_Norway_KaggleRama_KaggleSticker = predict(df_Norway_KaggleRama_KaggleSticker) \nforecast_Sweden_KaggleMart_KaggleMug = predict(df_Sweden_KaggleMart_KaggleMug) \nforecast_Sweden_KaggleMart_KaggleHat = predict(df_Sweden_KaggleMart_KaggleHat) \nforecast_Sweden_KaggleMart_KaggleSticker = predict(df_Sweden_KaggleMart_KaggleSticker) \nforecast_Sweden_KaggleRama_KaggleMug = predict(df_Sweden_KaggleRama_KaggleMug)\nforecast_Sweden_KaggleRama_KaggleHat = predict(df_Sweden_KaggleRama_KaggleHat)\nforecast_Sweden_KaggleRama_KaggleSticker = predict(df_Sweden_KaggleRama_KaggleSticker)","ca0c08c5":"def forecast_processing(forecast):\n    forecast.drop(forecast.columns.difference(['ds','yhat']), 1, inplace=True)\n    forecast = forecast.rename(columns={'ds': 'date', 'yhat': 'num_sold'})\n#     forecast.num_sold = forecast.num_sold.astype(int)\n    return forecast","dac85f9b":"forecast_Finland_KaggleMart_KaggleMug = forecast_processing(forecast_Finland_KaggleMart_KaggleMug)\nforecast_Finland_KaggleMart_KaggleHat = forecast_processing(forecast_Finland_KaggleMart_KaggleHat)\nforecast_Finland_KaggleMart_KaggleSticker = forecast_processing(forecast_Finland_KaggleMart_KaggleSticker)\nforecast_Finland_KaggleRama_KaggleMug = forecast_processing(forecast_Finland_KaggleRama_KaggleMug)\nforecast_Finland_KaggleRama_KaggleHat = forecast_processing(forecast_Finland_KaggleRama_KaggleHat)\nforecast_Finland_KaggleRama_KaggleSticker = forecast_processing(forecast_Finland_KaggleRama_KaggleSticker)\nforecast_Norway_KaggleMart_KaggleMug = forecast_processing(forecast_Norway_KaggleMart_KaggleMug) \nforecast_Norway_KaggleMart_KaggleHat = forecast_processing(forecast_Norway_KaggleMart_KaggleHat) \nforecast_Norway_KaggleMart_KaggleSticker = forecast_processing(forecast_Norway_KaggleMart_KaggleSticker) \nforecast_Norway_KaggleRama_KaggleMug = forecast_processing(forecast_Norway_KaggleRama_KaggleMug) \nforecast_Norway_KaggleRama_KaggleHat = forecast_processing(forecast_Norway_KaggleRama_KaggleHat) \nforecast_Norway_KaggleRama_KaggleSticker = forecast_processing(forecast_Norway_KaggleRama_KaggleSticker) \nforecast_Sweden_KaggleMart_KaggleMug = forecast_processing(forecast_Sweden_KaggleMart_KaggleMug) \nforecast_Sweden_KaggleMart_KaggleHat = forecast_processing(forecast_Sweden_KaggleMart_KaggleHat) \nforecast_Sweden_KaggleMart_KaggleSticker = forecast_processing(forecast_Sweden_KaggleMart_KaggleSticker) \nforecast_Sweden_KaggleRama_KaggleMug = forecast_processing(forecast_Sweden_KaggleRama_KaggleMug)\nforecast_Sweden_KaggleRama_KaggleHat = forecast_processing(forecast_Sweden_KaggleRama_KaggleHat)\nforecast_Sweden_KaggleRama_KaggleSticker = forecast_processing(forecast_Sweden_KaggleRama_KaggleSticker)","3cd5da06":"test_copy = test","a89579db":"test_Finland_KaggleMart = test_copy[(test_copy['country'] == \"Finland\") & (test_copy['store'] == \"KaggleMart\")]\ntest_Finland_KaggleMart_KaggleMug = test_Finland_KaggleMart[test_Finland_KaggleMart['product'] == \"Kaggle Mug\"]\ntest_Finland_KaggleMart_KaggleHat = test_Finland_KaggleMart[test_Finland_KaggleMart['product'] == \"Kaggle Hat\"]\ntest_Finland_KaggleMart_KaggleSticker = test_Finland_KaggleMart[test_Finland_KaggleMart['product'] == \"Kaggle Sticker\"]\n\ntest_Finland_KaggleRama = test_copy[(test_copy['country'] == \"Finland\") & (test_copy['store'] == \"KaggleRama\")]\ntest_Finland_KaggleRama_KaggleMug = test_Finland_KaggleRama[test_Finland_KaggleRama['product'] == \"Kaggle Mug\"]\ntest_Finland_KaggleRama_KaggleHat = test_Finland_KaggleRama[test_Finland_KaggleRama['product'] == \"Kaggle Hat\"]\ntest_Finland_KaggleRama_KaggleSticker = test_Finland_KaggleRama[test_Finland_KaggleRama['product'] == \"Kaggle Sticker\"]\n\ntest_Norway_KaggleMart = test_copy[(test_copy['country'] == \"Norway\") & (test_copy['store'] == \"KaggleMart\")]\ntest_Norway_KaggleMart_KaggleMug = test_Norway_KaggleMart[test_Norway_KaggleMart['product'] == \"Kaggle Mug\"]\ntest_Norway_KaggleMart_KaggleHat = test_Norway_KaggleMart[test_Norway_KaggleMart['product'] == \"Kaggle Hat\"]\ntest_Norway_KaggleMart_KaggleSticker = test_Norway_KaggleMart[test_Norway_KaggleMart['product'] == \"Kaggle Sticker\"]\n\ntest_Norway_KaggleRama = test_copy[(test_copy['country'] == \"Norway\") & (test_copy['store'] == \"KaggleRama\")]\ntest_Norway_KaggleRama_KaggleMug = test_Norway_KaggleRama[test_Norway_KaggleRama['product'] == \"Kaggle Mug\"]\ntest_Norway_KaggleRama_KaggleHat = test_Norway_KaggleRama[test_Norway_KaggleRama['product'] == \"Kaggle Hat\"]\ntest_Norway_KaggleRama_KaggleSticker = test_Norway_KaggleRama[test_Norway_KaggleRama['product'] == \"Kaggle Sticker\"]\n\ntest_Sweden_KaggleMart = test_copy[(test_copy['country'] == \"Sweden\") & (test_copy['store'] == \"KaggleMart\")]\ntest_Sweden_KaggleMart_KaggleMug = test_Sweden_KaggleMart[test_Sweden_KaggleMart['product'] == \"Kaggle Mug\"]\ntest_Sweden_KaggleMart_KaggleHat = test_Sweden_KaggleMart[test_Sweden_KaggleMart['product'] == \"Kaggle Hat\"]\ntest_Sweden_KaggleMart_KaggleSticker = test_Sweden_KaggleMart[test_Sweden_KaggleMart['product'] == \"Kaggle Sticker\"]\n\ntest_Sweden_KaggleRama = test_copy[(test_copy['country'] == \"Sweden\") & (test_copy['store'] == \"KaggleRama\")]\ntest_Sweden_KaggleRama_KaggleMug = test_Sweden_KaggleRama[test_Sweden_KaggleRama['product'] == \"Kaggle Mug\"]\ntest_Sweden_KaggleRama_KaggleHat = test_Sweden_KaggleRama[test_Sweden_KaggleRama['product'] == \"Kaggle Hat\"]\ntest_Sweden_KaggleRama_KaggleSticker = test_Sweden_KaggleRama[test_Sweden_KaggleRama['product'] == \"Kaggle Sticker\"]","fcb39f28":"forecast_Finland_KaggleMart_KaggleMug","b75ce929":"test_Finland_KaggleMart_KaggleMug","0c61be37":"# forecast_Finland_KaggleMart_KaggleMug['date'] = forecast_Finland_KaggleMart_KaggleMug['date'].dt.strftime('%Y-%m-%d')","06a79d21":"forecast_Finland_KaggleMart_KaggleMug","2a782158":"forecast_Finland_KaggleMart_KaggleMug","3e09d669":"test_Finland_KaggleMart_KaggleMug = test_Finland_KaggleMart_KaggleMug.merge(forecast_Finland_KaggleMart_KaggleMug, on='date')\ntest_Finland_KaggleMart_KaggleHat = test_Finland_KaggleMart_KaggleHat.merge(forecast_Finland_KaggleMart_KaggleHat, on='date')\ntest_Finland_KaggleMart_KaggleSticker = test_Finland_KaggleMart_KaggleSticker.merge(forecast_Finland_KaggleMart_KaggleSticker, on='date')\ntest_Finland_KaggleRama_KaggleMug = test_Finland_KaggleRama_KaggleMug.merge(forecast_Finland_KaggleRama_KaggleMug, on='date')\ntest_Finland_KaggleRama_KaggleHat = test_Finland_KaggleRama_KaggleHat.merge(forecast_Finland_KaggleRama_KaggleHat, on='date')\ntest_Finland_KaggleRama_KaggleSticker = test_Finland_KaggleRama_KaggleSticker.merge(forecast_Finland_KaggleRama_KaggleSticker, on='date')\ntest_Norway_KaggleMart_KaggleMug = test_Norway_KaggleMart_KaggleMug.merge(forecast_Norway_KaggleMart_KaggleMug, on='date')\ntest_Norway_KaggleMart_KaggleHat = test_Norway_KaggleMart_KaggleHat.merge(forecast_Norway_KaggleMart_KaggleHat, on='date')\ntest_Norway_KaggleMart_KaggleSticker = test_Norway_KaggleMart_KaggleSticker.merge(forecast_Norway_KaggleMart_KaggleSticker, on='date')\ntest_Norway_KaggleRama_KaggleMug = test_Norway_KaggleRama_KaggleMug.merge(forecast_Norway_KaggleRama_KaggleMug, on='date')\ntest_Norway_KaggleRama_KaggleHat = test_Norway_KaggleRama_KaggleHat.merge(forecast_Norway_KaggleRama_KaggleHat, on='date')\ntest_Norway_KaggleRama_KaggleSticker = test_Norway_KaggleRama_KaggleSticker.merge(forecast_Norway_KaggleRama_KaggleSticker, on='date')\ntest_Sweden_KaggleMart_KaggleMug = test_Sweden_KaggleMart_KaggleMug.merge(forecast_Sweden_KaggleMart_KaggleMug, on='date')\ntest_Sweden_KaggleMart_KaggleHat = test_Sweden_KaggleMart_KaggleHat.merge(forecast_Sweden_KaggleMart_KaggleHat, on='date')\ntest_Sweden_KaggleMart_KaggleSticker = test_Sweden_KaggleMart_KaggleSticker.merge(forecast_Sweden_KaggleMart_KaggleSticker, on='date')\ntest_Sweden_KaggleRama_KaggleMug = test_Sweden_KaggleRama_KaggleMug.merge(forecast_Sweden_KaggleRama_KaggleMug, on='date')\ntest_Sweden_KaggleRama_KaggleHat = test_Sweden_KaggleRama_KaggleHat.merge(forecast_Sweden_KaggleRama_KaggleHat, on='date')\ntest_Sweden_KaggleRama_KaggleSticker = test_Sweden_KaggleRama_KaggleSticker.merge(forecast_Sweden_KaggleRama_KaggleSticker, on='date')","6a0885e7":"frames = [test_Finland_KaggleMart_KaggleMug, test_Finland_KaggleMart_KaggleHat, test_Finland_KaggleMart_KaggleSticker,test_Finland_KaggleRama_KaggleMug,test_Finland_KaggleRama_KaggleHat,test_Finland_KaggleRama_KaggleSticker,test_Norway_KaggleMart_KaggleMug,test_Norway_KaggleMart_KaggleHat,test_Norway_KaggleMart_KaggleSticker,test_Norway_KaggleRama_KaggleMug,test_Norway_KaggleRama_KaggleHat,test_Norway_KaggleRama_KaggleSticker,test_Sweden_KaggleMart_KaggleMug,test_Sweden_KaggleMart_KaggleHat,test_Sweden_KaggleMart_KaggleSticker,test_Sweden_KaggleRama_KaggleMug,test_Sweden_KaggleRama_KaggleHat,test_Sweden_KaggleRama_KaggleSticker]\nresult = pd.concat(frames)","787116d1":"result","50d21554":"result['date'] =pd.to_datetime(result.date)\nresult = result.sort_values(by=['date'])","47cce288":"result = result.drop(['date', 'country','store','product'], axis=1)","bdc20609":"sample_submission.head()","b5b1b43b":"result = result.sort_values(by=['row_id'])","1107ce79":"result.head()","a03d4fd5":"result.to_csv('submission.csv', index=False)\nresult.head()","087c9109":"### Sweden","7a1491d6":"The function below is used to preprocessed the forecasted dataframes before merged with the test data","a72524bf":"<img src= \"https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F59561%2Fcc6d9a21f0c3ed71b00113b33efb2b66%2Fkaggle_sweater.png?generation=1640900016906235&alt=media\" alt =\"Kaggle Store\" style='width: 400px;'>","09a933ff":"Here we merge the seperated datasets and the forecasted number of sold items","80d6b456":"Have any questions? Just ask me in the comment section","c9645cc2":"___\n## Data Modeling\n\nNow we're headed to the fun part, the part where we train the datasets","39ab5bcf":"___\n\n## Data Preprocessing","e158d7d3":"## Installing Prophet Model\nLet's install the prophet model","ffaa9b35":"### Finland","e7fbc7d9":"### Norway","c78d7999":"Here is the function to reduce the memory and time to process the dataset","90672e8b":"## Test Merging","9b2964d5":"## Importing the Datasets","603698ee":"Same as the train, we need to seperate the test dataframe based on country, store, and product.","7ab1ad9e":"Here we will analyze the unique values of the dataset","40591c34":"I am masking the dataset, because we only need 1 year of 2019 to be submitted","1b119849":"___\n## Functioning\n\nBecause we have 18 datasets,\nwe conclude the cells that we have and inserted them all in a function","63292fc8":"## Importing Libraries","4106c187":"## Dividing the Datasets\n\nHere, I am planning to divide the datasets based on its country, store, and product.\n\nWe will train the datasets individually, so bear with me, there are 18 datasets.","a562c29f":"Okay, let me immerse you to the facts. \n\nProphet doesn't only tell you what is the predicted value, but the model also add other parameters, such as trend, the boundaries, etc.\n\nUsed it as your advantage :D","3b595daf":"# Tabular Januari 2022\n\nMade by: Farel Arden\n\nHey Happy New Year!\n\nHere, we will predict the sales of Kaggle Store in the future.\n\nHopefully this will be a reality, I really want a Kaggle Sweater for my own. It looks dope!"}}