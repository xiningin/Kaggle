{"cell_type":{"c23fe74c":"code","09549484":"code","2b56fe51":"code","eb9e3c51":"code","6f81b763":"code","93f7b92e":"code","a4625027":"code","2ebeb427":"code","83a0bd64":"code","2204bd4f":"code","f9d462ad":"code","d2cebac1":"code","7839ee1b":"code","82ae835c":"code","acbd6295":"code","7d849251":"markdown","3db3ada3":"markdown","533d8269":"markdown","ad06bc59":"markdown","32a7588d":"markdown","f7e95994":"markdown","09049350":"markdown","ff5a7d7f":"markdown","5af58f83":"markdown","e888d05a":"markdown","63847717":"markdown","b32c67b4":"markdown","1803376d":"markdown","e8e999c5":"markdown","747a5197":"markdown","1f39e155":"markdown","a42ee621":"markdown","548c000a":"markdown","3636c794":"markdown"},"source":{"c23fe74c":"import os\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","09549484":"sns.set()","2b56fe51":"data_dir = '..\/input\/cat-in-the-dat\/'\nos.listdir(data_dir)","eb9e3c51":"train = pd.read_csv(data_dir + 'train.csv')\n\nprint(train.shape)\ntrain.head()","6f81b763":"desc = pd.DataFrame(train.nunique())\ndesc.columns = ['cardinality']\n\ndesc['dtype'] = train.dtypes\ndesc['nulls'] = train.isnull().sum()\n\ndesc","93f7b92e":"# plot display settings\nimage_columns = 2\nimage_layer_index = 0\nuse_figsize = (15, 4)\nuse_wspace = 0.5\n\n# initialize figure (1st layer)\nfig = plt.figure(figsize=use_figsize)\nplt.subplots_adjust(wspace=use_wspace)\nfor i, col in enumerate([x for x in train.columns if 'bin' in x]):\n    \n    if (i != 0) and (i % image_columns == 0):\n        # end of layer, show layer and reset layer_index\n        image_layer_index = 0\n        plt.show()\n        \n        # initialize figure (next layer)\n        fig = plt.figure(figsize=use_figsize)\n        plt.subplots_adjust(wspace=use_wspace)\n    \n    image_layer_index += 1\n    \n    # add subplot\n    ax = fig.add_subplot(int('1{}{}'.format(image_columns, image_layer_index)))\n    \n    # specity order\n    use_order = sorted(train[col].unique())\n    \n    sns.countplot(x=col, data=train, order=use_order)\n\n    # add target rate plot\n    target_rate = train.groupby([col]).agg({'target': 'mean'})\n    \n    ax2 = ax.twinx()\n    ax2.plot(range(target_rate.shape[0]), target_rate.loc[use_order, 'target'], '--o', color='black', markersize=8)\n    ax2.set_ylabel('target rate')\n    ax2.grid(False)","a4625027":"# plot display settings\nimage_columns = 2\nimage_layer_index = 0\nuse_figsize = (15, 4)\nuse_wspace = 0.5\n\n# initialize figure (1st layer)\nfig = plt.figure(figsize=use_figsize)\nplt.subplots_adjust(wspace=use_wspace)\nfor i, col in enumerate([x for x in train.columns if ('nom' in x) and (train[x].nunique() < 30)]):\n    \n    if (i != 0) and (i % image_columns == 0):\n        # end of layer, show layer and reset layer_index\n        image_layer_index = 0\n        plt.show()\n        \n        # initialize figure (next layer)\n        fig = plt.figure(figsize=use_figsize)\n        plt.subplots_adjust(wspace=use_wspace)\n    \n    image_layer_index += 1\n    \n    # add subplot\n    ax = fig.add_subplot(int('1{}{}'.format(image_columns, image_layer_index)))\n    \n    # order by count\n    use_order = train[col].value_counts().index\n    \n    sns.countplot(x=col, data=train, order=use_order)\n    \n    # add target rate plot\n    target_rate = train.groupby([col]).agg({'target': 'mean'})\n    \n    ax2 = ax.twinx()\n    ax2.plot(range(target_rate.shape[0]), target_rate.loc[use_order, 'target'], '--o', color='black', markersize=8)\n    ax2.set_ylabel('target rate')\n    ax2.grid(False)","2ebeb427":"# check if all Trapezoids are Lions\n\nprint('..check if all Trapezoids are Lions..')\nprint('Trapezoid target rate:', train.loc[train['nom_1'] == 'Trapezoid']['target'].mean())\n\nprint('\\nTrapezoid nom_2 counts:')\ntrain.loc[train['nom_1'] == 'Trapezoid']['nom_2'].value_counts()","83a0bd64":"# check if all Squares are from Canada\n\nprint('..check if all Squares are from Canada..')\nprint('Square target rate:', train.loc[train['nom_1'] == 'Trapezoid']['target'].mean())\n\nprint('\\nSquare nom_3 counts:')\n\nprint(train.loc[train['nom_1'] == 'Square']['target'].mean())\ntrain.loc[train['nom_1'] == 'Square']['nom_3'].value_counts()","2204bd4f":"meme_url = plt.imread(\"https:\/\/i.kym-cdn.com\/entries\/icons\/original\/000\/027\/475\/Screen_Shot_2018-10-25_at_11.02.15_AM.png\")\nplt.imshow(meme_url, interpolation='nearest', aspect='equal')\n             \n# plt.grid(False)\nplt.xticks([])\nplt.yticks([])\n\nplt.xlabel('...', size=20)\n\nplt.show()","f9d462ad":"ord_1_manual_order = ['Novice', 'Contributor', 'Expert', 'Master', 'Grandmaster']\nord_2_manual_order = ['Freezing', 'Cold', 'Warm', 'Hot', 'Boiling Hot', 'Lava Hot']\n\n# plot display settings\nimage_columns = 2\nimage_layer_index = 0\nuse_figsize = (15, 4)\nuse_wspace = 0.5\n\n# initialize figure (1st layer)\nfig = plt.figure(figsize=use_figsize)\nplt.subplots_adjust(wspace=use_wspace)\nfor i, col in enumerate([x for x in train.columns if ('ord' in x) and (train[x].nunique() < 30)]):\n    \n    if (i != 0) and (i % image_columns == 0):\n        # end of layer, show layer and reset layer_index\n        image_layer_index = 0\n        plt.show()\n        \n        # initialize figure (next layer)\n        fig = plt.figure(figsize=use_figsize)\n        plt.subplots_adjust(wspace=use_wspace)\n    \n    image_layer_index += 1\n    \n    # add subplot\n    ax = fig.add_subplot(int('1{}{}'.format(image_columns, image_layer_index)))\n    \n    # specify order\n    if col == 'ord_1':\n        use_order = ord_1_manual_order\n    elif col == 'ord_2':\n        use_order = ord_2_manual_order\n    else:\n        use_order = sorted(train[col].unique())\n    \n    sns.countplot(x=col, data=train, order=use_order)\n    \n    # add target rate plot\n    target_rate = train.groupby([col]).agg({'target': 'mean'})\n    \n    ax2 = ax.twinx()\n    ax2.plot(range(target_rate.shape[0]), target_rate.loc[use_order, 'target'], '--o', color='black', markersize=8)\n    ax2.set_ylabel('target rate')\n    ax2.grid(False)","d2cebac1":"feels_good_url = plt.imread(\"https:\/\/i.kym-cdn.com\/photos\/images\/original\/000\/591\/928\/94f.png\")\nplt.imshow(feels_good_url, interpolation='nearest', aspect='equal')\n             \n# plt.grid(False)\nplt.xticks([])\nplt.yticks([])\n\nplt.xlabel('how i felt after seeing the plots')\n\nplt.show()","7839ee1b":"fig = plt.figure(figsize=(15, 5))\nax = fig.add_subplot(111)\n\ncol = 'ord_5'\n\nuse_order = sorted(train[col].unique())\nsns.countplot(x=col, data=train, order=use_order)\n\n# add target rate plot\ntarget_rate = train.groupby([col]).agg({'target': 'mean'})\n\nax2 = ax.twinx()\nax2.plot(range(target_rate.shape[0]), target_rate.loc[use_order, 'target'], color='black')\nax2.set_ylabel('target rate')\nax2.grid(False)\n\nplt.xticks([])\n\nprint('first 10 in order:', use_order[:10])\nplt.show()","82ae835c":"fig = plt.figure(figsize=(15, 5))\nax = fig.add_subplot(111)\n\ntrain['ord_5_first'] = train['ord_5'].apply(lambda x: x[0])\ncol = 'ord_5_first'\n\nuse_order = sorted(train[col].unique())\nsns.countplot(x=col, data=train, order=use_order)\n\n# add target rate plot\ntarget_rate = train.groupby([col]).agg({'target': 'mean'})\n\nax2 = ax.twinx()\nax2.plot(range(target_rate.shape[0]), target_rate.loc[use_order, 'target'], color='black')\nax2.set_ylabel('target rate')\nax2.grid(False)\n\nprint('first 10 in order:', use_order[:10])\nplt.show()","acbd6295":"# plot display settings\nimage_columns = 2\nimage_layer_index = 0\nuse_figsize = (15, 4)\nuse_wspace = 0.5\n\n# initialize figure (1st layer)\nfig = plt.figure(figsize=use_figsize)\nplt.subplots_adjust(wspace=use_wspace)\nfor i, col in enumerate(['day', 'month']):\n    \n    if (i != 0) and (i % image_columns == 0):\n        # end of layer, show layer and reset layer_index\n        image_layer_index = 0\n        plt.show()\n        \n        # initialize figure (next layer)\n        fig = plt.figure(figsize=use_figsize)\n        plt.subplots_adjust(wspace=use_wspace)\n    \n    image_layer_index += 1\n    \n    # add subplot\n    ax = fig.add_subplot(int('1{}{}'.format(image_columns, image_layer_index)))\n    \n    # specity order\n    use_order = sorted(train[col].unique())\n    \n    sns.countplot(x=col, data=train.sort_values(by=col), order=use_order)\n    \n    # add target rate plot\n    target_rate = train.groupby([col]).agg({'target': 'mean'})\n    \n    ax2 = ax.twinx()\n    ax2.plot(range(target_rate.shape[0]), target_rate.loc[use_order, 'target'], '--o', color='black', markersize=8)\n    ax2.set_ylabel('target rate')\n    ax2.grid(False)","7d849251":"- they are not the same but their counts and target rates are very close.. that's strange..\n- it might be good to watch out for how these features affect the model..","3db3ada3":"# Nominal Features\nfor features with cardinality < 30","533d8269":"- looks a bit better.. I would encode this in the same way but only retain either __ord_5__ or __ord_5_first__ in the model","ad06bc59":"- __day__ feature could be cyclical as target rate of __day 7__ is close to target rate of __day 1__\n- __month__ feature could be cyclical but seeing the target rate trend.. maybe it doesn't matter","32a7588d":"- looks like __nom_1__, __nom_2__, __nom_3__ are just the same feature.. let's check:","f7e95994":"# Cat Distribution & Target Rate EDA\n\nIn this notebook is a __simple EDA__ for the __cat-in-the-dat__ competition. For low cardinality features, __counts and target rates for each category were plotted together__. Nominal features were ordered by count and ordinal features were ordered properly. The goal is to see the relationship of the features with the target and gain insights for feature encoding and model development.","09049350":"## Import Libraries","ff5a7d7f":"# Summary\n- Some binary features are stronger than others.\n- Strangely, some nominal features share very similar distributions and target rates, but are not the same.\n- All ordinal features have linear-like relationships with the target when ordered properly.\n- The day feature might be cyclical.\n\nHappy encoding! :)","5af58f83":"- we have a __max cardinality of 11,981__\n- all columns have no nulls as stated in the data description","e888d05a":"- ord_5 arranged in proper order (i think?) has a very rough but linear-like relationship with the target rate\n    - some categories have very small counts, so their target rate here might not be representative of their actual target rate \n- later I would still encode it numerically (e.g. 1 - n) using the proper order\n    - I would also try encoding categories with sufficient counts only\n- if we use only the first letter, we get:","63847717":"# Column Metadata","b32c67b4":"# Ordinal Features\n- arranged in proper order","1803376d":"# Possibly Cyclical Features","e8e999c5":"## ord_0 to ord_4","747a5197":"- the ordinal features arranged in proper order have linear-like relationships with the target\n    - for lack of a better term, a \"linear-like\" relationship for two variables x and y is when: generally, y increases as x increases\n- this indicates that the order probably holds some meaning that is useful for modelling\n- later I would encode them numerically (e.g. 1 - n) using the proper order","1f39e155":"- __bin_1__ and __bin 4__ have relatively bigger changes in target rate, and are stronger features","a42ee621":"## ord_5","548c000a":"## Load Data","3636c794":"# Binary Features"}}