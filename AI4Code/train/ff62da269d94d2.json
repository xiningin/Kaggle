{"cell_type":{"754333a0":"code","24b22cd0":"code","e9e240df":"code","f18f553d":"code","b99f4705":"code","e21d0983":"code","a0efcef1":"code","af167724":"code","e9e319dd":"code","f14d821d":"code","2e9cabc1":"code","1f45d2b1":"code","30b0b347":"code","af7805dc":"code","aad6079c":"code","18875553":"code","e7d577d9":"code","f7ecee46":"code","c4451f03":"code","56e0f930":"code","c37bc0d9":"code","52635a70":"code","c5fbf34d":"code","68af3964":"code","955e3917":"code","d07804fa":"code","541e6ab0":"code","fb839dff":"code","7bcd22cf":"code","a6f130e7":"code","4e2a80ce":"code","9aa4118d":"code","d600fecf":"markdown","dde1b88e":"markdown","033926d5":"markdown","02cfbe82":"markdown","b7240fa5":"markdown","0d19a734":"markdown","e9f64da2":"markdown","279fbd24":"markdown","64220c30":"markdown","68ddf4d1":"markdown","9f96600b":"markdown","86476a3f":"markdown"},"source":{"754333a0":"import pandas as pd\nimport numpy as np\nimport warnings, os\nimport datetime\n\nwarnings.filterwarnings('ignore')\n                        \n","24b22cd0":"DATA_PATH = '..\/input\/ashrae-energy-prediction\/'\n# Input data files are available in the \"..\/input\/\" directory.\nfor dirname, _, filenames in os.walk(DATA_PATH):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e9e240df":"weather_df = pd.read_csv(DATA_PATH + 'weather_train.csv') #, parse_dates=[\"timestamp\"]","f18f553d":"def missing_statistics(df):    \n    statitics = pd.DataFrame(df.isnull().sum()).reset_index()\n    statitics.columns=['COLUMN NAME',\"MISSING VALUES\"]\n    statitics['TOTAL ROWS'] = df.shape[0]\n    statitics['% MISSING'] = round((statitics['MISSING VALUES']\/statitics['TOTAL ROWS'])*100,2)\n    return statitics","b99f4705":"missing_statistics(weather_df)","e21d0983":"weather_df.shape","a0efcef1":"52.285714285714285 * 168 * 16","af167724":"time_format = \"%Y-%m-%d %H:%M:%S\"\nstart_date = datetime.datetime.strptime(weather_df['timestamp'].min(),time_format)\nend_date = datetime.datetime.strptime(weather_df['timestamp'].max(),time_format)\nprint(start_date, end_date)","e9e319dd":"total_hours = int(((end_date - start_date).total_seconds() + 3600) \/ 3600)\ntotal_hours","f14d821d":"correct_hours_list = [(end_date - datetime.timedelta(hours=x)).strftime(time_format) for x in range(total_hours)]\nprint(correct_hours_list[0] ,len(correct_hours_list))","2e9cabc1":"missing_hours = []\nfor site_id in range(16):\n    site_hours = np.array(weather_df[weather_df['site_id'] == site_id]['timestamp'])\n    new_rows = pd.DataFrame(np.setdiff1d(correct_hours_list,site_hours),columns=['timestamp'])\n    new_rows['site_id'] = site_id\n    weather_df = pd.concat([weather_df,new_rows])\n\nweather_df = weather_df.reset_index(drop=True)  ","1f45d2b1":"weather_df.shape","30b0b347":"weather_df[\"datetime\"] = pd.to_datetime(weather_df[\"timestamp\"])\nweather_df[\"day\"] = weather_df[\"datetime\"].dt.day\nweather_df[\"week\"] = weather_df[\"datetime\"].dt.week\nweather_df[\"month\"] = weather_df[\"datetime\"].dt.month\nweather_df[\"hour\"] = weather_df[\"datetime\"].dt.hour","af7805dc":"weather_df = weather_df.set_index(['site_id','day','month'])","aad6079c":"weather_df[weather_df[\"week\"] == 53]","18875553":"mask = weather_df[\"week\"] == 53\nweather_df[\"week\"][mask] = 0","e7d577d9":"missing_statistics(weather_df)","f7ecee46":"air_temperature_filler = pd.DataFrame(weather_df.groupby(['site_id','day','month'])['air_temperature'].mean(),columns=[\"air_temperature\"])","c4451f03":"weather_df.update(air_temperature_filler,overwrite=False) # Only update values wich are nana","56e0f930":"# Step 1\ncloud_coverage_filler = weather_df.groupby(['site_id','day','month'])['cloud_coverage'].mean()\n# Step 2\ncloud_coverage_filler = pd.DataFrame(cloud_coverage_filler.fillna(method='ffill'),columns=[\"cloud_coverage\"])\nweather_df.update(cloud_coverage_filler,overwrite=False)","c37bc0d9":"cloud_coverage_filler","52635a70":"due_temperature_filler = pd.DataFrame(weather_df.groupby(['site_id','day','month'])['dew_temperature'].mean(),columns=[\"dew_temperature\"])\nweather_df.update(due_temperature_filler,overwrite=False)","c5fbf34d":"# Step 1\nsea_level_filler = weather_df.groupby(['site_id','day','month'])['sea_level_pressure'].mean()\n# Step 2\nsea_level_filler = pd.DataFrame(sea_level_filler.fillna(method='ffill'),columns=['sea_level_pressure'])\nweather_df.update(sea_level_filler,overwrite=False)","68af3964":"wind_direction_filler =  pd.DataFrame(weather_df.groupby(['site_id','day','month'])['wind_direction'].mean(),columns=['wind_direction'])\nweather_df.update(wind_direction_filler,overwrite=False)","955e3917":"wind_speed_filler =  pd.DataFrame(weather_df.groupby(['site_id','day','month'])['wind_speed'].mean(),columns=['wind_speed'])\nweather_df.update(wind_speed_filler,overwrite=False)","d07804fa":"# Step 1\nprecip_depth_filler = weather_df.groupby(['site_id','day','month'])['precip_depth_1_hr'].mean()\n# Step 2\nprecip_depth_filler = pd.DataFrame(precip_depth_filler.fillna(method='ffill'),columns=['precip_depth_1_hr'])\nweather_df.update(precip_depth_filler,overwrite=False)","541e6ab0":"weather_df = weather_df.reset_index()\nweather_df = weather_df.drop(['datetime','day','week','month'],axis=1)\nweather_df","fb839dff":"missing_statistics(weather_df)","7bcd22cf":"def fill_weather_dataset(weather_df):\n    \n    # Find Missing Dates\n    time_format = \"%Y-%m-%d %H:%M:%S\"\n    start_date = datetime.datetime.strptime(weather_df['timestamp'].min(),time_format)\n    end_date = datetime.datetime.strptime(weather_df['timestamp'].max(),time_format)\n    total_hours = int(((end_date - start_date).total_seconds() + 3600) \/ 3600)\n    hours_list = [(end_date - datetime.timedelta(hours=x)).strftime(time_format) for x in range(total_hours)]\n\n    missing_hours = []\n    for site_id in range(16):\n        site_hours = np.array(weather_df[weather_df['site_id'] == site_id]['timestamp'])\n        new_rows = pd.DataFrame(np.setdiff1d(hours_list,site_hours),columns=['timestamp'])\n        new_rows['site_id'] = site_id\n        weather_df = pd.concat([weather_df,new_rows])\n\n        weather_df = weather_df.reset_index(drop=True)           \n\n    # Add new Features\n    weather_df[\"datetime\"] = pd.to_datetime(weather_df[\"timestamp\"])\n    weather_df[\"day\"] = weather_df[\"datetime\"].dt.day\n    weather_df[\"week\"] = weather_df[\"datetime\"].dt.week\n    weather_df[\"month\"] = weather_df[\"datetime\"].dt.month\n    \n    # Reset Index for Fast Update\n    weather_df = weather_df.set_index(['site_id','day','month'])\n\n    air_temperature_filler = pd.DataFrame(weather_df.groupby(['site_id','day','month'])['air_temperature'].mean(),columns=[\"air_temperature\"])\n    weather_df.update(air_temperature_filler,overwrite=False)\n\n    # Step 1\n    cloud_coverage_filler = weather_df.groupby(['site_id','day','month'])['cloud_coverage'].mean()\n    # Step 2\n    cloud_coverage_filler = pd.DataFrame(cloud_coverage_filler.fillna(method='ffill'),columns=[\"cloud_coverage\"])\n\n    weather_df.update(cloud_coverage_filler,overwrite=False)\n\n    due_temperature_filler = pd.DataFrame(weather_df.groupby(['site_id','day','month'])['dew_temperature'].mean(),columns=[\"dew_temperature\"])\n    weather_df.update(due_temperature_filler,overwrite=False)\n\n    # Step 1\n    sea_level_filler = weather_df.groupby(['site_id','day','month'])['sea_level_pressure'].mean()\n    # Step 2\n    sea_level_filler = pd.DataFrame(sea_level_filler.fillna(method='ffill'),columns=['sea_level_pressure'])\n\n    weather_df.update(sea_level_filler,overwrite=False)\n\n    wind_direction_filler =  pd.DataFrame(weather_df.groupby(['site_id','day','month'])['wind_direction'].mean(),columns=['wind_direction'])\n    weather_df.update(wind_direction_filler,overwrite=False)\n\n    wind_speed_filler =  pd.DataFrame(weather_df.groupby(['site_id','day','month'])['wind_speed'].mean(),columns=['wind_speed'])\n    weather_df.update(wind_speed_filler,overwrite=False)\n\n    # Step 1\n    precip_depth_filler = weather_df.groupby(['site_id','day','month'])['precip_depth_1_hr'].mean()\n    # Step 2\n    precip_depth_filler = pd.DataFrame(precip_depth_filler.fillna(method='ffill'),columns=['precip_depth_1_hr'])\n\n    weather_df.update(precip_depth_filler,overwrite=False)\n\n    weather_df = weather_df.reset_index()\n    weather_df = weather_df.drop(['datetime','day','week','month'],axis=1)\n        \n    return weather_df","a6f130e7":"weather_train_df = pd.read_csv(DATA_PATH + 'weather_train.csv')\nweather_test_df = pd.read_csv(DATA_PATH + 'weather_test.csv')\n\nweather_train_df = fill_weather_dataset(weather_train_df)\nweather_test_df = fill_weather_dataset(weather_test_df)","4e2a80ce":"weather_train_df","9aa4118d":"# weather_train_df.to_csv(DATA_PATH + 'weather_train_filled.csv', index=False)\n# weather_test_df.to_csv(DATA_PATH + 'weather_test_filled.csv', index=False)","d600fecf":"# Count Missing Values","dde1b88e":"# Fill Air Temperature\nIdea is to fill missing air temperature with mean temperature of day of the month. Each month comes in a season and temperature varies lots in a season. So filling with yearly mean value is not a good idea.","033926d5":"# Add Day,Week & Month Columns\nThis dataset consits of hourly weather information. So we are going to fill missing values based on below new date features.","02cfbe82":"# Fill Dew Temperature","b7240fa5":"Week 53 is teh first week of the data set","0d19a734":"## Generating new csv files","e9f64da2":"# Fill Cloud Coverage\nAlmost 50% data is missing. And data is missing for most of days and even many consecutive days. So, first, calculate mean cloud coverage of day of the month and then fill rest missing values with last valid observation.","279fbd24":"# Fill precip_depth_1_hr\nI noted this value is ignored by most of the kagglers and it has 35% missing data. This value indicates a very light and brief rain or snow, you often won't know it unless you go outside. At a moment, this value will be just a greater than zero but not measureable by rain gauge.","64220c30":"# Fill Sea level Pressure","68ddf4d1":"# Missing Hours\nThis csv has hourly weather information for 16 sites in 2016. So this should have 140,544 records (16 x 24 x 366, 2016 is a leap year). But this csv has 139,773 records so 771 hours of data is missing.","9f96600b":"# Fill Wind Direction","86476a3f":"**All sites_id has all the weeks of the year.**"}}