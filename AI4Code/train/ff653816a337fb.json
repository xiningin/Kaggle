{"cell_type":{"fcf85322":"code","1e1cf17b":"code","23c657ba":"code","daf78487":"code","206b020e":"code","f47e5311":"code","30ca95c7":"code","dcdce9f9":"code","28fd744a":"code","9538e131":"code","dfd7ae11":"code","6d0f508f":"code","1b2581ad":"code","0355102c":"code","afff3df6":"code","02702920":"code","45979992":"code","a9ac733f":"code","230d9cbc":"code","ee7efebc":"code","e267cb82":"code","fc4364f7":"code","07dced90":"code","10d761b0":"code","73edea7a":"code","ebf2ec7c":"code","3c46b53a":"markdown","8ca76d54":"markdown"},"source":{"fcf85322":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1e1cf17b":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nfrom datetime import datetime\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport datetime as dt","23c657ba":"import pandas as pd\ndf=pd.read_csv('\/kaggle\/input\/total-construction-spending-data-collection\/TLCOMCONS.csv')","daf78487":"df.head()","206b020e":"df.info()","f47e5311":"df['realtime_start'] = pd.to_datetime(df['realtime_start'], \n format = '%Y-%m-%d', \n errors = 'coerce')\n\ndf['date'] = pd.to_datetime(df['date'], \n format = '%Y-%m-%d', \n errors = 'coerce')\n\ndf['realtime_end'] = pd.to_datetime(df['realtime_end'], \n format = '%Y-%m-%d', \n errors = 'coerce')","30ca95c7":"df.head()","dcdce9f9":"df.realtime_start.unique() \n","28fd744a":"df.realtime_end.unique() \n","9538e131":"\n#df['date']=df['date'].map(dt.datetime.toordinal)\n","dfd7ae11":"df['date_m'] = df['date'].dt.month\ndf['date_y'] = df['date'].dt.year\ndf['date_d'] = df['date'].dt.day","6d0f508f":"df.drop(['realtime_start','realtime_end','date'],axis=1,inplace = True)","1b2581ad":"df.head()","0355102c":"df.info()","afff3df6":"df = pd.get_dummies(df, columns=['date_d'], drop_first=True, prefix='day')\n\ndf = pd.get_dummies(df, columns=['date_m'], drop_first=True, prefix='month')\n\ndf = pd.get_dummies(df, columns=['date_y'], drop_first=True, prefix='year')\n\n\ndf.info()","02702920":"y=df.iloc[:,0].values\nx=df.iloc[:,1:].values","45979992":"x.shape,y.shape","a9ac733f":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.1,random_state=0)","230d9cbc":"x_train.shape,y_train.shape,x_test.shape,y_test.shape","ee7efebc":"from sklearn import model_selection\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\n","e267cb82":"dtree = DecisionTreeRegressor(max_depth=8, min_samples_leaf=0.13, random_state=3)\ndtree.fit(x_train, y_train)","fc4364f7":"# Code lines 1 to 3\npred_train_tree= dtree.predict(x_train)\nprint(np.sqrt(mean_squared_error(y_train,pred_train_tree)))\nprint(r2_score(y_train, pred_train_tree))\n\n# Code lines 4 to 6\npred_test_tree= dtree.predict(x_test)\nprint(np.sqrt(mean_squared_error(y_test,pred_test_tree))) \nprint(r2_score(y_test, pred_test_tree))","07dced90":"# Code Lines 1 to 4: Fit the regression tree 'dtree1' and 'dtree2' \ndtree1 = DecisionTreeRegressor(max_depth=2)\ndtree2 = DecisionTreeRegressor(max_depth=5)\ndtree3 = DecisionTreeRegressor(max_depth=8)\n\ndtree1.fit(x_train, y_train)\ndtree2.fit(x_train, y_train)\ndtree3.fit(x_train, y_train)\n\n# Code Lines 5 to 6: Predict on training data\ntr1 = dtree1.predict(x_train)\ntr2 = dtree2.predict(x_train) \ntr3 = dtree3.predict(x_train)\n\n#Code Lines 7 to 8: Predict on testing data\ny1 = dtree1.predict(x_test)\ny2 = dtree2.predict(x_test)\ny3 = dtree3.predict(x_test)","10d761b0":"# Print RMSE and R-squared value for regression tree 'dtree1' on training data\nprint(np.sqrt(mean_squared_error(y_train,tr1))) \nprint(r2_score(y_train, tr1))\n\n# Print RMSE and R-squared value for regression tree 'dtree1' on testing data\nprint(np.sqrt(mean_squared_error(y_test,y1))) \nprint(r2_score(y_test, y1))","73edea7a":"# Print RMSE and R-squared value for regression tree 'dtree2' on training data\nprint(np.sqrt(mean_squared_error(y_train,tr2))) \nprint(r2_score(y_train, tr2))\n\n# Print RMSE and R-squared value for regression tree 'dtree2' on testing data\nprint(np.sqrt(mean_squared_error(y_test,y2))) \nprint(r2_score(y_test, y2))","ebf2ec7c":"# Print RMSE and R-squared value for regression tree 'dtree3' on training data\nprint(np.sqrt(mean_squared_error(y_train,tr3)))\nprint(r2_score(y_train, tr3))\n\n# Print RMSE and R-squared value for regression tree 'dtree3' on testing data\nprint(np.sqrt(mean_squared_error(y_test,y3))) \nprint(r2_score(y_test, y3))","3c46b53a":"we need to label the year, month, day column now\n","8ca76d54":"both start and end dates are same so its of no use to us"}}