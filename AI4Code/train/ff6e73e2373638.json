{"cell_type":{"7874c719":"code","2e070934":"code","0ab2ea10":"code","8ef33572":"code","957cc504":"code","82a46409":"code","fedd76ba":"code","b701a4d8":"code","1c22af49":"code","ad37f777":"code","38bfe421":"code","d49f1929":"code","6bf38deb":"code","0193af27":"code","73828325":"code","4548b032":"code","c0a4a553":"code","b687b6c9":"code","d04895bc":"code","687d2360":"code","630769c1":"code","c6e018ff":"markdown","d282517d":"markdown","bb678834":"markdown","1dea4c6a":"markdown","d2ae1f5a":"markdown","afc0c98d":"markdown","4c74b77c":"markdown","0d3a145a":"markdown","208f662a":"markdown","9bdc67d3":"markdown","ef8e6815":"markdown","7a842359":"markdown","97325294":"markdown","a5cd4a29":"markdown","794b709e":"markdown"},"source":{"7874c719":"#Imports\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport math\nfrom matplotlib.ticker import MaxNLocator\nimport matplotlib.patches as patches\nfrom matplotlib import animation\nfrom IPython.display import HTML\nimport warnings\nwarnings.filterwarnings('ignore')","2e070934":"#Data reader\ngames=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/games.csv\",parse_dates=[3,4])  \nPFFScoutingData=pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/PFFScoutingData.csv')  \nplayers=pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/players.csv')  \nplays=pd.read_csv(\"..\/input\/nfl-big-data-bowl-2022\/plays.csv\")  \ntracking2020=pd.read_csv('..\/input\/nfl-big-data-bowl-2022\/tracking2020.csv')  ","0ab2ea10":"rival='ATL'","8ef33572":"#We calculate the final result including the points of the play\nplays = pd.merge(games, plays, on=\"gameId\", how=\"inner\")\nconditions = [\n    (plays[\"specialTeamsResult\"]==\"Kick Attempt Good\") & (plays[\"specialTeamsPlayType\"]==\"Extra Point\") & (plays[\"possessionTeam\"]==plays[\"homeTeamAbbr\"]),\n    (plays[\"specialTeamsResult\"]==\"Kick Attempt Good\") & (plays[\"specialTeamsPlayType\"]==\"Field Goal\") & (plays[\"possessionTeam\"]==plays[\"homeTeamAbbr\"]),\n    (plays[\"specialTeamsResult\"]==\"Kick Attempt Good\") & (plays[\"specialTeamsPlayType\"]==\"Extra Point\") & (plays[\"possessionTeam\"]!=plays[\"homeTeamAbbr\"]),\n    (plays[\"specialTeamsResult\"]==\"Kick Attempt Good\") & (plays[\"specialTeamsPlayType\"]==\"Field Goal\") & (plays[\"possessionTeam\"]!=plays[\"homeTeamAbbr\"]),\n    True\n    ]\n\nvalues = [1,3,-1,-3,0]\n\nplays[\"points\"] = np.select(conditions, values)\n\nplays[\"preSnapHomeScore\"] = plays[[\"preSnapHomeScore\",\"points\"]].sum(axis=1).where(plays[\"points\"] > 0, plays[\"preSnapHomeScore\"])\nplays[\"points\"]= plays[\"points\"]*-1\nplays[\"preSnapVisitorScore\"] = plays[[\"preSnapVisitorScore\",\"points\"]].sum(axis=1).where(plays[\"points\"] > 0, plays[\"preSnapVisitorScore\"])","957cc504":"#We select the opponent's games and fields of interest\ninfoGames = plays[ (plays[\"homeTeamAbbr\"] == rival) | (plays[\"visitorTeamAbbr\"]== rival)]","82a46409":"#We select the last play to keep the las result\nidx1 = infoGames.groupby([\"gameId\"])[\"playId\"].transform(max) == infoGames[\"playId\"]\nfinalResult = infoGames[idx1]\n\n#We create the field \"home\/visitor\"\nfinalResult[\"HomeVisitor\"] = [\"Home\" if club==rival else \"Visitor\" for club in finalResult[\"homeTeamAbbr\"]]\n\n#We check whether you have won or lost.\ndef victory(row):\n    if row[\"HomeVisitor\"]==\"Visitor\" and row[\"preSnapHomeScore\"]>row[\"preSnapVisitorScore\"]:\n        return \"Defeat\" \n    elif row[\"HomeVisitor\"]==\"Visitor\" and row[\"preSnapHomeScore\"]<row[\"preSnapVisitorScore\"]:\n        return \"Victory\" \n    elif row[\"HomeVisitor\"]==\"Home\" and row[\"preSnapHomeScore\"]>row[\"preSnapVisitorScore\"]:\n        return \"Victory\"\n    elif row[\"HomeVisitor\"]==\"Home\" and row[\"preSnapHomeScore\"]<row[\"preSnapVisitorScore\"]:\n        return \"Defeat\"\n    else:\n        return \"Draw\" \nfinalResult[\"Result\"] = finalResult.apply(victory, axis=1)\n\n\n#We select the fields we need for the chart\nfinalResult = finalResult[[\"season\",\"HomeVisitor\",\"Result\"]]\n\n#We add a column with 1 to calculate the total of wins, losses and draws\nfinalResult['total'] = 1\n\n#We calculate the total of victories, defeats and draws grouping by season, HomeVisitor, Result\nfinalResult['Sum'] = finalResult['total'].groupby([finalResult['season'],finalResult['HomeVisitor'],finalResult['Result']]).transform('sum')\n\n#We delete the duplicate rows and select the ones we need to make the table\nfinalResult = finalResult.drop_duplicates()\nfinalResult = finalResult[[\"season\",\"HomeVisitor\",\"Result\",\"Sum\"]]\n\n#We draw the table modifying the labels\nplot1 = sns.catplot(kind='bar', data=finalResult, col='season', x='HomeVisitor', y='Sum', hue='Result', estimator=sum, ci=None,\n            order=sorted(finalResult.HomeVisitor.unique()), col_order=sorted(finalResult.season.unique()))\nplot1.set_xlabels('Home vs Visitor', fontsize=15) # not set_label\nplot1.set_ylabels('Frequency', fontsize=15)\nplt.show()","fedd76ba":"Games = infoGames[[\"gameId\",\"season\",\"playId\",\"possessionTeam\"]]\nGames2020 = Games[(Games[\"possessionTeam\"]==rival) & (Games[\"season\"]==2020)]\nPFFSD_filtered = PFFScoutingData[[\"gameId\",\"playId\",\"kickType\"]]\nGames_TypeKick = pd.merge(Games2020, PFFSD_filtered, on=[\"gameId\",\"playId\"], how=\"inner\")\nkick= Games_TypeKick.groupby([\"kickType\"]).size()\nsizes = ((kick \/ kick.sum()) * 100).to_list()\nlabels = kick.index.to_list()\nlabels = [f'{l}, {s:0.1f}%' for l, s in zip(labels, sizes)]\nplot2 = plt.pie(kick)\nplt.legend(bbox_to_anchor=(0.9, 0.9), loc='upper left', labels=labels)\nplt.show()","b701a4d8":"GamesPlayed=infoGames[[\"gameId\",\"homeTeamAbbr\"]]\nGamesPlayed[\"team\"]=np.where(GamesPlayed['homeTeamAbbr']== rival, \"home\", \"visitor\")\nGamesPlayed=GamesPlayed.drop_duplicates()\ntracking2020_aux=tracking2020[[\"gameId\",\"nflId\",\"team\"]]\ntracking2020_aux=tracking2020_aux.groupby([\"gameId\",\"nflId\",\"team\"]).count().reset_index()\nInfoPlayers = pd.merge(GamesPlayed, tracking2020_aux, on=[\"gameId\",\"team\"], how=\"inner\")\nplayersName=players[[\"nflId\",\"Position\",\"displayName\"]]\nplayersInfoName=InfoPlayers.join(playersName.set_index('nflId'), on='nflId')\nplayersInfoName=playersInfoName[[\"displayName\",\"Position\"]]\nplayersInfoName[\"count\"]=1\nplayersInfoName=playersInfoName.groupby([\"displayName\",\"Position\"]).sum().reset_index().sort_values(by=[\"count\"],ascending=False)\nplayersInfoName = playersInfoName.set_axis(['Player Name', 'Position', 'Games Played'], axis=1)\nprint (playersInfoName.to_string(index=False))","1c22af49":"gamesPos = Games[(Games[\"possessionTeam\"]==rival) & (Games[\"gameId\"]==Games.gameId.max())]\nPFFScoutingData_aux = PFFScoutingData[[\"gameId\",\"playId\",\"kickDirectionActual\"]]\ngamesPos_PFFSD = pd.merge(gamesPos, PFFScoutingData_aux, on=[\"gameId\",\"playId\"], how=\"inner\")\ndirectionGames = gamesPos_PFFSD[\"kickDirectionActual\"].value_counts(dropna=True)\nplot3=directionGames.plot.bar(color=[\"orange\",\"blue\",\"green\"])\nplot3.yaxis.set_major_locator(MaxNLocator(integer=True))\nplt.show()","ad37f777":"lastGame=infoGames[\"gameId\"].max()\nLastGamePlay=games[games[\"gameId\"]==lastGame]\nHomeAway=\"home\"\nif LastGamePlay.homeTeamAbbr.to_string()==rival:\n    HomeAway= \"home\"\nelse: \n    HomeAway= \"away\"\nlastGameInfo=tracking2020[(tracking2020[\"gameId\"]==lastGame) & (tracking2020[\"team\"]==HomeAway)]\nplayersLastGame= lastGameInfo[\"nflId\"].unique()\nListPlayers=players[players.nflId.isin(playersLastGame)]\nListPlayers=ListPlayers.drop([\"nflId\"],axis=1).sort_values(\"Position\")\nListPlayers[\"age\"]= (pd.Timestamp('now')-pd.to_datetime(ListPlayers[\"birthDate\"], format='%Y-%m-%d')).astype('<m8[Y]')\nListPlayers=ListPlayers.drop([\"birthDate\"],axis=1)\nprint(ListPlayers.to_string(index=False))","38bfe421":"axAge = sns.distplot(ListPlayers[\"age\"])\naxAge.set(xticks=list(range(18,38)))\naxAge.set_title('Players age Distribution')\nplt.show()","d49f1929":"axWeight = sns.distplot(ListPlayers[\"weight\"])\naxWeight.set_title('Players weight Distribution')\nplt.show()","6bf38deb":"#We select the matches of the last season with the fields of interest (We reuse the infoGames variable)\npointsQuarter = infoGames[infoGames[\"season\"]==2020]\npointsQuarter = pointsQuarter[[\"gameId\",\"playId\",\"quarter\",\"homeTeamAbbr\",\"visitorTeamAbbr\",\"preSnapHomeScore\",\"preSnapVisitorScore\"]]\n\n#We filter to keep the score at the end of every quarter\nidx2 = pointsQuarter.groupby([\"gameId\",\"quarter\"])[\"playId\"].transform(max) == pointsQuarter[\"playId\"]\npointsQuarter = pointsQuarter[idx2]\n\npointsHome = pointsQuarter[[\"gameId\",\"quarter\",\"homeTeamAbbr\",\"preSnapHomeScore\"]]\npointsHome = pointsHome.rename({'homeTeamAbbr': 'team', 'preSnapHomeScore': 'score'}, axis=1) \n\npointsVisitor = pointsQuarter[[\"gameId\",\"quarter\",\"visitorTeamAbbr\",\"preSnapVisitorScore\"]]\npointsVisitor = pointsQuarter.rename({'visitorTeamAbbr': 'team', 'preSnapVisitorScore': 'score'}, axis=1) \n\npointsGame = pd.concat([pointsHome, pointsVisitor]).reset_index(drop=True)\npointsGame = pointsGame.rename(columns={'gameId':'Date'})\nwidth=int(len(pointsGame[\"Date\"].drop_duplicates())\/4)\n\nplot4= sns.relplot(\n    data=pointsGame, x=\"quarter\", y=\"score\",\n    col=\"Date\", hue=\"team\", style=\"team\", col_wrap=width,\n    kind=\"line\",\n)\nplot4.set( xlabel = \"Quarter\", ylabel = \"Score\", xticks=([1,2,3,4]))\nplot4._legend.set_title(\"Team\")\nplt.show()","0193af27":"game=2021010310","73828325":"tracking2020_aux=tracking2020[tracking2020[\"gameId\"]==game]","4548b032":"listGames=plays[plays[\"gameId\"]==game]\nlistGames=listGames[[\"playId\",\"quarter\",\"possessionTeam\",\"specialTeamsPlayType\",\"specialTeamsResult\"]]\nprint(listGames.to_string(index=False))","c0a4a553":"# Change size of the figure\nplt.rcParams['figure.figsize'] = [12, 8]\ndef drawPitch(width, height, color=\"w\"):\n    fig = plt.figure()\n    ax = plt.axes(xlim=(-10, width + 30), ylim=(-15, height + 5))\n    plt.axis('off')\n\n    # Grass around pitch\n    rect = patches.Rectangle((-10, -5), width + 40, height + 10, linewidth=1, facecolor='#3f995b', capstyle='round')\n    ax.add_patch(rect)\n    ###################\n\n    # Pitch boundaries\n    rect = plt.Rectangle((0, 0), width + 20, height, ec=color, fc=\"None\", lw=2)\n    ax.add_patch(rect)\n    ###################\n\n    # vertical lines - every 5 yards\n    for i in range(21):\n        plt.plot([10 + 5 * i, 10 + 5 * i], [0, height], c=\"w\", lw=2)\n    ###################\n        \n    # distance markers - every 10 yards\n    for yards in range(10, width, 10):\n        yards_text = yards if yards <= width \/ 2 else width - yards\n        # top markers\n        plt.text(10 + yards - 2, height - 7.5, yards_text, size=15, c=\"w\", weight=\"bold\")\n        # botoom markers\n        plt.text(10 + yards - 2, 7.5, yards_text, size=15, c=\"w\", weight=\"bold\", rotation=180)\n    ###################\n\n    # yards markers - every yard\n    # bottom markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [1, 3], color=\"w\", lw=2)\n\n    # top markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [height - 1, height - 3], color=\"w\", lw=2)\n\n    # middle bottom markers\n    y = (height - 18.5) \/ 2\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [y, y + 2], color=\"w\", lw=2)\n\n    # middle top markers\n    for x in range(20):\n        for j in range(1, 5):\n            plt.plot([10 + x * 5 + j, 10 + x * 5 + j], [height - y, height - y - 2], color=\"w\", lw=2)\n    ###################\n\n    # draw home end zone\n    plt.text(2.5, (height - 15) \/ 2, \"HOME\", size=30, c=\"w\", weight=\"bold\", rotation=90)\n    rect = plt.Rectangle((0, 0), 10, height, ec=color, fc=\"#0064dc\", lw=2)\n    ax.add_patch(rect)\n\n    # draw away end zone    \n    plt.text(111, (height - 15) \/ 2, \"AWAY\", size=30, c=\"w\", weight=\"bold\", rotation=-90)\n    rect = plt.Rectangle((width + 10, 0), 10, height, ec=color, fc=\"#c80014\", lw=2)\n    ax.add_patch(rect)\n    ###################\n    \n    # draw extra spot point\n    # left\n    y = (height - 3) \/ 2\n    plt.plot([10 + 2, 10 + 2], [y, y + 3], c=\"w\", lw=2)\n    \n    # right\n    plt.plot([width + 10 - 2, width + 10 - 2], [y, y + 3], c=\"w\", lw=2)\n    ###################\n    \n    # draw goalpost\n    goal_width = 6 # yards\n    y = (height - goal_width) \/ 2\n    # left\n    plt.plot([0, 0], [y, y + goal_width], \"-\", c=\"y\", lw=10, ms=20)\n    # right\n    plt.plot([width + 20, width + 20], [y, y + goal_width], \"-\", c=\"y\", lw=10, ms=20)\n    \n    return fig, ax","b687b6c9":"def extract_one_game(game_id, play_id, df):\n    game = df[(df.gameId == game_id) & (df.playId == play_id)]\n    home = {}\n    away = {}\n    balls = []\n    \n    players = game.sort_values(['frameId'], ascending=True).groupby('nflId')\n    for id, dx in players:\n        jerseyNumber = int(dx.jerseyNumber.iloc[0])\n        if dx.team.iloc[0] == \"home\":\n            home[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n        elif dx.team.iloc[0] == \"away\":\n            away[jerseyNumber] = list(zip(dx.x.tolist(), dx.y.tolist()))\n\n\n    ball_df = game.sort_values(['frameId'], ascending=True) \n    ball_df = ball_df[ball_df.team == \"football\"]\n    balls = list(zip(ball_df.x.tolist(), ball_df.y.tolist()))\n    return home, away, balls\n\n","d04895bc":"def animate_one_play(game_id, play_id, df):\n    fig, ax = drawPitch(100, 53.3)\n    \n    home, away, balls = extract_one_game(game_id, play_id, df)\n\n    team_left, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"r\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    team_right, = ax.plot([], [], 'o', markersize=20, markerfacecolor=\"b\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    ball, = ax.plot([], [], 'o', markersize=10, markerfacecolor=\"black\", markeredgewidth=2, markeredgecolor=\"white\", zorder=7)\n    drawings = [team_left, team_right, ball]\n\n    def init():\n        team_left.set_data([], [])\n        team_right.set_data([], [])\n        ball.set_data([], [])\n        return drawings\n\n    def draw_teams(i):\n        X = []\n        Y = []\n        for k, v in home.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_left.set_data(X, Y)\n        \n        X = []\n        Y = []\n        for k, v in away.items():\n            x, y = v[i]\n            X.append(x)\n            Y.append(y)\n        team_right.set_data(X, Y)\n\n    def animate(i):\n        draw_teams(i)\n        \n        x, y = balls[i]\n        ball.set_data([x, y])\n        return drawings\n    \n    # !May take a while!\n    anim = animation.FuncAnimation(fig, animate, init_func=init,\n                                   frames=len(balls), interval=100, blit=True)\n\n    return HTML(anim.to_html5_video())","687d2360":"play=40","630769c1":"animate_one_play(game, play, tracking2020_aux)","c6e018ff":"<H3>Game play log<H3>","d282517d":"This function is taken from the post created by JARON_MICHAL. https:\/\/www.kaggle.com\/jaronmichal\/tracking-data-visualization","bb678834":"<H2>3. Games played by each player in the last season. See which player is more important in the team.<H2>","1dea4c6a":"<H2>9. Match to analyze<H2>","d2ae1f5a":"<H2>5. Team that has played in the previous game<H2>","afc0c98d":"<H2>1. General information of defeats and victories of the opponent<H2>","4c74b77c":"<H3>Select your rival<H3>","0d3a145a":"<H1>Analysis for the approach of a match<H1>","208f662a":"<H2>4. Frequency of the attacking side of the last game. Where they attack the most.<H2>","9bdc67d3":"<H3>Select the play<H3>","ef8e6815":"<H2>2. Type of kickoff in the last season<H2>","7a842359":"<H2>8. Graph of the points scored for and against in each quarter. See which times he suffers the most and where he is strongest<H2>","97325294":"<H3>Select the match<H3>","a5cd4a29":"<H2>7. Weight distribution of the players from the previous game<H2>","794b709e":"<H2>6. Age distribution of the players from the previous game<H2>"}}