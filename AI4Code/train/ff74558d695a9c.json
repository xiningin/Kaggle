{"cell_type":{"af9101c7":"code","745f2964":"code","70794668":"code","ca84b07e":"code","b85217f4":"code","539bf2f1":"code","74b47b70":"code","e3d48e5e":"markdown","a9b53fe6":"markdown"},"source":{"af9101c7":"!git clone https:\/\/github.com\/udacity\/CarND-Advanced-Lane-Lines.git","745f2964":"from distutils.dir_util import copy_tree\nimport shutil\ncopy_tree(\".\/CarND-Advanced-Lane-Lines\/camera_cal\", \".\/camera_cal\")\nshutil.rmtree('.\/CarND-Advanced-Lane-Lines', ignore_errors=False, onerror=None)","70794668":"import numpy as np\nimport cv2\nimport glob\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport pickle\n\n%matplotlib inline","ca84b07e":"def calibrator(calibration_files):\n            \n    # prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)\n    objp = np.zeros((6*9,3), np.float32)\n    objp[:,:2] = np.mgrid[0:9,0:6].T.reshape(-1,2)\n\n    # Arrays to store object points and image points from all the images.\n    objpoints = [] # 3d points in real world space\n    imgpoints = [] # 2d points in image plane.\n\n    # Make a list of calibration images\n    images = glob.glob(calibration_files)\n\n    # Step through the list and search for chessboard corners\n    for fname in images:\n        img = cv2.imread(fname)\n        gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n\n        # Find the chessboard corners\n        ret, corners = cv2.findChessboardCorners(gray, (9,6),None)\n\n        # If found, add object points, image points\n        if ret == True:\n            objpoints.append(objp)\n            imgpoints.append(corners)\n\n            # Draw and display the corners\n#             img = cv2.drawChessboardCorners(img, (9,6), corners, ret)\n#             cv2.imshow('img',img)\n#             cv2.waitKey(500)\n\n#     cv2.destroyAllWindows()\n    # Calibrate a camera\n    ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints,\n                                                       imgpoints, \n                                                       img.shape[0:2],\n                                                       None, None)\n    print('Calibrator Done')\n    return mtx, dist","b85217f4":"# Run this calibrator\nmtx, dist = calibrator('.\/camera_cal\/calibration*.jpg')","539bf2f1":"# Undistort image\nimg = mpimg.imread('.\/camera_cal\/calibration1.jpg')\n\ndst = cv2.undistort(img, mtx, dist, None, mtx)\n\n# Visualize undistortion\nf, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,10))\nf.tight_layout()\nax1.set_title('Original Image', fontsize=50)\nax1.imshow(img)\nax2.set_title('Undistorted image', fontsize=50)\nax2.imshow(dst)\nplt.subplots_adjust(left=0., right=1, top=0.9, bottom=0.)","74b47b70":"# Save the calibration parameters\ncalibration_pickle = {}\ncalibration_pickle['mtx'] = mtx\ncalibration_pickle['dist'] = dist\npickle.dump( calibration_pickle, open('.\/calibration_pickle.p', 'wb') )","e3d48e5e":"# Camera Callibration","a9b53fe6":"## Save"}}