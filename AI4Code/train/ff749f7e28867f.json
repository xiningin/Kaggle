{"cell_type":{"41bf4f12":"code","651196b4":"code","409041d7":"code","d2344f20":"code","b9914503":"code","72648709":"code","a6e76dfa":"code","2dfaf737":"code","0df1d8d0":"code","2e8c2244":"code","c7f64e98":"code","9e7eeaa9":"code","0d432723":"code","6985cdbb":"code","f8ca166b":"code","08cda809":"code","3f36e205":"code","51f1a21e":"code","a713bb6b":"code","ae2ba1d9":"code","5f8a7ca8":"code","1d382aae":"code","63f17208":"code","8c8d5302":"code","fc8900a3":"code","0d0e9de7":"code","46f6d931":"code","76ee1c14":"code","dd0c7526":"code","f80a13d3":"code","4ba9c430":"code","54b149a6":"code","42e63427":"code","b9bfa1f6":"code","f84da78d":"code","82987a90":"code","59eee6c4":"code","b750cb82":"code","c6db0357":"code","83db2ade":"code","d0ba6cb5":"code","3e91687d":"code","67ee41f2":"code","06151f88":"code","f78ee04c":"code","9ffc3d30":"code","05615849":"code","35d5fdf8":"code","ec7572bd":"code","a9807016":"code","349a5bbe":"code","48cd6172":"code","149011d4":"code","f631fbf2":"code","754f94d7":"code","109eaf30":"code","18652e08":"code","bb09c5dc":"code","7998b836":"code","1b110c87":"code","87c5e868":"code","e2f56c1d":"code","a6c5ea6b":"code","fceedaa9":"code","032fc335":"code","15611323":"code","c8f677f0":"code","e1580d27":"code","16fbc5e2":"code","36a0ae6d":"code","b6183cd0":"code","d5c978b4":"code","c1625690":"code","a0197760":"code","2e257fe9":"code","6ae29c89":"markdown","a0045923":"markdown","71410b8f":"markdown","e9345c80":"markdown","1ad8b042":"markdown","8bd964dd":"markdown","2560aef8":"markdown","b5c99945":"markdown","9075b924":"markdown","c874dfc3":"markdown"},"source":{"41bf4f12":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport seaborn as sns","651196b4":"# reading dataset \ndata=pd.read_csv(\"..\/input\/data.csv\")","409041d7":"# displaying first 5 rows\ndata.head()","d2344f20":"data.shape #(no. of rows, no. of columns)","b9914503":"data.describe()","72648709":"# finding any null values in data\ndata.isnull().any()","a6e76dfa":"# x = Age(independent variable)\nx=data.iloc[:,3] ","2dfaf737":"x.head()","0df1d8d0":"x.isnull().any()","2e8c2244":"# y = Potential(dependent variable)\ny=data.iloc[:,8]","c7f64e98":"y.head()","9e7eeaa9":"y.isnull().any()","0d432723":"plt.bar(data[\"Age\"],data[\"Potential\"])\nplt.xlabel(\"Age of Player\")\nplt.show()","6985cdbb":"# splitting data into train and tet set\nfrom sklearn.model_selection import train_test_split","f8ca166b":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)","08cda809":"from sklearn.linear_model import LinearRegression","3f36e205":"# making object regressor of class LinearRegression\nregressor=LinearRegression()","51f1a21e":"type(x_train)\ntype(y_train)","a713bb6b":"x_train=np.array(x_train)\ny_train=np.array(y_train)","ae2ba1d9":"type(x_train)\ntype(y_train)","5f8a7ca8":"x_train=x_train.reshape(-1,1)\ny_train=y_train.reshape(-1,1)\n","1d382aae":"# fitting training set into object regressor\nregressor.fit(x_train,y_train)","63f17208":"x_test=np.array(x_test)","8c8d5302":"x_test=x_test.reshape(-1,1)","fc8900a3":"# Predicting y from test set\ny_pred= regressor.predict(x_test)","0d0e9de7":"# Visualising training dataset\nplt.scatter(x_train,y_train,color=\"red\")\nplt.xlabel(\"Age of Player\")\nplt.ylabel(\"Potential of Player\")\nplt.plot(x_train, regressor.predict(x_train),color=\"blue\") # To draw line of regression\nplt.show()","46f6d931":"# Visualising test dataset\nplt.scatter(x_test,y_test,color=\"red\")\nplt.xlabel(\"Age of Player\")\nplt.ylabel(\"Potential of Player\")\nplt.plot(x_train, regressor.predict(x_train),color=\"blue\")\nplt.show()","76ee1c14":"# Finding intercept of linear regression line\nregressor.intercept_","dd0c7526":"# Finding coefficient of linear regression line\nregressor.coef_","f80a13d3":"# Finding mean squared error of linear regression model\nfrom sklearn.metrics import mean_squared_error","4ba9c430":"mean_squared_error(y_test,y_pred)","54b149a6":"# independent variables are - Age, Agility, Balance, stamina, Strength, Composure\nx=data.iloc[:,[3,66,68,71,72,79]]","42e63427":"x.head()","b9bfa1f6":"# checking if there are null values in x and then filling them. \nx.isnull().any()","f84da78d":"x=x.fillna(method='ffill')","82987a90":"x.isnull().any()","59eee6c4":"# dependent variable = Potential\ny=data.iloc[:,8]","b750cb82":"y.head()","c6db0357":"y.isnull().any()","83db2ade":"sns.lineplot(x=\"Potential\", y=\"Age\",data=data,label=\"Age\", ci= None)\nsns.lineplot(x=\"Potential\", y=\"Agility\",data=data,label=\"Agility\", ci= None)\nsns.lineplot(x=\"Potential\", y=\"Balance\",data=data,label=\"Balance\", ci= None)\nsns.lineplot(x=\"Potential\", y=\"Stamina\",data=data,label=\"Stamina\", ci= None)\nsns.lineplot(x=\"Potential\", y=\"Strength\",data=data,label=\"Strength\", ci= None)\nsns.lineplot(x=\"Potential\", y=\"Composure\",data=data,label=\"Composure\", ci= None)\n","d0ba6cb5":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)","3e91687d":"regressor=LinearRegression()","67ee41f2":"regressor.fit(x_train,y_train)","06151f88":"regressor.predict(x_test)","f78ee04c":"# Visualising Actual and predicted values of Potential of player\nplt.scatter(y_test,y_pred)\nplt.xlabel(\"Actual Potential\")\nplt.ylabel(\"Predicted Potential\")\nplt.show()","9ffc3d30":"regressor.intercept_","05615849":"regressor.coef_","35d5fdf8":"# let us take the significance level (SL)= 0.05\nimport statsmodels.formula.api as sm","ec7572bd":"# fitting all variables in the model\nregressor_OLS=sm.OLS(endog=y,exog=x).fit()","a9807016":"# Finding statistical summary of all variables\nregressor_OLS.summary()","349a5bbe":"# independent variable= age\nx=data.iloc[:,3]","48cd6172":"x.head()","149011d4":"# dependent variable = potential\ny=data.iloc[:,8]","f631fbf2":"y.head()","754f94d7":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)","109eaf30":"x_train=np.array(x_train)\ny_train=np.array(y_train)","18652e08":"x_train=x_train.reshape(-1,1)\ny_train=y_train.reshape(-1,1)","bb09c5dc":"lin_reg_1=LinearRegression()","7998b836":"lin_reg_1.fit(x_train,y_train)","1b110c87":"x_test=np.array(x_test)","87c5e868":"x_test=x_test.reshape(-1,1)","e2f56c1d":"y_pred_1=lin_reg_1.predict(x_test)","a6c5ea6b":"# Making polynomail regression model\nfrom sklearn.preprocessing import PolynomialFeatures","fceedaa9":"poly_reg=PolynomialFeatures(degree=3)","032fc335":"x=np.array(x)","15611323":"x=x.reshape(-1,1)","c8f677f0":"# Making polynomial matrix of x of degree 3\nx_poly=poly_reg.fit_transform(x)","e1580d27":"x_poly","16fbc5e2":"x_poly_train,x_poly_test,y_train,y_test=train_test_split(x_poly,y,test_size=0.2, random_state=42)","36a0ae6d":"# Making another object to fit polynomial set\nlin_reg_2=LinearRegression()","b6183cd0":"lin_reg_2.fit(x_poly_train,y_train)","d5c978b4":"y_pred_2=lin_reg_2.predict(x_poly_test)","c1625690":"# Visualizing Linear Regression Model\nplt.scatter(x_test,y_test,color='red')\nplt.xlabel(\"Age of Player\")\nplt.ylabel(\"Potential of Player\")\nplt.title(\"Linear Regression Curve \")\nplt.plot(x_train,lin_reg_1.predict(x_train),color='blue')\nplt.show()","a0197760":"# Visualizing Polynomial Regression Model\nplt.scatter(x_test,y_test,color='red')\nplt.xlabel(\"Age of Player\")\nplt.ylabel(\"Potential of Player\")\nplt.title(\"Polynomial Regression Curve \")\nplt.plot(x_train,lin_reg_2.predict(poly_reg.fit_transform(x_train)),color='blue')\nplt.show()","2e257fe9":"mean_squared_error(y_test,y_pred_2)","6ae29c89":"I was facing errors with fitting the data so we reshape x_train and y_train by first converting them into ndarray.","a0045923":"We can see the mean squared error of polynomail regression model < mean squared error of linear regression model. So polynomail regression model is more accurate.","71410b8f":"Backward Elimination - Making optimal regression model by finding the statistical significance of all independent variables","e9345c80":"# Multiple regression - Predicting potential based on age, agility, balance, stamina, strength, composure\n","1ad8b042":"To avoid error in prediting we reshape x_test also.","8bd964dd":"OBJECTIVE : The dataset contains detailed attributes for every player registered in the latest edition of FIFA 19 database. Our objective is to create Linear, Multiple and Polynomail Regression models to predict the potential of a player based on several attributes.","2560aef8":"#  Linear Regression - Predicting Potential based on Age of the player","b5c99945":"As we see all the P- values are less than SL(0.05), that means all the variables are significant and none of them can be removed. \nt-value shows the statistical significane of each variable.\nF-static shows us how significant the fit is. \nAdjusted- R is 0.986 that means our model explains 98.6% variables in dependent variables.","9075b924":"Seems like the actual and predicted values are very close to each other.","c874dfc3":"# Polynomial Regression - Predicting potential based on the age of player"}}