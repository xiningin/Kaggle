{"cell_type":{"e4c987e2":"code","62143199":"code","7a3d5262":"code","70b81e37":"code","1dc6d0db":"code","d93f41ee":"code","edb7b55d":"code","1bb6024a":"code","677e53fe":"code","26cfe022":"code","5277f7e5":"code","119e82de":"code","34bae3c0":"code","a746d95b":"code","5c581d53":"code","1a4fe852":"code","2a873bd5":"code","7f104dc3":"code","cd09f044":"code","7a466e90":"code","01330340":"code","cee5d3f0":"code","ff189384":"code","f62fefd9":"code","1a6882e7":"code","2a99d134":"code","2c0b2669":"code","267864e7":"code","d3d9413c":"code","62c2ad0d":"code","adf88691":"code","773e3a4d":"code","422f6266":"code","1e5a09a4":"code","3e943913":"code","792aea4f":"code","8483766c":"code","695c54ad":"code","d69a8292":"code","e186fce3":"markdown","6d313c03":"markdown","30e6baa8":"markdown","a63e1307":"markdown","528df952":"markdown","c0f9c657":"markdown","22b4de28":"markdown","a365a781":"markdown","c2a02d7a":"markdown","2332e755":"markdown","09f34d90":"markdown","27edf63f":"markdown","6a455204":"markdown","048afe28":"markdown","89c2e648":"markdown","777b183c":"markdown","021cbce0":"markdown","3add8be7":"markdown","ca5ba3ff":"markdown","2de51492":"markdown","c4055d83":"markdown","4e92006b":"markdown","8dc49da4":"markdown","aa204960":"markdown","e3716320":"markdown","6bc74089":"markdown","59e87a5a":"markdown","dfbc3d5b":"markdown","5965bbfd":"markdown","6697abe5":"markdown","464229b3":"markdown","2a3199f4":"markdown","7dc67e63":"markdown","79f8cb2e":"markdown","dee7414a":"markdown","7c29feca":"markdown","b9aa38cb":"markdown","bdd7a003":"markdown","5052bb4e":"markdown","c65cfef5":"markdown","f8ae247b":"markdown","8c1d570f":"markdown","6d39ada3":"markdown","0baae0d4":"markdown","7cef293b":"markdown","0354f3ea":"markdown","2dbdece3":"markdown","2c8dff81":"markdown","7594436f":"markdown","5fa28421":"markdown","a551c2c9":"markdown","1c99c621":"markdown","dd8a23a0":"markdown","b78d2239":"markdown","879e2c16":"markdown","2548047d":"markdown","51bf83c5":"markdown","7decbae3":"markdown","1d0d5265":"markdown","02da7027":"markdown","87658eaa":"markdown","f3a89c8d":"markdown","09d0dfa0":"markdown","c879d235":"markdown","e060fe18":"markdown","dbc7ea75":"markdown","54a6161f":"markdown","449ba337":"markdown","274e9ad0":"markdown","8fa86508":"markdown","e999cbb7":"markdown","374fcf67":"markdown","584b5e83":"markdown","33b8317a":"markdown","9459262c":"markdown","3522c363":"markdown","c214843a":"markdown","f8ced19c":"markdown","edb90268":"markdown","ed7d93fb":"markdown","3fe2628a":"markdown","f05119cc":"markdown","a8625414":"markdown"},"source":{"e4c987e2":"# --- possibly remove this ---\nfrom IPython.core.display import display, HTML\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))\n#----------------------------------------------------------------\n# --- use ? ---\n# %config InlineBackend.figure_format = 'retina'\n#----------------------------------------------------------------\n# https:\/\/github.com\/ageron\/handson-ml2\/blob\/master\/11_training_deep_neural_networks.ipynb\n# ! pip install vega\n# ! \/opt\/conda\/bin\/python3.7 -m pip install --upgrade seaborn\n# ! pip install sparklines\n#  ! pip show seaborn\n# Name: seaborn\n# Version: 0.11.0\n# Summary: seaborn: statistical data visualization\n# Home-page: https:\/\/seaborn.pydata.org\n# Author: Michael Waskom\n# Author-email: mwaskom@nyu.edu\n# License: BSD (3-clause)\n# Location: \/opt\/conda\/lib\/python3.7\/site-packages\n# Requires: scipy, pandas, matplotlib, numpy\n# Required-by: pysal, missingno, hypertools, geoplot\n# pip install CLASSIFIED \n#----------------------------------------------------------------\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n#----------------------------------------------------------------\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina' \n# no: %config InlineBackend.figure_formats = ['svg']\nimport matplotlib.patches as patches\nimport seaborn as sns  \n#----------------------------------------------------------------\nimport scipy \nfrom scipy import constants\nimport scipy.stats as stats\nimport math\n#----------------------------------------------------------------\n#init_notebook_mode(connected=True)  # remove  \n#----------------------------------------------------------------\nimport warnings\nwarnings.filterwarnings('ignore')\n#----------------------------------------------------------------\nfrom IPython.display import HTML\nfrom IPython.display import Image\nfrom IPython.display import display\nfrom IPython.core.display import display\nfrom IPython.core.display import HTML\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\nfrom PIL import Image\n#----------------------------------------------------------------\nimport colorcet as cc\nplt.style.use('seaborn') \ncolor_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]\n# USE THIS in some form:\n# th_props = [('font-size', '13px'), ('background-color', 'white'), ('color', '#666666')]\n# td_props = [('font-size', '15px'), ('background-color', 'white')]\n# styles = [dict(selector=\"td\", props=td_props), dict(selector=\"th\", props=th_props)]\n# pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 500)\n#----------------------------------------------------------------\n###?sns.set_context('paper')  #Everything is smaller, use ? \nSMALL_SIZE = 8\nMEDIUM_SIZE = 10\nBIGGER_SIZE = 12\nplt.rc('font', size=SMALL_SIZE)          # controls default text sizes\nplt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title\nplt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels\nplt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\nplt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize\nplt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title\n# This helps set size of all fontssns.set(font_scale=1.5)\n#----------------------------------------------------------------\nfrom bokeh.io import show\nfrom bokeh.io import push_notebook\nfrom bokeh.io import output_notebook\nfrom bokeh.io import output_file\nfrom bokeh.io import curdoc\n#----------------------------------------------------------------\nfrom bokeh.plotting import show                  \nfrom bokeh.plotting import figure                  \nfrom bokeh.plotting import output_notebook \nfrom bokeh.plotting import output_file\nfrom bokeh.transform import factor_cmap\nfrom bokeh.palettes import Blues8\nfrom bokeh.palettes import Blues, Spectral6, Viridis, Viridis256, GnBu, Viridis256\nfrom bokeh.palettes import Category20b,Category20c,Plasma,Inferno,Category20\nfrom bokeh.palettes import cividis, inferno, grey\nfrom bokeh.io import curdoc, show\nfrom bokeh.models import ColumnDataSource, Grid, HBar, LinearAxis, Plot\nimport colorcet as cc\nfrom numpy import linspace\nfrom scipy.stats.kde import gaussian_kde\nfrom bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource, FixedTicker, PrintfTickFormatter\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.perceptions import probly\n#----------------------------------------------------------------\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.models import Circle\nfrom bokeh.models import Grid \nfrom bokeh.models import LinearAxis\nfrom bokeh.models import Plot\nfrom bokeh.models import Slider\nfrom bokeh.models import CategoricalColorMapper\nfrom bokeh.models import FactorRange\nfrom bokeh.models.tools import HoverTool\nfrom bokeh.models import FixedTicker\nfrom bokeh.models import PrintfTickFormatter\nfrom bokeh.models.glyphs import HBar\nfrom bokeh.models import Title\nfrom bokeh.core.properties import value\nfrom bokeh.palettes import Blues4\nfrom bokeh.palettes import Spectral5\nfrom bokeh.palettes import Blues8\nfrom bokeh.layouts import row\nfrom bokeh.layouts import column\nfrom bokeh.layouts import gridplot\nfrom bokeh.sampledata.perceptions import probly\nfrom bokeh.transform import factor_cmap\nfrom bokeh.plotting import figure, output_file, show\nfrom bokeh.io import export_png\n#----------------------------------------------------------------\nimport altair as alt\n#----------------------------------------------------------------\nimport glob, os    \n#----------------------------------------------------------------\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import KFold\nfrom sklearn.feature_selection import SelectFromModel\nimport gc, pickle, tqdm, os, datetime\n\nimport holoviews as hv\nfrom bokeh.models import HoverTool\n# from bokeh.sampledata.periodic_table import elements\nhv.extension('bokeh')\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 1. kaggle import raw data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# df = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\n# gold = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\n# dontbreak = pd.read_csv('..\/input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\n#  from kaggle.competitions import nflrush\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 2. laptop import raw data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# df = pd.read_csv('input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\n# gold = pd.read_csv('input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\n# dontbreak = pd.read_csv('input\/nfl-big-data-bowl-2020\/train.csv', low_memory=False)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nkilled_columns=['xyz','etc']\ndef drop_these_columns(your_df,your_list):\n    #KILL KOLUMNS\n    your_df.drop(your_list,axis=1,inplace=True)\n    return(your_df)\n# YRS = dontbreak[dontbreak.NflId==dontbreak.NflIdRusher].copy()\n# YR1 = YRS[YRS.Season==2017]\n# YR2 = YRS[YRS.Season==2018]\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# df_play.drop('Yards', axis=1)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n##base = df[df[\"NflIdRusher == NflId\"]]\n##killed_kolumns = [\"GameId\",\"PlayId\",\"Team\",\"Yards\",\"TimeHandoff\",\"TimeSnap\"]\n#ingplus.com\/plots\/top-50-matplotlib-visualizations-the-master-plots-python#\n#NOTES:\n#          sns.despine(bottom=True, left=True)\n#  ax.set_title(\"Rankings Given by Wine Magazine\", fontsize=20)\n# df04 = tf.groupby('PossessionTeam')['Yards'].agg(sum).sort_values(ascending=False)\n# df04 = pd.DataFrame(df04)\n# df04['Team'] = df04.index\n# df04\n#\n#\n#Some Links:\n# Source:  http:\/\/www.ncaa.org\/about\/resources\/research\/estimated-probability-competing-professional-athletics\n#\n#\n# >>> df = pd.DataFrame(np.random.randn(10, 4))\n# >>> df.style.set_table_styles(\n# ...     [{'selector': 'tr:hover',\n# ...       'props': [('background-color', 'yellow')]}]\n# ... )\n# sns.despine(left=True)\n#      FULL WIDTH SCREEN\n#          display(HTML(\"<style>.container { width:99% !important; }<\/style>\"))   \n## Set CSS properties for th elements in dataframe\n# th_props = [\n#   ('font-size', '11px'),\n#   ('text-align', 'center'),\n#   ('font-weight', 'bold'),\n#   ('color', '#6d6d6d'),\n#   ('background-color', '#f7f7f9')\n#   ]\n# # Set CSS properties for td elements in dataframe\n# td_props = [\n#   ('font-size', '11px')\n#   ]\n# # Set table styles\n# styles = [\n#   dict(selector=\"th\", props=th_props),\n#   dict(selector=\"td\", props=td_props)\n#   ]\n# (df.style\n#     .applymap(color_negative_red, subset=['total_amt_usd_diff','total_amt_usd_pct_diff'])\n#     .format({'total_amt_usd_pct_diff': \"{:.2%}\"})\n#     .set_table_styles(styles))\n#\n#   df.style.set_properties(**{'text-align': 'right'})\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# value_counts=> dfvc1\n# ref = pd.DataFrame({'AlphaCol':dfvc1.index, 'Count':dfvc1.values}).sort_values(\"AlphaCol\")\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# GOLD:\n# cm = sns.light_palette(\"green\", as_cmap=True)\n# s = df.style.background_gradient(cmap=cm)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# (monthly_sales\n#  .style\n#  .format(format_dict)\n#  .hide_index()\n#  .highlight_max(color='lightgreen')\n#  .highlight_min(color='#cd4f39'))\n# # USE: \n# dfStyler = df.style.set_properties(**{'text-align': 'left'})\n# dfStyler.set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\n# filter = df['COUNTRY_FLYING_MISSION'].isin(('USA','GREAT BRITAIN'))\n# df = df[filter]\n#----------------------------------------------------------------\n# https:\/\/towardsdatascience.com\/sorry-but-sns-distplot-just-isnt-good-enough-this-is-though-ef2ddbf28078\n# sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n# rs = np.random.RandomState(10)\n# # Set up the matplotlib figure\n# f, axes = plt.subplots(2, 2, figsize=(7, 7), sharex=True)\n# sns.despine(left=True)\n# # Generate a random univariate dataset\n# d = rs.normal(size=100)\n# # Plot a simple histogram with binsize determined automatically\n# sns.distplot(d, kde=False, color=\"b\", ax=axes[0, 0])\n# # Plot a kernel density estimate and rug plot\n# sns.distplot(d, hist=False, rug=True, color=\"r\", ax=axes[0, 1])\n# # Plot a filled kernel density estimate\n# sns.distplot(d, hist=False, color=\"g\", kde_kws={\"shade\": True}, ax=axes[1, 0])\n# # Plot a histogram and kernel density estimate\n# sns.distplot(d, color=\"m\", ax=axes[1, 1])\n# plt.setp(axes, yticks=[])\n# plt.tight_layout()\n#########################################################################################\nplayers=pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2021\/players.csv\", low_memory=False)\ngames=pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2021\/games.csv\", low_memory=False)\nplays=pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv')\n#########################################################################################\n# all_files = ['\/kaggle\/input\/nfl-big-data-bowl-2021\/week1.csv',\n#     '\/kaggle\/input\/nfl-big-data-bowl-2021\/week2.csv',\n\n# from os import listdir\n# filepaths = [f for f in listdir(\"\/kaggle\/input\/nfl-big-data-bowl-2021\") if f.startswith('week')]\n# #print(filepaths)\n# #['week11.csv', 'week14.csv', 'week12.csv', 'week9.csv', 'week16.csv', 'week10.csv', 'week7.csv', 'week17.csv', 'week1.csv', 'week15.csv', 'week4.csv', 'week13.csv', 'week2.csv', 'week5.csv', 'week6.csv', 'week8.csv', 'week3.csv']\n# df = pd.concat(map(pd.read_csv, filepaths))\n# #df\n#########################################################################################\nsupersixone = pd.concat(map(pd.read_csv, glob.glob(os.path.join('\/kaggle\/input\/nfl-big-data-bowl-2021\/', \"week*.csv\"))))\n#########################################################################################\n\n\n# web scraping part, do not delete for any reason whatsoever:\n\n# #-------------------------------------------------------------------------\n# #----------------------- SUPERSCRAPE -------------------------------------\n# #-------------------------------------------------------------------------\n# # helpful scrp ref:  https:\/\/www.crummy.com\/software\/BeautifulSoup\/bs4\/doc\/\n# #-------------------------------------------------------------------------\n# from urllib.request import urlopen\n# from bs4 import BeautifulSoup\n# import pandas as pd\n# import numpy as np\n# #-------------------------------------------------------------------------\n# # i care about passing stats for the 2018 season, INDIVIDUALS ONLY:\n# url = 'https:\/\/www.pro-football-reference.com\/years\/2018\/passing.htm'\n# # https:\/\/www.pro-football-reference.com\/ contains some really good stats about QB performances, team data, etc. \n# # THIS IS GOOD TEAM DATA AS WELL: https:\/\/www.pro-football-reference.com\/years\/2018\/#all_passing\n# #-------------------------------------------------------------------------\n# html_poll = urlopen(url)\n# my_stats = BeautifulSoup(html_poll)\n# #-------------------------------------------------------------------------\n# # table headers\n# column_headers = my_stats.findAll('tr')[0]\n# column_headers = [i.getText() for i in column_headers.findAll('th')]\n# # cols:\n# # ['Rk', 'Player', 'Tm', 'Age', 'Pos', 'G', 'GS', 'QBrec', 'Cmp', 'Att', 'Cmp%', 'Yds', \n# # 'TD', 'TD%', 'Int', 'Int%', '1D', 'Lng', 'Y\/A', 'AY\/A', 'Y\/C', 'Y\/G', 'Rate', 'QBR', \n# # 'Sk', 'Yds', 'NY\/A', 'ANY\/A', 'Sk%', '4QC', 'GWD']\n# #  table rows (tr) and columns (td) \n# #-------------------------------------------------------------------------\n# # Collect table rows\n# rows = my_stats.findAll('tr')[1:]\n# # create\/get stats from each row of html \n# qb1 = []\n# for i in range(len(rows)):\n#   qb1.append([col.getText() for col in rows[i].findAll('td')])\n# #-------------------------------------------------------------------------\n# # print(qb1[0])\n# # ['Ben Roethlisberger', 'PIT', '36', 'QB', '16', '16', '9-6-1', '452', '675', '67.0', '5129', '34', \n# # '5.0', '16', '2.4', '248', '97', '7.6', '7.5', '11.3', '320.6', '96.5', '69.6', '24', '166', '7.10', \n# # '7.04', '3.4', '2', '3']\n# #-------------------------------------------------------------------------\n# # my_stats.findAll('tr')[1]\n# # <tr><th class=\"right\" csk=\"1\" data-stat=\"ranker\" scope=\"row\">1<\/th><td class=\"left\" csk=\"Roethlisberger,Ben\" data-append-csv=\"RoetBe00\" data-stat=\"player\"><a href=\"\/players\/R\/RoetBe00.htm\">Ben Roethlisberger<\/a><\/td><td class=\"left\" data-stat=\"team\"><a href=\"\/teams\/pit\/2018.htm\" title=\"Pittsburgh Steelers\">PIT<\/a><\/td><td class=\"right\" data-stat=\"age\">36<\/td><td class=\"left\" data-stat=\"pos\">QB<\/td><td class=\"right\" data-stat=\"g\">16<\/td><td class=\"right\" data-stat=\"gs\">16<\/td><td class=\"right\" csk=\"0.59375\" data-stat=\"qb_rec\">9-6-1<\/td><td class=\"right\" data-stat=\"pass_cmp\">452<\/td><td class=\"right\" data-stat=\"pass_att\">675<\/td><td class=\"right\" data-stat=\"pass_cmp_perc\">67.0<\/td><td class=\"right\" data-stat=\"pass_yds\">5129<\/td><td class=\"right\" data-stat=\"pass_td\">34<\/td><td class=\"right\" data-stat=\"pass_td_perc\">5.0<\/td><td class=\"right\" data-stat=\"pass_int\">16<\/td><td class=\"right\" data-stat=\"pass_int_perc\">2.4<\/td><td class=\"right\" data-stat=\"pass_first_down\">248<\/td><td class=\"right\" data-stat=\"pass_long\">97<\/td><td class=\"right\" data-stat=\"pass_yds_per_att\">7.6<\/td><td class=\"right\" data-stat=\"pass_adj_yds_per_att\">7.5<\/td><td class=\"right\" data-stat=\"pass_yds_per_cmp\">11.3<\/td><td class=\"right\" data-stat=\"pass_yds_per_g\">320.6<\/td><td class=\"right\" data-stat=\"pass_rating\">96.5<\/td><td class=\"right\" data-stat=\"qbr\">69.6<\/td><td class=\"right\" data-stat=\"pass_sacked\">24<\/td><td class=\"right\" data-stat=\"pass_sacked_yds\">166<\/td><td class=\"right\" data-stat=\"pass_net_yds_per_att\">7.10<\/td><td class=\"right\" data-stat=\"pass_adj_net_yds_per_att\">7.04<\/td><td class=\"right\" data-stat=\"pass_sacked_perc\">3.4<\/td><td class=\"right\" data-stat=\"comebacks\">2<\/td><td class=\"right\" data-stat=\"gwd\">3<\/td><\/tr>\n# #-------------------------------------------------------------------------\n# my_data = pd.DataFrame(qb1, columns=column_headers[1:])\n# #-------------------------------------------------------------------------\n# new_columns = my_data.columns.values\n# new_columns[-6] = 'Yds_Sack'  # Rename sack yards column to `Yds_Sack`\n# my_data.columns = new_columns\n# # STOP:  THIS IS ALL OF YOUR RAW DATA INTO A DF, IT IS SOLID... \n# #-------------------------------------------------------------------------\n# # Select stat categories\n# # categories = ['Cmp%', 'Yds', 'TD', 'Int', 'Y\/A', 'Rate', 'Att']\n# cats = ['Player', 'Tm', 'Age', 'G', 'GS', 'Cmp', 'Att', 'Cmp%', 'Yds', 'TD', 'Int', 'Int%', 'Sk', 'Y\/A', 'Y\/C','GWD','Rate']\n# # ['Player', 'Tm', 'Age', 'Pos', 'G', 'GS', 'QBrec', 'Cmp', 'Att', 'Cmp%',\n# #        'Yds', 'TD', 'TD%', 'Int', 'Int%', '1D', 'Lng', 'Y\/A', 'AY\/A', 'Y\/C',\n# #        'Y\/G', 'Rate', 'QBR', 'Sk', 'Yds_Sack', 'NY\/A', 'ANY\/A', 'Sk%', '4QC',\n# #        'GWD'],\n# #-------------------------------------------------------------------------\n# superdata = my_data[cats]\n# superdata['Player'] = superdata['Player'].str.replace('*', '', regex=False)\n# superdata['Player'] = superdata['Player'].str.replace('+', '', regex=False)\n# superdata['Player'] = superdata['Player'].str.strip()\n# superdata = superdata.head(20)\n# superdata.columns = ['Player', 'Team', 'Age', 'G', 'GS', 'Cmp', 'Att', 'Cmp_Pct', 'Yds', 'TDs',\n#        'INTs', 'INT_Pct', 'Sacked', 'Y\/A', 'Y\/C', 'GWD', 'Rating']\n\n# cols = superdata.columns[superdata.dtypes.eq('object')]\n\n# #superdata[cols] = superdata[cols].apply(pd.to_numeric, errors='coerce')\n# superdata[cols] = superdata[cols].apply(pd.to_numeric, errors='ignore')\n\n\n# # superdata.info()\n\n# superdata['Player'] = superdata['Player'].astype(object)\n# superdata['Team'] = superdata['Team'].astype(object)\n\n# superdata.info()\n\n# #-------------------------------------------------------------------------\n# #-------------------------------------------------------------------------\n","62143199":"%%HTML\n<style type=\"text\/css\">\n     \n\ndiv.h2 {\n    background-color: #159957;\n    background-image: linear-gradient(120deg, #155799, #159957);\n    text-align: left;\n    color: white;              \n    padding:9px;\n    padding-right: 100px; \n    font-size: 20px; \n    max-width: 1500px; \n    margin: auto; \n    margin-top: 40px; \n}\n                                     \n                                      \nbody {\n  font-size: 12px;\n}    \n     \n                                    \n                                      \ndiv.h3 {\n    color: #159957; \n    font-size: 18px; \n    margin-top: 20px; \n    margin-bottom:4px;\n}\n   \n                                      \ndiv.h4 {\n    color: #159957;\n    font-size: 15px; \n    margin-top: 20px; \n    margin-bottom: 8px;\n}\n   \n                                      \nspan.note {\n    font-size: 5; \n    color: gray; \n    font-style: italic;\n}\n  \n                                      \nhr {\n    display: block; \n    color: gray\n    height: 1px; \n    border: 0; \n    border-top: 1px solid;\n}\n  \n                                      \nhr.light {\n    display: block; \n    color: lightgray\n    height: 1px; \n    border: 0; \n    border-top: 1px solid;\n}   \n    \n                                      \ntable.dataframe th \n{\n    border: 1px darkgray solid;\n    color: black;\n      <table align=\"left\">\n    ...\n  <\/table>\n    background-color: white;\n}\n    \n                                      \ntable.dataframe td \n{\n    border: 1px darkgray solid;\n    color: black;\n    background-color: white;\n    font-size: 11px;\n    text-align: center;\n} \n   \n            \n                                      \ntable.rules th \n{\n    border: 1px darkgray solid;\n    color: black;\n    background-color: white;\n    font-size: 11px;\n    align: left;\n}\n       \n                                      \ntable.rules td \n{\n    border: 1px darkgray solid;\n    color: black;\n    background-color: white;\n    font-size: 13px;\n    text-align: center;\n} \n   \n                                      \n                                      \ntable.rules tr.best\n{\n    color: green;\n}    \n    \n                                      \n.output { \n    align-items: left; \n}\n        \n                                      \n.output_png {\n    display: table-cell;\n    text-align: left;\n    margin:auto;\n}                                          \n                                                                    \n                                      \n                                      \n<\/style>  ","7a3d5262":"\nfrom io import StringIO\n\ndata = (\"\"\"ID,Team Name,Abbrev,Conference,Division\n1,Arizona Cardinals,ARI,NFC,West\n2,Atlanta Falcons,ATL,NFC,South\n3,Baltimore Ravens,BAL,AFC,North\n4,Buffalo Bills,BUF,AFC,East\n5,Carolina Panthers,CAR,NFC,South\n6,Chicago Bears,CHI,NFC,North\n7,Cincinnati Bengals,CIN,AFC,North\n8,Cleveland Browns,CLE,AFC,North\n9,Dallas Cowboys,DAL,NFC,East\n10,Denver Broncos,DEN,AFC,West\n11,Detroit Lions,DET,NFC,North\n12,Green Bay Packers,GB,NFC,North\n13,Houston Texans,HOU,AFC,South\n14,Indianapolis Colts,IND,AFC,South\n15,Jacksonville Jaguars,JAX,AFC,South\n16,Kansas City Chiefs,KC,AFC,West\n17,Miami Dolphins,MIA,AFC,East\n18,Minnesota Vikings,MIN,NFC,North\n19,New England Patriots,NE,AFC,East\n20,New Orleans Saints,NO,NFC,South\n21,NY Giants,NYG,NFC,East\n22,NY Jets,NYJ,AFC,East\n23,Oakland Raiders,OAK,AFC,West\n24,Philadelphia Eagles,PHI,NFC,East\n25,Pittsburgh Steelers,PIT,AFC,North\n26,Los Angeles Chargers,LAC,AFC,West\n27,Los Angeles Rams,LA,NFC,West\n28,San Francisco 49ers,SF,NFC,West\n29,Seattle Seahawks,SEA,NFC,West\n30,Tampa Bay Buccaneers,TB,NFC,South\n31,Tennessee Titans,TEN,AFC,South\n32,Washington Football Team,WAS,NFC,East\"\"\")\n\nmapper = pd.read_csv(StringIO(data))\n\nd = dict(selector=\"th\",\n    props=[('text-align', 'center')])\n\nmapper = mapper.set_index('ID')\n\nmapper.style.set_properties(**{'width':'7em', 'text-align':'center'})\\\n        .set_table_styles([d])\n","70b81e37":"# 1303 unique\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#     nflId      height    weight    birthDate      collegeName      position      displayName\n#     2539334    72        190       1990-09-10     Washington       CB            Desmond Trufant\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# my_data = df[['PlayerCollegeName','NflId', 'DisplayName']].drop_duplicates().copy()\n\n# college_attended = my_data[\"PlayerCollegeName\"].value_counts()\n\n# df_cc = pd.DataFrame({'CollegeName':college_attended.index, 'Count':college_attended.values}).sort_values(\"Count\", ascending = False)\n\n# #df_cc.Count.astype('int', inplace=True)\n\n# df_cc = df_cc[df_cc.CollegeName != 'Louisiana State']\n\n# df_cc.at[42,'Count']=51\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# To draw horizontal bars by specifying a (center) y-coordinate, height, and left and right\n# endpoints, use the hbar() glyph function:\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nmy_data = players[['collegeName','nflId', 'displayName']].drop_duplicates().copy()  # being safe \n\n# college_attended data[\"Age\"]= data[\"Age\"].replace(25.0, \"Twenty five\") \n\n# college_attended data[\"Age\"]= data[\"Age\"].replace(25.0, \"Twenty five\")\n\n# college_attended data[\"Age\"]= data[\"Age\"].replace(25.0, \"Twenty five\") \n    \n# --- clean up data set ---\n\nmy_data['collegeName'] = my_data.collegeName.replace('Louisiana State', 'LSU')\n\ncollege_attended = my_data[\"collegeName\"].value_counts()\n\ndf_cc = pd.DataFrame({'collegeName':college_attended.index, \n                      'Count':college_attended.values}).sort_values(\"Count\", ascending = False)\n\n# df_cc = df_cc[df_cc.CollegeName != 'Louisiana State']\n\n# df_cc.at[42,'Count']=51\n\n#df_cc[df_cc.CollegeName=='LSU']['Count']\n\ndf_cc.sort_values('Count',ascending=False, inplace=True)\n\n#pd.set_option('display.max_rows', 500)\n\ndf_cc.index = df_cc.index + 1\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nmysource = ColumnDataSource(df_cc)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    \np = figure(\n  y_range=df_cc.collegeName[:48], \n    # original was '50',  I need to enter the SAME thing here as y points, i find that odd \n    # wait:  can i set this as the range, but not below ? ? ? \n    # i think caegorical just list in a list the categories here \n  # title = '\\nNFL Player Count by College Attended\\n',  < - temporarily remove ! \n  x_axis_label ='# of NFL players that previously attended the college',\n  plot_width=540,\n  plot_height=1200,\n  tools=\"hover\",       # or tools=\"\" \n  toolbar_location=None,   \n  #background_fill_color=\"#efe8e2\")\n  #min_border=0))\n)\n\n# adding annotations ->  p.text(x=[1], y = [0], text=['hello\\nworld!'], angle = 0)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TEMP KILL~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    \n# p.hbar(\n#     y='CollegeName',  # center of your y coordinate launcher, 40 points as def above ... \n#     left=0, # or left=20, etc\n#     right='Count',    # right is 40 points... \n#     height=0.8,\n#     alpha=.6,\n#     #color='orange',    #color=Spectral3  #color=Blues8,   \n#     #background_fill_color=\"#efe8e2\", \n#     #     fill_color=Blues8,\n#     #     fill_alpha=0.4, \n#     source = mysource,\n#     fill_alpha=0.9,\n#     line_color='blue'   # line_coolor='red'\n# ) \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#     nflId      height    weight    birthDate      collegeName      position      displayName\n\n#   output_file(\"horizontal_bar.html\", mode=\"inline\")\n\n\n#############################################################################################\n\n\np.hbar(y='collegeName',     # center of your y coordinate launcher, 40 points as def above ... \n    left=0,                 # or left=20, etc\n    right='Count',          # right is 40 points... \n    height=.6,\n    alpha=.6,\n    color=\"black\", \n    # color=Spectral3  #color=Blues8,   \n    # background_fill_color=\"#efe8e2\", \n    # fill_color=Blues8,\n    #     fill_alpha=0.4, \n    \n    fill_color=factor_cmap('collegeName', palette=Blues8, factors=df_cc.collegeName[:50].tolist()),\n    \n        # do i need to set grey(50) to grey(my_count) ? \n        # Cividis,\n        # Spectral6 # old = grey(50),  #inferno(50),  #cividis(50),  #d3['Category20b'][4],  #Category20b(2),  #[2],   \n        #Category20b,   #Viridis256,    #GnBu[8], #,#Spectral6,  #viridis(50),  #[3], #Spectral6,  #|Blues[2],\n\n    source = mysource,\n    fill_alpha=0.7,\n    #line_color='blue'  \n) \n\np.add_layout(Title(text=\"LSU, Alabama, and Ohio State continue to dominate\", text_font_style=\"italic\"), 'above')\n\np.add_layout(Title(text=\"Interactive Chart: NFL Player Count by College Attended \", text_font_size=\"11pt\"), 'above')\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# TITLE: \n# p.title.text = 'Current frame:'\n# p.title.text_color = TEXT_COLOR\n# p.title.text_font = TEXT_FONT\np.title.text_font_size = '11pt'\n# p.title.text_font_style = 'normal'\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# AXES: \n# p.xaxis.major_tick_line_color = None  # turn off x-axis major ticks\n# p.xaxis.minor_tick_line_color = None  # turn off x-axis minor ticks\n# p.yaxis.major_tick_line_color = None  # turn off y-axis major ticks\n# p.yaxis.minor_tick_line_color = None  # turn off y-axis minor ticks\n# p.xaxis.axis_line_color = None    # or 'red'\n# p.yaxis.axis_line_color = GRID_COLOR \n#\n# X-TICKS:\n# p.xaxis[0].ticker = FixedTicker(ticks=[0, 1])\n# p.xaxis.major_tick_line_color = GRID_COLOR\n# p.xaxis.major_label_text_font_size = '7pt'\n# p.xaxis.major_label_text_font = TEXT_FONT\n# p.xaxis.major_label_text_color = None   #TEXT_COLOR\n#\n# Y-TICKS:\n# p.yaxis[0].ticker = FixedTicker(ticks=np.arange(1, len(labels) + 1, 1).tolist())\n# p.yaxis.major_label_text_font_size = '0pt'\np.yaxis.major_tick_line_color = None\np.axis.minor_tick_line_color = None  # turn off y-axis minor ticks\n# p.xaxis.major_label_text_font_size = '0pt'  # preferred method for removing tick labels\n# p.yaxis.major_label_text_font_size = '0pt'  # preferred method for removing tick labels\np.yaxis.major_tick_line_color = None  # turn off y-axis major ticks\np.yaxis.minor_tick_line_color = None  # turn off y-axis minor ticks\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# GRID:\n# p.xgrid.grid_line_color = None\np.ygrid.grid_line_color = None   \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# # LEGENDgend.location = 'top_left'\n# p.legend.orientation='vertical'\n# p.legend.location='top_right'\n# p.legend.label_text_font_size='10px'\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n### NOTES here> \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# HOVER:\n#     hover.names = ['bars']\n#     hover.tooltips = [\n#         ('Event', '@label'),\n#         ('Probability', '@pretty_value')]\n\n\n# --- experimental ---\n# p.add_layout(Title(text=\"Sub-Title\", text_font_style=\"italic\"), 'above')\n# p.add_layout(Title(text=\"Title\", text_font_size=\"16pt\"), 'above')\n\n\nhover = HoverTool()\n\n#p.select(HoverTool).tooltips = [(\"x1\",\"@x1\"), (\"x2\",\"@x2\")]\n#\n# hover.tooltips = [\n#         ('Event', '@label')\n#         #('Probability', '@pretty_value'),\n#     ]\n# hover.tooltips = [\n#     (\"Total:\", \"@Count\")\n#     #(\"x1\", \"@x1\"),\n#     #(\"Totals\", \"@TONS_HE High Explosive \/ @TONS_IC Incendiary \/ @TONS_FRAG Fragmentation\")\n#     ]\n###########################hover.mode = 'vline'\n#????curdoc().add_root(p)\n# hover.tooltips = \"\"\"\n#     <div>\n#         <br>\n#         <h4>@CollegeName:<\/h4>\n#         <div><strong>Count: &ensp; <\/strong>@Count<\/div>\n#     <\/div>\n# \"\"\"\n\nhover.tooltips = [\n    (\"College \", \"@collegeName\"),\n    (\"Rank Count \", \"@index\"),\n    (\"College Graduate count \", \"@Count\")]\n\n#<div><strong>HP: <\/strong>@Horsepower<\/div>       \n\np.add_tools(hover)\n\n\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\noutput_notebook(hide_banner=True)\n\n\n\n\nshow(p); \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n# hover.tooltips = [\n#     (\"index\", \"$index\"),\n#     (\"(x,y)\", \"($x, $y)\"),\n#     (\"radius\", \"@radius\"),\n#     (\"fill color\", \"$color[hex, swatch]:fill_color\"),\n#     (\"foo\", \"@foo\"),\n#     (\"bar\", \"@bar\"),\n# ]\n#\n#\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# # SUPERHBAR:  i started learning bokeh two days ago, so this quality sucks \n# # To draw horizontal bars by specifying a (center) y-coordinate, height, and left and right\n# # endpoints, use the hbar() glyph function:\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# my_data = df[['PlayerCollegeName','NflId', 'DisplayName']].drop_duplicates().copy()\n\n# college_attended = my_data[\"PlayerCollegeName\"].value_counts()\n\n# df_cc = pd.DataFrame({'CollegeName':college_attended.index, 'Count':college_attended.values}).sort_values(\"Count\", ascending = False)\n\n# #df_cc.Count.astype('int', inplace=True)\n\n# df_cc = df_cc[df_cc.CollegeName != 'Louisiana State']\n\n# df_cc.at[42,'Count']=51\n\n# #df_cc[df_cc.CollegeName=='LSU']['Count']\n\n# #THIS IS UNBELIEVABLE.  SOMEONE COUNTED LSU AND LOUSISIANA STATE AS DIFF COLLEGES ! ! ! ! THATS A BIG \n# #MISTAKE.  LSU HAS A MASSIVE NUMBER OF PLAYERS CURRENTLY IN THE NFL, and so consolidating the values...\n\n# df_cc.sort_values('Count',ascending=False, inplace=True)\n\n# #pd.set_option('display.max_rows', 500)\n# df_cc.index = df_cc.index + 1\n\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# mysource = ColumnDataSource(df_cc)\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# p = figure(\n#   y_range=df_cc.CollegeName[:50],    # I need to enter the SAME thing here as y points, i find that odd \n#   # wait:  can i set this as the range, but not below ? ? ? \n#   # i think caegorical just list in a list the categories here \n#   title = '\\nNFL Player Count by College Attended\\n',\n#   x_axis_label ='# of NFL players that attended the college prior\\n',\n#   plot_width=600,\n#   plot_height=700,\n#   tools=\"hover\",       # or tools=\"\" \n#   toolbar_location=None,   \n#   #background_fill_color=\"#efe8e2\")\n#   #min_border=0))\n# )\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    \n# p.hbar(\n#     y='CollegeName',  # center of your y coordinate launcher, 40 points as def above ... \n#     left=0, # or left=20, etc\n#     right='Count',    # right is 40 points... \n#     height=0.8,\n#     alpha=.6,\n#     #color='orange',    #color=Spectral3  #color=Blues8,   \n#     #background_fill_color=\"#efe8e2\", \n#     #     fill_color=Blues8,\n#     #     fill_alpha=0.4, \n#     source = mysource, \n#     line_color='blue'   # line_coolor='red'\n# ) \n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# # TITLE: \n# # p.title.text = 'Current frame:'\n# # p.title.text_color = TEXT_COLOR\n# # p.title.text_font = TEXT_FONT\n# p.title.text_font_size = '11pt'\n# # p.title.text_font_style = 'normal'\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# # AXES: \n# # p.xaxis.major_tick_line_color = None  # turn off x-axis major ticks\n# # p.xaxis.minor_tick_line_color = None  # turn off x-axis minor ticks\n# # p.yaxis.major_tick_line_color = None  # turn off y-axis major ticks\n# # p.yaxis.minor_tick_line_color = None  # turn off y-axis minor ticks\n# # p.xaxis.axis_line_color = None    # or 'red'\n# # p.yaxis.axis_line_color = GRID_COLOR \n# #\n# # X-TICKS:\n# # p.xaxis[0].ticker = FixedTicker(ticks=[0, 1])\n# # p.xaxis.major_tick_line_color = GRID_COLOR\n# # p.xaxis.major_label_text_font_size = '7pt'\n# # p.xaxis.major_label_text_font = TEXT_FONT\n# # p.xaxis.major_label_text_color = None   #TEXT_COLOR\n# #\n# # Y-TICKS:\n# # p.yaxis[0].ticker = FixedTicker(ticks=np.arange(1, len(labels) + 1, 1).tolist())\n# # p.yaxis.major_label_text_font_size = '0pt'\n# p.yaxis.major_tick_line_color = None\n# p.axis.minor_tick_line_color = None  # turn off y-axis minor ticks\n\n# # p.xaxis.major_label_text_font_size = '0pt'  # preferred method for removing tick labels\n# # p.yaxis.major_label_text_font_size = '0pt'  # preferred method for removing tick labels\n# p.yaxis.major_tick_line_color = None  # turn off y-axis major ticks\n# p.yaxis.minor_tick_line_color = None  # turn off y-axis minor ticks\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# # GRID:\n# # p.xgrid.grid_line_color = None\n# p.ygrid.grid_line_color = None   \n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# # # LEGENDgend.location = 'top_left'\n# # p.legend.orientation='vertical'\n# # p.legend.location='top_right'\n# # p.legend.label_text_font_size='10px'\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# ### NOTES here> \n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# # HOVER:\n# #     hover.names = ['bars']\n# #     hover.tooltips = [\n# #         ('Event', '@label'),\n# #         ('Probability', '@pretty_value')]\n# #\n# hover = HoverTool()\n# #p.select(HoverTool).tooltips = [(\"x1\",\"@x1\"), (\"x2\",\"@x2\")]\n# #\n# # hover.tooltips = [\n# #         ('Event', '@label')\n# #         #('Probability', '@pretty_value'),\n# #     ]\n# # hover.tooltips = [\n# #     (\"Total:\", \"@Count\")\n# #     #(\"x1\", \"@x1\"),\n# #     #(\"Totals\", \"@TONS_HE High Explosive \/ @TONS_IC Incendiary \/ @TONS_FRAG Fragmentation\")\n# #     ]\n# ###########################hover.mode = 'vline'\n# #????curdoc().add_root(p)\n# # hover.tooltips = \"\"\"\n# #     <div>\n# #         <br>\n# #         <h4>@CollegeName:<\/h4>\n# #         <div><strong>Count: &ensp; <\/strong>@Count<\/div>\n# #     <\/div>\n# # \"\"\"\n# hover.tooltips = [\n#     (\"College Name:\", \"@CollegeName\"),\n#     (\"Ranking by Count\", \"$index\"),\n#     (\"Number of gradutes that entered the NFL:\", \"@Count\"),\n# ]\n# #<div><strong>HP: <\/strong>@Horsepower<\/div>       \n# p.add_tools(hover)\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# output_notebook(hide_banner=True)\n# show(p); \n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# # hover.tooltips = [\n# #     (\"index\", \"$index\"),\n# #     (\"(x,y)\", \"($x, $y)\"),\n# #     (\"radius\", \"@radius\"),\n# #     (\"fill color\", \"$color[hex, swatch]:fill_color\"),\n# #     (\"foo\", \"@foo\"),\n# #     (\"bar\", \"@bar\"),\n# # ]\n\n# from bokeh.plotting import figure\n# from bokeh.io import output_file, show\n# import calendar\n\n# values = [2,3,4,5,6,7,8]\n# days = [calendar.day_name[i-1] for i in range(1,8)]\n\n# p = figure(x_range=days)\n# p.vbar(x=days, width=0.5, top=values, color = \"#ff1200\")\n\n# output_file('foo.html')\n# show(p)\n\n# OUTPUT file -> output_file('foo.html')\n","1dc6d0db":"\n# plt.style.use(\"dark_background\")\n\n# plt.style.use(\"seaborn-ticks\")\n\nsns.set_style(\"whitegrid\")\n\n\n\nt1 = players.copy()\n\ndef mod(y):\n    if len(y)>2:\n        (feet, inches) = y.split('-')\n        return int(feet)*12 + int(inches)\n    else:  return int(y) # since string type... (cat)\n    \nt1.replace('\\'','', regex=True, inplace=True) \n   \nt1['height'] = t1.apply(lambda x: mod(x.height), 1)\n\n \n# #sns.plt.show()\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# sns.set_style(\"white\", {'grid.linestyle': '--'})\n# sns.set_style(\"ticks\", {'grid.linestyle': '--'})\n##sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n##sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#   speed = bbb.groupby(['DisplayName'])['S'].agg('max').sort_values(ascending=True)\n#   speed = pd.DataFrame(speed)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfig, ax = plt.subplots(figsize=(8.5,5.5))\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# sns.distplot(t1.weight, kde=True, color=\"green\", kde_kws={\"bw_adjust\":0.25},)\n#              # hist_kws={\"linewidth\": .9, 'edgecolor':'black'} , bins=35)\n    \nsns.distplot(t1.weight, \n             kde=True, \n             # ORIGINAL:   color=\"#00ffff\",   #  \"green\",\n             color='#fdae61',\n             kde_kws={'bw':4, \"linewidth\":.9, 'alpha':.7},\n             hist_kws={\"linewidth\": .10, 'edgecolor':'black', 'alpha':.8, \"rwidth\":0.75},\n             bins=35)\n    \n    \nsns.despine(top=True, right=True, left=True, bottom=True)\n\nax.xaxis.set_major_locator(plt.MultipleLocator(10))\n\nax.set_yticklabels([])\n\nplt.title('\\nPlayer Weight Distribution',fontsize=12, loc=\"left\")\n\nax.set(xlabel=\"\\nWeight (lbs)\\n\")\n\n#  sns.plt.legend()\n\nplt.axvline(x=150, color='grey', linestyle=\"--\", linewidth=.5)\nplt.axvline(x=200, color='grey', linestyle=\"--\", linewidth=.5)\nplt.axvline(x=250, color='grey', linestyle=\"--\", linewidth=.5)\nplt.axvline(x=300, color='grey', linestyle=\"--\", linewidth=.5)\nplt.axvline(x=350, color='grey', linestyle=\"--\", linewidth=.5)\n\n\nplt.grid(linestyle='--', alpha=0.03)\n\n\nplt.tight_layout()\nplt.show();\n\n\n# # plot\n# f, axes = plt.subplots(2, 2, figsize=(7, 7), sharex=True)\n# sns.distplot( df[\"sepal_length\"] , color=\"skyblue\", ax=axes[0, 0])\n# sns.distplot( df[\"sepal_width\"] , color=\"olive\", ax=axes[0, 1])\n# sns.distplot( df[\"petal_length\"] , color=\"gold\", ax=axes[1, 0])\n# sns.distplot( df[\"petal_width\"] , color=\"teal\", ax=axes[1, 1])\n\n\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# sns.set_style(\"white\", {'grid.linestyle': '--'})\n# # sns.set_style(\"ticks\", {'grid.linestyle': '--'})\n# ##sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n# ##sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# #   speed = bbb.groupby(['DisplayName'])['S'].agg('max').sort_values(ascending=True)\n# #   speed = pd.DataFrame(speed)\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# fig, ax = plt.subplots(figsize=(9,7))\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# sns.distplot(t1.weight, kde=True, color=\"green\",\n#  hist_kws={\"linewidth\": .9, 'edgecolor':'black'} , bins=25)\n# sns.despine(top=True, right=True, left=True, bottom=True)\n# ax.xaxis.set_major_locator(plt.MultipleLocator(10))\n# ax.set_yticklabels([])\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# plt.title('\\nDistribution of running speed for all players in the 2017\/2018 seasons (yds\/s)\\n',\n#            fontsize=11, loc=\"left\")\n# ax.set(xlabel=\"\\nWeight (lbs)\\n\")\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# plt.tight_layout()\n# plt.show();\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ##sns.palplot(sns.color_palette(\"RdBu_r\", 7))\n\n# tf = df.query(\"NflIdRusher == NflId\")\n\n# sns.set_style(\"white\", {'grid.linestyle': '--'})\n\n# fig, ax = plt.subplots(figsize=(11,8))\n# ax.set_xlim(-10,26)\n\n# ###ccc['colors'] = ['red' if x <= 0 else 'green' for x in ccc['Yards']]\n# ###specialcolors = ['red' if x <= 0 else 'green' for x in tf.Yards]\n# c = [ 'r' if i < 0 else 'b' for i in tf.Yards]\n\n# sns.distplot(tf.Yards, kde=False, color='b', bins=100, \n#             hist_kws={\"linewidth\": .9, 'edgecolor':'black'})\n\n# #########################ax.set_xlim(80,100)\n\n# ## Remove the x-tick labels:  plt.xticks([])\n# plt.yticks([])\n# ## This method also hides the tick marks\n\n# plt.title('\\nCombined Data: Overall distribution of yards gained during an individual running play\\n',fontsize=12)\n# plt.xlabel('\\nYards (yd) Gained $\\Rightarrow$\\n', fontsize=9)\n# sns.despine(top=True, right=True, left=True, bottom=True)\n# ax.xaxis.set_major_locator(plt.MultipleLocator(1))\n# plt.axvline(x=0, color='blue', linestyle=\"--\", linewidth=.5)\n# plt.text(-4.55, 2914, r'Line of Scrimmage >', {'color': 'blue', 'fontsize': 9})\n# plt.tight_layout()\n# plt.show();\n\n# Spectral3 = (\"#99d594\", \"#ffffbf\", \"#fc8d59\")\n# Spectral4 = (\"#2b83ba\", \"#abdda4\", \"#fdae61\", \"#d7191c\")\n# Spectral5 = (\"#2b83ba\", \"#abdda4\", \"#ffffbf\", \"#fdae61\", \"#d7191c\")\n# Spectral6 = (\"#3288bd\", \"#99d594\", \"#e6f598\", \"#fee08b\", \"#fc8d59\", \"#d53e4f\")\n# Spectral7 = (\"#3288bd\", \"#99d594\", \"#e6f598\", \"#ffffbf\", \"#fee08b\", \"#fc8d59\", \"#d53e4f\")\n# Spectral8 = (\"#3288bd\", \"#66c2a5\", \"#abdda4\", \"#e6f598\", \"#fee08b\", \"#fdae61\", \"#f46d43\", \"#d53e4f\")\n# Spectral9 = (\"#3288bd\", \"#66c2a5\", \"#abdda4\", \"#e6f598\", \"#ffffbf\", \"#fee08b\", \"#fdae61\", \"#f46d43\", \"#d53e4f\")\n# Spectral10 = (\"#5e4fa2\", \"#3288bd\", \"#66c2a5\", \"#abdda4\", \"#e6f598\", \"#fee08b\", \"#fdae61\", \"#f46d43\", \"#d53e4f\", \"#9e0142\")\n# Spectral11 = (\"#5e4fa2\", \"#3288bd\", \"#66c2a5\", \"#abdda4\", \"#e6f598\", \"#ffffbf\", \"#fee08b\", \"#fdae61\", \"#f46d43\", \"#d53e4f\", \"#9e0142\")\n","d93f41ee":"\n# plt.style.use(\"seaborn-ticks\")\nsns.set_style(\"whitegrid\")\n\n\n# seaborn.set(rc={'axes.facecolor':'cornflowerblue', 'figure.facecolor':'cornflowerblue'})\n\n# sns.distplot( df[\"sepal_length\"] , color=\"skyblue\", label=\"Sepal Length\")\n# sns.distplot( df[\"sepal_width\"] , color=\"red\", label=\"Sepal Width\")\n \n# #sns.plt.show()\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# sns.set_style(\"white\", {'grid.linestyle': '--'})\n# sns.set_style(\"ticks\", {'grid.linestyle': '--'})\n##sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n##sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#   speed = bbb.groupby(['DisplayName'])['S'].agg('max').sort_values(ascending=True)\n#   speed = pd.DataFrame(speed)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfig, ax = plt.subplots(figsize=(8.5,5.5))\n\n# sns.distplot(t1.weight, kde=True, color=\"green\", kde_kws={\"bw_adjust\":0.25},)\n#              # hist_kws={\"linewidth\": .9, 'edgecolor':'black'} , bins=35)\n    \nsns.distplot(t1.height, \n             kde=True, \n             # ORIGINA:  color=\"#ffffbf\", \n             color = \"#d7191c\",\n             kde_kws={'bw':1, \"linewidth\":.5, 'color':\"red\"},  #  #ffffbf\"},\n             bins=13,\n             hist_kws={\"linewidth\": .5, 'edgecolor':'black', 'alpha':.75, \"rwidth\":0.75})\n    \n    \nsns.despine(top=True, right=True, left=True, bottom=True)\n\nax.xaxis.set_major_locator(plt.MultipleLocator(1))\n\nax.set_yticklabels([])\n\nplt.title('\\nPlayer Height Distribution\\n', fontsize=12, loc=\"left\")\n\nax.set(xlabel=\"\\nHeight (inches)\\n\")\n\n#  sns.plt.legend()\n\nplt.axvline(x=72, color='black', linestyle=\"--\", linewidth=.6)\n\nplt.text(71.2, .15, r'6-foot mark', {'color': 'black', 'fontsize': 10})\n\nplt.text(71.75, -.0132, r\"6'0\", {'color': 'maroon', 'fontsize': 9})\n\nplt.text(75.79, -.0132, r\"6'4\", {'color': 'maroon', 'fontsize': 9})\n\nplt.text(79.75, -.0132, r\"6'8\", {'color': 'maroon', 'fontsize': 9})\n\nplt.grid(linestyle='--', alpha=0.03)\n\nplt.tight_layout()\n\nplt.show();\n\n\n\n# # plot\n# f, axes = plt.subplots(2, 2, figsize=(7, 7), sharex=True)\n# sns.distplot( df[\"sepal_length\"] , color=\"skyblue\", ax=axes[0, 0])\n# sns.distplot( df[\"sepal_width\"] , color=\"olive\", ax=axes[0, 1])\n# sns.distplot( df[\"petal_length\"] , color=\"gold\", ax=axes[1, 0])\n# sns.distplot( df[\"petal_width\"] , color=\"teal\", ax=axes[1, 1])\n\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# sns.set_style(\"white\", {'grid.linestyle': '--'})\n# # sns.set_style(\"ticks\", {'grid.linestyle': '--'})\n# ##sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n# ##sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# #   speed = bbb.groupby(['DisplayName'])['S'].agg('max').sort_values(ascending=True)\n# #   speed = pd.DataFrame(speed)\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# fig, ax = plt.subplots(figsize=(9,7))\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# sns.distplot(t1.weight, kde=True, color=\"green\",\n#  hist_kws={\"linewidth\": .9, 'edgecolor':'black'} , bins=25)\n# sns.despine(top=True, right=True, left=True, bottom=True)\n# ax.xaxis.set_major_locator(plt.MultipleLocator(10))\n# ax.set_yticklabels([])\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# plt.title('\\nDistribution of running speed for all players in the 2017\/2018 seasons (yds\/s)\\n',\n#            fontsize=11, loc=\"left\")\n# ax.set(xlabel=\"\\nWeight (lbs)\\n\")\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# plt.tight_layout()\n# plt.show();\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ##sns.palplot(sns.color_palette(\"RdBu_r\", 7))\n\n# tf = df.query(\"NflIdRusher == NflId\")\n\n# sns.set_style(\"white\", {'grid.linestyle': '--'})\n\n# fig, ax = plt.subplots(figsize=(11,8))\n# ax.set_xlim(-10,26)\n\n# ###ccc['colors'] = ['red' if x <= 0 else 'green' for x in ccc['Yards']]\n# ###specialcolors = ['red' if x <= 0 else 'green' for x in tf.Yards]\n# c = [ 'r' if i < 0 else 'b' for i in tf.Yards]\n\n\n# sns.distplot(tf.Yards, kde=False, color='b', bins=100, \n#             hist_kws={\"linewidth\": .9, 'edgecolor':'black'})\n\n# #########################ax.set_xlim(80,100)\n\n# ## Remove the x-tick labels:  plt.xticks([])\n# plt.yticks([])\n# ## This method also hides the tick marks\n\n# plt.title('\\nCombined Data: Overall distribution of yards gained during an individual running play\\n',fontsize=12)\n# plt.xlabel('\\nYards (yd) Gained $\\Rightarrow$\\n', fontsize=9)\n# sns.despine(top=True, right=True, left=True, bottom=True)\n# ax.xaxis.set_major_locator(plt.MultipleLocator(1))\n# plt.axvline(x=0, color='blue', linestyle=\"--\", linewidth=.5)\n# plt.text(-4.55, 2914, r'Line of Scrimmage >', {'color': 'blue', 'fontsize': 9})\n# plt.tight_layout()\n# plt.show();","edb7b55d":"\n#plt.style.use('dark_background')\n\nsns.set_style(\"whitegrid\")\n\nimport statsmodels.api as sm\n\nfrom statsmodels.graphics.gofplots import qqplot\n\nfrom matplotlib import pyplot\n\n# q-q plot\n\nqqplot(t1.height, line='s')\n\nplt.show(); \n\n\n# --- works --- \n\n# import pandas as pd\n\n# # df = pd.DataFrame({'x': t1.height})\n\n# # alt.Chart(df).transform_quantile(\n# #     'x', step=0.02\n# # ).mark_point().encode(\n# #     x='prob:Q',\n# #     y='value:Q'\n# # )\n\n\n# df = pd.DataFrame({'x': t1.height})\n\n# alt.Chart(df).transform_quantile(\n#     'x', step=0.02\n# ).mark_point().encode(\n#     alt.X('prob:Q'),\n#     alt.Y('value:Q',scale=alt.Scale(domain=(60,80))\n#     # y='value:Q'\n# ))\n\n# yep\n# import statsmodels.api as sm\n# from scipy.stats import norm\n# import pylab\n# my_data = t1.height.values\n# sm.qqplot(my_data, line='s')\n# pylab.show()\n\n","1bb6024a":"t3 = t1.copy()\nt3.columns = t3.columns.str.replace('weight','score')\nt3.columns = t3.columns.str.replace('position','group')\nt3 = t3[['score','group']]\nt3['score'] = t3['score'].astype(float)\ncats = sorted(list(t3.group.unique()))\ngroups = t3.groupby('group')\nq1 = groups.quantile(q=0.25)\nq2 = groups.quantile(q=0.5)\nq3 = groups.quantile(q=0.75)\niqr = q3 - q1\nupper = q3 + 1.5*iqr\nlower = q1 - 1.5*iqr\n# find the outliers for each category\ndef outliers(group):\n    cat = group.name\n    return group[(group.score > upper.loc[cat]['score']) | (group.score < lower.loc[cat]['score'])]['score']\nout = groups.apply(outliers).dropna()\n# prepare outlier data for plotting, we need coordinates for every outlier.\nif not out.empty:\n    outx = []\n    outy = []\n    for keys in out.index:\n        outx.append(keys[0])\n        outy.append(out.loc[keys[0]].loc[keys[1]])\np = figure(tools=\"\", background_fill_color=\"#efefef\", x_range=cats, toolbar_location=None)\n# if no outliers, shrink lengths of stems to be no longer than the minimums or maximums\nqmin = groups.quantile(q=0.00)\nqmax = groups.quantile(q=1.00)\nupper.score = [min([x,y]) for (x,y) in zip(list(qmax.loc[:,'score']),upper.score)]\nlower.score = [max([x,y]) for (x,y) in zip(list(qmin.loc[:,'score']),lower.score)]\n# stems\np.segment(cats, upper.score, cats, q3.score, line_color=\"black\")\np.segment(cats, lower.score, cats, q1.score, line_color=\"black\")\n# boxes\n# original:   p.vbar(cats, 0.7, q2.score, q3.score, fill_color=\"#E08E79\", line_color=\"black\")\n# rej  p.vbar(cats, 0.7, q2.score, q3.score, fill_color=\"#fdae61\", line_color=\"black\")\np.vbar(cats, 0.7, q2.score, q3.score, fill_color=\"#fdae61\", line_color=\"black\", fill_alpha=.85)\n# original:   p.vbar(cats, 0.7, q1.score, q2.score, fill_color=\"#3B8686\", line_color=\"black\")\np.vbar(cats, 0.7, q1.score, q2.score, fill_color=\"#2b83ba\", line_color=\"black\", fill_alpha=.75)\n# whiskers (almost-0 height rects simpler than segments)\np.rect(cats, lower.score, 0.2, 0.01, line_color=\"black\")\np.rect(cats, upper.score, 0.2, 0.01, line_color=\"black\")\n# outliers\nif not out.empty:\n    p.circle(outx, outy, size=5, color=\"#F38630\", fill_alpha=0.6)\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = \"white\"\np.grid.grid_line_width = 2\np.xaxis.major_label_text_font_size=\"16px\"\n# output_file(\"boxplot.html\", title=\"boxplot.py example\")\np.plot_height=500\np.plot_width=700\np.title.text = \"Player Weight Distribution in lbs (by NFL Position)\\n\"\np.title.align = \"left\"\np.title.text_color = \"black\"\np.title.text_font_size = \"15px\"\np.yaxis.axis_label_text_font_size = \"25pt\"\n# p.xaxis.major_label_orientation = \"vertical\"\np.yaxis.major_label_text_font_size = \"9pt\"\np.xaxis.major_label_text_font_size = \"9pt\"\nfrom bokeh.io import export_png\n# # option one\n# plot = Plot(output_backend=\"svg\")\n# # option two\n# plot.output_backend = \"svg\"\nshow(p); \n# Spectral4 = (\"#2b83ba\", \"#abdda4\", \"#fdae61\", \"#d7191c\")","677e53fe":"# derived some of this code from bokeh's excellent discussion on bokeh.com\nfrom math import pi\nt3 = t1.copy() # i do this alot \nt3.columns = t3.columns.str.replace('height','score')\nt3.columns = t3.columns.str.replace('position','group')\nt3 = t3[['score','group']]\nt3['score'] = t3['score'].astype(float)\ncats = sorted(list(t3.group.unique()))\ngroups = t3.groupby('group')\nq1 = groups.quantile(q=0.25)\nq2 = groups.quantile(q=0.5)\nq3 = groups.quantile(q=0.75)\niqr = q3 - q1\nupper = q3 + 1.5*iqr\nlower = q1 - 1.5*iqr\n# find the outliers for each category\ndef outliers(group):\n    cat = group.name\n    return group[(group.score > upper.loc[cat]['score']) | (group.score < lower.loc[cat]['score'])]['score']\nout = groups.apply(outliers).dropna()\n# prepare outlier data for plotting, we need coordinates for every outlier.\nif not out.empty:\n    outx = []\n    outy = []\n    for keys in out.index:\n        outx.append(keys[0])\n        outy.append(out.loc[keys[0]].loc[keys[1]])\np = figure(tools=\"\", background_fill_color=\"#efefef\", x_range=cats, toolbar_location=None)\n# if no outliers, shrink lengths of stems to be no longer than the minimums or maximums\nqmin = groups.quantile(q=0.00)\nqmax = groups.quantile(q=1.00)\nupper.score = [min([x,y]) for (x,y) in zip(list(qmax.loc[:,'score']),upper.score)]\nlower.score = [max([x,y]) for (x,y) in zip(list(qmin.loc[:,'score']),lower.score)]\n# stems\np.segment(cats, upper.score, cats, q3.score, line_color=\"black\")\np.segment(cats, lower.score, cats, q1.score, line_color=\"black\")\n# boxes\n# original:   p.vbar(cats, 0.7, q2.score, q3.score, fill_color=\"#E08E79\", line_color=\"black\")\n# rej  p.vbar(cats, 0.7, q2.score, q3.score, fill_color=\"#fdae61\", line_color=\"black\")\np.vbar(cats, 0.7, q2.score, q3.score, fill_color=\"#d7191c\", line_color=\"black\", fill_alpha=.75)\n# original:   p.vbar(cats, 0.7, q1.score, q2.score, fill_color=\"#3B8686\", line_color=\"black\")\np.vbar(cats, 0.7, q1.score, q2.score, fill_color=\"#2b83ba\", line_color=\"black\", fill_alpha=.75)\n# whiskers (almost-0 height rects simpler than segments)\np.rect(cats, lower.score, 0.2, 0.01, line_color=\"black\")\np.rect(cats, upper.score, 0.2, 0.01, line_color=\"black\")\n# outliers\nif not out.empty:\n    p.circle(outx, outy, size=5, color=\"#d7191c\", fill_alpha=0.6)\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = \"white\"\np.grid.grid_line_width = 2\np.xaxis.major_label_text_font_size=\"16px\"\n# output_file(\"boxplot.html\", title=\"boxplot.py example\")\np.plot_height=500\np.plot_width=700\np.title.text = \"Player Height Distribution (by NFL Position)\\n\"\np.title.align = \"left\"\np.title.text_color = \"grey\"\np.title.text_font_size = \"15px\"\n# p.xaxis.axis_label_text_font_size = \"1pt\"\n# p.xaxis.axis_label_text_font = \"times\"\np.yaxis.major_label_text_font_size = \"9pt\"\np.xaxis.major_label_text_font_size = \"9pt\"\n# p.xaxis.major_label_orientation = pi\/3   # standard styling code\nshow(p); \n# Spectral4 = (\"#2b83ba\", \"#abdda4\", \"#fdae61\", \"#d7191c\")","26cfe022":"\n# I have got to figure out a better way of adding in jitter, I think there is a module i can leverage...\n\nfrom bokeh.plotting import figure, output_file, show\n\nfrom bokeh.themes import built_in_themes\n\nfrom bokeh.io import curdoc\n\n# curdoc().theme = 'dark_minimal'\n\npd.set_option('display.max_rows', 2000)\n\nt2 = players.copy()\n\nt2.drop(columns=['birthDate'],inplace=True)\n\na = ['CB', 'SS', 'MLB', 'OLB', 'FS', 'DE', 'LB', 'ILB', 'DB', 'S', 'NT', 'DT']\n\nt2 = t2[t2['position'].isin(a)]\n\n# CB: Cornerback; Try to stop passes, intercept passes, or tackle player who catches the ball; Usually sets up wide in the formation\n\n# DE: Defensive End; Get past OL, tackle QB, or tackle ball carriers; Sets up at either end of the DL\n\n# DT: Defensive Tackle; Get past OL, tackle QB, or tackle ball carriers; Sets up in the middle of the DL\n\n# LB: Linebacker; Tackle ball carrier; Sets up between DL and FS\/SS\n\n# ILB: Inside Linebacker; Tackle ball carrier; Aligns toward inner portion of formation\n\n# MLB: Middle Linebacker; Tackle ball carrier; Aligns in center of formation\n\n# NT: Nose Tackle; Hold off as many OL players as possible; Sets up in the center of the DL\n\n# OLB: Outside Linebacker; Tackle ball carrier; Aligns toward outer portion of formation\n\n# S: Safety;  Stop TEs, RBs, and WRs; Sets up in the back of the formation\n\n# FS: Free Safety; Stop TEs, RBs, and WRs; Tends to play further from the DL than FS, aligned with the offense\u2019s TE\n\n# SS: Strong Safety; Stop TEs, RBs, and WRs; Tends to play closer to the DL than FS\n    \n# t1.height = [s.split('-') for s in t1.height]\n\n# t1.height = [float(value[0])*12 + float(value[1]) for value in t1.height]\n\ndef mod(y):\n    if len(y)>2:\n        (feet, inches) = y.split('-')\n        return int(feet)*12 + int(inches)\n    else:  return int(y) # since string type... (cat)\n    \nt2.replace('\\'','', regex=True, inplace=True) \n   \nt2['height'] = t2.apply(lambda x: mod(x.height), 1)\n\nt2['first'], t2['last'] = t2['displayName'].str.split(' ', 1).str\n\nsource = t2\n\n# alt.Chart(source).transform_calculate(\n#     url = 'https:\/\/www.nfl.com\/players\/' + alt.datum.first +'-' + alt.datum.last\n# ).mark_point().encode(\n#     x='weight:Q',\n#     y='height:Q',\n#     color='position:N',\n#     href='url:N',    \n#     tooltip=['displayName:N', 'url:N']\n# ).properties(\n#     width=600,\n#     height=250\n# )\n\n# brush = alt.selection_interval()  # selection of type \"interval\"\n\n\n# alt.Chart(source).transform_calculate(\n#     url = 'https:\/\/www.nfl.com\/players\/' + alt.datum.first +'-' + alt.datum.last\n# ).mark_point().encode(\n    \n#     alt.X('weight:Q', scale=alt.Scale(domain=(140,380))),\n    \n#     alt.Y('height:Q', scale=alt.Scale(domain=(66,82))),\n    \n#     color='position:N',\n#     href='url:N',    \n#     tooltip=['displayName:N', 'url:N']\n# ).properties(\n#     width=700,\n#     height=450\n# ).add_selection(\n#     brush\n# )\n\n# alt.Chart(cars).mark_point().encode(\n#     alt.X('Acceleration:Q',\n#         scale=alt.Scale(domain=(5, 20))\n#     ),\n#     y='Horsepower:Q'\n# )\n\n\nfrom bokeh.transform import jitter\n\n\n# https:\/\/www.nfl.com\/players\/active\/all?query=tom%20bresee\n#     df['A'], df['B'] = df['AB'].str.split(' ', 1).str\n    \n   # https:\/\/www.nfl.com\/players\/gerald-mccoy\/\n\n# t1[t1.position == \"SS\"]['position'] = \"Safety\"\n\n\n# --- NFL players, don't shoot me for reclassifying you ---\n#  Completely realize there is a difference between ILB and OLB... \n#  i.e. putting ILB and OLB into same category ??? ouch, im sorry\n\nt2.loc[t1['position'] == 'SS', 'position'] = \"Safety\"\nt2.loc[t1['position'] == 'S', 'position'] = \"Safety\"\nt2.loc[t1['position'] == 'FS', 'position'] = \"Safety\"\nt2.loc[t1['position'] == 'DB', 'position'] = \"Safety\"\nt2.loc[t1['position'] == 'CB', 'position'] = \"Cornerback\"\nt2.loc[t1['position'] == 'NT', 'position'] = \"Defensive Tackle\"\nt2.loc[t1['position'] == 'DT', 'position'] = \"Defensive Tackle\"\nt2.loc[t1['position'] == 'LB', 'position'] = \"Linebacker\"\nt2.loc[t1['position'] == 'ILB', 'position'] = \"Linebacker\"\nt2.loc[t1['position'] == 'OLB', 'position'] = \"Linebacker\"\nt2.loc[t1['position'] == 'MLB', 'position'] = \"Linebacker\"\nt2.loc[t1['position'] == 'DE', 'position'] = \"Defensive End\"\n\n# brush = alt.selection_interval()  # selection of type \"interval\"\n\n\n# selection = alt.selection_multi(fields=['Cluster Labels'],bind='legend')\n\nselection = alt.selection_multi(fields=['position'], bind='legend')\n\n\nalt.Chart(source).transform_calculate(\n    url = 'https:\/\/www.nfl.com\/players\/' + alt.datum.first +'-' + alt.datum.last\n).mark_point(filled=True, size=85, opacity=.77).encode(\n    \n    alt.X('weight:Q', \n          title=\"\\nPlayer Weight (lbs)\",\n          scale=alt.Scale(domain=(140,380))),\n    \n    alt.Y('height:Q', \n          title='Player Height (inches)\\n',\n          scale=alt.Scale(domain=(66,82))),\n    \n    # color='position:N',\n    \n    # color=alt.condition(brush, 'position:N', alt.value('lightgray')),\n    \n    color=alt.Color('position:N', legend=alt.Legend(title=\"Position\")),\n    \n    opacity=alt.condition(selection, alt.value(1), alt.value(0.175)),\n    \n    href='url:N',    \n    tooltip=['displayName:N', 'nflId:Q', 'position:N', 'weight:Q', 'height:Q','collegeName:N', 'url:N']    \n    \n    \n).properties(\n    width=670,\n    height=580,\n    title=' Interactive Chart: Defensive Players by Weight and Height\\n').interactive().\\\nconfigure_view(\n    strokeWidth=0\n).\\\nconfigure_legend(\n    symbolSize=80, \n    symbolStrokeWidth=40).\\\nconfigure_title(\n    fontSize=14,\n    # font='Courier',\n    anchor='start',\n    color='gray'\n).configure_legend(\n    strokeColor='grey',\n    fillColor='#EEEEEE',\n    padding=8,\n    cornerRadius=10,\n    orient='top-right'\n).add_selection(\n    selection)\n\n\n\n\n\n#@ .legend.click_policy=\"hide\"\n\n\n# .configure(background='black')\n\n\n# show(p)\n# background_fill_color='lightgray'\n#  p.background_fill_color = \"beige\"\n\n# .background_fill_color = \"black\"\n\n# t1 = players.copy()\n# t1.drop(columns=['nflId', 'birthDate','collegeName'],inplace=True)\n# a = ['CB', 'SS', 'MLB', 'OLB', 'FS', 'DE', 'LB', 'ILB', 'DB', 'S', 'NT', 'DT']\n# t1 = t1[t1['position'].isin(a)]\n\n# # CB: Cornerback; Try to stop passes, intercept passes, or tackle player who catches the ball; Usually sets up wide in the formation\n\n# # DE: Defensive End; Get past OL, tackle QB, or tackle ball carriers; Sets up at either end of the DL\n\n# # DT: Defensive Tackle; Get past OL, tackle QB, or tackle ball carriers; Sets up in the middle of the DL\n\n# # LB: Linebacker; Tackle ball carrier; Sets up between DL and FS\/SS\n\n# # ILB: Inside Linebacker; Tackle ball carrier; Aligns toward inner portion of formation\n\n# # MLB: Middle Linebacker; Tackle ball carrier; Aligns in center of formation\n\n# # NT: Nose Tackle; Hold off as many OL players as possible; Sets up in the center of the DL\n\n# # OLB: Outside Linebacker; Tackle ball carrier; Aligns toward outer portion of formation\n\n# # S: Safety;  Stop TEs, RBs, and WRs; Sets up in the back of the formation\n\n# # FS: Free Safety; Stop TEs, RBs, and WRs; Tends to play further from the DL than FS, aligned with the offense\u2019s TE\n\n# # SS: Strong Safety; Stop TEs, RBs, and WRs; Tends to play closer to the DL than FS\n    \n# # --- height conv ---\n# # t1.height = [s.split('-') for s in t1.height]\n# # t1.height = [float(value[0])*12 + float(value[1]) for value in t1.height]\n# def mod(y):\n#     if len(y)>2:\n#         (feet, inches) = y.split('-')\n#         return int(feet)*12 + int(inches)\n#     else:  return int(y) # since string type... (cat)\n\n# t1['height'] = t1.apply(lambda x: mod(x.height), 1)\n\n# t1['first'], t1['last'] = t1['displayName'].str.split(' ', 1).str\n\n# source = t1\n\n# alt.Chart(source).transform_calculate(\n#     #url='https:\/\/www.google.com\/search?q=' + alt.datum.displayName\n#     url = 'https:\/\/www.nfl.com\/players\/' + alt.datum.first +'-' + alt.datum.last\n# ).mark_point().encode(\n#     x='weight:Q',\n#     y='height:Q',\n#     color='position:N',\n#     href='url:N',    \n#     tooltip=['displayName:N', 'url:N']\n# ).properties(\n#     width=600,\n#     height=250\n# )\n\n# # alt.Chart(cars).mark_point().encode(\n# #     alt.X('Acceleration:Q',\n# #         scale=alt.Scale(domain=(5, 20))\n# #     ),\n# #     y='Horsepower:Q'\n# # )\n\n# # https:\/\/www.nfl.com\/players\/active\/all?query=tom%20bresee\n# #     df['A'], df['B'] = df['AB'].str.split(' ', 1).str\n","5277f7e5":"\n# I have got to figure out a better way of adding in jitter, I think there is a module i can leverage...\n\npd.set_option('display.max_rows', 2000)\n\nt2 = players.copy()\n\nt2.drop(columns=['birthDate'],inplace=True)\n\na = ['WR', 'QB', 'TE', 'RB', 'FB']\n\nt2 = t2[t2['position'].isin(a)]\n    \n# t1.height = [s.split('-') for s in t1.height]\n\n# t1.height = [float(value[0])*12 + float(value[1]) for value in t1.height]\n\ndef mod(y):\n    if len(y)>2:\n        (feet, inches) = y.split('-')\n        return int(feet)*12 + int(inches)\n    else:  return int(y) # since string type... (cat)\n    \nt2.replace('\\'','', regex=True, inplace=True) \n   \nt2['height'] = t2.apply(lambda x: mod(x.height), 1)\n\nt2['first'], t2['last'] = t2['displayName'].str.split(' ', 1).str\n\nsource = t2\n\n# alt.Chart(source).transform_calculate(\n#     url = 'https:\/\/www.nfl.com\/players\/' + alt.datum.first +'-' + alt.datum.last\n# ).mark_point().encode(\n#     x='weight:Q',\n#     y='height:Q',\n#     color='position:N',\n#     href='url:N',    \n#     tooltip=['displayName:N', 'url:N']\n# ).properties(\n#     width=600,\n#     height=250\n# )\n\n# brush = alt.selection_interval()  # selection of type \"interval\"\n\n\n# alt.Chart(source).transform_calculate(\n#     url = 'https:\/\/www.nfl.com\/players\/' + alt.datum.first +'-' + alt.datum.last\n# ).mark_point().encode(\n    \n#     alt.X('weight:Q', scale=alt.Scale(domain=(140,380))),\n    \n#     alt.Y('height:Q', scale=alt.Scale(domain=(66,82))),\n    \n#     color='position:N',\n#     href='url:N',    \n#     tooltip=['displayName:N', 'url:N']\n# ).properties(\n#     width=700,\n#     height=450\n# ).add_selection(\n#     brush\n# )\n\n# alt.Chart(cars).mark_point().encode(\n#     alt.X('Acceleration:Q',\n#         scale=alt.Scale(domain=(5, 20))\n#     ),\n#     y='Horsepower:Q'\n# )\n\n\nfrom bokeh.transform import jitter\n\n\n# https:\/\/www.nfl.com\/players\/active\/all?query=tom%20bresee\n#     df['A'], df['B'] = df['AB'].str.split(' ', 1).str\n    \n   # https:\/\/www.nfl.com\/players\/gerald-mccoy\/\n\n# t1[t1.position == \"SS\"]['position'] = \"Safety\"\n\n\n# --- NFL players, don't shoot me for reclassifying you ---\n#  Completely realize there is a difference between ILB and OLB... \n#  i.e. putting ILB and OLB into same category ??? ouch, im sorry\n\n\nt2.loc[t1['position'] == 'WR', 'position'] = \"Wide receiver\"\nt2.loc[t1['position'] == 'QB', 'position'] = \"Quarterback\"\nt2.loc[t1['position'] == 'TE', 'position'] = \"Tight end\"\nt2.loc[t1['position'] == 'RB', 'position'] = \"Running back\"\nt2.loc[t1['position'] == 'FB', 'position'] = \"Full back\"\nt2.loc[t1['position'] == 'HB', 'position'] = \"Running back\"\n\n# brush = alt.selection_interval()  # selection of type \"interval\"\n\n# selection = alt.selection_multi(fields=['Cluster Labels'],bind='legend')\n\nselection = alt.selection_multi(fields=['position'], bind='legend')\n\nalt.Chart(source).transform_calculate(\n    url = 'https:\/\/www.nfl.com\/players\/' + alt.datum.first +'-' + alt.datum.last\n).mark_point(filled=True, size=85, opacity=.77).encode(\n    \n    alt.X('weight:Q', \n          title=\"\\nPlayer Weight (lbs)\",\n          scale=alt.Scale(domain=(140,380))),\n    \n    alt.Y('height:Q', \n          title='Player Height (inches)\\n',\n          scale=alt.Scale(domain=(66,82))),\n    \n    # color='position:N',\n    \n    # color=alt.condition(brush, 'position:N', alt.value('lightgray')),\n    \n    color=alt.Color('position:N', legend=alt.Legend(title=\"Position\")),\n    \n    opacity=alt.condition(selection, alt.value(1), alt.value(0.175)),\n    \n    href='url:N',    \n    tooltip=['displayName:N', 'nflId:Q', 'position:N', 'weight:Q', 'height:Q','collegeName:N', 'url:N']    \n    \n    \n).properties(\n    width=670,\n    height=580,\n    title=' Interactive Chart: Offensive Players by Weight and Height\\n').interactive().\\\nconfigure_view(\n    strokeWidth=0\n).\\\nconfigure_legend(\n    symbolSize=80, \n    symbolStrokeWidth=40).\\\nconfigure_title(\n    fontSize=14,\n    # font='Courier',\n    anchor='start',\n    color='gray'\n).configure_legend(\n    strokeColor='grey',\n    fillColor='#EEEEEE',\n    padding=8,\n    cornerRadius=10,\n    orient='top-right'\n).add_selection(\n    selection)\n\n","119e82de":"sns.jointplot(data=t2,\n             x=\"weight\",\n             y='height',\n             kind='hex',\n             color=\"#4CB391\"); ","34bae3c0":"import datetime as dt\nnow = pd.Timestamp('now')\n# df['dob'] = pd.to_datetime(df['dob'], format='%m%d%y')    # 1\nexp = players.copy()\nexp.birthDate = pd.to_datetime(exp.birthDate)\nexp['age'] = (now - exp['birthDate']).astype('<m8[Y]') \nexp['age'] = exp['age']-2\nexp['e'] = exp['age']-20\n\n# plt.style.use(\"seaborn-ticks\")\nsns.set_style(\"whitegrid\")\n\n# seaborn.set(rc={'axes.facecolor':'cornflowerblue', 'figure.facecolor':'cornflowerblue'})\n\n# sns.distplot( df[\"sepal_length\"] , color=\"skyblue\", label=\"Sepal Length\")\n# sns.distplot( df[\"sepal_width\"] , color=\"red\", label=\"Sepal Width\")\n \n# #sns.plt.show()\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# sns.set_style(\"white\", {'grid.linestyle': '--'})\n# sns.set_style(\"ticks\", {'grid.linestyle': '--'})\n##sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n##sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#   speed = bbb.groupby(['DisplayName'])['S'].agg('max').sort_values(ascending=True)\n#   speed = pd.DataFrame(speed)\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfig, ax = plt.subplots(figsize=(8.5,5.5))\n\n# sns.distplot(t1.weight, kde=True, color=\"green\", kde_kws={\"bw_adjust\":0.25},)\n#              # hist_kws={\"linewidth\": .9, 'edgecolor':'black'} , bins=35)\n    \nsns.distplot(exp.age, \n             kde=False, \n             # ORIGINA:  color=\"#ffffbf\", \n             color = \"purple\",\n             kde_kws={'bw':1, \"linewidth\":.5, 'color':\"purple\"},  #  #ffffbf\"},\n             bins=21,\n             hist_kws={\"linewidth\": .5, 'edgecolor':'purple', 'alpha':.55, \"rwidth\":0.75})\n    \n    \nsns.despine(top=True, right=True, left=True, bottom=True)\n\nax.xaxis.set_major_locator(plt.MultipleLocator(1))\n\nax.set_yticklabels([])\n\nplt.title('\\nNFL Player Age Distribution\\n', fontsize=12, loc=\"left\", color='grey')\n\nax.set(xlabel=\"\\nAge (how old the NFL player was in the 2018 season) \\n\")\n\n#  sns.plt.legend()\n\n# plt.axvline(x=72, color='black', linestyle=\"--\", linewidth=.6)\n\n# plt.text(71.2, .15, r'6-foot mark', {'color': 'black', 'fontsize': 10})\n\n# plt.text(71.75, -.0132, r\"6'0\", {'color': 'maroon', 'fontsize': 9})\n\n# plt.text(75.79, -.0132, r\"6'4\", {'color': 'maroon', 'fontsize': 9})\n\n# plt.text(79.75, -.0132, r\"6'8\", {'color': 'maroon', 'fontsize': 9})\n\nplt.grid(linestyle='--', alpha=0.3)\n\nplt.tight_layout()\n\n\nplt.show();\n\n\n\n# # plot\n# f, axes = plt.subplots(2, 2, figsize=(7, 7), sharex=True)\n# sns.distplot( df[\"sepal_length\"] , color=\"skyblue\", ax=axes[0, 0])\n# sns.distplot( df[\"sepal_width\"] , color=\"olive\", ax=axes[0, 1])\n# sns.distplot( df[\"petal_length\"] , color=\"gold\", ax=axes[1, 0])\n# sns.distplot( df[\"petal_width\"] , color=\"teal\", ax=axes[1, 1])\n\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# sns.set_style(\"white\", {'grid.linestyle': '--'})\n# # sns.set_style(\"ticks\", {'grid.linestyle': '--'})\n# ##sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n# ##sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# #   speed = bbb.groupby(['DisplayName'])['S'].agg('max').sort_values(ascending=True)\n# #   speed = pd.DataFrame(speed)\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# fig, ax = plt.subplots(figsize=(9,7))\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# sns.distplot(t1.weight, kde=True, color=\"green\",\n#  hist_kws={\"linewidth\": .9, 'edgecolor':'black'} , bins=25)\n# sns.despine(top=True, right=True, left=True, bottom=True)\n# ax.xaxis.set_major_locator(plt.MultipleLocator(10))\n# ax.set_yticklabels([])\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# plt.title('\\nDistribution of running speed for all players in the 2017\/2018 seasons (yds\/s)\\n',\n#            fontsize=11, loc=\"left\")\n# ax.set(xlabel=\"\\nWeight (lbs)\\n\")\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# plt.tight_layout()\n# plt.show();\n# #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n# ##sns.palplot(sns.color_palette(\"RdBu_r\", 7))\n\n# tf = df.query(\"NflIdRusher == NflId\")\n\n# sns.set_style(\"white\", {'grid.linestyle': '--'})\n\n# fig, ax = plt.subplots(figsize=(11,8))\n# ax.set_xlim(-10,26)\n\n# ###ccc['colors'] = ['red' if x <= 0 else 'green' for x in ccc['Yards']]\n# ###specialcolors = ['red' if x <= 0 else 'green' for x in tf.Yards]\n# c = [ 'r' if i < 0 else 'b' for i in tf.Yards]\n\n\n# sns.distplot(tf.Yards, kde=False, color='b', bins=100, \n#             hist_kws={\"linewidth\": .9, 'edgecolor':'black'})\n\n# #########################ax.set_xlim(80,100)\n\n# ## Remove the x-tick labels:  plt.xticks([])\n# plt.yticks([])\n# ## This method also hides the tick marks\n\n# plt.title('\\nCombined Data: Overall distribution of yards gained during an individual running play\\n',fontsize=12)\n# plt.xlabel('\\nYards (yd) Gained $\\Rightarrow$\\n', fontsize=9)\n# sns.despine(top=True, right=True, left=True, bottom=True)\n# ax.xaxis.set_major_locator(plt.MultipleLocator(1))\n# plt.axvline(x=0, color='blue', linestyle=\"--\", linewidth=.5)\n# plt.text(-4.55, 2914, r'Line of Scrimmage >', {'color': 'blue', 'fontsize': 9})\n# plt.tight_layout()\n# plt.show();\n","a746d95b":"\nposit = players.copy()\n\n# quick: \nposit = posit.groupby('position')['nflId'].count().reset_index(name = 'counts')\nposit = posit.sort_values(by  = 'counts', ascending = True)\n# fig = px.bar(df, x='position', y='counts', color = 'position')\n# posit.drop(columns=['position'], inplace=True)\n\n\nmysource = ColumnDataSource(posit)\n\n\np = figure(\n  y_range=posit.position, \n    # original was '50',  I need to enter the SAME thing here as y points, i find that odd \n    # wait:  can i set this as the range, but not below ? ? ? \n    # i think caegorical just list in a list the categories here \n  # title = '\\nNFL Player Count by College Attended\\n',  < - temporarily remove ! \n  x_axis_label ='# of NFL players that play the position',\n  plot_width=600,\n  plot_height=600,\n  tools=\"hover\",       # or tools=\"\" \n  toolbar_location=None,   \n  #background_fill_color=\"#efe8e2\")\n  #min_border=0))\n)\n\n# p.text(x=[1], y = [0], text=['hello\\nworld!'], angle = 0)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~TEMP KILL~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    \n# p.hbar(\n#     y='CollegeName',  # center of your y coordinate launcher, 40 points as def above ... \n#     left=0, # or left=20, etc\n#     right='Count',    # right is 40 points... \n#     height=0.8,\n#     alpha=.6,\n#     #color='orange',    #color=Spectral3  #color=Blues8,   \n#     #background_fill_color=\"#efe8e2\", \n#     #     fill_color=Blues8,\n#     #     fill_alpha=0.4, \n#     source = mysource,\n#     fill_alpha=0.9,\n#     line_color='blue'   # line_coolor='red'\n# ) \n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#     nflId      height    weight    birthDate      collegeName      position      displayName\n\n#   output_file(\"horizontal_bar.html\", mode=\"inline\")\n\n\n#############################################################################################\n\n\np.hbar(y='position',     # center of your y coordinate launcher, 40 points as def above ... \n    left=0,                 # or left=20, etc\n    right='counts',          # right is 40 points... \n    height=.6,\n    alpha=.7,\n    color=\"#8a2be2\", \n    # color=Spectral3  #color=Blues8,   \n    # background_fill_color=\"#efe8e2\", \n    # fill_color=Blues8,\n    #     fill_alpha=0.4, \n    \n    #fill_color=factor_cmap('collegeName', palette=Blues8, factors=df_cc.collegeName[:50].tolist()),\n    \n        # do i need to set grey(50) to grey(my_count) ? \n        # Cividis,\n        # Spectral6 # old = grey(50),  #inferno(50),  #cividis(50),  #d3['Category20b'][4],  #Category20b(2),  #[2],   \n        #Category20b,   #Viridis256,    #GnBu[8], #,#Spectral6,  #viridis(50),  #[3], #Spectral6,  #|Blues[2],\n\n    source = mysource,\n    fill_alpha=0.5,\n    #line_color='red'  \n) \n\n\np.add_layout(Title(text=\"Wide Receivers and Cornerbacks are critical positions for an NFL team\", text_font_style=\"italic\"), 'above')\n\np.add_layout(Title(text=\"Interactive Chart: NFL Player Count by Position \", text_font_size=\"11pt\"), 'above')\n\np.title.text_font_size = '11pt'\n\n# p.yaxis[0].ticker = FixedTicker(ticks=np.arange(1, len(labels) + 1, 1).tolist())\n# p.yaxis.major_label_text_font_size = '0pt'\np.yaxis.major_tick_line_color = None\np.axis.minor_tick_line_color = None  # turn off y-axis minor ticks\n# p.xaxis.major_label_text_font_size = '0pt'  # preferred method for removing tick labels\n# p.yaxis.major_label_text_font_size = '0pt'  # preferred method for removing tick labels\np.yaxis.major_tick_line_color = None  # turn off y-axis major ticks\np.yaxis.minor_tick_line_color = None  # turn off y-axis minor ticks\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# GRID:\n# p.xgrid.grid_line_color = None\np.ygrid.grid_line_color = None   \n\nhover = HoverTool()\n\nhover.tooltips = [\n    (\"POSITION \", \"@position\"),\n    (\"Num of Players \", \"@counts\")]\n\np.add_tools(hover)\n\noutput_notebook(hide_banner=True)\n\nshow(p); \n\n","5c581d53":"\n# LIVE AND WORKS ! \n# temp_poss = plays[plays.playType=='play_type_pass']\n\n# poss_series = temp_poss[\"possessionTeam\"].value_counts()\n\n# poss_indices = poss_series.index\n# poss = pd.DataFrame(poss_series, index=poss_indices)\n# poss = poss.reset_index()\n# poss.columns= ['ind','total_poss']\n# #  poss\n\n# # alt.Chart(df).mark_circle().encode(\n# #     x=alt.X('x', axis=alt.Axis(format='%', title='percentage')),\n# #     y=alt.Y('y', axis=alt.Axis(format='$', title='dollar amount'))\n# # )\n\n# source = poss\n\n# alt.renderers.set_embed_options(theme='dark')\n\n# bars = alt.Chart(source).mark_bar(color='#0071BC',size=5,opacity=.99).encode(\n    \n#     x=alt.X('total_poss:Q', title='\\nTOTAL  PASS  ATTEMPTS', axis=alt.Axis(grid=False)),\n    \n#     y=alt.Y('ind:O', \n#             sort=\"-x\", \n#             title='NFL Team',\n#             axis=alt.Axis(grid=False, ticks=False)))\n\n# text = bars.mark_text(align='left', baseline='middle',dx=3, color=\"#eda02a\").encode(text='total_poss:Q')\n       \n# (bars + text).properties(height=700, width=500,title='Pass Attempts by NFL Team').configure_title(\n#     fontSize=15,\n#     font='Arial',\n#     anchor='start',\n#     color='gray').configure_axisLeft(labelColor='grey', titleColor='grey', labelFontSize=11).configure_axisBottom(labelColor='grey', titleColor='#0071BC').configure_view(strokeOpacity=0).configure_axis(\n#     labelFontSize=11,\n#     titleFontSize=13\n# ).configure_axis(grid=False, domain=False)\n\n\n# # alt.Chart(data).mark_bar().encode(\n# #     x=alt.X('x', bin=True, axis=alt.Axis(labelAngle=45)),\n# #     y=alt.Y('count()', axis=alt.Axis(labels=False, ticks=False, title=None))\n    \n# #  y.yaxis.major_tick_line_color = None\n","1a4fe852":"pd.options.display.max_rows = 20\nnumber_plays_2018_perteam = plays.groupby(['gameId', 'possessionTeam'], as_index=False).agg({'playId': 'nunique'})\nnumber_plays_2018_perteam = number_plays_2018_perteam[number_plays_2018_perteam.gameId != 2018123005]\nme = number_plays_2018_perteam.sort_values(by='playId', ascending=False)\nme.index = me.possessionTeam\nme.index.name = 'team'\nme.columns = ['gameID','t','passes_thrown_in_a_game']\nme.drop(['t'], axis=1, inplace=True)\ndisplay(me)\n# me = number_plays_2018_perteam.sort_values(by='playId', ascending=False)\n# me.index = me.possessionTeam\n# me.index.name = 'team'\n# me.columns = ['gameID','t','passes_thrown_in_a_game']\n# cm = sns.light_palette(\"green\", as_cmap=True)\n# #me[:10].style.set_caption('Highest pass count in a game').background_gradient(cmap=cm)\n# me.drop(['t'], axis=1, inplace=True)\n# me[:-10]","2a873bd5":"temp101 = pd.DataFrame(plays.personnelO.value_counts())\ntemp101.index.name = 'OffensiveFormation'\ntemp101.columns=['Play Count']\ncm = sns.light_palette(\"blue\", as_cmap=True)\n#s = df.style.background_gradient(cmap=cm)\n# temp101[:10].style.set_caption('Top Play Counts by Offense Personnel').background_gradient(cmap=cm)\ntemp101[:15].style.set_caption('Top Play Counts by Offense Personnel').background_gradient(cmap=cm)","7f104dc3":"temp101 = pd.DataFrame(plays.personnelD.value_counts())\ntemp101.index.name = 'DefensiveFormation'\ntemp101.columns=['Play Count']\ncm = sns.light_palette(\"green\", as_cmap=True)\n#s = df.style.background_gradient(cmap=cm)\n# temp101[:10].style.set_caption('Top Play Counts by Defense Personnel').background_gradient(cmap=cm).style.bar( color='#ff6b6b')\n\ntemp101[:15].style.set_caption('Top Play Counts by Defense Personnel').background_gradient(cmap=cm)","cd09f044":"\nimport pandas as pd\npd.set_option('display.max_rows', None)\ndff = plays.copy()\n\nsns.set_style(\"ticks\", {'grid.linestyle': '--'})\n\n\nflierprops = dict(markerfacecolor='0.2', \n                  markersize=1,\n                  linestyle='none')\n\nfig, ax = plt.subplots(figsize=(12,15))\n\nax.set_ylim(-7, 22)\n\nax.set_title('\\nAverage yards gained vs Defensive Personnel Schema\\n', fontsize=12, loc='left')\n\n# sns.boxplot(y='DefensePersonnel',\n#             x='Yards',\n#             data=dff,\n#             ax=ax,\n#             showfliers=False , \n#             #color='blue'\n#             )\n\nsns.boxplot(y=dff['personnelD'].sort_values(ascending=False),\n            x=dff['offensePlayResult'],\n            ax=ax,\n            showfliers=False ,\n            linewidth=.8\n            #color='blue'\n            )\n\n#flierprops=flierprops)\n#Completely hide tick markers...\n# ax.yaxis.set_major_locator(plt.NullLocator())\n# ax.xaxis.set_major_formatter(plt.NullFormatter())\n\nax.yaxis.grid(False)   # Show the horizontal gridlines\nax.xaxis.grid(True)  # Hide x-axis gridlines \n\nax.xaxis.set_major_locator(plt.MultipleLocator(5))\n#ax.yaxis.set_minor_locator(plt.MultipleLocator(5))\n\n# Add transparency to colors\nfor patch in ax.artists:\n  r, g, b, a = patch.get_facecolor()\n  patch.set_facecolor((r, g, b, .3))\n    \n# ax.set(xlabel=''common xlabel', ylabel='common ylabel', title='some title')\nax.set(xlabel=\"\\nOffensive Yards Gained\\n\")\n\n# plt.title('My subtitle',fontsize=16)\n# plt.suptitle('My title',fontsize=24, x=0, y=1,ha=\"left\")\n# plt.text(x=4.7, y=4.7, s='Sepal Length vs Width', fontsize=16, weight='bold')\n# plt.text(x=4.7, y=4.6, s='The size of each point corresponds to sepal width', fontsize=8, alpha=0.75)\n\n# ax.spines['top'].set_linewidth(0)  \n# ax.spines['left'].set_linewidth(.3)  \n# ax.spines['right'].set_linewidth(0)  \n# ax.spines['bottom'].set_linewidth(.3) \n\nsns.despine(top=True, right=True, left=True, bottom=True)\n\nax.xaxis.set_ticks_position('none') \n\n# ax.fill_between(t, upper_bound, X, facecolor='blue', alpha=0.5)\n# plt.axhspan(9,10)  #horizontal shading\n# plt.axvspan(9,10)  #horizontal shading\n\n#ax.text(15,78, \"#1\", ha='center')\n\n# ax.text(19,16.3, '#1',\n#         verticalalignment='bottom', horizontalalignment='right',\n#         color='green', fontsize=11)\n\n# ax.text(15,16.3, '#2',\n#         verticalalignment='bottom', horizontalalignment='right',\n#         color='green', fontsize=11)\n\n# ax.text(15,21.3, '#3',\n#         verticalalignment='bottom', horizontalalignment='right',\n#         color='green', fontsize=11)\n\n# ax.text(15,24.3, '#5',\n#         verticalalignment='bottom', horizontalalignment='right',\n#         color='green', fontsize=11)\n\n# ax.text(15,27.3, '#4',\n#         verticalalignment='bottom', horizontalalignment='right',\n#         color='green', fontsize=11)\n\n# ax.text(9,2, '6 guys on the line',\n#         verticalalignment='bottom', horizontalalignment='right',\n#         color='green', fontsize=11)\n\n\nax.text(0,.2, 'line of scrimmage >',\n        verticalalignment='bottom', horizontalalignment='right',\n        color='blue', fontsize=9)\n\nax.set_ylabel('')\n\n\n#-----more control-----#\nax.grid(linestyle='--', \n        linewidth='0.3', \n        color='lightgray', \n        alpha=0.8,\n        axis='x'\n       )\n\nplt.xlim(-18, 70)\n\nplt.axvline(0, 0,1, linewidth=.4, color=\"blue\", linestyle=\"--\")\n\nplt.tight_layout()\nplt.show();\n\n\n","7a466e90":"\ntf = plays.copy()\ndff = tf[tf.defendersInTheBox>2]\ndff.defendersInTheBox = dff.defendersInTheBox.astype('int')\n\nflierprops = dict(markerfacecolor='0.75', \n                  markersize=.1,\n                  linestyle='none')\n\nfig, ax = plt.subplots(figsize=(11,7))\nax.set_ylim(-17, 31)\nax.set_title('Yards Gained vs number of Defenders in the box\\n', fontsize=12, loc='left')\nsns.boxplot(x='defendersInTheBox',\n            y='playResult',\n            data=dff,\n            ax=ax,\n            showfliers=False,\n            width=.8,\n            #color='blue'\n            )\n            #flierprops=flierprops)\n#Completely hide tick markers...\n# ax.yaxis.set_major_locator(plt.NullLocator())\n# ax.xaxis.set_major_formatter(plt.NullFormatter())\n\nax.yaxis.grid(True)   # Show the horizontal gridlines\nax.xaxis.grid(False)  # Hide x-axis gridlines \n\nax.yaxis.set_major_locator(plt.MultipleLocator(1))\nax.yaxis.set_minor_locator(plt.MultipleLocator(5))\n\n# Add transparency to colors\nfor patch in ax.artists:\n  r, g, b, a = patch.get_facecolor()\n  patch.set_facecolor((r, g, b, .3))\n    \n# ax.set(xlabel=''common xlabel', ylabel='common ylabel', title='some title')\nax.set(xlabel=\"\\nNumber of defensive players in the 'Box'\\n\\n\")\nax.set(ylabel=\"\\nYards gained on the play =>\")\n\n# ax.set_xticklabels(['1Q', '2Q', '3Q', '4Q', '5Q'])\n\n# plt.title('My subtitle',fontsize=16)\n# plt.suptitle('My title',fontsize=24, x=0, y=1,ha=\"left\")\n# plt.text(x=4.7, y=4.7, s='Sepal Length vs Width', fontsize=16, weight='bold')\n# plt.text(x=4.7, y=4.6, s='The size of each point corresponds to sepal width', fontsize=8, alpha=0.75)\n\nplt.tight_layout()\nplt.show();\n\n","01330340":"temp101 = pd.DataFrame(dff.defendersInTheBox.value_counts())\ntemp101.index.name = 'Defenders in Box'\ntemp101.columns=['Play Count']\ncm = sns.light_palette(\"red\", as_cmap=True)\n# s = df.style.background_gradient(cmap=cm)\ntemp101[:10].style.set_caption('Defenders in the Box by Play Count').background_gradient(cmap=cm)","cee5d3f0":"\ntf = plays.copy()\ndff = tf[tf.defendersInTheBox>2]\ndff.defendersInTheBox = dff.defendersInTheBox.astype('int')\n\ndff = dff[dff.defendersInTheBox.isin([4,5,6,7,8])]\n          \n          \n# flierprops = dict(markerfacecolor='0.75', \n#                   markersize=.1,\n#                   linestyle='none')\n\nflierprops = dict(marker='o', markerfacecolor='grey', markersize=4,\n                  linestyle='none', markeredgecolor='white')\n\n\nfig, ax = plt.subplots(figsize=(7,9))\nax.set_ylim(-17, 40)\nax.set_title('Yards Gained vs number of Defenders in the box\\n', fontsize=12, loc='left')\nsns.boxplot(x='defendersInTheBox',\n            y='playResult',\n            data=dff,\n            ax=ax,\n            showfliers=True,\n            width=.8,\n            #color='blue',\n            flierprops=flierprops)\n#Completely hide tick markers...\n# ax.yaxis.set_major_locator(plt.NullLocator())\n# ax.xaxis.set_major_formatter(plt.NullFormatter())\n\nax.yaxis.grid(True)   # Show the horizontal gridlines\nax.xaxis.grid(False)  # Hide x-axis gridlines \n\nax.yaxis.set_major_locator(plt.MultipleLocator(1))\nax.yaxis.set_minor_locator(plt.MultipleLocator(5))\n\n# Add transparency to colors\nfor patch in ax.artists:\n  r, g, b, a = patch.get_facecolor()\n  patch.set_facecolor((r, g, b, .3))\n    \n# ax.set(xlabel=''common xlabel', ylabel='common ylabel', title='some title')\nax.set(xlabel=\"\\nNumber of defensive players in the 'Box'\\n\\n\")\nax.set(ylabel=\"\\nYards gained on the play =>\")\n\n# ax.set_xticklabels(['1Q', '2Q', '3Q', '4Q', '5Q'])\n\n# plt.title('My subtitle',fontsize=16)\n# plt.suptitle('My title',fontsize=24, x=0, y=1,ha=\"left\")\n# plt.text(x=4.7, y=4.7, s='Sepal Length vs Width', fontsize=16, weight='bold')\n# plt.text(x=4.7, y=4.6, s='The size of each point corresponds to sepal width', fontsize=8, alpha=0.75)\n\nplt.tight_layout()\nplt.show();\n\n","ff189384":"from bokeh.io import output_file, show\nfrom bokeh.layouts import column\n\nfrom bokeh.io import output_file, show\nfrom bokeh.plotting import figure\nfrom bokeh.io import output_file, show\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.palettes import Spectral6\nfrom bokeh.plotting import figure\nfrom bokeh.transform import factor_cmap\n\nSpectral6colors = [\"#99d594\", \"#fee08b\", \"#fc8d59\", \"#d53e4f\"]\n# find the actual direct github colors and use only the ones you care about... \n\npo = plays.copy()\npo = po.passResult.value_counts().reset_index()\n\noutcomes = ['COMPLETE','INCOMPLETE','QB SACKED','INTERCEPTION']\n\ncounts = list(po.passResult\/19233)[:4]\n\nsource = ColumnDataSource(data=dict(outcomes=outcomes, counts=counts, color=Spectral6colors))\n\np = figure(x_range=outcomes, plot_height=450, plot_width=360,toolbar_location=None, title=\"Play Outcome in Percentages (%)\")\n\np.vbar(x='outcomes', top='counts', color = 'color', width=0.4, source=source,\n       line_color='white')\n        #, # fill_color=factor_cmap('outcomes', palette=Spectral6, factors=outcomes)\n       #f#ill_color=Spectral6colors)\n\np.xgrid.grid_line_color = None\np.y_range.start = 0\np.y_range.end = .62\n\nfrom bokeh.models import NumeralTickFormatter\np.yaxis.formatter = NumeralTickFormatter(format='0 %')\n\ncounts = list(po.passResult)[:4]\nsource = ColumnDataSource(data=dict(outcomes=outcomes, counts=counts, color=Spectral6colors))\np2 = figure(x_range=outcomes, plot_height=450, plot_width=360,toolbar_location=None, title=\"Play Outcome in Raw Counts\")\n\np2.vbar(x='outcomes', top='counts', width=0.4, source=source,\n       line_color='white', color='color') # fill_color=factor_cmap('outcomes', palette=Spectral6, factors=outcomes))\np2.xgrid.grid_line_color = None\np2.y_range.start = 0\np2.y_range.end = 12100\n\nshow(column(p,p2)); \n\n# # put all the plots in a VBox\n# p = vplot(p,p2)\n\n# # show the results\n# show(p); \n\n# DATA CALC:\n\n# plays.isDefensivePI.value_counts()\n# False    18980\n# True       259\n# Name: isDefensivePI, dtype: int64\n\n# len(plays)\n# 19239\n\n# 259\/19239\n# 0.013462238162066636","f62fefd9":"plt.style.use('dark_background')\n# ccc = plays[ (plays.gameId==2018091605) & (plays.possessionTeam=='PIT') ]\nccc = plays[plays.possessionTeam=='TB']\nccc['colors'] = ['red' if x <= 0 else '#C0C0C0' for x in ccc['offensePlayResult']]\nccc.reset_index(inplace=True)\nplt.figure(figsize=(8,20))\nplt.hlines(y=ccc.index, xmin=0, xmax=ccc.offensePlayResult, color=ccc.colors, alpha=0.8, linewidth=1.7)\nplt.gca().set(ylabel='$Play Number $', xlabel='\\n$Passing Yards$')\nplt.yticks(fontsize=8)\nplt.title('\\nPass Yard Outcome for all Tampa Bay NFL passes (Entire Season)', fontdict={'size':10})\nplt.grid(linestyle='--', alpha=0.2)\nsns.despine(top=True, right=True, left=True, bottom=True)\nplt.gca().invert_yaxis()\nplt.tight_layout()\nplt.show();\n","1a6882e7":"plt.style.use('dark_background')\n# ccc = plays[ (plays.gameId==2018091605) & (plays.possessionTeam=='PIT') ]\nccc = plays[plays.possessionTeam=='PIT']\nccc['colors'] = ['red' if x <= 0 else 'yellow' for x in ccc['offensePlayResult']]\nccc.reset_index(inplace=True)\nplt.figure(figsize=(8,20))\nplt.hlines(y=ccc.index, xmin=0, xmax=ccc.offensePlayResult, color=ccc.colors, alpha=.7, linewidth=1.7)\nplt.gca().set(ylabel='$Play Number $', xlabel='\\n$Passing Yards$')\nplt.yticks(fontsize=8)\nplt.title('\\nPass Yard Outcome for all Pittsburg Steerlers NFL passes (Entire Season)', fontdict={'size':10})\nplt.grid(linestyle='--', alpha=0.2)\nsns.despine(top=True, right=True, left=True, bottom=True)\nplt.gca().invert_yaxis()\nplt.tight_layout()\nplt.show();","2a99d134":"#-----------------------------------------------------------------------------------------------------------------\nminigun = plays.copy()\nminigun = minigun[['playId','playDescription']]\n# remove the play cloud designator, it won't help us... \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\(.*:\\d+\\)', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'[()]', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'Pass', value = 'pass', regex = True) \n\nminigun.playDescription = minigun.playDescription.replace(to_replace =r'No Huddle', value = 'SURPRISE', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'Shotgun', value = 'SHOTGUN', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'sacked', value = 'SACKED', regex = True) \n\nminigun.playDescription = minigun.playDescription.replace(to_replace =r'short', value = 'SHORT', regex = True) \n\nminigun.playDescription = minigun.playDescription.replace(to_replace =r'Caught', value = 'CAUGHT', regex = True) \n\n\n\nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\b(was)\\b', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\b(for)\\b', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\b(at)\\b', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\b(the)\\b', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\b(and)\\b', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\b(on)\\b', value = '', regex = True) \n\nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\b(by)\\b', value = '', regex = True) \n\nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\b(No)\\b', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\b(no)\\b', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\b(ran)\\b', value = '', regex = True) \n\n\nminigun.playDescription = minigun.playDescription.replace(to_replace =r'-', value = '', regex = True) \n\nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\[', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\]', value= '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r';', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\d+', value = '', regex = True) \n\n\nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\.$', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r',', value = '', regex = True) \nminigun.playDescription = minigun.playDescription.replace(to_replace =r'\\.', value = '_', regex = True)\nminigun['playDescription'] = minigun['playDescription'].str.strip()\n# print(minigun.playDescription[:1].T.values)\n# print(minigun.playDescription[:8].T.values)\n#-----------------------------------------------------------------------------------------------------------------\n# len(plays.playDescription)  # 19239\n#-----------------------------------------------------------------------------------------------------------------\nimport nltk\n#nltk.download('stopwords')\n#nltk.download('punkt')\nfrom nltk.corpus import stopwords\nfrom nltk.util import ngrams\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.collocations import *\nfrom nltk import FreqDist\n#nltk.download('webtext')\nfrom nltk import word_tokenize\n# FreqDist(sum(minigun.playDescription.map(word_tokenize), []))\nminigun['temp'] = minigun['playDescription'].apply(word_tokenize)\n# [M_Ryan, pass, short, right, to, J_Jones, push... < - looks right ! \nz = np.concatenate(minigun.temp)\nfdist = FreqDist(z)\n\n# from collections import defaultdict\n# import pandas as pd\n\n# def cond_freq_dist(data):\n#     \"\"\" Takes a list of tuples and returns a conditional frequency \n#     distribution as a pandas dataframe. \"\"\"\n\n#     cdf = defaultdict(defaultdict(int))\n#     for cond, freq in data:\n#         cfd[cond][freq] += 1\n#     return pd.DataFrame(cfd).fillna(0)\n\n# dict(fdist)\nz2 = pd.DataFrame.from_dict(dict(fdist), orient='index')\nz2.columns=['Frequency']\nz2 = z2.sort_values(by=['Frequency'], ascending=False)\n\ncm = sns.light_palette(\"green\", as_cmap=True)\nz2[:65].style.set_caption('Most Frequeny Words in PlayDescriptions').background_gradient(cmap=cm)\n\n","2c0b2669":"df=pd.read_csv('https:\/\/raw.githubusercontent.com\/larsjaakko\/nextgenstats-spider\/master\/data\/fastest-ball-carriers\/ngs_fastest-ball-carriers_2018_reg.csv')\ndf = df.sort_values(by='speedMPH', ascending=False)[:40]\ncols = ['playerName','speedMPH','team','position','playType']\ndf = df[df[\"position\"].isin(['WR','FS','TE', 'S','CB'])]\ndf = df[cols]\ndisplay(HTML(df.to_html(index=False)))","267864e7":"supersixone[1003:1004].T","d3d9413c":"xg_stats = supersixone.groupby('nflId',as_index=False).agg(max_speed = ('s',np.max),max_acc = ('a',np.max))\nxg_stats = pd.merge(players, xg_stats, on='nflId')\nxg_stats = xg_stats.drop(['height', 'birthDate', 'collegeName'], axis=1)\nxg_stats = xg_stats.sort_values(by=['max_speed'], ascending=False)\nxg_stats['mph'] = xg_stats['max_speed'] * 2.04545\ncolumn_names = [\"displayName\", 'mph', \"max_speed\", \"max_acc\", \"position\", \"weight\", \"nflId\"]\nxg_stats = xg_stats.reindex(columns=column_names)\nxg_stats[:10]\n## seeing some really odd results with these values ","62c2ad0d":"\n# DO NOT REMOVE # DO NOT REMOVE # DO NOT REMOVE\n\n# <div class=\"h4\"><i>2.3 &ensp; Player Weight Distribution (by Position)<\/i><\/div> \n\n# import seaborn as sns\n\n# sns.plotting_context('paper', font_scale = 1.3)\n\n# sns.set_style(\"whitegrid\")\n\n# wts = players[['weight','position']]\n\n# wts.position = pd.Categorical(wts.position)\n\n# wts['pos'] = wts.position.cat.codes\n\n# # ordered_days = tips.day.value_counts().index\n\n# g = sns.FacetGrid(wts, \n#                   # row=\"pos\",\n#                   col='pos',\n#                   hue='pos',\n#                   # row_order=ordered_days,\n#                   height=1.5, \n#                   aspect=.8, \n#                   despine=True,\n#                   margin_titles=False, \n#                   palette = 'GnBu_d',\n#                  col_wrap=7)\n\n# # g.fig.set_figwidth(6.27)\n\n# # g.fig.set_figheight(12.7)\n\n# # g.set_axis_labels(\"\", \"\")\n\n# g.fig.subplots_adjust(wspace=.00, hspace=.00)\n\n# g.set(xlim=(150, 400), ylim=(0,0.09), yticks=[])\n\n# g.fig.set_figwidth(10)\n\n# g.fig.set_figheight(20)\n\n# g.fig.tight_layout(w_pad=1); \n\n# g.map(sns.kdeplot, \"weight\"); \n\n# stop \n\n# # wts = players[['weight','position']]\n\n# # wts.position = pd.Categorical(wts.position)\n\n# # wts['code'] = wts.position.cat.codes\n\n# # print(wts)\n# # g = sns.FacetGrid(wts, #the dataframe to pull from\n# #                   row=\"weight\", #define the column for each subplot row to be differentiated by\n# #                   hue=\"code\", #define the column for each subplot color to be differentiated by\n# #                   aspect=10, #aspect * height = width\n# #                   height=1.5, #height of each subplot\n# #                   # palette=['#4285F4','#EA4335','#FBBC05','#34A853'] #google colors\n# #                  )\n\n# # #shade: True\/False, shade area under curve or not\n\n# # #alpha: transparency, lw: line width, bw: kernel shape specification\n\n# # g.map(sns.kdeplot, \"weight\", shade=True, alpha=1, lw=1.5, bw=0.2)\n\n# # g.map(sns.kdeplot, \"weight\", lw=4, bw=0.2);\n\n# # USE:  https:\/\/seaborn.pydata.org\/generated\/seaborn.FacetGrid.html\n\n# sns.set_style(\"whitegrid\")\n\n# bbb = players \n\n# fig, ax = plt.subplots(figsize=(8,5))\n\n# ax.set_xlim(140,380)\n\n# ax.set_title('2018 Season: Player Weight distribution\\n', fontsize=11, loc='left')\n\n# #     sns.kdeplot(bbb.weight, shade=True, color=\"green\", ax=ax, )\n\n# # sns.displot(penguins, x=\"flipper_length_mm\", hue=\"species\", kind=\"kde\", multiple=\"stack\")\n\n# sns.displot(bbb.weight, kde=True, color=\"b\", ax=ax, hue=bbb.position)\n\n# # sns.displot(bbb.weight, color='green')   #, color=\"green\", ax=ax, fill=True)\n\n# # sns.kdeplot(aaa[~aaa.IsRunner & (aaa.Season == 2018)].PlayerWeight, shade=True, color='blue', ax=ax)\n\n# ax.xaxis.set_major_locator(plt.MultipleLocator(10))\n\n# ax.xaxis.set_minor_locator(plt.MultipleLocator(5))\n\n# # Add transparency to colors\n# for patch in ax.artists:\n#   r, g, b, a = patch.get_facecolor()\n#   patch.set_facecolor((r, g, b, .3))\n    \n# ####plt.text(x=4.7, y=4.7, s='Sepal Length vs Width', fontsize=16, weight='bold')\n\n# # plt.text(x=4.7, y=4.6, s='The size of each point corresponds to sepal width', fontsize=8, alpha=0.75)\n\n# sns.despine(top=True, right=True, left=True, bottom=True)\n\n# # Turn off tick labels\n# ax.set_yticklabels([])\n# #ax.set_xticklabels([])\n\n# ax.set(xlabel=\"\\nPlayer Weight (in lbs) \\n\")\n\n# # plt.legend(title='Category:  Ran the ball, or did not ever run the ball', loc='upper right', labels=['Runners', 'Non-Runners'])\n\n# plt.xticks(fontsize=8)\n\n# plt.tight_layout()\n# plt.show();\n\n# # sns.kdeplot(\n# #    data=tips, x=\"total_bill\", hue=\"size\",\n# #    fill=True, common_norm=False, palette=\"crest\",\n# #    alpha=.5, linewidth=0,\n# # )\n\n# # df_weight = players[['weight','position']]\n\n# # df_weight = players[['weight']]\n\n# # # df_weight = df_weight.astype({\"position\":'category', \"weight\":'int64'}) \n\n# # sns.kdeplot(x=df_weight.weight, fill=True, common_norm=False,alpha=.5, linewidth=0)\n\n# # # sns.kdeplot(data=df_weight, x=\"weight\", fill=True, common_norm=False, alpha=.5, linewidth=0)\n\n# # # data = data.astype(np.float64)\n\n# # sns.displot(penguins, x=\"flipper_length_mm\", hue=\"species\", kind=\"kde\", fill=True)\n\n# # sns.displot(data=penguins, x=\"flipper_length_mm\")\n\n# sns.set_style(\"whitegrid\")\n\n# bbb = players \n\n# fig, ax = plt.subplots(figsize=(8,5))\n\n# ax.set_xlim(140,380)\n\n# ax.set_title('2018 Season: Player Weight distribution\\n', fontsize=11, loc='left')\n\n# # sns.kdeplot(bbb.weight, shade=True, color=\"green\", ax=ax, )\n\n# # sns.displot(penguins, x=\"flipper_length_mm\", hue=\"species\", kind=\"kde\", multiple=\"stack\")\n\n# sns.distplot(bbb.weight, kde=True, color=\"b\", ax=ax, hue=bbb.position)\n\n# # sns.displot(bbb.weight, color='green')   #, color=\"green\", ax=ax, fill=True)\n\n# # sns.kdeplot(aaa[~aaa.IsRunner & (aaa.Season == 2018)].PlayerWeight, shade=True, color='blue', ax=ax)\n\n# ax.xaxis.set_major_locator(plt.MultipleLocator(10))\n\n# ax.xaxis.set_minor_locator(plt.MultipleLocator(5))\n\n# # Add transparency to colors\n# for patch in ax.artists:\n#   r, g, b, a = patch.get_facecolor()\n#   patch.set_facecolor((r, g, b, .3))\n    \n    \n# ####plt.text(x=4.7, y=4.7, s='Sepal Length vs Width', fontsize=16, weight='bold')\n\n# # plt.text(x=4.7, y=4.6, s='The size of each point corresponds to sepal width', fontsize=8, alpha=0.75)\n\n# sns.despine(top=True, right=True, left=True, bottom=True)\n\n# # Turn off tick labels\n# ax.set_yticklabels([])\n# #ax.set_xticklabels([])\n\n# ax.set(xlabel=\"\\nPlayer Weight (in lbs) \\n\")\n\n# # plt.legend(title='Category:  Ran the ball, or did not ever run the ball', loc='upper right', labels=['Runners', 'Non-Runners'])\n\n# plt.xticks(fontsize=8)\n\n\n# plt.tight_layout()\n# plt.show();\n\n# # sns.kdeplot(\n# #    data=tips, x=\"total_bill\", hue=\"size\",\n# #    fill=True, common_norm=False, palette=\"crest\",\n# #    alpha=.5, linewidth=0,\n# # )\n\n\n# # df_weight = players[['weight','position']]\n\n# # df_weight = players[['weight']]\n\n# # # df_weight = df_weight.astype({\"position\":'category', \"weight\":'int64'}) \n\n# # sns.kdeplot(x=df_weight.weight, fill=True, common_norm=False,alpha=.5, linewidth=0)\n\n# # # sns.kdeplot(data=df_weight, x=\"weight\", fill=True, common_norm=False, alpha=.5, linewidth=0)\n\n# # # data = data.astype(np.float64)\n\n# # sns.displot(penguins, x=\"flipper_length_mm\", hue=\"species\", kind=\"kde\", fill=True)\n\n# # sns.displot(data=penguins, x=\"flipper_length_mm\")\n\n# #--\n\n# # import numpy as np\n# # import seaborn as sns\n# # import matplotlib.pyplot as plt\n\n# # sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n# # rs = np.random.RandomState(10)\n\n# # # Set up the matplotlib figure\n# # f, axes = plt.subplots(2, 2, figsize=(7, 7), sharex=True)\n# # sns.despine(left=True)\n\n# # # Generate a random univariate dataset\n# # d = rs.normal(size=100)\n\n# # # Plot a simple histogram with binsize determined automatically\n# # sns.distplot(d, kde=False, color=\"b\", ax=axes[0, 0])\n\n# # # Plot a kernel density estimate and rug plot\n# # sns.distplot(d, hist=False, rug=True, color=\"g\", ax=axes[0, 1])\n\n# # # Plot a filled kernel density estimate\n# # sns.distplot(d, hist=False, color=\"g\", kde_kws={\"shade\": True}, ax=axes[1, 0])\n\n# # # Plot a histogram and kernel density estimate\n# # sns.distplot(d, color=\"m\", ax=axes[1, 1])\n\n# # plt.setp(axes, yticks=[])\n\n# # plt.tight_layout(); \n\n# # import pandas as pd\n# # import seaborn as sns\n# # import matplotlib.pyplot as plt\n# # # sns.set_theme(style=\"white\", rc={\"axes.facecolor\": (0, 0, 0, 0)})\n\n# # # Create the data\n# # rs = np.random.RandomState(1979)\n# # x = rs.randn(500)\n# # g = np.tile(list(\"ABCDEFGHIJ\"), 50)\n# # df = pd.DataFrame(dict(x=x, g=g))\n# # m = df.g.map(ord)\n# # df[\"x\"] += m\n\n# # # Initialize the FacetGrid object\n# # pal = sns.cubehelix_palette(10, rot=-.25, light=.7)\n# # g = sns.FacetGrid(df, row=\"g\", hue=\"g\", aspect=15, height=.5, palette=pal)\n\n# # # Draw the densities in a few steps\n# # g.map(sns.kdeplot, \"x\",\n# #       bw_adjust=.5, clip_on=False,\n# #       fill=True, alpha=1, linewidth=1.5)\n# # g.map(sns.kdeplot, \"x\", clip_on=False, color=\"w\", lw=2, bw_adjust=.5)\n# # g.map(plt.axhline, y=0, lw=2, clip_on=False)\n\n\n# # # Define and use a simple function to label the plot in axes coordinates\n# # def label(x, color, label):\n# #     ax = plt.gca()\n# #     ax.text(0, .2, label, fontweight=\"bold\", color=color,\n# #             ha=\"left\", va=\"center\", transform=ax.transAxes)\n\n# # g.map(label, \"x\")\n\n# # # Set the subplots to overlap\n# # g.fig.subplots_adjust(hspace=-.25)\n\n# # # Remove axes details that don't play well with overlap\n# # g.set_titles(\"\")\n# # g.set(yticks=[])\n# # g.despine(bottom=True, left=True)\n\n# # import seaborn as sns\n# # # sns.set_theme(style=\"ticks\", palette=\"pastel\")\n\n# # # Load the example tips dataset\n# # tips = sns.load_dataset(\"tips\")\n\n# # # Draw a nested boxplot to show bills by day and time\n# # sns.boxplot(x=\"day\", y=\"total_bill\",\n# #             hue=\"smoker\", palette=[\"m\", \"g\"],\n# #             data=tips)\n# # sns.despine(offset=10, trim=True)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# df = df[df['displayName']!='Football'] no football data (rem row)\n# df['nflId'] = df['nflId'].astype(np.int64) int conv \n\n\n\n\n\n# --- gold --- \n# average passing yards per game, by team:\n\n# tot_yds_by_team = plays.groupby('possessionTeam').agg({'offensePlayResult': 'sum', 'gameId':'nunique'}).reset_index().rename(columns={'gameId': 'tot_games', 'offensePlayResult': 'yds'})\n# tot_yds_by_team.sort_values('yds',ascending=False)\n# # tot_yds_by_team.tot_games\n\n# # i can't believe they are missing 3 games !  ugh, it throws off the stats, see\n# # how the teams at the bottom like DEN, SF, LAC, MIN are misrepresented ? \n\n# sns.set_style(\"white\", {'grid.linestyle': '--'})\n\n# plt.style.use('dark_background')\n\n# df04 = plays.copy()\n\n# df04 = plays.groupby('possessionTeam')['offensePlayResult'].agg(sum).sort_values(ascending=True)\n\n# df04 = pd.DataFrame(df04)\n\n# df04['group'] = df04.index\n\n# df04['GP'] = tot_yds_by_team.tot_games.values\n\n# df04['ans'] = df04.offensePlayResult\/df04.GP\n\n# print(df04)\n\n# my_range=range(1,33) # 32 teams \n\n# fig, ax = plt.subplots(figsize=(9,9))\n\n# ##my_color=np.where(df04['group']=='NE', 'orange', 'skyblue')\n# ##my_color=np.where(df04[  ('group'=='NE') | ('group'=='NO')  ], 'orange', 'skyblue')\n\n# my_color=np.where( (df04.group == 'TB') | (df04.group == 'PIT') | (df04.group == 'ATL') , 'orange', 'skyblue')\n\n\n# my_size=np.where(df04['group']=='B', 70, 30)\n \n# plt.hlines(y=my_range, xmin=0, xmax=df04['ans'], color=my_color, alpha=0.4)\n\n# plt.scatter(df04.ans, my_range, color=my_color, s=my_size, alpha=1)\n \n# # Add title and exis names\n# plt.yticks(my_range, df04.group)\n# plt.title(\"\\nAverage Passing Yards per Game per Team \\n\", loc='left', fontsize=13)\n# plt.xlabel('\\n Per Game Average Passing Offense (in yards)', fontsize=10)\n# plt.ylabel('')\n# # plt.ylabel('NFL\\nTeam\\n')\n\n\n# ax.spines['top'].set_linewidth(.3)  \n# ax.spines['left'].set_linewidth(.3)  \n# ax.spines['right'].set_linewidth(.3)  \n# ax.spines['bottom'].set_linewidth(.3)  \n\n# plt.text(.3, 33.3, 'Avg passing yds per game in ranked order is actually TB, PIT, ATL, LA, and then KC...', {'color': 'white', 'fontsize': 8.5})\n\n# sns.despine(top=True, right=True, left=True, bottom=True)\n\n# # plt.text(5300, 31.89, '5,177', {'color': 'orange', 'fontsize': 8.5})\n\n# # plt.text(5300, 30.82, '5,043', {'color': 'orange', 'fontsize': 8.5})\n\n# # plt.text(5300, 29.89, '4,740', {'color': 'orange', 'fontsize': 8.5})\n\n# plt.axvline(x=300, color='lightgrey', ymin = .01, ymax=.82, linestyle=\"--\", linewidth=.4)\n# plt.axvline(x=250, color='lightgrey', ymin = .01, ymax=.53, linestyle=\"--\", linewidth=.4)\n# plt.axvline(x=200, color='lightgrey', ymin = .01, ymax=.27, linestyle=\"--\", linewidth=.4)\n# plt.axvline(x=150, color='lightgrey', ymin = .01, ymax=.04, linestyle=\"--\", linewidth=.4)\n# # plt.axvline(x=3000, color='lightgrey', ymin = .01, ymax=.12, linestyle=\"--\", linewidth=.4)\n# # plt.axvline(x=2500, color='lightgrey', ymin = .01, ymax=.03, linestyle=\"--\", linewidth=.4)\n# # plt.axvline(x=2000, color='lightgrey', ymin = .01, ymax=.01, linestyle=\"--\", linewidth=.4)\n\n# plt.savefig('avg_passing_yds_per_game_by_team.svg', dpi=400)\n\n# plt.tight_layout()\n# plt.show();\n\n\n\n\n# DO NOT REMOVE # DO NOT REMOVE # DO NOT REMOVE\n\n# <div class=\"h4\"><i>2.3 &ensp; Player Weight Distribution (by Position)<\/i><\/div> \n\n# import seaborn as sns\n\n# sns.plotting_context('paper', font_scale = 1.3)\n\n# sns.set_style(\"whitegrid\")\n\n# wts = players[['weight','position']]\n\n# wts.position = pd.Categorical(wts.position)\n\n# wts['pos'] = wts.position.cat.codes\n\n# # ordered_days = tips.day.value_counts().index\n\n# g = sns.FacetGrid(wts, \n#                   # row=\"pos\",\n#                   col='pos',\n#                   hue='pos',\n#                   # row_order=ordered_days,\n#                   height=1.5, \n#                   aspect=.8, \n#                   despine=True,\n#                   margin_titles=False, \n#                   palette = 'GnBu_d',\n#                  col_wrap=7)\n\n# # g.fig.set_figwidth(6.27)\n\n# # g.fig.set_figheight(12.7)\n\n# # g.set_axis_labels(\"\", \"\")\n\n# g.fig.subplots_adjust(wspace=.00, hspace=.00)\n\n# g.set(xlim=(150, 400), ylim=(0,0.09), yticks=[])\n\n# g.fig.set_figwidth(10)\n\n# g.fig.set_figheight(20)\n\n# g.fig.tight_layout(w_pad=1); \n\n# g.map(sns.kdeplot, \"weight\"); \n\n# stop \n\n# # wts = players[['weight','position']]\n\n# # wts.position = pd.Categorical(wts.position)\n\n# # wts['code'] = wts.position.cat.codes\n\n# # print(wts)\n# # g = sns.FacetGrid(wts, #the dataframe to pull from\n# #                   row=\"weight\", #define the column for each subplot row to be differentiated by\n# #                   hue=\"code\", #define the column for each subplot color to be differentiated by\n# #                   aspect=10, #aspect * height = width\n# #                   height=1.5, #height of each subplot\n# #                   # palette=['#4285F4','#EA4335','#FBBC05','#34A853'] #google colors\n# #                  )\n\n# # #shade: True\/False, shade area under curve or not\n\n# # #alpha: transparency, lw: line width, bw: kernel shape specification\n\n# # g.map(sns.kdeplot, \"weight\", shade=True, alpha=1, lw=1.5, bw=0.2)\n\n# # g.map(sns.kdeplot, \"weight\", lw=4, bw=0.2);\n\n# # USE:  https:\/\/seaborn.pydata.org\/generated\/seaborn.FacetGrid.html\n\n# sns.set_style(\"whitegrid\")\n\n# bbb = players \n\n# fig, ax = plt.subplots(figsize=(8,5))\n\n# ax.set_xlim(140,380)\n\n# ax.set_title('2018 Season: Player Weight distribution\\n', fontsize=11, loc='left')\n\n# #     sns.kdeplot(bbb.weight, shade=True, color=\"green\", ax=ax, )\n\n# # sns.displot(penguins, x=\"flipper_length_mm\", hue=\"species\", kind=\"kde\", multiple=\"stack\")\n\n# sns.displot(bbb.weight, kde=True, color=\"b\", ax=ax, hue=bbb.position)\n\n# # sns.displot(bbb.weight, color='green')   #, color=\"green\", ax=ax, fill=True)\n\n# # sns.kdeplot(aaa[~aaa.IsRunner & (aaa.Season == 2018)].PlayerWeight, shade=True, color='blue', ax=ax)\n\n# ax.xaxis.set_major_locator(plt.MultipleLocator(10))\n\n# ax.xaxis.set_minor_locator(plt.MultipleLocator(5))\n\n# # Add transparency to colors\n# for patch in ax.artists:\n#   r, g, b, a = patch.get_facecolor()\n#   patch.set_facecolor((r, g, b, .3))\n    \n# ####plt.text(x=4.7, y=4.7, s='Sepal Length vs Width', fontsize=16, weight='bold')\n\n# # plt.text(x=4.7, y=4.6, s='The size of each point corresponds to sepal width', fontsize=8, alpha=0.75)\n\n# sns.despine(top=True, right=True, left=True, bottom=True)\n\n# # Turn off tick labels\n# ax.set_yticklabels([])\n# #ax.set_xticklabels([])\n\n# ax.set(xlabel=\"\\nPlayer Weight (in lbs) \\n\")\n\n# # plt.legend(title='Category:  Ran the ball, or did not ever run the ball', loc='upper right', labels=['Runners', 'Non-Runners'])\n\n# plt.xticks(fontsize=8)\n\n# plt.tight_layout()\n# plt.show();\n\n# # sns.kdeplot(\n# #    data=tips, x=\"total_bill\", hue=\"size\",\n# #    fill=True, common_norm=False, palette=\"crest\",\n# #    alpha=.5, linewidth=0,\n# # )\n\n# # df_weight = players[['weight','position']]\n\n# # df_weight = players[['weight']]\n\n# # # df_weight = df_weight.astype({\"position\":'category', \"weight\":'int64'}) \n\n# # sns.kdeplot(x=df_weight.weight, fill=True, common_norm=False,alpha=.5, linewidth=0)\n\n# # # sns.kdeplot(data=df_weight, x=\"weight\", fill=True, common_norm=False, alpha=.5, linewidth=0)\n\n# # # data = data.astype(np.float64)\n\n# # sns.displot(penguins, x=\"flipper_length_mm\", hue=\"species\", kind=\"kde\", fill=True)\n\n# # sns.displot(data=penguins, x=\"flipper_length_mm\")\n\n# sns.set_style(\"whitegrid\")\n\n# bbb = players \n\n# fig, ax = plt.subplots(figsize=(8,5))\n\n# ax.set_xlim(140,380)\n\n# ax.set_title('2018 Season: Player Weight distribution\\n', fontsize=11, loc='left')\n\n# # sns.kdeplot(bbb.weight, shade=True, color=\"green\", ax=ax, )\n\n# # sns.displot(penguins, x=\"flipper_length_mm\", hue=\"species\", kind=\"kde\", multiple=\"stack\")\n\n# sns.distplot(bbb.weight, kde=True, color=\"b\", ax=ax, hue=bbb.position)\n\n# # sns.displot(bbb.weight, color='green')   #, color=\"green\", ax=ax, fill=True)\n\n# # sns.kdeplot(aaa[~aaa.IsRunner & (aaa.Season == 2018)].PlayerWeight, shade=True, color='blue', ax=ax)\n\n# ax.xaxis.set_major_locator(plt.MultipleLocator(10))\n\n# ax.xaxis.set_minor_locator(plt.MultipleLocator(5))\n\n# # Add transparency to colors\n# for patch in ax.artists:\n#   r, g, b, a = patch.get_facecolor()\n#   patch.set_facecolor((r, g, b, .3))\n    \n    \n# ####plt.text(x=4.7, y=4.7, s='Sepal Length vs Width', fontsize=16, weight='bold')\n\n# # plt.text(x=4.7, y=4.6, s='The size of each point corresponds to sepal width', fontsize=8, alpha=0.75)\n\n# sns.despine(top=True, right=True, left=True, bottom=True)\n\n# # Turn off tick labels\n# ax.set_yticklabels([])\n# #ax.set_xticklabels([])\n\n# ax.set(xlabel=\"\\nPlayer Weight (in lbs) \\n\")\n\n# # plt.legend(title='Category:  Ran the ball, or did not ever run the ball', loc='upper right', labels=['Runners', 'Non-Runners'])\n\n# plt.xticks(fontsize=8)\n\n\n# plt.tight_layout()\n# plt.show();\n\n# # sns.kdeplot(\n# #    data=tips, x=\"total_bill\", hue=\"size\",\n# #    fill=True, common_norm=False, palette=\"crest\",\n# #    alpha=.5, linewidth=0,\n# # )\n\n\n# # df_weight = players[['weight','position']]\n\n# # df_weight = players[['weight']]\n\n# # # df_weight = df_weight.astype({\"position\":'category', \"weight\":'int64'}) \n\n# # sns.kdeplot(x=df_weight.weight, fill=True, common_norm=False,alpha=.5, linewidth=0)\n\n# # # sns.kdeplot(data=df_weight, x=\"weight\", fill=True, common_norm=False, alpha=.5, linewidth=0)\n\n# # # data = data.astype(np.float64)\n\n# # sns.displot(penguins, x=\"flipper_length_mm\", hue=\"species\", kind=\"kde\", fill=True)\n\n# # sns.displot(data=penguins, x=\"flipper_length_mm\")\n\n# #--\n\n# # import numpy as np\n# # import seaborn as sns\n# # import matplotlib.pyplot as plt\n\n# # sns.set(style=\"white\", palette=\"muted\", color_codes=True)\n# # rs = np.random.RandomState(10)\n\n# # # Set up the matplotlib figure\n# # f, axes = plt.subplots(2, 2, figsize=(7, 7), sharex=True)\n# # sns.despine(left=True)\n\n# # # Generate a random univariate dataset\n# # d = rs.normal(size=100)\n\n# # # Plot a simple histogram with binsize determined automatically\n# # sns.distplot(d, kde=False, color=\"b\", ax=axes[0, 0])\n\n# # # Plot a kernel density estimate and rug plot\n# # sns.distplot(d, hist=False, rug=True, color=\"g\", ax=axes[0, 1])\n\n# # # Plot a filled kernel density estimate\n# # sns.distplot(d, hist=False, color=\"g\", kde_kws={\"shade\": True}, ax=axes[1, 0])\n\n# # # Plot a histogram and kernel density estimate\n# # sns.distplot(d, color=\"m\", ax=axes[1, 1])\n\n# # plt.setp(axes, yticks=[])\n\n# # plt.tight_layout(); \n\n# # import pandas as pd\n# # import seaborn as sns\n# # import matplotlib.pyplot as plt\n# # # sns.set_theme(style=\"white\", rc={\"axes.facecolor\": (0, 0, 0, 0)})\n\n# # # Create the data\n# # rs = np.random.RandomState(1979)\n# # x = rs.randn(500)\n# # g = np.tile(list(\"ABCDEFGHIJ\"), 50)\n# # df = pd.DataFrame(dict(x=x, g=g))\n# # m = df.g.map(ord)\n# # df[\"x\"] += m\n\n# # # Initialize the FacetGrid object\n# # pal = sns.cubehelix_palette(10, rot=-.25, light=.7)\n# # g = sns.FacetGrid(df, row=\"g\", hue=\"g\", aspect=15, height=.5, palette=pal)\n\n# # # Draw the densities in a few steps\n# # g.map(sns.kdeplot, \"x\",\n# #       bw_adjust=.5, clip_on=False,\n# #       fill=True, alpha=1, linewidth=1.5)\n# # g.map(sns.kdeplot, \"x\", clip_on=False, color=\"w\", lw=2, bw_adjust=.5)\n# # g.map(plt.axhline, y=0, lw=2, clip_on=False)\n\n\n# # # Define and use a simple function to label the plot in axes coordinates\n# # def label(x, color, label):\n# #     ax = plt.gca()\n# #     ax.text(0, .2, label, fontweight=\"bold\", color=color,\n# #             ha=\"left\", va=\"center\", transform=ax.transAxes)\n\n# # g.map(label, \"x\")\n\n# # # Set the subplots to overlap\n# # g.fig.subplots_adjust(hspace=-.25)\n\n# # # Remove axes details that don't play well with overlap\n# # g.set_titles(\"\")\n# # g.set(yticks=[])\n# # g.despine(bottom=True, left=True)\n\n# # import seaborn as sns\n# # # sns.set_theme(style=\"ticks\", palette=\"pastel\")\n\n# # # Load the example tips dataset\n# # tips = sns.load_dataset(\"tips\")\n\n# # # Draw a nested boxplot to show bills by day and time\n# # sns.boxplot(x=\"day\", y=\"total_bill\",\n# #             hue=\"smoker\", palette=[\"m\", \"g\"],\n# #             data=tips)\n# # sns.despine(offset=10, trim=True)\n\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n# df = df[df['displayName']!='Football'] no football data (rem row)\n# df['nflId'] = df['nflId'].astype(np.int64) int conv \n\n\n\n\n\n# --- gold --- \n# average passing yards per game, by team:\n\n# tot_yds_by_team = plays.groupby('possessionTeam').agg({'offensePlayResult': 'sum', 'gameId':'nunique'}).reset_index().rename(columns={'gameId': 'tot_games', 'offensePlayResult': 'yds'})\n# tot_yds_by_team.sort_values('yds',ascending=False)\n# # tot_yds_by_team.tot_games\n\n# # i can't believe they are missing 3 games !  ugh, it throws off the stats, see\n# # how the teams at the bottom like DEN, SF, LAC, MIN are misrepresented ? \n\n# sns.set_style(\"white\", {'grid.linestyle': '--'})\n\n# plt.style.use('dark_background')\n\n# df04 = plays.copy()\n\n# df04 = plays.groupby('possessionTeam')['offensePlayResult'].agg(sum).sort_values(ascending=True)\n\n# df04 = pd.DataFrame(df04)\n\n# df04['group'] = df04.index\n\n# df04['GP'] = tot_yds_by_team.tot_games.values\n\n# df04['ans'] = df04.offensePlayResult\/df04.GP\n\n# print(df04)\n\n# my_range=range(1,33) # 32 teams \n\n# fig, ax = plt.subplots(figsize=(9,9))\n\n# ##my_color=np.where(df04['group']=='NE', 'orange', 'skyblue')\n# ##my_color=np.where(df04[  ('group'=='NE') | ('group'=='NO')  ], 'orange', 'skyblue')\n\n# my_color=np.where( (df04.group == 'TB') | (df04.group == 'PIT') | (df04.group == 'ATL') , 'orange', 'skyblue')\n\n\n# my_size=np.where(df04['group']=='B', 70, 30)\n \n# plt.hlines(y=my_range, xmin=0, xmax=df04['ans'], color=my_color, alpha=0.4)\n\n# plt.scatter(df04.ans, my_range, color=my_color, s=my_size, alpha=1)\n \n# # Add title and exis names\n# plt.yticks(my_range, df04.group)\n# plt.title(\"\\nAverage Passing Yards per Game per Team \\n\", loc='left', fontsize=13)\n# plt.xlabel('\\n Per Game Average Passing Offense (in yards)', fontsize=10)\n# plt.ylabel('')\n# # plt.ylabel('NFL\\nTeam\\n')\n\n\n# ax.spines['top'].set_linewidth(.3)  \n# ax.spines['left'].set_linewidth(.3)  \n# ax.spines['right'].set_linewidth(.3)  \n# ax.spines['bottom'].set_linewidth(.3)  \n\n# plt.text(.3, 33.3, 'Avg passing yds per game in ranked order is actually TB, PIT, ATL, LA, and then KC...', {'color': 'white', 'fontsize': 8.5})\n\n# sns.despine(top=True, right=True, left=True, bottom=True)\n\n# # plt.text(5300, 31.89, '5,177', {'color': 'orange', 'fontsize': 8.5})\n\n# # plt.text(5300, 30.82, '5,043', {'color': 'orange', 'fontsize': 8.5})\n\n# # plt.text(5300, 29.89, '4,740', {'color': 'orange', 'fontsize': 8.5})\n\n# plt.axvline(x=300, color='lightgrey', ymin = .01, ymax=.82, linestyle=\"--\", linewidth=.4)\n# plt.axvline(x=250, color='lightgrey', ymin = .01, ymax=.53, linestyle=\"--\", linewidth=.4)\n# plt.axvline(x=200, color='lightgrey', ymin = .01, ymax=.27, linestyle=\"--\", linewidth=.4)\n# plt.axvline(x=150, color='lightgrey', ymin = .01, ymax=.04, linestyle=\"--\", linewidth=.4)\n# # plt.axvline(x=3000, color='lightgrey', ymin = .01, ymax=.12, linestyle=\"--\", linewidth=.4)\n# # plt.axvline(x=2500, color='lightgrey', ymin = .01, ymax=.03, linestyle=\"--\", linewidth=.4)\n# # plt.axvline(x=2000, color='lightgrey', ymin = .01, ymax=.01, linestyle=\"--\", linewidth=.4)\n\n# plt.savefig('avg_passing_yds_per_game_by_team.svg', dpi=400)\n\n# plt.tight_layout()\n# plt.show();","adf88691":"import pandas as pdf\n\nfrom io import StringIO\n\ndata = (\"\"\"ID,Team Name,Abbrev,Conference,Division\n1,Arizona Cardinals,ARI,NFC,West\n2,Atlanta Falcons,ATL,NFC,South\n3,Baltimore Ravens,BAL,AFC,North\n4,Buffalo Bills,BUF,AFC,East\n5,Carolina Panthers,CAR,NFC,South\n6,Chicago Bears,CHI,NFC,North\n7,Cincinnati Bengals,CIN,AFC,North\n8,Cleveland Browns,CLE,AFC,North\n9,Dallas Cowboys,DAL,NFC,East\n10,Denver Broncos,DEN,AFC,West\n11,Detroit Lions,DET,NFC,North\n12,Green Bay Packers,GB,NFC,North\n13,Houston Texans,HOU,AFC,South\n14,Indianapolis Colts,IND,AFC,South\n15,Jacksonville Jaguars,JAX,AFC,South\n16,Kansas City Chiefs,KC,AFC,West\n17,Miami Dolphins,MIA,AFC,East\n18,Minnesota Vikings,MIN,NFC,North\n19,New England Patriots,NE,AFC,East\n20,New Orleans Saints,NO,NFC,South\n21,NY Giants,NYG,NFC,East\n22,NY Jets,NYJ,AFC,East\n23,Oakland Raiders,OAK,AFC,West\n24,Philadelphia Eagles,PHI,NFC,East\n25,Pittsburgh Steelers,PIT,AFC,North\n26,Los Angeles Chargers,LAC,AFC,West\n27,Los Angeles Rams,LA,NFC,West\n28,San Francisco 49ers,SF,NFC,West\n29,Seattle Seahawks,SEA,NFC,West\n30,Tampa Bay Buccaneers,TB,NFC,South\n31,Tennessee Titans,TEN,AFC,South\n32,Washington Football Team,WAS,NFC,East\"\"\")\n\nmapper = pd.read_csv(StringIO(data))\n\nd = dict(selector=\"th\",\n    props=[('text-align', 'center')])\n\nmapper = mapper.set_index('ID')\n\nmapper.style.set_properties(**{'width':'7em', 'text-align':'center'})\\\n        .set_table_styles([d])","773e3a4d":"\nimport networkx as nx\nG = nx.Graph()\n# Creating graph objects\nG = nx.Graph(sport=\"American Football\", league='NFL')\n\nG.add_nodes_from(range(1,33)) # 32 individual teams\n# G.graph\n\n\nlabeldict = {1:   'ARI',\n2:    'ATL',\n3:    'BAL',\n4:    'BUF',\n5:    'CAR',\n6:    'CHI',\n7:    'CIN',\n8:    'CLE',\n9:    'DAL',\n10:   'DEN',\n11:   'DET',\n12:   'GB',\n13:   'HOU',\n14:   'IND',\n15:   'JAX',\n16:   'KC',\n17:   'MIA',\n18:   'MIN',\n19:   'NE',\n20:   'NO',\n21:   'NYG',\n22:   'NYJ',\n23:   'OAK',  \n24:   'PHI',\n25:   'PIT',\n26:   'LAC',\n27:   'LA',\n28:   'SF',\n29:   'SEA',\n30:   'TB',\n31:   'TEN',\n32:   'WAS'}\n\n\ntenet_time_map = {'ARI':1, 'ATL':2, 'BAL':3, 'BUF':4, 'CAR':5, 'CHI':6, 'CIN':7, 'CLE':8,\n                  'DAL':9, 'DEN':10, 'DET':11, 'GB':12, 'HOU':13, 'IND':14, 'JAX':15,\n                  'KC':16, 'MIA':17, 'MIN':18, 'NE':19, 'NO':20, 'NYG':21, 'NYJ':22,\n                  'OAK':23, 'PHI':24, 'PIT':25, 'LAC':26, 'LA':27, 'SF':28, 'SEA':29,\n                  'TB':30, 'TEN':31, 'WAS':32}\n\noptions = {'node_color': 'black',\n           \"alpha\": 1.0,\n           'node_size': 600, \n            \"linewidths\": 0,\n            # FONTS:\n            \"font_size\":9,\n            \"font_color\":\"white\",\n            \"width\": .3, \n            \"edge_color\": 'red', \n            \"labels\": labeldict, \n            \"with_labels\": True}\n\nnx.draw_circular(G,  **options)\n\nplt.show();\n\n# G = nx.Graph()\n\n# G = nx.Graph(sport='Football')\n\n# G = nx.Graph(layout='Schedule')\n\n# nx.draw_circular(G,  **options)\n\n# plt.show();\n\n# plt.savefig(\"path.png\")\n","422f6266":"tenet_games = games.copy()\ntenet_games = games[['homeTeamAbbr','visitorTeamAbbr']]\ntenet_games['forward'] = tenet_games['homeTeamAbbr'].map(tenet_time_map)\ntenet_games['backward'] = tenet_games['visitorTeamAbbr'].map(tenet_time_map)\ntenet_games['new_col'] = list(zip(tenet_games.forward, tenet_games.backward))\nzebrafy = list(tenet_games.new_col)\n\nplt.figure(figsize=(10,10))\n\nmy_edges = zebrafy\n\nfor e1,e2 in my_edges:\n        if G.has_edge(e1,e2):\n            G[e1][e2]['weight'] += 1   \n        else:\n            G.add_edge(e1,e2, weight = 1)\n            \n# import the id dictionary and relable the nodes with the team names       \n# H=nx.relabel_nodes(G,labels)\n    \n# Draw the graph with nodes and edges\n# nx.draw_spectral(H, with_labels=True)\n    \nnx.draw_circular(G,  **options); \n\n### plt.savefig(\"spheroid_prolate.svg\", dpi=1000); \n\n# plt.show()\n# plt.savefig(\"spheroid_prolate.svg\")","1e5a09a4":"\n# prints but without the team name ! \n\n# import networkx as nx\n\n# from bokeh.io import output_file, show\n\n# from bokeh.models import (BoxSelectTool, Circle, EdgesAndLinkedNodes, HoverTool,\n#                           MultiLine, NodesAndLinkedEdges, Plot, Range1d, TapTool,)\n\n# from bokeh.palettes import Spectral4\n\n# from bokeh.plotting import from_networkx\n\n# plot = Plot(plot_width=700, plot_height=700,\n#             x_range=Range1d(-1.1,1.1), \n#             y_range=Range1d(-1.1,1.1))\n\n# plot.title.text = \"NFL Game Interactivity\"\n\n# plot.add_tools(HoverTool(tooltips=None), TapTool(), BoxSelectTool())\n\n# graph_renderer = from_networkx(G, nx.circular_layout, scale=1, center=(0,0))\n\n# graph_renderer.node_renderer.glyph = Circle(size=15, fill_color=Spectral4[0])\n\n# graph_renderer.node_renderer.selection_glyph = Circle(size=15, fill_color=Spectral4[2])\n\n# graph_renderer.node_renderer.hover_glyph = Circle(size=15, fill_color=Spectral4[1])\n\n# graph_renderer.edge_renderer.glyph = MultiLine(line_color=\"#CCCCCC\", line_alpha=0.7, line_width=1)\n\n# graph_renderer.edge_renderer.selection_glyph = MultiLine(line_color=Spectral4[2], line_width=5)\n\n# graph_renderer.edge_renderer.hover_glyph = MultiLine(line_color=Spectral4[1], line_width=5)\n\n# graph_renderer.selection_policy = NodesAndLinkedEdges()\n\n# graph_renderer.inspection_policy = EdgesAndLinkedNodes()\n\n# plot.renderers.append(graph_renderer)\n\n# output_file(\"interactive_graphs.html\")\n\n# show(plot); \n\n\n\n# ---\n\n\n\n# import networkx as nx\n\n# from bokeh.io import output_file, show\n# from bokeh.models import (BoxZoomTool, Circle, HoverTool,\n#                           MultiLine, Plot, Range1d, ResetTool,)\n# from bokeh.palettes import Spectral4\n# from bokeh.plotting import from_networkx\n\n# SAME_CLUB_COLOR, DIFFERENT_CLUB_COLOR = \"black\", \"red\"\n# edge_attrs = {}\n\n# # for start_node, end_node, _ in G.edges(data=True):\n# #     edge_color = SAME_CLUB_COLOR if G.nodes[start_node][\"club\"] == G.nodes[end_node][\"club\"] else DIFFERENT_CLUB_COLOR\n# #     edge_attrs[(start_node, end_node)] = edge_color\n\n# # nx.set_edge_attributes(G, edge_attrs, \"edge_color\")\n\n# # Show with Bokeh\n# plot = Plot(plot_width=400, plot_height=400,\n#             x_range=Range1d(-1.1, 1.1), y_range=Range1d(-1.1, 1.1))\n# plot.title.text = \"Graph Interaction Demonstration\"\n\n# node_hover_tool = HoverTool(tooltips=[(\"index\", \"@index\"), (\"club\", \"@club\")])\n# plot.add_tools(node_hover_tool, BoxZoomTool(), ResetTool())\n\n# graph_renderer = from_networkx(G, nx.spring_layout, scale=1, center=(0, 0))\n\n# graph_renderer.node_renderer.glyph = Circle(size=15, fill_color=Spectral4[0])\n# graph_renderer.edge_renderer.glyph = MultiLine(line_color=\"edge_color\", line_alpha=0.8, line_width=1)\n# plot.renderers.append(graph_renderer)\n\n# output_file(\"interactive_graphs.html\")\n# show(plot)\n\n\n\n# G=nx.MultiGraph ([(1,2),(1,2),(1,2),(3,1),(3,2)])\n# pos = nx.random_layout(G)\n# nx.draw_networkx_nodes(G, pos, node_color = 'r', node_size = 100, alpha = 1)\n# ax = plt.gca()\n# for e in G.edges:\n#     ax.annotate(\"\",\n#                 xy=pos[e[0]], xycoords='data',\n#                 xytext=pos[e[1]], textcoords='data',\n#                 arrowprops=dict(arrowstyle=\"->\", color=\"0.5\",\n#                                 shrinkA=5, shrinkB=5,\n#                                 patchA=None, patchB=None,\n#                                 connectionstyle=\"arc3,rad=rrr\".replace('rrr',str(0.3*e[2])\n#                                 ),\n#                                 ),\n#                 )\n# plt.axis('off')\n# plt.show(); \n\n\n\n","3e943913":"\n# Creating graph objects\nC = nx.MultiGraph()\n\n#Adding more nodes\nC.add_nodes_from(range(1,33))\n\n#Drawing the graph in circular mode\n# nx.draw_circular(G)\n\nC.add_edges_from([(9, 21), (9, 11), (9, 15), (9, 31), (9, 32), \n                  (9, 20), (9, 24), (9, 30), (9,5), (9,29),\n                  (9,13), (9,32), (9,24), (9,2), (9,14),(9,21)])\n\nplt.figure(figsize=(8,8))\n\nlabeldict = {1:   'ARI',\n2:    'ATL',\n3:    'BAL',\n4:    'BUF',\n5:    'CAR',\n6:    'CHI',\n7:    'CIN',\n8:    'CLE',\n9:    'DAL',\n10:   'DEN',\n11:   'DET',\n12:   'GB',\n13:   'HOU',\n14:   'IND',\n15:   'JAX',\n16:   'KC',\n17:   'MIA',\n18:   'MIN',\n19:   'NE',\n20:   'NO',\n21:   'NYG',\n22:   'NYJ',\n23:   'OAK',  \n24:   'PHI',\n25:   'PIT',\n26:   'LAC',\n27:   'LA',\n28:   'SF',\n29:   'SEA',\n30:   'TB',\n31:   'TEN',\n32:   'WAS'}\n\noptions = {'node_color': 'black',\n           \"alpha\": .9,\n           'node_size': 600, \n            \"linewidths\": 0,\n            # FONTS:\n            \"font_size\":9,\n            \"font_color\":\"white\",\n            \"width\": .3, \n            \"edge_color\": 'red', \n            \"labels\": labeldict, \n            \"with_labels\": True}\n\n#  nx.write_gexf(C, \"dallas.gexf\")\n\nnx.draw_circular(C,  **options)\n\nplt.show();\n\n# plt.savefig(\"cowboys_games.svg\", dpi=300)   < -  if you want to save the image\n","792aea4f":"#-------------------------------------------------------------------------\n#----------------------- SUPERSCRAPE -------------------------------------\n#-------------------------------------------------------------------------\n# helpful scrp ref:  https:\/\/www.crummy.com\/software\/BeautifulSoup\/bs4\/doc\/\n#-------------------------------------------------------------------------\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport numpy as np\n#-------------------------------------------------------------------------\n# i care about passing stats for the 2018 season, INDIVIDUALS ONLY:\nurl = 'https:\/\/www.pro-football-reference.com\/years\/2018\/passing.htm'\n# https:\/\/www.pro-football-reference.com\/ contains some really good stats about QB performances, team data, etc. \n# THIS IS GOOD TEAM DATA AS WELL: https:\/\/www.pro-football-reference.com\/years\/2018\/#all_passing\n#-------------------------------------------------------------------------\nhtml_poll = urlopen(url)\nmy_stats = BeautifulSoup(html_poll)\n#-------------------------------------------------------------------------\n# table headers\ncolumn_headers = my_stats.findAll('tr')[0]\ncolumn_headers = [i.getText() for i in column_headers.findAll('th')]\n# cols:\n# ['Rk', 'Player', 'Tm', 'Age', 'Pos', 'G', 'GS', 'QBrec', 'Cmp', 'Att', 'Cmp%', 'Yds', \n# 'TD', 'TD%', 'Int', 'Int%', '1D', 'Lng', 'Y\/A', 'AY\/A', 'Y\/C', 'Y\/G', 'Rate', 'QBR', \n# 'Sk', 'Yds', 'NY\/A', 'ANY\/A', 'Sk%', '4QC', 'GWD']\n#  table rows (tr) and columns (td) \n#-------------------------------------------------------------------------\n# Collect table rows\nrows = my_stats.findAll('tr')[1:]\n# create\/get stats from each row of html \nqb1 = []\nfor i in range(len(rows)):\n  qb1.append([col.getText() for col in rows[i].findAll('td')])\n#-------------------------------------------------------------------------\n# print(qb1[0])\n# ['Ben Roethlisberger', 'PIT', '36', 'QB', '16', '16', '9-6-1', '452', '675', '67.0', '5129', '34', \n# '5.0', '16', '2.4', '248', '97', '7.6', '7.5', '11.3', '320.6', '96.5', '69.6', '24', '166', '7.10', \n# '7.04', '3.4', '2', '3']\n#-------------------------------------------------------------------------\n# my_stats.findAll('tr')[1]\n# <tr><th class=\"right\" csk=\"1\" data-stat=\"ranker\" scope=\"row\">1<\/th><td class=\"left\" csk=\"Roethlisberger,Ben\" data-append-csv=\"RoetBe00\" data-stat=\"player\"><a href=\"\/players\/R\/RoetBe00.htm\">Ben Roethlisberger<\/a><\/td><td class=\"left\" data-stat=\"team\"><a href=\"\/teams\/pit\/2018.htm\" title=\"Pittsburgh Steelers\">PIT<\/a><\/td><td class=\"right\" data-stat=\"age\">36<\/td><td class=\"left\" data-stat=\"pos\">QB<\/td><td class=\"right\" data-stat=\"g\">16<\/td><td class=\"right\" data-stat=\"gs\">16<\/td><td class=\"right\" csk=\"0.59375\" data-stat=\"qb_rec\">9-6-1<\/td><td class=\"right\" data-stat=\"pass_cmp\">452<\/td><td class=\"right\" data-stat=\"pass_att\">675<\/td><td class=\"right\" data-stat=\"pass_cmp_perc\">67.0<\/td><td class=\"right\" data-stat=\"pass_yds\">5129<\/td><td class=\"right\" data-stat=\"pass_td\">34<\/td><td class=\"right\" data-stat=\"pass_td_perc\">5.0<\/td><td class=\"right\" data-stat=\"pass_int\">16<\/td><td class=\"right\" data-stat=\"pass_int_perc\">2.4<\/td><td class=\"right\" data-stat=\"pass_first_down\">248<\/td><td class=\"right\" data-stat=\"pass_long\">97<\/td><td class=\"right\" data-stat=\"pass_yds_per_att\">7.6<\/td><td class=\"right\" data-stat=\"pass_adj_yds_per_att\">7.5<\/td><td class=\"right\" data-stat=\"pass_yds_per_cmp\">11.3<\/td><td class=\"right\" data-stat=\"pass_yds_per_g\">320.6<\/td><td class=\"right\" data-stat=\"pass_rating\">96.5<\/td><td class=\"right\" data-stat=\"qbr\">69.6<\/td><td class=\"right\" data-stat=\"pass_sacked\">24<\/td><td class=\"right\" data-stat=\"pass_sacked_yds\">166<\/td><td class=\"right\" data-stat=\"pass_net_yds_per_att\">7.10<\/td><td class=\"right\" data-stat=\"pass_adj_net_yds_per_att\">7.04<\/td><td class=\"right\" data-stat=\"pass_sacked_perc\">3.4<\/td><td class=\"right\" data-stat=\"comebacks\">2<\/td><td class=\"right\" data-stat=\"gwd\">3<\/td><\/tr>\n#-------------------------------------------------------------------------\nmy_data = pd.DataFrame(qb1, columns=column_headers[1:])\n#-------------------------------------------------------------------------\nnew_columns = my_data.columns.values\nnew_columns[-6] = 'Yds_Sack'  # Rename sack yards column to `Yds_Sack`\nmy_data.columns = new_columns\n# STOP:  THIS IS ALL OF YOUR RAW DATA INTO A DF, IT IS SOLID... \n#-------------------------------------------------------------------------\n# Select stat categories\n# categories = ['Cmp%', 'Yds', 'TD', 'Int', 'Y\/A', 'Rate', 'Att']\ncats = ['Player', 'Tm', 'Age', 'G', 'GS', 'Cmp', 'Att', 'Cmp%', 'Yds', 'TD', 'Int', 'Int%', 'Sk', 'Y\/A', 'Y\/C','GWD','Rate']\n# ['Player', 'Tm', 'Age', 'Pos', 'G', 'GS', 'QBrec', 'Cmp', 'Att', 'Cmp%',\n#        'Yds', 'TD', 'TD%', 'Int', 'Int%', '1D', 'Lng', 'Y\/A', 'AY\/A', 'Y\/C',\n#        'Y\/G', 'Rate', 'QBR', 'Sk', 'Yds_Sack', 'NY\/A', 'ANY\/A', 'Sk%', '4QC',\n#        'GWD'],\n#-------------------------------------------------------------------------\nsuperdata = my_data[cats]\nsuperdata['Player'] = superdata['Player'].str.replace('*', '', regex=False)\nsuperdata['Player'] = superdata['Player'].str.replace('+', '', regex=False)\nsuperdata['Player'] = superdata['Player'].str.strip()\nsuperdata = superdata.head(20)\nsuperdata.columns = ['Player', 'Team', 'Age', 'G', 'GS', 'Cmp', 'Att', 'Cmp_Pct', 'Yds', 'TDs',\n       'INTs', 'INT_Pct', 'Sacked', 'Y\/A', 'Y\/C', 'GWD', 'Rating']\n\ncols = superdata.columns[superdata.dtypes.eq('object')]\n\n#superdata[cols] = superdata[cols].apply(pd.to_numeric, errors='coerce')\nsuperdata[cols] = superdata[cols].apply(pd.to_numeric, errors='ignore')\n\n\n# superdata.info()\n\nsuperdata['Player'] = superdata['Player'].astype(object)\nsuperdata['Team'] = superdata['Team'].astype(object)\n\n# superdata.info()\n\n\n# display(superdata.to_string(index=False))\n\n# superdata.style.set_properties(**{'width':'7em', 'text-align':'center'})\\\n        #.set_table_styles([d])\n\n# print(superdata.to_string(index=False))\n\n# display(superdata.to_string(index=False))\n\n\n# superdata\n\nsuperdata2 = superdata.copy()\nsuperdata2.index += 1\n\ndisplay(HTML(superdata2.to_html()))\n\n#    superdata.style.hide_index()\n\n\n# import holoviews as hv\n# import panel as pn\n# import panel.widgets as pnw\n\n# df = superdata.copy()\n\n# columns = sorted(df.columns)\n\n# discrete = [x for x in columns if df[x].dtype == object]\n\n# continuous = [x for x in columns if x not in discrete]\n\n# quantileable = [x for x in continuous if len(df[x].unique()) > 20]\n\n# x = pnw.Select(name='X-Axis', value='INTs', options=quantileable)\n\n# y = pnw.Select(name='Y-Axis', value='Cmp', options=quantileable)\n\n# size = pnw.Select(name='Size', value='None', options=['None'] + quantileable)\n\n# color = pnw.Select(name='Color', value='None', options=['None'] + quantileable)\n\n# @pn.depends(x.param.value, y.param.value, color.param.value, size.param.value) \n\n# def create_figure(x, y, color, size):\n#     opts = dict(cmap='rainbow', width=800, height=600, line_color='black')\n#     if color != 'None':\n#         opts['color'] = color \n#     if size != 'None':\n#         opts['size'] = hv.dim(size).norm()*20\n        \n#     return hv.Points(df, [x, y], label=\"%s vs %s\" % (x.title(), y.title())).opts(**opts)\n\n# widgets = pn.WidgetBox(x, y, color, size, width=200)\n\n# pn.Row(widgets, create_figure).servable('Cross-selector')\n\n\n#-------------------------------------------------------------------------\n#-------------------------------------------------------------------------","8483766c":"\n# --- DO NOT TOUCH THIS ---\n\nelements = hv.Dataset(superdata)  # my core data \n\npoints = hv.Points(\n    elements, ['Age', 'INT_Pct'],\n    ['Player', 'Team', 'Age', 'Cmp', 'Att', 'Cmp_Pct', 'Yds',\n     'TDs', 'INTs', 'INT_Pct', 'Sacked', 'Rating']\n)# .sort('Age')\n# , 'INT_Pct'])\n\n# superdata.columns = ['Player', 'Team', 'Age', 'G', 'GS', 'Cmp', 'Att', 'Comp_Pct', 'Yds', 'TDs',\n#        'INTs', 'INT_Pct', 'Sacked', 'Y\/A', 'Y\/C', 'GWD', 'Rating']\n\ntooltips = [('Name', '@Player'),\n    ('Age', '@Age'),\n    ('Interception Percentage', '@INT_Pct'),\n    ('Team', '@Team'),\n    ('Completions', '@Cmp'), \n    ('Pass Attempts', '@Att'), \n    ('Completion Percentage', '@Cmp_Pct'),\n    ('Offensive Yards', '@Yds'),\n    ('Touchdowns', '@TDs'),\n    ('Interceptions Thrown', '@INTs'),\n    ('Sacked', '@Sacked'),\n    ('QB Rating', '@Rating')]\n\nhover = HoverTool(tooltips=tooltips)\n\npoints.opts(\n    tools=[hover,\"crosshair\",\"pan\",\"box_zoom\"], \n    color='red', \n    cmap='Category20',\n    line_color='black',\n    size=10,\n    width=700, \n    height=800, \n    show_grid=True,\n    title='NFL QBs:  Age vs Interception Percentage\\n')\n\n# hv.save(points, 'age_vs_interception_percentage.html', fmt='html')\n\n# plot.circle(\"x\",\"y\",source=source,color=dict(field=\"Genre\", transform=color_mapper), legend='Genre',hover_color =\"red\")\n","695c54ad":"\n# --- DO NOT TOUCH THIS ---\n\nimport holoviews as hv\nfrom bokeh.models import HoverTool\n# from bokeh.sampledata.periodic_table import elements\n# hv.extension('bokeh')\n\nelements = hv.Dataset(superdata)  # my core data \n\npoints = hv.Points(\n    elements, ['Cmp_Pct', 'INT_Pct'],\n    ['Player', 'Team', 'Age', 'Cmp', 'Att', 'Cmp_Pct', 'Yds',\n     'TDs', 'INTs', 'INT_Pct', 'Sacked', 'Rating']\n    \n)# .sort('Age')\n# , 'INT_Pct'])\n\n# superdata.columns = ['Player', 'Team', 'Age', 'G', 'GS', 'Cmp', 'Att', 'Comp_Pct', 'Yds', 'TDs',\n#        'INTs', 'INT_Pct', 'Sacked', 'Y\/A', 'Y\/C', 'GWD', 'Rating']\n\ntooltips = [('Name', '@Player'),\n    ('Age', '@Age'),\n    ('Interception Percentage', '@INT_Pct'),\n    ('Team', '@Team'),\n    ('Completions', '@Cmp'), \n    ('Pass Attempts', '@Att'), \n    ('Completion Percentage', '@Cmp_Pct'),\n    ('Offensive Yards', '@Yds'),\n    ('Touchdowns', '@TDs'),\n    ('Interceptions Thrown', '@INTs'),\n    ('Sacked', '@Sacked'),\n    ('QB Rating', '@Rating')]\n\nhover = HoverTool(tooltips=tooltips)\n\npoints.opts(\n    tools=[hover,\"crosshair\",\"pan\",\"box_zoom\"], \n    # toolbar_location=None,\n    color='green', \n    cmap='Category20',\n    line_color='green',\n    size=10,\n    width=700, \n    height=800, \n    show_grid=True,\n    title='NFL QBs:  Completion Percentage vs Interception Percentage\\n')\n    \n\n# hv.save(points, 'age_vs_interception_percentage.html', fmt='html')","d69a8292":"\n# --- DO NOT TOUCH THIS ---\n\nimport holoviews as hv\nfrom bokeh.models import HoverTool\n# from bokeh.sampledata.periodic_table import elements\n# hv.extension('bokeh')\n\nelements = hv.Dataset(superdata)  # my core data \n\npoints = hv.Points(\n    elements, ['Yds', 'TDs'],\n    ['Player', 'Team', 'Age', 'Cmp', 'Att', 'Cmp_Pct', 'Yds',\n     'TDs', 'INTs', 'INT_Pct', 'Sacked', 'Rating']\n    \n)# .sort('Age')\n# , 'INT_Pct'])\n\n# superdata.columns = ['Player', 'Team', 'Age', 'G', 'GS', 'Cmp', 'Att', 'Comp_Pct', 'Yds', 'TDs',\n#        'INTs', 'INT_Pct', 'Sacked', 'Y\/A', 'Y\/C', 'GWD', 'Rating']\n\ntooltips = [('Name', '@Player'),\n    ('Age', '@Age'),\n    ('Interception Percentage', '@INT_Pct'),\n    ('Team', '@Team'),\n    ('Completions', '@Cmp'), \n    ('Pass Attempts', '@Att'), \n    ('Completion Percentage', '@Cmp_Pct'),\n    ('Offensive Yards', '@Yds'),\n    ('Touchdowns', '@TDs'),\n    ('Interceptions Thrown', '@INTs'),\n    ('Sacked', '@Sacked'),\n    ('QB Rating', '@Rating')]\n\nhover = HoverTool(tooltips=tooltips)\n\npoints.opts(\n    tools=[hover,\"crosshair\",\"pan\",\"box_zoom\"], \n    # toolbar_location=None,\n    color='blue', \n    cmap='Category20',\n    line_color='blue',\n    size=10,\n    width=700, \n    height=800, \n    show_grid=True,\n    title='NFL QBs:  Touchdowns Thrown and Yards Thrown (Mahomes dominates...)')\n    \n","e186fce3":"> **Insight:** &ensp; It makes a big difference what the defensive formation against the pass is.\n\n  * **4-3-4:** &ensp; When a defense ran the 4-3-4, the offense appeared to have a slight advantage in the number of yards passed for, and this makes sense, you only have effectively 4 defensive backs\n  * **4-2-5:** &ensp; When a defense ran the popular 4-2-5, they seemed to have a slight edge against the pass, in comparison to using the 3-3-5\n  * Closebup view [here](https:\/\/tombresee.github.io\/NFL\/average_yards_gained_by_defensive_personnel.svg).\n  ","6d313c03":"> **Insight:** &ensp; There are some unbelievably fast wide receivers in the NFL. Looking at the top 25 fastest non running-backs, we see that wide receivers dominate, with a sprinkle of safeties and corner backs.  Thus another reason to agree that playing cornerback or safety is just super difficult in the NFL when receivers are so blindingly fast. \n\n* Lets take a look at **Tyreek Hill** from the Kansas City Chiefs for a second:\n  * For the top 25 fastest runs, he dominates with **4** of them. \n  * He is universally considered to be one of the very fastest players in the NFL for a few years now (keep in mind we are looking at 2018 season data here and he is still fast in the 2020 season)\n  * Even the Next Gen Stats team did an [analysis](https:\/\/www.kansascity.com\/sports\/spt-columns-blogs\/for-petes-sake\/article246824197.html) of him to determine how fast he really was.  He got a gold medal.\n  * **Sunday November 29th, 2020**: [TORCHES](https:\/\/www.espn.com\/nfl\/story\/_\/id\/30418697\/tyreek-hill-finishes-269-yards-3-tds-dominant-display-kansas-city-chiefs-offense) the Buccaneers for **269** yards receiving and 3 TDs in a dominant display. He is the fifth receiver ever to get 260+ yards and 3 TDs in a game. Why in the world would you play man coverage against him ?  At this date point he leads the NFL with 1,021 yards and 13 receiving touchdowns.\n* A few interesting things about Devin McCourty:\n  * You can call him a captain and a leader, one of the Patriots best defensive players and one of the best safeties in the NFL. But an interesting thing is that he is also one of the most reliable players: As of November 30th, 2020, he has played **10,028 snaps since 2010**. That\u2019s the most snaps played among all NFL defensive players over the last **10 years**. Since coming into the league, [McCourty](https:\/\/www.providencejournal.com\/story\/sports\/nfl\/patriots\/2020\/11\/19\/patriots-devin-mccourty-stays-reliable\/3776669001\/) has started all 164 games he's played in; and hasn't missed a regular-season game since 2015.\n","30e6baa8":"> **Insight:** &ensp; The median age of a 2018 season NFL player was approximately 25 years old, with an average just under 26. The average age of first-round picks in 2018 was 21.7 years old. Although we do not have the actual years of experience player data, it isn't hard to interpolate from the graph above that the average NFL player in 2018 had about 4 years of experience.  \n\n>**2018 Youngest NFL Player** - the 6\u2032 5\u2033, 249 lbs linebacker <u>Tremaine Edmunds<\/u> was only 20 years old when he entered the NFL as a first round pick. At age 20, he became the youngest NFL player ever to record an interception.  He played a great 2018 season (check out his stats, a lot of tackles) and was named a team captain the following year. After starting every game in 2019, in 2020 he was named to the 2020 Pro Bowl ! ","a63e1307":"> **Insight:** &ensp; Wow, there is a major difference in the number of passes attempted by team. Let's dive in:\n\n* **Pittsburg** threw a massive amount of passes.  Two words: Ben Roethlisberger.  At 6'5\" and 240lbs, he literally falls into the specs of a Defensive End, but he can THROW. A resilent QB, he also threw 99.9% of his teams passes. \n* **Seattle** threw the lowest number of passes. But in an amazing stat, Russell Wilson threw for **35** touchdown passes in 2018, <u> the most in team history<\/u> (he also has had a total of 4 seasons throwing over 30 TD, he is a machine).  This was the year that Seattle had a strong running game and continued to use their runningback considerably, ending the season with a solid 10-6 record. \n* Closeup view [here](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/blues3.svg).\n \n  ","528df952":"<div class=\"h4\"><i>3.6 &ensp; Weight vs Height - Defensive Players<\/i><\/div>\n\n\n\n* **Here is what I'm going to do:**\n  * I need a clear manner of visualizing the differences in the structure of the **defensive players**, broken out by weight and height, and I'm going to choose Altair\n  * I want to examine player height and weight, but I also want to see how the defensive players are 'clustered' together by segment (think the mathematical data science term `variance`)\n  * I would imagine a coach\/analyst wouldn't want to just know the individual player stats, but also that stat in *relation* to other NFL players at that same position, and thus we will categorize by player position.  For clarity, I have taken the liberty of combining linebackers (OLB, ILB, and MLB) into a 'Linebacker' category, as well as combining other positions such as nose tackle and defensive tackle into a 'Defensive Tackle' category. \n  * **Remember, in this competition, we do not have information about the actual linemen on both offense and defense (as this competition is focused on pass coverage analysis), but one can extrapolate that most likely they are approximately the same sizes as the Defensive Ends and\/or NoseTackle. This is why you don't see players in the datbase named OT (Offensive Tackle) or DT (Defensive Tackle).**\n  * The goal is a visualization (supporting zoom in and out) that allows comparison of up to 687 defensive positions, interactively, where if I **<u>hover<\/u>** on a point in the scatterplot, I can get the player name, position, nflID, weight, height, and BMI, and if I **<u>click<\/u>** on the point, I am taken to the NFL's website stats for that **individual player**. Want to export the visualization to high res svg ?  Click the triple dot in the chart's upper right to see export options.  Want to focus on certain positions only ?  Click the interactive legend dot for the position of interest and you will see that position only (and all the other positions will be greyed out).  Fast.  Efficient.  Streamlined.  Maybe Altair is growing on ya ? ","c0f9c657":"<div class=\"h4\"><i>1.9 &ensp; Core Assumptions<\/i><\/div>  \n\n1. The **likelihood** that a pass is completed to the receiver is **inversely proportional** to the distance the ball was thrown in the air.  \n  * **Translation:**  The **deeper** the pass, the more unlikely it is to be completed.  The shorter the pass, the more likely it is to be completed. \n2. The **age** of the quarterback is not necessarily correlated with their performance. Outstanding quarterback such as Tom Brady, Drew Brees, Ben Roethlisberger, Aaron Rogers, etc literally prove this.   But for every other position, it **is** correlated, up to a certain point. The human body for athletics naturally degrades after a certain age - but as we know, there are statistical outliers (I'm looking at people like Marshawn Lynch)\n3. WR Separation: As the distance between the receiver and the cornerback\/safety increases, the likelihood of a completed pass in theory should increase.  Although our data may or may not necessarily prove this, I think this is a common sense assumption to make. \n\n4. The speed with which a quarterback throws the football may potentially be linked to completion percentage. This is simply due to the fact that (as we will see and compare), the football travels **much faster** than individual players, making defense harder to cover the field.   \n","22b4de28":"<div class=\"h2\"><i><center>Introduction<\/center><\/i><\/div>","a365a781":"<div class=\"h4\"><i>2.1 &ensp; Summary of our dataset<\/i><\/div> \n<p style=\"margin-top: 50px\">It is always important to look at our entire dataset and examine the descriptive statistics:<\/p>\n","c2a02d7a":"Let's now examine the relationship between the NFL quarterback's completion percentage and and his interception percentage:","2332e755":"<div class=\"h4\"><i>5.3 &ensp; NetworkX Analysis<\/i><\/div>\n\n* Let's leverage the powerful NetworkX python package","09f34d90":"> It's difficult to conclude if the number of defensive players in the box is **that** much of a factor in the offense output on the passing plays.  \n  *  The trend does seem to show that with 8 defensive players in the box, your highest offensive output is possible (and that you will probably get more yards than if there were 5 or 6 or 7 defensive players in the box).  Something is bothering me here.  What are we missing ? Maybe its because we are comparing everyone apples:apples. ","27edf63f":"<div class=\"h4\"><i>4.3 &ensp; Defensive and Offense Formation Permutations<\/i><\/div>\n\n* Lets examine the top 15 Defensive and Offensive Formuations used throughout the season by the NFL teams\n* **Interesting Fact:** &nbsp; There are exactly 57 unique formations for both offense and defense (although we will see many of them are rarely used)\n","6a455204":"<div class=\"h4\"><i>1.2 &ensp; Competition<\/i><\/div>  \n\nThe NFL has again released their Kaggle competition, this year known as the `NFL Big Data Bowl 2021`, using NextGen Stats data.  I also recommend checking out JohnM's excellent \n[Some Best Practices for Analytics Reporting](https:\/\/www.kaggle.com\/jpmiller\/some-best-practices-for-analytics-reporting), really good recommendations he has for reporting methodology during this competition. ","048afe28":"> 2018 Data:  The top 50 (of 250 total) colleges by NFL player origin are shown above, all of which are Division I programs.  What I find interesting is that almost exactly **20%** of all NFL players (a **significant** portion) came from the top 10 colleges listed, and 1\/3rd came from the top 20 colleges.  Of the remaining 200 colleges not shown in the above chart, 100 of them had only a *single* player represented in the NFL, while the other 100 had 9 or less players represented.  Just as a note:  Sometimes I like to put the text at the bottom of the plot describing what I see, and I sort the values in ascending order, so the words are close to the actual part of the visualization I'm referring to...  \n\n**Note:**  At this point, there are 130 total Division I football programs in the NCAA, any school after that is going to be Division II. \n\n**LSU:** Over the years LSU especially has proven to be a hub of getting players to the next level and are well represented with NFL talent.  2019: The LSU Tigers defeated the defending champion Clemson Tigers to win the NCAA football championships, with QB Joe Burrow (now with the Cincinnati Bengals) winning the [Heisman Trophy](https:\/\/www.youtube.com\/watch?v=Zq68naJBdW0) that year.  2020: Continuing an outstanding program, they have *43 former LSU players on NFL teams*, that is really impressive.   \n**Note:**  Everyone on Kaggle is getting this count wrong, you have to realize that the data shows LSU as well as Louisiana State, they are the same university...\n\n**Alabama:** What I find interesting is that they never really seem to have a rebuilding year, they are constantly winning games every season. \n\n**Ohio State:** Standout quarterback [Justin Fields](https:\/\/www.espn.com\/college-football\/player\/_\/id\/4362887\/justin-fields) threw for 3,273 yards and 41 touchdowns, ran for 484 yards and 10 touchdowns in his first season (2019) as its starting quarterback.  NFL cornerbacks be warned - this guy is coming like a freightrain into the NFL next year... \n\n\n**The Florida Region:** The 4th, 5th, and 6th ranked colleges are all based in the state of Florida (with an eye-opening 77 combined NFL players represented)\n","89c2e648":"<div class=\"h4\"><i>1.6 &ensp; NFL Teams by Conference:<\/i><\/div>\n<img src=https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/big_picture.jpg width=\"1200px\">  \n\n <br>\n \n*It is important to understand the breakout by conference, as it will also impact our data analysis. Also, we may be referring to teams by images, the reader should become familiar with the mapping of the NFL team logo to the team name*","777b183c":"> Now we see a better representation of how each team did per game average passing. Tampa Bay and Pittsburg still dominate, but Atlanta is actually third in this ranking... ","021cbce0":"<div class=\"h4\"><i>4.8 &ensp; High Level NLP<\/i><\/div>\n\n* Let's dive into the actual **play descriptions** within the plays.csv file and see if we can derive any insight via the raw text play description. \n* Example:  `(:09) (Shotgun) B.Roethlisberger pass short right to A.Brown to CLV 49 for 19 yards (T.Mitchell).`\n* We will filter out the game clock data at the beginning, we only care about raw text, play variables, etc.  \n* I will remove periods at the end of the sentence, but periods separating first initial and player last name will be converted to underscore to keep NLTK from removing what it thinks is punctuation but is actually the first initial with a period after it. This way we always have the players name and don't lose the first name due to NLTK tokenization.\n* We will capitalize important events like Shotgun, Sacked, and also will change 'No Huddle' to 'SURPISE' as a way of distinguishing the no huddle offense fast tempo. \n","3add8be7":"![image.png](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/frontend.png)","ca5ba3ff":"<div class=\"h4\"><i>4.2 &ensp; Pass Count Distribution per Instance<\/i><\/div>\n\nThe below plot is an exact count visualization of the number of pass plays that occurred in a game, specifically in the entire 2018 season \n* By using the swarmplot (which you don't see very often but it seemed to fit here), we see the precise distribution - and this gives a better representation of the distribution of values (where 1:1 viz, i.e. one dot is one team in one game that had that a specific count of pass plays)\n* We also can **quickly** see the second, third, and fourth most pass play count in a random game\n\n*This requires explaining:*\n* In each of the 253 games played, there were one of two teams throwing the ball.  \n* So for every one of those 506 instances where a team was throwing the ball (253 games x 2 teams), we count the **total number of passes thrown by that team in that individual game**. For each of those, we plot a single dot to represent it.  \n* So looking at our graph, we see a dot just before 20, which represent one team in one game passed the ball a total of only 19 (x-axis value) times. \n* And we also see that on the other end of the spectrum, there were three instances where a team in a game threw the ball over 65 times (66, 67, and 68 passes thrown by a random team in a game). \n* Looking at the x-axis value of 21, we see there were five instances where a team threw 21 total passes.  \n* Looking at the x-axis value of 40, we see that there were a fair amount (24 times) where the ball was thrown by a team 40 times total in a game.\n* What I find very surprising is the vast range in the number of times the ball was thrown in a game.  Many teams rely on their QB, but sometimes they rely on the run (and thus the lower counts of below 30 throws by a team in a game. \n* We see that there are a lot of times where a team will throw anywhere from 30 to 45 passes in a game, but we also see a fair amount of times where a team throws 46 or more times in a game.  \n* Diving deeper, we will find there are some teams that like to throw the ball alot, some that throw an average amount, and some who avoid the pass if they have a star runningback. \n* Closeup image of below available [here](https:\/\/tombresee.github.io\/NFL\/bluedots.svg).\n","2de51492":"![](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/orangeonblue2.svg)","c4055d83":"<div class=\"h4\"><i>1.3 &ensp; How does Next Gen Stats work ?<\/i><\/div>  \n\n* Every NFL player on the field (both on offense and defense) during **active plays** is tracked in terms of the capturing of their real-time location data, speed and acceleration \n* Sensors throughout the stadium track radio frequency identification (RFID) [tags](https:\/\/specials-images.forbesimg.com\/imageserve\/5d4986d437f1f90008ec65d3\/960x0.jpg?fit=scale) placed within the players' [shoulder-pads](\nhttps:\/\/d1.awsstatic.com\/AWS%20Sports\/AWS%20Sports%20Home\/NFL_ShoulderPads_Landing_v3_02.2d1c118e65b3682e37d268eb3a622b8588152611.mp4), charting movements in a highly accurate manner\n* The actual football is <u>also<\/u> tracked as an independent entity, opening up intriguing possibilities for analysis...\n* All real-time data is processed entirely on an advanced machine learning based Amazon Web Services (AWS) infrastructure. Data is streamed towards the NFL stats [page](https:\/\/nextgenstats.nfl.com\/).  FYI, Data Scientists call this a <i>pipeline<\/i>. \n* RFID tags:  Designed by Zebra Technologies (official on-field player-tracking technology partner of the NFL), they consist of an integrated circuit (IC) attached to an antenna typically a small coil of wires plus some protective packaging as determined by the application requirements.  They are active in this case and not passive. \n* Follow NextGenStats [Twitter](https:\/\/twitter.com\/NextGenStats), you will never look at NFL football the same again\n* These real-time stats on players create a **deeper fan experience** and the NFL should be complimented on their choice to push the boundaries of analytics\n\n","4e92006b":"All games played in the entire season shown below:","8dc49da4":"According the NFL, the schedule is actually based on this [scheme](https:\/\/operations.nfl.com\/the-game\/creating-the-nfl-schedule\/#:~:text=The%20NFL's%20scheduling%20formula%20ensures,National%20Football%20Conference%20(NFC)):  \n* Six games against divisional opponents \u2014 two games per team, one at home and one on the road.\n* Four games against teams from a division within its conference \u2014 two games at home and two on the road.\n* Four games against teams from a division in the other conference\u2014 two games at home and two on the road.\n* Two games against teams from the two remaining divisions in its own conference \u2014 one game at home and one on the road. \n\nWe can extend our model to show when a team plays two teams in the regular season as well with the NetworkX edge 'weight' parameter. \n\n  ","aa204960":"<div class=\"h3\"><i>5. &ensp; Deep Dive<\/i><\/div>   <br>\n\n<div class=\"h4\"><i>5.1 &ensp; Baseline - Speed<\/i><\/div>\n\n* To give credit where credit is actually due, lets scrape the official NFL Next Gen Stats 'Fastest Ball Carriers' for the [2018](https:\/\/nextgenstats.nfl.com\/stats\/top-plays\/fastest-ball-carriers\/2018\/REG\/all) regular season and filter for the positions we are examining to see who were the very fastest, and get an idea of what speed in mph is considered ultra-high. [data source](https:\/\/github.com\/larsjaakko\/nextgenstats-spider\/blob\/master\/data\/fastest-ball-carriers\/ngs_fastest-ball-carriers_2018_reg.csv)","e3716320":"Let's try one last view here, for all players (offense and defense).  Imagine you are looking straight down on a mountain range, the peaks are darker and represent number of players fitting that heigh\/weight combination...","6bc74089":"<div class=\"h4\"><i>3.3 &ensp; Acryonyms<\/i><\/div>\n\nMany times you will see the positions via the below acronyms.  CB is a term you will see alot in this analysis since it is usually the player that tackles the receiver (WR). It is important to become familiar with the positions and whether they are defense or offense (thus the breakout below). \n\n\n**Defense:**\n* CB: &nbsp; &nbsp;  Cornerback\n* S:   &nbsp; &nbsp; &nbsp; Safety\n* SS: &nbsp; &nbsp;  Strong Safety\n* FS: &nbsp; &nbsp;  Free Safety\n* DB:  &nbsp; &nbsp; Defensive Back\n* DE: &nbsp; &nbsp;  Defensive End\n* DT: &nbsp; &nbsp;  Defensive Tackle\n* NT: &nbsp; &nbsp;  Nose Tackle\n* LB:  &nbsp; &nbsp;   Linebacker\n* ILB: &nbsp;  Inside Linebacker\n* OLB: &nbsp;  Outside Linebacker\n* MLB: &nbsp;    Middle Linebacker\n\n \n**Offense:**\n* WR: &nbsp; Wide Receiver \n* QB: &nbsp; &nbsp;  Quarterback\n* RB: &nbsp; &nbsp;  Runningback\n* FB: &nbsp; &nbsp;  Fullback\n* T: &nbsp; &nbsp; &nbsp;  Tackle\n* C: &nbsp; &nbsp;  &nbsp; Center\n* TE: &nbsp;  &nbsp; Tight End\n* K: &nbsp; &nbsp;  &nbsp; Kicker\n* P: &nbsp; &nbsp;  &nbsp; Punter\n\n\n\n**Thoughts:**\n* DB:  Defensive Backs (which include the cornerback and safeties) are also known as the 'secondary' and play outside the linebackers (or near the sidelines).  They are your first line of defense against the pass. \n","59e87a5a":"![](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/avg_passing_yds_per_game_by_team.svg)","dfbc3d5b":"<div class=\"h4\"><i>1.4 &ensp; The NFL Teams:<\/i><\/div>\n<img src=\"https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/teams.png\" width=\"500px\">\n\n\n","5965bbfd":"<div class=\"h2\"><i><center>Data<\/center><\/i><\/div>","6697abe5":"<div class=\"h2\"><i><center>The Plays<\/center><\/i><\/div>","464229b3":"The above two charts are also available full screen view [here](https:\/\/tombresee.github.io\/NFL\/offense_players_by_height_weight.html) and [here](https:\/\/tombresee.github.io\/NFL\/defensive_players_by_height_weight.html), maybe a touch easier to see...","2a3199f4":"<div class=\"h2\"><i><center>The Players<\/center><\/i><\/div>","7dc67e63":"<div class=\"h4\"><i>1.5 &ensp; All NFL Teams (Tabular):<\/i><\/div>","79f8cb2e":"<div class=\"h4\"><i>3.9 &ensp; Top 10 reasons why cornerback is the hardest position to play in the NFL<\/i><\/div>\n\n1. You have to be extremely athletic (like elite level)\n\n2. You are going against wide receivers that most likely are former track stars.  You must be next-level fast. \n\n3. You don't know the offensive play, you are completely in the dark on where the play will go. And as such, you have to be able to react in numerous different ways. It could be argued that every second you play cornerback (or safety for that matter) in a game, <u>**you are at a disadvantage**<\/u>. \n\n4. You have to be able to run **backwards** extremely fast.  Backpeddling has to be second nature.  Which is not second-nature to **anyone** without massive amounts of practice.  \n\n5. You have to cover two people at the same time.  If you think about it, you have to cover the receiver, but at the same time you have to see where the QB is looking, his release, where he is aiming to throw the ball, etc.  And just like covering two people at the same time is basically impossible, you will have to turn your back to one or the other for milliseconds at a time, and adjust and react as you turn back around.  \n\n6. The person you are covering is most likely taller than you.  With longer arms.  Which means you basically have to a master of all of the combine skills.  High vertical, fast cone time, unbelievable quickness, and the ability to chase down a ball.  Without in any form causing a penalty.   \n\n7. You run in traffic.  The game of football in the NFL is played at an extremely fast rate.  And there are a lot of players in close proximity to you.  \n\n8. You will inevitably be tasked with covering someone that is extremely good at their job.  A wide receiver doesn't make the NFL unless he is elite.  And given how critical the position wide receiver is for the offense scoring or winning the game, you are basically going against one of the other team's best playmakers.  Your instincts have to be borderline supernatural.  \n\n9. You have to be able to **tackle** well.  This is tricky, because you won't most likely be that large, but you are tasked with tackling quite a few people during the game. Wide receivers and anyone on offense don't need to necessarily know how to tackle well, but as a defensive player in the middle of the football field, you **must** have the ability to tackle in the open field.  Against players that are running with a full head of steam. That run 4.3 s dashes.  The position of cornerback requires a certain level of **toughness**. \n\n10. You are a firewall.  IF you do your job well, most likely people won't even catch on to how well you play the position, because either the QB won't throw near you, or when they do throw near you, you keep the receiver from catching the ball thrown to him in subtle ways.  But IF you get burned, if you have a receiver blow pass you and catch a touchdown pass, everyone in the stadium (and millions of people watching) knows its your fault.  And just like a firewall, when things are going well no one really knows but when things blow up, things **really** blow up. In some ways it is a thanksless position. Worse yet, if you get burned, the other team now will target you mercilessly, in any attempt to score off you and win the game. You look like you are hurt or slow or your ankle hurts?  The next pass is going right near you. **You have to be on every second of every down you play.**  \n\nRead [this](https:\/\/www.theplayerstribune.com\/articles\/richard-sherman-seahawks-what-you-dont-know-about-cornerback), it will help you understand. \n","dee7414a":"> Remember:  We have one missing game worth of data for the following six teams:\n  * SEA, DEN, KC, LAC, MIN, SF (which we can see skewed our total results)\n  * Thus to be fair, we will plot the average pass yards achieved per GAME below (closeup [here](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/avg_passing_yds_per_game_by_team.svg))\n","7c29feca":"<div class=\"h4\"><i>3.1 &ensp; Respect<\/i><\/div>\n\nAll attempts have been made to focus on analyzing the NFL (National Football League) Next Gen Stats data for patterns, trends, and insights into NFL defensive plays, and NOT discuss individual players and their individual set performance in a negative fashion.  NFL players have honed their skills for years to be elite-level athletes, and they deserve our respect, because they have earned it.  It is my personal opinion that it is not fair to call out the lower performing athletes when it comes to speed or acceleration or set parameters - mainly because saying an NFL player is in the bottom tier of performance for such a competitive sport is like making fun of a guy that goes to the Olympics and gets 5th place in the world, it is simply nonsense.  I believe it is important to a certain extent to anonymize the data when discussing individual performance...I will however describe rankings by TEAM in certain categorical analysis. As data scientists, our job is to objectively analyze the datapoints, without bias.  \n<br>\n\n\n**2018: &nbsp; To level-set just how elite NFL players are:**\n* *Data Sources:* \n  * [2019 NCAA Probablility of Competing Beyond High School](http:\/\/www.ncaa.org\/about\/resources\/research\/football-probability-competing-beyond-high-school)\n  * [2017-18 High School Athletics Participation Survey](https:\/\/members.nfhs.org\/participation_statistics)\n* Number of college-level football teams in the United States: &nbsp;  774 \n* Number of Division I college-level football teams in the United States: &nbsp; 130\n* Number of college-level football players: &nbsp;  73,557\n* Number of college-level football players that are NFL draft eligible: &nbsp; 16,346\n* Number of high school level football players:&nbsp;  <span style=\"color:red\">1,036,842<\/span>  \n  *That is not a typo. There are over 1 million high schoolers playing football right now.*\n* Football is the **most** popular sport in America (a country with a population of over 327 million)\n* IF you are a statistical anomaly physically, you **may** be able to get into the NFL via the path of attending a Division II college (maybe), but most likely it will be via Division I.  \n* Probability of getting into a Division I college football program from high school: &nbsp; 2.8%\n* Probability of getting into the NFL from college football program: &nbsp; 1.6% \n* <span style=\"color:red\">Total number of college players drafted into the NFL last year:&nbsp; <b>256<\/b><\/span>","b9aa38cb":"<div class=\"h4\"><i>2.2 &ensp; The Ball<\/i><\/div> \nAs directly quoted by the NFL Rulebook:\n\n* *The Ball must be a \u201cWilson,\u201d hand selected, bearing the signature of the Commissioner of the League, Roger Goodell. The ball shall be made up of an inflated (12\u00bd to 13\u00bd pounds) urethane bladder enclosed in a pebble grained, leather case (natural tan color) without corrugations of any kind. It shall have the form of a **prolate spheroid** and the size and weight shall be: long axis,11 to 11\u00bc inches; long circumference, 28 to 28\u00bd inches; short circumference, 21 to 21\u00bc inches; weight, 14 to 15 ounces.*\n\n>For those unaware of a prolate spheroid, please see this [image](https:\/\/en.wikipedia.org\/wiki\/Spheroid#\/media\/File:Spheroids.svg)\n\n","bdd7a003":"<div class=\"h4\"><i>1.1 &ensp; Current Notebook Status<\/i><\/div>  \n\n\n* **Author:** &nbsp; Tom Bresee\n* **Contact Email:** &nbsp; tbresee@umich.edu, or tom.bresee@t-mobile.com\n* **Location:** &nbsp; Frisco, Texas\n* **LinkedIn:** &nbsp; [Tom Bresee](https:\/\/www.linkedin.com\/in\/tombresee\/)\n* It is the intention that this be a living document that is updated relatively frequently, as new ideas are incorporated.  Please check back periodically, the plan is to add quite a bit.  Upvotes are always appreciated if you like the visualization approaches. * All work is my own.\n* **Deep Data Inspection** (DDI) approach - a term I am creating.  This will be defined as a complete battery of tests on our dataset, trying to see the full spectrum of what it has to offer in terms of insight. Think a combination of EDA, statistical analysis, and subject matter expertise tactical analysis (SMETA) rolled into one.   \n* **Visualization** will be a combination of static Seaborn, interactive\/non-interactive Altair, and interactive Bokeh plotting libraries.  I've become a recent fan of [Altair](https:\/\/altair-viz.github.io\/), it has a clean interface, and is suprisingly not used as much as I think it could be. I think we as a data science community should examine this plotting library, it has a fair amount of advantages and represents alot of work done by [Jake VanderPlas](https:\/\/twitter.com\/jakevdp?lang=en) \n* **Embedded Links:** &nbsp; Periodically I will add external links to my github.io page where I host some of the interactive visuals, just a touch easier to see and you have a wider screen, they are worth checking out... \n* **Reproducibility:** \n - If you want to download this notebook from Kaggle, just click the triple dots in the upper right of this notebook, click `Download code`, and then save to your local folder. Or if you want to, you can download notebook from my github repo directly from [here](https:\/\/github.com\/tombresee\/NFL-Big-Data-Bowl-2021\/tree\/main\/ENTER\/jupyter_notebooks\/kaggle_final_notebook). \n - This notebook assumes all source data is contained in this folder: `\/kaggle\/input\/nfl-big-data-bowl-2021`\n - I personally prefer to use the kaggle python API to download the raw data files via command:  `kaggle competitions download -c nfl-big-data-bowl-2021`, or you can always download data zipped file from [here](https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2021\/data).","5052bb4e":"<div class=\"h4\"><i>4.7 &ensp; Season View - Pass Yards<\/i><\/div>\n\n* Let's grab a random team, we will choose Tampa Bay Buccaneers. \n* We will build a full season view of each pass and its yard outcome, to have as a python function when we wish to use to compare teams","c65cfef5":"<div class=\"h4\"><i>5.2 &ensp; Speed<\/i><\/div>\n\n* Now let's aggregate all of our data, merge, and start looking at individual player speeds throughout the weeks\n* Note:  Upon aggregation of all 17 weeks of positional data, we have **18,309,388** actual samples of data.  Nice job NFL giving us enough data to derive insights, this should be good ! ","f8ae247b":"Click [here](https:\/\/tombresee.github.io\/NFL\/interactive_game_nodes_2.html) for a clean interactive view of all games...I think this is a really good way of showing the matchups...  \n\n![image.png](attachment:image.png)","8c1d570f":"> Ok, now we are getting somewhere:\n * **Total Number of Passes:** &ensp; 19,239\n * **Completed Passes:** &ensp; <font color=\"green\"><b>59.1 %<\/b><\/font>\n * **Incomplete Passes:** &ensp; <font color=\"#F6BE00\"><b>31.9 %<\/b><\/font>\n * **QB Sacks:** &ensp; <font color=\"orange\"><b>6.8 %<\/b><\/font>\n * **Interceptions Thrown:** &ensp; <font color=\"red\"><b>2.2 %<\/b><\/font>\n * In other words, 11,370 completed, 6,135 incomplete, 1,308 QB was sacked, and 420 total interceptions of that total 19,239 number of throws...\n * Would you have guessed that only 59.1 % of NFL passes throw in the 2018 season were completed ?   Another way of looking at this is that there was a 40.9 % chance that the pass was **NOT** completed...now we need to see if we can correlate <b>why<\/b> passes are not being completed when they are not successful...\n * Remember, as we progress, its important to keep in mind that for the purposes of this analysis, passing plays are considered to be ones where a pass was thrown, the quarterback was sacked, or any one of five different penalties was called (defensive pass interference, offensive pass interference, defensive holding, illegal contact, or roughing the passer).\n * Closeup view [here](https:\/\/tombresee.github.io\/NFL\/play_outcomes.html).","6d39ada3":"<div class=\"h3\"><i>3. &ensp; Player Data<\/i><\/div>","0baae0d4":"<div class=\"h4\"><i>3.2 &ensp; Football Player Jersey Numbers<\/i><\/div>\nJersey numbers are considered important\/lucky\/sentimental to NFL players. This is a quick breakdown of which jersey number is mapped to which football position.    \n\n* 1 - 19:  &ensp;  &ensp;  Quarterbacks, punters, and kickers\n* 20 - 49: &nbsp; Running backs and defensive backs\n* 50 - 59: &nbsp; Centers\n* 60 - 79: &nbsp; Defensive linemen and offensive linemen \n* 80 - 89: &nbsp; Receivers and tight ends \n* 90 - 99: &nbsp; Defensive linemen and linebackers\n\n","7cef293b":"![](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/explain.png)","0354f3ea":"Showing different layouts that are [extensible](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/cowboy_star.svg):\n<br>\n![](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/cowboy_star.svg)\n\nBut why is this important ? Because in a PERFECT world all teams would play **each other** once, but we have *clusters* of teams playing one another, which opens up the intriguing and challenging task of trying to derive defensive insight when not every team plays one another... something we will need to take into consideration when we try to state relationships between yards gained vs set players or teams or conferences... Check out **Section 5.2** as we dive deeper into this... ","2dbdece3":"> Insight:  Ok, this is more helpful than I would have thought:\n * The play description included the word `right` more often than `left`.  Why ?  Maybe because quarterbacks are almost always right-handed and in general may prefer to throw a bit more to the right than left ?  Quarterbacks also like to roll out to their strong side, could be related.  But the fact that the word `middle` is quite a bit less common compared to `right` and `left` may be a stronger indicator that quarterbacks consider throwing up the middle a touch dangerous, something they may try to avoid...\n * Shotgun as we saw earlier is a bit more preferred as an offensive formation, especially since it give the QB more time to see the field, react, and throw the ball to the receivers...\n * No Huddle offenses are surprisingly common (denoted by the word `SURPRISE`)\n * Lots of references to `SACKED`.  It happens when you try to throw the ball a touch more than I would have estimated.\n * `PENALTY` was more frequent than `TOUCHDOWN`, indicating we may want to focus on the penalty aspect in our analysis due to its suprising frequency...\n * In terms of player names referenced, you see big shot quarterbacks like Ben Roethlisberger, Andrew Luck (we need you back buddy), Aaron Rogers, Dak Prescott (our prayers are with you), Tom Brady, etc.   \n ","2c8dff81":"![](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/blues3.svg)\n","7594436f":"<div class=\"h4\"><i>3.8 &ensp;Position Breakout<\/i><\/div>\nLet's examine the distribution of players by position.","5fa28421":"<div class=\"h2\"><i><center>Deep Dive<\/center><\/i><\/div>","a551c2c9":"<div class=\"h4\"><i>3.4 &ensp; Colleges that NFL Players Attended<\/i><\/div>  \nLet's examine the origin of each NFL player, and what university they attended prior to entering the NFL. \n","1c99c621":"<div class=\"h4\"><i>4.6 &ensp; Pass Outcomes<\/i><\/div>\n\n* We will examine the number of passes thrown and their individual outcomes\n* The NFL was nice enough to provide the breakout of pass results:\n  * **passResult:** Outcome of the passing play (C: Complete pass, I: Incomplete pass, S: Quarterback sack, IN: Intercepted pass)\n  * Let's plot these play outcomes, and use color very **selectively** to highlight when things go well, or when they go wrong...","dd8a23a0":"> Closeup available [here](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/player_height_distribution.svg)","b78d2239":"<div class=\"h3\"><i>4. &ensp; Plays<\/i><\/div>   <br>\n\n<div class=\"h4\"><i>4.1 &ensp; Pass Attempts<\/i><\/div>\n\n* Lets filter our plays data for all of the **pass attempts**, and break it out by NFL team for the season.  ","879e2c16":"<div class=\"h3\"><i>1. &ensp; Introduction and Background<\/i><\/div>","2548047d":"<div class=\"h4\"><i>3.5 &ensp; Weight and Height<\/i><\/div>\n\n\n* **Let's examine high level the distributions:**\n  * We will overlay the KDE (kernel density estimate) onto the histogram for trend analysis \n  * We will examine weight, and then height, in three different views\n  ","51bf83c5":"Let's only show Dallas Cowboys games:","7decbae3":"What is flexible about this approach is that I can now plot schedules by a specific [team](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/cowboys_games.svg):\n<br>\n![cowboys](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/cowboys_games.svg)\n\n\n","1d0d5265":"> Drew Brees of the New Orleans Saints was spectacular in 2018 (hover over blue dot in bottom right)\n\n> Closeup view of above image [here](https:\/\/tombresee.github.io\/NFL\/cpt_pct_versus_int_pct.html)\n\n\n> In my opinion, the two best quarterbacks currently in the NFL (2020 Season, ignoring Tom Brady and Patrick Mahomes), are Drew Brees and Aaron Rogers.  In 2018, we see that Drew Brees had a masterful season, with an extremely low interception rate, and an extremely high completion percentage.  It is startling how much of an outlier he is in comparison to the other top 20 quarterbacks in the 2018 season\n\n> Although he has an extremely low interception percentage rate, Aaron Roges does not have near the completion percentages that some of the other quarterbacks had.  \n","02da7027":"> **Insight:** &ensp; One can easily see now the differences between running backs and full backs, where full backs have some 'density' to them (as they block or rush for short yardages leveraging their higher weight).  Imagine trying to tackle the 311lb full back outlier Patrick Ricard (blue dot to the far right). Quarterbacks tend to be tall, with only the Tight ends taller than them on average... \n","87658eaa":"> **Insight:** &ensp; A few things pop out right away.  A vast range in player weights ranging from 160 to over 350 pounds (that is a delta of 90 pounds) !  Cornerbacks (blue) are in the lower left quadrant, with lower weight and surprisingly low heights (we will come back to this when we compare offensive receivers vs defensive cornerbacks). They are built for speed and quickness.  Defensive Tackles (red) can range in height from 6' to as high as 6'8\" tall and are by far the heaviest cluster by category !  Looking at the data holistically, we immediately can see they also have the highest 'variance' or ranges in height and weight.  Defensive Ends (orange) are lower weight than one would think for a lineman, but are taller and we will find actually faster than most linemen.  Zoom out until you see the dots converge to clusters of player position regions, we can derive even more insight.   \n","f3a89c8d":"<div class=\"h4\"><i>1.7 &ensp; Some General Data<\/i><\/div>  \n\n* As a point of reference, in general there are ~ 150 total plays in a game historically.  In our case, we are ONLY examining passing plays by the teams, and thus on a per game basis, the play count will be less. \n* In 2018, the Raiders were based out of Oakland and thus the designation `OAK` as a reference in our datasets, but later they will move to Las Vegas and be known as `LV`\n* **Careful:** &nbsp; There are two Los Angeles teams (Los Angeles Chargers known as `LAC`,  and Los Angeles Rams known as `LA`)\n\n* **READ:** In a regular season, each team should play a total of 16 games.  This means there should be a total of 256 games played in the NFL season. (i.e. each of the league's 32 teams play a 16-game schedule, with one bye week for each team).  \n * It appears there are only 253 games in our dataset, **which means 3 games are missing**\n * Why is this important ?  Because this means we are missing the data for 3 games, which represents 6 individual teams will have slightly lower offensive stats, defensive stats, etc. This is approximately a 6.25 % difference, and something to very much keep in mind.\n * The actual teams missing that data:  SEA, DEN, KC, LAC, MIN, SF ! \n* The 2018 NFL season was the 99th season of the National Football League (NFL). The 2017 defending Super Bowl champions were the Philadelphia Eagles.  In the 2018 season, the AFC Champion New England Patriots and the NFC Champion Los Angeles Rams battled in the Superbowl, with the Patriots defeating the Rams 13\u20133 for their sixth Super Bowl championship and their third title in five years.\n","09d0dfa0":"Ok, this is pretty good.  We have x-coordinate field location, y-coordinate field location, speed (s) in yards\/sec, acceleration in yards\/sec^2, player direction during the timestamp, their position, the play and game unique identifier, etc.  I love how we also ahve the route type (HITCH) in this case. Kaggle and the NFL were nice enough to also break out for each type of data files what the features mean [here](https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2021\/data). In our aggregated and merged week dataset, we know that the key variables are gameId, playId, and nflId, all of which can help us join this data with the game dataset, the player dataset, and the play dataset (think conventional database joins). See below: ","c879d235":"<br>","e060fe18":"> This is extremely insightful:  We can see all NFL players by position and their weights.  Defensive Tackles are enormous, and cornerbacks are some of the smallest guys out there. Closeup available [here](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/player_weight_distribution.svg). ","dbc7ea75":"<div class=\"h4\"><i>3.7 &ensp;Age and Experience - NFL Players<\/i><\/div>\nLet's create a plot for the 2018 NFL season players breakout by age distribution. It does <b>not<\/b> make sense to show their birthdate or birthdate years, as this is hard to then conceptualize how old they are based on their birthdate. Thus we will mathematically derive their age for the 2018 NFL season, and plot it with a histogram to understand the distribution of player ages. \n","54a6161f":"A view of the data tables and their key links [here](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/data_tables.jpg):\n\n![tables](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/data_tables.jpg)","449ba337":"![image.png](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/bluedots.svg)","274e9ad0":"Examining Interception Percentage for QBs as a function of Age\n\nCloseup view of above image [here](https:\/\/tombresee.github.io\/NFL\/age_vs_interception_percentage.html). \n\nThe ability to NOT throw an interception in the NFL is one of the most prized assets a QB can have.  Nothing loses a team momentum more than turning over the ball\n\nExamining our 2018\/2019 data, we see that **Aaron Rogers** was by far the most precise quarterback in the NFL, throwing only TWO interceptions in an entire season pass attempts of 597.  The beauty of data science when applied to sport analytics is to uncover how good an athlete is on a performance scale, and here we see that Aaron Roger is head and shoulders above every other QB in the NFL on this scale.  We would find also in 2020 Aaron Rogers had a spectacular season, very likely to win the NFL MVP Award, just missing out on the Superbowl game in a loss to Tom Brady\u2019s Tampa Bay Buccaneers\u2026  \n\nWho was the second best QB in terms of precision ?  Drew Brees, who once again in 2020 we will find had a spectacular season in 2020 as well","8fa86508":"Let's now examine the relationship between the NFL quarterback's age and his interception percentage, in a fully interactive view (click on dot to see the QB's deep stats):","e999cbb7":"<div class=\"h4\"><i>4.5 &ensp; 2018 Season - Total Offensive Yards by NFL Team<\/i><\/div>\n\n* The beginning of our deep dive will be investigating on a team basis which teams performed the best offensively, so we can start mapping them to the defensive schemes and teams that they faced to understand what works and what doesn't on defense. \n* See below diagram or closeup [here](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/orangeonblue2.svg)\n","374fcf67":"Taking a look at a single random sample datapoint to get a feel for the features:","584b5e83":"<div class=\"h4\"><i>5.4 &ensp; Web Scraping for Additional Information to merge\/join to my master dataset:<\/i><\/div>\n\n* Our additional data source will be: https:\/\/www.pro-football-reference.com\/years\/2018\/passing.htm\n* I am specifically interested in passing stats for the top 20 QBs (by passing attempts only for now)  in the 2018\/2019 season, and will import all QB-level KPIs (key performance indicators) I can poll:","33b8317a":"<div class=\"h3\"><i>2. &ensp; Our Data<\/i><\/div>  ","9459262c":"> Now we are getting somwhere.  It looks like we can assume safely that the underlying distribution of specifically our NFL player height data are gaussian in nature.  This means we can pull some solid statistical moves later. ","3522c363":"> I think this is a nice clean visualization to show the distribution of pass distances, and the nice part is it can encompass an entire season for the team (high chart density factor).  Closeup images can be found [here](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/tampa_bay_passes_all_season.svg) and [here](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/pit_passes_all_season.svg). I would be interested in feedback on these types of visualization, and if they are helpful. I will superimpose a few teams onto the same visualiation at some point and post.  ","c214843a":"<div class=\"h4\"><i>2.3 &ensp; 2018 NFL Regular Season View<\/i><\/div> \n\n\n  * So let's do this:  \n  * Import all of the 2018 regular season game matchups (team A vs team B) \n  * Create a NetworkX-based construct ([NetworkX](https:\/\/networkx.org\/) is a Python language software package for the creation, manipulation, and study of the structure, dynamics, and function of complex networks)\n  * Map all of the NFL regular season games to this graph-based construct\n  * Create it in a very specific dimension to mimic the actual ball, with scalable vector graphics\n  * We have the beginning of what we can leverage as a very insightful approach:  We have network nodes or vertices (NFL teams) with edges (games) and attributes for the nodes (conference\/division).  We can grow this to show 'relationships' in who matches up well or not later in this notebook\n  * All Games Played:  And thus you have what I will call <font color='firebrick'> Prolate Spheroid Seasons Composite View:<\/font><br> [closeup](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/spheroid_prolate.svg), or NetworkX [circular](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/game_schedule.svg) layout...\n  \n ![](https:\/\/raw.githubusercontent.com\/tombresee\/NFL-Big-Data-Bowl-2021\/main\/ENTER\/images\/spheroid_prolate.svg)\n\n\n ","f8ced19c":"#### Yards Gained vs Defensive Formation:\nNow let's examine the yards gained on the pass versus the type of defensive front or formation presented. \n\n","edb90268":"![title](https:\/\/www.nbcsports.com\/sites\/nbcsports.com\/files\/styles\/gallery_image\/public\/2015\/09\/05\/ricesanders.jpg?itok=DW_W9-9_&timestamp=1441451418)\n<br>&ensp; *Matchups determine pass outcomes. All Time Great Rivalries:  Deion Sanders (CB) trying to stop Jerry Rice (WR)*","ed7d93fb":"<div class=\"h4\"><i>4.4 &ensp; Defenders in the Box<\/i><\/div>\n\n* Defenders in the box can be correlated with a direct amount of pressure on the quarterback (more linemen rushing the QB changes the dynamic of the play)","3fe2628a":"All teams shown below:","f05119cc":"<div class=\"h4\"><i>1.8 &ensp; Why the focus on Defense ?<\/i><\/div>  \n\n* According the NFL:  '*Teams combined to score 1,371 total touchdowns, the most in a single season in NFL history, while the 11,952 total points scored are the second-most in league history*' \n* Quarterbacks keep getting better, and offenses over the years have appeared to morph with the time, but it possible that defensive formations and play innovation have lagged offense.  \n","a8625414":"> This look almost like a perfect gaussian, but how can we prove that the NFL player's height values are inherently close to a theoretical gaussian distribution ?  Enter scipy's powerful Q-Q plot library. If our variable follows a normal distribution, the quantiles of our variable would be very close in line with the \u201ctheoretical\u201d normal quantiles: a straight line on the QQ Plot tells us we have close to a normal distribution.\n\n"}}