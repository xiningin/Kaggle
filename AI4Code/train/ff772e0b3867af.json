{"cell_type":{"7d84af38":"code","ebce44ed":"code","576ae7ee":"code","df39b5bd":"code","c3e0f30c":"code","ea022499":"code","b3868c1c":"code","41147903":"code","3c0fe883":"code","334dc149":"code","481638c4":"code","3b3aba54":"code","88d952a7":"code","5c21b491":"code","848df34f":"code","b1bf4be4":"code","f4ccda5c":"code","3a803d37":"code","ed761789":"code","34923400":"code","d01617e7":"code","d44d3fb7":"code","e845f335":"code","2f9c0a4d":"code","0effe946":"code","2c1d369b":"code","9a2157de":"code","c1e1a5ff":"code","5422df2f":"code","252b3902":"markdown","7a7090d5":"markdown","92790687":"markdown"},"source":{"7d84af38":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n\n\n","ebce44ed":"file = \"\/kaggle\/input\/health-care-data-set-on-heart-attack-possibility\/heart.csv\"\ndf = pd.read_csv(file)\ndf.head()","576ae7ee":"import pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold, KFold\nfrom sklearn.model_selection import cross_val_score\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nplt.rcParams['figure.figsize'] = [15, 5]","df39b5bd":"df.shape","c3e0f30c":"df.isnull().sum()","ea022499":"df.dtypes","b3868c1c":"df.describe()","41147903":"X = df.iloc[:,:-1]\ny = df.iloc[:,-1]","3c0fe883":"X[\"cp\"].value_counts()","334dc149":"y.value_counts()","481638c4":"fig = px.bar(x=y.unique(), y=y.value_counts(), title=\"Clases\", labels={'y':\"Frecuencia\"})\nfig.update_xaxes(title=\"Values\")\nfig.update_layout(\nxaxis = dict(\n    tickmode = \"array\",\n    tickvals = [0,1],\n    ticktext = [\"NO\", \"YES\"]\n))\nfig.show()","3b3aba54":"X.hist(figsize=(16,20));","88d952a7":"df.groupby(\"target\").mean()","5c21b491":"table_sex = pd.crosstab(df.sex, df.target)\ntable_sex\ntable_sex.div(table_sex.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, title=\"Sex - target\",ylabel=\"counts\").set_xticklabels([\"Female\", \"Male\"]);","848df34f":"sc = StandardScaler()\nX_sc = sc.fit_transform(X)\nX_sc[:,:5]","b1bf4be4":"X_train, X_test, y_train, y_test = train_test_split(X_sc, y, test_size=0.3, random_state=420)","f4ccda5c":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\nprint(\"Accuracy on Test Set: {:.2f}\".format(logreg.score(X_test, y_test)))","3a803d37":"from sklearn.metrics import confusion_matrix\nconfusion_matrix = confusion_matrix(y_test, y_pred)\nprint(confusion_matrix)","ed761789":"from sklearn.metrics import plot_confusion_matrix\n\nplot_confusion_matrix(logreg, X_test, y_test, display_labels = [\"0\",\"1\"], cmap=plt.cm.Blues, normalize=\"true\")\nplt.title(\"Confusion Matrix\");","34923400":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","d01617e7":"#binary roc\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve\nlogit_roc_auc = roc_auc_score(y_test, logreg.predict(X_test))\nfpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(X_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label='Logistic Regression (area = %0.2f)' % logit_roc_auc)\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic')\nplt.legend(loc=\"lower right\")\nplt.savefig('Log_ROC')\nplt.show()","d44d3fb7":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\n\nscores = cross_val_score(logreg, X_sc, y, cv=10)\nprint(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))\n# skf = StratifiedKFold(n_splits=10, random_state=420,shuffle=True)","e845f335":"# print(logreg.predict([f]))\n# print(logreg.predict_proba([f]))","2f9c0a4d":"!pip install shap\nimport shap;","0effe946":"print(X.columns)\nexplainer = shap.Explainer(logreg, X)\nshap_values = explainer(X)\nshap.plots.beeswarm(shap_values, color = plt.get_cmap(\"cool\"))","2c1d369b":"table_sex = pd.crosstab(df.thalach, df.target)\ntable_sex\ntable_sex.div(table_sex.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, title=\"thalach - target\",ylabel=\"counts\");","9a2157de":"table_sex = pd.crosstab(df.trestbps, df.target)\ntable_sex\ntable_sex.div(table_sex.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, title=\"trestbps - target\",ylabel=\"counts\")","c1e1a5ff":"table_sex = pd.crosstab(df.chol, df.target)\ntable_sex\ntable_sex.div(table_sex.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, title=\"chol - target\",ylabel=\"counts\");","5422df2f":"table_sex = pd.crosstab(df.age, df.target)\ntable_sex\ntable_sex.div(table_sex.sum(1).astype(float), axis=0).plot(kind=\"bar\", stacked=True, title=\"Age - target\",ylabel=\"counts\");","252b3902":"Attribute Information<br>\n1) age<br>\n2) sex<br>\n3)  cp: chest pain type<br>\n-- Value 1: typical angina<br>\n-- Value 2: atypical angina<br>\n-- Value 3: non-anginal pain<br>\n-- Value 4: asymptomatic<br>\n4) trestbps: resting blood pressure (in mm Hg on admission to the hospital)<br>\n5) chol: serum cholestoral in mg\/dl <br>\n6) fasting blood sugar > 120 mg\/dl<br>\n7) resting electrocardiographic results (values 0,1,2)<br>\n8) thalach: maximum heart rate achieved<br>\n9) exercise induced angina<br>\n10) oldpeak = ST depression induced by exercise relative to rest<br>\n11) the slope of the peak exercise ST segment<br>\n12) number of major vessels (0-3) colored by flourosopy<br>\n13) thal: 0 = normal; 1 = fixed defect; 2 = reversable defect<br>\n14) target: 0= less chance of heart attack 1= more chance of heart attack<br>","7a7090d5":"The higher the AUC, the better model is at distinguishing between patients with the desease and no desease. Capability of the model to predict Class 0 as Class 0, and Class 1 as Class 1. 1 means Excelent and 0 is no separability.\nROC is a distribution curve. The distribution of each probability should have 0 overlap meaning an indeal measure of separability.\nSensivity and Specificity are inversely proportional to each other. When Sensitivity increase, Specificity decreases.","92790687":"Top features that impact the model\u2019s output are displayed on the top. The x position of the dot is determined by the SHAP value of that feature. Thalac, chol, trestbps, age, cp are the have the most prominent value."}}