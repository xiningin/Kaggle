{"cell_type":{"8142cfa7":"code","cdea9e23":"code","fafaf878":"code","011b656d":"code","6deeb71e":"code","1d784fa5":"code","8fea2204":"code","cb4f0a7b":"code","ef2cce27":"code","968f4778":"code","0037ad78":"code","2303f5b2":"code","f7ce788f":"code","63d34d75":"code","393ae08e":"code","f48d7e9a":"code","78903b28":"code","33e674ff":"code","b6bb7c35":"code","44d1ed31":"code","48682c30":"code","918d69b6":"code","fdb6b77e":"code","9d81ed71":"code","945d828f":"code","0a9cbf18":"code","a2376aec":"code","cf7c3ea0":"markdown","d5d3f104":"markdown","dd05ec50":"markdown","6929be52":"markdown","f65c6c8f":"markdown","3e567a54":"markdown","d32d5839":"markdown"},"source":{"8142cfa7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport matplotlib.pyplot as plt\nimport matplotlib.pylab as pylab\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport seaborn as sns\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\n\nfrom sklearn.model_selection import train_test_split\nimport os\nfilename = os.listdir(\"..\/input\")\n\ndf_train = pd.read_csv('..\/input\/train.csv')\ndata_train = pd.DataFrame(df_train)\ndf_test = pd.read_csv('..\/input\/test.csv')\ndata_test = pd.DataFrame(df_test)\n# Any results you write to the current directory are saved as output.","cdea9e23":"print(df_train.columns)","fafaf878":"df_train.shape","011b656d":"df_train.info()","6deeb71e":"fig,ax = plt.subplots(figsize=(20, 15))\nsns.heatmap(df_train.corr(), ax=ax, annot=True, linewidths=0.05, fmt= '.2f',cmap=\"magma\")\nplt.show()","1d784fa5":"corr = df_train.corr()\nmost_corr_features = corr.index[abs(corr[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\nsns.heatmap(df_train[most_corr_features].corr(), annot=True, cmap=\"RdYlGn\")\n","8fea2204":"sns.pairplot(df_train[most_corr_features], height = 2.5)\nplt.show()","cb4f0a7b":"df_train[df_train.GrLivArea >= 4000]","ef2cce27":"df_train = df_train[df_train.GrLivArea < 4000]","968f4778":"df_train[df_train.GrLivArea >= 4000]","0037ad78":"sns.stripplot(x = df_train.Neighborhood.values, y = df_train.SalePrice.values,\n             order = np.sort(df_train.Neighborhood.unique()),\n             jitter=0.1, alpha=0.25)\nplt.xticks(rotation=90)","2303f5b2":"cat_features = df_train.select_dtypes(include=['object']).columns\n#print(cat_features)\nnum_features = df_train.select_dtypes(exclude=['object']).columns\nnum_features = num_features.drop('SalePrice')\n#print(num_features)","f7ce788f":"plt.scatter(df_train[\"SaleType\"], df_train[\"SalePrice\"], alpha=0.1)","63d34d75":"\ni = 0\nwhile i < len(cat_features) - 5:\n    g = sns.pairplot(df_train, x_vars=[cat_features[i], cat_features[i+1], cat_features[i+2], cat_features[i+3], cat_features[i+4]], y_vars=[\"SalePrice\"], height = 3.5, aspect=1.0)\n    for ax in g.axes[-1, :]:\n        #ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n        for lab in ax.get_xticklabels():\n            lab.set_rotation(90)\n    i += 5\n\n","393ae08e":"final_features = most_corr_features\nfinal_features = ['OverallQual', 'YearBuilt', 'YearRemodAdd',\n       'GrLivArea', 'FullBath', 'GarageCars', 'GarageArea']\nprint(final_features)\n\nx_train, x_test, y_train, y_test = train_test_split(df_train[final_features], df_train[\"SalePrice\"], train_size=0.8, test_size = 0.2, random_state=3)\nlm = LinearRegression()\nlm.fit(x_train, y_train)\nprint(lm.score(x_train, y_train))\nprint(lm.score(x_test, y_test))\n\ndf_test = pd.read_csv('..\/input\/test.csv')\n\nnull_vals = df_test[df_test['GarageArea'].isnull()]\n#print(null_vals)\ndf_test.shape\ndf_test.set_value(1116,'GarageCars', 2)\ndf_test.set_value(1116,'GarageArea', 472)\ndf_test[df_test.Id == 2577]\n\n'''df_test[final_features].info()\npredictions = lm.predict(df_test[final_features])\nprint(predictions)\nmy_sub = pd.DataFrame({'Id':df_test.Id, 'SalePrice':predictions})\nmy_sub.to_csv('submission.csv', index = False)'''\n","f48d7e9a":"print(df_train.info())","78903b28":"df_train[\"HasCircuitBreaker\"] = df_train[\"Electrical\"].map({'SBrkr':1, 'FuseA':-0.5, 'FuseF':-0.75,'FuseP':-0.5,'Mix':-0.5})\ndf_train.set_value(1379,'HasCircuitBreaker', df_train.HasCircuitBreaker.mean())\nnull_vals = df_train[df_train['Electrical'].isnull()]\nprint(null_vals)\n#{'SBrkr':3.5, 'FuseA':2.5, 'FuseF':1.8,'FuseP':1.8,'Mix':0.5}","33e674ff":"df_train[\"ExteriorCondGood\"] = df_train[\"ExterCond\"].map({'TA':1, 'Gd':0.75, 'Fa':0.5,'Ex':1,'Po':0.1})\n#final_features.remove(\"HasCircuitBreaker\")","b6bb7c35":"#final_features.append('HasCircuitBreaker')\nprint(final_features)\nx_train, x_test, y_train, y_test = train_test_split(df_train[final_features], df_train[\"SalePrice\"], train_size=0.8, test_size = 0.2, random_state=3)\nlm = LinearRegression()\nlm.fit(x_train, y_train)\nprint(lm.score(x_train, y_train))\nprint(lm.score(x_test, y_test))","44d1ed31":"df_test['TotalBsmtSF'] = df_test['TotalBsmtSF'].fillna(df_test.TotalBsmtSF.mean())\ndf_train['MasVnrArea']= df_train['MasVnrArea'].fillna(df_train.MasVnrArea.mean())\ndf_test['MasVnrArea']= df_test['MasVnrArea'].fillna(df_test.MasVnrArea.mean())\ndf_test['GarageCars']= df_test['GarageCars'].fillna(df_test.GarageCars.mean())\ndf_test['BsmtFinSF1']= df_test['BsmtFinSF1'].fillna(df_test.BsmtFinSF1.mean())","48682c30":"#most_corr_features = ['OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'TotalBsmtSF', 'GrLivArea', 'FullBath', 'Fireplaces', 'GarageCars']\nmost_corr_features = ['OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'TotalBsmtSF', 'GrLivArea', 'FullBath', 'Fireplaces', 'GarageCars']\n#x_train2, x_test2, y_train2, y_test2 = train_test_split(df_train[most_corr_features], df_train[\"SalePrice\"], train_size=0.8, test_size=0.2, random_state=3)","918d69b6":"df_train.select_dtypes(exclude='object').isnull().sum()","fdb6b77e":"df_train['SalePrice'] = np.log1p(df_train['SalePrice'])*100","9d81ed71":"df_train['SalePrice']","945d828f":"steps = [\n    \n    ('poly', PolynomialFeatures(degree=3)),\n    ('model', Lasso(alpha=400000, fit_intercept=True))\n]\npipeline = Pipeline(steps)\nx = df_train[most_corr_features]\ny = df_train[\"SalePrice\"]\n\n\nx_train2, x_test2, y_train2, y_test2 = train_test_split(x, y, train_size=0.8, test_size=0.2, random_state=3)\n\n\npipeline.fit(x_train2, y_train2)\n#pipeline.fit(df_train[most_corr_features], df_train['SalePrice'])\nprint(pipeline.score(x_train2, y_train2))\nprint(pipeline.score(x_test2, y_test2))\n\nplt.scatter(pipeline.predict(x_test2), y_test2, alpha=0.3)\nplt.plot([0, 800000], [0, 800000], '--r')","0a9cbf18":"'''houses = pd.concat([train,test], sort=False)\nhouses = pd.get_dummies(houses)\ndf_train= houses[len_train]'''","a2376aec":"predictions = pipeline.predict(df_test[most_corr_features])\nfinal_predictions = np.expm1(predictions\/100)\nprint(predictions)\nmy_sub = pd.DataFrame({'Id':df_test.Id, 'SalePrice':final_predictions})\nmy_sub.to_csv('submission.csv', index = False)","cf7c3ea0":"0.7878779630584453\n0.7971610624767151\n\n0.7879329371644554\n0.7973811976728609","d5d3f104":"Predictions using only good continous variables","dd05ec50":"Checking dataset after removing outliers.","6929be52":"These four are the outliers.","f65c6c8f":"* From all the continuous features, the plots of TotalBSMtSF, 1stFlrSF, GRLivArea look very similar. Checking their correlation with each other, TotalBSMtSF and 1stFlrSFf have a very high correlation, while GRLivArea is slightly distant.\n* So there is benefit in keeping only one of the first two and the last feature.\n* GrLivArea and TotRmsAbvGrd have a high correlation with each other. However, GrLivArea has a higher correaltion with Sale Price than that of TotRmsAbvGrd, so keeping GrLivArea is better.\n* Also it is better to remove the outliers which are clearly visible in the SalePrice vs GrLivArea scatter plot.","3e567a54":"* LandContour - Promising If it is bnk then prices are low.\n* Neighbourhood - High confidence, feature analysis is complex so go through the scatter plot again.\n* BldgType - Promising Is 1fam, TwnhsE then prices can vary else it is low.\n* House Style - If it is not one story or 2 story then prices are low.\n* Exterior Quality - Potential If Good or Excellent, then the price can be high, else it will be low (Average, Fair)\n* Exterior Condition - High confidence. Prices are low from Fair to poor conditions\n* BsmtQual - Potenitial If it is Fair then it is going to be low\n* BsmtCond - Promising If it is Fair it is low\n* BsmtFinType2 - Potential If it unfinished the prices can vary a lot. Otherwise it should be low in general. Look at graph again only for this one.\n* Heating - Potential If GasA then it will be high. Else low.\n* HeatingQC - Promising, Graph looks very linear from excelent to poor.\n* CentralAir - High confidence. If it is yes prices can go very high, else low\n* Electrical - High confidence. If there is standard circuit breaker then it is going to vary, else low.\n* KitchenQual - Potential If good or excellent prices can go very high, else it is low.\n* Functional - Promising If it is typical then prices can vary else it is going to be low.\n* GarageType - Promising If it is attatached or builtin prices can go very high, else it is low.\n* GarageQual - Potential If it is Typical or excellent prices can be very high, else they will be low.\n* Garage condition - Potential If it is typical or excellent, or good prices can bee high, else they will be low.\n* PavedDrive - Promisiing If it is yes then prices can be very high. Else it is low.","d32d5839":"['OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'TotalBsmtSF',\n       '1stFlrSF', 'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'Fireplaces',\n       'GarageYrBlt', 'GarageCars', 'GarageArea', 'SalePrice'],\n      dtype='object')"}}