{"cell_type":{"4b6ceef7":"code","12c1435a":"code","dac39177":"code","19cf8270":"code","891ee322":"code","d998f200":"code","66df17a9":"code","c3d037cd":"markdown","e885d941":"markdown","61538aad":"markdown","fc98f1ad":"markdown","a5bbf03b":"markdown","36994bcb":"markdown"},"source":{"4b6ceef7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom random import seed\nfrom random import randint\nimport seaborn as sns\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","12c1435a":"df = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')","dac39177":"df.head()","19cf8270":"def boxplott(df,text):\n    Q1=df[text].quantile(q=0.25)\n    Q3=df[text].quantile(q=0.75)\n    FIQ = Q3-Q1\n\n    LF = Q1 - 1.5 * FIQ\n    LS = Q3 + 1.5 * FIQ\n    df.loc[df[text] > LS , text] = LS\n    df.loc[df[text] < LF , text] = LF\n    return df","891ee322":"def plot_graph_alone(df,val):\n    df_index=df.loc[df['id'] == val]\n    fmri =[]\n    count=0\n    df_index=df_index.to_numpy()\n    for value in df_index[0]:\n        if count < 1 or count > 90:\n            count=+1\n        else:\n            fmri.append(np.deg2rad(value))\n            count=+1\n    fmri=pd.DataFrame(fmri)\n    fmri = fmri[:-1]\n    fmri.columns=['value']\n    fmri = fmri.rename_axis('index').reset_index()\n    \n    fmri = fmri.melt('index', var_name='cols',  value_name='vals')\n    \n    g = sns.lineplot(x=\"index\", y=\"vals\", hue='cols', data=fmri) \nplot_graph_alone(df,5341)","d998f200":"def plot_graph_random(df):\n    max_iter = 5\n    seed(max_iter)\n    df_fmri=pd.DataFrame()\n    rand_list=[]\n    for index in range(max_iter):\n        rand=randint(0, 6000)\n        rand_list.append(rand)\n        df_index=df.loc[df['id'] == rand]\n        fmri =[]\n        count=0\n        df_index=df_index.to_numpy()\n        for value in df_index[0]:\n            if count < 1 or count > 90:\n                count=+1\n            else:\n                fmri.append(value)\n                count=+1\n        df_fmri[rand]=fmri\n    df_fmri = df_fmri[:-1]\n        \n    df_fmri = df_fmri.rename_axis('index').reset_index()\n    \n    df_fmri = df_fmri.melt('index', var_name='cols',  value_name='vals')\n    \n    g = sns.lineplot(x=\"index\", y=\"vals\", hue='cols', data=df_fmri) \nplot_graph_random(df)","66df17a9":"def plot_graph_reduces(df):\n    max_iter = 5\n    seed(max_iter)\n    df_fmri=pd.DataFrame()\n    rand_list=[]\n    for index in range(max_iter):\n        rand=randint(0, 6000)\n        rand_list.append(rand)\n        df_index=df.loc[df['id'] == rand]\n        fmri =[]\n        count=0\n        df_index=df_index.to_numpy()\n        for value in df_index[0]:\n            if count < 1 or count > 90:\n                count=+1\n            else:\n                fmri.append(value)\n                count=+1\n        df_fmri[rand]=fmri\n    df_fmri = df_fmri[:-1]\n    \n    for i in rand_list:\n        df_fmri= boxplott(df_fmri,i)\n    \n    df_fmri = df_fmri.rename_axis('index').reset_index()\n    \n    df_fmri = df_fmri.melt('index', var_name='cols',  value_name='vals')\n    \n    g = sns.lineplot(x=\"index\", y=\"vals\", hue='cols', data=df_fmri) \nplot_graph_reduces(df)","c3d037cd":"# IMPORT","e885d941":"# reduces outliers to limit value using boxplot resources","61538aad":"# Plotting 5 random lines, reducing outliers to the lower and upper limits\n\n* Outlier values make it difficult to observe smaller values, for that we will reduce them to the respective lower and upper limit values using boxplot.","fc98f1ad":"# Graph plot of any line\n*  Let's convert any row into a single-column dataframe and plot the graph.","a5bbf03b":"# CREATE DATAFRAME","36994bcb":"# 5 Random Line Graph Plot\n\n* The function transforms 5 rows into columns and plots the comparative graph.\n\n*  Note that there are outliers for each series."}}