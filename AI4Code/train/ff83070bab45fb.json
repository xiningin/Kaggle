{"cell_type":{"0fe647b5":"code","065c5903":"code","c5534b81":"code","e23856c6":"code","7452c0de":"code","1f408737":"code","e2d8e9a1":"code","a7b2efdd":"code","5c1a1911":"code","28a1c9e3":"code","6905dd92":"code","4132b50c":"code","061561e4":"code","b9d004db":"code","0a4fa582":"code","b825aa83":"code","e5d2368c":"code","80ca75e0":"code","74c47197":"code","9f41f15c":"markdown","49301303":"markdown","be56170e":"markdown"},"source":{"0fe647b5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nfrom sklearn.preprocessing import MinMaxScaler, OneHotEncoder,StandardScaler\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n\nfrom keras.layers import *\nfrom keras.models import Model\nfrom keras import losses, metrics, optimizers\nfrom keras.callbacks import *\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","065c5903":"df = pd.read_csv('..\/input\/learn-together\/train.csv')\ndf.head()","c5534b81":"df.columns","e23856c6":"to_normalize_columns = ['Elevation', 'Aspect', 'Slope',\n       'Horizontal_Distance_To_Hydrology', 'Vertical_Distance_To_Hydrology',\n       'Horizontal_Distance_To_Roadways', 'Hillshade_9am', 'Hillshade_Noon',\n       'Hillshade_3pm', 'Horizontal_Distance_To_Fire_Points']","7452c0de":"def preprocess(X):\n    \n    cols = X.columns\n    scaler = StandardScaler()\n    X = pd.DataFrame(scaler.fit_transform(X), columns=cols)\n    \n    return X","1f408737":"X = df.drop(['Id','Cover_Type'], axis=1)\nX[to_normalize_columns] = preprocess(X[to_normalize_columns]) \ny = df['Cover_Type'] - 1\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","e2d8e9a1":"X.head()","a7b2efdd":"sns.distplot(y)","5c1a1911":"model = RandomForestClassifier(n_estimators=300, random_state=2019)\n\n# model.fit(X_train, y_train)\n# accuracy_score(model.predict(X_test), y_test)\nmodel.fit(X, y)","28a1c9e3":"test_df = pd.read_csv('..\/input\/learn-together\/test.csv')\n# test_df.drop('Id', axis=1,inplace=True)\ntest_df[to_normalize_columns] = preprocess(test_df[to_normalize_columns])\ntest_df.head()","6905dd92":"rf_preds = model.predict(test_df.drop('Id', axis=1))","4132b50c":"def DNN(input_shape, dropout_rate=0):\n    \n    activation = 'elu'\n    \n    input_X = Input(input_shape)\n    \n    # Layer 1\n    X = Dense(512) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    # Layer 2\n    X = Dense(1024) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    # Layer 3\n    X = Dense(512) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    # Layer 4\n    X = Dense(512) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    # Layer 5\n    X = Dense(512) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    # Layer 6\n    X = Dense(512) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    # Layer 7\n    X = Dense(512) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    # Layer 8\n    X = Dense(512) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    # Layer 9\n    X = Dense(512) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    \n    # Layer 10\n    X = Dense(512) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    \n    # Layer 11\n    X = Dense(512) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    \n    # Layer 12\n    X = Dense(512) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    \n    # Layer 13\n    X = Dense(512) (input_X)\n    X = BatchNormalization()(X)\n    X = Activation(activation) (X)\n    \n    # output Layer\n    X = Dense(7)(X)\n    out = Softmax() (X)\n    \n    return Model(input_X, out)\n    ","061561e4":"dnn_model = DNN(input_shape=(54,), dropout_rate=0.0)","b9d004db":"optimizer = optimizers.Adam(lr=0.01, decay=1e-6)\ndnn_model.compile(optimizer, loss=losses.categorical_crossentropy, metrics=['acc'])\n\ncheck_point = ModelCheckpoint('model.h5',monitor='val_loss',verbose=1, mode='min', save_best_only=True)\nreduce_lr = ReduceLROnPlateau(factor=0.01, mode='min')\ndnn_model.fit(X_train, to_categorical(y_train), epochs=300, batch_size=1024,\n              validation_data=(X_test, to_categorical(y_test)), callbacks=[check_point,reduce_lr])","0a4fa582":"from keras.models import load_model\ndnn_model = load_model('model.h5')\n\ndnn_preds = dnn_model.predict(test_df.drop('Id', axis=1))","b825aa83":"dnn_preds = dnn_preds.argmax(axis=1)","e5d2368c":"def save_submission(test_df, preds, path='submission'):    \n    '''\n    test_path: test csv file\n    preds    : predicted label from your model\n    path     : where you want to save the csv file\n    '''\n    \n    df = pd.DataFrame({'Id': test_df['Id'], 'Cover_Type': preds +1})\n    df.to_csv(path+ '.csv', index=False)\n    return df","80ca75e0":"rf_submission = save_submission(test_df, rf_preds, path='rf_submission')\ndnn_submission = save_submission(test_df, dnn_preds, path='dnn_submission')","74c47197":"dnn_submission.head()","9f41f15c":"# Feature Engineering","49301303":"# Dense Neural Nettwork","be56170e":"# Random Forest"}}