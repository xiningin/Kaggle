{"cell_type":{"015fca0d":"code","d1dd602d":"code","55ea54fa":"code","8108de32":"code","722a8a2b":"code","b61e855f":"code","67013ffe":"code","8deff676":"code","cbeb6c2d":"code","0857d887":"code","5fb1cec4":"code","d8c3fff9":"code","1c47c262":"code","b50397ea":"code","30b288e8":"code","cfc6ac1f":"code","ffba270d":"code","7aa40ca9":"code","3c91022e":"code","942b3259":"code","1ba3d0ac":"code","86dcdec1":"code","ec85c563":"code","e38663e0":"code","d34a16eb":"code","07fbe00d":"code","93332a21":"code","aae44c78":"code","b88ef23f":"code","4c254320":"code","b8e86fb7":"code","d87f4d6d":"code","0f683ebf":"code","9a0f3359":"code","a1d4ffb2":"code","267f7b90":"code","9ab3f6c2":"code","dc635043":"code","08e47654":"code","60dc49db":"code","2e27e696":"code","4a627a4a":"code","23b43fc5":"code","9db84476":"code","b9d9df33":"code","916cc6f8":"code","c0d274c8":"code","f14e802e":"code","90693978":"code","dcf2e2a8":"code","5daa259b":"code","386dd3b6":"code","5b1aa21c":"code","0195ea1e":"code","45738004":"code","bad6ffe8":"code","6f87ecdc":"code","d42b160c":"code","649c0e07":"code","d00fffdb":"code","e8dc5a4f":"code","a9cdca91":"code","52b10e12":"code","74a0837b":"code","dc5d91ae":"code","5fe7d2f7":"code","a296c7f7":"code","de0e80e4":"code","096450a8":"markdown","b3dae8e9":"markdown","aa2ac9f1":"markdown","22c735ce":"markdown","7e3f2854":"markdown","2da2a055":"markdown","e2dcb56c":"markdown","a7fe9274":"markdown","b1a84055":"markdown","0a8552a0":"markdown","8c28ae26":"markdown","78a39a94":"markdown","594b03f3":"markdown","9469e440":"markdown","78f21b59":"markdown","f396e9f7":"markdown","05d78673":"markdown","2f91cb3b":"markdown","e456817e":"markdown","fccbd5aa":"markdown","9e314a1e":"markdown","49407cb0":"markdown","dcd68dd8":"markdown","14e9c9bd":"markdown","bbf1dd5e":"markdown","2e432c96":"markdown","ba04d711":"markdown"},"source":{"015fca0d":"from sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n","d1dd602d":"df = pd.read_csv(\"..\/input\/adult.csv\")\ndf.head()","55ea54fa":"print('df shape:', df.shape)\nprint('df size:', df.size)\nprint('df.ndim:', df.ndim, '\\n')\nprint('df.index:', df.index)\nprint('df.columns:', df.columns)","8108de32":"df.info()","722a8a2b":"df.describe()","b61e855f":"# Total number of records\nrecords_number = len(df)\n#Number of records where individual's income is more than $50,000\ngreater_50k = len(df.query('income == \">50K\"'))\n#Number of records where individual's income is at most $50,000\natmost_50k = len(df.query('income == \"<=50K\"'))\n#Percentage of individuals's income exceeds $50,000\ngreater_50k_percent = (float(greater_50k) \/ records_number * 100)\n\nprint(\"Total number of records: {}\".format(records_number))\nprint(\"individuals's income exceeds $50,000: {}\".format(greater_50k))\nprint(\"individuals's income is at most $50,000: {}\".format(atmost_50k))\nprint(\"Percentage of individuals's income exceeds $50,000: {:.2f}%\".format(greater_50k_percent))","67013ffe":"df.groupby([\"workclass\"]).size().plot(kind=\"bar\",fontsize=14)","8deff676":"df.groupby([\"income\",\"workclass\"]).size().unstack(\"income\").plot(kind=\"bar\",fontsize=14)","cbeb6c2d":"df.groupby([\"education\"]).size().plot(kind=\"bar\",fontsize=14)","0857d887":"df.groupby([\"income\",\"education\"]).size().unstack(\"income\").plot(kind=\"bar\",fontsize=14)","5fb1cec4":"df.groupby([\"marital.status\"]).size().plot(kind=\"bar\",fontsize=14)","d8c3fff9":"df.groupby([\"income\",\"marital.status\"]).size().unstack(\"income\").plot(kind=\"bar\",fontsize=14)","1c47c262":"df.groupby([\"occupation\"]).size().plot(kind=\"bar\",fontsize=14,x=df.groupby([\"occupation\"]).size(),y=df[[\"occupation\"]])","b50397ea":"df.groupby([\"income\",\"occupation\"]).size().unstack(\"income\").plot(kind=\"bar\",fontsize=12)","30b288e8":"df.groupby([\"relationship\"]).size().plot(kind=\"bar\",fontsize=14)","cfc6ac1f":"df.groupby([\"income\",\"relationship\"]).size().unstack(\"income\").plot(kind=\"bar\",fontsize=12)","ffba270d":"df.groupby([\"race\"]).size().plot(kind=\"bar\",fontsize=14)","7aa40ca9":"df.groupby([\"income\",\"race\"]).size().unstack(\"income\").plot(kind=\"bar\",fontsize=12)","3c91022e":"df.groupby([\"native.country\"]).size().plot(kind=\"bar\",fontsize=11)","942b3259":"df.groupby([\"income\",\"native.country\"]).size().unstack(\"income\").plot(kind=\"bar\")","1ba3d0ac":"df.groupby([\"sex\"]).size().plot(kind=\"bar\",fontsize=14)","86dcdec1":"df.groupby([\"income\",\"sex\"]).size().unstack(\"income\").plot(kind=\"bar\")","ec85c563":"df.pivot_table(df, index=['income'], aggfunc=np.mean)","e38663e0":"import seaborn as sns","d34a16eb":"hmap = df.corr()\nplt.subplots(figsize=(12, 9))\nsns.heatmap(hmap, vmax=.8,annot=True,cmap=\"BrBG\", square=True)","07fbe00d":"df=df.drop(columns='fnlwgt')#drops column:fnlwgt","93332a21":"def questionmark_number(x):\n    return sum(x=='?')\ndf.apply(questionmark_number)","aae44c78":"print('1.workclass:',set(df['workclass']) )","b88ef23f":"df['workclass'] = df['workclass'].map({'?':-1, 'Without-pay':0,'Never-worked':1, 'Local-gov':2,'State-gov':3, 'Federal-gov':3,\n                                      'Private':4, 'Self-emp-not-inc':5, 'Self-emp-inc':6})","4c254320":"education_set = set(df['education']) \nprint('2.education:',education_set)","b8e86fb7":"df['education'] = df['education'].map({'Preschool':0,'1st-4th':1,'5th-6th':2, '7th-8th':3,\n                                      '9th':4, '10th':5, '11th':6, '12th':7, 'Prof-school':8, \n                                      'HS-grad':9, 'Some-college':10, 'Assoc-voc':11, 'Assoc-acdm':12,\n                                       'Bachelors':13, 'Masters':14, 'Doctorate':15})","d87f4d6d":"maritalstatus_set = set(df['marital.status']) \nprint('3.marital.status:',maritalstatus_set)","0f683ebf":"df['marital.status'] = df['marital.status'].map({'Never-married':0,'Widowed':1,'Divorced':2, 'Separated':3,\n                                      'Married-spouse-absent':4, 'Married-civ-spouse':5, 'Married-AF-spouse':6})","9a0f3359":"print('4.occupation:',set(df['occupation']))","a1d4ffb2":"df['occupation'] = df['occupation'].map({'?':-1,'Priv-house-serv':0,'Protective-serv':1,'Handlers-cleaners':2, 'Machine-op-inspct':3,\n                                      'Adm-clerical':4, 'Farming-fishing':5, 'Transport-moving':6, 'Craft-repair':7, 'Other-service':8,\n                                       'Tech-support':9, 'Sales':10, 'Exec-managerial':11, 'Prof-specialty':12, 'Armed-Forces':13 })","267f7b90":"print('5.relationship:',set(df['relationship']))","9ab3f6c2":"df['relationship'] = df['relationship'].map({'Unmarried':0,'Other-relative':1, 'Not-in-family':2,\n                                      'Wife':3, 'Husband':4,'Own-child':5})","dc635043":"print('6.race:',set(df['race']) )","08e47654":"df['race'] = df['race'].map({'Black':0,'Asian-Pac-Islander':1,'Amer-Indian-Eskimo':2, 'Other':3,\n                                      'White':4})","60dc49db":"print('7.sex:',set(df['sex']))","2e27e696":"df['sex'] = df['sex'].map({'Male':0,'Female':1})","4a627a4a":"print('8.native-country:',set(df['native.country']))","23b43fc5":"df['native.country'] = df['native.country'].map({'?':-1,'Puerto-Rico':0,'Haiti':1,'Cuba':2, 'Iran':3,\n                                      'Honduras':4, 'Jamaica':5, 'Vietnam':6, 'Mexico':7, 'Dominican-Republic':8,\n                                       'Laos':9, 'Ecuador':10, 'El-Salvador':11, 'Cambodia':12, 'Columbia':13,\n                                         'Guatemala':14, 'South':15, 'India':16, 'Nicaragua':17, 'Yugoslavia':18, \n                                         'Philippines':19, 'Thailand':20, 'Trinadad&Tobago':21, 'Peru':22, 'Poland':23, \n                                         'China':24, 'Hungary':25, 'Greece':26, 'Taiwan':27, 'Italy':28, 'Portugal':29, \n                                         'France':30, 'Hong':31, 'England':32, 'Scotland':33, 'Ireland':34, \n                                         'Holand-Netherlands':35, 'Canada':36, 'Germany':37, 'Japan':38, \n                                         'Outlying-US(Guam-USVI-etc)':39, 'United-States':40\n                                        })","9db84476":"print('9.income:',set(df['income']) )","b9d9df33":"df['income'] = df['income'].map({'<=50K':0,'>50K':1})","916cc6f8":"x = df.iloc[ : ,:-1].values.astype(int)\nx","c0d274c8":"y = df[['income']]","f14e802e":"hmap = df.corr()\nplt.subplots(figsize=(12, 9))\nsns.heatmap(hmap, vmax=.8,annot=True,cmap=\"BrBG\", square=True)","90693978":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)","dcf2e2a8":"y_train.groupby([\"income\"]).size()","5daa259b":"def transet_atmost_50k(x):\n    return sum(x==0)\ndef transet_greater_than_50k(x):\n    return sum(x==1)","386dd3b6":"transet_greater_than_50k_n=float(y_train.apply(transet_greater_than_50k)\/y_train.size)","5b1aa21c":"(\"Tranining set's Percentage of individuals making more than $50,000: \", \"{:.2f}%\".format(transet_greater_than_50k_n*100))","0195ea1e":"classifier1 = DecisionTreeClassifier()\nclassifier1.fit(x_train, y_train)\ny_predict1_test=classifier1.predict(x_test)\ny_predict1_train=classifier1.predict(x_train)\nclassifier1","45738004":"classifier2 = DecisionTreeClassifier(max_leaf_nodes=8)\nclassifier2.fit(x_train, y_train)\ny_predict2_test=classifier2.predict(x_test)\ny_predict2_train=classifier2.predict(x_train)\n\nclassifier3 = DecisionTreeClassifier(max_leaf_nodes=16)\nclassifier3.fit(x_train, y_train)\ny_predict3_test=classifier3.predict(x_test)\ny_predict3_train=classifier3.predict(x_train)\n\nclassifier4 = DecisionTreeClassifier(max_leaf_nodes=32)\nclassifier4.fit(x_train, y_train)\ny_predict4_test=classifier4.predict(x_test)\ny_predict4_train=classifier4.predict(x_train)\n\nclassifier5 = DecisionTreeClassifier(max_leaf_nodes=64)\nclassifier5.fit(x_train, y_train)\ny_predict5_test=classifier5.predict(x_test)\ny_predict5_train=classifier5.predict(x_train)\n\nclassifier6 = DecisionTreeClassifier(max_leaf_nodes=128)\nclassifier6.fit(x_train, y_train)\ny_predict6_test=classifier6.predict(x_test)\ny_predict6_train=classifier6.predict(x_train)","bad6ffe8":"classifier7 = DecisionTreeClassifier(min_impurity_decrease=0.001)\nclassifier7.fit(x_train, y_train)\ny_predict7_test=classifier7.predict(x_test)\ny_predict7_train=classifier7.predict(x_train)\n\nclassifier8 = DecisionTreeClassifier(min_impurity_decrease=0.01)\nclassifier8.fit(x_train, y_train)\ny_predict8_test=classifier8.predict(x_test)\ny_predict8_train=classifier8.predict(x_train)\n\nclassifier9 = DecisionTreeClassifier(min_impurity_decrease=0.02)\nclassifier9.fit(x_train, y_train)\ny_predict9_test=classifier9.predict(x_test)\ny_predict9_train=classifier9.predict(x_train)\n\nclassifier10 = DecisionTreeClassifier(min_impurity_decrease=0.03)\nclassifier10.fit(x_train, y_train)\ny_predict10_test=classifier10.predict(x_test)\ny_predict10_train=classifier10.predict(x_train)\n\nclassifier11 = DecisionTreeClassifier(min_impurity_decrease=0.04)\nclassifier11.fit(x_train, y_train)\ny_predict11_test=classifier11.predict(x_test)\ny_predict11_train=classifier11.predict(x_train)","6f87ecdc":"classifier12 = DecisionTreeClassifier(min_samples_leaf=40, min_samples_split=80)\nclassifier12.fit(x_train, y_train)\ny_predict12_test=classifier12.predict(x_test)\ny_predict12_train=classifier12.predict(x_train)\n\nclassifier13 = DecisionTreeClassifier(min_samples_leaf=80, min_samples_split=160)\nclassifier13.fit(x_train, y_train)\ny_predict13_test=classifier13.predict(x_test)\ny_predict13_train=classifier13.predict(x_train)\n\nclassifier14 = DecisionTreeClassifier(min_samples_leaf=160, min_samples_split=320)\nclassifier14.fit(x_train, y_train)\ny_predict14_test=classifier14.predict(x_test)\ny_predict14_train=classifier14.predict(x_train)\n\nclassifier15 = DecisionTreeClassifier(min_samples_leaf=320, min_samples_split=640)\nclassifier15.fit(x_train, y_train)\ny_predict15_test=classifier15.predict(x_test)\ny_predict15_train=classifier15.predict(x_train)\n\nclassifier16 = DecisionTreeClassifier(min_samples_leaf=640, min_samples_split=1280)\nclassifier16.fit(x_train, y_train)\ny_predict16_test=classifier16.predict(x_test)\ny_predict16_train=classifier16.predict(x_train)","d42b160c":"classifier17 = DecisionTreeClassifier(max_leaf_nodes=16,min_impurity_decrease=0.01)\nclassifier17.fit(x_train, y_train)\ny_predict17_test=classifier17.predict(x_test)\ny_predict17_train=classifier17.predict(x_train)\n\nclassifier18 = DecisionTreeClassifier(max_leaf_nodes=16,min_impurity_decrease=0.02)\nclassifier18.fit(x_train, y_train)\ny_predict18_test=classifier18.predict(x_test)\ny_predict18_train=classifier18.predict(x_train)\n\nclassifier19 = DecisionTreeClassifier(max_leaf_nodes=16,min_impurity_decrease=0.001)\nclassifier19.fit(x_train, y_train)\ny_predict19_test=classifier19.predict(x_test)\ny_predict19_train=classifier19.predict(x_train)","649c0e07":"classifier20 = DecisionTreeClassifier(max_leaf_nodes=16,min_samples_leaf=40, min_samples_split=80)\nclassifier20.fit(x_train, y_train)\ny_predict20_test=classifier20.predict(x_test)\ny_predict20_train=classifier20.predict(x_train)\n\nclassifier21 = DecisionTreeClassifier(max_leaf_nodes=16,min_samples_leaf=80, min_samples_split=160)\nclassifier21.fit(x_train, y_train)\ny_predict21_test=classifier21.predict(x_test)\ny_predict21_train=classifier21.predict(x_train)\n\nclassifier22 = DecisionTreeClassifier(max_leaf_nodes=16,min_samples_leaf=160, min_samples_split=320)\nclassifier22.fit(x_train, y_train)\ny_predict22_test=classifier22.predict(x_test)\ny_predict22_train=classifier22.predict(x_train)","d00fffdb":"print(\"Classifier1(default) Accuracy:\", '%f'%classifier1.score(x_test, y_test))\nprint(\"Classifier2(max_leaf_nodes=8) Accuracy:\", '%f'%classifier2.score(x_test, y_test))\nprint(\"Classifier3(max_leaf_nodes=16) Accuracy:\", '%f'%classifier3.score(x_test, y_test))\nprint(\"Classifier4(max_leaf_nodes=32) Accuracy:\", '%f'%classifier4.score(x_test, y_test))\nprint(\"Classifier5(max_leaf_nodes=64) Accuracy:\", '%f'%classifier5.score(x_test, y_test))\nprint(\"Classifier6(max_leaf_nodes=128) Accuracy:\", '%f'%classifier6.score(x_test, y_test))\nprint(\"Classifier7(min_impurity_decrease=0.001) Accuracy:\", '%f'%classifier7.score(x_test, y_test))\nprint(\"Classifier8(min_impurity_decrease=0.01) Accuracy:\", '%f'%classifier8.score(x_test, y_test))\nprint(\"Classifier9(min_impurity_decrease=0.02) Accuracy:\", '%f'%classifier9.score(x_test, y_test))\nprint(\"Classifier10(min_impurity_decrease=0.03) Accuracy:\", '%f'%classifier10.score(x_test, y_test))\nprint(\"Classifier11(min_impurity_decrease=0.04) Accuracy:\", '%f'%classifier11.score(x_test, y_test))\nprint(\"Classifier12(min_samples_leaf=40, min_samples_split=80) Accuracy:\", '%f'%classifier12.score(x_test, y_test))\nprint(\"Classifier13(min_samples_leaf=80, min_samples_split=160) Accuracy:\", '%f'%classifier13.score(x_test, y_test))\nprint(\"Classifier14(min_samples_leaf=160, min_samples_split=320) Accuracy:\", '%f'%classifier14.score(x_test, y_test))\nprint(\"Classifier15(min_samples_leaf=320, min_samples_split=640) Accuracy:\", '%f'%classifier15.score(x_test, y_test))\nprint(\"Classifier16(min_samples_leaf=640, min_samples_split=1280) Accuracy:\", '%f'%classifier16.score(x_test, y_test))\nprint(\"Classifier17(max_leaf_nodes=16,min_impurity_decrease=0.001) Accuracy:\", '%f'%classifier17.score(x_test, y_test))\nprint(\"Classifier18(max_leaf_nodes=16,min_impurity_decrease=0.01) Accuracy:\", '%f'%classifier18.score(x_test, y_test))\nprint(\"Classifier19(max_leaf_nodes=16,min_impurity_decrease=0.02) Accuracy:\", '%f'%classifier19.score(x_test, y_test))\nprint(\"Classifier20(max_leaf_nodes=16,min_samples_leaf=40, min_samples_split=80) Accuracy:\", '%f'%classifier20.score(x_test, y_test))\nprint(\"Classifier21(max_leaf_nodes=16,min_samples_leaf=80, min_samples_split=160) Accuracy:\", '%f'%classifier21.score(x_test, y_test))\nprint(\"Classifier22(max_leaf_nodes=16,min_samples_leaf=160, min_samples_split=320) Accuracy:\", '%f'%classifier22.score(x_test, y_test))","e8dc5a4f":"print(\" Classifier 5 confusion matrix:\",'\\n',confusion_matrix(y_test, y_predict5_test))  ","a9cdca91":"### Model evaluation index","52b10e12":"print(\"Classifier 5 model evaluation index\uff1a\\n\", classification_report(y_predict5_test, y_test, target_names=[\"at_most_50K\",\"greater_than_50K\"]))","74a0837b":"## Step 3: Visualizing the decision tree model and analyzing the model result","dc5d91ae":"from sklearn.tree import export_graphviz\nimport pydotplus","5fe7d2f7":"dot_data1 = export_graphviz(classifier3\n                           ,out_file=None\n                           ,feature_names=['age','workclass','education','education-num','marital-status','occupation','relationship','race','sex','capital-gain', 'capital-loss','hours-per-week','native-country']\n                           ,class_names=['at_most_50K','greater_than_50K']\n                           ,filled=True\n                           ,rounded=True\n                           ,special_characters=True)\ngraph1 = pydotplus.graph_from_dot_data(dot_data1)","a296c7f7":"from IPython.display import Image","de0e80e4":"Image(graph1.create_png())","096450a8":"## 1-5 Splitting the datasets into training sets and Test set\n### we import train_test_split method of sklearn.cross_validation library  to splitting the datasets into training sets and test set","b3dae8e9":"#### ? number","aa2ac9f1":"#### Classifier5 whose max_leaf_nodes  is set to 64 has the highest accuracy 0.855827","22c735ce":"## 1-4 Encoding Categorical Data","7e3f2854":"### Confusion matrix","2da2a055":"###  This decison tree visualization image shows that marial status, education num, capital gain, capital loss and occupation will affect whether people make more than 50k per year.  \n###    When people's marial status is Married-civ-spouse or Married -AF-spouse, when people's education number is high  and when people get more capital gain and more capital loss, then people will have higher possibility that he or she will make more more than 50k per year.","e2dcb56c":"#### marital status","a7fe9274":"#### relationship","b1a84055":"### Choosing the classifier 3 whose max_leaf_nodes is set to 16 having fewer branches than classifier 4, it can be easier for visualizing the model  result and  analyzing the result.  In addition, its model accuracy is 0.846922 close to classifier 4 which is the best classifier among the 22 classifiers.","0a8552a0":"## 1-2 Drop the useless feature\n### delete fnlwgt feature which is useless for  predicting the income whether excees 50k","8c28ae26":"# Step 1:\u3000Data PreProcessing","78a39a94":"### Compare the accuracy of models haiving different parameters","594b03f3":"#### race","9469e440":"## 1-2 Understanding the data","78f21b59":"## Step 3: Evaluating the model","f396e9f7":"## 1-3 Handling the missing data","05d78673":"## Step 2: Establishing Decision Tree Classification Model","2f91cb3b":"#### sex","e456817e":"#### occupation","fccbd5aa":"####  Categorical variables: [workclass:1,education:2, marital-status:4, occupation:5, relationship:6, race:7,  sex:8, native-country:12]","9e314a1e":"#### workclass","49407cb0":"## Conclusion","dcd68dd8":"#### native country","14e9c9bd":"The goal of this project is to predict whether individual's income exceeds $50K\/yr based on census data.   \nThis project's framework includes following steps:  \n1.Data PreProcessing  \n2.Establishing Decision Tree Classification Model  \n3.Visualizing the decision tree model and analyzing the model result","bbf1dd5e":"### Understanding every feature","2e432c96":"#### education","ba04d711":"## 1-1 Import the data file"}}