{"cell_type":{"e446633c":"code","7419e78e":"code","d96811b6":"code","734563f6":"code","398816cb":"code","8abc6887":"code","ee7d7217":"code","cae581e8":"code","abaad795":"code","6055d115":"code","725caf75":"code","38439032":"markdown","3cf3fb61":"markdown","749bb5e3":"markdown","3c340056":"markdown","3931e923":"markdown","464af2f5":"markdown"},"source":{"e446633c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\n \n# NLP\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom nltk.stem import PorterStemmer\n\n# Plotting\nimport plotly.express as px\nimport plotly.graph_objects as go\n!pip install chart_studio\nimport chart_studio.plotly as py\nfrom plotly.subplots import make_subplots\nimport cufflinks as cf\n%matplotlib inline\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\npd.set_option('max_colwidth', None)\n\n\n# Import dataset\ndf = pd.read_csv('\/kaggle\/input\/all-products-available-on-sephora-website\/sephora_website_dataset.csv')","7419e78e":"df['details'][:2]","d96811b6":"# This analysis shall focus on facial skin care products. Relevant categories are filtered.\nskin_care = ['Moisturizers', 'Face Serums', 'Face Wash & Cleansers', 'Face Masks', 'Eye Creams & Treatments', \\\n             'Toners', 'Face Oils', 'Face Sunscreen', 'Sheet Masks', 'Facial Peels', 'Skincare', 'Exfoliators' \\\n            'Face Sets', 'Anti-Aging', 'For Face']\n\ndf_skin = df[df['category'].isin(skin_care)].reset_index()","734563f6":"# Function to clean and tokenize the text data: \ndef clean_and_tokenize(text):\n    # Convert to lowercase\n    text = text.lower()\n    # Remove punctuation characters\n    text = re.sub(r\"[^a-zA-Z0-9]\", \" \", text)\n    text = text.strip('\\n')\n    # Remove titles\n    titles = '|'.join(['what it is', 'skin type', 'skincare concerns', 'formulation', 'highlighted ingredients', \\\n                      'ingredient callouts', 'what else you need to know', 'clinical results'])\n    text = re.sub(titles, \"\", text)\n    # Tokenize into words\n    tokens = nltk.word_tokenize(text)\n    # Remove stopwords\n    words = [x for x in tokens if x not in stopwords.words(\"english\")]\n    # Remove n's\n    words = [x for x in words if x != 'n']\n    # Lemmatize, but do not lemmatize 'sls' and 'sles' terms\n    lemmatizer = WordNetLemmatizer()\n    lemmatized = [lemmatizer.lemmatize(word) if word not in ['sls', 'sles'] else word for word in words]\n    return lemmatized","398816cb":"# Create a set of clean words that will be used for analysis\nwords = clean_and_tokenize(''.join(str(df_skin['details'].to_list())))","8abc6887":"# Dataframe for top words appearing in the descriptions\ndf_words = pd.Series(words).value_counts().reset_index().\\\n            rename(columns = {\"index\":\"word\", 0:\"counts\"})\n\n# Filter it only among top 10\ndf_words_10 = df_words[:10]","ee7d7217":"# Plot the top words\nfig = px.bar(x = df_words_10.word,\n             y = df_words_10.counts,\n             labels = {\n                 'x' : 'Words',\n                 'y' : 'Counts'\n             },\n             title = 'Top words appearing in product descriptions',\n             template = 'simple_white'\n)\nfig.show()","cae581e8":"# Dataframe for bigrams\ndf_bigrams = pd.Series(nltk.ngrams(words, 2)).value_counts().reset_index().rename(columns = {\"index\":\"bigrams\", 0:\"counts\"})\ndf_bigrams['bigrams'] = df_bigrams['bigrams'].astype(str)\n\n# Filter it only among top 10\ndf_bigrams_10 = df_bigrams[:10]","abaad795":"# Plot the top bigrams\nfig = px.bar(x = df_bigrams_10.bigrams,\n             y = df_bigrams_10.counts,\n             labels = {\n                 'x' : 'Bigrams',\n                 'y' : 'Counts'\n             },\n             title = 'Top bigrams appearing in product descriptions',\n             template = 'simple_white')\nfig.show()","6055d115":"# Dataframe for trigrams\ndf_trigrams = pd.Series(nltk.ngrams(words, 3)).value_counts().reset_index().rename(columns = {\"index\":\"trigrams\", 0:\"counts\"})\ndf_trigrams['trigrams'] = df_trigrams['trigrams'].astype(str)\n\n# Filter it only among top 10\ndf_trigrams_10 = df_trigrams[:10]","725caf75":"# Plot the top trigrams\nfig = px.bar(x = df_trigrams_10.trigrams,\n             y = df_trigrams_10.counts,\n             labels = {\n                 'x' : 'trigrams',\n                 'y' : 'Counts'\n             },\n             title = 'Top trigrams appearing in product descriptions',\n             template = 'simple_white')\nfig.show()","38439032":"The pair of words appearing most frequently: \"fine\" + \"line\". This, along with \"line\" and \"wrinkle\", say a lot about how products boast their anti-ageing benefits.\n\nIngredient claims still dominate, with \"formulated\" + \"without\" in the second place, and detailed nasty additives such as sls - sles, sulfate - sls, and sles - parabens appearing in the top 10.  \n\nWe also look at trigrams to expand the context more.","3cf3fb61":"Of course, the most frequent word found in the descriptions would be \"skin\". Aside from this, ingredient-related terms are also frequently appearing (\"free\" and \"without\" most probably pertaining to the products being free from unwanted ingredients, \"ingredient\" and \"formulation\"). \"Parabens\" also appeared in the top 10, a well-known nasty ingredient that skincare products swear that they do not have. \n\nLooking at n-grams or chains of words successively mentioned together would help give more contextual information about these terms. ","749bb5e3":"Again, ingredient claims, anti-ageing, and skin-type formulations appear as top trigrams.\n\nNext step: We will look at how these claims affect ratings of the products (if ever they really do).","3c340056":"## Part 1: Popular Terms Used in Product Descriptions","3931e923":"Manufacturers would claim tons of product benefits, in an attempt to convince customers to buy their brand. \n\nThis dataset made me curious how skincare products would position themselves - what are the most common product claims? And are there specific claims that effectively sway product ratings positively? \n\nThese questions are the main issues I shall attempt to address using this Sephora dataset, and with the help of NLP techniques.","464af2f5":"The main variable to be analyzed here is called 'details' as this contains the product description - the benefit claims, ingredient callouts, clinical results, and other relevant product information. \n\nThis variable is open text data format, therefore some data cleaning and processing would be necessary before patterns can be observed.   "}}