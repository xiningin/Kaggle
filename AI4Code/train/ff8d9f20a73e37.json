{"cell_type":{"69749f94":"code","e8ceae20":"code","25fa5f68":"code","418d7691":"code","7d07c1be":"code","54cc94a8":"code","593e1243":"code","72409963":"code","dac5288e":"code","f416e57d":"code","3b544266":"code","c39809b9":"code","e97b5ea0":"code","8387ad15":"code","7a830a81":"code","49e06d74":"code","e07ed2e2":"code","31dadb3e":"code","5b273e87":"code","ee637bed":"code","db52cec6":"code","de916910":"code","57eb1fad":"code","4ba280c6":"code","9eb5c475":"code","3783a16a":"code","de1d91df":"code","64ca016d":"code","c21db7e5":"code","e5562750":"code","10ef0c69":"code","5a3be58d":"code","32eafcbd":"code","8e125a80":"code","74296fd4":"code","a1c765a9":"code","da37fa96":"code","05117fa0":"code","d24fcffc":"code","e1dc6309":"code","d6eb8903":"code","97fe2bc5":"code","87955342":"code","a40da8c9":"code","b512973b":"code","39265e71":"code","25e22668":"code","432e9f31":"code","e393dd56":"code","3067c139":"code","7b415456":"code","baa746f6":"code","747657ee":"code","05c8bf6c":"code","aa2fc003":"code","7f395c47":"code","aa707c51":"code","10de5390":"code","d9336cab":"code","5dc00d0f":"code","d2eca22f":"code","04de9aef":"code","278fa150":"code","57cdc00e":"code","8824181c":"code","194c295f":"code","89d51f56":"code","ce586899":"code","36fa70e7":"code","cc9d7f3f":"code","4003f40f":"code","1dea3d8d":"code","0e2ff378":"code","a3428745":"code","b3dbb3b1":"code","9a8f10b0":"code","afc88cd7":"code","765eeea6":"code","aff4f894":"code","686a3819":"code","a08cd988":"code","975dd58e":"code","346f2573":"code","f164be22":"code","6500c9ef":"code","e9c621a5":"code","b6a14a99":"code","d78b59e1":"code","96aa7a2f":"code","2ffe8af9":"code","221a680a":"code","a7a3dfc0":"code","d7a82cff":"code","0f0ec94e":"code","af1aaa6f":"code","cb6f9792":"code","7265ffcf":"code","e9276df9":"code","e24ee380":"code","456b42f9":"code","5f0fa524":"code","51c86afa":"code","ac40227a":"code","7d3dec1a":"code","2149edaa":"code","91ba20d9":"code","798a4d43":"code","06e4e787":"code","0cbca2f4":"code","337dd1bd":"code","8098594b":"code","4d2afc4d":"code","b0402633":"code","0682726f":"code","331db127":"code","5d1516d8":"code","06827cc5":"code","2113e10b":"markdown","efee02b9":"markdown","d7ae407f":"markdown","6eb141fd":"markdown","c55bcb91":"markdown","da31ba26":"markdown","30c7c1a0":"markdown","bd88330c":"markdown","4bbda898":"markdown","5588de34":"markdown","2d435799":"markdown","1d94364e":"markdown","bfc8513d":"markdown","aebdebd8":"markdown","4472e323":"markdown","76b3131e":"markdown","cba1a062":"markdown","3c18d417":"markdown","99a5efe7":"markdown","f7b77ede":"markdown","b2134743":"markdown","6a05e74c":"markdown","b9b4bb71":"markdown","c3900b21":"markdown","fdc1b6f7":"markdown","930028e5":"markdown","e064217e":"markdown","b3182058":"markdown","85d51567":"markdown","0aa40b2f":"markdown","e3941046":"markdown","b0b3ad7a":"markdown","9a2da855":"markdown","5c388009":"markdown","3c38d487":"markdown","c3016457":"markdown","7410db9a":"markdown","437567cf":"markdown","788cbce3":"markdown","af0481bf":"markdown","ed1a8141":"markdown","ef0b2170":"markdown","c509b9be":"markdown","37860de0":"markdown","2059404e":"markdown","54aa7dd8":"markdown","5d5d7c09":"markdown","7ebcc067":"markdown","ef721ddd":"markdown","a0364e81":"markdown","8a80bf64":"markdown","65e26cce":"markdown","4f32317c":"markdown","4152245e":"markdown","f1ee1d35":"markdown","b46fcce6":"markdown","47326fd5":"markdown","9168966a":"markdown","aff187f2":"markdown","1df1eedd":"markdown","840cfb29":"markdown","1a13af49":"markdown","6bc38ecb":"markdown","37b2ea75":"markdown","7fc56950":"markdown","26156c0b":"markdown","994f1280":"markdown","4fb5390b":"markdown","8e6659a8":"markdown","99015dbb":"markdown","62d3e8aa":"markdown","cf6ffc14":"markdown","e7de8449":"markdown","09b234ff":"markdown","d54328c0":"markdown","bd557b92":"markdown","8e094063":"markdown","9e69766d":"markdown","51c0efbe":"markdown","6b2d164b":"markdown","4ff51682":"markdown","7bf46eb1":"markdown","248e151d":"markdown","c4bc2e95":"markdown","45624528":"markdown","574f2b3c":"markdown","f84ded6d":"markdown","343181e5":"markdown","8543c398":"markdown","c53633cc":"markdown","35abbb31":"markdown","be5add71":"markdown","8b6da4aa":"markdown","4de854ea":"markdown","320f8a07":"markdown","984220d4":"markdown","fa8a2165":"markdown","ef907446":"markdown","621c626e":"markdown","b89693bf":"markdown","cb6b82a1":"markdown","6b03e20e":"markdown","74375658":"markdown"},"source":{"69749f94":"%%html\n<style>\n@import url('https:\/\/fonts.googleapis.com\/css?family=Ewert|Roboto&effect=3d|ice|');\nbody {background-color: gainsboro;} \na {color: #000000; font-family: 'Roboto';} \nh1 {color: #000000; font-family: 'Orbitron'; text-shadow: 4px 4px 4px #aaa;} \nh2, h3 {color: slategray; font-family: 'Orbitron'; text-shadow: 4px 4px 4px #aaa;}\nh4 {color: #818286; font-family: 'Roboto';}\nspan {font-family:'Roboto'; color:black; text-shadow: 5px 5px 5px #aaa;}  \ndiv.output_area pre{font-family:'Roboto'; font-size:110%; color:lightblue;}      \n<\/style>","e8ceae20":"X = 'Python is good for ML'\nprint(X)","25fa5f68":"ML = 5 \nprint(ML)","418d7691":"DL= ML + 8 \nprint(DL)","7d07c1be":"5+8","54cc94a8":"5+8-6","593e1243":"5*(8+6)","72409963":"8\/6","dac5288e":"5**8","f416e57d":"8\/\/5","3b544266":"8%5","c39809b9":"int('458')","e97b5ea0":"int(58.4)","8387ad15":"str(58)","7a830a81":"str(13)","49e06d74":"print(\"Float = \" + str(8.4) + \" Integer = \" + str(45))","e07ed2e2":"float(58)","31dadb3e":"float(\"58.4\")","5b273e87":"# Single word\n'Machine'","ee637bed":"'Python Bootcamp'","db52cec6":"\"Machine built  string with double quotes\"","de916910":"'I'm using single quotes, but will create an error'","57eb1fad":"\"Now I'm ready to use the single quotes inside a string By Machine!\"","4ba280c6":"'Hey Machine Learning'","9eb5c475":"'Machine Learning'\n'Hey Machine Learning'","3783a16a":"# To use print function from Python 3 in Python 2\nfrom __future__ import print_function\n\nprint('Hey Machine Learning')","de1d91df":"len('Hey Machine')","64ca016d":"# Assign s as a string\nM = 'Hey Machine'","c21db7e5":"#Check\nM","e5562750":"# Print the object\nprint(M)","10ef0c69":"M[0]","5a3be58d":"M[2]","32eafcbd":"M[-2]","8e125a80":"# Grab everything past the first term all the way to the length of M which is len(M)\nM[1:]","74296fd4":"# Note that there is no change to the original M\nM","a1c765a9":"# Grab everything UP TO the 3rd index\nM[:3]","da37fa96":"#Everything\nM[:]","05117fa0":"# Last letter (one index behind 0 so it loops back around)\nM[-1]","d24fcffc":"# Grab everything but the last letter\nM[:-1]","e1dc6309":"# Grab everything, but go in steps size of 1\nM[::1]","d6eb8903":"# Grab everything, but go in step sizes of 2\nM[::2]","97fe2bc5":"# We can use this to print a string backwards\nM[::-1]","87955342":"M","a40da8c9":"# Let's try to change the first letter to 'x'\nM[0] = 'X'","b512973b":"M","39265e71":"# Concatenate strings!\nM+' Learning!'","25e22668":"# We can reassign s completely though!\nM=M+' Learning!'","432e9f31":"print(M)","e393dd56":"M","3067c139":"letter='M'","7b415456":"letter*20","baa746f6":"M","747657ee":"#Upper case a string\nM.upper()","05c8bf6c":"#Lower case a string\nM.lower()","aa2fc003":"# Split a string by blank space (this is the default)\nM.split()","7f395c47":"# Split by a specific element (doesn't include the element that was split on)\nM.split('Learning')","aa707c51":"'Insert another Bootcamp with curly brackets: {}'.format('The Machine Learning BootCamp!')","10de5390":"names = [\"Pi\", \"Bike\", \"!\"]\nprint(names[0])\nprint(names[1])\nprint(names[2])","d9336cab":"empty_list = []\nprint(empty_list)","5dc00d0f":"mix_list = ['Pi', 3, 3.14, True]\nprint (mix_list)","d2eca22f":"matrix = [ [1, 2, 3, 4, 5],\n           [4, 5, 6, 7, 8],\n           [1, 1, 1, 1, 1],\n           [0, 0, 0, 0, 0]\n          ]\nprint(matrix)","04de9aef":"matrix = [ [2, 2, 3, 4, 4],\n           [4, 5, 6, 7, 9],\n           [1, 1, 1, 1, 1],\n           [0, 0, 0, 0, 0]\n          ]\n                    \nfor x in matrix:\n    for y in x:\n        print (y, end=' ')\n    print()","278fa150":"numbers_list = [4, 5, 7, 8, 9]\nprint ( numbers_list[0 : 2] )\nprint ( numbers_list[2 : -2])","57cdc00e":"bikes = ['pibike', 'hellobike', 'mobike']\nfor bike in bikes:\n    print (bike)\n    if (bike == 'hellobike'):\n        print (\"I love hellobike\")","8824181c":"list_of_number = [1, 7, 3, 4, 5]\nsum = 0\nfor num in list_of_number:\n    sum += num\nprint (\"Sum is: {sum}\".format(sum=sum))","194c295f":"list_of_number = [1, 8, 'bike', 4, 5.5, 5]\nsum = 0\nfor num in list_of_number:\n    if type(num) == int:\n        sum += num\nprint (\"Sum is: {sum}\".format(sum=sum))","89d51f56":"mix_list = ['mobike', 28, 5.4, True]\nprint(mix_list)\nmix_list[0] = 'hellobike'\nprint(mix_list)","ce586899":"mix_list.append('pibike')\nprint(mix_list)","36fa70e7":"mix_list.insert(2, 'ofobike')\nprint(mix_list)","cc9d7f3f":"mix_list += ['ohbike'] # shortcut version for adding item\nprint(mix_list)","4003f40f":"bikes = ['pibike', 'hellobike', 'mobike']\ndel bikes[1]\nprint( bikes )","1dea3d8d":"bikes = ['pibike', 'hellobike', 'mobike']\nlast_bike=bikes.pop()# last item\nprint(bikes, \"\\n\", last_bike)","0e2ff378":"bikes = ['pibike', 'hellobike', 'mobike']\nthird_bike = bikes.pop(1) # third item\nprint(bikes, \"\\n\", third_bike)","a3428745":"import re\ncars = \"toyota, hellobike, bmw, audi\"\n# cars = ['toyota', 'honda', 'bmw', 'audi']\ncar_list = re.split(',', cars)\nprint(car_list)","b3dbb3b1":"quote = ['Just', 'get','up','and','do','it,','follow','your','dreams!']\nprint(quote)\nquote_str = ' '.join(quote)\nprint(quote_str)","9a8f10b0":"numbers = [1, 'bike', 3, 4]\nprint (len(numbers))","afc88cd7":"reverse_list = ['Mobike', 'Hellobike', 3, 4]\nreverse_list.reverse()\nprint(reverse_list)","765eeea6":"lst = [ x**2 for x in [x**2 for x in range(11)]]\nlst","aff4f894":"t = (4,5,7,9)","686a3819":" len(t)","a08cd988":"t = ('five',2)\nt","975dd58e":"t[0]","346f2573":"t[-1]","f164be22":"# Use .index to enter a value and return the index\nt.index('five')","6500c9ef":"# Use .count to count the number of times a value appears\nt.count('four')","e9c621a5":"t[0]= 'change'","b6a14a99":"t.append('nope')","d78b59e1":"x = set()","96aa7a2f":"# We add to sets with the add() method\nx.add(1)","2ffe8af9":"#Show\nx","221a680a":"# Add a different element\nx.add(3)","a7a3dfc0":"#Show\nx","d7a82cff":"# Try to add the same element\nx.add(1)","0f0ec94e":"#Show\nx","af1aaa6f":"# Create a list with repeats\nl = [1,1,2,2,3,4,5,6,1,1]","cb6f9792":"# Cast as set to get unique values\nset(l)","7265ffcf":"# initialize A and B\nA = {4, 5, 6, 4, 5}\nB = {4, 5, 6, 7, 8}\n# use | operator\nprint(A | B)","e9276df9":"# initialize A and B\nA = {8, 9, 3, 4, 5}\nB = {4, 5, 6, 7, 8}\n# use & operator\nprint(A & B)","e24ee380":"# initialize A and B\nA = {13, 8, 3, 4, 5}\nB = {4, 5, 6, 7, 8}\n# use - operator on A\nprint(A - B)","456b42f9":"# initialize A and B\nA = {13, 18, 3, 4, 5}\nB = {4, 5, 6, 7, 8}\n# use ^ operator\nprint(A ^ B)","5f0fa524":"# Make a dictionary with {} and : to signify a key and a value\nmy_dict = {'key1':'value1','key2':'value2'}","51c86afa":"# Call values by their key\nmy_dict['key2']","ac40227a":"my_dict = {'key1':123,'key2':[12,23,33],'key3':['item0','item1','item2']}","7d3dec1a":"#Lets call items from the dictionary\nmy_dict['key3']","2149edaa":"# Can call an index on that value\nmy_dict['key3'][0]","91ba20d9":"#Can then even call methods on that value\nmy_dict['key3'][0].upper()","798a4d43":"# Set the object equal to itself minus 123 \nmy_dict['key1'] -= 123\nmy_dict['key1']","06e4e787":"# Create a new dictionary\nd = {}","0cbca2f4":"# Create a new key through assignment\nd['animal'] = 'Dog'","337dd1bd":"# Can do this with any object\nd['answer'] = 52","8098594b":"#Show\nd","4d2afc4d":"# Dictionary nested inside a dictionary nested in side a dictionary\nd = {'key1':{'nestkey':{'subnestkey':'value'}}}","b0402633":"# Keep calling the keys\nd['key1']['nestkey']['subnestkey']","0682726f":"# Create a typical dictionary\nd = {'key1':13,'key2':47,'key3':3}","331db127":"# Method to return a list of all keys \nd.keys()","5d1516d8":"# Method to grab all values\nd.values()","06827cc5":"# Method to return tuples of all items  (we'll learn about tuples soon)\nd.items()","2113e10b":"# 1.3.1 Variables & Math Operations \n**Variables :**\nAn equal (=) sign is used to store a value in a variable. Until then, we did not use any variables in the chapters. So whenever we press any key number, text or statement in the Python console and press Enter, its output shows the next line. But if we store a value in a variable (with the equal sign) and press enter, then the next line will not output. Rather, the right side of the equal sign will be stored in the variant on the left side of the equal sign, which we can use to name it in the next statement.\nVariable is like a small box made in computer memory, in which anything can be stored. When we declare a variable, the computer determines certain memory for that variable. Each variable's memory address is unique. The value of the program can be stored in the memory location filled in the name of the variable name. Once again, using that name, the value of that location can be accessed and used to be useful.","efee02b9":"### 1.3.6.3 Set Difference\nDifference of A and B (A - B) is a set of elements that are only in A but not in B. Similarly, B - A is a set of element in B but not in A.Difference is performed using ``-``operator. Same can be accomplished using the method ``difference()``.","d7ae407f":"Now let's learn about printing strings!","6eb141fd":"####  1.Creating String \nTo create a string in Python you need to use either single quotes or double quotes. For example:","c55bcb91":"# 1.3.4 List \nLists are just like the arrays, declared in other languages. Lists need not be homogeneous always which makes it a most powerful tool in Python. A single list may contain DataTypes like Integers, Strings, as well as Objects. Lists are also very useful for implementing stacks and queues. Lists are mutable, and hence, they can be altered even after their creation.\n![Imgur](https:\/\/i.imgur.com\/Ok9i6nm.png)\nIn Python, list is a type of container in Data Structures, which is used to store multiple data at the same time. Unlike Sets, the list in Python are ordered and have a definite count. The elements in a list are indexed according to a definite sequence and the indexing of a list is done with 0 being the first index. Each element in the list has its definite place in the list, which allows duplicating of elements in the list, with each element having its own distinct place and credibility.\n\nNote- Lists are a useful tool for preserving a sequence of data and further iterating over it.","da31ba26":"#### 1.3.4.12 Splitting String into List items\nA splitting string into list items can be made as below--","30c7c1a0":"### 2.Basic Tuple Methods\nTuples have built-in methods, but not as many as lists do. Lets look at two of them:","bd88330c":"### 1.3.6.2 Set Intersection\nIntersection of A and B is a set of elements that are common in both sets.\nIntersection is performed using ``&`` operator. Same can be accomplished using the method ``intersection()``.","4bbda898":"#### 1.3.4.8  List modification\nA list modification can be made as below--","5588de34":"**Input Screen:**\n\n``print 'Machine Learning'\nprint 'Hey Machine Learning'\nprint 'Use \\n to print a new line'\nprint '\\n'\nprint 'See what I mean?``","2d435799":"#### 1.3.4.6 List iteration by for loop\nA list iteration by for loop can be made as below--","1d94364e":"## 1.2 Features of Python programming language:\n1. **Readable:** Python is a very readable language.\n\n2. **Easy to Learn:** Learning python is easy as this is a expressive and high level programming language, which means it is easy to understand the language and thus easy to learn.\n3. **Cross platform: **Python is available and can run on various operating systems such as Mac, Windows, Linux, Unix etc. This makes it a cross platform and portable language.\n\n4. **Open Source:** Python is a open source programming language.\n\n5. **Large standard library:** Python comes with a large standard library that has some handy codes and functions which we can use while writing code in Python.\n\n6. ** Free:** Python is free to download and use. This means you can download it for free and use it in your application. See: Open Source Python License\n\n7. **Supports exception handling:** If you are new, you may wonder what is an exception? An exception is an event that can occur during program exception and can disrupt the normal flow of program. Python supports exception handling which means we can write less error prone code and can test various scenarios that can cause an exception later on.\n\n8. **Advanced features:** Supports generators and list comprehensions. We will cover these features later.\n\n9. **Automatic memory management:** Python supports automatic memory management which means the memory is cleared and freed automatically. You do not have to bother clearing the memory.","bfc8513d":"#### 7.Print Formatting\nWe can use the .format() method to add formatted objects to printed string statements.\n\nThe easiest way to show this is through an example:","aebdebd8":"There are many more methods than the ones covered here. Visit the advanced String section to find out more!","4472e323":"Check len just like a list","76b3131e":"Notice how the error tells us directly what we can't do, change the item assignment!\n\nSomething we can do is concatenate strings!","cba1a062":" Be careful with quotes! show in the below that: ","3c18d417":"Because of this immutability, tuples can't grow. Once a tuple is made we can not add to it.","99a5efe7":"We can use a print statement to print a string.","f7b77ede":"### 2. Accessing objects from a dictionary\nWe can also create keys by assignment. For instance if we started off with an empty dictionary, we could continually add to it:","b2134743":"Note the above slicing. Here we're telling Python to grab everything from 0 up to 3. It doesn't include the 3rd index. You'll notice this a lot in Python, where statements and are usually in the context of \"up to, but not including\".","6a05e74c":"# Conclusion:\nThanks for reading this Bootcamp's notebook. If you have any suggestion feel free to reach me in the comment or [sent mail](engharunurrashid97@gmail.com) or connect on [LinkedIn](https:\/\/www.linkedin.com\/in\/harun-ur-rashid6647\/). Stay in touch for more update and Python Bootcamp Part-2 & Part-3. Thank you. \ud83d\ude0e\n![Imgur](https:\/\/i.imgur.com\/DqK5lrP.jpg)\nFor the full code visit [Github](https:\/\/github.com\/harunshimanto\/Python-Bootcamp-with-ML) \nIf you like this Bootcamp then give \ud83d\udc4d upvote. Happy Bootcamp!.","b9b4bb71":"#### String Basics\nWe can also use a function called len() to check the length of a string!","c3900b21":"### 1.3.6.1 Set Union\nUnion of A and B is a set of all elements from both sets.\nUnion is performed using ``|`` operator. Same can be accomplished using the method ``union()``.","fdc1b6f7":"#### 1.3.4.10  Deleting item in list\nA  deleting item in list can be made as below--","930028e5":"#### 1.3.4.14 List length \nA list length can be made as below--","e064217e":"# 1.3.3 String\nStrings are used in Python to record text information, such as name. Strings in Python are actually a sequence, which basically means Python keeps track of every element in the string as a sequence. For example, Python understands the string \"hello' to be a sequence of letters in a specific order. This means we will be able to use indexing to grab particular letters (like the first letter, or the last letter). \n\nIn this lecture we'll learn about the following:\n\n1. Creating Strings\n\n2. Printing Strings\n\n3. Differences in Printing in Python 2 vs 3\n\n4. String Indexing and Slicing\n\n5. String Properties\n\n6. String Methods\n\n7. Print Formatting","b3182058":"A sum of list numbers with string can be made as below---","85d51567":"Can also mix object types","0aa40b2f":"# 1.3.1 How to Install Python:\nYou can install Python on any operating system such as Windows, Mac OS X, Linux\/Unix and others.\n\nTo install the Python on your operating system, go to this [link](https:\/\/www.python.org\/downloads\/). You will see a screen like this.\n\n![Imgur](https:\/\/i.imgur.com\/AOt6Jpu.png)\n\nThis is the **official Python website** and it will detect the operating system and based on that it would recommend you to download Python. Here I am using Windows  so it gave me the download options for Python 2 and Python 3 for Windows. I would recommend you to download the ** latest version of Python 3 **(Python 3.7.2 in the screenshot).\n\nInstallation steps are pretty simple. You just have to accept the agreement and finish the installation.","e3941046":"### 3.Immutability\nIt can't be stressed enough that tuples are immutable. To drive that point home:","b0b3ad7a":"When we write multiple variables inside the print () function, string converts should be used.","9a2da855":"#### 1.3.4.1 Empty \nAn empty list can be made as below - ","5c388009":"**Integer casting:** The int () function is used to convert from strings or floats into angles.","3c38d487":"### 1. Constructing Tuples \nThe construction of a tuples use () with elements separated by commas. For example:","c3016457":"## 1.3.8 User Input\nUse Python's input() function to accept user input. You can then use this input within your program.You can write Python programs that accept user input. You could ask the user their name, their age, or pretty much anything. The user's input can then be used within your program in any number of ways. You could simply print their input back to the screen, you could insert it into a database, or you make the program do different things depending on the input received.\n![Imgur](https:\/\/i.imgur.com\/bv3sI3h.jpg)\nHere's a basic example of using the ```input()``` function:","7410db9a":" ## &#128209; Table of Content :\n** Python Basic**\n*  Introduction of python\n* Features of Python programming language\n*  Implementation of python \n  *  Variables and Maths Operations\n  *   Casting\n  *   String\n  *   List\n  *   Tuples\n  *   Sets\n  *   Dictionaries\n  *   User Input","437567cf":"Under the following mathematical command, the results are easily found -","788cbce3":"\nWe can use a : to perform slicing which grabs everything up to a designated point. For example:","af0481bf":"### 4. When to use Tuples\nYou may be wondering, \"Why bother using tuples when they have fewer available methods?\" To be honest, tuples are not used as often as lists in programming, but are used when immutability is necessary. If in your program you are passing around an object and need to make sure it does not get changed, then tuple become your solution. It provides a convenient source of data integrity.\n\nYou should now be able to create and use tuples in your programming as well as have an understanding of their immutability.","ed1a8141":"Can create a tuple with mixed types","ef0b2170":"note that we can't output multiple strings this way","c509b9be":"### 1 Constructing a Dictionary\nLet's see how we can construct dictionaries to get a better understanding of how they work!","37860de0":" Entire phrase :","2059404e":"**Operation** | **Operator** | \n------------ | ------------ | \nAddition |        +\nSubtraction |  -\nMultiplication | *\nDivision | \/ \nRemainder| %\nInteger Division | \/\/ \nExponentiation | **","54aa7dd8":"### 4.Basic Dictionary Methods\nThere are a few methods we can call on a dictionary. Let's get a quick introduction to a few of them:","5d5d7c09":"# Intro of this notebook:\nIn this notebook we are going to get familiar with Python. We will cover the basic portion of Python which can be very useful for Machine Learning. \n**A simple effort from me to make a Python bootcamp 3 Days for beginners who are enthusiastic about Machine Learning.**\n![Imgur](https:\/\/i.imgur.com\/XcoYcRP.jpg)","7ebcc067":"The modulo operator is used only for determining the floor division and for determining the quotient. The floor division is done using two forward slashes **```\/\/```** and the modulo operator is done with **```%```** symbol. See the example below -","ef721ddd":"We will revisit this string formatting topic in later sections when we are building our projects!","a0364e81":"\n We can also use double quote:","8a80bf64":"#### 4. String Indexing and Slicing\nWe know strings are a sequence, which means Python can use indexes to call parts of the sequence. Let's learn how this works.\n\nIn Python, we use brackets [] after an object to call its index. We should also note that indexing starts at 0 for Python. Let's create a new object called s and the walk through a few examples of indexing.","65e26cce":"**Math  Operations: ** Mathematical calculations can easily be done in Python Console.","4f32317c":"Note the curly brackets. This does not indicate a dictionary! Although you can draw analogies as a set being a dictionary with only keys.\n\nWe know that a set has only unique entries. So what happens when we try to add something that is already in a set?","4152245e":"#### 1.3.4.5 List slicing\nA list slicing can be made as below--","f1ee1d35":"Its important to note that dictionaries are very flexible in the data types they can hold. For example:","b46fcce6":"#### 1.3.4.7  Sum of list numbers\nA  sum of list numbers can be made as below--","47326fd5":"**String casting:** Use the str () function without any restriction to convert it to any variable strings.","9168966a":"As with any variable, you can also combine the user's input with other text, like this:","aff187f2":"## 1.1 Introduction of Python : \nPython is developed by Guido van Rossum. Guido van Rossum started implementing Python in 1989. Python is a general-purpose,\tobject-oriented\tand\topen source\tcomputer programming language, it is a high-level, human-readable and a\tcorresponding set of software tools and libraries.\n> Interesting fact: Python is named after the comedy television show Monty Python\u2019s Flying Circus. It is not named after the Python snake.","1df1eedd":"### 3.Nesting with Dictionaries\nHopefully you're starting to see how powerful Python is with its flexibility of nesting objects and calling methods on them. Let's see a dictionary nested inside a dictionary:","840cfb29":"\nThe reason for the error above is because the single quote in I'm stopped the string. You can use combinations of double and single quotes to get the complete statement.","1a13af49":"# 1.3.2 Casting \nCasting Conversion means to convert variables from one type to another. It is a type of casting and is called. Python has some built-in functions for type casting. We can use them easily if we want to. Up until now we have learned about integers, floats, and strings data types. To convert this type, the functions are being respectively - **```int (), float, str ()```.**","6bc38ecb":"#### 6.Basic Built-in String methods\nObjects in Python usually have built-in methods. These methods are functions inside the object (we will learn about these in much more depth later) that can perform actions or commands on the object itself.\n\nWe call methods with a period and then the method name. Methods are in the form:\n\nobject.method(parameters)\n\nWhere parameters are extra arguments we can pass into the method. Don't worry if the details don't make 100% sense right now. Later on we will be creating our own objects and functions!\n\nHere are some examples of built-in methods in strings:","37b2ea75":"Just like the addition of subtraction, the work of multiplication can be easily done here. Using a bracket can be defined that any part of the operation will be done before the operation.","7fc56950":"Wow! That's a quite the inception of dictionaries! Let's see how we can grab that value:","26156c0b":"We can use the multiplication symbol to create repetition!","994f1280":"In the above example, initially, 'Python is good for ML' ( a string ) is stored in a variable X. In the next line, the print () function has been sent to the X as the argument. And we already know that if you send something as print function argument, then it is printed. So, ML number 5 is printed on screen. Similar works were done in print (ML + 8) line Here the print (5+ 8) is basically executed, because the value of ML is 5. And with the addition of 8 the number 13 has been sent as the print function argument which is printed on the screen.","4fb5390b":"A quick note, Python has a built-in method of doing a self subtraction or addition (or multiplication or division). We could have also used += or -= for the above statement. For example:","8e6659a8":"#### 1.3.4.4 Nested list\nA nested list can be made as below-","99015dbb":"# 1.3.7 Dictionaries\nPython dictionary is an unordered collection of items. While other compound data types have only value as an element, a dictionary has a key: value pair.Dictionaries are optimized to retrieve values when the key is known.\n![Imgur](https:\/\/i.imgur.com\/XDoXiGy.png)\nWe've been learning about sequences in Python but now we're going to switch gears and learn about mappings in Python. If you're familiar with other languages you can think of these Dictionaries as hash tables.\nThis section will serve as a brief introduction to dictionaries and consist of:\n1. Constructing a Dictionary\n\n2. Accessing objects from a dictionary\n\n3. Nesting Dictionaries\n\n4. Basic Dictionary Methods\n\nA Python dictionary consists of a key and then an associated value. That value can be almost any Python object.","62d3e8aa":"We can also use index and slice notation to grab elements of a sequence by a specified step size (the default is 1). For instance we can use two colons in a row and then a number specifying the frequency to grab elements. For example:","cf6ffc14":"Slicing just like a list","e7de8449":"**Float casting:** The float () function is used to convert from strings or integers to float.","09b234ff":"When using a single \/ share, the result comes in the float type decimal.","d54328c0":"#### 2.Printing a String\nUsing Jupyter notebook with just a string in a cell will automatically output strings, but the correct way to display strings in your output is by using a print function.","bd557b92":"## &#128187; 1.3 Implementation of Python :","8e094063":"Something to note. In Python 3, print is a function, not a statement. So you would print statements like this: print('Hello World')\n\nIf you want to use this functionality in Python2, you can import form the future module.","9e69766d":"We can simply declare a string","51c0efbe":"Hopefully you now have a good basic understanding how to construct dictionaries. There's a lot more to go into here, but we will revisit dictionaries at later time. After this section all you need to know is how to create a dictionary and how to retrieve values from it.","6b2d164b":"# 1.3.5 Tuples \nA tuple is a sequence of immutable Python objects. Tuples are sequences, just like lists. The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets.\n\nCreating a tuple is as simple as putting different comma-separated values. Optionally you can put these comma-separated values between parentheses also.\n![Imgur](https:\/\/i.imgur.com\/dWSQIZo.png)\nIn this section, we will get a brief overview of the following:\n\n1.Constructing Tuples\n\n2.Basic Tuple Methods\n\n3.Immutability\n\n4.When to Use Tuples.\n\nYou'll have an intuition of how to use tuples based on what you've learned about lists. We can treat them very similarly with the major distinction being that tuples are immutable.","4ff51682":"## Now Lets Start!\u270c","7bf46eb1":"#### 1.3.4.9  Adding item in list\nA adding item in list can be made as below--","248e151d":"#### 1.3.4.13 List's string item concatnation\nA list's string item concatnation can be made as below--","c4bc2e95":"The addition of addition, subtraction, multiplication, there is support for expansion in Python, which we call a number to get on a number. This operation is done with two ** signs. For example -","45624528":"# 1.3.6 Sets\nA set is an unordered collection of items. Every element is unique (no duplicates) and must be immutable (which cannot be changed).However, the set itself is mutable. We can add or remove items from it.Sets can be used to perform mathematical set operations like union, intersection, symmetric difference etc.\n![Imgur](https:\/\/i.imgur.com\/MzFKDv6.png)\nSets are an unordered collection of unique elements. We can construct them by using the set() function. Let's go ahead and make a set to see how it works:","574f2b3c":"#### 1.3.4.2  Mixed List\nA mixed list can be made as below-","f84ded6d":"**Output Screen:**\n\nMachine Learning\n\nHey Machine Learning\n\nUse \n\n to print a new line\n\n\nSee what I mean?","343181e5":"Notice how it won't place another 1 there. That's because a set is only concerned with unique elements! We can cast a list with multiple repeat elements to a set to get the unique elements. For example:","8543c398":"We can also use negative indexing to go backwards.","c53633cc":"Use indexing just like we did in lists","35abbb31":"# &#128204; Code , Style, and Links","be5add71":"### 1.3.4.16 List Comprehensions \nIn addition to sequence operations and list methods, Python includes a more advanced operation called a list comprehension.\n![Imgur](https:\/\/i.imgur.com\/O14brf9.png)\nList comprehensions allow us to build out lists using a different notation. You can think of it as essentially a one line for loop built inside of brackets.","8b6da4aa":"#### 1.3.4.3  2D List or Matrix\nA 2D list of matrix can be made as below-","4de854ea":"#### 1.3.4.11 Get and remove item using pop()\nA get and remove item using pop() can be made as below--","320f8a07":"### 1.3.6.4 Set Symmetric Difference\nSymmetric Difference of A and B is a set of elements in both A and B except those that are common in both.Symmetric difference is performed using ``^`` operator. Same can be accomplished using the method ``symmetric_difference()``.","984220d4":"#### 1.3.4.15 Reversing list\nA reversing list can be made as below--","fa8a2165":"![Imgur](https:\/\/i.imgur.com\/UrfOLSf.png)","ef907446":"####  5.String Properties\nIts important to note that strings have an important property known as immutability. This means that once a string is created, the elements within it can not be changed or replaced. For example:","621c626e":"Let's start indexing!","b89693bf":"![Imgur](https:\/\/i.imgur.com\/7n1W74Q.png)","cb6b82a1":"#### 3. Differences in Printing in Python 2 vs 3","6b03e20e":"A word of caution, after importing this you won't be able to choose the print statement method anymore. So pick whichever one you prefer depending on your Python installation and continue on with it.","74375658":"## &#128214; 1. Python Basic \n![Imgur](https:\/\/i.imgur.com\/POruZ9g.jpg?1)"}}