{"cell_type":{"1d9c9cdc":"code","b7a421b6":"code","f318fae4":"code","7c0f2589":"code","8c5f45cf":"code","2f6c4a2a":"code","3401884e":"code","a4d57b1f":"code","299fef62":"code","0a42bbd7":"code","2113abad":"code","750c5a0d":"code","af7c88f4":"code","e72bb2eb":"markdown","57d8c361":"markdown","a27ba094":"markdown","80031f49":"markdown","2a951d6b":"markdown","24c87fd6":"markdown","e2083a73":"markdown","33f0dfda":"markdown"},"source":{"1d9c9cdc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7a421b6":"import pandas as pd\nimport numpy as np\nfrom  matplotlib import pyplot as plt","f318fae4":"df=pd.read_csv(r'\/kaggle\/input\/indian-candidates-for-general-election-2019\/LS_2.0.csv')","7c0f2589":"df.head()","8c5f45cf":"for col in df.columns:\n    print(np.sum(df[col].isnull()))","2f6c4a2a":"df[df['NAME']=='NOTA']=df[df['NAME']=='NOTA'].replace(np.nan,'NOTA')","3401884e":"df['ASSETS']=df['ASSETS'].replace('Not Available','0')\ndf['LIABILITIES']=df['LIABILITIES'].replace('Not Available','0')\ndf['ASSETS']=df['ASSETS'].replace('Nil','0')\ndf['LIABILITIES']=df['LIABILITIES'].replace('Nil','0')\ndf['LIABILITIES']=df['LIABILITIES'].replace('NIL','0')\ndf['ASSETS']=df['ASSETS'].replace('`','0')\ndf['LIABILITIES']=df['LIABILITIES'].replace('`','0')\n\ndf['ASSETS']=df['ASSETS'].replace('NOTA','0')\ndf['LIABILITIES']=df['LIABILITIES'].replace('NOTA','0')\ndf['AGE']=df['AGE'].replace('NOTA',0)\ndf['CRIMINAL\\nCASES']=df['CRIMINAL\\nCASES'].replace('NOTA',0)\ndf['CRIMINAL\\nCASES'].replace('Not Available','0',inplace=True)\ndf['CRIMINAL\\nCASES']=df['CRIMINAL\\nCASES'].astype('int')\n\n\ndf['ASSETS']=df['ASSETS'].replace(',','',regex=True)\ndf['LIABILITIES']=df['LIABILITIES'].replace(',','',regex=True)\ndf['ASSETS']=df['ASSETS'].replace('Nil','0',regex=True)\ndf['LIABILITIES']=df['LIABILITIES'].replace('Nil','0',regex=True)\ndf['ASSETS']=df['ASSETS'].str.extract(pat='([0-9]+)')\ndf['LIABILITIES']=df['LIABILITIES'].str.extract(pat='([0-9]+)') \n\ndf['ASSETS']=df['ASSETS'].astype('float')\ndf['LIABILITIES']=df['LIABILITIES'].astype('float')\n","a4d57b1f":"df.dtypes","299fef62":"df['Is_NOTA']=df['NAME']=='NOTA'","0a42bbd7":"X=df.drop(['WINNER','NAME','SYMBOL'],axis=1)\ny=df['WINNER']\n","2113abad":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y ,test_size=0.33, random_state=42)","750c5a0d":"from catboost import CatBoostClassifier\n\nclf = CatBoostClassifier(\n    iterations=500, \n    learning_rate=0.1, \n    #loss_function='CrossEntropy'\n)\n\n\nclf.fit(X_train, y_train, \n        cat_features= [0,1,2,3,4,6,7], \n         \n        verbose=False\n        \n)\n\nprint('CatBoost model is fitted: ' + str(clf.is_fitted()))\nprint('CatBoost model parameters:')\nprint(clf.get_params())","af7c88f4":"from sklearn.metrics import accuracy_score\ny_pred=clf.predict(X_test)\nprint('ACCURACY SCORE is:' ,accuracy_score(y_pred,y_test))","e72bb2eb":"### SPLITTING DATA INTO TRAIN AND TEST SET","57d8c361":"### PREDICTING ON TEST SET","a27ba094":"### SOME FEATURE ENGINEERING","80031f49":"##### DROPPED 'NAME' AND 'SYMBOL' AS THEY REDUNDANT FEATURES","2a951d6b":"### SOME DATA PREPROCESSING","24c87fd6":"### CONVERTED NOTA ROW VALUES 'NOTA'","e2083a73":"### TO FIND NUMBER OF Nan VALUS IN EACH COLUMN","33f0dfda":"### TRAINING MODEL USING CATBOOST CLASSIFIER ON TRAIN DATA"}}