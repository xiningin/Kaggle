{"cell_type":{"8806cb14":"code","20c6d240":"code","743e7f3b":"code","125defea":"code","38502787":"code","090bfc51":"code","076ad8dd":"code","ebf09d42":"code","1331c57f":"code","8112b22c":"code","f0394d9e":"code","83605d7b":"code","2306d101":"code","978f1239":"code","48291e69":"code","864c8f0c":"code","d5d544e5":"code","73237d24":"code","4182c54a":"code","5c333bab":"code","f0e03237":"code","b58f5126":"code","c4ef0b7e":"code","273b8c53":"code","6d80bbc5":"code","dc40901f":"code","4fe1e0ed":"code","93ca5c7a":"code","c4aa1bd9":"code","2892f140":"code","05b73b08":"code","042af60a":"code","9a3dc9b6":"code","1ca54960":"code","886b2dcc":"code","647f83d2":"code","8425f460":"code","98ef0964":"code","45a6dc04":"code","aff6d8dd":"code","52a9ebdc":"code","034643d7":"code","1ef3a4b9":"code","1e4ada3e":"code","4bef88e7":"code","d34b08b8":"code","2fc0caa9":"code","1affb861":"code","8c7e05b6":"code","f6ee15d0":"code","618af56b":"code","b809999f":"code","8b3bca06":"code","3a01285c":"code","5c7f3e28":"code","9cf38062":"code","0603fd2e":"markdown","f3c7af31":"markdown","a37d98b4":"markdown","bb9ca142":"markdown","e56bfc3d":"markdown","7c9d2831":"markdown","4f986b6e":"markdown","65d185cd":"markdown","e0c8c378":"markdown","560ae2a1":"markdown","c1812ddb":"markdown","3b8c92df":"markdown","306b5beb":"markdown","4d0a424b":"markdown","692431e3":"markdown","008e83f9":"markdown","825919ae":"markdown","4a02b819":"markdown","77b1e874":"markdown","5d526ebc":"markdown","062819c7":"markdown","d30ae712":"markdown","89588734":"markdown","39196bf7":"markdown","59bc7ba7":"markdown","075d99eb":"markdown","c7eefbc4":"markdown","6d64a4df":"markdown","96942472":"markdown","952ae73e":"markdown","701fd29b":"markdown","9fe1ac2a":"markdown","073073ff":"markdown","d3d449ac":"markdown","cc4dafd3":"markdown","2a258185":"markdown","e97f5852":"markdown"},"source":{"8806cb14":"!pip install openpyxl","20c6d240":"import numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport category_encoders as ce\nimport scipy.cluster.hierarchy as shc\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE\nfrom sklearn.metrics import silhouette_score","743e7f3b":"data = pd.read_excel(\"..\/input\/dummy-excel\/Dummy dataset.xlsx\")","125defea":"data.head()","38502787":"#number of rows and columns\nprint(f'dataset shape is {data.shape}')","090bfc51":"#Which ones are categorical and which are numerical?\ndata.info()","076ad8dd":"data.describe()","ebf09d42":"data.replace(to_replace = \"#\", value=np.NaN, inplace= True, regex= True)","1331c57f":"data.drop(data[data['AGE'] < 1].index, inplace = True)","8112b22c":"data.isnull().sum()","f0394d9e":"data.dropna(inplace = True)","83605d7b":"data.duplicated().sum()","2306d101":"#drop duplicates\ndata.drop_duplicates(inplace = True)","978f1239":"minValue = 10000\nmaxValue = 5000000","48291e69":"data.loc[data['Total O\/S'] < minValue, 'Total O\/S'] = minValue","864c8f0c":"data.loc[data['Total O\/S'] > maxValue, 'Total O\/S'] = maxValue","d5d544e5":"minValue = 21\nmaxValue = 60","73237d24":"data.loc[data['AGE'] < minValue, 'AGE'] = minValue","4182c54a":"data.loc[data['AGE'] > maxValue, 'AGE'] = maxValue","5c333bab":"data['MATURITY_DATE_year'] = data['MATURITY_DATE'].dt.year","f0e03237":"data['BOOKING_DATE_year'] = data['BOOKING_DATE'].dt.year","b58f5126":"loan_term_encoder= ce.OrdinalEncoder(cols=['Loan Term'],return_df=True,\n                           mapping=[{'col':'Loan Term',\n'mapping':{'1 Year':1, '2 Years':2,'3 Years':3,'4 Years':4,'5 Years':5,'6 Years':6, '7 Years': 7, '8 Years': 8, '9 Years': 9, '10 Years': 10, 'More than 10 Years': 11}}])","c4ef0b7e":"data['Loan Term'] = loan_term_encoder.fit_transform(data['Loan Term'])","273b8c53":"data[\"GENDER\"].replace({\"MALE\":1,\"Male\":1, \"FEMALE\":0, \"Female\":0}, inplace = True)","6d80bbc5":"data[\"Customer Segment\"].replace({\"Salaried\":1, \"Self Employed & Professional\":0}, inplace = True)","dc40901f":"#heatmap for different features\nfig, ax = plt.subplots(figsize=(15,5))         # Sample figsize in inches\nsns.heatmap(data.corr(), annot = True, ax=ax, cmap=\"RdPu\");\nplt.title('Correlation between the variables')\nplt.xticks(rotation=90);","4fe1e0ed":"colors = ['steelblue','rosybrown','skyblue', 'plum', 'darkviolet','springgreen','chocolate', 'lightseagreen', 'lightcoral',  'gold', 'grey',  'pink']","93ca5c7a":"gender_labels = data['GENDER'].value_counts().keys().tolist()\nif gender_labels[0]:\n  gender_labels[0] = 'male'\n  gender_labels[1] = 'female'\nelse:\n  gender_labels[0] = 'female'\n  gender_labels[1] = 'male'\ngender_count  = data['GENDER'].value_counts().tolist()","c4aa1bd9":"plt.pie(gender_count, labels = gender_labels, autopct='%1.1f%%', colors = colors)\nplt.title('Gender', fontdict={'fontsize':15})\nplt.show","2892f140":"loan_term_labels = data['Loan Term'].value_counts().keys().tolist()\nx =[i for i in range(len(loan_term_labels)) if loan_term_labels[i] == 11]\nloan_term_labels[x[0]] = '>10'\nloan_term_count  = data['Loan Term'].value_counts().tolist()","05b73b08":"sns.set(rc = {'figure.figsize':(15,15)})\nplt.pie(loan_term_count, labels = loan_term_labels, autopct='%1.1f%%', colors = colors)\nplt.title('Loan Term in Years', fontdict={'fontsize':20})\nplt.show","042af60a":"sns.reset_defaults()\nplt_data = data.sort_values(\"Loan Term\")\nplt_data['Loan Term'].replace({11: '>10'}, inplace = True)\nsns.boxplot(plt_data['Loan Term'], plt_data['AGE'])\nplt.title('Relation Between Age & Loan Term', fontdict={'fontsize':20})\nplt.xlabel('Loan Term (years)', fontsize=15)\nplt.ylabel('Age (years)', fontsize=15)\nplt.show()","9a3dc9b6":"sns.countplot(x='Loan Term', hue='GENDER', data=plt_data, palette='Set2')\nplt.title('Relation Between Gender & Loan Term', fontdict={'fontsize':20})\nplt.xlabel('Loan Term (years)', fontsize=15)\nplt.ylabel('Number of People per Each Gender', fontsize=12)\nplt.show()","1ca54960":"plt_data['Customer Segment'].replace({1: \"Salaried\", 0: \"Self Employed & Professional\" }, inplace = True)\nsns.countplot(x='Loan Term', hue='Customer Segment', data=plt_data, palette='Set2')\nplt.title('Relation Between Segment & Loan Term', fontdict={'fontsize':20})\nplt.xlabel('Loan Term (years)', fontsize=15)\nplt.ylabel('Customur Segment', fontsize=15)\nplt.show()","886b2dcc":"sns.boxplot(plt_data['Loan Term'], plt_data['BOOKING_DATE_year'])\nplt.title('Relation Between Booking Date & Loan Term', fontdict={'fontsize':20})\nplt.xlabel('Loan Term (years)', fontsize=15)\nplt.ylabel('Booking Date', fontsize=15)\nplt.show()","647f83d2":"plt.scatter(plt_data['Total O\/S'], plt_data['AGE'])\nplt.title('Relation Between Age & Total Loan Amount', fontdict={'fontsize':20})\nplt.xlabel('Total Loan Amount', fontsize=15)\nplt.ylabel('Age (years)', fontsize=15)\nplt.show()","8425f460":"plt_female = plt_data.loc[plt_data['GENDER'] == 0]\nplt_male = plt_data.loc[plt_data['GENDER'] == 1]\nplt.scatter(plt_female['Total O\/S'], plt_female['GENDER'],c='lightcoral', marker = u'$\\u2640$', label='female')\nplt.scatter(plt_male['Total O\/S'], plt_male['GENDER'], c='cornflowerblue', marker = u'$\\u2642$', label='male')\nplt.title('Relation Between Gender & Total Loan Amount', fontdict={'fontsize':20})\nplt.xlabel('Total Loan Amount', fontsize=15)\nplt.ylabel('Gender', fontsize=15)\nplt.yticks(np.arange(0, 2, 1))\nplt.legend()\nplt.show()","98ef0964":"plt_data.replace({'Salaried': 1, 'Self Employed & Professional':0 }, inplace = True)\nplt_salaried = plt_data.loc[plt_data['Customer Segment'] == 0]\nplt_self = plt_data.loc[plt_data['Customer Segment'] == 1]\nplt.scatter(plt_salaried['Total O\/S'], plt_salaried['Customer Segment'],c='purple', marker = 'o', label='Self Employed & Professional')\nplt.scatter(plt_self['Total O\/S'], plt_self['Customer Segment'], c='springgreen', marker = '^', label='Salaried')\nplt.title('Relation Between Customer Segment & Total Loan Amount', fontdict={'fontsize':20})\nplt.xlabel('Total Loan Amount', fontsize=15)\nplt.ylabel('Segment', fontsize=15)\nplt.yticks(np.arange(0, 2, 1))\nplt.legend()\nplt.show()","45a6dc04":"plt.scatter(plt_data['Total O\/S'], plt_data['BOOKING_DATE_year'])\nplt.title('Relation Between Booking Date & Total Loan Amount', fontdict={'fontsize':20})\nplt.xlabel('Total Loan Amount', fontsize=15)\nplt.ylabel('Booking Date', fontsize=15)\nplt.show()","aff6d8dd":"sns.boxplot(plt_data['Loan Term'], plt_data['Total O\/S'])\nplt.title('               Relation Between Booking Date & Loan Term', fontdict={'fontsize':18})\nplt.xlabel('Loan Term (years)', fontsize=15)\nplt.ylabel('Total Loan Amount', fontsize=15)\nplt.show()","52a9ebdc":"segment_labels = data['Customer Segment'].value_counts().keys().tolist()\nif segment_labels[0]:\n  segment_labels[0] = 'Salaried'\n  segment_labels[1] = 'Self Employed & Professional'\nelse:\n  segment_labels[0] = 'Self Employed & Professional'\n  segment_labels[1] = 'Salaried'\nsegment_count  = data['Customer Segment'].value_counts().tolist()","034643d7":"plt.pie(segment_count, labels = segment_labels, autopct='%1.1f%%', colors = colors)\nplt.title('Customer Segment', fontdict={'fontsize':15})\nplt.show","1ef3a4b9":"drop = ['BOOKING_DATE', 'MATURITY_DATE', 'DOB', 'TENOR_@Booking', ' DPD', 'AGE at Maturity', 'GENDER']\ndata_drop = data.drop(drop, axis=1)\ndata_scaled = data_drop\ndata_scaled['Total O\/S'] = data_drop['Total O\/S']\/100000\ndata_scaled['BOOKING_DATE_year'] = data_drop['BOOKING_DATE_year']%100\ndata_scaled['MATURITY_DATE_year'] = data_drop['MATURITY_DATE_year']%100","1e4ada3e":"plt.figure(figsize=(10, 7))  \nplt.title(\"Dendrograms\")  \ndend = shc.dendrogram(shc.linkage(data_scaled, method='ward'))","4bef88e7":"plt.figure(figsize=(10, 7))  \nplt.title(\"Dendrograms\")  \ndend = shc.dendrogram(shc.linkage(data_scaled, method='ward'))\nplt.axhline(y=1500, color='r', linestyle='--')","d34b08b8":"cluster = AgglomerativeClustering(n_clusters=2, affinity='euclidean', linkage='ward')  \npreds = cluster.fit_predict(data_scaled)","2fc0caa9":"score = silhouette_score(data_scaled, preds)\nprint(\"For n_clusters = 2 ,silhouette score is {})\".format(score))","1affb861":"pca = PCA()\npca.fit(data_scaled)\npca_data = pca.transform(data_scaled)","8c7e05b6":"# get the component variance\n# Proportion of Variance\npca.explained_variance_ratio_","f6ee15d0":"# Cumulative proportion of variance\nnp.cumsum(pca.explained_variance_ratio_)","618af56b":"# component loadings or weights (correlation coefficient between original variables and the component) \n# component loadings represents the elements of the eigenvector\n# the squared loadings within the PCs always sums to 1\nloadings = pca.components_\nnum_pc = pca.n_features_\npc_list = [\"PC\"+str(i) for i in list(range(1, num_pc+1))]\nloadings_df = pd.DataFrame.from_dict(dict(zip(pc_list, loadings)))\nloadings_df['variable'] = data_scaled.columns.values\nloadings_df = loadings_df.set_index('variable')\nloadings_df","b809999f":"# get correlation matrix plot for loadings\nax = sns.heatmap(loadings_df, annot=True, cmap='Spectral')\nplt.show()","8b3bca06":"def myplot(score,coeff,labels=None):\n    xs = score[:,0]\n    ys = score[:,1]\n    n = coeff.shape[0]\n    scalex = 1.0\/(xs.max() - xs.min())\n    scaley = 1.0\/(ys.max() - ys.min())\n    plt.scatter(xs * scalex,ys * scaley, c = cluster.labels_)\n    for i in range(n):\n        plt.arrow(0, 0, coeff[i,0], coeff[i,1],color = 'r',alpha = 0.5)\n        if labels is None:\n            plt.text(coeff[i,0]* 1.15, coeff[i,1] * 1.15, \"Var\"+str(i+1), color = 'g', ha = 'center', va = 'center')\n        else:\n            plt.text(coeff[i,0]* 1.15, coeff[i,1] * 1.15, labels[i], color = 'g', ha = 'center', va = 'center')\n    plt.xlim(-1,1)\n    plt.ylim(-1,1)\n    plt.xlabel(\"PC{}\".format(1))\n    plt.ylabel(\"PC{}\".format(2))\n    plt.grid()\n\n#Call the function. Use only the 2 PCs.\nmyplot(pca_data[:,[0,2]],np.transpose(pca.components_[[0,2], :]), labels = data_scaled.columns.values)\nplt.show()","3a01285c":"names = ['x', 'y', 'z']\npca = PCA(n_components=2)\npca.fit(data_scaled)\nmatrix = pca.transform(data_scaled)\ndf_matrix = pd.DataFrame(matrix)\ndf_matrix.rename({i:names[i] for i in range(2)}, axis=1, inplace=True)\ndf_matrix['labels'] = cluster.labels_\npca_data = df_matrix\nsns.scatterplot(x=pca_data.x, y=pca_data.y, hue=pca_data.labels, palette=\"Set2\")\nplt.show()","5c7f3e28":"tsne = TSNE(n_components = 2)\ntsne_data = tsne.fit_transform(data_scaled)","9cf38062":"plt.scatter(tsne_data[:,0], tsne_data[:,1], c = cluster.labels_)","0603fd2e":">## 2.6 Dealing with Date Features","f3c7af31":">> ### 1) What is the distribution of each gender in the dataset?","a37d98b4":"The x-axis contains the samples and y-axis represents the distance between these samples. The vertical line with maximum distances is the blue line and hence we can decide a threshold of 1500 and cut the dendrogram.","bb9ca142":"We can encode Gender feature by replacing male and female with one and zero.","e56bfc3d":">## 3.5 Visualization Using PCA","7c9d2831":">## 2.2 Dealing with Nulls","4f986b6e":">## 3.4 Silhouette Score","65d185cd":">## 2.9 Some Statistics\n\n","e0c8c378":">## 2.3 Dealing with Duplicates","560ae2a1":">## 2.1 Exploring the data","c1812ddb":">>### 5) What is the relation between Segment and Loan Term (years)?","3b8c92df":">>### 7) What is the relation between Age and Total Loan Amount?","306b5beb":">## 3.6 Visulaozation Using T-SNE","4d0a424b":"# 2- **EDA**","692431e3":"Number of nulls is too few so we can just drop them.","008e83f9":">## 3.2 Dendrogram","825919ae":">>### 8) What is the relation between Gender and Total Loan Amount?","4a02b819":">>### 4) What is the relation between Gender and Loan Term (years)?","77b1e874":"NULLs exits in the dataset in the form of an attribute called ##### or null value, so we first replace both ##### with NULLs and then decide the best action for each attribute","5d526ebc":"# Import The Needed Libraries","062819c7":"We can encode Customer Segment feature by replacing Salaried and Self Employed & Professional with one and zero.","d30ae712":">## 3.1 Scaling Data","89588734":"# 3- **Agglomerative Hierarchical Clustering**","39196bf7":">>### 3) What is the relation between Age and Loan Term (years)?","59bc7ba7":">## 2.8 Correlation Between Features","075d99eb":">## 2.5 Dealing with Age","c7eefbc4":"Since encoding Loan Term feature should reflect the sequence, we use ordinal encoder.","6d64a4df":">## 2.4 Dealing with Total Loan Amount","96942472":">>### 6) What is the relation between Booking Date (year) and Loan Term (years)?","952ae73e":"# 1- **Importing data**","701fd29b":">## 3.3 Clustering ","9fe1ac2a":">> ### 2) What is the distribution of each loan category in the dataset?","073073ff":">>### 9) What is the relation between Segment and Total Loan Amount?","d3d449ac":">>### 10) What is the relation between Booking Date (year) and Total Loan Term?","cc4dafd3":">>### 11) What is the relation between Loan Term (years) and Total Loan Term?","2a258185":">## 2.7 Encoding Categorical Features\n\n","e97f5852":">>### 12) What is the distribution of Customer Segment in the dataset?"}}