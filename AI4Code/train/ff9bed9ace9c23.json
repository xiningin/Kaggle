{"cell_type":{"cf76bc61":"code","64536208":"code","bac66d99":"code","e7f7de41":"code","9a75b46e":"code","e2eda672":"code","cee0def7":"code","79702c03":"code","f60317d7":"code","d07a8e31":"code","11eec5c3":"markdown","632868c8":"markdown","74e4f81f":"markdown","1d7bd751":"markdown","233d0e01":"markdown","59bf32c6":"markdown","dd39dbac":"markdown","e2db88bb":"markdown","1e6f102c":"markdown","30566ac3":"markdown"},"source":{"cf76bc61":"import os\nimport numpy as np \nimport pandas as pd \nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom lightgbm import LGBMRegressor\n\nimport gresearch_crypto\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","64536208":"def fix_all_seeds(seed):\n    np.random.seed(seed)\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n\nfix_all_seeds(42)","bac66d99":"df_train = pd.read_csv('\/kaggle\/input\/g-research-crypto-forecasting\/train.csv')\ndf_train.head()","e7f7de41":"df_asset_details = pd.read_csv('\/kaggle\/input\/g-research-crypto-forecasting\/asset_details.csv')\ndf_asset_details","9a75b46e":"def get_features(data):\n    # FE for data as row of DataFrame\n    \n    # Two new features from the competition tutorial\n    df_feat = data[['Count', 'Open', 'High', 'Low', 'Close', 'Volume', 'VWAP']].copy()\n    df_feat['Upper_Shadow'] = df_feat['High'] - np.maximum(df_feat['Close'], df_feat['Open'])\n    df_feat['Lower_Shadow'] = np.minimum(df_feat['Close'], df_feat['Open']) - df_feat['Low']\n    \n    # Thanks to https:\/\/www.kaggle.com\/code1110\/gresearch-simple-lgb-starter\n    df_feat['high2low'] = df_feat['High'] \/ df_feat['Low']\n    df_feat['volume2count'] = df_feat['Volume'] \/ (df_feat['Count'] + 1)\n    \n    return df_feat","e2eda672":"def get_data_for_asset(df_train, asset_id):\n    # Get X and y\n    \n    df = df_train[df_train[\"Asset_ID\"] == asset_id]    \n    df_proc = get_features(df)\n    df_proc['y'] = df['Target']\n    #df_proc = df_proc[~df_proc.isin([np.nan, np.inf, -np.inf]).any(1)].reset_index(drop=True)\n    df_proc = df_proc.dropna(how=\"any\")\n    \n    X = df_proc.drop(\"y\", axis=1)\n    y = df_proc[\"y\"]\n    \n    return X, y","cee0def7":"def model_training(X,y):\n    # Model training\n    \n    model = LGBMRegressor(n_estimators=5000,num_leaves=700,learning_rate=0.1)\n    model.fit(X, y)\n    \n    return model","79702c03":"%%time\nXs = {}\nys = {}\nmodels = {}\n\nfor asset_id, asset_name in zip(df_asset_details['Asset_ID'], df_asset_details['Asset_Name']):\n    print(f\"Training model for {asset_name:<16} (ID={asset_id:<2})\")\n    X, y = get_data_for_asset(df_train, asset_id)    \n    model = model_training(X,y)\n    Xs[asset_id], ys[asset_id], models[asset_id] = X, y, model","f60317d7":"# Check the model and it's possibility for the prediction \nprint(\"Check the model and it's possibility for the prediction\")\nx = get_features(df_train.iloc[1])\ny_pred = models[0].predict([x])\ny_pred[0]","d07a8e31":"# Prediction and submission\nenv = gresearch_crypto.make_env()\niter_test = env.iter_test()\n\nfor i, (df_test, df_pred) in enumerate(iter_test):\n    for j, row in df_test.iterrows():\n        \n        try:\n            model = models[row['Asset_ID']]\n            x_test = get_features(row)\n            y_pred = model.predict([x_test])[0]\n\n            df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = y_pred\n        \n        except:\n            print(f'{i}-th iteration of the test dataset, {j}-th row - there was the exception, then set Target = 0')\n            df_pred.loc[df_pred['row_id'] == row['row_id'], 'Target'] = 0\n            \n        # Print just one sample row to get a feeling of what it looks like        \n        if i == 0 and j == 0:\n            print('Example of the x_test data')\n            display(x_test)\n\n    # Display the first prediction dataframe\n    if i == 0:\n        print('Example of the prediction for test data')\n        display(df_pred)\n    df_pred['Target'] = df_pred['Target'].fillna(0)\n\n    # Send submissions\n    env.predict(df_pred)","11eec5c3":"## 5. Prediction and submission <a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","632868c8":"[Go to Top](#0)","74e4f81f":"## Acknowledgements:\n* the main code - the notebook [\ud83d\udcb2\ud83d\udcb2G-Research- Starter LGBM Pipeline](https:\/\/www.kaggle.com\/julian3833\/g-research-starter-lgbm-pipeline)\n* the model tuning - the notebook [G-Research: XGBoost with GPU (Fit in 1min)](https:\/\/www.kaggle.com\/yamqwe\/g-research-xgboost-with-gpu-fit-in-1min)\n* FE - the notebook [GResearch Simple LGB Starter](https:\/\/www.kaggle.com\/code1110\/gresearch-simple-lgb-starter)\n* remove inf, NaN - [[Crypto] Beginner's Try for simple LGBM (En\/Jp)](https:\/\/www.kaggle.com\/junjitakeshima\/crypto-beginner-s-try-for-simple-lgbm-en-jp)","1d7bd751":"I hope you find this kernel useful and enjoyable.\n\nYour comments and feedback are most welcome.","233d0e01":"## 2. Download datasets <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","59bf32c6":"## 4. Model training and prediction <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","dd39dbac":"<a class=\"anchor\" id=\"0\"><\/a>\n# Competition \"[G-Research Crypto Forecasting](https:\/\/www.kaggle.com\/c\/g-research-crypto-forecasting)\"\n\n## Baseline code with advFE","e2db88bb":"## 3. FE <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","1e6f102c":"<a class=\"anchor\" id=\"0.1\"><\/a>\n\n## Table of Contents\n\n1. [Import libraries](#1)\n1. [Download datasets](#2)\n1. [FE](#3)\n1. [Model training](#4)\n1. [Prediction and submission](#5)","30566ac3":"## 1. Import libraries <a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)"}}