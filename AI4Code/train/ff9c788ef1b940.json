{"cell_type":{"f244c5e7":"code","6f5b1385":"code","8c54c598":"code","1b5fa684":"code","dc722534":"code","779df18e":"markdown","006edc33":"markdown","44cf71f2":"markdown","db06e29d":"markdown"},"source":{"f244c5e7":"%%writefile xgboost_agent.py\n\nimport random\nimport numpy as np\nimport pandas as pd\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score\n\nmy_actions = np.empty((0, 0), dtype=int)\nop_actions = np.empty((0, 0), dtype=int)\n\nparams_xgb = {\n    \"objective\": \"multi:softmax\",\n    \"num_class\": 3,\n    \"eval_metric\": \"merror\",\n    \"max_depth\": 5,\n    \"eta\": 0.08,\n    \"tree_method\": \"exact\"\n}\n\ndef xgb_agent(observation, configuration):\n    \n    global my_actions, op_actions\n    \n    if observation.step == 0:\n        \n        my_action = random.randint(0, 2)\n        my_actions = np.append(my_actions, my_action)\n        return my_action\n    \n    if observation.step == 1:\n        \n        my_action = random.randint(0, 2)\n        my_actions = np.append(my_actions, my_action)\n        op_actions = np.append(op_actions, observation.lastOpponentAction)\n            \n        return my_action\n    \n    # 2\u6226\u76ee\u4ee5\u964d\n    # after the 2nd time\n    else:\n        op_actions = np.append(op_actions, observation.lastOpponentAction)\n        \n        # -1\u307e\u3067\u306b\u3059\u308b(\u3064\u307e\u308a\u3001\u6700\u5f8c\u306e\u624b\u3092\u5b66\u7fd2\u306b\u4f7f\u308f\u306a\u3044)\u306e\u306f\u3001\n        # \u76ee\u7684\u5909\u6570\u3092\u6b21\u306e\u76f8\u624b\u306e\u624b\u3068\u3059\u308b\u304b\u3089(\u6700\u5f8c\u306e\u624b\u307e\u3067\u5b66\u7fd2\u306b\u4f7f\u3046\u3068\u3001\n        # \u305d\u306e\u884c\u306e\u76ee\u7684\u5909\u6570\u304c\u5b58\u5728\u3057\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046)\n        X_train = np.vstack([my_actions[:-1], op_actions[:-1]]).T\n        \n        tmp = np.roll(op_actions, -1)    # 1\u3064\u305a\u3064\u524d\u306b\u305a\u3089\u3059\u30021\u756a\u524d\u306e\u3082\u306e\u306f\u4e00\u756a\u5f8c\u308d\u306b\u6301\u3063\u3066\u3044\u304f\u3002\n        y_train = tmp[:-1].T\n        \n        # train data\u306e\u30b5\u30f3\u30d7\u30eb\u6570\u304c21\u4ee5\u4e0a\u3068\u306a\u3063\u305f\u5834\u5408\u3001\u8a08\u7b97\u6642\u9593\u77ed\u7e2e\u306e\u305f\u3081\u76f4\u8fd120\u56de\u306e\u30c7\u30fc\u30bf\u306e\u307f\u4f7f\u3046\u3002\n        if len(X_train) >= 21:\n            X_train = X_train[-20:, :]\n            y_train = y_train[-20:]\n            \n        \n        d_train = xgb.DMatrix(X_train, label=y_train)\n        \n        model = xgb.train(params=params_xgb,\n                          dtrain=d_train,\n                          num_boost_round=50,\n                          verbose_eval=0,\n                          evals=[(d_train, \"train\")])\n        \n        pred_train = model.predict(d_train, ntree_limit=model.best_ntree_limit)\n        score = accuracy_score(pred_train, y_train)\n        \n        # \u3082\u3057\u4e88\u6e2c\u7cbe\u5ea6\u304c1\/3\u4ee5\u4e0a\u306e\u3068\u304d\u306f\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u5024\u3092\u3082\u3068\u306b\u51fa\u3059\u624b\u3092\u6c7a\u5b9a\u3059\u308b\u3002\n        # If the accuracy of the prediction is more than 1\/3, the move to be made is determined based on the prediction of the model.\n        if score >= 0.33:\n            \n            X_test = np.array([[my_actions[-1], observation.lastOpponentAction]])\n            d_test = xgb.DMatrix(X_test)\n            pred = model.predict(d_test, ntree_limit=model.best_ntree_limit)\n            pred = int(pred)\n\n            # \u4e88\u6e2c\u3057\u305f\u76f8\u624b\u306e\u624b\u306b\u5bfe\u3057\u3066\u52dd\u3064\u624b\u3092\u9078\u629e\n            if pred == 0:\n                my_action = 1\n            if pred == 1:\n                my_action = 2\n            if pred == 2:\n                my_action = 0\n            \n        # \u3082\u3057\u4e88\u6e2c\u7cbe\u5ea6\u304c1\/3\u3088\u308a\u4f4e\u3044\u3068\u304d\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u624b\u3092\u51fa\u3057\u305f\u65b9\u304c\u30de\u30b7\u3002\n        # If the prediction accuracy is lower than 1\/3, it is better to make a random move.\n        else:\n            my_action = random.randint(0, 2)\n            \n        my_actions = np.append(my_actions, my_action)\n        \n        return my_action","6f5b1385":"from kaggle_environments import make, evaluate\n\nenv = make(\"rps\", debug=True)\nprint(list(env.agents))","8c54c598":"env.run([\"xgboost_agent.py\", \"rock\"])\n\nenv.render(mode=\"ipython\", width=500, height=400)","1b5fa684":"env.run([\"xgboost_agent.py\", \"reactionary\"])\n\nenv.render(mode=\"ipython\", width=500, height=400)","dc722534":"env.run([\"xgboost_agent.py\", \"statistical\"])\n\nenv.render(mode=\"ipython\", width=500, height=400)","779df18e":"## Agent\u5185\u5bb9  \nn\u56de\u76ee\u306e\u5bfe\u6226\u6642\u306b\u3001n-2\u56de\u76ee\u306e\u81ea\u5206\u306e\u624b\u3068n-2\u56de\u76ee\u306e\u76f8\u624b\u306e\u624b\u304b\u3089\u3001n-1\u56de\u76ee\u306e\u76f8\u624b\u306e\u624b\u3092\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb(xgboost)\u3092\u4f5c\u3063\u3066\u5b66\u7fd2\u3055\u305b\u308b\u3002\u305d\u306e\u30e2\u30c7\u30eb(xgboost)\u3092\u4f7f\u3063\u3066n\u56de\u76ee\u306e\u76f8\u624b\u306e\u624b\u3092\u4e88\u6e2c\u3057\u3001\u305d\u308c\u306b\u52dd\u3064\u624b\u3092\u51fa\u3059\u3002","006edc33":"## If you find this NoteBook helpful, please Upvote it!\n## (I'm a beginner, so the code may be hard to read...)","44cf71f2":"## Agent Overview\nAt the \"N\"th game, train xgboost model that predicts the opponent's action at the N-1 game based on my move in the N-2 game and opponent's move in the N-2 game. Usign xgboost model, predict the next(\"N\"th game) opponent's move, and choice a move to beat it. ","db06e29d":"## \u3053\u306eNoteBook\u304c\u53c2\u8003\u306b\u306a\u3063\u305f\u3089Upvote\u5b9c\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\uff01\uff01\n## \u8cea\u554f\u30fb\u30b3\u30e1\u30f3\u30c8\u7b49\u3042\u308c\u3070\u6c17\u8efd\u306b\u3069\u3046\u305e\uff01\uff01\n## \uff08\u521d\u5fc3\u8005\u306a\u306e\u3067\u30b3\u30fc\u30c9\u304c\u898b\u306b\u304f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3001\u3001\u3001\uff09"}}