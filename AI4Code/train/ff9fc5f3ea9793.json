{"cell_type":{"9edc83ce":"code","37296444":"code","e5ba5751":"code","f0ae34a9":"markdown","34af7fec":"markdown"},"source":{"9edc83ce":"from __future__ import absolute_import, division, print_function, unicode_literals\n\n# TensorFlow and tf.keras\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Helper libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.cbook import flatten\n\nfashion_mnist = keras.datasets.fashion_mnist\n\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()\n\n#Loading the dataset returns four NumPy arrays:\n#The train_images and train_labels arrays are the training set\u2014the data the model uses to learn.\n#The model is tested against the test set, the test_images, and test_labels arrays.\n\nclass_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n#The following shows there are 60,000 images in the training set, with each image represented as 28 x 28 pixels:\ntrain_images.shape\nlen(train_labels)\ntrain_labels\n#There are 10,000 images in the test set. Again, each image is represented as 28 x 28 pixels:\ntest_images.shape\nlen(test_labels)\n\n#The data must be preprocessed before training the network. If you inspect the first image in the training set, you will see that the pixel values fall in the range of 0 to 255:\n\ntrain_images = train_images \/ 255.0\n\ntest_images = test_images \/ 255.0\n\nmodel = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dense(10, activation='softmax')\n])\n    \nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\ndef plot_image(i, predictions_array, true_label, img):\n  predictions_array, true_label, img = predictions_array, true_label[i], img[i]\n  plt.grid(False)\n  plt.xticks([])\n  plt.yticks([])\n\n  plt.imshow(img, cmap=plt.cm.binary)\n\n  predicted_label = np.argmax(predictions_array)\n  if predicted_label == true_label:\n    color = 'blue'\n  else:\n    color = 'red'\n\n  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n                                100*np.max(predictions_array),\n                                class_names[true_label]),\n                                color=color)\n\ndef plot_value_array(i, predictions_array, true_label):\n  predictions_array, true_label = predictions_array, true_label[i]\n  plt.grid(False)\n  plt.xticks(range(10))\n  plt.yticks([])\n  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n  plt.ylim([0, 1])\n  predicted_label = np.argmax(predictions_array)\n\n  thisplot[predicted_label].set_color('red')\n  thisplot[true_label].set_color('blue')","37296444":"a_img=[]\nfor imgnum in range(0,10000):\n    a_img.append(list(flatten(train_images[imgnum])))\n\nfor img in range(0,len(a_img)):\n    for pix in range(0,len(a_img[9999])):\n        if a_img[img][pix]>0.7:\n           a_img[img][pix]=0\n           \n    a_img[img]=np.array(a_img[img]).reshape(-1, 28)\n\na_labels=[]\na_labels.extend(train_labels[0:10000])\n\ntrain_images1=np.concatenate((train_images, a_img))\ntrain_labels1=np.concatenate((train_labels, a_labels))\n\n#deformed test images\n\nb_img=[]\nfor imgnum in range(0,1):\n    b_img.append(list(flatten(test_images[imgnum])))\n\nfor img in range(0,len(b_img)):\n    for pix in range(0,len(b_img[0])):\n        if b_img[img][pix]>0.7:\n           b_img[img][pix]=0\n           \n    b_img[img]=np.array(b_img[img]).reshape(-1, 28)\n\nb_labels=[]\nb_labels.extend(test_labels[0:1])\n\ntest_images1=np.concatenate((b_img, test_images))\ntest_labels1=np.concatenate((b_labels, test_labels))","e5ba5751":"model.fit(train_images1, train_labels1, epochs=10)\n\npredictions = model.predict(test_images1)\n\nnum_rows = 5\nnum_cols = 3\nnum_images = num_rows*num_cols\nplt.figure(figsize=(2*2*num_cols, 2*num_rows))\nfor i in range(num_images):\n  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n  plot_image(i, predictions[i], test_labels1, test_images1)\n  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n  plot_value_array(i, predictions[i], test_labels1)\nplt.tight_layout()\nplt.show()\n\ntest_loss, test_acc = model.evaluate(test_images1,  test_labels1, verbose=2)\n\nprint('\\nTest accuracy:', test_acc)","f0ae34a9":"We train our model with original images(60k)+ adversarial examples(10k), and test it with original test images(10k)","34af7fec":"**Attack hapens here **"}}