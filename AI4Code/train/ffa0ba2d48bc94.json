{"cell_type":{"8d6f23f1":"code","aeb22ebf":"code","123d103d":"code","ae463c94":"code","f18334e8":"code","1d7f463c":"code","6224da76":"code","547f6b21":"code","1f94763e":"code","f7810e2b":"code","2091a50e":"code","ee0ee874":"code","9d4b1031":"code","e3af98e4":"code","2941a60b":"code","a4b394fc":"code","7efa986a":"code","57988818":"code","3b5686c2":"code","75e2dac7":"code","2201a1b0":"code","4af5cc20":"code","efaa8d31":"code","d7f7efed":"code","4698ffa9":"code","bc8a1be9":"code","1907a36c":"code","f50d7e55":"code","0b836f00":"code","99559516":"code","14dd600a":"code","05e78a42":"code","6197129c":"code","d0300198":"code","a91bea56":"code","62eede90":"code","da791f17":"code","a7ad988d":"code","44e87721":"code","0790e9a8":"code","38eb0886":"code","125e1c17":"markdown","84cff81e":"markdown","5db974f3":"markdown","dd66f310":"markdown","e406ff69":"markdown","b42001c2":"markdown","cac20a45":"markdown","026bbb33":"markdown","493c616d":"markdown","26c1e920":"markdown","d8707013":"markdown","396d150c":"markdown","b7dd47bc":"markdown","19b16a61":"markdown","3d976251":"markdown","cdc7f287":"markdown","7e497ff4":"markdown","95b7f61e":"markdown","c6913202":"markdown","62346ac8":"markdown","8b3991b4":"markdown","0e699331":"markdown","dc89e025":"markdown","27939f58":"markdown","80ad3fce":"markdown","470149e2":"markdown","135389fa":"markdown","87f381e7":"markdown","bc0f0b49":"markdown","2d5fa2c8":"markdown","ca84bcc5":"markdown","85edb5bb":"markdown","c0fe7e8a":"markdown","863a2d18":"markdown","62a21908":"markdown","bbc3b86b":"markdown","ae858987":"markdown","c93418c2":"markdown","fd3bf442":"markdown"},"source":{"8d6f23f1":"# Import required libraries \n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# To ignore warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# To change Scientific Notation to Decimal Format\npd.options.display.float_format = '{:.1f}'.format\n","aeb22ebf":"# Read the dataset\ncars = pd.read_csv('..\/input\/saudi-arabia-used-cars-dataset\/UsedCarsSA_Clean_EN.csv')\n\n# To check the number of rows and cols\nprint('Shape:', cars.shape)","123d103d":"# Check datatype for each variable\ncars.info()","ae463c94":"# View the first 10 rows \ncars.head(10)","f18334e8":"# Checking for duplicated rows\n\nprint(\"Number of duplicate rows: \", sum(cars.duplicated()))","1d7f463c":"# Drop duplicate rows\n\ncars.drop_duplicates(inplace=True)\n\nprint(\"Number of duplicate rows: \", sum(cars.duplicated()))","6224da76":"# Check for missing values\n\ncars.isnull().sum()","547f6b21":"cars = cars.rename(columns={\"Type\": \"Model\"})\ncars.head()","1f94763e":"# 'Negotiable' column is not necessary for analysis, so I will delete it\ncars = cars.drop(['Negotiable'], axis=1)\ncars.head()","f7810e2b":"# Summary Statistics for numerical attrubires \ncars.describe()","2091a50e":"# Summary Statistics for categorical variables\ncars.describe(exclude=\"number\")","ee0ee874":"# To check rows with Price represented as'0'.\ncars[cars.Price == 0]","9d4b1031":"# Dropping the rows having price equal to zero\ncars = cars[cars['Price'] != 0]\ncars.head(10)","e3af98e4":"cars.sort_values(by='Price', ascending=1, inplace=True)\ncars.head(20)","2941a60b":"cars = cars[cars['Price'] > 5000]\ncars.head(10)","a4b394fc":"cars = cars[cars['Mileage'] < 700000]\ncars.head(10)","7efa986a":"plt.figure(figsize=(14,8))\n\nplt.subplot(1,2,1)\nplt.title('Car Price Distribution Plot')\nsns.distplot(cars.Price)\nplt.ticklabel_format(useOffset=False, style='plain', axis=('x'))\n\nplt.subplot(1,2,2)\nplt.title('Car Price Spread')\nsns.boxplot(y=cars.Price)\nplt.ticklabel_format(useOffset=False, style='plain', axis='y')\n\nplt.show()","57988818":"print(cars.Price.describe(percentiles = [0.25,0.50,0.75,0.85,0.90,1]))","3b5686c2":"# View all categorical variables\n\ncategorical_columns = cars.select_dtypes(include=['object'])\ncategorical_columns.head()","75e2dac7":"plt.figure(figsize=(14,8))\n\nplt.subplot(1,3,1)\nplt1 = cars.Color.value_counts().plot(kind='bar')\nplt.title('Colors Histogram')\nplt1.set(xlabel = 'Colors', ylabel='Frequency of company')\n\nplt.subplot(1,3,2)\nplt1 = cars.Fuel_Type.value_counts().plot(kind='bar')\nplt.title('Fuel Type Histogram')\nplt1.set(xlabel = 'Fuel Type', ylabel='Frequency of fuel type')\n\nplt.subplot(1,3,3)\nplt1 = cars.Options.value_counts().plot(kind='bar')\nplt.title('Car Options Histogram')\nplt1.set(xlabel = 'Car Options', ylabel='Frequency of Car type')\n\nplt.show()","2201a1b0":"# Visualizing the different car company names available\n\nplt.rcParams['figure.figsize'] = [15,8]\nax = cars['Make'].value_counts().plot(kind='bar', colormap = 'Accent')\nax.title.set_text('Numbers of cars sold per company')\nplt.xlabel(\"Car Company\",fontweight = 'bold')\nplt.ylabel(\"Count of Cars\",fontweight = 'bold')","4af5cc20":"# To view the relationship between Car Options and the price\nplt.figure(figsize=(20,8))\n\nplt.subplot(1,2,1)\nplt.title('Car provided-Options Histogram')\nsns.countplot(cars.Options, palette=(\"cubehelix\"))\n\nplt.subplot(1,2,2)\nplt.title('Options vs Price')\nsns.boxplot(x=cars.Options, y=cars.Price, palette=(\"cubehelix\"))\n\nplt.ticklabel_format(useOffset=False, style='plain', axis='y')\nplt.show()","efaa8d31":"plt.figure(figsize=(15,5))\n\nplt.subplot(1,2,1)\nplt.title('Gear Type Histogram')\nsns.countplot(cars.Gear_Type, palette=(\"plasma\"))\n\nplt.subplot(1,2,2)\nplt.title('Gear Type vs Price')\nsns.boxplot(x=cars.Gear_Type, y=cars.Price, palette=(\"plasma\"))\n\nplt.ticklabel_format(useOffset=False, style='plain', axis='y')\nplt.show()","d7f7efed":"plt.figure(figsize=(20,8))\n\ndf = pd.DataFrame(cars.groupby(['Region'])['Price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Region vs Average Price')\nplt.show()","4698ffa9":"plt.figure(figsize=(25, 6))\nsns.pairplot(cars, x_vars=['Year', 'Mileage', 'Engine_Size'], y_vars='Price',size=5, aspect=1.2, kind='scatter')\nplt.show()","bc8a1be9":"plt.figure(figsize=(20, 6))\n\ndf = pd.DataFrame(cars.groupby(['Make'])['Price'].mean().sort_values(ascending = False))\ndf.plot.bar()\nplt.title('Car Company Name vs Average Price')\nplt.show()","1907a36c":"# to check the correlation coefficients to see which variables are highly correlated\n\nimport seaborn as sns\nplt.figure(figsize=(18,8))\nsns.heatmap(cars.corr(),annot=True)\nplt.show()","f50d7e55":"# Another way to calculate the correlation\n\ncars.corr()[\"Price\"].sort_values() # Price is the target variable","0b836f00":"# Take only significat variables\ncars_sig = cars[['Make','Year', 'Color', 'Options','Engine_Size','Gear_Type', 'Mileage', 'Price']]","99559516":"cars_sig","14dd600a":"# plot relationships in the dataset\nsns.pairplot(cars_sig)\nplt.show()","05e78a42":"cat_col = ['Color', 'Options', 'Gear_Type', 'Make'] # Categorical Valiables\n\n# Get the dummy variables for the categorical feature and store it in a new variable 'dummies'\n\ndummies = pd.get_dummies(cars_sig[cat_col])\ndummies.shape","6197129c":"# Add the results to the original dataframe\n\ncars_sig = pd.concat([cars_sig, dummies], axis = 1)\ncars_sig.shape","d0300198":"# Drop the original cat variables as dummies are already created\n\ncars_sig.drop(cat_col, axis = 1, inplace = True)\ncars_sig.shape","a91bea56":"cars_sig.head()","62eede90":"# Import libraries for machine learning\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score, mean_squared_error","da791f17":"from sklearn.model_selection import train_test_split\n\nX = cars_sig.drop(['Price'] , axis=1)\ny = cars_sig['Price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=55)","a7ad988d":"model = LinearRegression()\n\nmodel.fit(X_train, y_train)\npreds_lm_test = model.predict(X_test)\n","44e87721":"# Now lets see if our model is good\nprint(r2_score(y_test, preds_lm_test))","0790e9a8":"from sklearn.ensemble import RandomForestRegressor\n\n# Define the model\nreg_forest = RandomForestRegressor(random_state = 42, criterion = 'mse')\nreg_forest.fit(X_train, y_train) # fit the model\n\npreds_forest_test = reg_forest.predict(X_test)   # predict the price in test dataset","38eb0886":"# Now lets see if our model is good\n\nfrom sklearn.metrics import r2_score\nprint(r2_score(y_test, preds_forest_test))","125e1c17":"From the heatmap, we can see the `Option`, `Year`, and `Engine_Size` are positively correlated variables to `price`. Whereas `Mileage` is negatively correlated.\n","84cff81e":"#### Insights:\n\n- `Toyota`, `Hyundai`, and `Ford` are among the most cars sold as used cars.\n\n- `Ferrari`, `Great Wall`, and `Victory Auto` are the lowest sold cars.","5db974f3":"### Model Evaluation","dd66f310":"# Step 2: Data Cleaning and Preparation","e406ff69":"`Toyota Land Cruiser` is the most selling car, and `White` is most preferable color. For car sales, `Riyadh` is the most popular city.","b42001c2":"`Full Option` cars has higher spread out in price compared to the other options.","cac20a45":"Only few `Manual` cars are being sold. However, difference in the average price of those is not so big compared to Automatic `cars`.","026bbb33":"### Converting categorical variables into integers ","493c616d":"**List of Significant Variables after Visual Analysis:**\n\n- Year\n- Make (Car Company)\n- Engine Size\n- Mileage\n- Gear Type\n- Car Options\n- Color\n- Price\n","26c1e920":"Notice that `Mileage` has maximum value of **20,000,000**. This is not possible! Also, for `Price` column, we notice that **25%** of the values are **zero**. In a later step, I'm going to deal with these extreme values.","d8707013":"# Car Price Prediction","396d150c":"<!-- ### Feature Scaling -->","b7dd47bc":"### Correlation Map","19b16a61":"Also, I will drop the values that exceeds 700,000 km in Mileage column, for the same reason.","3d976251":"### Thank you for reading. I hope this is helpful.\nFor any comments, question, or discussion, feel free to use the comment section. ","cdc7f287":"### Renaming unclear columns\n\n`Type`  column is  confusing to read, it means \"Car Model\". So, I will change it `Model` to improves the readability of the dataset.","7e497ff4":"**Insights:**\n- `White` is the most flavorable `color` for buyers. \n- Number of `Gas` fueled cars is very high compared to `Diesel` cars.\n- `Full` Option cars seems to be more preferable for car sales than other options.","95b7f61e":"### Objectives:\n- Building a model to predict the price of used cars in Saudi Arabia based on the given data.\n- Understand which variables are significant in predicting the price of the used cars.\n- Comparing different ML models, and find the best one among them.","c6913202":"For correlation map, if the value is near to (-1) that means there is negative corrolation between values. For example: `Milage` and `Year`. Naturally, the Milage is increases as the car is driven. Similarly if the value near to (1) that means there is positive corrolation between values.","62346ac8":"The accuracy for Random Forest model (R-Squared) is 80%","8b3991b4":"### Random Forest Model","0e699331":"### Dropping irrelevant columns","dc89e025":"The accuracy in Random Forest model (R-Squared) is 55%","27939f58":"To check the values in `price` column. Let's sort the colunm in an ascending order.","80ad3fce":"### Variable Describtion\n\n- `Make` : Name of the car company\n\n- `Model`: Name of a car product\n- `Year` : Year of Manufacturing\n- `Origin`: Country of importer (Gulf \/ Saudi \/ Other)\n- `Color`: Color of the used car\n- `Options`: Full Options \/ Semi-Full \/ Standard\n- `Engine_Size`: The engine size of used car\n- `Fuel_Type`: Fuel type size of used car (Diesel \/ Gas \/ Hybrid)\n- `Gear_Type`: Automatic \/ Manual\n- `Mileage`: The average distance that a vehicle can travel on (in km)\n- `Region`: The region in which the used car was offered for sale\n- `Price`: Price of the used car (in SAR)\n- `Negotiable`: If True, the price is 0. This means the price is negotiable (not set)\n\n\n `Price` will be our target column because we want to predict it. The other columns will be our predictor variables that predict the price.","470149e2":"### Splitting dataset into Traing and Testing sets","135389fa":"# Step 3: Visualizing the Data","87f381e7":"### Model Evaluation","bc0f0b49":"# Step 4: Featue Engineering","2d5fa2c8":"#### Insights:\n- `Skoda`, `Mercury`, and `Subaru` are cheapest sold cars.\n- `Rolls-Royce`, `Bentley`, and `Aston Martin` have the highest average price.\n","ca84bcc5":"#### Inference:\n- `Year` of manufacting seems to have a positive correlation with `price`, which is expected.\n\n- `Mileage` appears to have a negative correlation with `price`. \n- `Engine_Size` have a week correlation with the `price`.","85edb5bb":"We can clearly notice that there is values that seems not realistic to consider as a car price. In order to not skew the results, I decided to drop the rows that contains price less that 5000 Riyal.","c0fe7e8a":"<!-- from sklearn.model_selection import train_test_split\n\ncars_train, cars_test = train_test_split(cars_sig, train_size = 0.7, test_size = 0.3, random_state = 100)\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nnum_col = ['Year', 'Engine_Size', 'Mileage', 'Price']\ncars_train[num_col] = scaler.fit_transform(cars_train[num_col]) -->","863a2d18":"#### Insights :\n- The plot seemed to be right-skewed, meaning that the most prices in the dataset are relatively low (Below 95,000).\n- There is a significant difference between the mean and the median of the price distribution.\n- The data points are far spread out from the mean, which indicates a high variance in the car prices. (85% of the prices are below 130,000, whereas the remaining 15% are between 130,000 and 1,150,000 SAR)","62a21908":"### Linear Regression Model","bbc3b86b":"`Dammam`, `Riyadh`, and `Sakaka` cities where the cars are moslty sold.","ae858987":"# Step 1: Reading & Understanding the Data","c93418c2":"# Step 5: Model Building & Machine Learning","fd3bf442":"Notice that column `Price` has some values of **0**, which is not possible. I will fix this later."}}