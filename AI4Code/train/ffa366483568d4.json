{"cell_type":{"27733aee":"code","1ac62d4a":"code","f02668dd":"code","14e1476d":"code","b1857c3f":"code","b3963ecc":"code","b0ea5ade":"code","74278022":"code","b18080d3":"code","d89f9928":"code","8b66b9d4":"code","60b39fc5":"markdown","872fd91a":"markdown","070c837a":"markdown","68cce10c":"markdown","55295177":"markdown"},"source":{"27733aee":"import numpy as np\nimport pandas as pd\npd.set_option('max_columns', None)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LinearRegression\nfrom xgboost import XGBRegressor","1ac62d4a":"data = pd.read_csv('..\/input\/engineering-graduate-salary-prediction\/Engineering_graduate_salary.csv')","f02668dd":"data","14e1476d":"data.info()","b1857c3f":"def onehot_encode(df, column):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=column)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","b3963ecc":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop ID column\n    df = df.drop('ID', axis=1)\n    \n    # Binary encoding\n    df['Gender'] = df['Gender'].replace({'f': 0, 'm': 1})\n    \n    # Date encoding\n    df['DOB'] = pd.to_datetime(df['DOB'])\n    df['DOB_year'] = df['DOB'].apply(lambda x: x.year)\n    df['DOB_month'] = df['DOB'].apply(lambda x: x.month)\n    df['DOB_day'] = df['DOB'].apply(lambda x: x.day)\n    df = df.drop('DOB', axis=1)\n    \n    # One-hot encoding\n    for column in ['10board', '12board', 'Degree', 'Specialization', 'CollegeState']:\n        df = onehot_encode(df, column)\n    \n    # Encode and fill missing values\n    df = df.replace(-1, np.NaN)\n    missing_columns = [column for column in df.columns if df.isna().sum()[column] > 0]\n    for column in missing_columns:\n        df[column] = df[column].fillna(df[column].mean())\n    \n    # Split df into X and y\n    y = df['Salary']\n    X = df.drop('Salary', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    # Scale X\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    X_train = pd.DataFrame(scaler.transform(X_train), columns=X.columns)\n    X_test = pd.DataFrame(scaler.transform(X_test), columns=X.columns)\n    \n    return X_train, X_test, y_train, y_test","b0ea5ade":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","74278022":"X_train","b18080d3":"y_train","d89f9928":"lin_model = LinearRegression()\nlin_model.fit(X_train, y_train)\n\nlin_r2 = lin_model.score(X_test, y_test)\n\nprint(\"Linear Regression R^2 Score: {:.5f}\".format(lin_r2))","8b66b9d4":"xgb_model = XGBRegressor()\nxgb_model.fit(X_train, y_train)\n\nxgb_r2 = xgb_model.score(X_test, y_test)\n\nprint(\"XGBoost R^2 Score: {:.5f}\".format(xgb_r2))","60b39fc5":"# Preprocessing","872fd91a":"# Getting Started","070c837a":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/aQ_8zjPWtvw","68cce10c":"# Training","55295177":"# Task for Today  \n\n***\n\n## Engineering Salary Prediction  \n  \nGiven *data about engineering students*, let's try to predict the **salary earned** by a given student.  \n  \nWe will use a linear regression model and XGBoost to make our predictions."}}