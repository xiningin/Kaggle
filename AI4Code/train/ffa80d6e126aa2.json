{"cell_type":{"b7c7c482":"code","d8a1369b":"code","baa7ff6d":"code","678213d5":"code","8f3bdb45":"code","0fc67384":"code","8e4f5097":"code","9d023fee":"code","b5ba0010":"code","084357bf":"code","c95baa24":"code","d6654781":"code","0def1f06":"code","a3ea04e8":"code","0b792a6e":"code","06afef73":"code","9a570a90":"code","ad30576e":"code","7413bcb2":"code","ee36e8d3":"code","5a1eff50":"code","58c0deac":"code","935d7ea8":"code","e2cb8220":"markdown","db21697e":"markdown","b9bbed77":"markdown","2a6599f8":"markdown","f72f4cb2":"markdown","e4071d40":"markdown","fed6d032":"markdown","cbcd02ab":"markdown","25d45836":"markdown","db6d70c8":"markdown","c50f0835":"markdown","46f2508b":"markdown","26a99526":"markdown"},"source":{"b7c7c482":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom sklearn.model_selection import train_test_split\nimport pickle\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import *\n\nimport zipfile ","d8a1369b":"print('Number of images in train set',len(os.listdir('..\/input\/histopathologic-cancer-detection\/train')))\nprint('Number of images in test set',len(os.listdir('..\/input\/histopathologic-cancer-detection\/test')))","baa7ff6d":"# Load the training data into a DataFrame named 'train'.\ntrain = pd.read_csv(f'..\/input\/histopathologic-cancer-detection\/train_labels.csv',dtype = 'str')\n\n# Print the shape of the resulting DataFrame.\nprint('Training set size', train.shape)","678213d5":"# Display the first few rows of the dataframe.\ntrain.head(10) ","8f3bdb45":"#The id in the csv file does not have .tif extension, let's add it.\ntrain['id'] = train['id'].apply(lambda x:f'{x}.tif')\ntrain.head()","0fc67384":"#Let's check the class distribution\n#train['label'].value_counts()\ntrain.label.value_counts() ","8e4f5097":"#Let's check the class distribution in proportion\n#y_train = train.label\nround((train.label.value_counts() \/ len(train)).to_frame()*100,2)","9d023fee":"#display 16 images\n\nsample = train.sample(n=16).reset_index()\nplt.figure(figsize=(6,6)) # specifying the overall grid size\n\nfor i, row in sample.iterrows():  \n    img = mpimg.imread(f'..\/input\/histopathologic-cancer-detection\/train\/{row.id}')\n    label = row.label\n    \n    plt.subplot(4,4,i+1)    # the number of images in the grid is 6*6 (16)\n    plt.imshow(img)\n    plt.text(0, -5, f'Class {label}', color='k')\n    plt.axis('off')\n    \nplt.tight_layout()\nplt.show()","b5ba0010":"from sklearn.utils import shuffle\n\nsample_size = 80000\ntrain_0 = train[train['label'] == '0'].sample(sample_size, random_state=1)\ntrain_1 = train[train['label'] == '1'].sample(sample_size, random_state=1)\n\n#combine the two dataframe\ntrain_set = pd.concat([train_0, train_1], axis=0).reset_index(drop=True)\n\n#Shuffle\ntrain = shuffle(train_set)\n\ntrain['label'].value_counts()","084357bf":"# Split the dataframe train into two DataFrames named train_df and valid_df. \n\ntrain_df, valid_df = train_test_split(train, test_size=0.20, random_state=1, stratify=train.label)\n\nprint(train_df.shape)\nprint(valid_df.shape)","c95baa24":"# Create image data generators for both the training set and the validation set. \n# Here we use the data generators to scale the pixel values by a factor of 1\/255. \n\ntrain_datagen = ImageDataGenerator(rescale=1\/255)\nvalid_datagen = ImageDataGenerator(rescale=1\/255)","d6654781":"\nBATCH_SIZE = 64\n\ntrain_loader = train_datagen.flow_from_dataframe(\n    dataframe = train_df,\n    directory = '..\/input\/histopathologic-cancer-detection\/train\/',\n    x_col = 'id',\n    y_col = 'label',\n    batch_size = BATCH_SIZE,\n    seed = 1,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = (96,96)\n)\n\nvalid_loader = train_datagen.flow_from_dataframe(\n    dataframe = valid_df,\n    directory = '..\/input\/histopathologic-cancer-detection\/train\/',\n    x_col = 'id',\n    y_col = 'label',\n    batch_size = BATCH_SIZE,\n    seed = 1,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = (96,96)\n)","0def1f06":"# Let's determine the number of training and validation batches. \n\nTR_STEPS = len(train_loader)\nVA_STEPS = len(valid_loader)\n\nprint('Number of batches in the training set:',TR_STEPS)\nprint('Number of batches in the validation set:',VA_STEPS)","a3ea04e8":"np.random.seed(1)\ntf.random.set_seed(1)\n\ncnn_model = Sequential([\n    Cropping2D(cropping=((32, 32), (32, 32)), input_shape=(96,96,3)),\n    \n    Conv2D(filters=32, kernel_size=(3,3), padding='same', activation='relu'),\n    Conv2D(filters=32, kernel_size=(3,3), padding='same', activation='relu'),\n    MaxPooling2D(2,2),\n    Dropout(0.25),\n    BatchNormalization(),\n\n    Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'),\n    Conv2D(filters=64, kernel_size=(3,3), padding='same', activation='relu'),\n    MaxPooling2D(2,2),\n    Dropout(0.25),\n    BatchNormalization(),\n\n    Flatten(),\n    \n    Dense(128, activation='relu'),\n    Dropout(0.25),\n    Dense(64, activation='relu'),\n    Dropout(0.25),\n    Dense(32, activation='relu'),\n    Dropout(0.25),\n    Dense(16, activation='relu'),\n    Dropout(0.25),\n    BatchNormalization(),\n    Dense(2, activation='softmax')\n])\n \n\ncnn_model.summary()","0b792a6e":"# Define an optimizer and select a learning rate. \n# And then compile the model. \nimport tensorflow as tf\n\nopt = tf.keras.optimizers.Adam(0.001)\ncnn_model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy',tf.keras.metrics.AUC()])","06afef73":"%%time \n\nh1 = cnn_model.fit(\n    x = train_loader, \n    steps_per_epoch = TR_STEPS, \n    epochs = 25,\n    validation_data = valid_loader, \n    validation_steps = VA_STEPS, \n    verbose = 1\n)","9a570a90":"history = h1.history\nprint(history.keys())","ad30576e":"epoch_range = range(1, len(history['loss'])+1)\n\nplt.figure(figsize=[14,4])\nplt.subplot(1,3,1)\nplt.plot(epoch_range, history['loss'], label='Training')\nplt.plot(epoch_range, history['val_loss'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Loss'); plt.title('Loss')\nplt.legend()\nplt.subplot(1,3,2)\nplt.plot(epoch_range, history['accuracy'], label='Training')\nplt.plot(epoch_range, history['val_accuracy'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Accuracy'); plt.title('Accuracy')\nplt.legend()\nplt.subplot(1,3,3)\nplt.plot(epoch_range, history['auc'], label='Training')\nplt.plot(epoch_range, history['val_auc'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('AUC'); plt.title('AUC')\nplt.legend()\nplt.tight_layout()\nplt.show()","7413bcb2":"# we decrease the learning rate\ntf.keras.backend.set_value(cnn_model.optimizer.learning_rate, 0.0001)","ee36e8d3":"%%time \n\nh2 = cnn_model.fit(\n    x = train_loader, \n    steps_per_epoch = TR_STEPS, \n    epochs = 30,\n    validation_data = valid_loader, \n    validation_steps = VA_STEPS, \n    verbose = 1\n)","5a1eff50":"for k in history.keys():\n    history[k] += h2.history[k]","58c0deac":"epoch_range = range(1, len(history['loss'])+1)\n\nplt.figure(figsize=[14,4])\nplt.subplot(1,3,1)\nplt.plot(epoch_range, history['loss'], label='Training')\nplt.plot(epoch_range, history['val_loss'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Loss'); plt.title('Loss')\nplt.legend()\nplt.subplot(1,3,2)\nplt.plot(epoch_range, history['accuracy'], label='Training')\nplt.plot(epoch_range, history['val_accuracy'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Accuracy'); plt.title('Accuracy')\nplt.legend()\nplt.subplot(1,3,3)\nplt.plot(epoch_range, history['auc'], label='Training')\nplt.plot(epoch_range, history['val_auc'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('AUC'); plt.title('AUC')\nplt.legend()\nplt.tight_layout()\nplt.show()","935d7ea8":"# save the model and the combined history dictionary to files.\ncnn_model.save('cancer_model_v07.h5')\npickle.dump(history, open(f'cancer_history_v07.pkl', 'wb'))","e2cb8220":"# Data generator","db21697e":"# Histopathologic Cancer Detection\n## Identify metastatic tissue in histopathologic scans of lymph node sections\u00b6","b9bbed77":"# Load training dataframe","2a6599f8":"# Import packages","f72f4cb2":"# View sample of images","e4071d40":"# Train network","fed6d032":"# Label distribution","cbcd02ab":"# Number of images in the train and test folder","25d45836":"# Build network","db6d70c8":"# Save model and history","c50f0835":"# Let's balance the label distribution","46f2508b":"# About the images","26a99526":"#### There are 220,025 training images and 57,456 test images.\n#### The images are 96x96 pixels and are full color."}}