{"cell_type":{"7de6de71":"code","f5fa3a15":"code","e67ec34e":"code","bad93aac":"code","46101190":"code","a3214119":"code","a27ac39f":"code","4755f979":"code","170b0c61":"code","8febf977":"markdown","490527d3":"markdown","92b8ac7d":"markdown","faee7a3c":"markdown","48df2fea":"markdown","400d7530":"markdown","c195e8c6":"markdown","36fe075f":"markdown","c4f27a98":"markdown"},"source":{"7de6de71":"import numpy as np\nimport pandas as pd\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \ntest = pd.read_csv('\/kaggle\/input\/cat-in-the-dat-ii\/test.csv')\ntrain = pd.read_csv('\/kaggle\/input\/cat-in-the-dat-ii\/train.csv')","f5fa3a15":"%%time\n\n# Random permutation is needed for CatBoostEncoder to reduce leakage\ndef random_permutation(x):\n    perm = np.random.permutation(len(x)) \n    x = x.iloc[perm].reset_index(drop=True) \n    return x\n\ntrain = random_permutation(train)\ntest = random_permutation(test)\n\ntrain_ids = train.id\ntest_ids = test.id\n\ntrain.drop('id', 1, inplace=True)\ntest.drop('id', 1, inplace=True)\n\ntrain_targets = train.target\ntrain.drop('target', 1, inplace=True)","e67ec34e":"from category_encoders.cat_boost import CatBoostEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer","bad93aac":"%%time\n\nfor col in train.columns:\n    train[col] = train[col].astype(str)\n    train[col].fillna('NA', inplace=True)\n    test[col] = test[col].astype(str)\n    test[col].fillna('NA', inplace=True)","46101190":"%%time\n\n# noms 5-9\nfor i in [5,6,7,8,9]:\n    cbe = CatBoostEncoder()\n    train[f'nom_{i}'] = cbe.fit_transform(train[f'nom_{i}'], train_targets)\n    test[f'nom_{i}'] = cbe.transform(test[f'nom_{i}'])\n\n# ord 5\ncbe = CatBoostEncoder()\ntrain['ord_5'] = cbe.fit_transform(train['ord_5'], train_targets)\ntest['ord_5'] = cbe.transform(test['ord_5'])","a3214119":"%%time\n\nohe_cols = ['bin_0', 'bin_1', 'bin_2', 'bin_3', 'bin_4',\n            'nom_0', 'nom_1', 'nom_2', 'nom_3', 'nom_4',\n            'ord_0', 'ord_1', 'ord_2', 'ord_3', 'ord_4',\n            'day', 'month']\n\n# ColumnTransformer enables applying OneHotEncoder to the entire dataframe\ntransformer = ColumnTransformer(\n    [\n        (\"ohe\",\n         OneHotEncoder(sparse=True, drop='first'),\n         ohe_cols\n         )\n    ], remainder='passthrough'\n)\ntrain = transformer.fit_transform(train)\ntest = transformer.fit_transform(test)","a27ac39f":"%%time\n\nfrom sklearn.linear_model import LogisticRegressionCV\nclf = LogisticRegressionCV(cv=5, \n                           scoring='roc_auc', \n                           random_state=42, \n                           verbose=True, \n                           n_jobs=-1,\n                           max_iter = 1000)\nclf.fit(train, train_targets)","4755f979":"np.mean(clf.scores_[1])","170b0c61":"preds = clf.predict_proba(test)[:, 1]\npreds = pd.DataFrame(list(zip(test_ids, preds)), columns = ['id', 'target'])\npreds.sort_values(by=['id'], inplace = True)\n\npreds.to_csv(\".\/my_submission.csv\", index=False)","8febf977":"# Prepare submission","490527d3":"# Logistic Regression\n\nI'll use LogisticRegressionCV to do automatic parameter selection, and give me a sense of cross-validated model performance.","92b8ac7d":"### OneHotEncoder for other features","faee7a3c":"## Missing values\n\nConvert columns to strings and replace NAs with a non-NaN value to ensure that the one-hot encoder will treat missing values as their own class.","48df2fea":"Preprocessing strategy:\n\n* For high-cardinality features (`nom_5` to `nom_9` and `ord_5`) use `CatBoostEncoder` target encoding (it performs a type of leave-one-out encoding)\n* For other features use `OneHotEncoder`","400d7530":"# Preprocessing","c195e8c6":"### CatBoostEncoder for high-cardinality features","36fe075f":"### Model score averaged over folds","c4f27a98":"## Encoders"}}