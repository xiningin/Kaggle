{"cell_type":{"d095aba7":"code","eb79686a":"code","5ed3b85f":"code","20fe15dd":"code","3dee2069":"code","1e8e595b":"code","3aa1955e":"code","f5ab04c2":"code","7ab6f4c9":"code","f6b4e3ba":"code","81c9065b":"code","83a35f48":"code","4bb6b124":"code","9a401503":"code","e198b45c":"code","ee723a14":"code","e18e83f5":"code","8d43c32a":"code","3d141ee4":"code","16ff1030":"code","ccedc14d":"code","fa411889":"code","8bb194ef":"markdown","19f6e3ee":"markdown","ec80ee22":"markdown","0e70f510":"markdown","9667caeb":"markdown","dd0a9fa8":"markdown","9e164790":"markdown","7a2e430f":"markdown"},"source":{"d095aba7":"import numpy as np\nimport pandas as pd\nfrom sklearn.datasets import load_breast_cancer\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)","eb79686a":"# Read the dataset\ndata = load_breast_cancer()","5ed3b85f":"print(data.DESCR)","20fe15dd":"print(type(data.data))\nprint(type(data.target))","3dee2069":"print(data.data.shape)\nprint(data.target.shape)\nprint(data.target[data.target == 0].shape)\nprint(data.target[data.target == 1].shape)","1e8e595b":"df = pd.DataFrame(data.data, columns=data.feature_names)\ndf.head()","3aa1955e":"df['CANCER'] = data.target\ndf.head()","f5ab04c2":"df.describe(include='all')","7ab6f4c9":"df.info()","f6b4e3ba":"# Correlation\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Get correlations of each pair of features in the data\ncorrmat = df.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20, 20))\n\n# Plot the heat map\nsns.heatmap(df[top_corr_features].corr(), annot=True, cmap='RdYlGn')\nplt.show()","81c9065b":"X, y = df.iloc[:, :-1], df.iloc[:, -1]","83a35f48":"print(X.shape)\nprint(y.shape)","4bb6b124":"from sklearn import model_selection\n\nX_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.2, stratify=y, shuffle=True, random_state=0)\n\nprint(y.shape[0])\nprint(y_train.shape[0])\nprint(y_test.shape[0])","9a401503":"print(y_train.shape[0])\nprint(y_train[y_train==0].shape)\nprint(y_train[y_train==1].shape)","e198b45c":"print(y_test.shape[0])\nprint(y_test[y_test==0].shape)\nprint(y_test[y_test==1].shape)","ee723a14":"import xgboost as xgb\nfrom sklearn import metrics\n\nxgclf = xgb.XGBClassifier(use_label_encoder=False, eval_metric='mlogloss', tree_method = 'gpu_hist')\nxgclf.fit(X_train, y_train)","e18e83f5":"print('AUC on train data by XGBoost = ', metrics.roc_auc_score(y_true=y_train, y_score=xgclf.predict_proba(X_train)[:, 1]))\nprint('AUC on test data by XGBoost = ', metrics.roc_auc_score(y_true=y_test, y_score=xgclf.predict_proba(X_test)[:, 1]))","8d43c32a":"import warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\nxgb_model = xgb.XGBClassifier(use_label_encoder=False, eval_metric='mlogloss', tree_method = 'gpu_hist')\n\n# Default-Run of default-hyperparameters\nparameters = {'learning_rate': [0.3],\n             'max_depth': [6],\n             'min_child_weight': [1],\n             'n_estimators':[100]}\n\nscorer = metrics.make_scorer(metrics.roc_auc_score, greater_is_better=True, needs_proba=True, needs_threshold=False)\n\nclf_xgb = model_selection.GridSearchCV(estimator=xgb_model, param_grid=parameters, n_jobs=-1, cv=3, scoring=scorer, refit=True)\nclf_xgb.fit(X_train, y_train)","3d141ee4":"print(clf_xgb.best_params_)\nprint(clf_xgb.best_score_)\nprint(clf_xgb.best_estimator_)","16ff1030":"# Default-Run of default-hyperparameters\nparameters = {'learning_rate': [0.1, 0.2, 0.3, 0.4, 0.5],\n             'max_depth': [2, 4, 6, 8, 10],\n             'min_child_weight': [3, 5, 7, 11, 19, 25],\n             'n_estimators':[50, 100, 150, 200, 300, 500]}\n\nscorer = metrics.make_scorer(metrics.roc_auc_score, greater_is_better=True, needs_proba=True, needs_threshold=False)\n\nclf_xgb = model_selection.GridSearchCV(estimator=xgb_model, param_grid=parameters, n_jobs=-1, cv=3, scoring=scorer, refit=True, verbose=1)\nclf_xgb.fit(X_train, y_train)","ccedc14d":"print(clf_xgb.best_params_)\nprint(clf_xgb.best_score_)\nprint(clf_xgb.best_estimator_)","fa411889":"final_model = xgb.XGBClassifier(learning_rate=0.2, max_depth=4, min_child_weight=3, n_estimators=100, tree_method = 'gpu_hist')\nfinal_model.fit(X_train, y_train)\n\nprint('AUC on train data by XGBoost = ', metrics.roc_auc_score(y_true=y_train, y_score=xgclf.predict_proba(X_train)[:, 1]))\nprint('AUC on test data by XGBoost = ', metrics.roc_auc_score(y_true=y_test, y_score=xgclf.predict_proba(X_test)[:, 1]))","8bb194ef":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:150%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">Thank You<\/p>\n<\/div>","19f6e3ee":"<a id=\"section-four\"><\/a>\n# Default Run for Hyperparameters","ec80ee22":"<a id=\"section-six\"><\/a>\n# Final Model","0e70f510":"<a id=\"section-one\"><\/a>\n# Intial Setup","9667caeb":"<a id=\"section-three\"><\/a>\n# Model Building Preparation","dd0a9fa8":"<a id=\"section-five\"><\/a>\n# 1st Run for Hyperparameters","9e164790":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#5642C5;\n           font-size:150%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:white;\">Classification for XGBoost using GridSearchCV<\/p>\n<\/div>\n\n* [**Intial Setup**](#section-one)\n* [**Plotting Graphs for Relations**](#section-two)\n* [**Model Building Preparation**](#section-three)\n* [**Default Run for Hyperparameters**](#section-four)\n* [**1st Run for Hyperparameters**](#section-five)\n* [**Final Model**](#section-six)","7a2e430f":"<a id=\"section-two\"><\/a>\n# Plotting Graphs for Relations"}}