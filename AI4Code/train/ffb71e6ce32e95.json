{"cell_type":{"127a4bda":"code","e11a727d":"code","e68a71d2":"code","cbfc6c66":"code","7c0a4c45":"code","b37650d4":"code","89647a50":"code","66be3ff3":"code","c4cdb07c":"code","8f3fe4b1":"code","a762661a":"code","5aaed125":"code","1d4b8e75":"code","57ecaf6f":"code","755790c7":"code","4f8a2238":"code","914fef78":"code","b4460291":"code","860534b7":"code","a6f2f559":"code","edb973dd":"code","af7ac65c":"code","75eedaaa":"code","58e33c5a":"markdown"},"source":{"127a4bda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e11a727d":"train_df=pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv')\n","e68a71d2":"train_df.shape,test_df.shape","cbfc6c66":"train_df.head()","7c0a4c45":"x_train=train_df.loc[:,train_df.columns != 'label']\ny_train=train_df.loc[:,'label']\n\nx_test=test_df.loc[:,test_df.columns != 'label']\ny_test=test_df.loc[:,'label']","b37650d4":"x_train=np.array(x_train)\n\nx_test=np.array(x_test)","89647a50":"x_train=x_train.reshape(x_train.shape[0],28,28,1)\nx_test=x_test.reshape(x_test.shape[0],28,28,1)","66be3ff3":"#rescale the values between 0 and 1\nx_train=x_train\/255.0\nx_test=x_test\/255.0","c4cdb07c":"#number of unique labels for classification\nprint(set(y_train))","8f3fe4b1":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Flatten,Conv2D,MaxPooling2D\n","a762661a":"model=Sequential([\n    Conv2D(32,(3,3),activation='relu',input_shape=(28,28,1)),\n    MaxPooling2D(2,2),\n    \n    Conv2D(64,(3,3),activation='relu'),\n    MaxPooling2D(2,2),\n    \n    Conv2D(64,(3,3),activation='relu'),\n    MaxPooling2D(2,2),\n    \n    Flatten(),\n    Dense(512,activation='relu'),\n    Dense(10,activation='softmax')\n    \n    \n])","5aaed125":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","1d4b8e75":"model.summary()","57ecaf6f":"from tensorflow.keras.callbacks import Callback\nclass mycallback(Callback):\n    def on_epoch_end(self,epoch,logs={}):\n        if(logs.get('accuracy')>0.99):\n            print('Reached 99% accuracy')\n            self.model.stop_training=True\n\ncallback=mycallback()\n            ","755790c7":"#change the target variable to categorical\nfrom tensorflow.keras.utils import to_categorical\ny_train=to_categorical(y_train)\n\ny_test=to_categorical(y_test)","4f8a2238":"hist=model.fit(x_train,y_train,validation_split=0.2,epochs=10,verbose=1,callbacks=[callback])","914fef78":"acc=hist.history['accuracy']\nval_acc=hist.history['val_accuracy']\nepochs=range(len(acc))\n\nplt.plot(epochs,acc,'b',label='accuracy')\nplt.plot(epochs,val_acc,'r',label='val_accuracy')\nplt.legend()\nplt.show()","b4460291":"loss=hist.history['loss']\nval_loss=hist.history['val_loss']\n\nplt.plot(epochs,loss,'b',label='loss')\nplt.plot(epochs,val_loss,'r',label='val_loss')\nplt.legend()\nplt.show()","860534b7":"predictions=model.predict(x_test)","a6f2f559":"for i in range(5):\n    print('predicted',np.argmax(predictions[i]))\n    print('actual',np.argmax(y_test[i]))\n    print('---------------')","edb973dd":"prediction=[]\nlabels=[]\nfor i in range(len(y_test)):\n    prediction.append(np.argmax(predictions[i]))\n    labels.append(np.argmax(y_test[i]))\n\n\n","af7ac65c":"data=pd.DataFrame({'predictions':prediction,'labels':labels})\ndata.head(10)","75eedaaa":"from sklearn.metrics import confusion_matrix\ncm=confusion_matrix(data['predictions'],data['labels'])\nprint(cm)","58e33c5a":"### Building the model"}}