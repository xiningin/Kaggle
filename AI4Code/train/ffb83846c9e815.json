{"cell_type":{"b5e4de49":"code","0b7b1fad":"code","acd0c2ce":"code","d26bf6d3":"code","e2e58d30":"code","48ffb4b2":"code","d4dca0f8":"code","a038ba23":"code","7b23ee58":"code","a1e06163":"code","291f7c83":"code","a9b934f5":"code","4adcad82":"code","d9a8b24b":"code","68749a43":"code","5f862dd3":"code","09321851":"code","0830c878":"code","2dddaea1":"markdown"},"source":{"b5e4de49":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0b7b1fad":"train_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/train.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/test.csv')","acd0c2ce":"train_data.info()\ntrain_data.head()","d26bf6d3":"test_data.info()\ntest_data.head()","e2e58d30":"pd.read_csv('\/kaggle\/input\/tabular-playground-series-jun-2021\/sample_submission.csv')","48ffb4b2":"X = train_data.drop(['id', 'target'], axis=1)\ny = train_data['target']","d4dca0f8":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0)","a038ba23":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import StratifiedKFold\n\ncv = StratifiedKFold(10, random_state=0, shuffle=True)\n\nspace = {'penalty': ['l1', 'l2', 'elasticnet'],\n         'C': [0.0001, 0.001, 0.01, 0.1, 1, 10]}\n\nmodel = LogisticRegression(random_state=0)\n\nresult = RandomizedSearchCV(model, space, cv=cv, n_iter=10, scoring='neg_log_loss', n_jobs=-1)\nresult.fit(X_train, y_train)","7b23ee58":"print(result.best_score_)\nprint(result.best_params_)","a1e06163":"from sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression(penalty=result.best_params_['penalty'], C=result.best_params_['C'], random_state=0)","291f7c83":"logreg.fit(X_train, y_train)","a9b934f5":"from sklearn.metrics import log_loss\n\nlog_loss(y_train, logreg.predict_proba(X_train))","4adcad82":"log_loss(y_test, logreg.predict_proba(X_test))","d9a8b24b":"train_data.info()\ntrain_data.head()","68749a43":"logreg.predict_proba(train_data.drop(['id', 'target'], axis=1))","5f862dd3":"predictions = pd.merge(test_data['id'], pd.DataFrame(logreg.predict_proba(test_data.drop(['id'], axis=1)), columns=['Class_1', 'Class_2', 'Class_3', 'Class_4', 'Class_5', 'Class_6', 'Class_7', 'Class_8', 'Class_9']), left_index=True, right_index=True)","09321851":"predictions.info()\npredictions.head()","0830c878":"predictions.to_csv('submission.csv', index=False)","2dddaea1":"# Logistic Regression"}}