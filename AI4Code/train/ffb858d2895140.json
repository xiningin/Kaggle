{"cell_type":{"9593deaf":"code","f6bc6de9":"code","7e538f90":"code","6f9ee298":"code","7533ccee":"code","16c77db7":"code","c5d6ae84":"code","66b45432":"code","afa90580":"code","49ab8c17":"code","e00fad45":"code","a92525ca":"code","8d881c64":"code","eb30acd0":"code","14ad1062":"code","fb89aff5":"code","d242c1d7":"code","dad29d43":"code","759c7cbf":"code","d81fbfe8":"code","b1c34ffa":"code","7e3af319":"code","e4f0ec54":"code","df36c349":"code","0396bcad":"code","6c3882db":"code","37463d64":"code","e0bfefa9":"code","4accc1ef":"code","a1c16265":"code","54d54489":"code","e192c572":"code","e61509a8":"code","b680cdf3":"code","0bfd97a0":"code","10c47c30":"code","9197ad0f":"code","be917ef0":"code","f0efb738":"code","a86c1aa5":"code","909b2f40":"code","dd7ed5d3":"code","fbe0b952":"code","f1123fbd":"code","148181c7":"code","971637a7":"code","ede27eb0":"code","d61132d4":"code","34362b3f":"code","6c1c39d9":"code","30700c61":"code","e1cb35a7":"code","dbb2d21b":"code","e10be2f5":"code","d8d4cfa9":"code","d43b007f":"code","7a793cd1":"code","8189e639":"code","c13fd4d2":"markdown","dbe8fb4b":"markdown","9a4fc61a":"markdown","08667c14":"markdown","c61651e7":"markdown","06032730":"markdown","72d31510":"markdown","19b3e2dc":"markdown","8cb3c2d9":"markdown","507694ff":"markdown","9ecbbae6":"markdown","679d9684":"markdown","15e320af":"markdown","64512e4e":"markdown","b8434754":"markdown","3cb1e1fb":"markdown","449df019":"markdown","e9d53265":"markdown","167ce5b0":"markdown","ea2bf523":"markdown","b5640875":"markdown","44566005":"markdown","7cf1d273":"markdown","849e15d2":"markdown"},"source":{"9593deaf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f6bc6de9":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline","7e538f90":"titanic_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', index_col = 'PassengerId')\ntitanic_data.head(3)","6f9ee298":"titanic_data.info() # \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043d\u0430\u0448\u0435\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\n#titanic_data.shape # (891, 12) #  \u0440\u0430\u0437\u043c\u0435\u0440 \u0442\u0430\u0431\u043b\u0438\u0446\u044b","7533ccee":"titanic_data.isnull().sum() # \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","16c77db7":"titanic_data.head(2)","c5d6ae84":"titanic_data.Cabin.hist() # \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\n#print(titanic_data.Cabin.unique()) \ntitanic_data.Cabin = titanic_data.Cabin.fillna('ZZZ') # \u0437\u0430\u043c\u0435\u043d\u0438\u043c NaN\n\n#         \u043f\u0440\u043e\u0431\u0443\u044e \u0437\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0434\u043e\u043b\u0438 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0439 \n#titanic_data['C_1'] = titanic_data.Cabin.apply(lambda x: titanic_data.Cabin.count(x))\n\ntitanic_data.drop('Cabin', axis = 1) # \u0443\u0434\u0430\u043b\u0438\u043c \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n\"\"\"\nt1 = titanic_data.groupby('Cabin',as_index=True).agg({'Cabin':'count'}).rename(columns={'Cabin':'values'})\nt1 = t1.to_dict() # \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0430\u0435\u043c\n\ndef f_t1(x, List):\n    if x in List:\n        return List[x]# \/ len(titanic_data), 6)\nt1\nf_t1('ZZZ', t1)\n\ntitanic_data.Cabin.value_counts('ZZZ', normalize= False)\n\n###titanic_data.Cabin.apply(lambda x: f_t1(x, t1))\n\"\"\"\n#               \u043d\u0430\u0434\u043e \u0434\u043e\u0434\u0435\u043b\u0430\u0442\u044c\ntitanic_data.head(2)","66b45432":"# Cabin \u0443\u0434\u0430\u043b\u0438\u043c","afa90580":"# \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0443 Age \u0434\u043e \u0447\u0438\u0441\u0442\u043a\u0438\ntitanic_data.Age.hist()\nplt.ylabel('\u043a\u043e\u043b-\u0432\u043e \u043b\u044e\u0434\u0435\u0439')\nplt.xlabel('\u0432\u043e\u0437\u0440\u0430\u0441\u0442')","49ab8c17":"# \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u043c\u0443\u0436\u0447\u0438\u043d\u0430\u043c \u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0436\u0435\u043d\u0449\u0438\u043d\u0430\u043c\nmale_mean = round(titanic_data.query(\"Sex == 'male'\").Age.mean(), 2)\nfemale_mean = round(titanic_data.query(\"Sex == 'female'\").Age.mean(), 2)\nprint('male_mean - ', male_mean,', female_mean - ', female_mean)\n\n# \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 Age \u0434\u043b\u044f \u043c\u0443\u0436\u0447\u0438\u043d \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0441\u0440\u0435\u0434\u0438 \u043c\u0443\u0436\u0447\u0438\u043d\nmask_male = titanic_data.query(\"Sex == 'male' & Age == 'NaN'\").Age.index\ntitanic_data.loc[mask_male,'Age'] = male_mean\n\n# \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 Age \u0434\u043b\u044f \u0436\u0435\u043d\u0449\u0438\u043d \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0441\u0440\u0435\u0434\u0438 \u0436\u0435\u043d\u0449\u0438\u043d\nmask_female = titanic_data.query(\"Sex == 'female' & Age == 'NaN'\").Age.index\ntitanic_data.loc[mask_female,'Age'] = female_mean","e00fad45":"titanic_data.Age.hist() # \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u043f\u043e\u0441\u043b\u0435 \u0447\u0438\u0441\u0442\u043a\u0438 - \u043f\u043e\u0447\u0442\u0438 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435","a92525ca":"# \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a Name \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430 \u043a\u0430\u0442\u0435\u0433.\u0437\u043d\u0430\u0447. - \u043c\u0438\u0441\u0442\u0435\u0440 \u043c\u0438\u0441\u0441 \u043c\u0438\u0441\u0441\u0438\u0441 \u0438 \u0442\u0434\ndef name_mr(x):\n    \"\"\" \u0444. \u0434\u043b\u044f \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u043d\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n    \"\"\"\n    if 'Mrs' in x:\n        return 'Mrs'\n    elif 'Miss' in x:\n        return 'Miss'\n    elif 'Master' in x:\n        return 'Master'\n    elif 'Mr' in x:\n        return 'Mr'\n    elif 'Dr' in x:\n        return 'Dr'\n    else:\n        return 'OST' # \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u044e\u0434\u0430 \n    \n#name_mr('Futrelle, Mrs. Jacques Heath (Lily May Peel)')    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\ntitanic_data['status'] = titanic_data.Name.apply(name_mr)\nprint('\u0443\u043d\u0438\u043a.\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - ', titanic_data.status.nunique())\n\ntitanic_data.head(5)\n# \u043d\u0430\u0434\u043e \u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043c\u0435\u0436\u0434\u0443 Name \u0438 \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u043e\u0439. \u041d\u043e \u044d\u0442\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440.\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n","8d881c64":"# \u0437\u0430\u043c\u0435\u043d\u0438\u043c \nfrom sklearn import preprocessing\n","eb30acd0":"# Ticket - \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\nprint('\u0443\u043d\u0438\u043a.\u0437\u043d -', titanic_data.Ticket.nunique())\ntitanic_data.Ticket.unique()[:50]\n# \u043d\u0443\u0436\u0435\u043d \u043b\u0438 \u044d\u0442\u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a?\n# \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u0434\u043e\u043b\u0438\n#titanic_data.Ticket.hist()","14ad1062":"#\ntitanic_data.Embarked.hist() # \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u0438\u043d\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","fb89aff5":"titanic_data.Fare.hist()","d242c1d7":"titanic_data.head(3)","dad29d43":"titanic_data = titanic_data.drop(['Name','Ticket', 'Cabin'], axis = 1)\ntitanic_data.head(2)","759c7cbf":"titanic_data.Embarked.hist() # \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","d81fbfe8":"titanic_data1 = pd.get_dummies(titanic_data) # \u0443\u0431\u0435\u0440\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\nprint(titanic_data1.shape)\ntitanic_data1.head(3)","b1c34ffa":"titanic_data.head(3)","7e3af319":"titanic_data.Survived.hist(bins=4)\n# \u043f\u043e\u0447\u0442\u0438 \u043f\u043e\u0440\u043e\u0432\u043d\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043e","e4f0ec54":"X = titanic_data1.drop(['Survived'], axis = 1)\ny = titanic_data1['Survived']\nX.shape # (891, 16)","df36c349":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\n#from sklearn.model_selection import KFold\n\nfrom sklearn import preprocessing \nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\n\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import GridSearchCV","0396bcad":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","6c3882db":"from sklearn.linear_model import SGDClassifier\n#\u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\n#\u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0442\u044c\n#GridSearchCV \u0441\u043e\u0437\u0434\u0430\u0442\u044c\n#\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 GridSearchCV\n#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b\n#\u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043b\u0443\u0447\u0448\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443","37463d64":"clf_SGD = SGDClassifier(random_state= 42) \nclf_SGD.get_params().keys() # \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0442\u044c","e0bfefa9":"parameters_grid = {\n    'loss':[ 'log', 'squared_hinge', 'squared_loss'],\n    'penalty':['l1','l2'],\n    'max_iter':range(5,10),\n    'alpha':np.linspace(0.0001, 0.001, num=5)\n}","4accc1ef":"# \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043a\u0430\u0442\u044c \u043b\u0443\u0447\u0448\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\n#cv = 5 # \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044f \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\ngrid_cv = GridSearchCV(clf_SGD, parameters_grid, scoring=\"accuracy\")#, cv = 5)","a1c16265":"# \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\ngrid_cv.fit(X_train, y_train) # \u043e\u0431\u0443\u0447\u0438\u043c ","54d54489":"# \u043d\u0430\u0439\u0434\u0435\u043c \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \ngrid_cv.best_estimator_","e192c572":"print(grid_cv.best_score_) # \u043b\u0443\u0447\u0448\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nprint(grid_cv.best_params_) # \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","e61509a8":"# \u0434\u043b\u044f \u0431\u043e\u043b\u0448\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u043d\u0443\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c RandomizedSearchCV()","b680cdf3":"clf_dec_tree = DecisionTreeClassifier(criterion= 'entropy', max_depth= 3) # \u043d\u0430 \u0442\u0435\u0441\u0442\u0435 - 0.8203389830508474\nmax_depth_values = range(1, 10)\n\n# \u043f\u043e\u0438\u0441\u043a \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nscores_data = pd.DataFrame()\nfor i in max_depth_values:\n    clf_dec_tree = DecisionTreeClassifier(criterion= 'entropy', max_depth= i)\n    clf_dec_tree.fit(X_train, y_train)\n    train_score = clf_dec_tree.score(X_train, y_train)\n    test_score = clf_dec_tree.score(X_test, y_test)\n    \n    mean_cross_val_score = cross_val_score(clf_dec_tree, X_train, y_train, cv= 5).mean()\n    \n    temp_score_data = pd.DataFrame({'max_depth':[i], \n                                    'train_score':[train_score], \n                                    'test_score':[test_score],\n                                   'cross_val_score':[mean_cross_val_score]})\n    scores_data = scores_data.append(temp_score_data)\nscores_data.head(3)","0bfd97a0":"clf_dec_tree.get_params().keys() # \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043a\u0430\u043a\u0438\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c","10c47c30":"# \u043f\u043e\u0438\u0441\u043a \u043b\u0443\u0447\u0448\u0438\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432\nscores_data_long = pd.melt(scores_data, id_vars=['max_depth'], \n                           value_vars=['train_score', 'test_score', 'cross_val_score'],\n                          var_name= 'set_type', value_name= 'score')\nscores_data_long.head(3)","9197ad0f":"# \nfrom sklearn.model_selection import GridSearchCV # \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u0435\u0442\u0440\u0438\u043a\u0438\nclf_dec_tree = DecisionTreeClassifier()\nparameters = {'criterion':['gini','entropy'], 'max_depth':range(1,10)}\ngrid_Search_CV_clf = GridSearchCV(clf_dec_tree, param_grid= parameters, cv= 5)\ngrid_Search_CV_clf","be917ef0":"grid_Search_CV_clf.fit(X_train, y_train)\ngrid_Search_CV_clf.best_params_ # \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","f0efb738":"best_clf = grid_Search_CV_clf.best_estimator_\nbest_clf","a86c1aa5":"best_clf.score(X_test, y_test)","909b2f40":"from sklearn.metrics import precision_score # precision - \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \nfrom sklearn.metrics import recall_score # recall - \u043f\u043e\u043b\u043d\u043e\u0442\u0430\nfrom sklearn.metrics import f1_score\n\ny_pred = best_clf.predict(X_test)\nprint('precision - \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c -',precision_score(y_test, y_pred))\nprint('recall - \u043f\u043e\u043b\u043d\u043e\u0442\u0430 - ', recall_score(y_test, y_pred))\nprint('f1_score - ', f1_score(y_test, y_pred))","dd7ed5d3":"y_predicted_prob = best_clf.predict_proba(X_test)","fbe0b952":"pd.Series(y_predicted_prob[:,1]).hist() # \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0432 \u0442\u043e\u0442 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u043a\u043b\u0430\u0441\u0441","f1123fbd":"np.where(y_predicted_prob[:,1] > 0.8, 1 , 0) # \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0432 \u043a\u043b\u0430\u0441\u0441 1 \u0438\u043b\u0438 0 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 - \u0442\u0443\u0442 0,8\ny_pred = np.where(y_predicted_prob[:,1] > 0.6, 1 , 0)\nprint('precision - \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c -',precision_score(y_test, y_pred))\nprint('recall - \u043f\u043e\u043b\u043d\u043e\u0442\u0430 - ', recall_score(y_test, y_pred))","148181c7":"# \u043d\u0430\u0440\u0438\u0441\u0443\u0435\u043c ROC \u043a\u0440\u0438\u0432\u0443\u044e\nfrom sklearn.metrics import roc_curve, auc\nfpr, tpr, thresholds = roc_curve(y_test, y_predicted_prob[:,1])\nroc_auc= auc(fpr, tpr)\nplt.figure()\nplt.plot(fpr, tpr, color='darkorange', label='ROC curve (area = %0.2f)' % roc_auc)\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","971637a7":"from sklearn.ensemble import RandomForestClassifier # 0.77990\nfrom sklearn.svm import SVC # 0.73923\nfrom sklearn.ensemble import GradientBoostingClassifier # 0.80143 \n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold","ede27eb0":"clf_rf =  RandomForestClassifier()\nparams = {'n_estimators':range(18, 21), \n          'max_depth':range(10, 11)}\ngrid_Search_CV_clf = GridSearchCV(clf_rf, param_grid= params, cv= 5)\ngrid_Search_CV_clf.fit(X_train, y_train)\ngrid_Search_CV_clf.best_params_\nbest_clf = grid_Search_CV_clf.best_estimator_\nbest_clf.score(X_test, y_test) # 0.8338983050847457 \/ 0.8203389830508474\nbest_clf.feature_importances_ # \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \/ \u043a\u0430\u043a\u043e\u0439 \u0432\u043a\u043b\u0430\u0434 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432\u043d\u043e\u0441\u044f\u0442\nfeature_importances = best_clf.feature_importances_\nfeature_importances_df = pd.DataFrame({'feature':X_test.columns, \n                                       'feature_importances':feature_importances})\nfeature_importances_df\nfeature_importances_df.sort_values('feature_importances', ascending=False) # \u043e\u0442\u0441\u043e\u0440\u0438\u0440\u0443\u0435\u043c \u043f\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e","d61132d4":"#\nclf_grad_boost = GradientBoostingClassifier(n_estimators=320, random_state=42, \n                                    learning_rate=0.1,\n                                    max_depth= 3) # 0.8372881355932204\nclf_grad_boost.fit(X_train, y_train)\nclf_grad_boost.score(X_test, y_test) # 0.8271186440677966\n# 0.8169491525423729 \u0441 \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Fare_log - \u0441\u0442\u0430\u043b\u043e \u0445\u0443\u0436\u0435\nprint(clf_grad_boost.score(X_test, y_test))\n\n#for i in range(1, 10):\n#    clf_grad_boost = GradientBoostingClassifier(n_estimators=320, random_state=42, learning_rate=0.1, \n#                                        max_depth= i)\n#    clf_grad_boost.fit(X_train, y_train)\n#    print(i, '-', clf_grad_boost.score(X_test, y_test))\n    \n# n_estimators=320 \/ learning_rate= 0.1 \/ min_samples_split = 2 \/ min_samples_leaf= 2 \/ max_depth=8\n#kf = KFold(n_splits=5, random_state=1, shuffle=True)\n#w = cross_val_score(clf_grad_boost,X_test, y_test, cv= 10) # \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0445\u0443\u0436\u0435 \u0441\u0442\u0430\u043b\n#print(w.mean())","34362b3f":"titanic_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', index_col = 'PassengerId')\nprint(titanic_test.shape) # (418, 10)","6c1c39d9":"titanic_test.head(3)","30700c61":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 Sex\nmale_mean = round(titanic_test.query(\"Sex == 'male'\").Age.mean(), 2)\nfemale_mean = round(titanic_test.query(\"Sex == 'female'\").Age.mean(), 2)\nmask_male = titanic_test.query(\"Sex == 'male' & Age == 'NaN'\").Age.index\ntitanic_test.loc[mask_male,'Age'] = male_mean\nmask_female = titanic_test.query(\"Sex == 'female' & Age == 'NaN'\").Age.index\ntitanic_test.loc[mask_female,'Age'] = female_mean\n\n# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 Name\ntitanic_test['status'] = titanic_test.Name.apply(name_mr)\n\n# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043e\u043b\u043e\u043d\u043a\u0438 Embarked\n\n# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 Fare\nfare_mean = round(titanic_test.Fare.mean(), 2)\ntitanic_test.Fare.fillna(fare_mean)\n\ntitanic_test.head(3)","e1cb35a7":"titanic_test = titanic_test.drop(['Name', 'Cabin', 'Ticket'], axis = 1)\ntitanic_test = pd.get_dummies(titanic_test) # \u0443\u0431\u0435\u0440\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\nprint(titanic_test.shape) # (418, 16)","dbb2d21b":"titanic_test.head()","e10be2f5":"titanic_test.info()","d8d4cfa9":"#y_pred_test = best_clf.predict(titanic_test) # 0.7709\n#y_pred_test = clf.predict(titanic_test) # 0.77990\n#y_pred_test = best_clf.predict(titanic_test) # 0.7709 \u0441 \u043a\u0440\u043e\u0441\u0441 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0435\u0439\n#y_pred_test = clf.predict(titanic_test) # \u0431\u0435\u0437 \u043a\u043e\u043b\u043e\u043d\u043e\u043a Embarked - 77990\n# y_pred_test = clf.predict(titanic_test) # \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0430\u043c\u0438 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 Cabin  - 0.76794\n#y_pred_test = clf_svc.predict(titanic_test) # SVC - 0.73923\ny_pred_test = clf_grad_boost.predict(titanic_test) # GradientBoosting - 0.80143","d43b007f":"y_pred_test = best_clf.predict(titanic_test)","7a793cd1":"output = pd.DataFrame({'PassengerId': titanic_test.PassengerId, 'Survived': y_pred_test})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"+++\")","8189e639":"# 0.80143 \/ 0.79186 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u044f\u043a\u0438\u0445 ....\n# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0438 \u0438\u043b\u0438 ...","c13fd4d2":"### \u0427\u0438\u0441\u0442\u043a\u0430 - Name","dbe8fb4b":"### \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \/ \u043e\u0434\u043d\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e\u0435 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","9a4fc61a":"### Cabin - \u043e\u0447\u0438\u0441\u0442\u0438\u043c \/ \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u043c ","08667c14":"## \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 test \u0432\u044b\u0431\u043e\u0440\u043a\u0438","c61651e7":"## \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b - \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043b\u0443\u0447\u0448\u0438\u0439","06032730":"### \u0427\u0438\u0441\u0442\u043a\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","72d31510":"* ### - \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 \/ RandomForestClassifier","19b3e2dc":"## \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 - \u0447\u0438\u0441\u0442\u043a\u0430, \u043f\u043e\u0438\u0441\u043a \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u0437\u0430\u043c\u0435\u043d\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u0432\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445","8cb3c2d9":"###  - SGDClassifier","507694ff":"### Survived - \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u0440\u0433\u0435\u0442","9ecbbae6":"## \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c","679d9684":"### \u0423\u0434\u0430\u043b\u0438\u043c \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438","15e320af":"### \u041f\u0440\u0435\u0434\u0438\u043a\u0442","64512e4e":"### Embarked - \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u043c, \u0438\u0437\u043c\u0435\u043d\u0438\u043c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0438\u043c? ","b8434754":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438","3cb1e1fb":"### \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u0438 \u0442\u0430\u0440\u0433\u0435\u0442","449df019":"1. ### - \u0413\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u044b\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433 \/ GradientBoostingClassifier","e9d53265":"### \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0443 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e, \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0430\u0440\u0433\u0435\u0442 \u0434\u043b\u044f \u0442\u043e\u0439 \u0438 \u0434\u043b\u044f \u0442\u043e\u0439","167ce5b0":"### - \u0420\u0435\u0448\u0430\u044e\u0449\u0438\u0435 \u0434\u0435\u0440\u0435\u0432\u044c\u044f \/ DecisionTreeClassifier","ea2bf523":"## \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 (train) \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 ","b5640875":"### Age - \u043e\u0447\u0438\u0441\u0442\u0438\u043c ","44566005":"# \u041d\u0430\u0447\u043d\u0435\u043c \u0430\u043d\u0430\u043b\u0438\u0437","7cf1d273":"### - \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \/ precision-\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c, recall-\u043f\u043e\u043b\u043d\u043e\u0442\u0430, f1_score- F_\u043c\u0435\u0440\u0430","849e15d2":"### Ticket - \u0443\u0434\u0430\u043b\u0438\u043c \u0438\u043b\u0438 \u043d\u0435\u0442?"}}