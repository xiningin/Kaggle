{"cell_type":{"1164b0eb":"code","e7c913b9":"code","dbcb5ef6":"code","625caf75":"code","420e5424":"code","2b39db1d":"code","4fb475ad":"code","094a416f":"code","54280e62":"code","4845d8bf":"code","0639e5fa":"code","ec3e5d4f":"code","477af000":"code","028ee55b":"code","2ca9ffdd":"markdown","6cc22d57":"markdown","ae8ae300":"markdown","1926c6f8":"markdown","4b3c3e1f":"markdown"},"source":{"1164b0eb":"!pip install tabulate -q\n!pip install openpyxl -q","e7c913b9":"# Import Modules\nimport pandas as pd\nimport numpy as np\n\n# Visualisation\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# Tabulation\nfrom tabulate import tabulate\n\n# Display Settings\npd_options = {\n'display.precision'    : 2,\n'display.float_format' : '{:,.0f}'.format,\n}\n\nfor option, setting in pd_options.items():\n  pd.set_option(option, setting)\n","dbcb5ef6":"# Load Data\nxlsx = '..\/input\/sugar-world-production-consumption-and-trade\/Sugar_World-MarketTrade.xlsx'\n\ndf_prod = pd.read_excel(xlsx, sheet_name='Prod', index_col='Country')\ndf_cons = pd.read_excel(xlsx, sheet_name='Cons', index_col='Country')\ndf_expo = pd.read_excel(xlsx, sheet_name='Expo', index_col='Country')\ndf_impo = pd.read_excel(xlsx, sheet_name='Impo', index_col='Country')\n\n# DataFrame Dictionary\ndf_dict = {\n            'production': df_prod,\n            'consumption': df_cons,\n            'export': df_expo,\n            'import': df_impo }\n\n# df_dict.get('consumption')","625caf75":"# Custom Class\nclass Analysis:\n\n    # init method or constructor \n    def __init__(self, detail):\n      self.detail = detail\n\n    # Method1 : Extract & Tabulate Above Average\n    def aboveAvg(self):\n      \n      #get the dataframe from the dictionary\n      df_temp = df_dict.get(self.detail)\n\n      # Adding Total & Mean columns\n      df_temp['MEAN'] = df_temp.mean(axis=1)\n      df_temp['TOTAL'] = df_temp.sum(axis=1)\n\n      # Tabulate Above Average Countries per Year\n      table = []\n      for yr in df_temp.columns[0:6]:\n        abv_avg = df_temp[df_temp[yr] >= df_temp[yr].mean()].index.tolist()\n        table.append([yr, abv_avg])\n\n      print(tabulate(table, headers=['Year','Countries with above average '+str(self.detail)], tablefmt=\"pretty\"))\n  \n\n    # Method1 : Extract & Tabulate Above Average\n    def Visualise(self):\n\n      #get the dataframe from the dictionary\n      df_temp = df_dict.get(self.detail)\n\n      fig = go.Figure()\n\n      fig.add_trace(go.Bar(\n          x=df_temp.index,\n          y=df_temp['TOTAL'],\n          name='Total '+ self.detail,\n          #mode='lines+markers',\n          marker_color='#371E30'\n      ))\n\n      fig.add_trace(go.Bar(\n          x=df_temp.index,\n          y=df_temp['MEAN'],\n          name='Average '+ self.detail,\n          #mode='lines',\n          marker_color='#A03E99',\n      ))\n\n      fig.update_layout(barmode='group', \n                        xaxis_tickangle=-45, \n                        title= 'World Centrifugal Sugar: '+self.detail+ ' (Million Metric Tons, Raw Value)',\n                        title_x=0.5,\n                        titlefont_size=24\n                        )\n      fig.update_yaxes(title=\"Million Metric Tons, Raw Value\")\n      fig.show()      ","420e5424":"prod = Analysis('production')\nprod.aboveAvg()","2b39db1d":"prod.Visualise()","4fb475ad":"consume = Analysis('consumption')\nconsume.aboveAvg()","094a416f":"consume.Visualise()","54280e62":"expo = Analysis('export')\nexpo.aboveAvg()","4845d8bf":"expo.Visualise()","0639e5fa":"impo =  Analysis('import')\nimpo.aboveAvg()","ec3e5d4f":"impo.Visualise()","477af000":"# Create a comparison dataframe\ndata_comp = {\n              'Country':['India', 'European Union'],\n              'TotalProduction':[ df_prod.at['India','TOTAL'], df_prod.at['European Union','TOTAL'] ],\n              'TotalConsumption':[ df_cons.at['India','TOTAL'], df_cons.at['European Union','TOTAL'] ],\n              'TotalExport':[ df_expo.at['India','TOTAL'], df_expo.at['European Union','TOTAL'] ],\n              'TotalImport':[ df_impo.at['India','TOTAL'], df_impo.at['European Union','TOTAL'] ]\n            }\n\ndf_comp = pd.DataFrame(data_comp)\ndf_comp.set_index('Country', drop=True, inplace=True)\ndf_comp.head()","028ee55b":"fig = make_subplots(2, 2)\nfig.add_trace(go.Bar(x=df_comp.index, \n                     y=df_comp['TotalProduction'],\n                     name='TotalProduction',text=df_comp['TotalProduction'],marker_color='#C18C5D'\n                     ), 1, 1)\n\nfig.add_trace(go.Bar(x=df_comp.index, \n                     y=df_comp['TotalConsumption'],\n                     name='TotalConsumption', text=df_comp['TotalConsumption'],marker_color='#495867'\n                     ), 1, 2)\n\nfig.add_trace(go.Bar(x=df_comp.index, \n                     y=df_comp['TotalExport'],\n                     name='TotalExport', text=df_comp['TotalExport'],marker_color='#CE796B'\n                     ), 2, 1)\n\nfig.add_trace(go.Bar(x=df_comp.index, \n                     y=df_comp['TotalImport'],\n                     name='TotalImport', text=df_comp['TotalImport'],marker_color='#E7AD99'\n                     ), 2, 2)\n\nfig.update_xaxes(matches='x')\nfig.update_traces(texttemplate='%{text:.0f}', textposition='inside')\nfig.update_layout(\n                        xaxis_tickangle=0, \n                        title= 'India vs European Union: Sugar Production, Consumption & Trade',\n                        title_x=0.5,\n                        titlefont_size=18\n                 )\nfig.show()","2ca9ffdd":"## Export","6cc22d57":"## India vs European Union\n","ae8ae300":"## Import","1926c6f8":"## Production","4b3c3e1f":"## Consumption"}}