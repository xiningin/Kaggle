{"cell_type":{"53ea932a":"code","70b80751":"code","8a673ffb":"code","3bb3398d":"code","592a5056":"code","2ba1f408":"code","e02d613a":"code","a16ff3e7":"code","b9d5c277":"code","66733e13":"code","06406eef":"code","2d3c15e2":"code","17fc5b33":"markdown","2ecaf3d1":"markdown","62f3f4e9":"markdown","709d092b":"markdown","faba0050":"markdown","329f42a6":"markdown","88355182":"markdown","3804abe5":"markdown","9997edc9":"markdown","7260066c":"markdown"},"source":{"53ea932a":"import numpy as np \nimport pandas as pd \nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn import ensemble\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_validate,GridSearchCV\nimport xgboost as xgb\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder,LabelEncoder\nfrom collections import Counter","70b80751":"TRAIN_PATH = \"..\/input\/titanic\/train.csv\"\nTEST_PATH = \"..\/input\/titanic\/test.csv\"\nSAMPLE_SUBMISSION_PATH = \"..\/input\/titanic\/gender_submission.csv\"\nSUBMISSION_PATH = \"submission.csv\"\n\nID = \"PassengerId\"\nTARGET = \"Survived\"","8a673ffb":"BOOSTER = 'gbtree'\nTREE_METHOD = \"gpu_hist\"\nSEED = 42\nOBJECTIVE = 'binary:logistic'\nEVAL_METRICS = \"auc\"\n\nCV = 5\nVERBOSE = 10\nN_JOBS = -1","3bb3398d":"train = pd.read_csv(TRAIN_PATH)\ntest = pd.read_csv(TEST_PATH)","592a5056":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)","2ba1f408":"train.info()","e02d613a":"y = train[TARGET]\nX = train.drop([TARGET], axis=1)\nX_test = test","a16ff3e7":"params={\n        \"max_depth\":np.arange(1,10,1),\n       }\n\nxgb_est=xgb.XGBClassifier(booster=BOOSTER, \n                          tree_method=TREE_METHOD,\n                          random_state=SEED, \n                          objective=OBJECTIVE,\n                          eval_metric=EVAL_METRICS)\n\ngr_xgb_est=GridSearchCV( xgb_est,param_grid=params,cv=CV,n_jobs=N_JOBS,verbose=VERBOSE)","b9d5c277":"str_list = [] # empty list to contain columns with strings\nnum_list = []\nfor colname, colvalue in X.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='mean')),\n    ('scaler', StandardScaler())])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('encoder', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, num_list),\n        ('cat', categorical_transformer, str_list)])\nclf = Pipeline(steps=[('preprocessor', preprocessor),(\"model\", gr_xgb_est)])\nclf.fit(X, y)","66733e13":"gr_xgb_est.best_estimator_","06406eef":"pred_test = clf.predict(X_test)\npred_test[:10]","2d3c15e2":"submission = pd.read_csv(SAMPLE_SUBMISSION_PATH)\nsubmission[TARGET] = pred_test.astype(int)\nsubmission.to_csv(SUBMISSION_PATH, index=False)\nsubmission.head()","17fc5b33":"# split data ( input data \/ label data )","2ecaf3d1":"# submit result","62f3f4e9":"# import libraries","709d092b":"# data variables","faba0050":"# load data ","329f42a6":"# model variables","88355182":"# predict test data using model","3804abe5":"# GridSearch Best XGB","9997edc9":"# make model using auto pipe line","7260066c":"# preprocessing"}}