{"cell_type":{"9cd44d38":"code","7d60eb38":"code","bb024bd5":"code","c6e9ab57":"code","cae51ca1":"code","35dad71b":"code","7b88b28a":"code","e55677d3":"code","66bd5a9c":"code","58155d8c":"code","11371a1a":"code","414bb100":"code","5f5892fb":"code","52db2ea9":"code","44c0b597":"code","02c6aa80":"markdown","0820c8ae":"markdown","e8048064":"markdown","38567d16":"markdown","a207449d":"markdown","b6d13df8":"markdown","d3e98076":"markdown","bac8acde":"markdown","d8534a66":"markdown","e8f3bbcf":"markdown","032b5877":"markdown","97c82307":"markdown","1cfdf2ef":"markdown","fd2e2810":"markdown"},"source":{"9cd44d38":"import matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport cv2\nimport string\nimport math\nimport tensorflow as tf\nimport random\n\nfrom keras.models import Model\nfrom keras import layers","7d60eb38":"label = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        tmp=os.path.join(dirname, filename)\n        label.append(tmp[tmp.rfind('\/')+1:len(tmp)])","bb024bd5":"dir_name = '\/kaggle\/input\/samples\/'\nnum_samples = len(label)\nprint(\"Total images: \",num_samples)","c6e9ab57":"symbols = string.ascii_lowercase + \"0123456789\" # All symbols captcha can contain\nnum_symbols = len(symbols)\nimg_shape = (50, 200, 1)\nlen_captcha = 5\nBATCH_SIZE = 32\nEPOCHS = 100\n\nprint(num_symbols)","cae51ca1":"X = np.zeros((num_samples, 50, 200, 1)) #1070*50*200\nY = np.zeros((num_samples, len_captcha, num_symbols)) #1070*5*36\n\nfor i in range(num_samples):\n    img=cv2.imread(os.path.join(dir_name,label[i]),cv2.IMREAD_GRAYSCALE)\n    #plt.imshow(img, cmap=plt.get_cmap('gray'))\n    img = img \/ 255\n    img = np.reshape(img, img_shape)\n    tmp = np.zeros((len_captcha, num_symbols))\n    for j in range(len_captcha):\n        t = symbols.find(label[i][j])\n        tmp[j,t] = 1\n    X[i] = img\n    Y[i] = tmp","35dad71b":"num_train = math.ceil(0.8*num_samples)\nnum_test = num_samples - num_train\n\nX_train = X[:num_train]\nY_train = Y[:num_train]\n\nX_test = X[num_train:]\nY_test = Y[num_train:]\n\nprint(\"Total training captcha: \",num_train)\nprint(\"Total test captcha: \",num_test)","7b88b28a":"def create_model():\n    inp = layers.Input(shape=img_shape) #50x200\n    conv1 = layers.Conv2D(16, (3, 3), activation='relu')(inp)\n    maxp1 = layers.MaxPooling2D(2, 2)(conv1)\n    conv2 = layers.Conv2D(32, (3, 3), activation='relu')(maxp1)\n    maxp2 = layers.MaxPooling2D(2, 2)(conv2)\n    conv3 = layers.Conv2D(64, (3, 3), activation='relu')(maxp2)\n    maxp3 = layers.MaxPooling2D(2, 2)(conv3)\n    flat = layers.Flatten()(maxp3)\n    outputs = []\n    for _ in range(5):\n        dense = layers.Dense(100, activation='relu')(flat)\n        drop = layers.Dropout(0.5)(dense)\n        res = layers.Dense(num_symbols, activation='softmax')(drop)\n    \n        outputs.append(res)\n\n    model = Model(inp,outputs)\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=[\"accuracy\"])\n    return model","e55677d3":"model = create_model()\nmodel.summary()","66bd5a9c":"history = model.fit(X_train,[Y_train[:,0],Y_train[:,1],Y_train[:,2],Y_train[:,3],Y_train[:,4]],\n                    batch_size=BATCH_SIZE,\n                    epochs=EPOCHS,\n                    verbose=2,\n                    shuffle=True,\n                    validation_split=0.2\n                   )","58155d8c":"model.save(\"model.h5\")\nprint(\"Saved model to disk\")","11371a1a":"model = tf.keras.models.load_model('model.h5')","414bb100":"def predict(filepath):\n    img = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)\n    if img is None:\n        print(\"Error\");\n    else:\n        #plt.imshow(img, cmap=plt.get_cmap('gray'))\n        img = img \/ 255\n    res = np.array(model.predict(img[np.newaxis, :, :, np.newaxis]))\n    ans = np.reshape(res, (len_captcha, num_symbols))\n    capt = ''\n    probs = 1\n    for a in ans:\n        capt += symbols[np.argmax(a)]\n        probs *= np.max(a)\n    \n    return capt, probs\n    \n        ","5f5892fb":"count=0\n\nfor i in range(num_train,num_samples):\n    tmp=label[i]\n    Captcha, Probs = predict(os.path.join(dir_name,tmp))\n    if (Captcha==tmp[:len_captcha]):\n        count = count + 1\ntest_acc = count \/ num_test\nprint(\"Test accuracy: \",test_acc)","52db2ea9":"def check_captcha(number=25):\n    plt.figure(figsize=(15, 15))\n    count = 0\n    for i in range(number):\n        tmp=label[random.randint(num_train, num_samples-1)]\n        capt, probs = predict(os.path.join(dir_name, tmp))\n        img = cv2.imread(os.path.join(dir_name, tmp), cv2.IMREAD_GRAYSCALE)\n        plt.subplot(5, 5, i+1)\n        plt.imshow(img, cmap=plt.get_cmap('gray'))\n        plt.xlabel(capt)\n        plt.xticks([])\n        plt.yticks([])\n        if capt==tmp[:5]:\n            count = count + 1\n    print(\"Number of true predicted captchas: \", count, \"\/25\")","44c0b597":"check_captcha()","02c6aa80":"Chia data l\u00e0m 2 t\u1eadp train v\u00e0 test","0820c8ae":"Load model","e8048064":"H\u00e0m d\u1ef1 \u0111o\u00e1n m\u00e3 captcha","38567d16":"H\u00e0m t\u1ea1o model","a207449d":"T\u1ea1o model","b6d13df8":"\u0110\u00e1nh gi\u00e1 model","d3e98076":"\u0110\u1ecdc nh\u00e3n c\u00e1c captcha","bac8acde":"L\u01b0u model","d8534a66":"T\u1ed5ng s\u1ed1 m\u1eabu captcha","e8f3bbcf":"Train model","032b5877":"Kh\u1edfi t\u1ea1o c\u00e1c gi\u00e1 tr\u1ecb","97c82307":"x\u00e2y d\u1ef1ng c\u00e1c m\u1ea3ng X (\u1ea3nh) v\u00e0 Y (captcha)","1cfdf2ef":"Import c\u00e1c th\u01b0 vi\u1ec7n","fd2e2810":"Th\u1eed d\u1ef1 \u0111o\u00e1n 25 captcha ng\u1eabu nhi\u00ean"}}