{"cell_type":{"ca322e4f":"code","47607395":"code","5fe23631":"code","47162a5e":"code","17b584f7":"code","46f0161b":"code","ad1a26d4":"code","cfbf9b5f":"code","45f0364f":"markdown","6755268f":"markdown","7261b61f":"markdown","5def1b88":"markdown","77101adb":"markdown","791ca45e":"markdown","2f3f3f82":"markdown","ea7bdb53":"markdown"},"source":{"ca322e4f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nprint(os.listdir(\"..\/input\"))","47607395":"data = pd.read_csv('..\/input\/basic_data_files.csv', nrows=2000000, low_memory=False)","5fe23631":"import plotly\nprint('Plotly Version: ',plotly.__version__)\n\nimport plotly.offline as py\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected=True)","47162a5e":"# We'll make a choropleth of the total reported release incidences for 2016:\nreports = pd.DataFrame(index=data[data.YEAR=='2016'].ST.value_counts().sort_index().index.tolist(), \n                       columns=['2016'],\n                       data=data[data.YEAR == '2016'].ST.value_counts().sort_index().values\n                      )\n\n# initial, simple choropleth\ntrace = dict(type='choropleth',\n                     name='2016',\n                     locations = reports.index,\n                     z = reports['2016'],\n                     locationmode = 'USA-states',\n                     colorbar = dict(title='# Reported Chemical Releases')\n                    )\n\n# Plot layout\nlayout = dict(title = 'Number of Toxic Chemicals Released in US States in 2016',\n              geo = dict(scope='usa', projection=dict(type='albers usa'))\n             )\n\nfig = dict(data=[trace], layout=layout)\npy.iplot(fig)","17b584f7":"import ipywidgets as widgets\nfrom ipywidgets import interact, interact_manual, Layout, interactive\n\n# We'll make a choropleth of the total reported release incidences for 2016:\nreports = pd.DataFrame(index=data[data.YEAR == '2016'].ST.value_counts().sort_index().index.tolist(), \n                   columns=['2016'],\n                   data=data[data.YEAR == '2016'].ST.value_counts().sort_index().values\n                  )\n\n# Plot layout\nlayout = dict(title = 'Number of Toxic Chemicals Released in US States in 2016',\n              geo = dict(scope='usa', projection=dict(type='albers usa'))\n             )\n@interact\ndef use_colorscale(colorscale = ['Blackbody', 'Bluered', 'Blues', 'Earth', 'Electric', 'Greens', 'Greys', ...\n                                 'Hot', 'Jet', 'Picnic', 'Portland', 'Rainbow', 'RdBu', 'Reds', 'Viridis', 'YlGnBu', 'YlOrRd'],\n                   reversescale = [True, False]):\n    # change trace\n    trace = dict(type='choropleth',\n                         colorscale=colorscale,\n                         reversescale=reversescale,\n                         name='2016',\n                         locations = reports.index,\n                         z = reports['2016'],\n                         locationmode = 'USA-states',\n                         colorbar = dict(title='# Reported Chemical Releases')\n                        )\n    \n    fig = dict(data=[trace], layout=layout)\n    py.iplot(fig)   ","46f0161b":"# add slider\n\n# get list of the years in order, easiest if manually created vs. search and using list(set())\nyears = [i for i in range(2000, 2017)]\n\n#create data frame with index=states and columns=year\nstate_counts = pd.DataFrame(index=data[data.YEAR == '2016'].ST.value_counts().sort_index().index.tolist(), columns=years)\n\n# fill each year column with the number of contaminated sites in each state\nfor i in years: state_counts[i] = data[data.YEAR == str(i)].ST.value_counts()\n\n# create a list and loop through every year, store the trace in data_bal and then update with a \n# new year will have a list with a trace for every year\ndata_bal = []\nfor i in years:\n    data_upd = [dict(type='choropleth',\n                     name=i,\n                     colorscale = 'Blues',\n                     reversescale=True,\n                     locations = state_counts[i].index,\n                     z = state_counts[i].values,\n                     locationmode = 'USA-states',\n                     colorbar = dict(title='# Reported Chemical Releases'\n                                     )\n                    )\n               ]\n    \n    data_bal.extend(data_upd)\n    \n# set menus inside the plot\n# Create list called 'Steps', where each element is a boolean list indicating which trace \n# in data_bal should be used. The length of data_bal = number of years in the slider, so for \n# each year on the slider we will have a boolean list that is the length of 'years', with \n# every value set to 'False', except for the element corresponding to the trace for that year, \n# which we set with 'step['arg'][1][i]=True'. Each list will be called with the slider to\n# tell plotly which trace with show for that slider option. The 'restyle' method means we are\n# editting data in the plot, and the 'visible' argument is the bool array mentioned previously.\nsteps = []\nfor i in range(0,len(data_bal)):\n    step = dict(method = \"restyle\",\n                args = [\"visible\", [False]*len(data_bal)],\n                label = years[i]) \n    step['args'][1][i] = True\n    steps.append(step)\n\n# Sliders layout:\nsliders = [dict(active = 10,\n                currentvalue = {\"prefix\": \"Year: \"},\n                pad = {\"t\": 50},\n                steps = steps)]\n\n# Plot layout\nlayout = dict(title = 'Number of Toxic Chemicals Released in US States',\n              geo = dict(scope='usa',\n                         projection=dict( type='albers usa')),\n              sliders = sliders)\n\nfig = dict(data=data_bal, layout=layout)\npy.iplot(fig)","ad1a26d4":"def plot_choro(state_counts):\n    data_bal = []\n    for i in years:\n        data_upd = [dict(type='choropleth',\n                         name=i,\n                         colorscale = 'Blues',\n                         reversescale=True,\n                         locations = state_counts[i].index,\n                         z = state_counts[i].values,\n                         locationmode = 'USA-states',\n                         colorbar = dict(title='# Reported Chemical Releases'\n                                         )\n                        )\n                   ]\n\n        data_bal.extend(data_upd)\n    steps = []\n    for i in range(0,len(data_bal)):\n        step = dict(method = \"restyle\",\n                    args = [\"visible\", [False]*len(data_bal)],\n                    label = years[i]) \n        step['args'][1][i] = True\n        steps.append(step)\n    # Sliders layout:\n    sliders = [dict(active = 10,\n                    currentvalue = {\"prefix\": \"Year: \"},\n                    pad = {\"t\": 50},\n                    steps = steps)]\n    # Plot layout\n    layout = dict(title = 'Number of Toxic Chemicals Released in US States',\n                  geo = dict(scope='usa',\n                             projection=dict( type='albers usa')),\n                  sliders = sliders)\n    fig = dict(data=data_bal, layout=layout)\n    py.iplot(fig)","cfbf9b5f":"years = [i for i in range(2000, 2016+1)]\nstate_counts = pd.DataFrame(index=data[data.YEAR == str(2016)].ST.value_counts().sort_index().index.tolist(), columns=years)\nfor i in years: state_counts[i] = data[data.YEAR == str(i)].ST.value_counts()\n\n# normalize the scalebar by adding a row 'norm' so that the plotly choropleth will \n# normalize each column to that maximum use the maximum value of the entire \n# DataFrame so the scale bar is consistent over all years\nstate_counts.loc['norm'] = state_counts.max().max()\n\n# plot_choro (same lines as before):\nplot_choro(state_counts) ","45f0364f":"### Data: <br>\nThe bare minimum data to make a choropleth is a list of states\/contries using a standardized format. Plotly recognizes ISO-3, US state names, and country names. Then you'll need a corresponding list of values for the colour intensity of each geographic area, Plotly automatically scales the colour so these values can be as large or as small as you like. \n\nI make a DataFrame 'reports' to list the number of reported chemical spills in each state. Note, I needed to sort_index() of the value_counts() to keep the values consistent with the labels (more relevent when you have multiple years and some states are not included).\n\nBelow is a pretty plain choropleth that can be quickly copied.","6755268f":"Wow, Texas has quite the number of chemical spills!\nThis wsa just the beginning, Plotly allows you to customize a lot of different features such as:\n\nTrace Elements:\n- colorscale:\n> colorscale =  [ 'Blackbody' | 'Bluered' | 'Blues' | 'Earth' | 'Electric' | 'Greens' |'Greys' | 'Hot' | 'Jet' | 'Picnic' | 'Portland' | 'Rainbow' | 'RdBu' | 'Reds' | 'Viridis' | 'YlGnBu' | 'YlOrRd' ]\n- reversescale: \n> reversescale=True\/False\n- locationmode:\n> locationmode= [\"ISO-3\" | \"USA-states\" | \"country names\"]\n    - must match locations provided\n\nLayout Elements:\n- geo>scope>projection> type:\n> type = [ enumerated : \"equirectangular\" | \"mercator\" | \"orthographic\" | \"natural earth\" | \"kavrayskiy7\" | \"miller\" | \"robinson\" | \"eckert4\" | \"azimuthal equal area\" | \"azimuthal equidistant\" | \"conic equal area\" | \"conic conformal\" | \"conic equidistant\" | \"gnomonic\" | \"stereographic\" | \"mollweide\" | \"hammer\" | \"transverse mercator\" | \"albers usa\" | \"winkel tripel\" | \"aitoff\" | \"sinusoidal\" ]\n    - sets the topographic type, experiment to see some cool projections\n    - you can also set the rotation and intial view angles, etc.\n\nThere many more adjustments, but they're rather hard to find. With a bit of work you can sift through the chart reference to find more: https:\/\/plot.ly\/python\/reference\/#choropleth \n\nOut of interest I've made a widget that allows you to choose which colourscale and view the map below, but this won't work on Kaggle so you can experiment in a Jupyter notebook. I've provided and hidden the code below to make the widget work with this dataset:\n","7261b61f":"First, lets check plotly version:","5def1b88":"I highly recommend using the ipywidgets feature in notebooks, it's quite simple and easy once you've already made the plot and gives so much extra flexibility.\n\nThat's it for this kernel, hopefully this helps someone make a choropleth and please leave any comments or suggestions in the comment section!","77101adb":"# How To Easily Make a Choropleth with Plotly\n\nI've run into Plotly choropleth problems a few times over the last few months and I was always frustrated at how little _clear_ information was available online. As a result the aim of this Kernel will be to lay out how to easily make a Plotly Choropleth, as well as explain some key details for begginers. At the end I add some extra features that could be useful for dashboards and such. I'll try to keep the text as short and concise as possible.\n\nI'll be using the US EPA Toxic Release Inventory Dataset provided to Kaggle by the EPA.","791ca45e":"![](https:\/\/i.imgur.com\/CSRPuEo.png)","2f3f3f82":"Nice, we have our slider all set up. But, if you look carefully you can see that each choropleth is individually scaled, so your plot may not show proper changes over time. I ran into this issue when using this dataset to have a slider from 1987-2016 (there are far, far more reported spills nowadays vs. 1993, but the plots looked the same).\n\n# Normalize Choropleths \nIf you add a row to the state_counts DataFrame where every element is the maximum value from the entire dataframe, Plotly will automatically scale each plot to that value.\n\nSee the change below:","ea7bdb53":"# Adding a Slider:\n\nOur dataset actually has many years of data, it would be convenient to be able to interact and show the data changing over time. Here's where Plotly's 'slider' comes in handy.\n\nThe slider works by 'restyling' the input data, but you must create the 'trace' for each plot ahead of time, store them all in a list, and then tell Plotly which trace to use with a boolean list corresponding to our trace list. Kind of confusing, but you can see how it works below:"}}