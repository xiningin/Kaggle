{"cell_type":{"390de8fe":"code","4598ab66":"code","fa15fb42":"code","fb883528":"code","59343577":"code","06ee9bef":"code","236b0be6":"code","230dda19":"code","66684288":"code","7d78c42a":"code","19b66394":"code","dffa26fa":"code","2863652d":"code","a323f04c":"code","9a02a427":"code","dcbb3e6a":"code","97d28f10":"code","573f0d44":"code","3ba7f5c4":"code","b9f4eb60":"code","b74a8923":"code","6ef21fac":"code","be761756":"code","33d7fa95":"code","4752f776":"code","1e865196":"code","085e02e5":"code","34cfaa69":"code","aaa8a885":"code","6f649a91":"code","bd0eac5b":"code","d6fbf411":"code","27d3bcdc":"code","43f45caa":"code","59aa5db3":"code","66a7f5ac":"code","d213b210":"code","a3b870c3":"code","8be7776f":"code","6c3c6069":"code","d7ffc27b":"code","3c9b74e8":"code","abcd5c52":"code","4dcea5bd":"code","2738c09c":"code","29e88673":"code","941d93be":"code","6419f461":"code","6745b277":"code","c4fc7370":"code","0e30f102":"code","d8e175ff":"code","004e723b":"code","b2f251f8":"code","0267103f":"code","e84d9796":"code","e3edbdc8":"code","f3f232a8":"code","12c1a30c":"code","51c40b11":"code","9edaeb91":"code","2edc6257":"code","27aadd91":"code","66d5031f":"code","64c7a2ca":"code","7ae03abd":"code","647294f0":"code","5c5e6ed5":"code","75ec7ac5":"code","64ee3369":"code","6d721691":"code","a5c19db2":"code","0dadff16":"code","02985c16":"code","5a773a71":"code","7ae76787":"code","64ad2300":"code","34077991":"code","8807f6ab":"code","866336a3":"code","419148a8":"code","fb6b463f":"code","9d99c1e1":"code","f4a3308f":"code","f2bf6586":"code","43d7e94d":"code","c77221c1":"code","b8716d7b":"code","3769fdd4":"code","b413c815":"code","5afa49e7":"code","49da043f":"code","8a84b332":"code","0fb10d63":"code","4af853c3":"code","31cf5605":"code","512f9d15":"code","0628e18d":"code","cd6ac675":"code","d5278a05":"code","b94e5372":"code","9a0e220c":"code","5fc245c8":"code","a8ec3f08":"code","95160d64":"code","683a2ee1":"code","c394d4f1":"code","d1e39a46":"code","7f9c4cb8":"code","4a4f7eaf":"code","706bfeea":"code","c4297a85":"code","918c99db":"code","d1f0e9ad":"code","374162ca":"code","eee3132b":"code","b27f8e51":"code","38ee9586":"code","2b8346e5":"code","73fe3bf6":"code","ae63822a":"code","2de14c66":"code","cf8ebde3":"code","d434fa15":"code","ceb4cea6":"code","5ec45cd9":"code","9b809d99":"code","e88b9911":"code","d7ad3893":"code","19485247":"code","2c96d575":"code","45e41ec0":"code","0788eea8":"code","db3834c7":"code","e60e4d5c":"code","feb4042a":"code","19421acb":"code","85b9aa11":"code","3f6420e9":"code","98b780fd":"code","bb4419b7":"code","fda63b52":"code","0585bd92":"code","b538f438":"code","46b870f2":"code","9d45e1f6":"code","f790209b":"code","9a5f43bd":"code","5d373db4":"code","6d9014b8":"code","bc3936ae":"code","1c28f4dc":"code","1130163e":"code","98a5f1fb":"code","5071b63a":"code","fa9928c6":"code","6de1d337":"code","aa74bc5a":"code","f5794d28":"code","c95b7bdc":"code","d3a78b94":"code","27b1e115":"code","00884c65":"code","a19d972b":"code","d6566e09":"code","d92cae2b":"code","5f7ac072":"code","9312f48f":"code","78fae825":"code","e02dff21":"code","61f46012":"code","15b5cebd":"code","466a613d":"code","ca7011fc":"code","dcc11fe9":"code","c9f07518":"code","42752685":"code","0b47f2b2":"code","6bf14163":"code","14b5a0ed":"code","44e73ed4":"code","cb93fa04":"code","522f259f":"code","46377833":"code","7eb3d86b":"code","53439fd3":"code","f9202c83":"code","8ca86fdd":"code","724ffadc":"code","52254de3":"code","4d6e2896":"code","44eb4c09":"code","03a1a4c3":"code","3189fe1d":"code","7d49a545":"code","4c64bd05":"code","9074f156":"code","0e723c99":"code","710d8ed3":"code","030e6d61":"code","7dfe7020":"code","6a8d3227":"code","6589b8cb":"code","dcdb05fc":"code","a8fe0d94":"code","65887751":"code","e7316fb0":"code","299f9c98":"code","6001b3ce":"code","5c0a73d2":"code","3034386a":"code","0241cae5":"code","5ff754bd":"code","53b322de":"code","894c2c83":"code","ade85527":"code","8bd7d848":"code","56153942":"code","54354568":"code","8a0f4b9f":"code","ffc468e6":"code","b356af35":"code","c4cc0d55":"code","1433cf62":"code","b37f7f54":"code","d7461f29":"code","6a0a1932":"code","43c5254d":"code","a1a3f8e9":"code","9a99fa42":"code","e6325518":"code","dc613e5d":"code","8150f92e":"code","a86d29ac":"code","f18101cc":"code","10d9196f":"code","6d1452fd":"code","5523a351":"markdown","5a009a0a":"markdown","4bcc23ab":"markdown","4b03dde8":"markdown","40f5a60e":"markdown","2bbdef6d":"markdown","e60afdf2":"markdown","2e709444":"markdown","304cfa19":"markdown","fd25a845":"markdown","37d93165":"markdown","e49255b7":"markdown","75cd5830":"markdown","2881eda2":"markdown","be4a6a90":"markdown","09dc1906":"markdown","13370394":"markdown","d9650f67":"markdown","d3d6f0a5":"markdown","cc065139":"markdown","df1be743":"markdown","be1bc397":"markdown","7791e22a":"markdown","3b1f68f8":"markdown","28ea98bf":"markdown","d184d4fb":"markdown","f62ab332":"markdown","0046a802":"markdown","7a33cb74":"markdown","202fcd7b":"markdown","f4f61cd1":"markdown","33dae3bf":"markdown","ecaacf61":"markdown","3a27504f":"markdown","96df3a31":"markdown","20f2ad16":"markdown","b45e9437":"markdown","c78054a5":"markdown","7a47d080":"markdown","8baa2451":"markdown","e161f689":"markdown","f99d404f":"markdown","c9dd8d34":"markdown","bd99e1d7":"markdown","158f44ff":"markdown","3e4cd021":"markdown","926bf78d":"markdown","c6bd32f1":"markdown","61402394":"markdown","d1d9175c":"markdown","09b7359b":"markdown","002f0c63":"markdown","2611038e":"markdown","bd071711":"markdown","ac08547c":"markdown","5ec74155":"markdown","e8d99bbb":"markdown","8b45b8b2":"markdown","5ba84855":"markdown","dc91187d":"markdown","c76f3fa3":"markdown","10024b2d":"markdown","c71054a2":"markdown","d0171124":"markdown","a1ca4cfa":"markdown","fcb8c999":"markdown","89f7c459":"markdown","27249e14":"markdown","0e7386db":"markdown","fac9bc61":"markdown","22041f55":"markdown","2d53df0d":"markdown","6d6c94f1":"markdown","265d72c7":"markdown","42454786":"markdown","50879de9":"markdown","eaa0e853":"markdown","2f7e4a2c":"markdown","cb3978b2":"markdown","9d67d32c":"markdown","a5963902":"markdown","5fc9b9a2":"markdown","adb950d7":"markdown","97b4de42":"markdown","abc5569d":"markdown","2837d61c":"markdown","fa1e9810":"markdown","ec22071d":"markdown","05a694b9":"markdown","35cf6078":"markdown","c9093903":"markdown","0804b063":"markdown","4815f325":"markdown","c3b254a3":"markdown","4608c6e7":"markdown","7146fea7":"markdown","45d5e12f":"markdown","095dfded":"markdown","0c340a67":"markdown","55d84061":"markdown","f99c0360":"markdown","5e5045bb":"markdown","53d6c00e":"markdown","4c28c0c9":"markdown","d82c1691":"markdown","a3d1d0f8":"markdown","cf3e16e1":"markdown","6dd2d547":"markdown","ae879223":"markdown","f02bf9b4":"markdown","3a2e834d":"markdown","710ef8ae":"markdown","dbbcd60f":"markdown","c0ace833":"markdown","2439e906":"markdown","ea063345":"markdown","71933987":"markdown","e508fb66":"markdown","66b1a5fc":"markdown","98ce108c":"markdown","2a022b64":"markdown","d4ea729e":"markdown","aca83342":"markdown","a4b6ce35":"markdown","4c513b02":"markdown","f629a420":"markdown","34e1ec92":"markdown","027b9ef2":"markdown","f36edec5":"markdown","6a182e9b":"markdown","b22f6953":"markdown","891adfe0":"markdown","70bf2c75":"markdown","6bedb669":"markdown","60109534":"markdown","eb299dd1":"markdown","60d9164f":"markdown","367adf95":"markdown","8deff9c6":"markdown","f39aaaf5":"markdown","69a77667":"markdown","d8e58ff7":"markdown","f51bf6ef":"markdown","01c1bfb9":"markdown","13ad6392":"markdown","b16085ae":"markdown","64503802":"markdown","3f03e5bb":"markdown","5138873e":"markdown","e72dea4a":"markdown","d621a5ee":"markdown","5547410c":"markdown","b674bef3":"markdown","33169aaf":"markdown","5f47f6b6":"markdown"},"source":{"390de8fe":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport pandas as pd\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport itertools","4598ab66":"application_data = pd.read_csv(r'\/kaggle\/input\/application_data.csv')\nprevious_application = pd.read_csv(r'\/kaggle\/input\/previous_application.csv')\ncolumns_description = pd.read_csv(r'\/kaggle\/input\/columns_description.csv',skiprows=1)","fa15fb42":"print (\"application_data     :\",application_data.shape)\nprint (\"previous_application :\",previous_application.shape)\nprint (\"columns_description  :\",columns_description.shape)","fb883528":"pd.set_option(\"display.max_rows\", None, \"display.max_columns\", None)\ndisplay(\"application_data\")\ndisplay(application_data.head(3))","59343577":"display(\"previous_application \")\ndisplay(previous_application.head(3))","06ee9bef":"display(\"columns_description\")\npd.set_option('display.max_colwidth', -1)\ncolumns_description=columns_description.drop(['1'],axis=1)\ndisplay(columns_description)","236b0be6":"fig = plt.figure(figsize=(18,6))\nmiss_previous_application = pd.DataFrame((previous_application.isnull().sum())*100\/previous_application.shape[0]).reset_index()\nmiss_previous_application[\"type\"] = \"previous_application\"\nax = sns.pointplot(\"index\",0,data=miss_previous_application,hue=\"type\")\nplt.xticks(rotation =90,fontsize =7)\nplt.title(\"Percentage of Missing values in previous_application\")\nplt.ylabel(\"PERCENTAGE\")\nplt.xlabel(\"COLUMNS\")\nax.set_facecolor(\"k\")\nfig.set_facecolor(\"lightgrey\")","230dda19":"round(100*(previous_application.isnull().sum()\/len(previous_application.index)),2)","66684288":"previous_application=previous_application.drop([ 'AMT_DOWN_PAYMENT', 'RATE_DOWN_PAYMENT', 'RATE_INTEREST_PRIMARY',\n       \"RATE_INTEREST_PRIVILEGED\"],axis=1)","7d78c42a":"fig = plt.figure(figsize=(18,6))\nmiss_previous_application = pd.DataFrame((previous_application.isnull().sum())*100\/previous_application.shape[0]).reset_index()\nmiss_previous_application[\"type\"] = \"previous_application\"\nax = sns.pointplot(\"index\",0,data=miss_previous_application,hue=\"type\")\nplt.xticks(rotation =90,fontsize =7)\nplt.title(\"Percentage of Missing values in previous_application\")\nplt.ylabel(\"PERCENTAGE\")\nplt.xlabel(\"COLUMNS\")\nax.set_facecolor(\"k\")\nfig.set_facecolor(\"lightgrey\")","19b66394":"round(100*(previous_application.isnull().sum()\/len(previous_application.index)),2)","dffa26fa":"print(\"AMT_ANNUITY NULL COUNT:\" ,previous_application['AMT_ANNUITY'].isnull().sum())","2863652d":"previous_application['AMT_ANNUITY'].describe()","a323f04c":"sns.set_style('whitegrid') \nsns.distplot(previous_application['AMT_ANNUITY']) \nplt.show()\n","9a02a427":"print(\"AMT_GOODS_PRICE NULL COUNT:\" ,previous_application['AMT_GOODS_PRICE'].isnull().sum())","dcbb3e6a":"previous_application['AMT_GOODS_PRICE'].describe()","97d28f10":"sns.set_style('whitegrid') \nsns.distplot(previous_application['AMT_GOODS_PRICE']) \nplt.show()\n","573f0d44":"print(\"NAME_TYPE_SUITE NULL COUNT:\" ,previous_application['NAME_TYPE_SUITE'].isnull().sum())","3ba7f5c4":"previous_application['NAME_TYPE_SUITE'].value_counts()","b9f4eb60":"print(\"CNT_PAYMENT NULL COUNT:\" ,previous_application['CNT_PAYMENT'].isnull().sum())","b74a8923":"previous_application['CNT_PAYMENT'].describe()","6ef21fac":"sns.set_style('whitegrid') \nsns.boxplot(previous_application['CNT_PAYMENT']) \nplt.show()","be761756":"print(\"DAYS_FIRST_DRAWING :\" ,previous_application['CNT_PAYMENT'].isnull().sum())","33d7fa95":"previous_application['DAYS_FIRST_DRAWING'].describe()","4752f776":"sns.set_style('whitegrid') \nsns.boxplot(previous_application['DAYS_FIRST_DRAWING']) \nplt.show()","1e865196":"print(\"DAYS_FIRST_DUE :\" ,previous_application['DAYS_FIRST_DUE'].isnull().sum())","085e02e5":"previous_application['DAYS_FIRST_DUE'].describe()","34cfaa69":"sns.set_style('whitegrid') \nsns.boxplot(previous_application['DAYS_FIRST_DUE']) \nplt.show()","aaa8a885":"print(\"DAYS_LAST_DUE_1ST_VERSION :\" ,previous_application['DAYS_LAST_DUE_1ST_VERSION'].isnull().sum())","6f649a91":"previous_application['DAYS_LAST_DUE_1ST_VERSION'].describe()","bd0eac5b":"sns.set_style('whitegrid') \nsns.boxplot(previous_application['DAYS_LAST_DUE_1ST_VERSION']) \nplt.show()","d6fbf411":"print(\"DAYS_LAST_DUE:\" ,previous_application['DAYS_LAST_DUE'].isnull().sum())","27d3bcdc":"previous_application['DAYS_LAST_DUE'].describe()","43f45caa":"sns.set_style('whitegrid') \nsns.boxplot(previous_application['DAYS_LAST_DUE']) \nplt.show()","59aa5db3":"print(\"DAYS_TERMINATION :\" ,previous_application['DAYS_TERMINATION'].isnull().sum())","66a7f5ac":"previous_application['DAYS_TERMINATION'].describe()","d213b210":"sns.set_style('whitegrid') \nsns.boxplot(previous_application['DAYS_TERMINATION']) \nplt.show()","a3b870c3":"print(\"NFLAG_INSURED_ON_APPROVAL:\" ,previous_application['NFLAG_INSURED_ON_APPROVAL'].isnull().sum())","8be7776f":"previous_application['NFLAG_INSURED_ON_APPROVAL'].value_counts()","6c3c6069":"previous_application.isnull().sum()","d7ffc27b":"print(\"AMT_CREDIT :\" ,previous_application['AMT_CREDIT'].isnull().sum())","3c9b74e8":"previous_application['AMT_CREDIT'].describe()","abcd5c52":"sns.set_style('whitegrid') \nsns.boxplot(previous_application['AMT_CREDIT']) \nplt.show()\n","4dcea5bd":"print(\"PRODUCT_COMBINATION :\" ,previous_application['PRODUCT_COMBINATION'].isnull().sum())","2738c09c":"previous_application['PRODUCT_COMBINATION'].value_counts()","29e88673":"class color:\n   PURPLE = '\\033[95m'\n   CYAN = '\\033[96m'\n   DARKCYAN = '\\033[36m'\n   BLUE = '\\033[94m'\n   GREEN = '\\033[92m'\n   YELLOW = '\\033[93m'\n   RED = '\\033[91m'\n   BOLD = '\\033[1m'\n   UNDERLINE = '\\033[4m'\n   END = '\\033[0m'","941d93be":"obj_dtypes = [i for i in previous_application.select_dtypes(include=np.object).columns if i not in [\"type\"] ]\nnum_dtypes = [i for i in previous_application.select_dtypes(include = np.number).columns if i not in ['SK_ID_CURR'] + [ 'TARGET']]","6419f461":"print(color.BOLD + color.PURPLE + 'Categorical Columns' + color.END, \"\\n\")\nfor x in range(len(obj_dtypes)): \n    print(obj_dtypes[x])\n","6745b277":"print(color.BOLD + color.PURPLE + 'Numerical' + color.END, \"\\n\")\nfor x in range(len(obj_dtypes)): \n    print(obj_dtypes[x])","c4fc7370":"fig = plt.figure(figsize=(18,6))\nmiss_application_data = pd.DataFrame((application_data.isnull().sum())*100\/application_data.shape[0]).reset_index()\nmiss_application_data[\"type\"] = \"application_data\"\nax = sns.pointplot(\"index\",0,data=miss_application_data,hue=\"type\")\nplt.xticks(rotation =90,fontsize =7)\nplt.title(\"Percentage of Missing values in application_data\")\nplt.ylabel(\"PERCENTAGE\")\nplt.xlabel(\"COLUMNS\")\nax.set_facecolor(\"k\")\nfig.set_facecolor(\"lightgrey\")","0e30f102":"round(100*(application_data.isnull().sum()\/len(application_data.index)),2)","d8e175ff":"application_data=application_data.drop([ 'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3',\n       'APARTMENTS_AVG', 'BASEMENTAREA_AVG', 'YEARS_BEGINEXPLUATATION_AVG',\n       'YEARS_BUILD_AVG', 'COMMONAREA_AVG', 'ELEVATORS_AVG', 'ENTRANCES_AVG',\n       'FLOORSMAX_AVG', 'FLOORSMIN_AVG', 'LANDAREA_AVG',\n       'LIVINGAPARTMENTS_AVG', 'LIVINGAREA_AVG', 'NONLIVINGAPARTMENTS_AVG',\n       'NONLIVINGAREA_AVG', 'APARTMENTS_MODE', 'BASEMENTAREA_MODE',\n       'YEARS_BEGINEXPLUATATION_MODE', 'YEARS_BUILD_MODE', 'COMMONAREA_MODE',\n       'ELEVATORS_MODE', 'ENTRANCES_MODE', 'FLOORSMAX_MODE', 'FLOORSMIN_MODE',\n       'LANDAREA_MODE', 'LIVINGAPARTMENTS_MODE', 'LIVINGAREA_MODE',\n       'NONLIVINGAPARTMENTS_MODE', 'NONLIVINGAREA_MODE', 'APARTMENTS_MEDI',\n       'BASEMENTAREA_MEDI', 'YEARS_BEGINEXPLUATATION_MEDI', 'YEARS_BUILD_MEDI',\n       'COMMONAREA_MEDI', 'ELEVATORS_MEDI', 'ENTRANCES_MEDI', 'FLOORSMAX_MEDI',\n       'FLOORSMIN_MEDI', 'LANDAREA_MEDI', 'LIVINGAPARTMENTS_MEDI',\n       'LIVINGAREA_MEDI', 'NONLIVINGAPARTMENTS_MEDI', 'NONLIVINGAREA_MEDI',\n       'FONDKAPREMONT_MODE', 'HOUSETYPE_MODE', 'TOTALAREA_MODE',\n       'WALLSMATERIAL_MODE', 'EMERGENCYSTATE_MODE',\"OWN_CAR_AGE\",\"OCCUPATION_TYPE\"],axis=1)","004e723b":"fig = plt.figure(figsize=(18,6))\nmiss_application_data = pd.DataFrame((application_data.isnull().sum())*100\/application_data.shape[0]).reset_index()\nmiss_application_data[\"type\"] = \"application_data\"\nax = sns.pointplot(\"index\",0,data=miss_application_data,hue=\"type\")\nplt.xticks(rotation =90,fontsize =7)\nplt.title(\"Percentage of Missing values in application_data\")\nplt.ylabel(\"PERCENTAGE\")\nplt.xlabel(\"COLUMNS\")\nax.set_facecolor(\"k\")\nfig.set_facecolor(\"lightgrey\")\n\n","b2f251f8":"round(100*(application_data.isnull().sum()\/len(application_data.index)),2)","0267103f":"print(\"AMT_REQ_CREDIT_BUREAU_DAY NAN COUNT :\" ,application_data['AMT_REQ_CREDIT_BUREAU_DAY'].isnull().sum())","e84d9796":"application_data['AMT_REQ_CREDIT_BUREAU_DAY'].describe()","e3edbdc8":"print(\"AMT_REQ_CREDIT_BUREAU_HOUR NAN COUNT :\" ,application_data['AMT_REQ_CREDIT_BUREAU_HOUR'].isnull().sum())","f3f232a8":"application_data['AMT_REQ_CREDIT_BUREAU_HOUR'].describe()","12c1a30c":"print(\"AMT_REQ_CREDIT_BUREAU_MON NAN COUNT :\" ,application_data['AMT_REQ_CREDIT_BUREAU_MON'].isnull().sum())","51c40b11":"application_data['AMT_REQ_CREDIT_BUREAU_MON'].describe()","9edaeb91":"print(\"AMT_REQ_CREDIT_BUREAU_QRT NAN COUNT :\" ,application_data['AMT_REQ_CREDIT_BUREAU_QRT'].isnull().sum())","2edc6257":"print(\"AMT_REQ_CREDIT_BUREAU_WEEK NAN COUNT :\" ,application_data['AMT_REQ_CREDIT_BUREAU_WEEK'].isnull().sum())","27aadd91":"application_data['AMT_REQ_CREDIT_BUREAU_WEEK'].describe()","66d5031f":"print(\"AMT_REQ_CREDIT_BUREAU_YEAR NAN COUNT :\" ,application_data['AMT_REQ_CREDIT_BUREAU_YEAR'].isnull().sum())","64c7a2ca":"application_data['AMT_REQ_CREDIT_BUREAU_YEAR'].describe()","7ae03abd":"print(\"DEF_30_CNT_SOCIAL_CIRCLE NAN COUNT :\" ,application_data['DEF_30_CNT_SOCIAL_CIRCLE'].isnull().sum())","647294f0":"application_data['DEF_30_CNT_SOCIAL_CIRCLE'].describe()","5c5e6ed5":"print(\"DEF_30_CNT_SOCIAL_CIRCLE :\" ,application_data['DEF_30_CNT_SOCIAL_CIRCLE'].isnull().sum())","75ec7ac5":"application_data['DEF_30_CNT_SOCIAL_CIRCLE'].describe()","64ee3369":"print(\"OBS_60_CNT_SOCIAL_CIRCLE :\" ,application_data['OBS_60_CNT_SOCIAL_CIRCLE'].isnull().sum())","6d721691":"application_data['OBS_60_CNT_SOCIAL_CIRCLE'].describe()","a5c19db2":"print(\"DEF_60_CNT_SOCIAL_CIRCLE :\" ,application_data['DEF_60_CNT_SOCIAL_CIRCLE'].isnull().sum())","0dadff16":"application_data['DEF_60_CNT_SOCIAL_CIRCLE'].describe()","02985c16":"application_data.isnull().sum()","5a773a71":"print(\"AMT_ANNUITY  :\" ,application_data['AMT_ANNUITY'].isnull().sum())","7ae76787":"application_data['AMT_ANNUITY'].describe()","64ad2300":"sns.set_style('whitegrid') \nsns.distplot(application_data['AMT_ANNUITY']) \nplt.show()","34077991":"print(\"AMT_GOODS_PRICE   :\" ,application_data['AMT_GOODS_PRICE'].isnull().sum())","8807f6ab":"application_data['AMT_GOODS_PRICE'].describe()","866336a3":"sns.set_style('whitegrid') \nsns.distplot(application_data['AMT_GOODS_PRICE']) \nplt.show()","419148a8":"print(\"NAME_TYPE_SUITE :\" ,application_data['NAME_TYPE_SUITE'].isnull().sum())","fb6b463f":"application_data['NAME_TYPE_SUITE'].value_counts()","9d99c1e1":"print(\"CNT_FAM_MEMBERS :\" ,application_data['CNT_FAM_MEMBERS'].isnull().sum())","f4a3308f":"application_data['CNT_FAM_MEMBERS'].describe()","f2bf6586":"sns.set_style('whitegrid') \nsns.distplot(application_data['CNT_FAM_MEMBERS']) \nplt.show()","43d7e94d":"print(\"DAYS_LAST_PHONE_CHANGE :\" ,application_data['DAYS_LAST_PHONE_CHANGE'].isnull().sum())","c77221c1":"application_data['DAYS_LAST_PHONE_CHANGE'].describe()","b8716d7b":"import statistics \nstatistics.mode(application_data['DAYS_LAST_PHONE_CHANGE'])","3769fdd4":"print(type(application_data.info()))","b413c815":"application_data['DAYS_BIRTH'] = abs(application_data['DAYS_BIRTH'])\napplication_data['DAYS_ID_PUBLISH'] = abs(application_data['DAYS_ID_PUBLISH'])\napplication_data['DAYS_ID_PUBLISH'] = abs(application_data['DAYS_ID_PUBLISH'])\napplication_data['DAYS_LAST_PHONE_CHANGE'] = abs(application_data['DAYS_LAST_PHONE_CHANGE'])\n\n","5afa49e7":"display(\"application_data\")\ndisplay(application_data.head())","49da043f":"obj_dtypes = [i for i in application_data.select_dtypes(include=np.object).columns if i not in [\"type\"] ]\nnum_dtypes = [i for i in application_data.select_dtypes(include = np.number).columns if i not in ['SK_ID_CURR'] + [ 'TARGET']]","8a84b332":"print(color.BOLD + color.PURPLE + 'Categorical Columns' + color.END, \"\\n\")\nfor x in range(len(obj_dtypes)): \n    print(obj_dtypes[x])","0fb10d63":"print(color.BOLD + color.PURPLE +\"Numerical Columns\" + color.END, \"\\n\")\nfor x in range(len(num_dtypes)): \n    print(num_dtypes[x])","4af853c3":"fig = plt.figure(figsize=(13,6))\nplt.subplot(121)\napplication_data[\"CODE_GENDER\"].value_counts().plot.pie(autopct = \"%1.0f%%\",colors = [\"red\",\"yellow\"],startangle = 60,\n                                                                        wedgeprops={\"linewidth\":2,\"edgecolor\":\"k\"},explode=[.05,0,0],shadow =True)\nplt.title(\"Distribution of gender\")\nplt.show()","31cf5605":"plt.figure(figsize=(14,7))\nplt.subplot(121)\napplication_data[\"TARGET\"].value_counts().plot.pie(autopct = \"%1.0f%%\",colors = sns.color_palette(\"prism\",7),startangle = 60,labels=[\"repayer\",\"defaulter\"],\n                                                                        wedgeprops={\"linewidth\":2,\"edgecolor\":\"k\"},explode=[.1,0],shadow =True)\nplt.title(\"Distribution of target variable\")\n\nplt.subplot(122)\nax = application_data[\"TARGET\"].value_counts().plot(kind=\"barh\")\n\nfor i,j in enumerate(application_data[\"TARGET\"].value_counts().values):\n    ax.text(.7,i,j,weight = \"bold\",fontsize=20)\n\nplt.title(\"Count of target variable\")\nplt.show()","512f9d15":"application_data_x = application_data[[x for x in application_data.columns if x not in [\"TARGET\"]]]\nprevious_application_x = previous_application[[x for x in previous_application.columns if x not in [\"TARGET\"]]]\napplication_data_x[\"type\"] = \"application_data\"\nprevious_application_x[\"type\"] = \"previous_application\"\ndata = pd.concat([application_data_x,previous_application_x],axis=0) ","0628e18d":"plt.figure(figsize=(14,7))\nplt.subplot(121)\ndata[data[\"type\"] == \"application_data\"][\"NAME_CONTRACT_TYPE\"].value_counts().plot.pie(autopct = \"%1.0f%%\",colors = [\"orange\",\"red\"],startangle = 60,\n                                                                        wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\ncirc = plt.Circle((0,0),.7,color=\"white\")\nplt.gca().add_artist(circ)\nplt.title(\"distribution of contract types in application_data\")\n\nplt.subplot(122)\ndata[data[\"type\"] == \"previous_application\"][\"NAME_CONTRACT_TYPE\"].value_counts().plot.pie(autopct = \"%1.2f%%\",colors = [\"red\",\"yellow\",\"green\",'BLACK'],startangle = 60,\n                                                                        wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\ncirc = plt.Circle((0,0),.7,color=\"white\")\nplt.gca().add_artist(circ)\nplt.ylabel(\"\")\nplt.title(\"distribution of contract types in previous_application\")\nplt.show()\n\nplt.show()","cd6ac675":"fig = plt.figure(figsize=(13,6))\nplt.subplot(121)\ndata[data[\"type\"] == \"application_data\"][\"CODE_GENDER\"].value_counts().plot.pie(autopct = \"%1.0f%%\",colors = [\"red\",\"yellow\"],startangle = 60,\n                                                                        wedgeprops={\"linewidth\":2,\"edgecolor\":\"k\"},explode=[.05,0,0],shadow =True)\nplt.title(\"distribution of gender in application_data\")\nplt.show()","d5278a05":"fig  = plt.figure(figsize=(13,6))\nplt.subplot(121)\nax = sns.countplot(\"NAME_CONTRACT_TYPE\",hue=\"CODE_GENDER\",data=data[data[\"type\"] == \"application_data\"],palette=[\"r\",\"b\",\"g\"])\nax.set_facecolor(\"lightgrey\")\nax.set_title(\"Distribution of Contract type by gender -application_data\")\n\n\nplt.show()\n","b94e5372":"fig = plt.figure(figsize=(13,6))\n\nplt.subplot(121)\ndata[\"FLAG_OWN_CAR\"].value_counts().plot.pie(autopct = \"%1.0f%%\",colors = [\"gold\",\"orangered\"],startangle = 60,\n                                                                        wedgeprops={\"linewidth\":2,\"edgecolor\":\"k\"},explode=[.05,0],shadow =True)\nplt.title(\"distribution of client owning a car\")\n\nplt.subplot(122)\ndata[data[\"FLAG_OWN_CAR\"] == \"Y\"][\"CODE_GENDER\"].value_counts().plot.pie(autopct = \"%1.0f%%\",colors = [\"b\",\"orangered\"],startangle = 90,\n                                                                        wedgeprops={\"linewidth\":2,\"edgecolor\":\"k\"},explode=[.05,0,0],shadow =True)\nplt.title(\"distribution of client owning a car by gender\")\n\nplt.show()","9a0e220c":"plt.figure(figsize=(13,6))\nplt.subplot(121)\ndata[\"FLAG_OWN_REALTY\"].value_counts().plot.pie(autopct = \"%1.0f%%\",colors = [\"skyblue\",\"gold\"],startangle = 90,\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"k\"},explode=[0.05,0],shadow =True)\nplt.title(\"Distribution of client owns a house or flat\")\n\nplt.subplot(122)\ndata[data[\"FLAG_OWN_REALTY\"] == \"Y\"][\"CODE_GENDER\"].value_counts().plot.pie(autopct = \"%1.0f%%\",colors = [\"orangered\",\"b\"],startangle = 90,\n                                                                        wedgeprops={\"linewidth\":2,\"edgecolor\":\"k\"},explode=[.05,0,0],shadow =True)\nplt.title(\"Distribution of client owning a house or flat by gender\")\nplt.show()","5fc245c8":"fig = plt.figure(figsize=(12,10))\nplt.subplot(211)\nsns.countplot(application_data[\"CNT_CHILDREN\"],palette=\"Set1\",hue=application_data[\"TARGET\"])\nplt.legend(loc=\"upper center\")\nplt.title(\" Distribution of Number of children client has  by repayment status\")\nplt.subplot(212)\nsns.countplot(application_data[\"CNT_FAM_MEMBERS\"],palette=\"Set1\",hue=application_data[\"TARGET\"])\nplt.legend(loc=\"upper center\")\nplt.title(\" Distribution of Number of family members client has  by repayment status\")\nfig.set_facecolor(\"lightblue\")","a8ec3f08":"default = application_data[application_data[\"TARGET\"]==1][[ 'NAME_CONTRACT_TYPE', 'CODE_GENDER','FLAG_OWN_CAR', 'FLAG_OWN_REALTY']]\nnon_default = application_data[application_data[\"TARGET\"]==0][[ 'NAME_CONTRACT_TYPE', 'CODE_GENDER','FLAG_OWN_CAR', 'FLAG_OWN_REALTY']]\n\nd_cols = ['NAME_CONTRACT_TYPE', 'CODE_GENDER','FLAG_OWN_CAR', 'FLAG_OWN_REALTY']\nd_length = len(d_cols)\n\nfig = plt.figure(figsize=(16,4))\nfor i,j in itertools.zip_longest(d_cols,range(d_length)):\n    plt.subplot(1,4,j+1)\n    default[i].value_counts().plot.pie(autopct = \"%1.0f%%\",colors = sns.color_palette(\"prism\"),startangle = 90,\n                                        wedgeprops={\"linewidth\":1,\"edgecolor\":\"white\"},shadow =True)\n    circ = plt.Circle((0,0),.7,color=\"white\")\n    plt.gca().add_artist(circ)\n    plt.ylabel(\"\")\n    plt.title(i+\"-Defaulter\")\n\n\nfig = plt.figure(figsize=(16,4))\nfor i,j in itertools.zip_longest(d_cols,range(d_length)):\n    plt.subplot(1,4,j+1)\n    non_default[i].value_counts().plot.pie(autopct = \"%1.0f%%\",colors = sns.color_palette(\"prism\",3),startangle = 90,\n                                           wedgeprops={\"linewidth\":1,\"edgecolor\":\"white\"},shadow =True)\n    circ = plt.Circle((0,0),.7,color=\"white\")\n    plt.gca().add_artist(circ)\n    plt.ylabel(\"\")\n    plt.title(i+\"-Repayer\")","95160d64":"cols = [ 'AMT_INCOME_TOTAL', 'AMT_CREDIT','AMT_ANNUITY', 'AMT_GOODS_PRICE']\nlength = len(cols)\ncs = [\"r\",\"b\",\"g\",\"k\"]\n\nax = plt.figure(figsize=(18,18))\nax.set_facecolor(\"lightgrey\")\nfor i,j,k in itertools.zip_longest(cols,range(length),cs):\n    plt.subplot(2,2,j+1)\n    sns.distplot(data[data[i].notnull()][i],color=k)\n    plt.axvline(data[i].mean(),label = \"mean\",linestyle=\"dashed\",color=\"k\")\n    plt.legend(loc=\"best\")\n    plt.title(i)\n    plt.subplots_adjust(hspace = .2)","683a2ee1":"df = application_data.groupby(\"TARGET\")[cols].describe().transpose().reset_index()\ndf = df[df[\"level_1\"].isin([ 'mean', 'std', 'min', 'max'])] \ndf_x = df[[\"level_0\",\"level_1\",0]]\ndf_y = df[[\"level_0\",\"level_1\",1]]\ndf_x = df_x.rename(columns={'level_0':\"amount_type\", 'level_1':\"statistic\", 0:\"amount\"})\ndf_x[\"type\"] = \"REPAYER\"\ndf_y = df_y.rename(columns={'level_0':\"amount_type\", 'level_1':\"statistic\", 1:\"amount\"})\ndf_y[\"type\"] = \"DEFAULTER\"\ndf_new = pd.concat([df_x,df_y],axis = 0)\n\nstat = df_new[\"statistic\"].unique().tolist()\nlength = len(stat)\n\nplt.figure(figsize=(13,15))\n\nfor i,j in itertools.zip_longest(stat,range(length)):\n    plt.subplot(2,2,j+1)\n    fig = sns.barplot(df_new[df_new[\"statistic\"] == i][\"amount_type\"],df_new[df_new[\"statistic\"] == i][\"amount\"],\n                hue=df_new[df_new[\"statistic\"] == i][\"type\"],palette=[\"g\",\"r\"])\n    plt.title(i + \"--Defaulters vs Non defaulters\")\n    plt.subplots_adjust(hspace = .4)\n    fig.set_facecolor(\"lightgrey\")","c394d4f1":"cols = [ 'AMT_INCOME_TOTAL', 'AMT_CREDIT','AMT_ANNUITY', 'AMT_GOODS_PRICE']\n\ndf1 = data.groupby(\"CODE_GENDER\")[cols].mean().transpose().reset_index()\n\ndf_f   = df1[[\"index\",\"F\"]]\ndf_f   = df_f.rename(columns={'index':\"amt_type\", 'F':\"amount\"})\ndf_f[\"gender\"] = \"FEMALE\"\ndf_m   = df1[[\"index\",\"M\"]]\ndf_m   = df_m.rename(columns={'index':\"amt_type\", 'M':\"amount\"})\ndf_m[\"gender\"] = \"MALE\"\ndf_xna = df1[[\"index\",\"XNA\"]]\ndf_xna = df_xna.rename(columns={'index':\"amt_type\", 'XNA':\"amount\"})\ndf_xna[\"gender\"] = \"XNA\"\n\ndf_gen = pd.concat([df_m,df_f,df_xna],axis=0)\n\nplt.figure(figsize=(12,5))\nax = sns.barplot(\"amt_type\",\"amount\",data=df_gen,hue=\"gender\",palette=\"Set1\")\nplt.title(\"Average Income,credit,annuity & goods_price by gender\")\nplt.show()","d1e39a46":"fig = plt.figure(figsize=(10,8))\nplt.scatter(application_data[application_data[\"TARGET\"]==0]['AMT_ANNUITY'],application_data[application_data[\"TARGET\"]==0]['AMT_CREDIT'],s=35,\n            color=\"b\",alpha=.5,label=\"REPAYER\",linewidth=.5,edgecolor=\"k\")\nplt.scatter(application_data[application_data[\"TARGET\"]==1]['AMT_ANNUITY'],application_data[application_data[\"TARGET\"]==1]['AMT_CREDIT'],s=35,\n            color=\"r\",alpha=.2,label=\"DEFAULTER\",linewidth=.5,edgecolor=\"k\")\nplt.legend(loc=\"best\",prop={\"size\":15})\nplt.xlabel(\"AMT_ANNUITY\")\nplt.ylabel(\"AMT_CREDIT\")\nplt.title(\"Scatter plot between credit amount and annuity amount\")\nplt.show()","7f9c4cb8":"amt = application_data[[ 'AMT_INCOME_TOTAL','AMT_CREDIT',\n                         'AMT_ANNUITY', 'AMT_GOODS_PRICE',\"TARGET\"]]\namt = amt[(amt[\"AMT_GOODS_PRICE\"].notnull()) & (amt[\"AMT_ANNUITY\"].notnull())]\nsns.pairplot(amt,hue=\"TARGET\",palette=[\"b\",\"r\"])\nplt.show()","4a4f7eaf":"plt.figure(figsize=(18,12))\nplt.subplot(121)\nsns.countplot(y=data[\"NAME_TYPE_SUITE\"],\n              palette=\"Set2\",\n              order=data[\"NAME_TYPE_SUITE\"].value_counts().index[:5])\nplt.title(\"Distribution of Suite type\")\n\nplt.subplot(122)\nsns.countplot(y=data[\"NAME_TYPE_SUITE\"],\n              hue=data[\"CODE_GENDER\"],palette=\"Set2\",\n              order=data[\"NAME_TYPE_SUITE\"].value_counts().index[:5])\nplt.ylabel(\"\")\nplt.title(\"Distribution of Suite type by gender\")\nplt.subplots_adjust(wspace = .4)","706bfeea":"plt.figure(figsize=(18,12))\nplt.subplot(121)\nsns.countplot(y=data[\"NAME_INCOME_TYPE\"],\n              palette=\"Set2\",\n              order=data[\"NAME_INCOME_TYPE\"].value_counts().index[:4])\nplt.title(\"Distribution of client income type\")\n\nplt.subplot(122)\nsns.countplot(y=data[\"NAME_INCOME_TYPE\"],\n              hue=data[\"CODE_GENDER\"],\n              palette=\"Set2\",\n              order=data[\"NAME_INCOME_TYPE\"].value_counts().index[:4])\nplt.ylabel(\"\")\nplt.title(\"Distribution of client income  type by gender\")\nplt.subplots_adjust(wspace = .4)","c4297a85":"plt.figure(figsize=(25,25))\nplt.subplot(121)\napplication_data[application_data[\"TARGET\"]==0][\"NAME_EDUCATION_TYPE\"].value_counts().plot.pie(fontsize=12,autopct = \"%1.0f%%\",\n                                                                                                 colors = sns.color_palette(\"Set1\"),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\ncirc = plt.Circle((0,0),.7,color=\"white\")\nplt.gca().add_artist(circ)\nplt.title(\"Distribution of Education type for Repayers\",color=\"b\")\n\nplt.subplot(122)\napplication_data[application_data[\"TARGET\"]==1][\"NAME_EDUCATION_TYPE\"].value_counts().plot.pie(fontsize=12,autopct = \"%1.0f%%\",\n                                                                                                 colors = sns.color_palette(\"Set1\"),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\ncirc = plt.Circle((0,0),.7,color=\"white\")\nplt.gca().add_artist(circ)\nplt.title(\"Distribution of Education type for Defaulters\",color=\"b\")\nplt.ylabel(\"\")\nplt.show()","918c99db":"edu = data.groupby(['NAME_EDUCATION_TYPE','NAME_INCOME_TYPE'])['AMT_INCOME_TOTAL'].mean().reset_index().sort_values(by='AMT_INCOME_TOTAL',ascending=False)\nfig = plt.figure(figsize=(13,7))\nax = sns.barplot('NAME_INCOME_TYPE','AMT_INCOME_TOTAL',data=edu,hue='NAME_EDUCATION_TYPE',palette=\"seismic\")\nax.set_facecolor(\"k\")\nplt.title(\" Average Earnings by different professions and education types\")\nplt.show()","d1f0e9ad":"plt.figure(figsize=(16,8))\nplt.subplot(121)\napplication_data[application_data[\"TARGET\"]==0][\"NAME_FAMILY_STATUS\"].value_counts().plot.pie(autopct = \"%1.0f%%\",\n                                                             startangle=120,colors = sns.color_palette(\"Set2\",7),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True,explode=[0,.07,0,0,0,0])\n\nplt.title(\"Distribution of Family status for Repayers\",color=\"b\")\n\nplt.subplot(122)\napplication_data[application_data[\"TARGET\"]==1][\"NAME_FAMILY_STATUS\"].value_counts().plot.pie(autopct = \"%1.0f%%\",\n                                                    startangle=120,colors = sns.color_palette(\"Set2\",7),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True,explode=[0,.07,0,0,0])\n\n\nplt.title(\"Distribution of Family status for Defaulters\",color=\"b\")\nplt.ylabel(\"\")\nplt.show()","374162ca":"plt.figure(figsize=(20,20))\nplt.subplot(121)\napplication_data[application_data[\"TARGET\"]==0][\"NAME_HOUSING_TYPE\"].value_counts().plot.pie(autopct = \"%1.0f%%\",fontsize=10,\n                                                             colors = sns.color_palette(\"Spectral\"),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\n\nplt.title(\"Distribution of housing type  for Repayer\",color=\"b\")\n\nplt.subplot(122)\napplication_data[application_data[\"TARGET\"]==1][\"NAME_HOUSING_TYPE\"].value_counts().plot.pie(autopct = \"%1.0f%%\",fontsize=10,\n                                                    colors = sns.color_palette(\"Spectral\"),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\n\n\nplt.title(\"Distribution of housing type for Defaulters\",color=\"b\")\nplt.ylabel(\"\")\nplt.show()","eee3132b":"fig = plt.figure(figsize=(13,8))\n\nplt.subplot(121)\nsns.violinplot(y=application_data[application_data[\"TARGET\"]==0][\"REGION_POPULATION_RELATIVE\"]\n               ,x=application_data[application_data[\"TARGET\"]==0][\"NAME_CONTRACT_TYPE\"],\n               palette=\"Set1\")\nplt.title(\"Distribution of region population for Non Default loans\",color=\"b\")\nplt.subplot(122)\nsns.violinplot(y = application_data[application_data[\"TARGET\"]==1][\"REGION_POPULATION_RELATIVE\"]\n               ,x=application_data[application_data[\"TARGET\"]==1][\"NAME_CONTRACT_TYPE\"]\n               ,palette=\"Set1\")\nplt.title(\"Distribution of region population  for  Default loans\",color=\"b\")\n\nplt.subplots_adjust(wspace = .2)\nfig.set_facecolor(\"lightgrey\")","b27f8e51":"fig = plt.figure(figsize=(13,15))\n\nplt.subplot(221)\nsns.distplot(application_data[application_data[\"TARGET\"]==0][\"DAYS_BIRTH\"],color=\"b\")\nplt.title(\"Age Distribution of repayers\")\n\nplt.subplot(222)\nsns.distplot(application_data[application_data[\"TARGET\"]==1][\"DAYS_BIRTH\"],color=\"r\")\nplt.title(\"Age Distribution of defaulters\")\n\nplt.subplot(223)\nsns.lvplot(application_data[\"TARGET\"],application_data[\"DAYS_BIRTH\"],hue=application_data[\"CODE_GENDER\"],palette=[\"b\",\"grey\",\"m\"])\nplt.axhline(application_data[\"DAYS_BIRTH\"].mean(),linestyle=\"dashed\",color=\"k\",label =\"average age of client\")\nplt.legend(loc=\"lower right\")\nplt.title(\"Client age vs Loan repayment status(hue=gender)\")\n\nplt.subplot(224)\nsns.lvplot(application_data[\"TARGET\"],application_data[\"DAYS_BIRTH\"],hue=application_data[\"NAME_CONTRACT_TYPE\"],palette=[\"r\",\"g\"])\nplt.axhline(application_data[\"DAYS_BIRTH\"].mean(),linestyle=\"dashed\",color=\"k\",label =\"average age of client\")\nplt.legend(loc=\"lower right\")\nplt.title(\"Client age vs Loan repayment status(hue=contract type)\")\n\nplt.subplots_adjust(wspace = .2,hspace = .3)\n\nfig.set_facecolor(\"lightgrey\")","38ee9586":"fig = plt.figure(figsize=(13,5))\n\nplt.subplot(121)\nsns.distplot(application_data[application_data[\"TARGET\"]==0][\"DAYS_EMPLOYED\"],color=\"b\")\nplt.title(\"days employed distribution of repayers\")\n\nplt.subplot(122)\nsns.distplot(application_data[application_data[\"TARGET\"]==1][\"DAYS_EMPLOYED\"],color=\"r\")\nplt.title(\"days employed distribution of defaulters\")\n\nfig.set_facecolor(\"ghostwhite\")","2b8346e5":"fig = plt.figure(figsize=(13,5))\n\nplt.subplot(121)\nsns.distplot(application_data[application_data[\"TARGET\"]==0][\"DAYS_REGISTRATION\"],color=\"b\")\nplt.title(\"registration days distribution of repayers\")\n\nplt.subplot(122)\nsns.distplot(application_data[application_data[\"TARGET\"]==1][\"DAYS_REGISTRATION\"],color=\"r\")\nplt.title(\"registration days distribution of defaulter\")\n\nfig.set_facecolor(\"ghostwhite\")","73fe3bf6":"x   = application_data[['FLAG_MOBIL', 'FLAG_EMP_PHONE', 'FLAG_WORK_PHONE', 'FLAG_CONT_MOBILE',\n       'FLAG_PHONE', 'FLAG_EMAIL',\"TARGET\"]]\nx[\"TARGET\"] = x[\"TARGET\"].replace({0:\"repayers\",1:\"defaulters\"})\nx  = x.replace({1:\"YES\",0:\"NO\"})\n\ncols = ['FLAG_MOBIL', 'FLAG_EMP_PHONE', 'FLAG_WORK_PHONE', 'FLAG_CONT_MOBILE',\n       'FLAG_PHONE', 'FLAG_EMAIL']\nlength = len(cols)\n\nfig = plt.figure(figsize=(15,12))\nfig.set_facecolor(\"lightgrey\")\n\nfor i,j in itertools.zip_longest(cols,range(length)):\n    plt.subplot(2,3,j+1)\n    sns.countplot(x[i],hue=x[\"TARGET\"],palette=[\"r\",\"g\"])\n    plt.title(i,color=\"b\")","ae63822a":"fig = plt.figure(figsize=(13,13))\nplt.subplot(221)\napplication_data[application_data[\"TARGET\"]==0][\"REGION_RATING_CLIENT\"].value_counts().plot.pie(autopct = \"%1.0f%%\",fontsize=12,\n                                                             colors = sns.color_palette(\"Pastel1\"),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\n\nplt.title(\"Distribution of region rating  for Repayers\",color=\"b\")\n\nplt.subplot(222)\napplication_data[application_data[\"TARGET\"]==1][\"REGION_RATING_CLIENT\"].value_counts().plot.pie(autopct = \"%1.0f%%\",fontsize=12,\n                                                    colors = sns.color_palette(\"Pastel1\"),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\n\n\nplt.title(\"Distribution of region rating  for Defaulters\",color=\"b\")\nplt.ylabel(\"\")\n\nplt.subplot(223)\napplication_data[application_data[\"TARGET\"]==0][\"REGION_RATING_CLIENT_W_CITY\"].value_counts().plot.pie(autopct = \"%1.0f%%\",fontsize=12,\n                                                             colors = sns.color_palette(\"Paired\"),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\n\nplt.title(\"Distribution of city region rating   for Repayers\",color=\"b\")\n\nplt.subplot(224)\napplication_data[application_data[\"TARGET\"]==1][\"REGION_RATING_CLIENT_W_CITY\"].value_counts().plot.pie(autopct = \"%1.0f%%\",fontsize=12,\n                                                    colors = sns.color_palette(\"Paired\"),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\n\n\nplt.title(\"Distribution of city region rating  for Defaulters\",color=\"b\")\nplt.ylabel(\"\")\nfig.set_facecolor(\"ivory\")","2de14c66":"day = application_data.groupby(\"TARGET\").agg({\"WEEKDAY_APPR_PROCESS_START\":\"value_counts\"})\nday = day.rename(columns={\"WEEKDAY_APPR_PROCESS_START\":\"value_counts\"})\nday = day.reset_index()\nday_0 = day[:7]\nday_1 = day[7:]\nday_0[\"percentage\"] = day_0[\"value_counts\"]*100\/day_0[\"value_counts\"].sum()\nday_1[\"percentage\"] = day_1[\"value_counts\"]*100\/day_1[\"value_counts\"].sum()\ndays = pd.concat([day_0,day_1],axis=0)\ndays[\"TARGET\"] = days.replace({1:\"defaulters\",0:\"repayers\"})\n\nfig = plt.figure(figsize=(13,15))\nplt.subplot(211)\norder = ['SUNDAY', 'MONDAY','TUESDAY', 'WEDNESDAY','THURSDAY', 'FRIDAY', 'SATURDAY']\nax= sns.barplot(\"WEEKDAY_APPR_PROCESS_START\",\"percentage\",data=days,\n                hue=\"TARGET\",order=order,palette=\"prism\")\nax.set_facecolor(\"k\")\nax.set_title(\"Peak days for applying loans (defaulters vs repayers)\")\n\nhr = application_data.groupby(\"TARGET\").agg({\"HOUR_APPR_PROCESS_START\":\"value_counts\"})\nhr = hr.rename(columns={\"HOUR_APPR_PROCESS_START\":\"value_counts\"}).reset_index()\nhr_0 = hr[hr[\"TARGET\"]==0]\nhr_1 = hr[hr[\"TARGET\"]==1]\nhr_0[\"percentage\"] = hr_0[\"value_counts\"]*100\/hr_0[\"value_counts\"].sum()\nhr_1[\"percentage\"] = hr_1[\"value_counts\"]*100\/hr_1[\"value_counts\"].sum()\nhrs = pd.concat([hr_0,hr_1],axis=0)\nhrs[\"TARGET\"] = hrs[\"TARGET\"].replace({1:\"defaulters\",0:\"repayers\"})\nhrs = hrs.sort_values(by=\"HOUR_APPR_PROCESS_START\",ascending=True)\n\nplt.subplot(212)\nax1 = sns.pointplot(\"HOUR_APPR_PROCESS_START\",\"percentage\",\n                    data=hrs,hue=\"TARGET\",palette=\"prism\")\nax1.set_facecolor(\"k\")\nax1.set_title(\"Peak hours for applying loans (defaulters vs repayers)\")\nfig.set_facecolor(\"snow\")","cf8ebde3":"org = application_data.groupby(\"TARGET\").agg({\"ORGANIZATION_TYPE\":\"value_counts\"})\norg = org.rename(columns = {\"ORGANIZATION_TYPE\":\"value_counts\"}).reset_index()\norg_0 = org[org[\"TARGET\"] == 0]\norg_1 = org[org[\"TARGET\"] == 1]\norg_0[\"percentage\"] = org_0[\"value_counts\"]*100\/org_0[\"value_counts\"].sum()\norg_1[\"percentage\"] = org_1[\"value_counts\"]*100\/org_1[\"value_counts\"].sum()\n\norganization = pd.concat([org_0,org_1],axis=0)\norganization = organization.sort_values(by=\"ORGANIZATION_TYPE\",ascending=True)\n\norganization[\"TARGET\"] = organization[\"TARGET\"].replace({0:\"repayers\",1:\"defaulters\"})\n\norganization\nplt.figure(figsize=(13,7))\nax = sns.pointplot(\"ORGANIZATION_TYPE\",\"percentage\",\n                   data=organization,hue=\"TARGET\",palette=[\"b\",\"r\"])\nplt.xticks(rotation=90)\nplt.grid(True,alpha=.3)\nax.set_facecolor(\"k\")\nax.set_title(\"Distribution in organization types for repayers and defaulters\")\nplt.show()","d434fa15":"fig = plt.figure(figsize=(20,20))\nplt.subplot(421)\nsns.boxplot(data=application_data,x='TARGET',y='OBS_30_CNT_SOCIAL_CIRCLE',\n            hue=\"TARGET\", palette=\"Set3\")\nplt.title(\"Client's social surroundings with observable 30 DPD (days past due) def\",color=\"b\")\nplt.subplot(422)\nsns.boxplot(data=application_data,x='TARGET',y='DEF_30_CNT_SOCIAL_CIRCLE',\n            hue=\"TARGET\", palette=\"Set3\")\nplt.title(\"Client's social surroundings defaulted on 30 DPD (days past due)\",color=\"b\")\nplt.subplot(423)\nsns.boxplot(data=application_data,x='TARGET',y='OBS_60_CNT_SOCIAL_CIRCLE',\n            hue=\"TARGET\", palette=\"Set3\")\nplt.title(\"Client's social surroundings with observable 60 DPD (days past due) default\",color=\"b\")\nplt.subplot(424)\nsns.boxplot(data=application_data,x='TARGET',y='DEF_60_CNT_SOCIAL_CIRCLE',\n            hue=\"TARGET\", palette=\"Set3\")\nplt.title(\"Client's social surroundings defaulted on 60 DPD (days past due)\",color=\"b\")\nfig.set_facecolor(\"ghostwhite\")","ceb4cea6":"plt.figure(figsize=(13,7))\nplt.subplot(121)\nax = sns.violinplot(application_data[\"TARGET\"],\n                    application_data[\"DAYS_LAST_PHONE_CHANGE\"],palette=[\"g\",\"r\"])\nax.set_facecolor(\"oldlace\")\nax.set_title(\"days before application client changed phone -violin plot\")\nplt.subplot(122)\nax1 = sns.lvplot(application_data[\"TARGET\"],\n                 application_data[\"DAYS_LAST_PHONE_CHANGE\"],palette=[\"g\",\"r\"])\nax1.set_facecolor(\"oldlace\")\nax1.set_ylabel(\"\")\nax1.set_title(\"days before application client changed phone -box plot\")\nplt.subplots_adjust(wspace = .2)","5ec45cd9":"cols = [ 'FLAG_DOCUMENT_2', 'FLAG_DOCUMENT_3',\n       'FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_5', 'FLAG_DOCUMENT_6',\n       'FLAG_DOCUMENT_7', 'FLAG_DOCUMENT_8', 'FLAG_DOCUMENT_9',\n       'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_11', 'FLAG_DOCUMENT_12',\n       'FLAG_DOCUMENT_13', 'FLAG_DOCUMENT_14', 'FLAG_DOCUMENT_15',\n       'FLAG_DOCUMENT_16', 'FLAG_DOCUMENT_17', 'FLAG_DOCUMENT_18',\n       'FLAG_DOCUMENT_19', 'FLAG_DOCUMENT_20', 'FLAG_DOCUMENT_21']\n\ndf_flag = application_data[cols+[\"TARGET\"]]\n\nlength = len(cols)\n\ndf_flag[\"TARGET\"] = df_flag[\"TARGET\"].replace({1:\"defaulter\",0:\"repayer\"})\n\nfig = plt.figure(figsize=(13,24))\nfig.set_facecolor(\"lightgrey\")\nfor i,j in itertools.zip_longest(cols,range(length)):\n    plt.subplot(5,4,j+1)\n    ax = sns.countplot(df_flag[i],hue=df_flag[\"TARGET\"],palette=[\"r\",\"b\"])\n    plt.yticks(fontsize=5)\n    plt.xlabel(\"\")\n    plt.title(i)\n    ax.set_facecolor(\"k\")","9b809d99":"cols = ['AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_DAY',\n       'AMT_REQ_CREDIT_BUREAU_WEEK', 'AMT_REQ_CREDIT_BUREAU_MON',\n       'AMT_REQ_CREDIT_BUREAU_QRT', 'AMT_REQ_CREDIT_BUREAU_YEAR']\napplication_data.groupby(\"TARGET\")[cols].max().transpose().plot(kind=\"barh\",\n                                                                 figsize=(10,5),width=.8)\nplt.title(\"Maximum enquries made by defaulters and repayers\")\napplication_data.groupby(\"TARGET\")[cols].mean().transpose().plot(kind=\"barh\",\n                                                                  figsize=(10,5),width=.8)\nplt.title(\"average enquries made by defaulters and repayers\")\napplication_data.groupby(\"TARGET\")[cols].std().transpose().plot(kind=\"barh\",\n                                                                 figsize=(10,5),width=.8)\nplt.title(\"standard deviation in enquries made by defaulters and repayers\")\nplt.show()","e88b9911":"x = previous_application.groupby(\"SK_ID_CURR\")[\"SK_ID_PREV\"].count().reset_index()\nplt.figure(figsize=(13,7))\nax = sns.distplot(x[\"SK_ID_PREV\"],color=\"orange\")\nplt.axvline(x[\"SK_ID_PREV\"].mean(),linestyle=\"dashed\",color=\"r\",label=\"average\")\nplt.axvline(x[\"SK_ID_PREV\"].std(),linestyle=\"dashed\",color=\"b\",label=\"standard deviation\")\nplt.axvline(x[\"SK_ID_PREV\"].max(),linestyle=\"dashed\",color=\"g\",label=\"maximum\")\nplt.legend(loc=\"best\")\nplt.title(\"Current loan id having previous loan applications\")\nax.set_facecolor(\"k\")","d7ad3893":"cnts = previous_application[\"NAME_CONTRACT_TYPE\"].value_counts()\nimport squarify\nplt.figure(figsize=(8,6))\nsquarify.plot(cnts.values,label=cnts.keys(),value=cnts.values,linewidth=2,edgecolor=\"k\",alpha=.8,color=sns.color_palette(\"Set1\"))\nplt.axis(\"off\")\nplt.title(\"Contaract types in previous applications\")\nplt.show()","19485247":"plt.figure(figsize=(20,20))\nplt.subplot(211)\nax = sns.kdeplot(previous_application[\"AMT_APPLICATION\"],color=\"b\",linewidth=3)\nax = sns.kdeplot(previous_application[previous_application[\"AMT_CREDIT\"].notnull()][\"AMT_CREDIT\"],color=\"r\",linewidth=3)\nplt.axvline(previous_application[previous_application[\"AMT_CREDIT\"].notnull()][\"AMT_CREDIT\"].mean(),color=\"r\",linestyle=\"dashed\",label=\"AMT_APPLICATION_MEAN\")\nplt.axvline(previous_application[\"AMT_APPLICATION\"].mean(),color=\"b\",linestyle=\"dashed\",label=\"AMT_APPLICATION_MEAN\")\nplt.legend(loc=\"best\")\nplt.title(\"Previous loan amounts applied and loan amounts credited.\")\nax.set_facecolor(\"k\")\n\nplt.subplot(212)\ndiff = (previous_application[\"AMT_CREDIT\"] - previous_application[\"AMT_APPLICATION\"]).reset_index()\ndiff = diff[diff[0].notnull()]\nax1 = sns.kdeplot(diff[0],color=\"g\",linewidth=3,label = \"difference in amount requested by client and amount credited\")\nplt.axvline(diff[0].mean(),color=\"white\",linestyle=\"dashed\",label = \"mean\")\nplt.title(\"difference in amount requested by client and amount credited\")\nax1.legend(loc=\"best\")\nax1.set_facecolor(\"k\")","2c96d575":"mn = previous_application.groupby(\"NAME_CONTRACT_TYPE\")[[\"AMT_APPLICATION\",\"AMT_CREDIT\"]].mean().stack().reset_index()\ntt = previous_application.groupby(\"NAME_CONTRACT_TYPE\")[[\"AMT_APPLICATION\",\"AMT_CREDIT\"]].sum().stack().reset_index()\nfig = plt.figure(figsize=(10,13))\nfig.set_facecolor(\"ghostwhite\")\nplt.subplot(211)\nax = sns.barplot(0,\"NAME_CONTRACT_TYPE\",data=mn[:6],hue=\"level_1\",palette=\"inferno\")\nax.set_facecolor(\"k\")\nax.set_xlabel(\"average amounts\")\nax.set_title(\"Average amounts by contract types\")\n\nplt.subplot(212)\nax1 = sns.barplot(0,\"NAME_CONTRACT_TYPE\",data=tt[:6],hue=\"level_1\",palette=\"magma\")\nax1.set_facecolor(\"k\")\nax1.set_xlabel(\"total amounts\")\nax1.set_title(\"total amounts by contract types\")\nplt.subplots_adjust(hspace = .2)\nplt.show()","45e41ec0":"plt.figure(figsize=(14,5))\nplt.subplot(121)\nprevious_application.groupby(\"NAME_CONTRACT_TYPE\")[\"AMT_ANNUITY\"].sum().plot(kind=\"bar\")\nplt.xticks(rotation=0)\nplt.title(\"Total annuity amount by contract types in previous applications\")\nplt.subplot(122)\nprevious_application.groupby(\"NAME_CONTRACT_TYPE\")[\"AMT_ANNUITY\"].mean().plot(kind=\"bar\")\nplt.title(\"average annuity amount by contract types in previous applications\")\nplt.xticks(rotation=0)\nplt.show()","0788eea8":"ax = pd.crosstab(previous_application[\"NAME_CONTRACT_TYPE\"],previous_application[\"NAME_CONTRACT_STATUS\"]).plot(kind=\"barh\",figsize=(10,7),stacked=True)\nplt.xticks(rotation =0)\nplt.ylabel(\"count\")\nplt.title(\"Count of application status by application type\")\nax.set_facecolor(\"k\")","db3834c7":"hr = pd.crosstab(previous_application[\"WEEKDAY_APPR_PROCESS_START\"],previous_application[\"NAME_CONTRACT_STATUS\"]).stack().reset_index()\nplt.figure(figsize=(12,8))\nax = sns.pointplot(hr[\"WEEKDAY_APPR_PROCESS_START\"],hr[0],hue=hr[\"NAME_CONTRACT_STATUS\"],palette=[\"g\",\"r\",\"b\",\"orange\"],scale=1)\nax.set_facecolor(\"k\")\nax.set_ylabel(\"count\")\nax.set_title(\"Contract status by weekdays\")\nplt.grid(True,alpha=.2)\n\n","e60e4d5c":"hr = pd.crosstab(previous_application[\"HOUR_APPR_PROCESS_START\"],previous_application[\"NAME_CONTRACT_STATUS\"]).stack().reset_index()\nplt.figure(figsize=(12,8))\nax = sns.pointplot(hr[\"HOUR_APPR_PROCESS_START\"],hr[0],hue=hr[\"NAME_CONTRACT_STATUS\"],palette=[\"g\",\"r\",\"b\",\"orange\"],scale=1)\nax.set_facecolor(\"k\")\nax.set_ylabel(\"count\")\nax.set_title(\"Contract status by day hours.\")\nplt.grid(True,alpha=.2)","feb4042a":"hr = pd.crosstab(previous_application[\"HOUR_APPR_PROCESS_START\"],previous_application[\"WEEKDAY_APPR_PROCESS_START\"]).stack().reset_index()\nplt.figure(figsize=(12,8))\nax = sns.pointplot(hr[\"HOUR_APPR_PROCESS_START\"],hr[0],hue=hr[\"WEEKDAY_APPR_PROCESS_START\"],palette=[\"g\",\"r\",\"b\",\"orange\"],scale=1)\nax.set_facecolor(\"k\")\nax.set_ylabel(\"count\")\nax.set_title(\"Peak hours for week days\")\nplt.grid(True,alpha=.2)","19421acb":"previous_application[[\"NAME_CASH_LOAN_PURPOSE\",\"NAME_CONTRACT_STATUS\"]]\npurpose = pd.crosstab(previous_application[\"NAME_CASH_LOAN_PURPOSE\"],previous_application[\"NAME_CONTRACT_STATUS\"])\npurpose[\"a\"] = (purpose[\"Approved\"]*100)\/(purpose[\"Approved\"]+purpose[\"Canceled\"]+purpose[\"Refused\"]+purpose[\"Unused offer\"])\npurpose[\"c\"] = (purpose[\"Canceled\"]*100)\/(purpose[\"Approved\"]+purpose[\"Canceled\"]+purpose[\"Refused\"]+purpose[\"Unused offer\"])\npurpose[\"r\"] = (purpose[\"Refused\"]*100)\/(purpose[\"Approved\"]+purpose[\"Canceled\"]+purpose[\"Refused\"]+purpose[\"Unused offer\"])\npurpose[\"u\"] = (purpose[\"Unused offer\"]*100)\/(purpose[\"Approved\"]+purpose[\"Canceled\"]+purpose[\"Refused\"]+purpose[\"Unused offer\"])\npurpose_new = purpose[[\"a\",\"c\",\"r\",\"u\"]]\npurpose_new = purpose_new.stack().reset_index()\npurpose_new[\"NAME_CONTRACT_STATUS\"] = purpose_new[\"NAME_CONTRACT_STATUS\"].replace({\"a\":\"accepted_percentage\",\"c\":\"cancelled_percentage\",\n                                                               \"r\":\"refused_percentage\",\"u\":\"unused_percentage\"})\n\nlst = purpose_new[\"NAME_CONTRACT_STATUS\"].unique().tolist()\nlength = len(lst)\ncs = [\"lime\",\"orange\",\"r\",\"b\"]\n\nfig = plt.figure(figsize=(14,18))\nfig.set_facecolor(\"lightgrey\")\nfor i,j,k in itertools.zip_longest(lst,range(length),cs):\n    plt.subplot(2,2,j+1)\n    dat = purpose_new[purpose_new[\"NAME_CONTRACT_STATUS\"] == i]\n    ax = sns.barplot(0,\"NAME_CASH_LOAN_PURPOSE\",data=dat.sort_values(by=0,ascending=False),color=k)\n    plt.ylabel(\"\")\n    plt.xlabel(\"percentage\")\n    plt.title(i+\" by purpose\")\n    plt.subplots_adjust(wspace = .7)\n    ax.set_facecolor(\"k\")\n","85b9aa11":"plt.figure(figsize=(13,6))\nsns.violinplot(y= previous_application[\"DAYS_DECISION\"],\n               x = previous_application[\"NAME_CONTRACT_STATUS\"],palette=[\"r\",\"g\",\"b\",\"y\"])\nplt.axhline(previous_application[previous_application[\"NAME_CONTRACT_STATUS\"] == \"Approved\"][\"DAYS_DECISION\"].mean(),\n            color=\"r\",linestyle=\"dashed\",label=\"accepted_average\")\nplt.axhline(previous_application[previous_application[\"NAME_CONTRACT_STATUS\"] == \"Refused\"][\"DAYS_DECISION\"].mean(),\n            color=\"g\",linestyle=\"dashed\",label=\"refused_average\")\nplt.axhline(previous_application[previous_application[\"NAME_CONTRACT_STATUS\"] == \"Cancelled\"][\"DAYS_DECISION\"].mean(),color=\"b\",\n            linestyle=\"dashed\",label=\"cancelled_average\")\nplt.axhline(previous_application[previous_application[\"NAME_CONTRACT_STATUS\"] == \"Unused offer\"][\"DAYS_DECISION\"].mean(),color=\"y\",\n            linestyle=\"dashed\",label=\"un used_average\")\nplt.legend(loc=\"best\")\n\nplt.title(\"Contract status relative to decision made about previous application.\")\nplt.show()","3f6420e9":"plt.figure(figsize=(8,12))\nplt.subplot(211)\nrej = previous_application[\"CODE_REJECT_REASON\"].value_counts().reset_index()\nax = sns.barplot(\"CODE_REJECT_REASON\",\"index\",data=rej[:6],palette=\"husl\")\nfor i,j in enumerate(np.around((rej[\"CODE_REJECT_REASON\"][:6].values*100\/(rej[\"CODE_REJECT_REASON\"][:6].sum())))):\n    ax.text(.7,i,j,weight=\"bold\")\nplt.xlabel(\"Top as percentage & Bottom as Count\")\nplt.ylabel(\"CODE_REJECT_REASON\")\nplt.title(\"Reasons for application rejections\")\n\nplt.subplot(212)\npay = previous_application[\"NAME_PAYMENT_TYPE\"].value_counts().reset_index()\nax1 = sns.barplot(\"NAME_PAYMENT_TYPE\",\"index\",data=pay,palette=\"husl\")\nfor i,j in enumerate(np.around((pay[\"NAME_PAYMENT_TYPE\"].values*100\/(pay[\"NAME_PAYMENT_TYPE\"].sum())))):\n    ax1.text(.7,i,j,weight=\"bold\")\nplt.xlabel(\"pTop as percentage & Bottom as Count\")\nplt.ylabel(\"NAME_PAYMENT_TYPE\")\nplt.title(\"Clients payment methods\")\nplt.subplots_adjust(hspace = .3)","98b780fd":"plt.figure(figsize=(20,20))\nplt.subplot(121)\nprevious_application[\"NAME_TYPE_SUITE\"].value_counts().plot.pie(autopct = \"%1.1f%%\",fontsize=12,\n                                                             colors = sns.color_palette(\"inferno\"),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\ncirc = plt.Circle((0,0),.7,color=\"white\")\nplt.gca().add_artist(circ)\nplt.title(\"NAME_TYPE_SUITE\")\n\nplt.subplot(122)\nprevious_application[\"NAME_CLIENT_TYPE\"].value_counts().plot.pie(autopct = \"%1.1f%%\",fontsize=12,\n                                                             colors = sns.color_palette(\"inferno\"),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\ncirc = plt.Circle((0,0),.7,color=\"white\")\nplt.gca().add_artist(circ)\nplt.title(\"NAME_CLIENT_TYPE\")\nplt.show()","bb4419b7":"goods = previous_application[\"NAME_GOODS_CATEGORY\"].value_counts().reset_index()\ngoods[\"percentage\"] = round(goods[\"NAME_GOODS_CATEGORY\"]*100\/goods[\"NAME_GOODS_CATEGORY\"].sum(),2)\nfig = plt.figure(figsize=(12,5))\nax = sns.pointplot(\"index\",\"percentage\",data=goods,color=\"yellow\")\nplt.xticks(rotation = 80)\nplt.xlabel(\"NAME_GOODS_CATEGORY\")\nplt.ylabel(\"percentage\")\nplt.title(\"popular goods for applying loans\")\nax.set_facecolor(\"k\")\nfig.set_facecolor('lightgrey')","fda63b52":"plt.figure(figsize=(20,20))\nplt.subplot(121)\nprevious_application[\"NAME_PORTFOLIO\"].value_counts().plot.pie(autopct = \"%1.1f%%\",fontsize=12,\n                                                             colors = sns.color_palette(\"prism\",5),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},\n                                                               shadow =True)\nplt.title(\"previous applications portfolio\")\nplt.subplot(122)\nprevious_application[\"NAME_PRODUCT_TYPE\"].value_counts().plot.pie(autopct = \"%1.1f%%\",fontsize=12,\n                                                             colors = sns.color_palette(\"prism\",3),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},\n                                                                  shadow =True)\nplt.title(\"previous applications product types\")\nplt.show()","0585bd92":"app = pd.crosstab(previous_application[\"CHANNEL_TYPE\"],previous_application[\"NAME_CONTRACT_STATUS\"])\napp1 = app\napp1[\"approval_rate\"] = app1[\"Approved\"]*100\/(app1[\"Approved\"]+app1[\"Refused\"]+app1[\"Canceled\"])\napp1[\"refused_rate\"]  = app1[\"Refused\"]*100\/(app1[\"Approved\"]+app1[\"Refused\"]+app1[\"Canceled\"])\napp1[\"cacelled_rate\"] = app1[\"Canceled\"]*100\/(app1[\"Approved\"]+app1[\"Refused\"]+app1[\"Canceled\"])\napp2 = app[[\"approval_rate\",\"refused_rate\",\"cacelled_rate\"]]\nax = app2.plot(kind=\"barh\",stacked=True,figsize=(10,7))\nax.set_facecolor(\"k\")\nax.set_xlabel(\"percentage\")\nax.set_title(\"approval,cancel and refusal rates by channel types\")\nplt.show()","b538f438":"fig = plt.figure(figsize=(13,5))\nplt.subplot(121)\nare = previous_application.groupby(\"SELLERPLACE_AREA\")[\"AMT_CREDIT\"].sum().reset_index()\nare = are.sort_values(by =\"AMT_CREDIT\",ascending = False)\nax = sns.barplot(y= \"AMT_CREDIT\",x =\"SELLERPLACE_AREA\",data=are[:15],color=\"r\")\nax.set_facecolor(\"k\")\nax.set_title(\"Highest amount credited seller place areas\")\n\nplt.subplot(122)\nsell = previous_application.groupby(\"NAME_SELLER_INDUSTRY\")[\"AMT_CREDIT\"].sum().reset_index().sort_values(by = \"AMT_CREDIT\",ascending = False)\nax1=sns.barplot(y = \"AMT_CREDIT\",x = \"NAME_SELLER_INDUSTRY\",data=sell,color=\"b\")\nax1.set_facecolor(\"k\")\nax1.set_title(\"Highest amount credited seller industrys\")\nplt.xticks(rotation=90)\nplt.subplots_adjust(wspace = .5)\nfig.set_facecolor(\"lightgrey\")","46b870f2":"plt.figure(figsize=(13,5))\nax = sns.countplot(previous_application[\"CNT_PAYMENT\"],palette=\"Set1\",order=previous_application[\"CNT_PAYMENT\"].value_counts().index)\nax.set_facecolor(\"k\")\nplt.xticks(rotation = 90)\nplt.title(\"popular terms of previous credit at application\")\nplt.show()","9d45e1f6":"plt.figure(figsize=(10,8))\nsns.countplot(y = previous_application[\"PRODUCT_COMBINATION\"],order=previous_application[\"PRODUCT_COMBINATION\"].value_counts().index)\nplt.title(\"Detailed product combination of the previous application -count\")\nplt.show()","f790209b":"plt.figure(figsize=(12,6))\nplt.subplot(121)\nprevious_application[\"NFLAG_INSURED_ON_APPROVAL\"].value_counts().plot.pie(autopct = \"%1.1f%%\",fontsize=8,\n                                                             colors = sns.color_palette(\"prism\",4),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\ncirc = plt.Circle((0,0),.7,color=\"white\")\nplt.gca().add_artist(circ)\nplt.title(\"client requesting insurance\")\n\nplt.subplot(122)\nprevious_application[\"NAME_YIELD_GROUP\"].value_counts().plot.pie(autopct = \"%1.1f%%\",fontsize=8,\n                                                             colors = sns.color_palette(\"prism\",4),\n                                              wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"},shadow =True)\ncirc = plt.Circle((0,0),.7,color=\"white\")\nplt.gca().add_artist(circ)\nplt.title(\"interest rates\")\nplt.show()","9a5f43bd":"cols = ['DAYS_FIRST_DRAWING', 'DAYS_FIRST_DUE', 'DAYS_LAST_DUE_1ST_VERSION','DAYS_LAST_DUE', 'DAYS_TERMINATION']\nplt.figure(figsize=(12,6))\nsns.heatmap(previous_application[cols].describe()[1:].transpose(),\n            annot=True,linewidth=2,linecolor=\"k\",cmap=sns.color_palette(\"inferno\"))\nplt.show()","5d373db4":"corrmat = application_data.corr() \n  \nf, ax = plt.subplots(figsize =(8, 8)) \nsns.heatmap(corrmat, ax = ax, cmap =\"rainbow\") \nplt.show()","6d9014b8":"corrmat = previous_application.corr() \n  \nf, ax = plt.subplots(figsize =(8, 8)) \nsns.heatmap(corrmat, ax = ax, cmap =\"rainbow\") \nplt.show()","bc3936ae":"corrmat = previous_application.corr() \ncorrdf = corrmat.where(np.triu(np.ones(corrmat.shape), k=1).astype(np.bool))\ncorrdf = corrdf.unstack().reset_index()\ncorrdf.columns = ['Var1', 'Var2', 'Correlation']\ncorrdf.dropna(subset = ['Correlation'], inplace = True)\ncorrdf['Correlation'] = round(corrdf['Correlation'], 2)\ncorrdf['Correlation'] = abs(corrdf['Correlation'])\ncorrdf.sort_values(by = 'Correlation', ascending = False).head(10)","1c28f4dc":"df_repayer = application_data[application_data['TARGET'] == 0]\ndf_defaulter = application_data[application_data['TARGET'] == 1]","1130163e":"corrmat = df_repayer.corr() \ncorrdf = corrmat.where(np.triu(np.ones(corrmat.shape), k=1).astype(np.bool))\ncorrdf = corrdf.unstack().reset_index()\ncorrdf.columns = ['Var1', 'Var2', 'Correlation']\ncorrdf.dropna(subset = ['Correlation'], inplace = True)\ncorrdf['Correlation'] = round(corrdf['Correlation'], 2)\ncorrdf['Correlation'] = abs(corrdf['Correlation'])\ncorrdf.sort_values(by = 'Correlation', ascending = False).head(10)","98a5f1fb":"corrmat = df_defaulter.corr() \ncorrdf = corrmat.where(np.triu(np.ones(corrmat.shape), k=1).astype(np.bool))\ncorrdf = corrdf.unstack().reset_index()\ncorrdf.columns = ['Var1', 'Var2', 'Correlation']\ncorrdf.dropna(subset = ['Correlation'], inplace = True)\ncorrdf['Correlation'] = round(corrdf['Correlation'], 2)\ncorrdf['Correlation'] = abs(corrdf['Correlation'])\ncorrdf.sort_values(by = 'Correlation', ascending = False).head(10)","5071b63a":"mergeddf =  pd.merge(application_data,previous_application,on='SK_ID_CURR')\nmergeddf.head()","fa9928c6":"y = mergeddf.groupby('SK_ID_CURR').size()\ndfA = mergeddf.groupby('SK_ID_CURR').agg({'TARGET': np.sum})\ndfA['count'] = y\ndisplay(dfA.head(10))","6de1d337":"dfA.sort_values(by = 'count',ascending=False).head(10)","aa74bc5a":"df_repayer = dfA[dfA['TARGET'] == 0]\ndf_defaulter = dfA[dfA['TARGET'] == 1]","f5794d28":"df_repayer.sort_values(by = 'count',ascending=False).head(10)","c95b7bdc":"df_defaulter.sort_values(by = 'count',ascending=False).head(10)","d3a78b94":"mergeddf.isnull().sum()","27b1e115":"round(100*(mergeddf.isnull().sum()\/len(mergeddf.index)), 2)","00884c65":"mergeddf.head()","a19d972b":"#dropping SK_ID_CURR since it all unique values\n\nmergeddf.drop(['SK_ID_CURR'], 1, inplace = True)\n","d6566e09":"mergeddf.head()","d92cae2b":"round(100*(mergeddf.isnull().sum()\/len(mergeddf.index)), 2)","5f7ac072":"enq_cs =['AMT_REQ_CREDIT_BUREAU_DAY', 'AMT_REQ_CREDIT_BUREAU_HOUR',\n       'AMT_REQ_CREDIT_BUREAU_MON', 'AMT_REQ_CREDIT_BUREAU_QRT',\n       'AMT_REQ_CREDIT_BUREAU_WEEK', 'AMT_REQ_CREDIT_BUREAU_YEAR']\nfor i in enq_cs:\n    mergeddf[i] = mergeddf[i].fillna(0)","9312f48f":"amt_cs = [\"AMT_ANNUITY_y\",\"AMT_GOODS_PRICE_y\"]\nfor i in amt_cs:\n    mergeddf[i] = mergeddf[i].fillna(mergeddf[i].mean())\n    ","78fae825":"cols = [\"DAYS_FIRST_DRAWING\",\"DAYS_FIRST_DUE\",\"DAYS_LAST_DUE_1ST_VERSION\",\n        \"DAYS_LAST_DUE\",\"DAYS_TERMINATION\",'CNT_PAYMENT']\nfor i in cols :\n    mergeddf[i]  = mergeddf[i].fillna(mergeddf[i].median())","e02dff21":"cols = [\"NAME_TYPE_SUITE_y\",\"NFLAG_INSURED_ON_APPROVAL\"]\nfor i in cols :\n    mergeddf[i]  = mergeddf[i].fillna(mergeddf[i].mode()[0])","61f46012":"# Rest missing values are under 1.5% so we can drop these rows.\nmergeddf.dropna(inplace = True)","15b5cebd":"round(100*(mergeddf.isnull().sum()\/len(mergeddf.index)), 2)","466a613d":"mergeddf.isnull().sum()","ca7011fc":"mergeddf.head()","dcc11fe9":"# List of variables to map\n\nvarlist =  ['FLAG_OWN_CAR','FLAG_OWN_REALTY','FLAG_LAST_APPL_PER_CONTRACT']\n\n# Defining the map function\ndef binary_map(x):\n    return x.map({'Y': 1, \"N\": 0})\n\n# Applying the function to the housing list\nmergeddf[varlist] = mergeddf[varlist].apply(binary_map)\nmergeddf.head()","c9f07518":"#dropping SK_ID_PREV since non required technical field \n\nmergeddf.drop(['SK_ID_PREV'], 1, inplace = True)\nmergeddf.head()","42752685":"mergeddf[['FLAG_OWN_CAR','FLAG_OWN_REALTY','FLAG_MOBIL',\n 'FLAG_EMP_PHONE','FLAG_WORK_PHONE','FLAG_CONT_MOBILE',\n 'FLAG_PHONE','FLAG_EMAIL','REGION_RATING_CLIENT',\n 'REGION_RATING_CLIENT_W_CITY','REG_REGION_NOT_LIVE_REGION',\n 'REG_REGION_NOT_WORK_REGION','LIVE_REGION_NOT_WORK_REGION',\n 'REG_CITY_NOT_LIVE_CITY','REG_CITY_NOT_WORK_CITY','FLAG_DOCUMENT_2',\n 'FLAG_DOCUMENT_3','FLAG_DOCUMENT_4','FLAG_DOCUMENT_5','FLAG_DOCUMENT_6',\n 'FLAG_DOCUMENT_7','FLAG_DOCUMENT_8','FLAG_DOCUMENT_9',\n 'FLAG_DOCUMENT_10','FLAG_DOCUMENT_11','FLAG_DOCUMENT_12','FLAG_DOCUMENT_13',\n 'FLAG_DOCUMENT_14','FLAG_DOCUMENT_15','FLAG_DOCUMENT_16','FLAG_DOCUMENT_17',\n 'FLAG_DOCUMENT_18','FLAG_DOCUMENT_19','FLAG_DOCUMENT_20','FLAG_DOCUMENT_21',\n 'NFLAG_INSURED_ON_APPROVAL']]= mergeddf[['FLAG_OWN_CAR','FLAG_OWN_REALTY','FLAG_MOBIL',\n                                        'FLAG_EMP_PHONE','FLAG_WORK_PHONE','FLAG_CONT_MOBILE',\n                                        'FLAG_PHONE','FLAG_EMAIL','REGION_RATING_CLIENT',\n                                        'REGION_RATING_CLIENT_W_CITY','REG_REGION_NOT_LIVE_REGION',\n                                        'REG_REGION_NOT_WORK_REGION','LIVE_REGION_NOT_WORK_REGION',\n                                        'REG_CITY_NOT_LIVE_CITY','REG_CITY_NOT_WORK_CITY','FLAG_DOCUMENT_2',\n                                        'FLAG_DOCUMENT_3','FLAG_DOCUMENT_4','FLAG_DOCUMENT_5','FLAG_DOCUMENT_6',\n                                        'FLAG_DOCUMENT_7','FLAG_DOCUMENT_8','FLAG_DOCUMENT_9',\n                                        'FLAG_DOCUMENT_10','FLAG_DOCUMENT_11','FLAG_DOCUMENT_12','FLAG_DOCUMENT_13',\n                                        'FLAG_DOCUMENT_14','FLAG_DOCUMENT_15','FLAG_DOCUMENT_16','FLAG_DOCUMENT_17',\n                                        'FLAG_DOCUMENT_18','FLAG_DOCUMENT_19','FLAG_DOCUMENT_20','FLAG_DOCUMENT_21',\n                                        'NFLAG_INSURED_ON_APPROVAL']].astype('category')","0b47f2b2":"obj_dtypes = [i for i in mergeddf.select_dtypes(include=np.object).columns if i not in [\"type\"] ]\nnum_dtypes = [i for i in mergeddf.select_dtypes(include = np.number).columns if i not in [ 'TARGET']]","6bf14163":"num_dtypes","14b5a0ed":"obj_dtypes","44e73ed4":"# Creating a dummy variable for some of the categorical variables and dropping the first one.\ndummy1 = pd.get_dummies(mergeddf[['FLAG_OWN_CAR','FLAG_OWN_REALTY','FLAG_MOBIL',\n                                  'FLAG_EMP_PHONE','FLAG_WORK_PHONE','FLAG_CONT_MOBILE',\n                                  'FLAG_PHONE','FLAG_EMAIL','REGION_RATING_CLIENT',\n                                  'REGION_RATING_CLIENT_W_CITY','REG_REGION_NOT_LIVE_REGION',\n                                  'REG_REGION_NOT_WORK_REGION','LIVE_REGION_NOT_WORK_REGION',\n                                  'REG_CITY_NOT_LIVE_CITY','REG_CITY_NOT_WORK_CITY','FLAG_DOCUMENT_2',\n                                  'FLAG_DOCUMENT_3','FLAG_DOCUMENT_4','FLAG_DOCUMENT_5','FLAG_DOCUMENT_6',\n                                  'FLAG_DOCUMENT_7','FLAG_DOCUMENT_8','FLAG_DOCUMENT_9',\n                                  'FLAG_DOCUMENT_10','FLAG_DOCUMENT_11','FLAG_DOCUMENT_12','FLAG_DOCUMENT_13',\n                                  'FLAG_DOCUMENT_14','FLAG_DOCUMENT_15','FLAG_DOCUMENT_16','FLAG_DOCUMENT_17',\n                                  'FLAG_DOCUMENT_18','FLAG_DOCUMENT_19','FLAG_DOCUMENT_20','FLAG_DOCUMENT_21',\n                                  'NFLAG_INSURED_ON_APPROVAL','NAME_CONTRACT_TYPE_x','CODE_GENDER',\n                                  'NAME_TYPE_SUITE_x','NAME_INCOME_TYPE','NAME_EDUCATION_TYPE','NAME_FAMILY_STATUS',\n                                  'NAME_HOUSING_TYPE','WEEKDAY_APPR_PROCESS_START_x','ORGANIZATION_TYPE','NAME_CONTRACT_TYPE_y',\n                                  'WEEKDAY_APPR_PROCESS_START_y','NAME_CASH_LOAN_PURPOSE','NAME_CONTRACT_STATUS','NAME_PAYMENT_TYPE',\n                                  'CODE_REJECT_REASON','NAME_TYPE_SUITE_y','NAME_CLIENT_TYPE','NAME_GOODS_CATEGORY',\n                                  'NAME_PORTFOLIO','NAME_PRODUCT_TYPE','CHANNEL_TYPE','NAME_SELLER_INDUSTRY',\n                                  'NAME_YIELD_GROUP','PRODUCT_COMBINATION']], drop_first=True)\ndummy1.head()","cb93fa04":"# Adding the results to the master dataframe\nmergeddf = pd.concat([mergeddf, dummy1], axis=1)\nmergeddf.head()","522f259f":"mergeddf = mergeddf.drop(['FLAG_OWN_CAR','FLAG_OWN_REALTY','FLAG_MOBIL',\n                          'FLAG_EMP_PHONE','FLAG_WORK_PHONE','FLAG_CONT_MOBILE',\n                          'FLAG_PHONE','FLAG_EMAIL','REGION_RATING_CLIENT',\n                          'REGION_RATING_CLIENT_W_CITY','REG_REGION_NOT_LIVE_REGION',\n                          'REG_REGION_NOT_WORK_REGION','LIVE_REGION_NOT_WORK_REGION',\n                          'REG_CITY_NOT_LIVE_CITY','REG_CITY_NOT_WORK_CITY','FLAG_DOCUMENT_2',\n                          'FLAG_DOCUMENT_3','FLAG_DOCUMENT_4','FLAG_DOCUMENT_5','FLAG_DOCUMENT_6',\n                          'FLAG_DOCUMENT_7','FLAG_DOCUMENT_8','FLAG_DOCUMENT_9',\n                          'FLAG_DOCUMENT_10','FLAG_DOCUMENT_11','FLAG_DOCUMENT_12','FLAG_DOCUMENT_13',\n                          'FLAG_DOCUMENT_14','FLAG_DOCUMENT_15','FLAG_DOCUMENT_16','FLAG_DOCUMENT_17',\n                          'FLAG_DOCUMENT_18','FLAG_DOCUMENT_19','FLAG_DOCUMENT_20','FLAG_DOCUMENT_21',\n                          'NFLAG_INSURED_ON_APPROVAL','NAME_CONTRACT_TYPE_x','CODE_GENDER',\n                          'NAME_TYPE_SUITE_x','NAME_INCOME_TYPE','NAME_EDUCATION_TYPE','NAME_FAMILY_STATUS',\n                          'NAME_HOUSING_TYPE','WEEKDAY_APPR_PROCESS_START_x','ORGANIZATION_TYPE','NAME_CONTRACT_TYPE_y',\n                          'WEEKDAY_APPR_PROCESS_START_y','NAME_CASH_LOAN_PURPOSE','NAME_CONTRACT_STATUS','NAME_PAYMENT_TYPE',\n                          'CODE_REJECT_REASON','NAME_TYPE_SUITE_y','NAME_CLIENT_TYPE','NAME_GOODS_CATEGORY',\n                          'NAME_PORTFOLIO','NAME_PRODUCT_TYPE','CHANNEL_TYPE','NAME_SELLER_INDUSTRY',\n                          'NAME_YIELD_GROUP','PRODUCT_COMBINATION'], axis = 1)\nmergeddf.head()","46377833":"mergeddf.shape","7eb3d86b":"mergeddfs=mergeddf.sample(n = 7000) ","53439fd3":"from sklearn.model_selection import train_test_split\n\n# Putting feature variable to X\nX = mergeddfs.drop(['TARGET'], axis=1)","f9202c83":"X.head()","8ca86fdd":"X.shape","724ffadc":"# Putting response variable to y\ny = mergeddfs['TARGET']","52254de3":"y.head()","4d6e2896":"# Splitting the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=70)","44eb4c09":"X_train.head()","03a1a4c3":"X_train.shape","3189fe1d":"X_test.head()","7d49a545":"X_test.shape","4c64bd05":"y_train.head()","9074f156":"y_train.shape","0e723c99":"y_test.head()","710d8ed3":"y_test.shape","030e6d61":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX_train[['CNT_CHILDREN','AMT_INCOME_TOTAL','AMT_CREDIT_x','AMT_ANNUITY_x',\n         'AMT_GOODS_PRICE_x','REGION_POPULATION_RELATIVE','DAYS_BIRTH',\n         'DAYS_EMPLOYED','DAYS_REGISTRATION','DAYS_ID_PUBLISH','CNT_FAM_MEMBERS',\n         'HOUR_APPR_PROCESS_START_x','LIVE_CITY_NOT_WORK_CITY','OBS_30_CNT_SOCIAL_CIRCLE',\n         'DEF_30_CNT_SOCIAL_CIRCLE','OBS_60_CNT_SOCIAL_CIRCLE','DEF_60_CNT_SOCIAL_CIRCLE',\n         'DAYS_LAST_PHONE_CHANGE','AMT_REQ_CREDIT_BUREAU_HOUR','AMT_REQ_CREDIT_BUREAU_DAY',\n         'AMT_REQ_CREDIT_BUREAU_WEEK','AMT_REQ_CREDIT_BUREAU_MON','AMT_REQ_CREDIT_BUREAU_QRT',\n         'AMT_REQ_CREDIT_BUREAU_YEAR','AMT_ANNUITY_y','AMT_APPLICATION','AMT_CREDIT_y',\n         'AMT_GOODS_PRICE_y','HOUR_APPR_PROCESS_START_y','FLAG_LAST_APPL_PER_CONTRACT',\n         'NFLAG_LAST_APPL_IN_DAY','DAYS_DECISION','SELLERPLACE_AREA','CNT_PAYMENT',\n         'DAYS_FIRST_DRAWING','DAYS_FIRST_DUE','DAYS_LAST_DUE_1ST_VERSION','DAYS_LAST_DUE',\n         'DAYS_TERMINATION']] = scaler.fit_transform(X_train[['CNT_CHILDREN','AMT_INCOME_TOTAL','AMT_CREDIT_x',\n                                                               'AMT_ANNUITY_x','AMT_GOODS_PRICE_x','REGION_POPULATION_RELATIVE',\n                                                               'DAYS_BIRTH','DAYS_EMPLOYED','DAYS_REGISTRATION','DAYS_ID_PUBLISH',\n                                                               'CNT_FAM_MEMBERS','HOUR_APPR_PROCESS_START_x','LIVE_CITY_NOT_WORK_CITY',\n                                                               'OBS_30_CNT_SOCIAL_CIRCLE','DEF_30_CNT_SOCIAL_CIRCLE','OBS_60_CNT_SOCIAL_CIRCLE',\n                                                               'DEF_60_CNT_SOCIAL_CIRCLE','DAYS_LAST_PHONE_CHANGE','AMT_REQ_CREDIT_BUREAU_HOUR',\n                                                               'AMT_REQ_CREDIT_BUREAU_DAY','AMT_REQ_CREDIT_BUREAU_WEEK','AMT_REQ_CREDIT_BUREAU_MON',\n                                                               'AMT_REQ_CREDIT_BUREAU_QRT','AMT_REQ_CREDIT_BUREAU_YEAR','AMT_ANNUITY_y','AMT_APPLICATION',\n                                                               'AMT_CREDIT_y','AMT_GOODS_PRICE_y','HOUR_APPR_PROCESS_START_y','FLAG_LAST_APPL_PER_CONTRACT',\n                                                               'NFLAG_LAST_APPL_IN_DAY','DAYS_DECISION','SELLERPLACE_AREA','CNT_PAYMENT','DAYS_FIRST_DRAWING',\n                                                               'DAYS_FIRST_DUE','DAYS_LAST_DUE_1ST_VERSION','DAYS_LAST_DUE','DAYS_TERMINATION']])\n\nX_train.head()","7dfe7020":"X_test[['CNT_CHILDREN','AMT_INCOME_TOTAL','AMT_CREDIT_x','AMT_ANNUITY_x',\n         'AMT_GOODS_PRICE_x','REGION_POPULATION_RELATIVE','DAYS_BIRTH',\n         'DAYS_EMPLOYED','DAYS_REGISTRATION','DAYS_ID_PUBLISH','CNT_FAM_MEMBERS',\n         'HOUR_APPR_PROCESS_START_x','LIVE_CITY_NOT_WORK_CITY','OBS_30_CNT_SOCIAL_CIRCLE',\n         'DEF_30_CNT_SOCIAL_CIRCLE','OBS_60_CNT_SOCIAL_CIRCLE','DEF_60_CNT_SOCIAL_CIRCLE',\n         'DAYS_LAST_PHONE_CHANGE','AMT_REQ_CREDIT_BUREAU_HOUR','AMT_REQ_CREDIT_BUREAU_DAY',\n         'AMT_REQ_CREDIT_BUREAU_WEEK','AMT_REQ_CREDIT_BUREAU_MON','AMT_REQ_CREDIT_BUREAU_QRT',\n         'AMT_REQ_CREDIT_BUREAU_YEAR','AMT_ANNUITY_y','AMT_APPLICATION','AMT_CREDIT_y',\n         'AMT_GOODS_PRICE_y','HOUR_APPR_PROCESS_START_y','FLAG_LAST_APPL_PER_CONTRACT',\n         'NFLAG_LAST_APPL_IN_DAY','DAYS_DECISION','SELLERPLACE_AREA','CNT_PAYMENT',\n         'DAYS_FIRST_DRAWING','DAYS_FIRST_DUE','DAYS_LAST_DUE_1ST_VERSION','DAYS_LAST_DUE',\n         'DAYS_TERMINATION']] = scaler.transform(X_test[['CNT_CHILDREN','AMT_INCOME_TOTAL','AMT_CREDIT_x',\n                                                               'AMT_ANNUITY_x','AMT_GOODS_PRICE_x','REGION_POPULATION_RELATIVE',\n                                                               'DAYS_BIRTH','DAYS_EMPLOYED','DAYS_REGISTRATION','DAYS_ID_PUBLISH',\n                                                               'CNT_FAM_MEMBERS','HOUR_APPR_PROCESS_START_x','LIVE_CITY_NOT_WORK_CITY',\n                                                               'OBS_30_CNT_SOCIAL_CIRCLE','DEF_30_CNT_SOCIAL_CIRCLE','OBS_60_CNT_SOCIAL_CIRCLE',\n                                                               'DEF_60_CNT_SOCIAL_CIRCLE','DAYS_LAST_PHONE_CHANGE','AMT_REQ_CREDIT_BUREAU_HOUR',\n                                                               'AMT_REQ_CREDIT_BUREAU_DAY','AMT_REQ_CREDIT_BUREAU_WEEK','AMT_REQ_CREDIT_BUREAU_MON',\n                                                               'AMT_REQ_CREDIT_BUREAU_QRT','AMT_REQ_CREDIT_BUREAU_YEAR','AMT_ANNUITY_y','AMT_APPLICATION',\n                                                               'AMT_CREDIT_y','AMT_GOODS_PRICE_y','HOUR_APPR_PROCESS_START_y','FLAG_LAST_APPL_PER_CONTRACT',\n                                                               'NFLAG_LAST_APPL_IN_DAY','DAYS_DECISION','SELLERPLACE_AREA','CNT_PAYMENT','DAYS_FIRST_DRAWING',\n                                                               'DAYS_FIRST_DUE','DAYS_LAST_DUE_1ST_VERSION','DAYS_LAST_DUE','DAYS_TERMINATION']])\n\nX_test.head()","6a8d3227":"# Checking the Converted Rate\nTarget = round((sum(mergeddf['TARGET'])\/len(mergeddf['TARGET'].index))*100,2)\nprint(\"We have almost {} %  Converted rate after successful data manipulation\".format(Target))","6589b8cb":"from sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\nmodel = GradientBoostingClassifier(n_estimators=150,max_depth=6)","dcdb05fc":"# fit the model with the training data\nmodel.fit(X_train,y_train)","a8fe0d94":"# predict the target on the train dataset\npredict_train = model.predict(X_train)\npredict_train","65887751":"trainaccuracy = accuracy_score(y_train,predict_train)\nprint('accuracy_score on train dataset : ', trainaccuracy)","e7316fb0":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif.tail()","299f9c98":"features_to_remove = vif.loc[vif['VIF'] >= 4.99,'Features'].values\nfeatures_to_remove = list(features_to_remove)\nprint(features_to_remove)","6001b3ce":"X_train = X_train.drop(columns=features_to_remove, axis = 1)\nX_train.head()","5c0a73d2":"X_test = X_test.drop(columns=features_to_remove, axis = 1)\nX_test.head()","3034386a":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","0241cae5":"features_to_remove = vif.loc[vif['VIF'] >= 4.99,'Features'].values\nfeatures_to_remove = list(features_to_remove)\nprint(features_to_remove)","5ff754bd":"X_train = X_train.drop(columns=features_to_remove, axis = 1)\nX_train.head()","53b322de":"X_test = X_test.drop(columns=features_to_remove, axis = 1)\nX_test.head()","894c2c83":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","ade85527":"# fit the model with the training data\nmodel.fit(X_train,y_train)","8bd7d848":"# predict the target on the train dataset\npredict_train = model.predict(X_train)\npredict_train","56153942":"trainaccuracy = accuracy_score(y_train,predict_train)\nprint('accuracy_score on train dataset : ', trainaccuracy)","54354568":"from sklearn import metrics\n# Confusion matrix \nconfusion = metrics.confusion_matrix(y_train, predict_train )\nprint(confusion)","8a0f4b9f":"TP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives","ffc468e6":"# Let's see the sensitivity of our model\ntrainsensitivity= TP \/ float(TP+FN)\ntrainsensitivity","b356af35":"# Let us calculate specificity\ntrainspecificity= TN \/ float(TN+FP)\ntrainspecificity","c4cc0d55":"# Calculate false postive rate - predicting Defaulted when customer does not have Defaulted\nprint(FP\/ float(TN+FP))","1433cf62":"# Positive predictive value \nprint (TP \/ float(TP+FP))","b37f7f54":"# Negative predictive value\nprint(TN \/ float(TN+ FN))","d7461f29":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","6a0a1932":"draw_roc(y_train,predict_train)","43c5254d":"#Using sklearn utilities for the same","a1a3f8e9":"from sklearn.metrics import precision_score, recall_score\nprecision_score(y_train,predict_train)","9a99fa42":"recall_score(y_train,predict_train)  ","e6325518":"# predict the target on the test dataset\npredict_test = model.predict(X_test)\nprint('Target on test data\\n\\n',predict_test)","dc613e5d":"confusion2 = metrics.confusion_matrix(y_test, predict_test )\nprint(confusion2)","8150f92e":"TP = confusion2[1,1] # true positive \nTN = confusion2[0,0] # true negatives\nFP = confusion2[0,1] # false positives\nFN = confusion2[1,0] # false negatives","a86d29ac":"# Let's check the overall accuracy.\ntestaccuracy= accuracy_score(y_test,predict_test)\ntestaccuracy","f18101cc":"# Let's see the sensitivity of our lmodel\ntestsensitivity=TP \/ float(TP+FN)\ntestsensitivity","10d9196f":"# Let us calculate specificity\ntestspecificity= TN \/ float(TN+FP)\ntestspecificity","6d1452fd":"# Let us compare the values obtained for Train & Test:\nprint(\"Train Data Accuracy    :{} %\".format(round((trainaccuracy*100),2)))\nprint(\"Train Data Sensitivity :{} %\".format(round((trainsensitivity*100),2)))\nprint(\"Train Data Specificity :{} %\".format(round((trainspecificity*100),2)))\nprint(\"Test Data Accuracy     :{} %\".format(round((testaccuracy*100),2)))\nprint(\"Test Data Sensitivity  :{} %\".format(round((testsensitivity*100),2)))\nprint(\"Test Data Specificity  :{} %\".format(round((testspecificity*100),2)))","5523a351":"### Total and average amounts applied and credited in previous applications\n\nAMT_APPLICATION-For how much credit did client ask on the previous application. >AMT_CREDIT-Final credit amount on the previous application. This differs from AMT_APPLICATION in a way that the AMT_APPLICATION is the amount for which the client.","5a009a0a":"### Number of days before application client changed phone .\n\nDAYS_LAST_PHONE_CHANGE - How many days before application did client change phone.\n\n","4bcc23ab":"# Plotting the ROC Curve","4b03dde8":"### Point to infer from the graph\n\nSUBPLOT 1 : Distribution of client owning a house or flat . 69% of clients own a flat or house .\n\nSUBPLOT 2 : Distribution of client owning a house or flat by gender . Out of total clients who own house 67% are female and 33% are male.","40f5a60e":"### Suggestion\nWe can Fill NA with 0 i.e. Median for this field ","2bbdef6d":"Converting some binary variables (Y\/N) to 1\/0","e60afdf2":"### Distribution of client income type\n\nNAME_INCOME_TYPE Clients income type (businessman, working, maternity leave,\u2026)","2e709444":"### Point to infer from the graph\n\nAround 81% of rejected applications the reason is XAP.\n\n62% of chose to pay through cash by bank for previous applications.","304cfa19":"\nThe case study aims to identify patterns which indicate if a client has difficulty paying their installments which may be used for taking actions such as denying the loan, reducing the amount of loan, lending (to risky applicants) at a higher interest rate, etc. This will ensure that the consumers capable of repaying the loan are not rejected. Identification of such applicants using EDA is the aim of this case study.\n\n \n\nIn other words, the company wants to understand the driving factors (or driver variables) behind loan default, i.e. the variables which are strong indicators of default.  The company can utilise this knowledge for its portfolio and risk assessment.\n\n","fd25a845":"Now we will take care of null values in each column one by one.","37d93165":"### Point to infer from the graph\nIt's non balanced data","e49255b7":"### Suggestion\nWe can Fill NA with 15955 i.e. Mean for this field ","75cd5830":"## Data Dimensions","2881eda2":"\n## Top 10 Correlation Fields for Repayer","be4a6a90":"# Converting negative values to absolute values\n","09dc1906":"\n### Approval,canceled and refusal rates by channel types.\n\nCHANNEL_TYPE - Through which channel we acquired the client on the previous application.\n\nNAME_CONTRACT_STATUS- Contract status (approved, cancelled, ...) of previous application.\n\n","13370394":"### Point to infer from the graph\n\nIn High population density regions people are less likely to default on loans.","d9650f67":"### Point to infer from the graph\nOn average current loan ids have 4 to 5 loan applications previously","d3d6f0a5":"### Point to infer from the graph\n\nChannel types like Stone ,regional and country-wide have maximum approval rates.\n\nChannel of coorporate sales have maximum refusal rate.\n\nCredit-cash centres and Contact centres have maximum cancellation rates.","cc065139":"### Removing columns with missing values more than 50%\n\n#### key point\nAs per Industrial Standard, max Threshold limit can be between 40% to 50 % depending upon the data acquired in specific sector.","df1be743":"## Distribution of client owning a car and by gender\n\nFLAG_OWN_CAR Flag if the client owns a car .","be1bc397":"## Distribution of client owning a house or flat and by gender\n\nFLAG_OWN_REALTY - Flag if client owns a house or flat","7791e22a":"## IMPORTING LIBRARIES","3b1f68f8":"\n## Percentage of Missing values in application_data","28ea98bf":"### Suggestion\nWe can Fill NA with 0 i.e. Median for this field ","d184d4fb":"# VIF","f62ab332":"### Point to infer from the graph\n\nThe percentage of revolving loans and cash loans are 10% & 90%.","0046a802":"### Suggestion\nWe can Fill NA with 365243 i.e. Median for this field ","7a33cb74":"## Pair Plot between amount variables\n\nAMT_INCOME_TOTAL - Income of the client\n\nAMT_CREDIT - Credit amount of the loan\n\nAMT_ANNUITY - Loan annuity\n\nAMT_GOODS_PRICE - For consumer loans it is the price of the goods for which the loan is given","202fcd7b":"\n### Distribution of Education type by loan repayment status\n\nNAME_FAMILY_STATUS - Family status of the client","f4f61cd1":"### Peak days and hours for applying loans (defaulters vs repayers)\n\nWEEKDAY_APPR_PROCESS_START - On which day of the week did the client apply for the loan.\n\nHOUR_APPR_PROCESS_START - Approximately at what hour did the client apply for the loan.\n\n","33dae3bf":"# Final Observation:","ecaacf61":"## Print the information about the attributes of application_data","3a27504f":"\n### Frequency distribution of intrest rates and client insurance requests\n\nNAME_YIELD_GROUP - Grouped interest rate into small medium and high of the previous application.\n\nNFLAG_INSURED_ON_APPROVAL - Did the client requested insurance during the previous application.","96df3a31":"\n### Application Data","20f2ad16":"\n## Comparing summary statistics between defaulters and non - defaulters for loan amounts.\n\n","b45e9437":"# Corelation between variables","c78054a5":"### Point to infer from the graph\n\n\nCash loan applications are maximum followed by consumer loan applications.","7a47d080":"### Suggestion\nWe can Fill NA with 0 i.e. Median for this field ","8baa2451":"\n### Distribution in organization types for repayers and defaulters\n\nORGANIZATION_TYPE - Type of organization where client works.\n\n","e161f689":"\n### Count of application status by application type.\n\nNAME_CONTRACT_TYPE -Contract product type (Cash loan, consumer loan [POS] ,...) of the previous application.\n\nNAME_CONTRACT_STATUS -Contract status (approved, cancelled, ...) of previous application.\n\n","f99d404f":"### Distribution client's social surroundings with observed and defaulted 30 DPD (days past due)\n\nOBS_30_CNT_SOCIAL_CIRCLE- How many observation of client's social surroundings with observable 30 DPD (days past due) default.\n\nDEF_30_CNT_SOCIAL_CIRCLE-How many observation of client's social surroundings defaulted on 30 DPD (days past due) .\n\nOBS_60_CNT_SOCIAL_CIRCLE - How many observation of client's social surroundings with observable 60 DPD (days past due) default.\n\nDEF_60_CNT_SOCIAL_CIRCLE - How many observation of client's social surroundings defaulted on 60 (days past due) DPD.","c9dd8d34":"### Suggestion\nWe can Fill NA with -361 i.e. Median for this field ","bd99e1d7":"# Model Building","158f44ff":"\n# Previous Application ","3e4cd021":"### Suggestion\nWe can Fill NA with 0 i.e. Mode for this field ","926bf78d":"### Suggestion\nWe can Fill NA with 0 i.e. Mean for this field as it's right skewed graph","c6bd32f1":"### Separating numerical and categorical  in application_data\n","61402394":"## First Few rows of Data","d1d9175c":"### Contract status by weekdays\n\nWEEKDAY_APPR_PROCESS_START - On which day of the week did the client apply for previous application","09b7359b":"### Suggestion\nWe can Fill NA with -499 i.e. Median for this field ","002f0c63":"\n## Popular goods for applying loans\n\nNAME_GOODS_CATEGORY - What kind of goods did the client apply for in the previous application.\n\n","2611038e":"### Distribution of days employed for target variable.\n\nDAYS_EMPLOYED - How many days before the application for target variable the person started current employment","bd071711":"### Separating numerical and categorical columns from previous_application","ac08547c":"# Precision and Recall","5ec74155":"## Percentage of Missing values in previous_application","e8d99bbb":"\nThis case study aims to give us an idea of applying EDA in a real business scenario. In this case study, apart from applying the techniques that we have learnt in the EDA module, we will also develop a basic understanding of risk analytics in banking and financial services and understand how data is used to minimise the risk of losing money while lending to customers.","8b45b8b2":"# Data Understanding","5ba84855":"## Distribution of Contract type by gender","dc91187d":"### Point to infer from the graph\n\nPercentage of males is 10% more in defaults than non defaulters.\n\nPercentage of Cash Loans is 4% more in defaults than Revolving Loans.","c76f3fa3":"### Point to infer from the graph\nPurposes like XAP ,electronic eqipment ,everey day expences and education have maximum loan acceptance.\n\nLoan puposes like payment of other loans ,refusal to name goal ,buying new home or car have most refusals.\n\n40% of XNA purpose loans are cancalled.","10024b2d":"### Point to infer from the graph\n\nConsumer loan applications are most approved loans and cash loans are most cancelled and refused loans.","c71054a2":"### Suggestion\nWe can Fill NA with 0 i.e. Median for this field ","d0171124":"### Contract status relative to decision made about previous application.\n\nDAYS_DECISION - Relative to current application when was the decision about previous application made.\n\n","a1ca4cfa":"### Point to infer from the graph\n\nAverage clients age is comparatively less in non repayers than repayers in every aspect.\n\nYounger people tend to default more than elder people.","fcb8c999":"### Point to infer from the graph\n\nCash loans is always prefered over Revolving loans by both genders","89f7c459":"\n## Distribution of Target variable","27249e14":"### Defaulters' Borrowing History ","0e7386db":"### Point to infer from the graph\nAbout 60% clients are un-accompained when applying for loans.\n\n73% clients are old clients","fac9bc61":"### Suggestion\nWe can Fill NA with 80541 i.e. Median for this field ","22041f55":"\n### Percentage of applications accepted,cancelled,refused and unused for different loan purposes.\n\nNAME_CASH_LOAN_PURPOSE - Purpose of the cash loan.\n\nNAME_CONTRACT_STATUS - Contract status (approved, cancelled, ...) of previous application.\n\n","2d53df0d":"### Suggestion\nWe can Fill NA with Cash i.e. Mode for this field ","6d6c94f1":"### Point to infer from the graph\n8% out of total client population have difficulties in repaying loans.","265d72c7":"### Documents provided by the clients.\n\nFLAG_DOCUMENT - Did client provide documents.(1,0)","42454786":"TARGET :Target variable (1 - client with payment difficulties: he\/she had late payment more than X days on at least one of the first Y installments of the loan in sample, 0 - all other cases)\n","50879de9":"### Suggestion\nWe can Fill NA with \"Unaccompanied\" i.e. Mode for this field ","eaa0e853":"## Distribution in Contract types in application_data \n\nNAME_CONTRACT_TYPE : Identification if loan is cash , consumer or revolving\n","2f7e4a2c":"### Suggestion\nWe can Fill NA with 12 i.e. Median for this field ","cb3978b2":"### MISSING values Suggestion","9d67d32c":"\n## Imbalance percentage","a5963902":"### Suggestion\nWe can Fill NA with 2 i.e. Median for this field, Mean is not be used as this field needs to be Whole number","5fc9b9a2":"\n### Client's age\n\nDAYS_BIRTH - Client's age in days at the time of application.\n\n","adb950d7":"### Distribution of registration days for target variable.\n\nDAYS_REGISTRATION How many days before the application did client change his registration","97b4de42":"##### 1. 'application_data.csv' \nIt contains all the information of the client at the time of application.\nThe data is about whether a client has payment difficulties.\n\n \n\n##### 2. 'previous_application.csv'\nIt contains information about the client\u2019s previous loan data. It contains the data whether the previous application had been Approved, Cancelled, Refused or Unused offer.\n\n \n\n##### 3. 'columns_description.csv' \nIt is data dictionary which describes the meaning of the variables.","abc5569d":"### Previous loan amounts applied and loan amounts credited.\n\nAMT_APPLICATION-For how much credit did client ask on the previous application.\n\nAMT_CREDIT-Final credit amount on the previous application. This differs from AMT_APPLICATION in a way that the AMT_APPLICATION is the amount for which the client initially applied for, but during our approval process he could have received different amount - AMT_CREDIT.","2837d61c":"### Suggestion\nWe can Fill NA with Unaccompanied  i.e. Mode for this field ","fa1e9810":"## Gender Distribution in application_data ","ec22071d":"### Contract status by hour of the day\n\nHOUR_APPR_PROCESS_START - Approximately at what day hour did the client apply for the previous application.\n\n","05a694b9":"### Concatenating application_data and previous_application","35cf6078":"### Suggestion\nWe can Fill NA with 0 i.e. Median for this field ","c9093903":"### Point to infer from the graph\n\nOn average approved contract types have higher number of decision days compared to cancelled and refused contracts.","0804b063":"### Point to infer from the graph\n\nOrganizations like Business Entity Type 3,Construction,Self-employed percentage of defaulters are higher than repayers.","4815f325":"### Suggestion\nWe can Fill NA with -537 i.e. Median for this field ","c3b254a3":"### Detailed product combination of the previous application","4608c6e7":"### Repayers' Borrowing History ","7146fea7":"### Suggestion\nWe can Fill NA with -831 i.e. Median for this field ","45d5e12f":"### Equiries to Credit Bureau about the client before application.\n\nAMT_REQ_CREDIT_BUREAU_HOUR - Number of enquiries to Credit Bureau about the client one hour before application.\n\nAMT_REQ_CREDIT_BUREAU_DAY - Number of enquiries to Credit Bureau about the client one day before application (excluding one hour before application).\n\nAMT_REQ_CREDIT_BUREAU_WEEK - Number of enquiries to Credit Bureau about the client one week before application (excluding one day before application).\n\nAMT_REQ_CREDIT_BUREAU_MON - Number of enquiries to Credit Bureau about the client one month before application (excluding one week before application).\n\nAMT_REQ_CREDIT_BUREAU_QRT - Number of enquiries to Credit Bureau about the client 3 month before application (excluding one month before application).\n\nAMT_REQ_CREDIT_BUREAU_YEAR - Number of enquiries to Credit Bureau about the client one day year (excluding last 3 months before application).","095dfded":"\n## Distribution of contract type ,gender ,own car ,own house with respect to Repayment status(Target variable)","0c340a67":"\n### Current loan id having previous loan applications.\n\nSK_ID_PREV - ID of previous credit in Home credit related to loan in our sample. (One loan in our sample can have 0,1,2 or more previous loan applications in Home Credit, previous application could, but not necessarily have to lead to credit).\n\nSK_ID_CURR ID of loan in our sample.\n","55d84061":"### Suggestion\nWe can Fill NA with 0 i.e. Mode for this field","f99c0360":"\n### Contract types in previous applications\n\nNAME_CONTRACT_TYPE Contract product type (Cash loan, consumer loan [POS] ,...) of the previous application.\n","5e5045bb":"\n### Distribution of Education type by loan repayment status\n\nNAME_EDUCATION_TYPE Level of highest education the client achieved..\n\n","53d6c00e":"### Point to infer from the graph\n\nOn tuesdays , percentage of defaulters applying for loans is greater than that of repayers.\n\nFrom morning 4'O clock to 9'O clock percentage of defaulters applying for loans is greater than that of repayers.","4c28c0c9":"### Point to infer from the graph\n\nPercentage of defaulters are less in 1-rated regions compared to repayers.\n\nPercentage of defaulters are more in 3-rated regions compared to repayers.","d82c1691":"### Average Earnings by different professions and education types","a3d1d0f8":"The NaN, in if in  case, is interpretted as no correlation between the two variables.","cf3e16e1":"\n### Client payment methods & reasons for application rejections\n\nNAME_PAYMENT_TYPE - Payment method that client chose to pay for the previous application.\n\nCODE_REJECT_REASON - Why was the previous application rejected.\n\n","6dd2d547":"### Highest amount credited seller areas and industries.\n\nSELLERPLACE_AREA - Selling area of seller place of the previous application.\n\nNAME_SELLER_INDUSTRY - The industry of the seller.","ae879223":"### Days variables - Relative to application date of current application\n\nDAYS_FIRST_DRAWING - Relative to application date of current application when was the first disbursement of the previous application.\n\nDAYS_FIRST_DUE - Relative to application date of current application when was the first due supposed to be of the previous application.\n\nDAYS_LAST_DUE_1ST_VERSION - Relative to application date of current application when was the first due of the previous application.\n\nDAYS_LAST_DUE -Relative to application date of current application when was the last due date of the previous application.\n\nDAYS_TERMINATION - Relative to application date of current application when was the expected termination of the previous application.","f02bf9b4":"The solution is made in 2 different ipymb files\n\n- 1st file contains detailed analysis (EDA) on application_data to identify the important features which help us to identify the defaulters\n- 2nd file contains data where we inner join the records (application_data, previous_application) with same the SK_ID_CURR","3a2e834d":"# Data Preparation","710ef8ae":"# GBM","dbbcd60f":"## Average Income,credit,annuity & goods_price by gender\n","c0ace833":"## Distribution of Number of children and family members of client by repayment status.\n\nCNT_CHILDREN - Number of children the client has.\n\nCNT_FAM_MEMBERS - How many family members does client have.","2439e906":"### Distribution of amount data\n\nAMT_INCOME_TOTAL - Income of the client\n\nAMT_CREDIT - Credit amount of the loan\n\nAMT_ANNUITY - Loan annuity\n\nAMT_GOODS_PRICE - For consumer loans it is the price of the goods for which the loan is given","ea063345":"The loan providing companies find it hard to give loans to the people due to their insufficient or non-existent credit history. Because of that, some consumers use it as their advantage by becoming a defaulter. Suppose you work for a consumer finance company which specialises in lending various types of loans to urban customers. You have to use EDA to analyse the patterns present in the data. This will ensure that the applicants are capable of repaying the loan are not rejected.\n\n \n\nWhen the company receives a loan application, the company has to decide for loan approval based on the applicant\u2019s profile. Two types of risks are associated with the bank\u2019s decision:\n\nIf the applicant is likely to repay the loan, then not approving the loan results in a loss of business to the company\n\nIf the applicant is not likely to repay the loan, i.e. he\/she is likely to default, then approving the loan may lead to a financial loss for the company.\n\n \n\nThe data given below contains the information about the loan application at the time of applying for the loan. It contains two types of scenarios:\n\nThe client with payment difficulties: he\/she had late payment more than X days on at least one of the first Y instalments of the loan in our sample,\n\nAll other cases: All other cases when the payment is paid on time.\n\n \n\n \n\nWhen a client applies for a loan, there are four types of decisions that could be taken by the client\/company):\n\n###### Approved: \nThe Company has approved loan Application\n\n###### Cancelled: \nThe client cancelled the application sometime during approval. Either the client changed her\/his mind about the loan or in some cases due to a higher risk of the client he received worse pricing which he did not want.\n\n###### Refused: \nThe company had rejected the loan (because the client does not meet their requirements etc.).\n\n###### Unused offer:  \nLoan has been cancelled by the client but on different stages of the process.\n\n\n\n \n\n ","71933987":"\n### Distribution normalized population of region where client lives by loan repayment status\n\nREGION_POPULATION_RELATIVE - Normalized population of region where client lives (higher number means the client lives in more populated region).\n\n","e508fb66":"# Introduction","66b1a5fc":"### Removing columns with missing values more than 40%\n\nAs per Industrial Standard, max Threshold limit can be between 40% to 50 % depending upon the data acquired in specific sector.","98ce108c":"\n### Distribution of registration days for target variable.\n\nREGION_RATING_CLIENT - Home credit rating of the region where client lives (1,2,3).\n\nREGION_RATING_CLIENT_W_CITY - Home credit rating of the region where client lives with taking city into account (1,2,3). Percentage of defaulters are less in 1-rated regions compared to repayers.","2a022b64":"GBM is a boosting algorithm used when we deal with plenty of data to make a prediction with high prediction power. Boosting is actually an ensemble of learning algorithms which combines the prediction of several base estimators in order to improve robustness over a single estimator. It combines multiple weak or average predictors to a build strong predictor.","d4ea729e":"### Point to infer from the graph\nXNA ,Mobiles ,Computers and consumer electronics are popular goods for applying loans","aca83342":"## Top 10 Correlation Fields for Defaulter","a4b6ce35":"# Feature Scaling","4c513b02":"# Application Data","f629a420":"### Point to infer from the graph\n\n#### Income of client -\n\n1 . Average income of clients who default and who do not are almost same.\n\n2 . Standard deviation in income of client who default is very high compared to who do not default.\n\n3 . Clients who default also has maximum income earnings\n\n#### Credit amount of the loan ,Loan annuity,Amount goods price -\n\n1 . Statistics between credit amounts,Loan annuity and Amount goods price given to cilents who default and who dont are almost similar.","34e1ec92":"# Distribution of Suite type\n\nNAME_TYPE_SUITE - Who was accompanying client when he was applying for the loan.","027b9ef2":"# Making predictions on the test set","f36edec5":"### Point to infer from the graph\n\nMorning 11'o clock have maximum number of approvals.\n\nMorning 10'o clock have maximum number of refused and cancelled contracts.","6a182e9b":"### Annuity of previous application\n\nAMT_ANNUITY - Annuity of previous application","b22f6953":"### Suggestion\nWe can Fill NA with 0 i.e. Mean for this field as it's right skewed graph","891adfe0":"### Suggestion\nWe can Fill NA with 0 i.e. Median for this field ","70bf2c75":"# Business Understanding","6bedb669":"\n#### Distribution in Client suite type & client type.\n\nNAME_TYPE_SUITE - Who accompanied client when applying for the previous application.\n\nNAME_CLIENT_TYPE - Was the client old or new client when applying for the previous application.\n\n","60109534":"### Point to infer from the graph\n\nPercentage of single people are more in defaulters than non defaulters.","eb299dd1":"### Point to infer from the graph\n\nPopular term of previous credit are 6months ,10months ,1year ,2years & 3 years.","60d9164f":"\n## Term Dictionary ","367adf95":"### Point to infer from the graph\n\nFemale : 66% \n\nMale : 34% ","8deff9c6":"### Suggestion\nWe can Fill NA with 112320 i.e. Median for this field ","f39aaaf5":"# Business Objectives","69a77667":"### Distribution in contact information provided by client\n\nFLAG_MOBIL - Did client provide mobile phone (1=YES, 0=NO)\n\nFLAG_EMP_PHONE - Did client provide work phone (1=YES, 0=NO)\n\nFLAG_WORK_PHONE - Did client provide home phone (1=YES, 0=NO)\n\nFLAG_CONT_MOBILE - Was mobile phone reachable (1=YES, 0=NO)\n\nFLAG_PHONE - Did client provide home phone (1=YES, 0=NO)\n\nFLAG_EMAIL - Did client provide email (1=YES, 0=NO)","d8e58ff7":"### Point to infer from the graph\n\nSUBPLOT 1 : Distribution of client owning a car. 34% of clients own a car .\n\nSUBPLOT 2 : Distribution of client owning a car by gender. Out of total clients who own car 57% are male and 43% are female.","f51bf6ef":"### Point to infer from the graph\n\nAverage days of defaulters phone change is less than average days of repayers phone change.","01c1bfb9":"\n### Previous applications portfolio and product types\n\nNAME_PORTFOLIO - Was the previous application for CASH, POS, CAR, \u2026\n\nNAME_PRODUCT_TYPE - Was the previous application x-sell o walk-in.","13ad6392":"### MISSING values Suggestion","b16085ae":"### Suggestion\nWe can Fill NA with 0 i.e. Median for this field ","64503802":"### Suggestion\nWe can Fill NA with 0 i.e. Median for this field ","3f03e5bb":"### Point to infer from the graph\n\nClients who default have proportionally 9% less higher education compared to clients who do not default.","5138873e":"\n### Distribution of Housing type by loan repayment status\n\nNAME_HOUSING_TYPE - What is the housing situation of the client (renting, living with parents, ...)","e72dea4a":"\n### Popular terms of previous credit at application.\n\nCNT_PAYMENT - Term of previous credit at application of the previous application.\n\n","d621a5ee":"### Suggestion\nWe can Fill NA with 0 i.e. Median for this field ","5547410c":"### Peak hours for week days for applying loans.","b674bef3":"## Scatter plot between credit amount and annuity amount","33169aaf":"## Importing Data","5f47f6b6":"### Suggestion\nWe can Fill NA with 0 i.e. Median for this field "}}