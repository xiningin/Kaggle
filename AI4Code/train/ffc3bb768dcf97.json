{"cell_type":{"eaac7c30":"code","dd9ff3ba":"code","aec5b2c7":"code","1313cbe8":"code","3a161761":"code","0dc1774d":"code","3ac39608":"code","8c4f4d35":"code","a947c5d1":"code","316c7360":"code","ee841d2b":"code","c1714c2f":"code","1d7d0ad3":"code","7cfe6b27":"code","0dfe088b":"code","8aa82bdb":"code","f8f79347":"code","e48d9307":"code","62e84466":"code","72c6a37d":"code","b01d6bd1":"code","f254a54c":"code","3c65f682":"code","f366c928":"markdown","dff97a63":"markdown","0a4d9ae2":"markdown","fb9128b4":"markdown"},"source":{"eaac7c30":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dd9ff3ba":"import pandas as pd","aec5b2c7":"df = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/audi.csv')","1313cbe8":"df.head()","3a161761":"df.info()","0dc1774d":"df.isnull().sum()","3ac39608":"df['model'].value_counts()","8c4f4d35":"df['transmission'].value_counts()","a947c5d1":"df['fuelType'].value_counts()","316c7360":"cat_cols = ['model', 'transmission', 'fuelType']","ee841d2b":"from sklearn.preprocessing import OneHotEncoder\n\nOHE = OneHotEncoder(handle_unknown = 'ignore', sparse = False)\n\ndf_OHE = pd.DataFrame(OHE.fit_transform(df[cat_cols]))\n\ndf_OHE.index = df.index\n\ndf_num = df.drop(cat_cols, axis=1)\n\ndf_OHE_concat = pd.concat([df_num, df_OHE], axis=1)","c1714c2f":"df_OHE_concat.head()","1d7d0ad3":"print(df.shape)\nprint(df_OHE.shape)\nprint(df_OHE_concat.shape)","7cfe6b27":"X = df_OHE_concat.drop('price', axis=1)\ny = df['price']","0dfe088b":"from sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3)","8aa82bdb":"print(X_train.shape)\nprint(X_val.shape)\nprint(y_train.shape)\nprint(y_val.shape)","f8f79347":"from sklearn.metrics import mean_absolute_error as mae","e48d9307":"from sklearn.tree import DecisionTreeRegressor\ndt = DecisionTreeRegressor(max_leaf_nodes=900, random_state=1)\n\ndt.fit(X_train, y_train)\ndt_pred = dt.predict(X_val)\ndt_mae = mae(dt_pred, y_val)\nprint('MAE of Decision Tree is: {:,.0f}'.format(dt_mae))","62e84466":"from sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(random_state=1)\n\nrf.fit(X_train, y_train)\nrf_pred = dt.predict(X_val)\nrf_mae = mae(rf_pred, y_val)\nprint('MAE of Random Forest is: {:,.0f}'.format(rf_mae))","72c6a37d":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\n\nlr.fit(X_train, y_train)\nlr_pred = lr.predict(X_val)\nlr_mae = mae(lr_pred, y_val)\nprint('MAE of Linear Regression is: {:,.0f}'.format(lr_mae))","b01d6bd1":"from sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.model_selection import GridSearchCV\n\nknn = KNeighborsRegressor()\nparams = {'n_neighbors':[2,3,4,5,6,7,8,9]}\n\nmodel = GridSearchCV(knn, params, cv=5)\nmodel.fit(X_train, y_train)\nmodel.best_params_","f254a54c":"kn = KNeighborsRegressor(n_neighbors=4)\n\nkn.fit(X_train, y_train)\nkn_pred = kn.predict(X_val)\nkn_mae = mae(kn_pred, y_val)\nprint('MAE of KNeighbors is: {:,.0f}'.format(kn_mae))","3c65f682":"print(dt.score(X_val, y_val)*100)\nprint(rf.score(X_val, y_val)*100)\nprint(lr.score(X_val, y_val)*100)\nprint(kn.score(X_val, y_val)*100)","f366c928":"Time to preproces. I'm gonna use Scikit-Learns One-Hot Encoding","dff97a63":"No null values, perfect","0a4d9ae2":"Time to evaluate Decision Tree, Random Forest, Linear Regression and KNeighbors. I'm gonna use MAE for calculating accuracy","fb9128b4":"Split Dataset"}}