{"cell_type":{"d717b7d4":"code","8d89adf4":"code","8d9104d9":"code","2f122a04":"code","1b2b3a0a":"code","e606bdff":"code","694fe07a":"code","9123c81a":"code","43529ce0":"code","0019e0d7":"code","9a952c12":"code","b56d6f36":"code","d442479a":"code","c973ea22":"code","623218d6":"code","b23a6547":"code","0e438ffd":"markdown","231f7e69":"markdown","68a5fce3":"markdown","00f69937":"markdown","21a6baa2":"markdown","f4efe0a6":"markdown"},"source":{"d717b7d4":"import numpy as np\nimport pandas as pd\nimport os, math\nimport matplotlib.pyplot as plt\nfrom fbprophet import Prophet\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom sklearn.model_selection import train_test_split","8d89adf4":"DATA_PATH = '..\/input\/tabular-playground-series-jul-2021'\ntrain_df = pd.read_csv(f'{DATA_PATH}\/train.csv')\ntest_df = pd.read_csv(f'{DATA_PATH}\/test.csv')\nsample_submission = pd.read_csv(f'{DATA_PATH}\/sample_submission.csv')","8d9104d9":"print(train_df.shape)\ntrain_df.head()","2f122a04":"print(test_df.shape)\ntest_df.head()","1b2b3a0a":"train1_df = train_df.drop(['target_benzene','target_nitrogen_oxides'], axis=1)\ntrain2_df = train_df.drop(['target_carbon_monoxide','target_nitrogen_oxides'], axis=1) \ntrain3_df = train_df.drop(['target_benzene','target_carbon_monoxide'], axis=1) ","e606bdff":"def train_dataset(train_df, target):\n    # Select the last 30 days as the validation data set and the rest as the training data set\n    train_df = train_df.iloc[:-24*30]\n    val_df = train_df.iloc[-24*30:]\n    \n    train = train_df.rename({'date_time':'ds', target:'y'}, axis='columns')\n\n    valid_x = val_df.loc[:, 'date_time':'sensor_5']\n    val_x = valid_x.rename({'date_time':'ds'}, axis='columns')\n    val_y = val_df[target]\n    \n    return train, val_x, val_y","694fe07a":"train, val_x, val_y = train_dataset(train1_df, target='target_carbon_monoxide')\n\nmodel = Prophet(daily_seasonality=10)\n# model.add_seasonality(name='yearly', period=4, fourier_order=5)\nmodel.add_regressor('deg_C')\nmodel.add_regressor('relative_humidity')\nmodel.add_regressor('absolute_humidity')\nmodel.add_regressor('sensor_1')\nmodel.add_regressor('sensor_2')\nmodel.add_regressor('sensor_3')\nmodel.add_regressor('sensor_4')\nmodel.add_regressor('sensor_5')\n\n# Fit the model with train set\nmodel_CO = model.fit(train)\n\n# Predict on valid set\ny_pred = model_CO.predict(val_x)\n\n# Calcuate metrics\nscore_mae = mean_absolute_error(val_y, y_pred['yhat'])\nscore_rmse = math.sqrt(mean_squared_error(val_y, y_pred['yhat']))\n\nprint('RMSE: {}'.format(score_rmse))","9123c81a":"y_pred['yhat'] = abs(y_pred['yhat'])\nplt.figure(figsize=(20,5))\nplt.plot(val_y.reset_index(drop=True), label='true')\nplt.plot(y_pred['yhat'].reset_index(drop=True), label='pred')\nplt.legend()\nplt.show()","43529ce0":"train, val_x, val_y = train_dataset(train2_df, target='target_benzene')\n\nmodel = Prophet(daily_seasonality=10)\n# model.add_seasonality(name='yearly', period=4, fourier_order=5)\nmodel.add_regressor('deg_C')\nmodel.add_regressor('relative_humidity')\nmodel.add_regressor('absolute_humidity')\nmodel.add_regressor('sensor_1')\nmodel.add_regressor('sensor_2')\nmodel.add_regressor('sensor_3')\nmodel.add_regressor('sensor_4')\nmodel.add_regressor('sensor_5')\n\n# Fit the model with train set\nmodel_benzene = model.fit(train)\n\n# Predict on valid set\ny_pred = model_benzene.predict(val_x)\n\n# Calcuate metrics\nscore_mae = mean_absolute_error(val_y, y_pred['yhat'])\nscore_rmse = math.sqrt(mean_squared_error(val_y, y_pred['yhat']))\n\nprint('RMSE: {}'.format(score_rmse))","0019e0d7":"y_pred['yhat'] = abs(y_pred['yhat'])\nplt.figure(figsize=(20,5))\nplt.plot(val_y.reset_index(drop=True), label='true')\nplt.plot(y_pred['yhat'].reset_index(drop=True), label='pred')\nplt.legend()\nplt.show()","9a952c12":"train, val_x, val_y = train_dataset(train3_df, target='target_nitrogen_oxides')\n\nmodel = Prophet(daily_seasonality=10)\n# model.add_seasonality(name='yearly', period=4, fourier_order=5)\nmodel.add_regressor('deg_C')\nmodel.add_regressor('relative_humidity')\nmodel.add_regressor('absolute_humidity')\nmodel.add_regressor('sensor_1')\nmodel.add_regressor('sensor_2')\nmodel.add_regressor('sensor_3')\nmodel.add_regressor('sensor_4')\nmodel.add_regressor('sensor_5')\n\n# Fit the model with train set\nmodel_NO = model.fit(train)\n\n# Predict on valid set\ny_pred = model_NO.predict(val_x)\n\n# Calcuate metrics\nscore_mae = mean_absolute_error(val_y, y_pred['yhat'])\nscore_rmse = math.sqrt(mean_squared_error(val_y, y_pred['yhat']))\n\nprint('RMSE: {}'.format(score_rmse))","b56d6f36":"y_pred['yhat'] = abs(y_pred['yhat'])\nplt.figure(figsize=(20,5))\nplt.plot(val_y.reset_index(drop=True), label='true')\nplt.plot(y_pred['yhat'].reset_index(drop=True), label='pred')\nplt.legend()\nplt.show()","d442479a":"test_x = test_df.rename({'date_time':'ds'}, axis='columns')\n\nCO_pred = model_CO.predict(test_x)\nBenzene_pred = model_benzene.predict(test_x)\nNO_pred = model_NO.predict(test_x)","c973ea22":"CO_pred['yhat'] = abs(CO_pred['yhat'])\n\nplt.figure(figsize=(20,5))\nplt.plot(CO_pred['yhat'], label = 'Carbon monoxide')\n# plt.plot(Benzene_pred['yhat'], label = 'Benzene')\n# plt.plot(NO_pred['yhat'], label = 'Nitrogen oxide')\nplt.legend()\nplt.show()","623218d6":"results = pd.concat([test_df['date_time'], CO_pred['yhat'], Benzene_pred['yhat'], NO_pred['yhat']], axis=1, ignore_index=True)\nresults.columns = sample_submission.columns","b23a6547":"results.to_csv('submission.csv', index=False)","0e438ffd":"### Model & Training","231f7e69":"### Basic data pre-processing","68a5fce3":"> ### *Open to any suggestions..*","00f69937":"### Libraries","21a6baa2":"### Submission","f4efe0a6":"## Facebook Prophet Baseline as Multivariate Time series Forecasting"}}