{"cell_type":{"29263c44":"code","816fe1dc":"code","d2d8b427":"code","243f01fb":"code","bbb1d828":"code","6b982a69":"code","fb9983cc":"code","5e5e5e17":"code","26f14d5b":"code","79b298ac":"code","8769da67":"code","88b6747b":"markdown","c38034ef":"markdown","fc562f2f":"markdown","50c43ccd":"markdown","34ca9b02":"markdown","ef5198af":"markdown","139892a7":"markdown","bac8c4a1":"markdown","64842c88":"markdown"},"source":{"29263c44":"# Code you have previously used to load data\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Path of the file to read\niowa_file_path = '..\/input\/home-data-for-ml-course\/train.csv'\n\nhome_data = pd.read_csv(iowa_file_path)\ny = home_data.SalePrice\nfeature_columns = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = home_data[feature_columns]\n\n# Specify Model\niowa_model = DecisionTreeRegressor()\n# Fit Model\niowa_model.fit(X, y)\n\nprint(\"First in-sample predictions:\", iowa_model.predict(X.head()))\nprint(\"Actual target values for those homes:\", y.head().tolist())\n\n# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex4 import *\nprint(\"Setup Complete\")","816fe1dc":"y = home_data['SalePrice']\nprint(\"shape:\",X.shape)\n","d2d8b427":"# Import the train_test_split function and uncomment\nfrom sklearn.model_selection import train_test_split\n\n# fill in and uncomment\ntrain_X, val_X, train_y, val_y = train_test_split(X,y,test_size = .25,random_state=1)\n\n# Check your answer\nstep_1.check()","243f01fb":"# The lines below will show you a hint or the solution.\n# step_1.hint() \n# step_1.solution()\n","bbb1d828":"# You imported DecisionTreeRegressor in your last exercise\n# and that code has been copied to the setup code above. So, no need to\n# import it again\n\n# Specify the model\n#iowa_model = DecisionTreeRegressor()\n\n# Fit iowa_model with the training data.\n#iowa_model.fit(X, y)\n\n\n# Specify Model\niowa_model = DecisionTreeRegressor(random_state=1)\n# Fit Model\niowa_model.fit(train_X, train_y)\n\n# Check your answer\nstep_2.check()","6b982a69":" step_2.hint()\n step_2.solution()","fb9983cc":"# Predict with all validation observations\n\n\nval_predictions = iowa_model.predict(val_X)\nprint(mean_absolute_error(val_y, val_predictions))\n\n# Check your answer\nstep_3.check()","5e5e5e17":"# step_3.hint()\n# step_3.solution()","26f14d5b":"# print the top few validation predictions\nprint(val_y.head())\n# print the top few actual prices from validation data\nprint(train_y.head())","79b298ac":"from sklearn.metrics import mean_absolute_error\nval_mae = mean_absolute_error(val_y, val_predictions)\n\n# uncomment following line to see the validation_mae\nprint(val_mae)\n\n# Check your answer\nstep_4.check()","8769da67":"# step_4.hint()\n# step_4.solution()","88b6747b":"Is that MAE good?  There isn't a general rule for what values are good that applies across applications. But you'll see how to use (and improve) this number in the next step.\n\n# Keep Going\n\nYou are ready for **[Underfitting and Overfitting](https:\/\/www.kaggle.com\/dansbecker\/underfitting-and-overfitting).**\n","c38034ef":"What do you notice that is different from what you saw with in-sample predictions (which are printed after the top code cell in this page).\n\nDo you remember why validation predictions differ from in-sample (or training) predictions? This is an important idea from the last lesson.\n\n## Step 4: Calculate the Mean Absolute Error in Validation Data\n","fc562f2f":"Inspect your predictions and actual values from validation data.","50c43ccd":"## Step 2: Specify and Fit the Model\n\nCreate a `DecisionTreeRegressor` model and fit it to the relevant data.\nSet `random_state` to 1 again when creating the model.","34ca9b02":"---\n**[Introduction to Machine Learning Home Page](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning)**\n\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum) to chat with other Learners.*","ef5198af":"## Recap\nYou've built a model. In this exercise you will test how good your model is.\n\nRun the cell below to set up your coding environment where the previous exercise left off.","139892a7":"## Step 3: Make Predictions with Validation data\n","bac8c4a1":"**[Introduction to Machine Learning Home Page](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning)**\n\n---\n","64842c88":"# Exercises\n\n## Step 1: Split Your Data\nUse the `train_test_split` function to split up your data.\n\nGive it the argument `random_state=1` so the `check` functions know what to expect when verifying your code.\n\nRecall, your features are loaded in the DataFrame **X** and your target is loaded in **y**.\n"}}