{"cell_type":{"036e1b0a":"code","88011a21":"code","580bae7c":"code","b4e2fd22":"code","6f0fe392":"code","dbfdcf19":"markdown"},"source":{"036e1b0a":"import sys\nsys.path.append('..\/input\/iterative-stratification\/iterative-stratification-master')\n\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold\nimport pandas as pd\nfrom sklearn.model_selection._split import _BaseKFold","88011a21":"class DrugAwareMultilabelStratifiedKFold(_BaseKFold):\n\n    SAMPLES_PER_EXPERIMENT = 6\n\n    def __init__(self,\n                 max_experiment_cnt=3,\n                 n_splits=3,\n                 shuffle=False,\n                 random_state=None):\n        super().__init__(n_splits=n_splits, \n                         shuffle=shuffle, \n                         random_state=random_state)\n        self._skf = MultilabelStratifiedKFold(n_splits=n_splits, \n                                              shuffle=shuffle, \n                                              random_state=random_state)\n        self.drug_threshold = self.SAMPLES_PER_EXPERIMENT * max_experiment_cnt\n\n    def _iter_test_indices(self, X=None, y=None, groups=None):\n        drug_set = X.merge(y, left_index=True, right_index=True)\n        targets = y.columns\n        vc = X['drug_id'].value_counts()\n        vc1 = vc.loc[vc <= self.drug_threshold].index.sort_values()\n        vc2 = vc.loc[vc > self.drug_threshold].index.sort_values()\n\n        drug_id_to_fold = {}\n        sig_id_to_fold = {}\n        if len(vc1) > 0:\n            tmp = drug_set.groupby('drug_id')[targets].mean().loc[vc1]\n            for fold, (_, idx_val) in enumerate(self._skf.split(tmp, tmp[targets])):\n                drug_id_to_fold.update({k: fold for k in tmp.index[idx_val].values})\n\n        if len(vc2) > 0:\n            tmp = drug_set.loc[drug_set.drug_id.isin(vc2)].reset_index()\n            for fold, (_, idx_val) in enumerate(self._skf.split(tmp, tmp[targets])):\n                sig_id_to_fold.update({k: fold for k in tmp.sig_id[idx_val].values})\n\n        drug_set['fold'] = drug_set.drug_id.map(drug_id_to_fold)\n        unset_folds = drug_set.fold.isna()\n        drug_set.loc[unset_folds, 'fold'] = drug_set.loc[unset_folds].index.map(sig_id_to_fold)\n        test_folds = drug_set.fold.astype('int8').values\n\n        for i in range(self.n_splits):\n            yield test_folds == i","580bae7c":"input_dir = '..\/input\/lish-moa\/'\ntrain_features = pd.read_csv(input_dir + 'train_features.csv').set_index('sig_id')\ntrain_targets_scored = pd.read_csv(input_dir + 'train_targets_scored.csv').set_index('sig_id')\ntrain_drug = pd.read_csv(input_dir + 'train_drug.csv').set_index('sig_id')\ntrain_features = train_features.merge(train_drug, left_index=True, right_index=True)","b4e2fd22":"SEED = 15\n\nsplitter = DrugAwareMultilabelStratifiedKFold(n_splits=5, shuffle=True, random_state=SEED)\ntrain_features.loc[:, 'kfold'] = -1\nfor fold, (_, val) in enumerate(splitter.split(X=train_features, y=train_targets_scored)):\n    train_features.loc[train_features.index[val], 'kfold'] = fold","6f0fe392":"train_features","dbfdcf19":"Based on the new method of cross-validation, proposed at https:\/\/www.kaggle.com\/c\/lish-moa\/discussion\/195195, I have prepared a version compatible with the standard sklearn interface. This makes it easier to use this method when working with different frameworks or when testing different cross-validation algorithms.\n\nNote that after loading the training data, the dataframe must be indexed to \"sig_id\" and train_drug must be merged with train_features.\n\nIn the constructor, there is an optional additional parameter \"max_experiment_cnt\" (default value == 3). If we assume that one experiment consists of 6 samples, then min_experiment_cnt * 6 specifies the maximum number of samples below which a given drug must be assigned to its own fold."}}