{"cell_type":{"0c27c21c":"code","b8271168":"code","c0208d06":"code","9fd1c9e2":"code","9eafd5f2":"code","85134a3b":"code","dae3e97d":"code","c698528a":"code","29452e43":"code","a7ea2455":"code","aaa36339":"code","da1a7dcb":"code","7eb5f56e":"code","3a85a755":"code","ed8d1bc9":"code","79a53fce":"code","00960778":"code","71ac2935":"code","c9ad03eb":"code","7b5d5274":"code","55606a0a":"code","31c5b673":"code","78ae933c":"code","4d5ac628":"code","a30d38bb":"code","9b479da1":"code","5d414c3b":"code","38a0253d":"code","7bb19387":"code","4c03b30c":"code","7b82063e":"markdown","b05fb9c8":"markdown","98c1f230":"markdown","4b840ef5":"markdown","b37442aa":"markdown","bb808d86":"markdown","93fd740c":"markdown","a8996f52":"markdown","d55321ea":"markdown","556de020":"markdown","ea25a604":"markdown","4433b70f":"markdown","c26b6b4a":"markdown","2f3bd487":"markdown","1d9ac045":"markdown","9d8ad29a":"markdown","dbe93698":"markdown","50e429a0":"markdown","7bfb263d":"markdown","21d18ecb":"markdown","31e3f3ae":"markdown","700016ea":"markdown"},"source":{"0c27c21c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b8271168":"# Importing the necessary libraries\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\n%matplotlib inline","c0208d06":"# Loading the Iris Dataset\n\niris = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")","9fd1c9e2":"iris.head()","9eafd5f2":"iris.drop('Id', axis = 1, inplace = True)","85134a3b":"# Dimensions of te Data\n\niris.shape","dae3e97d":"# Statistical summary of all attributes\n\niris.describe()","c698528a":"# To know how many variety of species are present in the data\n\niris.groupby('Species').size()","29452e43":"sb.relplot(x = 'SepalLengthCm', y = 'SepalWidthCm', data = iris, hue = 'Species')","a7ea2455":"sb.relplot(x = 'PetalLengthCm', y = 'PetalWidthCm', data = iris, hue = 'Species')","aaa36339":"sb.relplot(x = 'SepalLengthCm', y = 'SepalWidthCm', hue = 'PetalLengthCm', data = iris, col = 'Species')","da1a7dcb":"sb.relplot(x = 'SepalLengthCm', y = 'SepalWidthCm', hue = 'PetalWidthCm', data = iris, col = 'Species')","7eb5f56e":"sb.catplot(x = 'Species', y = 'SepalLengthCm', data = iris, kind = 'swarm')","3a85a755":"sb.catplot(x = 'Species', y = 'SepalWidthCm', data = iris, kind = 'swarm')","ed8d1bc9":"sb.catplot(x = 'Species', y = 'PetalLengthCm', data = iris, kind = 'swarm')","79a53fce":"sb.catplot(x = 'Species', y = 'PetalWidthCm', data = iris, kind = 'swarm')","00960778":"sb.catplot(x = 'Species', y = 'SepalLengthCm', data = iris, kind = 'box')","71ac2935":"sb.catplot(x = 'Species', y = 'SepalWidthCm', data = iris, kind = 'box')","c9ad03eb":"sb.catplot(x = 'Species', y = 'PetalLengthCm', data = iris, kind = 'box')","7b5d5274":"sb.catplot(x = 'Species', y = 'PetalWidthCm', data = iris, kind = 'box')","55606a0a":"corr = iris.corr(method = 'pearson')\ncorr","31c5b673":"sb.heatmap(corr, xticklabels = corr.columns, yticklabels = corr.columns, annot = True, fmt = '.0%')","78ae933c":"sb.pairplot(data = iris, hue = 'Species', height = 3)","4d5ac628":"# Selecting Dependent and Independent Variables\nX = iris.iloc[:, [1, 3]].values\ny = iris.iloc[:, -1].values","a30d38bb":"from sklearn.preprocessing import LabelEncoder\nspecies_encoder = LabelEncoder()\nspecies_encoder.fit(y)\n\ny = species_encoder.transform(y)","9b479da1":"# Splitting into training and test sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","5d414c3b":"from sklearn import svm, tree\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nclassifier = svm.SVC(gamma = 'auto', kernel = 'rbf')\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\n\nprint(\"Accuracy Score\\t:\\t\", accuracy_score(y_test, y_pred))\nprint(\"Confusion Matrix\\t:\\t\")\nprint(confusion_matrix(y_test, y_pred))","38a0253d":"from matplotlib.pyplot import figure\nfigure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')","7bb19387":"plt.figure(figsize = (10, 7))\n\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n            alpha = 0.75, cmap = ListedColormap(('blue', 'orange', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i,j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n               c = [ListedColormap(('white', 'red', 'black'))(i)], label = j)\n\n\nplt.title('IRIS-Train Set')\nplt.xlabel('Sepal Width')\nplt.ylabel('Petal Width')\nplt.legend()\nplt.show()\nplt.savefig(\"train.png\")","4c03b30c":"plt.figure(figsize = (10, 7))\n\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_test, y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n            alpha = 0.75, cmap = ListedColormap(('blue', 'orange', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i,j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n               c = [ListedColormap(('white', 'red', 'black'))(i)], label = j)\n    \nplt.title('IRIS - Test Set')\nplt.xlabel('Sepal Width')\nplt.ylabel('Petal Width')\nplt.legend()\nplt.show()\n\nplt.savefig(\"test.png\")","7b82063e":"## **Summarizing the data**","b05fb9c8":"- **setosa** has less petal_length\n- **versicolor** has medium petal_length\n- **virginica** has more petal_length","98c1f230":"- **This petal_width column is also a major classifier, which helps us to classify setosa, versicolor and virginica**","4b840ef5":"- **setosa** has less petal_length and less petal_width\n- **versicolor** has medium petal_length and medium petal_width\n- **virginica** has more petal_length and more petal_width","b37442aa":"### Correlation between the columns","bb808d86":"## **Understanding the IRIS dataset**","93fd740c":"- **This petal_length column will be working as the major classifier which clearly classifies all the three types *setosa, versicolor and virginica***","a8996f52":"### Removing the Unwanted columns","d55321ea":"- -----------------------------------------------------------------------------------------------------------------\n- **setosa** has small sepal_length and high sepal_width\n- **versicolor** has medium sepal_length and medium sepal_width\n- **virginica** has high sepal_length and medium sepal_width\n- -----------------------------------------------------------------------------------------------------------------","556de020":"- **setosa** has two outliers and **virginica** has two outliers with respect to sepal_width","ea25a604":"**1. Relational plot**","4433b70f":"- **setosa and versicolor** has one minor outliers with respect to petal_length","c26b6b4a":"**2. Categorical plot**","2f3bd487":"- **virginica** has the outliers with respect to sepal_length","1d9ac045":"- **petal_length and petal_width** has the higest positive correlation of **96%**, so that we can drop anyone of the column inorder to increase the accuracy.\n- **petal_length and sepal_length** has the next highest positive correlation of **87%**, so that we can drop anyone of the column in order to increase the accuracy.\n- **sepal_length and petal_width** has the positive correlation of **82%**.","9d8ad29a":"- **setosa** has minor outlier with respect to petal_width","dbe93698":"# Model creation","50e429a0":"- I hope you enjoyed this quick introduction to some of the quick, simple data visualizations you can create with pandas, seaborn, and matplotlib in Python!\n\n- I encourage you to run through these examples yourself, tweaking them and seeing what happens. From there, you can try applying these methods to a new dataset and incorprating them into your own workflow!\n\n","7bfb263d":"- ***From this we can clearly classify between setosa and virginica by means of sepal_length***","21d18ecb":"- **setosa** has less petal_width\n- **versicolor** has medium petal_width\n- **virginica** has more petal_width","31e3f3ae":"### Checking for Outliers","700016ea":"- ***From this, we can classify setosa and versicolor by means of sepal_width***"}}