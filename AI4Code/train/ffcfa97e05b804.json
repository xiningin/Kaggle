{"cell_type":{"5be4929a":"code","3d12b3d3":"code","915f9566":"code","6e388f4b":"code","a1dd8efd":"code","762fd772":"code","0cdccc84":"code","0faa0843":"code","9e00efea":"code","038365ba":"code","012c0489":"code","8fc02bb5":"code","4ccd58b1":"code","83441462":"code","08843c66":"code","84ec4148":"code","049290eb":"code","3f9060fe":"code","3d7564eb":"code","682a8729":"code","d3edaabe":"code","d57f5604":"code","609f11b7":"code","275bbd50":"code","5aee753d":"code","0da8a546":"code","21e32baa":"code","dfd53e3e":"code","a0dc34f8":"code","64f26641":"code","c1f14b13":"code","c6ff7f5d":"code","cb080ea6":"code","43bc2514":"code","b377ff1e":"code","b02b842b":"code","6c60b1d9":"code","f7fd569c":"code","40253210":"code","acac05d9":"code","195ff06d":"code","47b8addc":"code","7e0ecc91":"code","6689264c":"code","604de2fe":"code","76771f46":"code","a0513f51":"code","718a5a8d":"markdown","9904a68f":"markdown","1fcb66c2":"markdown","f863357f":"markdown","2e76a115":"markdown","d8743154":"markdown","5b201147":"markdown","48f58f2d":"markdown"},"source":{"5be4929a":"import json\nfrom datetime import datetime, timedelta\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)","3d12b3d3":"import plotly.io as pio\n# pio.templates\n# default is \"plotly\"\npio.templates.default = \"plotly_white\"","915f9566":"pd.options.plotting.backend = \"plotly\"","6e388f4b":"df = pd.read_csv(f\"..\/input\/malaysia-covid19-data-apr-2021\/all_2020-03-27_2021-04-15.csv\")\ndf.head()","a1dd8efd":"df.info()","762fd772":"def preprocess_df(df):\n    df.drop(columns='URL', inplace=True)    \n    # must change the date format to datetime\n    df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%y')\n    df['Active Case'] = (df['Cumulative Case'] - df['Cumulative Recovered'] - df['Cumulative Death'])    \n    df.set_index('Date', inplace=True)\n    return df","0cdccc84":"df = preprocess_df(df)\ndf.head()","0faa0843":"rolling_day = 7\ndf['SMA_new'] = df['New Case'].rolling(rolling_day, min_periods=1).mean().round(2)\ndf['SMA_death'] = df['Death'].rolling(rolling_day, min_periods=1).mean().round(2)\ndf['EMA_0.1'] = df['New Case'].ewm(alpha=0.1).mean().round(2)\ndf['EMA_0.3'] = df['New Case'].ewm(alpha=0.3).mean().round(2)","9e00efea":"# fig = px.line(df, x=df.index, y='New Case', title='COVID-19 Malaysia: Confirmed Cases')\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df.index, y=df['New Case'],\n                         line=dict(color='rebeccapurple'),\n                         name='Confirmed'))\nfig.add_trace(go.Scatter(x=df.index, y=df['Recovered'],\n                         line=dict(color='royalblue'),\n                         name='Recovered'))\nfig.add_trace(go.Scatter(x=df.index, y=df['Death'],\n                         line=dict(color='firebrick'),\n                         name='Death'))\nfig.update_layout(title='COVID-19 Malaysia: Daily Cases',\n                  height=600,\n                  # hovermode=\"x unified\",\n                  xaxis_title=None, yaxis_title=None,\n                  legend=dict(\n                      yanchor=\"top\",\n                      y=1.05,\n                      xanchor=\"left\",\n                      x=0.01\n                 ))\nfig.update_layout(\n    hovermode=\"x\",\n    hoverdistance=100, # Distance to show hover label of data point\n    spikedistance=1000, # Distance to show spike\n    xaxis=dict(\n        # linecolor=\"#BCCCDC\",\n        showspikes=True, # Show spike line for X-axis\n        # Format spike\n        spikethickness=2,\n        spikedash=\"dot\",\n        spikecolor=\"#999999\",\n        spikemode=\"across\",\n    )\n)\nfig.update_xaxes(rangeslider_visible=True)\nfig.show()","038365ba":"max_row = df.loc[df['SMA_new'] == df['SMA_new'].max()]\nmax_row","012c0489":"last_row = df.iloc[-1]\nlast_date = last_row.name.strftime(\"%b %d, %Y\")\nlast_date","8fc02bb5":"pct_vs_peak = round((last_row['SMA_new'] \/ max_row['SMA_new'].values[0] * 100), 1)\npct_vs_peak","4ccd58b1":"max_row = df.loc[df['SMA_new'] == df['SMA_new'].max()]\nfig = px.line(df, x=df.index, y='SMA_new', \n              title=f'COVID-19 Malaysia: 7-day Rolling Average of New Cases',\n              labels={'SMA_new': 'Average'}\n             )\nfig.update_layout(xaxis_title=None, yaxis_title=None)\nfig.add_annotation(x=str(max_row.index.values[0]), y=int(max_row['SMA_new'].values[0]),\n                   text=f\"Highest average on {max_row.index.date[0]}\"\n                        f\": {int(max_row['SMA_new'].values[0])}\",\n                   xref=\"x\",\n                   yref=\"y\",\n                   showarrow=True,\n                   font=dict(\n                       family=\"Courier New, monospace\",\n                       size=16,\n                       color=\"#ffffff\"\n                   ),\n                   align=\"center\",\n                   arrowhead=1,\n                   arrowsize=1,\n                   arrowwidth=2,\n                   arrowcolor=\"#636363\",\n                   ax=30,\n                   ay=-35,\n                   bordercolor=\"#c7c7c7\",\n                   borderwidth=2,\n                   borderpad=4,\n                   bgcolor=\"brown\",\n                   standoff=2,\n                   opacity=0.8)\nfig.add_annotation(x=last_row.name, y=int(last_row['SMA_new']),\n                   text=f\"Latest: {int(last_row['SMA_new'])}; \"\n                        f\"{pct_vs_peak}% of the peak average\",\n                   xref=\"x\",\n                   yref=\"y\",\n                   showarrow=True,\n                   font=dict(\n                       family=\"Courier New, monospace\",\n                       size=16,\n                       color=\"#ffffff\"\n                   ),\n                   align=\"center\",\n                   arrowhead=1,\n                   arrowsize=1,\n                   arrowwidth=2,\n                   arrowcolor=\"#636363\",\n                   ax=-25,\n                   ay=-20,\n                   bordercolor=\"#c7c7c7\",\n                   borderwidth=2,\n                   borderpad=4,\n                   bgcolor=\"brown\",\n                   standoff=2,\n                   xanchor='right',\n                   opacity=0.8)\nfig.show()","83441462":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df.index, y=df['New Case'],\n                         # marker_color='royalblue',\n                         line=dict(color='royalblue'),\n                         name='New Case'))\nfig.add_trace(go.Scatter(x=df.index, y=df['SMA_new'],\n                         line=dict(color='coral'),\n                         name='Average'))\nfig.update_layout(title='COVID-19 Malaysia: New Case VS 7-day Moving Average',\n                  xaxis_title=None, yaxis_title=None)\nfig.update_layout(hovermode=\"x unified\",\n                  height=600,\n                  legend=dict(\n                      yanchor=\"top\",\n                      y=1.0,\n                      xanchor=\"left\",\n                      x=0.01\n                 ))\nfig.add_annotation(x=str(max_row.index.values[0]), y=int(max_row['SMA_new'].values[0]),\n                   text=f\"Highest average on {max_row.index.date[0]}\"\n                        f\": {int(max_row['SMA_new'].values[0])}\",\n                   xref=\"x\",\n                   yref=\"y\",\n                   showarrow=True,\n                   font=dict(\n                       family=\"Courier New, monospace\",\n                       size=16,\n                       color=\"#ffffff\"\n                   ),\n                   align=\"center\",\n                   arrowhead=1,\n                   arrowsize=1,\n                   arrowwidth=2,\n                   arrowcolor=\"#636363\",\n                   ax=30,\n                   ay=-35,\n                   bordercolor=\"#c7c7c7\",\n                   borderwidth=2,\n                   borderpad=4,\n                   bgcolor=\"brown\",\n                   standoff=2,\n                   opacity=0.8)\nfig.add_annotation(x=last_row.name, y=int(last_row['SMA_new']),\n                   text=f\"Latest: {int(last_row['SMA_new'])}; \"\n                        f\"{pct_vs_peak}% of the peak average\",\n                   xref=\"x\",\n                   yref=\"y\",\n                   showarrow=True,\n                   font=dict(\n                       family=\"Courier New, monospace\",\n                       size=16,\n                       color=\"#ffffff\"\n                   ),\n                   align=\"center\",\n                   arrowhead=1,\n                   arrowsize=1,\n                   arrowwidth=2,\n                   arrowcolor=\"#636363\",\n                   ax=-25,\n                   ay=-20,\n                   bordercolor=\"#c7c7c7\",\n                   borderwidth=2,\n                   borderpad=4,\n                   bgcolor=\"brown\",\n                   standoff=2,\n                   xanchor='right',\n                   opacity=0.8)\nfig.update_xaxes(rangeslider_visible=True)\n# fig.show(config={\"displayModeBar\": False})\nfig.show()","08843c66":"# fig = px.line(df, x=df.index, y='Cumulative Case', title='COVID-19 Malaysia: Cumulative Confirmed Cases')\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df.index, y=df['Cumulative Case'],\n                         line=dict(color='rebeccapurple'),\n                         name='Confirmed'))\nfig.add_trace(go.Scatter(x=df.index, y=df['Cumulative Recovered'],\n                         line=dict(color='royalblue'),\n                         name='Recovered'))\nfig.add_trace(go.Scatter(x=df.index, y=df['Cumulative Death'],\n                         line=dict(color='firebrick'),\n                         name='Death'))\nfig.update_layout(title='COVID-19 Malaysia: Cumulative Cases',\n                  height=600,\n                  hovermode=\"x unified\",\n                  xaxis_title=None, yaxis_title=None,\n                  legend=dict(\n                      yanchor=\"top\",\n                      y=1.05,\n                      xanchor=\"left\",\n                      x=0.01\n                 ))\nfig.update_yaxes(type='log')\nfig.show()","84ec4148":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df.index, y=df['Death'],\n                         line=dict(color='royalblue'),\n                         name='Death'))\nfig.add_trace(go.Scatter(x=df.index, y=df['SMA_death'],\n                         line=dict(color='coral'),\n                         name='Average'))\nfig.update_layout(title='COVID-19 Malaysia: Daily Death VS 7-day Moving Average')\nfig.update_layout(hovermode=\"x unified\",\n                  legend=dict(\n                      yanchor=\"top\",\n                      y=1.0,\n                      xanchor=\"left\",\n                      x=0.01\n                 ))\n# fig.update_xaxes(rangeslider_visible=True)\nfig.show()","049290eb":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=df.index, y=df['SMA_new'],\n                         line=dict(color='royalblue'),\n                         name='Average'))\nfig.add_trace(go.Scatter(x=df.index, y=df['EMA_0.1'],\n                         line=dict(color='green', dash='dashdot'),\n                         name='EMA - alpha=0.1'))\nfig.add_trace(go.Scatter(x=df.index, y=df['EMA_0.3'],\n                         line=dict(color='firebrick', dash='dashdot'),\n                         name='EMA - alpha=0.3'))\nfig.update_layout(title='COVID-19 Malaysia: 7-day Rolling Average & Exponential Moving Average',\n                  height=500,\n                  legend=dict(\n                      yanchor=\"top\",\n                      y=0.99,\n                      xanchor=\"left\",\n                      x=0.01\n                  )\n                 )\n# fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")\n# fig.update_xaxes(rangeslider_visible=True)\nfig.show()","3f9060fe":"df_m = df.resample(\"M\").sum()\ndf_m.reset_index(inplace=True)\ndf_m.Date = df_m.Date.apply(lambda dt: dt.replace(day=1))\ndf_m = df_m[['Date', 'Recovered', 'New Case', 'Death', 'ICU', 'Ventilator']]\ndf_m.set_index('Date', inplace=True)\ndf_m.head()","3d7564eb":"def style_df(df, axis=0):\n    df_copy = df.copy()\n    df_copy.index = df_copy.index.strftime('%b %Y')\n    df_copy = df_copy.style.background_gradient(cmap='Blues', axis=axis)\n    return df_copy","682a8729":"df_m_style = style_df(df_m)\ndf_m_style","d3edaabe":"def plot_bar(y):\n    fig = px.bar(df_m, x=df_m.index, y=y, text=y, color=y,\n                 title=f'COVID-19 Malaysia: Monthly {y}',\n                 color_continuous_scale='teal')\n    fig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")\n    fig.update_traces(texttemplate='%{text:,}')\n    fig.update_layout(xaxis_title=None, yaxis_title=None,\n                      uniformtext_minsize=8, uniformtext_mode='hide',\n                      coloraxis_showscale=False)\n    fig.show()","d57f5604":"plot_bar('New Case')","609f11b7":"plot_bar('Recovered')","275bbd50":"plot_bar('Death')","5aee753d":"long_df_m = pd.melt(df_m[['New Case', 'Recovered', 'Death']], \n                    var_name='Case', value_name='Number',\n                    ignore_index=False).reset_index()\nlong_df_m['log_number'] = np.log10(long_df_m['Number']).round(4)\nlong_df_m.head()","0da8a546":"fig = px.bar(long_df_m, x='Date', \n             y='Number', color='Case', \n             text='Number',\n             # hover_name='Case', \n             # hover_data={'Number': True, 'Case': False, \n             #             'log_number': False, 'Date': False},\n             color_discrete_sequence=['rebeccapurple', \n                                      'teal', \n                                      'firebrick']\n            )\nfig.update_traces(texttemplate='%{text:,}', \n                  hovertemplate='<b>%{text:,}<\/b>')\nfig.update_layout(title_text='COVID-19 Malaysia: Monthly Cases',\n                  xaxis_title=None, yaxis_title='Log Scale',\n                  uniformtext_minsize=10, barmode='group',\n                  legend=dict(\n                      yanchor=\"top\",\n                      y=1.01,\n                      xanchor=\"left\",\n                      x=0.01\n                  )\n                  # hovermode=\"x unified\"\n                 )\nfig.update_yaxes(type='log')\nfig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")\nfig.show(config={\"displayModeBar\": False, \"showTips\": False})","21e32baa":"dfState = pd.read_csv(f'..\/input\/malaysia-covid19-data-apr-2021\/state_all.csv')\ndfStateCumu = pd.read_csv(f'..\/input\/malaysia-covid19-data-apr-2021\/state_cumu.csv')\n\ndfState.Date = pd.to_datetime(dfState.Date)\ndfStateCumu.Date = pd.to_datetime(dfStateCumu.Date)\n\ndfState.set_index('Date', inplace=True)\ndfStateCumu.set_index('Date', inplace=True)","dfd53e3e":"last_date = df.iloc[-1].name\nlast_date = last_date.strftime('%b %d, %Y')","a0dc34f8":"df_state_total = dfStateCumu.iloc[[-1]].T.reset_index()\ndf_state_total.columns = ['State', 'Confirmed']\ndf_state_total['State_spaced'] = df_state_total['State'] + '  '\ndf_state_total","64f26641":"fig = go.Figure()\nfor col in dfState.columns:\n    fig.add_trace(go.Scatter(x=dfState.index,\n                             y=dfState[col],\n                             name=col,\n                             visible=True\n                            )\n                 )\nfig.update_layout(title='COVID-19 Malaysia: Daily Cases by State', height=600)\nfig.add_annotation(xref='paper',\n                   yref='paper',\n                   x=1, y=1.09,\n                   showarrow=False,\n                   font=dict(\n                       # family=\"Courier New, monospace\",\n                       size=12,\n                       color=\"royalblue\"\n                   ),\n                   text='Tip: Double click a legend to isolate only the state')\nfig.show()","c1f14b13":"fig = px.bar(df_state_total.sort_values('Confirmed'), x='Confirmed', \n             y='State_spaced', text='Confirmed', \n             color='Confirmed',\n             color_continuous_scale='teal', \n             hover_name='State', \n             hover_data={'State_spaced': False, 'Confirmed': False}\n            )\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide',\n                  title=f'COVID-19 Malaysia: Total Cases by {last_date}',\n                  width=700, height=800,\n                  xaxis_title=None, yaxis_title=None,\n                  showlegend=False, coloraxis_showscale=False)\nfig.update_traces(texttemplate='%{text:,}')\nfig.show(config={\"displayModeBar\": False, \"showTips\": False})","c6ff7f5d":"fig = px.pie(df_state_total, values='Confirmed',\n             names='State', height=600,\n             hover_data={'State': False}\n            )\nfig.update_traces(textposition='inside', textinfo='percent+label')\n\nfig.update_layout(\n    title=f'COVID-19 Malaysia: Proportion of Confirmed Cases by {last_date}',\n    title_x = 0.28\n)\n\nfig.show()","cb080ea6":"# only take months to make the plotting faster\ndf_mState = dfState.resample('M').sum().astype(int)\ndf_mState.head()","43bc2514":"df_longStyle = df_mState.copy()\ndf_longStyle = style_df(df_longStyle, axis=1)\ndf_longStyle","b377ff1e":"df_longState = pd.melt(df_mState, \n                    var_name='State', value_name='Monthly Case',\n                    ignore_index=False).reset_index()\ndf_longState.Date = df_longState.Date.apply(lambda x: x.replace(day=1))\ndf_longState.sort_values(['Date', 'State'], ignore_index=True, inplace=True)\ndf_longState.head()","b02b842b":"fig = px.bar(df_longState.loc[df_longState.Date <= '2020-07', :], \n             x='Date', y='Monthly Case', color='State', \n             color_discrete_sequence=px.colors.qualitative.Dark24\n            )\nfig.update_traces(hovertemplate='<b>%{y:,}<\/b>')\nfig.update_layout(title_text='COVID-19 Malaysia: Monthly Cases Mar-Jul 2020',\n                  xaxis_title=None, yaxis_title='Log Scale',\n                  legend_title=None, height=600,\n                  barmode='group'\n                 )\nfig.update_yaxes(type='log')\nfig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")\nfig.show(config={\"displayModeBar\": False, \"showTips\": False})","6c60b1d9":"fig = px.bar(df_longState.loc[(df_longState.Date > '2020-07') & (df_longState.Date <= '2020-12'), :], \n             x='Date', y='Monthly Case', color='State', \n             color_discrete_sequence=px.colors.qualitative.Dark24\n            )\nfig.update_traces(hovertemplate='<b>%{y:,}<\/b>')\nfig.update_layout(title_text='COVID-19 Malaysia: Monthly Cases Aug-Dec 2020',\n                  xaxis_title=None, yaxis_title='Log Scale',\n                  legend_title=None, height=600,\n                  barmode='group'\n                 )\nfig.update_yaxes(type='log')\nfig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")\nfig.show(config={\"displayModeBar\": False, \"showTips\": False})","f7fd569c":"fig = px.bar(df_longState.loc[df_longState.Date > '2020-12', :], \n             x='Date', y='Monthly Case', color='State', \n             color_discrete_sequence=px.colors.qualitative.Dark24\n            )\nfig.update_traces(hovertemplate='<b>%{y:,}<\/b>')\nfig.update_layout(title_text='COVID-19 Malaysia: Monthly Cases 2021',\n                  xaxis_title=None, yaxis_title='Log Scale',\n                  legend_title=None, height=600,\n                  barmode='group'\n                 )\nfig.update_yaxes(type='log')\nfig.update_xaxes(dtick=\"M1\", tickformat=\"%b\\n%Y\")\nfig.show(config={\"displayModeBar\": False, \"showTips\": False})","40253210":"# https:\/\/www.igismap.com\/download-malaysia-shapefile-area-map-free-country-boundary-state-polygon\/\nwith open('..\/input\/malaysia-covid19-data-apr-2021\/malaysia_state_province_boundary.geojson', 'r') as f:\n    msia_geojson = json.load(f)","acac05d9":"state_id_dict = {}\nfor i, feature in enumerate(msia_geojson['features']):\n    feature['id'] = i\n    state_id_dict[feature['properties']['locname']] = i\n# state_id_dict['PULAU PINANG'] = state_id_dict.pop('PENANG')\nprint(state_id_dict)","195ff06d":"correct_state_id = {}\nfor stateName in df_state_total.State:\n    name_to_search = stateName.replace('WP ', '')\n    for k, v in state_id_dict.items():\n        if name_to_search.lower() in k.lower():\n            correct_state_id[stateName] = int(v)","47b8addc":"df_state_total['id'] = df_state_total.State.map(correct_state_id)\ndf_state_total","7e0ecc91":"# Log is not helping the color representation in the figures\n# df_state_total['log_confirmed'] = np.log10(df_state_total['Confirmed'])\n\n# # Get the maximum value to cap displayed values\n# max_log = df_state_total['log_confirmed'].max()\n# max_val = int(max_log) + 1\n\n# # Prepare the range of the colorbar\n# values = [i for i in range(max_val)]\n# ticks = [10**i for i in values]","6689264c":"def plot_choropleth(df):\n    fig = px.choropleth(\n        df,\n        locations=\"id\",\n        geojson=msia_geojson,\n        color=\"Confirmed\",\n        hover_name=\"State\",\n        hover_data={\"id\": False, \"Confirmed\": True},\n        # title=\"Confirmed Cases as of April 15, 2021\",\n        color_continuous_scale=\"YlOrRd\"\n    )\n    fig.update_layout(\n        # title_x = 0.5,\n        geo=dict(\n            showframe = False,\n            showcoastlines = False,\n            # projection_type = 'equirectangular',\n            fitbounds=\"locations\", \n            visible=False\n        )\n    )\n    # fig.update_geos()\n    fig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0}, height=600)\n    fig.show()","604de2fe":"plot_choropleth(df_state_total)","76771f46":"# # Using logarithmic number\n# fig = px.choropleth(\n#     df_state_total,\n#     geojson=msia_geojson,\n#     locations='id',\n#     color='log_confirmed',\n#     hover_name=\"State\",\n#     hover_data={\"id\": False, \"log_confirmed\": False, \"Confirmed\": True},\n#     range_color=(0, max_log),\n#     color_continuous_scale=\"teal\",\n# )\n\n# # Define layout specificities\n# fig.update_layout(\n#     margin={'r':0,'t':0,'l':0,'b':0},\n#     coloraxis_colorbar={\n#         'title': 'Confirmed',\n#         'tickvals': values,\n#         'ticktext': ticks        \n#     },\n#     geo=dict(\n#         showframe = False,\n#         # showcoastlines = True,\n#         # projection_type = 'equirectangular',\n#         fitbounds=\"locations\", \n#         visible=False\n#     )\n# )\n\n# # Display figure\n# fig.show()","a0513f51":"fig = px.choropleth_mapbox(\n    df_state_total,\n    locations=\"id\",\n    geojson=msia_geojson,\n    color=\"Confirmed\",\n    hover_name=\"State\",\n    hover_data={\"id\": False, \"Confirmed\": True},\n    color_continuous_scale=\"YlOrRd\",\n    # range_color=(0, max_log),\n    mapbox_style='open-street-map',\n    zoom=4.5,\n    center={'lat': 4.1, 'lon': 109.4},\n    opacity=0.6\n)\nfig.update_layout(\n    margin={'r':0,'t':0,'l':0,'b':0},\n    # coloraxis_colorbar={\n    #     'title': 'Confirmed',\n    #     'tickvals': values,\n    #     'ticktext': ticks        \n    # }\n)\n    \nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0}, height=600)\nfig.show()","718a5a8d":"## Preprocessing","9904a68f":"## Visualizations","1fcb66c2":"# All data","f863357f":"Imports","2e76a115":"## Monthly State Data","d8743154":"# Choropleth Map","5b201147":"# Monthly data","48f58f2d":"# State data"}}