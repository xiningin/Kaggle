{"cell_type":{"a95ae0fa":"code","aee1f7fc":"code","86f7c7c9":"code","2c0e3dd5":"code","c419c0ed":"code","fe7a67db":"code","660ebc13":"code","9086f967":"code","89626186":"code","5f0f273e":"code","33cbe5c2":"code","181f5046":"code","afb4ba06":"code","44596d18":"code","a6576029":"code","3f3d04de":"code","be9989bf":"markdown","e9aa5815":"markdown","9cc858d1":"markdown","63320d62":"markdown","6fc15595":"markdown","3c02df3f":"markdown","65cea7a5":"markdown","fd38c081":"markdown","b182983b":"markdown","6695e6cd":"markdown","0f58c892":"markdown","86eb1b75":"markdown","4f0f77f5":"markdown","b6e077f1":"markdown","89d155e6":"markdown"},"source":{"a95ae0fa":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport sklearn.metrics as metrics\nfrom sklearn.metrics import silhouette_score\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import AgglomerativeClustering\nfrom scipy.cluster.hierarchy import dendrogram\n\nimport os","aee1f7fc":"def regression_results(y_true, y_pred):\n\n    # Regression metrics\n    explained_variance=metrics.explained_variance_score(y_true, y_pred)\n    mean_absolute_error=metrics.mean_absolute_error(y_true, y_pred) \n    mse=metrics.mean_squared_error(y_true, y_pred) \n    mean_squared_log_error=metrics.mean_squared_log_error(y_true, y_pred)\n    median_absolute_error=metrics.median_absolute_error(y_true, y_pred)\n    r2=metrics.r2_score(y_true, y_pred)\n\n    print('explained_variance: ', round(explained_variance,4))    \n    print('mean_squared_log_error: ', round(mean_squared_log_error,4))\n    print('r2: ', round(r2,4))\n    print('MAE: ', round(mean_absolute_error,4))\n    print('MSE: ', round(mse,4))\n    print('RMSE: ', round(np.sqrt(mse),4))","86f7c7c9":"data = pd.read_csv(\"..\/input\/the-ultimate-halloween-candy-power-ranking\/candy-data.csv\")","2c0e3dd5":"# check for missing values\nprint (\"Data Missing Values\\n\")\nprint (data.isnull().sum())","c419c0ed":"plt.figure(figsize=(10, 8))\nsns.heatmap(round(data.corr(), 2), annot=True, vmin=-1, vmax = +1, linewidths=0.1, annot_kws={\"fontsize\":12})\nplt.show()","fe7a67db":"# linear regression y = winpercent, x = sugarpercent, pricepercent\ny = data[\"winpercent\"]\nX = data[[\"sugarpercent\", \"pricepercent\"]]\n\nlinear_regression_model = LinearRegression(fit_intercept=True)\nlinear_regression_model.fit(X, y)\n\ny_pred = linear_regression_model.predict(X)\nscore = linear_regression_model.score(X, y)\nmse = mean_squared_error(y, y_pred)\n\ncoeffs = pd.DataFrame(linear_regression_model.coef_, X.columns, columns=['coef'])\nintercept  = linear_regression_model.intercept_\n\n# graphics\nfig = plt.figure(figsize=(12,4))\nplt.subplot(1, 2, 1)\nplt.scatter(x=data[\"pricepercent\"], y=data[\"winpercent\"])\n## plot line\nx = np.linspace(0, 1)\ny1 = coeffs.values[1]*x + intercept\nplt.plot(x, y1, \"r-\")\nplt.xlabel(\"pricepercent\")\nplt.ylabel(\"winpercent\")\n\nplt.subplot(1, 2, 2)\nplt.scatter(x=data[\"sugarpercent\"], y=data[\"winpercent\"])\ny2 = coeffs.values[0]*x + intercept\nplt.plot(x, y2, \"r-\")\nplt.xlabel(\"sugarpercent\")\nplt.ylabel(\"winpercent\")\n\nplt.show()\n\n## summarise results\nprint (f'Linear regression results:\\n------------')\nprint (f'{coeffs}')\nprint (f'\\nintercept: {round (intercept, 2)}')\nprint (\"----------\")\nregression_results(y, y_pred)","660ebc13":"# linear regression for categories\ny = data[\"winpercent\"]\nX = data.drop([\"winpercent\", \"competitorname\", \"sugarpercent\", \"pricepercent\"],axis=1)\n\nlinear_regression_model = LinearRegression(fit_intercept=True)\nlinear_regression_model.fit(X, y)\n\ny_pred = linear_regression_model.predict(X)\nscore = linear_regression_model.score(X, y)\nmse = mean_squared_error(y, y_pred)\n\ncoeffs = pd.DataFrame(linear_regression_model.coef_, X.columns, columns=['coef']).sort_values('coef', ascending = False)\nintercept  = linear_regression_model.intercept_\n\n## summarise results\nprint (f'Linear regression results:\\n------------')\nprint (f'{coeffs}')\nprint (f'\\nintercept: {round (intercept, 2)}')\nprint (\"----------\")\nregression_results(y, y_pred)","9086f967":"'''\nPERFECT CANDY (BASED ON ABOVE REGRESSION MODEL)\n\nfruit and chocolate are mutually exclusive. \nChocolate has a bigger effect on winpercent\n\nmain material: \n+ chocolate\n\nadditional:\n+ peanuts and almonds\n+ crispedricewafer\n+ caramel\n+ nougat\n\nform: \n+ bar\n\n'''\nperfect_candy_score = intercept+coeffs.values[0]+coeffs.values[2]+coeffs.values[3]+\\\ncoeffs.values[4]+coeffs.values[5]+coeffs.values[7]\n\nprint (f'Perfect candy score: {round(perfect_candy_score[0], 1)}%')","89626186":"## exploring structure of data\n\nuseful_columns = [\"chocolate\", \"fruity\", \"caramel\", \"peanutyalmondy\", \"nougat\", \"crispedricewafer\", \"hard\", \"bar\", \"pluribus\"]\n\ndata_sorted = data.sort_values('winpercent', ascending = True)\ndata_length = len(data_sorted)\ndivisions = 4\nsegments = []\n\nsegment_values = []\nfinal_values_dict = {}\n\nfor i in range (0, divisions):\n    #segments.append (data_sorted[(i*data_length\/\/divisions):((i+1)*data_length\/\/divisions)])\n    temp_data = data_sorted[(i*data_length\/\/divisions):((i+1)*data_length\/\/divisions)]\n    temp_dict = {}\n    for col in useful_columns:\n        temp_dict[col] = np.sum(temp_data[col])\n    segment_values.append (temp_dict)\n\nx_values = [25, 50, 75, 100]\n\nfor col in useful_columns:\n    value_array = []\n    for val in segment_values:\n        value_array.append(val[col])\n    final_values_dict[col] = value_array","5f0f273e":"# top 25 and bottom 25 %\ntop25 = [float(segment_values[3][k]) for k in useful_columns]\nbottom25 = [float(segment_values[0][k]) for k in useful_columns]\n\nx = np.arange(len(useful_columns))  # the label locations\nwidth = 0.35  # the width of the bars\n\n\nfig, ax = plt.subplots(figsize=(6, 5))\nrects1 = ax.bar(x - width\/2, top25, width, label='top 25%', color=\"#99ff99\")\nrects2 = ax.bar(x + width\/2, bottom25, width, label='bottom 25%', color=\"#ff9999\")\n\n# Add some text for labels, title and custom x-axis tick labels, etc.\nax.set_ylabel('count')\nax.set_title('Characteristics of top and bottom 25%')\nax.set_xticks(x)\nax.set_xticklabels(useful_columns)\nplt.xticks(rotation=90)\nax.legend()\n\nax.bar_label(rects1, padding=3)\nax.bar_label(rects2, padding=3)\n\nfig.tight_layout()\nplt.grid(True)\n\nplt.show()","33cbe5c2":"# pure chocolate bar vs chocolate with something\n\n## calculations\npure_choc_bar = data[(data[\"chocolate\"] == 1) & (data[\"bar\"] == 1) & (data[\"caramel\"] == 0) & \n     (data[\"peanutyalmondy\"] == 0) & (data[\"nougat\"] == 0) & (data[\"crispedricewafer\"] == 0)]\n\nunpure_choc_bar = data[(data[\"chocolate\"] == 1) & (data[\"bar\"] == 1) & ((data[\"caramel\"] == 1) | \n     (data[\"peanutyalmondy\"] == 1) | (data[\"nougat\"] == 1) | (data[\"crispedricewafer\"] == 1))]\n\npure_choc_bar_percent = round(np.sum(pure_choc_bar[\"winpercent\"])\/len(pure_choc_bar), 2)\nunpure_choc_bar_percent = round(np.sum(unpure_choc_bar[\"winpercent\"])\/len(unpure_choc_bar), 2)\n\n\n# pie charts (graphics)\ny_pure = np.array([pure_choc_bar_percent, 100-pure_choc_bar_percent])\ny_unpure = np.array([unpure_choc_bar_percent, 100-unpure_choc_bar_percent])\n\npie_labels = [\"Like\", \"Dislike\"]\n\nfig = plt.figure(figsize=(12,5))\nfig.suptitle('Chocolate bar preference', fontsize=16)\nplt.subplot(1, 2, 1)\n\nplt.title('Pure Chocolate Bar')\nplt.pie(y_pure, labels = pie_labels, startangle = 90, colors=[\"#99ff99\", \"#ff9999\"], autopct='%1.1f%%')\n#draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\nplt.subplot(1, 2, 2)\nplt.title('Chocolate Bar + Extra Things')\nplt.pie(y_unpure, labels = pie_labels, startangle = 90, colors=[\"#99ff99\", \"#ff9999\"], autopct='%1.1f%%')\n#draw circle\ncentre_circle = plt.Circle((0,0),0.70,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\nplt.show() ","181f5046":"# K means clustering to find main combinations\nk_labels = [\"caramel\", \"peanutyalmondy\", \"nougat\", \"crispedricewafer\", \"winpercent\"]\n\ndf = data.drop([\"competitorname\", \"sugarpercent\", \"pricepercent\"],axis=1)\n\ndf = df[(df[\"chocolate\"] == 1) & (df[\"bar\"] == 1) & (df[\"fruity\"] == 0)]\ndf = df[k_labels]\ndf[\"winpercent\"] = df[\"winpercent\"]\/100  # scale to fit categorical data distances\n\ndata_KMeans = df\n\n## unique candy classes\nunique_candy_classes = len(data_KMeans.drop_duplicates())\n\n## elbow method\ndistortions = []\nK = range(1,unique_candy_classes)\nfor k in K:\n    kmeanModel = KMeans(n_clusters=k)\n    kmeanModel.fit(data_KMeans)\n    distortions.append(kmeanModel.inertia_)\n\n## silhouette method\nrange_n_clusters = range(2,unique_candy_classes)\nscores = []\n\nfor n_clusters in range_n_clusters:\n    clusterer = KMeans(n_clusters=n_clusters)\n    preds = clusterer.fit_predict(df)\n    centers = clusterer.cluster_centers_\n\n    score = silhouette_score(df, preds)\n    scores.append(score)\n\n# graphics\nfig = plt.figure(figsize=(12,4))\nfig.suptitle('K-Means', fontsize=16)\n\nplt.subplot(1, 2, 1)\nplt.title('The Elbow Method')\nplt.plot(K, distortions, '+-', color=\"black\")\nplt.xlabel('groups'); plt.ylabel('Distortion'); plt.grid(True)\n\n\nplt.subplot(1, 2, 2)\nplt.title('Silhouette Method')\nplt.plot(range_n_clusters, scores)\nplt.grid(True)\nplt.xlabel(\"no of clusters\")\nplt.ylabel(\"Silhouette score\")\n\nplt.show()","afb4ba06":"kmeanModel = KMeans(n_clusters=9)\nkmeanModel.fit(data_KMeans)\n\ndf = pd.DataFrame (data=np.round(kmeanModel.cluster_centers_, 3), columns=k_labels)\ndf[\"winpercent\"] = df[\"winpercent\"]*100  # unscale winpercent to range 0-100\nprint (\"Main Candy subgroups\\n\")\nprint (df.sort_values(\"winpercent\", ascending=False))","44596d18":"def cbcaw(array): # chocolate_bar_composite_average_winpercent\n    try:\n        selection = data[(data[\"chocolate\"] == 1) & (data[\"bar\"] == 1) & (data[\"caramel\"] == array[0]) & \n         (data[\"peanutyalmondy\"] == array[1]) & (data[\"nougat\"] == array[2]) & \n                         (data[\"crispedricewafer\"] == array[3])]\n    except:\n        return np.nan\n    else:\n        return round(np.sum(selection[\"winpercent\"])\/len(selection), 2)\n    \ndef interpret_structure(array):\n    structure = []\n    if array[0] == 1:\n        structure.append(\"caramel\")\n    if array[1] == 1:\n        structure.append(\"peanutyalmondy\")\n    if array[2] == 1:\n        structure.append(\"nougat\")\n    if array[3] == 1:\n        structure.append(\"crispedricewafer\")\n    return structure\n\ndef evaluate_structure(array):\n    print (f'Structure of candy: {interpret_structure(array)}')\n    print (f'Average win percent of combination: {cbcaw(array)}%')","a6576029":"import itertools\nlst = list(itertools.product([0, 1], repeat=4))\navg_winpercent = []\n\nfor combo in lst:\n    avg_winpercent.append(cbcaw(combo))\n\nmax_index = np.nanargmax(avg_winpercent)\nmax_avg_winpercent = np.nanmax(avg_winpercent)\n\nprint (f'Structure of best candy: {interpret_structure(lst[max_index])}')\nprint (f'Average win percent of combination: {max_avg_winpercent}%')","3f3d04de":"# top 5 best performing candy (according to reported winpercent)\ndata.sort_values('winpercent', ascending = False)[0:5]","be9989bf":"Calculated the average winpercent of all existing combinations within the dataset.\nHighest average winpercent belongs to\n* Chocolate bar\n* Caramel\n* Crisped Rice \/ Wafer\n\nAverage winpercent: 74.3%\n\nResult agrees with K Means analysis.","e9aa5815":"<h1> Data Science - Finding the best candy to bring to the market. <\/h1>","9cc858d1":"The clear winner is chocolate with extra things. Average rating of mixed chocolate was 10% higher than\npure chocolate. \n\nNext: Find best chocolate mix.","63320d62":"Finding number of clusters in data.\nOptimum number of clusters: 9","6fc15595":"Executive Summary\n\nWe analysed a dataset to find what characteristics make up the most liked candy. The most liked characteristics found are:\n\n* Chocolate\n* Bar\n* Caramel\n* Crisped Rice \/ Wafer\nNext steps:\n1. * Investigate shopping patterns of customers\n   * Are they health conscious?\n   * Do they buy what they like, or buy cheaper options?\n2. Combine findings of this study with findings from step 1, to design candy which people will like and will buy\n3. Bring new candy to the market.","3c02df3f":"Best candy according to K-Means analysis:\n* Chocolate (Bar)\n* Caramel\n* Crispedricewafer\n","65cea7a5":"A market study was conducted. 8,371 people voted on whether they like a candy or not.\nOn average, each person rated 32 candies, giving a total of around 269,000 ratings.\n\nA supermarket wants to bring out  new candy, and asked what characteristics the candy should have. We will analyse this information for insights into what people like.","fd38c081":"Question: what is the relationship between winpercent and other variables?","b182983b":"<p>No significant correlation between winpercent and sugarpercent, and winpercent and pricepercent. Can ignore sugarpercent and pricepercent. <\/p>","6695e6cd":"Frequency of different characteristics of best and worst performing candies.\n\nKey Insights:\n* Chocolate appears more often in best performing candy.\n* Fruit more often in disliked candy, so avoid.\n* Best performing candy takes mostly bar form.\n* Hard form appears in bottom candy more often, so avoid.\n\n<p> Find whether pure chocolate is preferred over mixed chocolate. <\/p","0f58c892":"No data cleanup is required.","86eb1b75":"^ Top 5 candies according to winpercent","4f0f77f5":"Linear regression was performed on all features, disregarding sugar and price.\n\nKey insights:\n* Chocolate raises winpercent by 20% on average.\n* Peanuts, caramel, nougat, etc have a positive effect, so composite candy should have higher rating.\n* Chocolate preferred over fruit (they are mutually exclusive).\n\nForm: \n* bar is preferred over hard material (like lollypop).\n* Pluribus has highest rating, but less important than containing mixtures of things, so bar is preferred.\n\nResult\u2026 best candy is\n\nChocolate in bar form, maybe containing\npeanuts\/almonds, crisped rice\/wafer, caramel, nougat","b6e077f1":"^ Correlation Heatmap","89d155e6":"Data disclaimers and validity of results:\n\n* Data was collected by asking people whether or not they like a candy.\n* Not representative of whether they will actually purchase the candy in store.\n* No link between winpercent, sugarpercent and pricepercent was found. Maybe in a real life situation, customers will pay attention to price and sugar content more.\n* Different demographics shop differently. Some health conscious customers might pay more for a candy to contain less sugar, whereas other customers might go for the cheapest candy, irrespective of sugar or composition."}}