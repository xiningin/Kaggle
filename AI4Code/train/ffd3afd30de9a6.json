{"cell_type":{"7fbecb8a":"code","7142b97b":"code","948f5a8b":"code","613958ba":"code","afe2bb0a":"code","d183c5b1":"code","7002c612":"code","3a46b20a":"code","fb7298ed":"code","d0bb4acc":"code","f6b2b747":"code","da6b95ac":"code","44b87de9":"code","d1f0b539":"code","bfefe70f":"code","fb5c2c58":"code","d4125ea5":"code","7375c04c":"code","a1c696fa":"code","c184b0a6":"code","e5189fa6":"code","8ef3ecdd":"code","8081275e":"code","7eb27b5d":"code","dc099a0e":"code","5fa35412":"markdown"},"source":{"7fbecb8a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7142b97b":"import matplotlib.pyplot as plt, seaborn as sns\n\nfrom kmodes.kprototypes import KPrototypes","948f5a8b":"df = pd.read_csv('\/kaggle\/input\/spotify-top-200-charts-20202021\/spotify_dataset.csv')\nspotify = df.copy()\ndf.head()","613958ba":"# All the genres available in the data set are extracted\ngenre = []\nnew_genre = []\n\nfor j in df.index:\n    lst = df.loc[j,'Genre'][1:-1].split(', ')\n    for i in lst:\n        genre.append(i[1:-1])\n        \n\nnew_genre = []\nfor i in genre:\n    if i not in new_genre:\n        new_genre.append(i)\n        \nnew_genre[:10]","afe2bb0a":"# Dummies are created for all genres\nnew = pd.DataFrame()\n\nfor j in df.index:\n    lst = [i[1:-1] for i in df.iloc[j].Genre[1:-1].split(', ')]\n    for k in lst:\n        new.loc[j,k]=1\n        \nnew = new.fillna(0)\n\ndf = pd.concat([df,new], axis=1)","d183c5b1":"df","7002c612":"# Highest charting months and years are extracted from 'Week of Highest Charting'\n\ndf['Week of Highest Charting'] = df['Week of Highest Charting'].apply(lambda x: x.split('--')[0])\n\ndf['Year_Week of Highest Charting'] = pd.to_datetime(df['Week of Highest Charting'])\ndf['Month_Week of Highest Charting'] = pd.to_datetime(df['Week of Highest Charting'])\n\ndf['Year_Week of Highest Charting'] = df['Year_Week of Highest Charting'].dt.year\ndf['Month_Week of Highest Charting'] = df['Month_Week of Highest Charting'].dt.month\n\ndf = df.drop('Week of Highest Charting', axis=1)","3a46b20a":"# Release year is extracted from Release date\ndf['Release Date'] = pd.to_datetime(df['Release Date'], errors='coerce')\ndf['Release Year'] = df['Release Date'].dt.year\ndf = df.drop('Release Date', axis=1)","fb7298ed":"df.Streams = pd.to_numeric(df.Streams.apply(lambda x: x.replace(',','')))\ndf.head()","d0bb4acc":"# Unnecessary columns are dropped\nto_drop = ['Index', 'Song Name', 'Artist', 'Song ID', 'Genre', 'Weeks Charted']\ndf = df.drop(to_drop,axis=1)\ndf.head()","f6b2b747":"# All object type columns are selected which are to be converted to numeric data type\norg = [i for i in df.columns if i not in new_genre]\ncols = df[org].select_dtypes(include=['object']).columns\ncols = [i for i in cols if i not in ['Chord']]\ncols","da6b95ac":"# 'cols' are converted to numeric data type\nfor i in cols:    \n    df[i] = pd.to_numeric(df[i], errors='coerce')","44b87de9":"# Dummies are created for categorical variabes\ncat_var = ['Chord', 'Year_Week of Highest Charting', 'Month_Week of Highest Charting', 'Release Year']\ndf = pd.get_dummies(data=df, columns=cat_var, prefix=cat_var, drop_first=True)\ndf.head()","d1f0b539":"# Numerical and categorical columns are selected\nnum_cols = df.select_dtypes(include=['int64','float64']).columns\ncat_cols = [i for i in df.columns if i not in num_cols]","bfefe70f":"plt.figure(figsize=(20,12))\nfor i in enumerate(cols):\n    plt.subplot(3,4,i[0]+1)\n    sns.violinplot(data=df, x=i[1])\nplt.show()","fb5c2c58":"for i in cols:\n    Q1 = df[i].quantile(0.25)\n    Q3 = df[i].quantile(0.75)\n    IQR = Q3 - Q1\n    upper = Q3 + (1.5*IQR)\n    lower = Q1 - (1.5*IQR)\n    df = df[(df[i]>=lower) & (df[i]<=upper)]","d4125ea5":"plt.figure(figsize=(20,12))\nfor i in enumerate(cols):\n    plt.subplot(3,4,i[0]+1)\n    sns.violinplot(data=df, x=i[1])\nplt.show()","7375c04c":"# Null valued rows are dropped\ndf = df.dropna()\ndf.head()","a1c696fa":"# Index number of categorical variables are selected\ncategorical = [i[0] for i in enumerate(df) if i[1] in cat_cols]","c184b0a6":"# Plotting costs to find the optimal number of clusters\n\nclusters = [2,3,4,5,6,7,8,9,10]\ncosts = []\n\nfor i in clusters:\n    kp = KPrototypes(n_clusters=i, n_init=5)\n    kp.fit_predict(np.array(df), categorical=categorical)\n    costs.append(kp.cost_)\n    \n\nplt.plot(clusters, costs)\nplt.grid(alpha=0.7)\nplt.show()","e5189fa6":"kp = KPrototypes(n_clusters=6, n_init=10, random_state=20)\nkp.fit_predict(np.array(df), categorical=categorical)\ndf['cluster_id'] = kp.labels_","8ef3ecdd":"plt.figure(figsize=(20,12))\nfor i in enumerate(cols):\n    plt.subplot(3,4,i[0]+1)\n    sns.boxplot(x=df['cluster_id'], y=df[i[1]])\n    plt.xlabel(i[1], fontsize=14)\n    plt.ylabel('cluster_id', fontsize=14)\nplt.show()","8081275e":"release = [i for i in df.columns if 'Release' in i]\n\nfor i in np.unique(df.cluster_id):\n    percent = 100*df[df['cluster_id']==i][release].sum()\/df[df['cluster_id']==0][release].sum().sum()\n    plt.figure(figsize=(20,8))\n    percent.plot.bar()\n    plt.title('Cluster {0}'.format(i), fontsize=20)\n    plt.show()","7eb27b5d":"spotify['cluster_id'] = df.cluster_id\nspotify.head()","dc099a0e":"spotify[spotify.cluster_id==2][['Song Name', 'Artist']]","5fa35412":"## Cluster 3 contains the set of music which are most popular and are most recent"}}