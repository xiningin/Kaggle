{"cell_type":{"3c80afa9":"code","d0f664e8":"code","26ce424b":"code","afe593d5":"code","cad4de4c":"code","31fd6661":"code","ff175064":"code","25d751d6":"code","bd9f7dee":"code","b031a027":"code","89a941fd":"code","a3d0dd42":"code","f6799a3e":"code","a6483dff":"code","8c3daced":"code","fecec41a":"code","298e1352":"code","048605c1":"code","8e3b2b6b":"code","6343468a":"code","edf5d65a":"code","85c77b70":"code","2c5851be":"code","ea19ef8a":"code","5689e3b5":"code","d68e3ebe":"code","07c29e58":"code","4ce8a628":"code","dcaf84fb":"code","12f898c6":"code","4cc1db4b":"code","99abd570":"code","63cd72ed":"code","162282cd":"code","08669d2f":"code","f236e951":"code","a2c8ad03":"code","0a161aa3":"code","1e54d39b":"code","a28c1bcf":"code","dda67e16":"code","a6c3829c":"code","ddfbdfd9":"code","afdeee3d":"code","eff0dbc8":"code","321c09d9":"code","490dde59":"code","71f91d7e":"code","6fdfb1e6":"code","4bfa4765":"code","9208d395":"code","824c2cba":"markdown","2218febc":"markdown","31d5a1df":"markdown","28e8db25":"markdown","822cfa55":"markdown","03e86438":"markdown","6097403d":"markdown","50a886a7":"markdown","bf8b3cb3":"markdown","39dbbd65":"markdown","6369a3f0":"markdown","b0511084":"markdown","473a4239":"markdown","56191082":"markdown","f71724ff":"markdown","06944f41":"markdown","325539bf":"markdown","8c0de51c":"markdown","688a0bf8":"markdown","52de2b0d":"markdown","7b9f0f8e":"markdown"},"source":{"3c80afa9":"import numpy as np \nimport pandas as pd \nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold\nimport xgboost\nfrom sklearn import model_selection\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.metrics import f1_score\nimport warnings\nwarnings.filterwarnings('ignore')","d0f664e8":"train= pd.read_csv('..\/input\/hackerearth-ml-challenge-pet-adoption\/train.csv')\ntest= pd.read_csv('..\/input\/hackerearth-ml-challenge-pet-adoption\/test.csv')\npet_id = test['pet_id']","26ce424b":"print(\"Train Shape: \",train.shape)\nprint(\"Test Shape: \", test.shape)\nprint(train.columns)\nprint(test.columns)","afe593d5":"train.head()","cad4de4c":"train.dtypes","31fd6661":"test.head()","ff175064":"test.dtypes","25d751d6":"print('Breed Category :')\nprint(train['breed_category'].value_counts())\nprint()\nprint('Pet Category :')\nprint(train['pet_category'].value_counts())","bd9f7dee":"train.isnull().sum()","b031a027":"test.isnull().sum()","89a941fd":"train['pet_id_new'] = train['pet_id'].str[:7]\ntest['pet_id_new'] = test['pet_id'].str[:7]","a3d0dd42":"print(train.pet_id_new.nunique())\nprint(train.pet_id_new.value_counts())","f6799a3e":"train['issue_date']= pd.to_datetime(train['issue_date'])\ntrain['listing_date']= pd.to_datetime(train['listing_date'])\ntrain.loc[train['listing_date'] < train['issue_date']]","a6483dff":"train.drop([1504, 5301],inplace=True)","8c3daced":"test['issue_date']= pd.to_datetime(test['issue_date'])\ntest['listing_date']= pd.to_datetime(test['listing_date'])\ntest.loc[test['listing_date'] < test['issue_date']]","fecec41a":"train['issue_year'] = train['issue_date'].dt.year\ntrain['issue_month'] = train['issue_date'].dt.month\ntrain['issue_day'] = train['issue_date'].dt.day\n\ntrain['listing_year'] = train['listing_date'].dt.year\ntrain['listing_month'] = train['listing_date'].dt.month\ntrain['listing_day'] = train['listing_date'].dt.day\ntrain['listing_hour'] = train['listing_date'].dt.hour\ntrain['listing_minute'] = train['listing_date'].dt.minute\n\ntest['issue_year'] = test['issue_date'].dt.year\ntest['issue_month'] = test['issue_date'].dt.month\ntest['issue_day'] = test['issue_date'].dt.day\n\ntest['listing_year'] = test['listing_date'].dt.year\ntest['listing_month'] = test['listing_date'].dt.month\ntest['listing_day'] = test['listing_date'].dt.day\ntest['listing_hour'] = test['listing_date'].dt.hour\ntest['listing_minute'] = test['listing_date'].dt.minute","298e1352":"train = train.fillna(-99)\ntest = test.fillna(-99)\nprint(train['condition'].value_counts())\nprint()\nprint(test['condition'].value_counts())","048605c1":"train.groupby(['condition','pet_category']).size()","8e3b2b6b":"train.groupby(['condition', 'breed_category']).size()","6343468a":"cd = pd.DataFrame(train['condition'])\ncd['condition99'] = cd[cd['condition']==-99]\ncd['condition99'] = cd['condition99'].fillna(0)\ncd.condition99[cd.condition99 == -99 ] = 1\nm1 = pd.DataFrame(cd['condition99'])\n\ntt = pd.DataFrame(test['condition'])\ntt['condition99'] = tt[tt['condition']==-99]\ntt['condition99'] = tt['condition99'].fillna(0)\ntt.condition99[tt.condition99 == -99 ] = 1\nt1 = pd.DataFrame(tt['condition99'])\n\ncd = pd.DataFrame(train['condition'])\ncd['condition00'] = cd[cd['condition']==0]\ncd.condition00[cd.condition00 == 0 ] = 1\ncd['condition00'] = cd['condition00'].fillna(0)\nm2 = pd.DataFrame(cd['condition00'])\n\ntt = pd.DataFrame(test['condition'])\ntt['condition00'] = tt[tt['condition']==0]\ntt.condition00[tt.condition00 == 0 ] = 1\ntt['condition00'] = tt['condition00'].fillna(0)\nt2 = pd.DataFrame(tt['condition00'])\n\ncd = pd.DataFrame(train['condition'])\ncd['condition1'] = cd[cd['condition']==1]\ncd['condition1'] = cd['condition1'].fillna(0)\nm3 = pd.DataFrame(cd['condition1'])\n\ntt = pd.DataFrame(test['condition'])\ntt['condition1'] = tt[tt['condition']==1]\ntt['condition1'] = tt['condition1'].fillna(0)\nt3 = pd.DataFrame(tt['condition1'])","edf5d65a":"train = pd.concat([train,m1,m2,m3], axis=1, sort=False)\n\ntest = pd.concat([test,t1,t2,t3], axis=1, sort=False)","85c77b70":"test.condition[test.condition == 1 ] = 0\ntest.condition[test.condition == 0 ] = 0\ntest.condition[test.condition == -99 ] = 0\ntest.condition[test.condition == 2 ] = 1\n\ntrain.condition[train.condition == 1 ] = 0\ntrain.condition[train.condition == 0 ] = 0\ntrain.condition[train.condition == -99 ] = 0\ntrain.condition[train.condition == 2 ] = 1","2c5851be":"train.rename(columns = {'condition':'condition2'}, inplace = True)","ea19ef8a":"print(len(train[train['length(m)'] == 0]))\nprint(len(test[test['length(m)']==0]))","5689e3b5":"train['length(cm)'] = train['length(m)'].apply(lambda x: x*100)\ntest['length(cm)'] = test['length(m)'].apply(lambda x: x*100)\n\ntrain.drop('length(m)', axis=1, inplace=True)\ntest.drop('length(m)', axis=1, inplace=True)","d68e3ebe":"# replace all 0 length with mean of lengths\nval = train['length(cm)'].mean()\ntrain['length(cm)'] = train['length(cm)'].replace(to_replace=0, value=val)\ntest['length(cm)'] = test['length(cm)'].replace(to_replace=0, value=val)","07c29e58":"train[['length(cm)','height(cm)']].describe()","4ce8a628":"train['ratio_len_height'] = train['length(cm)']\/train['height(cm)']\ntest['ratio_len_height'] = test['length(cm)']\/test['height(cm)']","dcaf84fb":"train['X1'].value_counts()","12f898c6":"test['X1'].value_counts()","4cc1db4b":"train['X2'].value_counts()","99abd570":"test['X2'].value_counts()","63cd72ed":"train.drop(['pet_id','issue_date','listing_date'], axis = 1,inplace=True) \n\ntest.rename(columns = {'condition':'condition2'}, inplace = True) \n\ntest.drop(['pet_id','issue_date','listing_date'], axis = 1,inplace=True) ","162282cd":"print(train.columns.shape)\nprint(test.columns.shape)","08669d2f":"print(train.shape)\nprint(test.shape)","f236e951":"df = train.append(test) \ndf.shape","a2c8ad03":"one_hot1 = pd.get_dummies(df['color_type'])\none_hot1.shape","0a161aa3":"one_hot2 = pd.get_dummies(df['pet_id_new'])\none_hot2.shape","1e54d39b":"df = pd.concat([df,one_hot1,one_hot2], axis=1)","a28c1bcf":"df = df.drop(['color_type','pet_id_new'],axis = 1)","dda67e16":"df.shape","a6c3829c":"final_data=df.iloc[:18832]","ddfbdfd9":"final_test=df.iloc[18832:]","afdeee3d":"final_test = final_test.drop(['breed_category','pet_category'],axis = 1)","eff0dbc8":"Y_breed = final_data['breed_category']\nY_pet = final_data['pet_category']\nX = final_data.drop(['breed_category','pet_category'],axis = 1)","321c09d9":"X1_train, X1_test, y1_train, y1_test = train_test_split(X, Y_breed, test_size=0.3, random_state=0)\nX2_train, X2_test, y2_train, y2_test = train_test_split(X, Y_pet, test_size=0.3, random_state=0)","490dde59":"# Balancing Dataset\nsm = SMOTE(random_state=2)\nX1_train_res, y1_train_res = sm.fit_sample(X1_train, y1_train)\nX2_train_res, y2_train_res = sm.fit_sample(X2_train, y2_train)","71f91d7e":"clf1 = LogisticRegression(multi_class='multinomial', random_state=1)\nclf2 = RandomForestClassifier(n_estimators=50, random_state=1)\nclf3 = GaussianNB()\nclf4 = xgboost.XGBClassifier()\neclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3), ('xgb',clf4)], voting='hard')","6fdfb1e6":"eclf1 = eclf.fit(X1_train_res, y1_train_res)\ny1_pred= eclf1.predict(X1_test)\nbreed_pred = eclf1.predict(final_test)\nf1_score(y1_test, y1_pred, average='weighted')","4bfa4765":"eclf2 = eclf.fit(X2_train_res, y2_train_res)\ny2_pred= eclf2.predict(X2_test)\npet_pred = eclf2.predict(final_test)\nf1_score(y2_test, y2_pred, average='weighted')","9208d395":"sub = pd.DataFrame([pet_id,breed_pred,pet_pred])\nsub = sub.transpose().set_index('pet_id')\nsub.rename(columns = {'Unnamed 0':'breed_category','Unnamed 1':'pet_category'}, inplace = True) \nsub.to_csv('submission.csv')","824c2cba":"## Voting Classifier - Pet","2218febc":"We have only one feature with missing values.","31d5a1df":"## Submission","28e8db25":"### Checking for Missing Values","822cfa55":"### Generating Features from Issue_date and Listing_date","03e86438":"## Libraries","6097403d":"<img src=\"https:\/\/media-fastly.hackerearth.com\/media\/hackathon\/hackerearth-machine-learning-challenge-pet-adoption\/images\/b9411a7ed2-PetAdoption_CoverImage.jpg\" width=100%>","50a886a7":"## One-Hot Encoding","bf8b3cb3":"## Loading Data","39dbbd65":"# HackerEarth Machine Learning Challenge 2020- Adopt a Buddy \n### Task - To build a Machine Learning model that determines the type and breed of the animal-based on its physical attributes and other factors.\n### Problem Type -  Multitarget Multiclass Classification\n\n### Dataset link - [Click Here !](https:\/\/www.kaggle.com\/mannsingh\/hackerearth-ml-challenge-pet-adoption)<br>\nThe dataset consists of parameters such as a unique ID assigned to each animal that is up for adoption, the date on which they arrived at the shelter, their physical attributes such as color, length, and height, among other factors.\n\n### This is the Beginner Level Notebook, I'll use some basic concepts of data analysis.<br>Leaderboard score - 89.93 (Top 5%) just by using Voting Classifier !\n### Kindly upvote if you find it helpful \ud83d\udc4d ","6369a3f0":"## Exploratory Data Analysis\n[Reference](https:\/\/www.kaggle.com\/reverie5\/8th-rank-eda-hackerearth-ml-adopt-a-buddy)","b0511084":"### Generating Features from Condition","473a4239":"### Generating Feature from Pet_id\nPet_id is an alphanumeric value. There must be certain pattern behind this id's. We can generate a new feature by slicing the part of id, and using the information hidden in it.","56191082":"### Generating features from length and height","f71724ff":"## [Click here to learn more about Voting Classifier](https:\/\/medium.com\/@sanchitamangale12\/voting-classifier-1be10db6d7a5)","06944f41":"## Modelling","325539bf":"### Analysing X1 and X2","8c0de51c":"## Voting Classifier - Breed","688a0bf8":"### Anamoly Detection ","52de2b0d":"Pets having 0 length :<br>\nTrain - 93 rows<br>\nTest - 44 rows","7b9f0f8e":"1. In Pet Category, we don't have any category of type 3.<br>\n2. Dataset is highly imbalanced."}}