{"cell_type":{"e4e628cc":"code","3515dd72":"code","708828fc":"code","309b9d0e":"code","008914a1":"code","fdd614b5":"code","de909db4":"code","68be5561":"code","762b10ca":"code","3bfd5236":"code","efe5ae05":"code","a493b0de":"code","6d02b814":"code","cddbab28":"code","8f57eced":"code","a5bcd074":"code","8c337cc2":"code","b8ac78df":"code","a091bf64":"code","da1dab2f":"code","c3b9ad0f":"code","5d827f7a":"code","2858f71f":"code","7c89d868":"code","89994d4c":"code","234e493c":"code","14a7dd83":"code","dff2cc7f":"code","9d6686bc":"code","a1917cdd":"code","39e7bc0e":"code","5025bcda":"code","3eb52c3c":"code","26d25eb3":"code","a6d53553":"code","ee9df3ff":"code","5c6ee86a":"code","cf059684":"code","52dbb0f2":"code","954afa2d":"code","828b4b21":"code","36206ba2":"code","823c3f31":"code","01130f9c":"code","9e43efce":"markdown","573432b5":"markdown","5ad170a0":"markdown","28aab568":"markdown","30d642d1":"markdown","f6355851":"markdown","a98ed0e5":"markdown","5803bc42":"markdown","9ecafc7c":"markdown","c35453b4":"markdown","43938058":"markdown","7525ce65":"markdown","d3ebed76":"markdown","595e2a0c":"markdown","0debe40f":"markdown"},"source":{"e4e628cc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3515dd72":"df=pd.read_csv('..\/input\/salary\/Salary.csv')","708828fc":"df.head(15)","309b9d0e":"list(df.columns) #column labels","008914a1":"list(df.index) #row labels","fdd614b5":"df.info()","de909db4":"df.mean()","68be5561":"df.std()","762b10ca":"df.mean()['Salary'] #mean of given","3bfd5236":"df.std()['YearsExperience']","efe5ae05":"type(df.mean())","a493b0de":"type(df.std())","6d02b814":"df.corr()","cddbab28":"df.corr()['YearsExperience']['Salary']","8f57eced":"import matplotlib.pyplot as plt","a5bcd074":"plt.figure()\nplt.hist(df['Salary'])\nplt.title('Histogram of salary using matplotlib')","8c337cc2":"plt.figure()\nplt.hist(df['YearsExperience'])\nplt.title('Histogram of experience using matplotlib')","b8ac78df":"plt.figure()\nplt.plot(df['YearsExperience'],df['Salary'])\nplt.xlabel('Years of experience')\nplt.ylabel('Salary')\nplt.title('Plotting Salary vs. YearsExperience')","a091bf64":"plt.figure()\ndf.plot('YearsExperience','Salary')","da1dab2f":"plt.figure()\ndf['Salary'].plot()\nplt.title('Ploting salary')","c3b9ad0f":"plt.figure()\ndf.hist() #ploting histogram","5d827f7a":"#Probaility density of a colum\n\ndf['Salary'].plot.kde()","2858f71f":"df['YearsExperience'].plot.kde()","7c89d868":"#import from the library the function to split data\nfrom sklearn.model_selection import train_test_split","89994d4c":"X=df['YearsExperience'] #feature, predictor\nY=df['Salary']  #variable to be predicted, labels","234e493c":"result=train_test_split(X,Y,test_size=0.2) #20% of data points for testing","14a7dd83":"len(result)","dff2cc7f":"X_train = result[0] #Predictors from training set\nX_test  = result[1] #Predictors from testing set\nY_train = result[2] #Labels of the training set \nY_test  = result[3] #Labels for the testing set","9d6686bc":"type(X_train)","a1917cdd":"type(Y_train)","39e7bc0e":"X_train.shape","5025bcda":"Y_train.shape","3eb52c3c":"from sklearn.linear_model import LinearRegression","26d25eb3":"lr = LinearRegression()  #create variable containing an\n                         #unitialized linear regression model","a6d53553":"#Transform X_train to n x 1 np.array","ee9df3ff":"xt=X_train.to_numpy() #convert X_train series to np.array\n                      #xt is a 1D array (just a sequence)\n                      #We want xt to be n x 1 array, n is the number of\n                      #data points in the training set\nxt=xt.reshape(-1,1)\n#the same as xt=X_train.to_numpy().reshape(X_train.shape[0],1)","5c6ee86a":"lr.fit(xt,Y_train) #fitting your model to training data.","cf059684":"Ypred=lr.predict(X_test.to_numpy().reshape(-1,1))\n#Use test data to predict the labels, reshape test data in X_test to make\n#a n x 1 array (n rows, 1 column, n is the number of elements of X_test)","52dbb0f2":"Ypred-Y_test","954afa2d":"#Difficult to decide if Ypred-Y_test is large or not\n#Option; visual check\nplt.plot(range(X_test.shape[0]),Y_test,'r', range(X_test.shape[0]),Ypred, 'b')","828b4b21":"#Relative norm of the error:\nnp.linalg.norm(Y_test-Ypred)\/np.linalg.norm(Y_test)","36206ba2":"#Mean square error \nnp.sqrt(np.linalg.norm(Y_test-Ypred)**2\/(Y_test.shape[0]-1))","823c3f31":"df2=pd.read_csv('..\/input\/weight-height\/weight-height.csv')","01130f9c":"df2.info()","9e43efce":"Machine learning, applying linear regression.","573432b5":"Ploting using DataFrame","5ad170a0":"df.corr()  -- pandas DataFrame, it columns and rows are indexed by the column labels of df, the element in the row indexed by x and the column indexed by y is the correlation between the columns x and y of df","28aab568":"Machine learning: learning the model","30d642d1":"df.std() - standard deviation for each column, the same structure as df.mean()","f6355851":"Create pandas data frame from file","a98ed0e5":"Fit the model lr to data","5803bc42":"Now, lr contains the trained model. We have to test using the test set","9ecafc7c":"Basic statistics: mean, standard deviation, correlation\n\nmean: $m_x=\\frac{1}{n} \\sum_{i=1}^{n} x_i$\n\nstandard deviation: $\\sigma_{x} =\\sqrt{\\frac{1}{n-1} \\sum_{i=1}^{n} (x_i-m_x)^2}$\n\n\ncorrelation: $cor_{x,y}=\\frac{\\frac{1}{n-1} \\sum_{i=1}^{n} (x_i-m_x)(y_i-m_y)}{\\sigma_x \\sigma_y}$.","c35453b4":"df.mean() returns a Series indexed by the column indices of df, and\ncontaining the mean for each column","43938058":"Relative error: 8%, quite good","7525ce65":"For the rest, just recopy the code above replace df by df2","d3ebed76":"Splitting the data into training and testing sets","595e2a0c":"Plot histogram, probability, etc. using matplotlib and built in functions of DataFrame","0debe40f":"Step 1: choose a model class, we choose linear regression"}}