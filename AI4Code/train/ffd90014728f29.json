{"cell_type":{"b476bcd3":"code","f489a646":"code","333fdbdd":"code","5e90bcd5":"code","f42b0797":"code","25c2c79c":"code","6049c104":"code","b8bd9782":"code","f8c8946f":"code","c4255563":"code","8448b130":"code","849f9f34":"code","ed303298":"code","93660f52":"code","49336ef1":"code","4216bb38":"code","f1fa955e":"code","5c0a6326":"code","78cae4ff":"code","83b61014":"code","801494a2":"code","9f97cc0c":"code","672ca902":"code","7339cb92":"code","6611920a":"code","83b8019b":"code","6c0a6f2e":"code","9bff9d0b":"code","9a8e9116":"code","bef223a7":"code","1f712ad5":"code","a712032b":"code","998a3684":"code","6e6cfff4":"code","688c279f":"markdown","3a2b1c26":"markdown","dc6ca00f":"markdown","7f8e833a":"markdown","282cebb4":"markdown","3d48d1a6":"markdown","bd77340c":"markdown","64f473e3":"markdown","83c50538":"markdown","9a542fe9":"markdown","0f706160":"markdown","155311d4":"markdown","c4e77761":"markdown","77ee8984":"markdown","8b7282e0":"markdown","01e504fd":"markdown","56edf327":"markdown","16ae5f06":"markdown","9e451020":"markdown","67858841":"markdown","acd7a979":"markdown","0e51ac17":"markdown","70151211":"markdown","8079df08":"markdown","45dbc994":"markdown","77a6a03b":"markdown","96e3a06c":"markdown","04dd5633":"markdown","12405a56":"markdown","5f872cd0":"markdown","4d5b3ff9":"markdown","1fc1dc06":"markdown","00f0384d":"markdown","d6349c1e":"markdown","aa53ac65":"markdown","f04f1a44":"markdown","c49d079a":"markdown","52f5b52b":"markdown"},"source":{"b476bcd3":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom IPython.display import Image  ","f489a646":"Image(\"\/kaggle\/input\/images\/images\/4.PNG\")","333fdbdd":"Image(\"\/kaggle\/input\/images\/images\/2.jpg\")","5e90bcd5":"Image(\"\/kaggle\/input\/images\/images\/3.PNG\")","f42b0797":"# Import the libraries.\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","25c2c79c":"# Read the data.\ndataP2P = pd.read_csv('\/kaggle\/input\/online-p2p-lending\/Master_Loan_Summary.csv')","6049c104":"# HELPER FUNCTIONS\ndef change_dtype(dtype , df , col_names):\n    \"\"\" \n    Set dtype of columns given to the dtype given.\n    Input: dtype= Desired Datatype\n           df = DataFrame\n           col_names = Names of columns we want to change the datatype of.   \n    \"\"\"\n    for col in col_names:\n        df[col] = df[col].astype(dtype)\ndef find_late_payment_statistics(df,col_name):\n    \"\"\"\n    Find the percentage of people who made late payments based on due date categorisation.\n    Input: df = DataFrame for analysis.\n           col_name = The columns which contains days past due date.  \n    Output: A dictionary containing the percentage of people who paid on time, late by 30,45 and 60 days.\n    \"\"\"\n    temp_dict = {'Paid on time':0,'30 days late':0 , '45 days late':0 , '60 days late':0}\n    total = len(df)\n    temp_dict['Paid on time'] = round((len(df[(df[col_name]==0)])\/total) * 100 , 2)\n    temp_dict['30 days late'] = round((len(df[(df[col_name]>0) & (df[col_name]<=30)])\/total) * 100,2)\n    temp_dict['45 days late'] = round((len(df[(df[col_name]>30) & (df[col_name]<=45)])\/total) * 100,2)\n    temp_dict['60 days late'] = round((len(df[(df[col_name]>45) & (df[col_name]<=60)])\/total) * 100 , 2)\n    return temp_dict        \n        ","b8bd9782":"# Change the columns to appropriate datatype and extract month and rows.\nchange_dtype('datetime64' , dataP2P , ['origination_date','last_payment_date','next_payment_due_date'])\ndataP2P['Year'] = dataP2P['origination_date'].apply(lambda x: x.year)\ndataP2P['Month'] = dataP2P['origination_date'].apply(lambda x: x.month)\n\n# For our observations we will take customers with similar account balance i.e less than 2000.\ndataP2P = dataP2P[(dataP2P['amount_borrowed']<2000) & (dataP2P['days_past_due']<=60)]","f8c8946f":"# Find late payment statistics.\nP2P_stat = find_late_payment_statistics(dataP2P, 'days_past_due')\n\n# Plotting the values\nplt.figure(figsize=(12,12))\nsns.barplot(x = list(P2P_stat.keys()) , y = list(P2P_stat.values()))\nplt.title('Percentage of late payments as per days past due.')","c4255563":"# Actual Percentage\nP2P_stat","8448b130":"# Define columns for data-frame and percentage of type of customers.\ncol = ['Date_Issued', 'Due_Date',  'Date_Paid', 'Balance_Days','Customer_Type','No_of_Customers','Rate','Principal' , 'Interest_Per_Person','Total_Interest' , 'Total_Principal']\npercentage_of_customers = {'>15':.62 , '30':.11 , '45':.08 , '60':.16}\n\n# I assume that 3% of people never pay back their loan.","849f9f34":"def calculate_interest_on_revolving_balance(date_issued , due_date , date_paid , amount , rate , si = True, period = 4, balance_date = \"01\", decrement_rate = 5):\n    \"\"\"\n    Function to calculate interest on revolving balance.\n    Input:\n    date_issued: Date the loan was issued.\n    due_date: Due date for the loan.\n    date_paid: Date the loan was paid.\n    amount: Principal amount.\n    rate: Yearly rate of interest.\n    si: Boolean column to determine if Simple interest or compound interest will be calculated.\n    period : compounding period\n    balance_date : balance date in string.\n    decrement_rate: The percentage of loan the customer pays back every month in percentage.\n    Output: Total interest due.\n    \n    \"\"\"\n    # Initialize values\n    total_days = 0\n    days = 0\n    counter = 0\n    interest = 0\n    decrement_rate = decrement_rate\/100\n    rate = rate\/12\n    \n    # Convert the dates to pd.DateTime.\n    date_issued = pd.to_datetime(date_issued)\n    date_paid = pd.to_datetime(date_paid)\n    due_date = pd.to_datetime(due_date)\n    \n    # If paid on time no interest is generated\n    if date_paid == due_date:\n        return 0,0\n    \n    # Generate next_balance date\n    month = date_issued.month\n    year = date_issued.year\n    current_balance_date = get_next_balance_date(month,year , balance_date=balance_date)\n    \n    # Set next balance date as current balance date.\n    next_balance_date = current_balance_date\n    while(date_paid>next_balance_date):\n        if counter == 0:\n            # If due date falls after the current balance date, we need to subtract the current balance date from due date.\n            if (due_date>current_balance_date):\n                # It means I have no outstanding balance in current month.\n                days = 0\n                interest = 0\n            else:\n                days = (current_balance_date - due_date).days\n                total_days += days\n                amount = amount * (1-decrement_rate)\n                \n                # Calculate interest\n                if si == True:\n                    interest = calculate_si_for_one(amount , days, rate)\n                else:\n                    interest = calculate_compound_interest(rate ,amount , days\/365 , period=period )\n                    \n                # Set current balance date as next balance date and find next balance date.   \n                current_month = current_balance_date.month\n                current_year = current_balance_date.year    \n                current_balance_date = next_balance_date\n                next_balance_date = get_next_balance_date(current_month , current_year , balance_date = balance_date)\n                counter += 1\n        else:\n            # Find days due.\n            days = (next_balance_date - current_balance_date).days\n            \n            # Total days due\n            total_days += days\n            \n            # Calculate interest.\n            if si == True:\n                interest += calculate_si_for_one(amount , days, rate)\n            else:\n                interest += calculate_compound_interest(rate ,amount , days\/365 , period=period )\n                        \n                \n            # Set current balance date as next balance date and update next balance date. \n            amount = amount * (1-decrement_rate)\n            current_balance_date = next_balance_date\n            current_month = current_balance_date.month\n            current_year = current_balance_date.year\n            next_balance_date = get_next_balance_date(current_month , current_year , balance_date = balance_date)\n            \n\n    # Check for remaining due days in current_balance_date\n    if (date_paid> current_balance_date):\n        # Find days due for the last month.\n        days = (date_paid-current_balance_date ).days\n        # Total days due\n        total_days += days\n\n        # Amount due.\n        amount = amount * (1-decrement_rate)\n\n        # Calculate interest.\n        if si == True:\n            interest += calculate_si_for_one(amount , days, rate)\n        else:\n            interest += calculate_compound_interest(rate ,amount , days\/365 , period=period )\n            \n    return interest , total_days\n\ndef generate_ledger_si(start_date,late_days, creditfree_days = 15, rate = 15 , type_of_customer = \">15\", percentage_of_customers = percentage_of_customers, amount = 1000 , total_customers=1000 ):\n    \n    \"\"\"\n    This function will create a ledger with the kind of customer given and calculate the interest charged based on the days\n    past due date.\n    Input:\n    start_date: The date when the first loan was issued.\n    late_days: The number of days a person makes payment past the due date.\n    creditfree_days: 15 as provided in the question.\n    rate: Yearly rate of interest.\n    type_of_customer: Type of customer.\n    percentage_of_customers: Dictionary containing the percentage of customers of each kind.\n    amount: Principal Balance.\n    Totat_Customers: Total Number of Customers.\n    Output:\n    Dataframe containing the ledger of a particular kind of customer.\n    \n    \"\"\"\n    counter = 0\n    \n    # Initialize the parameters needed to find the interest\n    temp_dict = dict.fromkeys(col)\n    start_date = pd.to_datetime(start_date)\n    due_date = start_date + np.timedelta64(creditfree_days , 'D')\n    date_paid =  due_date + np.timedelta64(late_days, 'D')\n    start_date , due_date , date_paid\n    interest_for_one , balance_days = calculate_interest_on_revolving_balance(start_date , due_date , date_paid , amount, rate) \n    no_of_customers = find_number_of_customers(type_of_customer , percentage_of_customers , total_customers  )\n    total_principal = no_of_customers * amount \n    \n    # Plug values into first row\n    temp_dict['Date_Issued'] = start_date\n    temp_dict['Due_Date'] = due_date\n    temp_dict['Date_Paid'] = date_paid\n    temp_dict['Customer_Type'] = type_of_customer\n    temp_dict['Rate'] = rate\n    temp_dict['Principal'] = amount\n    temp_dict['Balance_Days'] = balance_days\n    temp_dict['No_of_Customers'] = no_of_customers\n    temp_dict['Interest_Per_Person'] = interest_for_one\n    temp_dict['Total_Interest'] = calculate_interest_for_all(no_of_customers , interest_for_one)\n    temp_dict['Total_Principal'] = total_principal\n    # Populate the df\n    initialized_df = pd.DataFrame([temp_dict])\n    \n    # Set previous date\n    current_date_issued = start_date\n    current_due_date = due_date\n    current_date_paid = date_paid\n    while(counter == 0):\n            # Create a temp_row to append it.\n            temp_row = dict.fromkeys(col)\n            next_date_issued = current_date_paid + np.timedelta64(1,'D')\n            next_due_date = next_date_issued+ np.timedelta64(creditfree_days,'D')\n            next_date_paid = next_due_date+ np.timedelta64(late_days,'D')\n            balance_days = calc_balance_days(next_date_issued , next_due_date , next_date_paid)\n            no_of_customers = find_number_of_customers(type_of_customer , percentage_of_customers , total_customers)\n            interest_for_one = calculate_si_for_one(amount ,balance_days, rate)\n            total_principal = no_of_customers * amount \n            \n            # Append the row\n            temp_row['Date_Issued'] = next_date_issued\n            temp_row['Due_Date'] = next_due_date\n            temp_row['Date_Paid'] = next_date_paid\n            temp_row['Customer_Type'] = type_of_customer\n            temp_row['Rate'] = rate\n            temp_row['Principal'] = amount\n            temp_row['Balance_Days'] = balance_days\n            temp_row['No_of_Customers'] = no_of_customers\n            temp_row['Interest_Per_Person'] = interest_for_one\n            temp_row['Total_Interest'] = calculate_interest_for_all(no_of_customers , interest_for_one)\n            temp_row['Total_Principal'] = no_of_customers * amount\n            \n            # Set the current rows as next rows\n            current_date_issued = next_date_issued\n            current_due_date = next_due_date\n            current_date_paid = next_date_paid\n            \n            #Append the df\n            initialized_df = initialized_df.append([temp_row], ignore_index = True)\n            \n            #Condition to break while loop\n            if next_due_date.year == 2020:\n                counter += 1\n    return initialized_df\n    \n    \ndef str2date(month):\n    \"\"\"\n    It will convert a date given in string to proper format so that it can be used in Pandas Timestamp function.\n    Eg: \"1\" will return \"01\".\n    Input:\n    month: The date in string.\n    Output: The month in proper format.\n    \"\"\"\n    if len(month)==1:\n        month = \"0\" + month\n    return month  \n\ndef get_next_balance_date(month , year, balance_date=\"01\"):\n    \"\"\"\n    It will generate the next balance date which will be used in calculating the days past due.\n    Input:\n    month: Current month of loan issued(Integer).\n    year: Current year of loan issued(Integer).\n    balance_date: The date at which the balance amount is generated(String).\n    Output: \n    The next balance date in Timestamp format.\n    \n    \"\"\"\n    if month<12:\n        return pd.to_datetime(str(year) + \"-\" + str2date(str(month+1))+ \"-\" + balance_date)\n    else:\n        return pd.to_datetime(str(year+1) + \"-\" + str2date(str(1))+ \"-\" + balance_date)\n    \ndef calc_balance_days(date_issued,due_date , date_paid , balance_date = \"01\"):\n    \"\"\"\n    This function will calculate the number of days a person is due based date_issued and date_paid.\n    Input: \n    date_issued: Date the loan was issued.\n    date_paid: Date the loan was paid back.\n    Output:\n    The number of days past due in integer.\n    \"\"\"\n    \n    # Convert the values to pandas.DateTime\n    date_issued = pd.Timestamp(date_issued)\n    date_paid = pd.Timestamp(date_paid)\n    due_date = pd.Timestamp(due_date)\n    \n    # Set the balance days = 0.\n    balance_days = 0\n    \n    # Check if bill was paid on time.\n    if due_date == date_paid:\n        return balance_days\n    \n    # First check if due date is after the balance date.\n    # If I take credit on 1\/01\/19 I will get the balance 01\/02\/19\n    counter = 0\n    issued_month = date_issued.month\n    issued_year = date_issued.year\n    prev_balance_date = next_balance_date =get_next_balance_date(issued_month , issued_year)\n   \n    while(date_paid>next_balance_date):\n        if counter == 0:\n            balance_days = (next_balance_date - due_date).days\n            counter +=1\n        else:\n            balance_days += (next_balance_date - prev_balance_date).days\n        # Increment the month:\n        prev_balance_date = next_balance_date\n        next_balance_date = get_next_balance_date(next_balance_date.month , next_balance_date.year)\n        \n    # Final step\n    balance_days += (date_paid - prev_balance_date).days\n    return balance_days\n\n# Calculate Simple Interest-day-wise\ndef calculate_si_for_one(principal , balance_days , rate):\n    \"\"\"\n    Function which calculates Simple Interest based on yearly interest.\n    Input:\n    Principal: Principal amount.\n    balance_days: Number of days past due.\n    rate: Yearly rate of interest.\n    Output:\n    Simple interest\n    \"\"\"\n    si = principal * balance_days * (rate\/100) * (1\/365)\n    return si\n\ndef calculate_interest_for_all(number_of_customers , interest_for_one):\n    \"\"\"\n    Calculates interest for all the customers based on the number of customers.\n    \"\"\"\n    return number_of_customers * interest_for_one\n\ndef find_number_of_customers(type_of_customer , dict_customer_percentage , total_customers):\n    \"\"\"\n    Find the number of customers of a given type.\n    \"\"\"\n    return dict_customer_percentage[type_of_customer] * total_customers","ed303298":"# Create the ledger for different customers.\npercentage_of_customers = {'>15':.62 , '30':.11 , '45':.08 , '60':.16}\ncustomer_15 = generate_ledger_si(\"2017-12-17\", late_days=0 , rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_30 = generate_ledger_si(\"2017-12-17\", late_days=30 ,type_of_customer='30' , rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_45 = generate_ledger_si(\"2017-12-17\", late_days=45, type_of_customer='45', rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_60 = generate_ledger_si(\"2017-12-17\", late_days=60, type_of_customer='60', rate=180, percentage_of_customers= percentage_of_customers)\n\n# # As we don't issue another loan to customers who paid 60 days after due date we remove them.\ncustomer_60 = pd.DataFrame(customer_60[:1])\n\n# Concatenate them to a dataframe.\nsi_df = pd.concat([customer_15, customer_30 , customer_45, customer_60] , ignore_index=True)","93660f52":"# Display the dataframe.\nsi_df","49336ef1":"principal_invested = si_df['Total_Principal'].sum()\ninterest_earned = si_df['Total_Interest'].sum()\n\n# Calculate the money lost due to .03% of the customers who never paid back.\nmoney_lost = .03 * 1000 * 1000\n\n# Calculate the amount went in generating cards for every customer.\ncost_of_cards = 25 * 1000\n\n# The money paid to the credit company by the organization for issuing the card.\nmoney_per_card = 10 * 1000\n\n# Money paid to the bank by the credit card company for the principal.\nmoney_paid_to_bank = .065 * 1000 * 1000\n\n# Calculate total principal.\ntotal_principal = money_lost + principal_invested + cost_of_cards + money_paid_to_bank\n\n# Calculate total returns.\nreturns = principal_invested + money_per_card + interest_earned\n\n# Calculate the profit\/loss %.\ndiff = returns - total_principal\ncalc_percentage = diff\/total_principal * 100\n\nif calc_percentage<0:\n    print('The credit card company could not break even.')\n    print('It incurred a loss of ' , round(calc_percentage,2) , '%.')\n    print('Loss suffered is ', diff)\nelse:\n    print('The credit card company made a profit.')\n    print('It made a profit of  ' , round(calc_percentage,2) , '%.')\n    print('Profit made is ', diff)","4216bb38":"# Create the ledger for different customers.\npercentage_of_customers = {'>15':.62 , '30':.11 , '45':.08 , '60':.16}\ncustomer_15 = generate_ledger_si(\"2017-12-17\", late_days=0 , amount = 2000  , rate=180)\ncustomer_30 = generate_ledger_si(\"2017-12-17\", late_days=30 ,type_of_customer='30' , amount = 2000, rate=180)\ncustomer_45 = generate_ledger_si(\"2017-12-17\", late_days=45, type_of_customer='45' ,  amount = 2000, rate=180)\ncustomer_60 = generate_ledger_si(\"2017-12-17\", late_days=60, type_of_customer='60',  amount = 2000, rate=180)\n\n# # As we don't issue another loan to customers who paid 60 days after due date we remove them.\ncustomer_60 = pd.DataFrame(customer_60[:1])\n\n# Concatenate them to a dataframe.\nsi_df = pd.concat([customer_15, customer_30 , customer_45, customer_60] , ignore_index=True)","f1fa955e":"# Display the dataframe.\nsi_df","5c0a6326":"principal_invested = si_df['Total_Principal'].sum()\ninterest_earned = si_df['Total_Interest'].sum()\n\n# Calculate the money lost due to .03% of the customers who never paid back.\nmoney_lost = .03 * 1000 * 2000\n\n# Calculate the amount went in generating cards for every customer.\ncost_of_cards = 25 * 1000\n\n# The money paid to the credit company by the organization for issuing the card.\nmoney_per_card = 10 * 1000\n\n# Money paid to the bank by the credit card company for the principal.\nmoney_paid_to_bank = .065 * 1000 * 2000\n\n# Calculate total principal.\ntotal_principal = money_lost + principal_invested + cost_of_cards + money_paid_to_bank\n\n# Calculate total returns.\nreturns = principal_invested + money_per_card + interest_earned\n\n# Calculate the profit\/loss %.\ndiff = returns - total_principal\ncalc_percentage = diff\/total_principal * 100\n\nif calc_percentage<0:\n    print('The credit card company could not break even.')\n    print('It incurred a loss of ' , round(calc_percentage,2) , '%.')\n    print('Loss suffered is ', diff)\nelse:\n    print('The credit card company made a profit.')\n    print('It made a profit of  ' , round(calc_percentage,2) , '%.')\n    print('Profit made is ', diff)","78cae4ff":"# Create the ledger for different customers.\npercentage_of_customers = {'>15':.62 , '30':.11 , '45':.08 , '60':.16}\ncustomer_15 = generate_ledger_si(\"2017-12-17\", late_days=0 , rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_30 = generate_ledger_si(\"2017-12-17\", late_days=30 ,type_of_customer='30' , rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_45 = generate_ledger_si(\"2017-12-17\", late_days=45, type_of_customer='45', rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_60 = generate_ledger_si(\"2017-12-17\", late_days=60, type_of_customer='60', rate=180, percentage_of_customers= percentage_of_customers)\n\n# # As we don't issue another loan to customers who paid 60 days after due date we remove them.\ncustomer_60 = pd.DataFrame(customer_60[:1])\n\n# Concatenate them to a dataframe.\nsi_df = pd.concat([customer_15, customer_30 , customer_45, customer_60] , ignore_index=True)","83b61014":"principal_invested = si_df['Total_Principal'].sum()\ninterest_earned = si_df['Total_Interest'].sum()\n\n# Calculate the money lost due to .03% of the customers who never paid back.\nmoney_lost = .03 * 1000 * 1000\n\n# Calculate the amount went in operating cost of cards for every customer.\ncost_of_cards = 50 * 1000\n\n# The money paid to the credit company by the organization for buying the customers.\nmoney_per_card = 20 * 1000\n\n# Money paid to the bank by the organization is zero as it can issue loans from its own funds.\nmoney_paid_to_bank = 0\n\n# Calculate total principal.\ntotal_principal = money_lost + principal_invested + cost_of_cards + money_paid_to_bank\n\n# Calculate total returns.\nreturns = principal_invested + money_per_card + interest_earned\n\n# Calculate the profit\/loss %.\ndiff = returns - total_principal\ncalc_percentage = diff\/total_principal * 100\n\nif calc_percentage<0:\n    print('The company could not break even.')\n    print('It incurred a loss of ' , round(calc_percentage,2) , '%.')\n    print('Loss suffered is ', diff)\nelse:\n    print('The company made a profit.')\n    print('It made a profit of  ' , round(calc_percentage,2) , '%.')\n    print('Profit made is Rs ', diff)","801494a2":"percentage_of_customers = {'>15':.90 , '30':.00 , '45':.00 , '60':.05}\n# Create the ledger for different customers.\ncustomer_15 = generate_ledger_si(\"2017-12-17\", late_days=0 , rate=180 , percentage_of_customers= percentage_of_customers)\ncustomer_30 = generate_ledger_si(\"2017-12-17\", late_days=30 ,type_of_customer='30' , rate=180 , percentage_of_customers= percentage_of_customers)\ncustomer_45 = generate_ledger_si(\"2017-12-17\", late_days=45, type_of_customer='45', rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_60 = generate_ledger_si(\"2017-12-17\", late_days=60, type_of_customer='60', rate=180, percentage_of_customers= percentage_of_customers)\n\n# # As we don't issue another loan to customers who paid 60 days after due date we remove them.\ncustomer_60 = pd.DataFrame(customer_60[:1])\n\n# Concatenate them to a dataframe.\nsi_df = pd.concat([customer_15, customer_30 , customer_45, customer_60] , ignore_index=True)\n\nprincipal_invested = si_df['Total_Principal'].sum()\ninterest_earned = si_df['Total_Interest'].sum()\n\n# Calculate the money lost due to .03% of the customers who never paid back.\nmoney_lost = .10 * 1000 * 1000\n\n# Calculate the amount went in operating cost of cards for every customer.\ncost_of_cards = 25 * 1000\n\n# The money paid to the credit company by the organization for buying the customers.\nmoney_per_card = 20 * 1000\n\n# Money paid to the bank by the organization is zero as it can issue loans from its own funds.\nmoney_paid_to_bank = 0\n\n# Calculate total principal.\ntotal_principal = money_lost + principal_invested + cost_of_cards + money_paid_to_bank\n\n# Calculate total returns.\nreturns = principal_invested + money_per_card + interest_earned\n\n# Calculate the profit\/loss %.\ndiff = returns - total_principal\ncalc_percentage = diff\/total_principal * 100\n\nif calc_percentage<0:\n    print('The company could not break even.')\n    print('It incurred a loss of ' , round(calc_percentage,2) , '%.')\n    print('Loss suffered is ', diff)\nelse:\n    print('The company made a profit.')\n    print('It made a profit of  ' , round(calc_percentage,2) , '%.')\n    print('Profit made is Rs ', diff)","9f97cc0c":"# Create the ledger for different customers.\npercentage_of_customers = {'>15':.62 , '30':.11 , '45':.08 , '60':.16}\ncustomer_15 = generate_ledger_si(\"2017-12-17\", late_days=0 , rate=10, percentage_of_customers= percentage_of_customers)\ncustomer_30 = generate_ledger_si(\"2017-12-17\", late_days=30 ,type_of_customer='30' , rate=10, percentage_of_customers= percentage_of_customers)\ncustomer_45 = generate_ledger_si(\"2017-12-17\", late_days=45, type_of_customer='45', rate=10, percentage_of_customers= percentage_of_customers)\ncustomer_60 = generate_ledger_si(\"2017-12-17\", late_days=60, type_of_customer='60', rate=10, percentage_of_customers= percentage_of_customers)\n\n# # As we don't issue another loan to customers who paid 60 days after due date we remove them.\ncustomer_60 = pd.DataFrame(customer_60[:1])\n\n# Concatenate them to a dataframe.\nsi_df = pd.concat([customer_15, customer_30 , customer_45, customer_60] , ignore_index=True)\n\nprincipal_invested = si_df['Total_Principal'].sum()\ninterest_earned = si_df['Total_Interest'].sum()\n\n# Calculate the money lost due to .03% of the customers who never paid back.\nmoney_lost = .03 * 1000 * 1000\n\n# Calculate the amount went in operating cost of cards for every customer.\ncost_of_cards = 25 * 1000\n\n# The money paid to the credit company by the organization for buying the customers.\nmoney_per_card = 20 * 1000\n\n# Money paid to the bank by the organization is zero as it can issue loans from its own funds.\nmoney_paid_to_bank = 0\n\n# Calculate total principal.\ntotal_principal = money_lost + principal_invested + cost_of_cards + money_paid_to_bank\n\n# Calculate total returns.\nreturns = principal_invested + money_per_card + interest_earned\n\n# Calculate the profit\/loss %.\ndiff = returns - total_principal\ncalc_percentage = diff\/total_principal * 100\n\nif calc_percentage<0:\n    print('The company could not break even.')\n    print('It incurred a loss of ' , round(calc_percentage,2) , '%.')\n    print('Loss suffered is ', diff)\nelse:\n    print('The company made a profit.')\n    print('It made a profit of  ' , round(calc_percentage,2) , '%.')\n    print('Profit made is Rs ', diff)","672ca902":"# Create the ledger for different customers.\npercentage_of_customers = {'>15':.62 , '30':.11 , '45':.08 , '60':.16}\ncustomer_15 = generate_ledger_si(\"2017-12-17\", late_days=0 , rate=15, percentage_of_customers= percentage_of_customers)\ncustomer_30 = generate_ledger_si(\"2017-12-17\", late_days=30 ,type_of_customer='30' , rate=15, percentage_of_customers= percentage_of_customers)\ncustomer_45 = generate_ledger_si(\"2017-12-17\", late_days=45, type_of_customer='45', rate=15, percentage_of_customers= percentage_of_customers)\ncustomer_60 = generate_ledger_si(\"2017-12-17\", late_days=60, type_of_customer='60', rate=15, percentage_of_customers= percentage_of_customers)\n\n# # As we don't issue another loan to customers who paid 60 days after due date we remove them.\ncustomer_60 = pd.DataFrame(customer_60[:1])\n\n# Concatenate them to a dataframe.\nsi_df = pd.concat([customer_15, customer_30 , customer_45, customer_60] , ignore_index=True)\n\nprincipal_invested = si_df['Total_Principal'].sum()\ninterest_earned = si_df['Total_Interest'].sum()\n\n# Calculate the money lost due to .03% of the customers who never paid back.\nmoney_lost = .03 * 1000 * 1000\n\n# Calculate the amount went in operating cost of cards for every customer.\ncost_of_cards = 50 * 1000\n\n# The money paid to the credit company by the organization for buying the customers.\nmoney_per_card = 20 * 1000\n\n# Money paid to the bank by the organization is zero as it can issue loans from its own funds.\nmoney_paid_to_bank = 0\n\n# Calculate total principal.\ntotal_principal = money_lost + principal_invested + cost_of_cards + money_paid_to_bank\n\n# Calculate total returns.\nreturns = principal_invested + money_per_card + interest_earned\n\n# Calculate the profit\/loss %.\ndiff = returns - total_principal\ncalc_percentage = diff\/total_principal * 100\n\nif calc_percentage<0:\n    print('The company could not break even.')\n    print('It incurred a loss of ' , round(calc_percentage,2) , '%.')\n    print('Loss suffered is ', diff)\nelse:\n    print('The company made a profit.')\n    print('It made a profit of  ' , round(calc_percentage,2) , '%.')\n    print('Profit made is Rs ', diff)","7339cb92":"def calculate_monthly_amount(amount , increment_rate = 5):\n    \n    \"\"\"\n    This function returns the monthly amount based on month on month increment rate.\n    Input:\n    amount: amount to increment.\n    increment_rate: month on month growth rate.\n    Output:\n    Dictionary containing monthly amounts.\n    \"\"\"\n    \n    temp_dict = {1:amount , 2:0 , 3:0 , 4:0 , 5:0 , 6:0 , 7:0 , 8:0 , 9:0 , 10:0 , 11:0 , 12:0 ,13:0}\n    for m in range(2,14):\n        new_amount = round(amount * (1+ increment_rate\/100) , 2)\n        temp_dict[m] = new_amount\n        amount = new_amount\n        \n    return temp_dict\n\ndef calculate_compound_interest(rate_yearly, amount , time_in_year , period = 4):\n    \n    \"\"\"\n    Function to calculate compound interest.\n    Input:\n    rate_yearly: Yearly rate of interest.\n    amount: Principal.\n    time_in_year: Time given in years.\n    period: semi-anually , quarterly etc.\n    Output:\n    Returns compound interest.\n    \"\"\"\n    a = rate_yearly\/(period * 100)\n    b = 1 + a\n    nt = period * time_in_year\n    total_amount = amount * b**nt\n    total_interest = total_amount - amount \n    return total_interest\n\ndef generate_ledger_ci(start_date,late_days, creditfree_days = 15, rate = 15 , type_of_customer = \">15\", percentage_of_customers = percentage_of_customers, amount = 1000 , total_customers=1000 ):\n    \n    \"\"\"\n    This function will create a ledger with the kind of customer given and calculate the compound interest charged based on the days\n    past due date.\n    Input:\n    start_date: The date when the first loan was issued.\n    late_days: The number of days a person makes payment past the due date.\n    creditfree_days: 15 as provided in the question.\n    rate: Yearly rate of interest.\n    type_of_customer: Type of customer.\n    percentage_of_customers: Dictionary containing the percentage of customers of each kind.\n    amount: Principal Balance.\n    Totat_Customers: Total Number of Customers.\n    Output:\n    Dataframe containing the ledger of a particular kind of customer.\n    \n    \"\"\"\n    # Initialize a counter\n    counter = 0\n    \n    # Initialize the parameters needed to find the interest\n    temp_dict = dict.fromkeys(col)\n    start_date = pd.to_datetime(start_date)\n    due_date = start_date + np.timedelta64(creditfree_days , 'D')\n    date_paid =  due_date + np.timedelta64(late_days, 'D')\n    no_of_customers = find_number_of_customers(type_of_customer , percentage_of_customers , total_customers  )\n    month_loan_issued = start_date.month\n    amount_dict = calculate_monthly_amount(amount)\n    monthly_amount = amount_dict[month_loan_issued]\n    interest_for_one , balance_days = calculate_interest_on_revolving_balance(start_date , due_date , date_paid , monthly_amount , 180, si = 'False' )\n    total_principal = no_of_customers * monthly_amount \n    \n    # Append the dictionary as dataframe.\n    temp_dict['Date_Issued'] = start_date\n    temp_dict['Due_Date'] = due_date\n    temp_dict['Date_Paid'] = date_paid\n    temp_dict['Customer_Type'] = type_of_customer\n    temp_dict['Rate'] = rate\n    temp_dict['Principal'] = amount\n    temp_dict['Balance_Days'] = balance_days\n    temp_dict['No_of_Customers'] = no_of_customers\n    temp_dict['Interest_Per_Person'] = interest_for_one\n    temp_dict['Total_Interest'] = calculate_interest_for_all(no_of_customers , interest_for_one)\n    temp_dict['Total_Principal'] = no_of_customers * amount\n    ledger_df = pd.DataFrame([temp_dict])\n    \n    # Initialize previous dates for creating other rows.\n    prev_date_issued = start_date\n    prev_due_date = due_date\n    previous_date_paid = date_paid\n    \n    # Create the rest of df\n    while(counter == 0):\n        # Create a temp_row to append it and initialize the values.\n            temp_row = dict.fromkeys(col)\n            new_date_issued = previous_date_paid + np.timedelta64(1,'D')\n            new_due_date = new_date_issued + np.timedelta64(creditfree_days , 'D')\n            new_date_paid = new_due_date + np.timedelta64(late_days , 'D')\n            balance_days = calc_balance_days(new_date_issued , new_due_date , new_date_paid)\n            if new_due_date.year != 2020:\n                month_loan_issued = new_date_issued.month\n            else:\n                month_loan_issued = 13 \n            monthly_amount = amount_dict[month_loan_issued]\n            interest_for_one = calculate_compound_interest(rate , monthly_amount , (balance_days\/(30*12)))\n\n            total_principal = no_of_customers * amount\n   \n        # Append the row\n            temp_row['Date_Issued'] = new_date_issued\n            temp_row['Due_Date'] = new_due_date\n            temp_row['Date_Paid'] = new_date_paid\n            temp_row['Customer_Type'] = type_of_customer\n            temp_row['Rate'] = rate\n            temp_row['Principal'] = monthly_amount\n            temp_row['Balance_Days'] = balance_days\n            temp_row['No_of_Customers'] = no_of_customers\n            temp_row['Interest_Per_Person'] = interest_for_one\n            temp_row['Total_Interest'] = calculate_interest_for_all(no_of_customers , interest_for_one)\n            temp_row['Total_Principal'] = no_of_customers * amount\n            \n            # Set the current rows as latest rows\n            \n            prev_date_issued = new_date_issued\n            prev_due_date = new_due_date\n            previous_date_paid = new_date_paid\n            \n            #Append the df\n            ledger_df = ledger_df.append([temp_row], ignore_index = True)\n            \n            #Condition to break while loop\n            if (new_due_date.year == 2020):\n                counter += 1\n    return ledger_df\n\n\n","6611920a":"# Create the ledger for different customers.\npercentage_of_customers = {'>15':.62 , '30':.11 , '45':.08 , '60':.16}\ncustomer_15 = generate_ledger_ci(\"2017-12-17\", late_days=0 , rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_30 = generate_ledger_ci(\"2017-12-17\", late_days=30 ,type_of_customer='30' , rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_45 = generate_ledger_ci(\"2017-12-17\", late_days=45, type_of_customer='45', rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_60 = generate_ledger_ci(\"2017-12-17\", late_days=60, type_of_customer='60', rate=180, percentage_of_customers= percentage_of_customers)\n\n# # As we don't issue another loan to customers who paid 60 days after due date we remove them.\ncustomer_60 = pd.DataFrame(customer_60[:1])\n\n# Concatenate them to a dataframe.\nci_df = pd.concat([customer_15, customer_30 , customer_45, customer_60] , ignore_index=True)","83b8019b":"principal_invested = ci_df['Total_Principal'].sum()\ninterest_earned = ci_df['Total_Interest'].sum()\n\n# Calculate the money lost due to .03% of the customers who never paid back.\nmoney_lost = .03 * 1000 * 1000\n\n# Calculate the amount went in operating cost of cards for every customer.\ncost_of_cards = 25 * 1000\n\n# The money paid to the credit company by the organization for buying the customers.\nmoney_per_card = 20 * 1000\n\n# Money paid to the bank by the organization is zero as it can issue loans from its own funds.\nmoney_paid_to_bank = 0\n\n# Calculate total principal.\ntotal_principal = money_lost + principal_invested + cost_of_cards + money_paid_to_bank\n\n# Calculate total returns.\nreturns = principal_invested + money_per_card + interest_earned\n\n# Calculate the profit\/loss %.\ndiff = returns - total_principal\ncalc_percentage = diff\/total_principal * 100\n\nif calc_percentage<0:\n    print('The company could not break even.')\n    print('It incurred a loss of ' , round(calc_percentage,2) , '%.')\n    print('Loss suffered is ', diff)\nelse:\n    print('The company made a profit.')\n    print('It made a profit of  ' , round(calc_percentage,2) , '%.')\n    print('Profit made is Rs ', diff)","6c0a6f2e":"# Create the ledger for different customers.\npercentage_of_customers = {'>15':.62 , '30':.11 , '45':.08 , '60':.16}\ncustomer_15 = generate_ledger_ci(\"2017-12-17\", late_days=0 , amount = 2000  , rate=180)\ncustomer_30 = generate_ledger_ci(\"2017-12-17\", late_days=30 ,type_of_customer='30' , amount = 2000, rate=180)\ncustomer_45 = generate_ledger_ci(\"2017-12-17\", late_days=45, type_of_customer='45' ,  amount = 2000, rate=180)\ncustomer_60 = generate_ledger_ci(\"2017-12-17\", late_days=60, type_of_customer='60',  amount = 2000, rate=180)\n\n# # As we don't issue another loan to customers who paid 60 days after due date we remove them.\ncustomer_60 = pd.DataFrame(customer_60[:1])\n\n# Concatenate them to a dataframe.\nci_df = pd.concat([customer_15, customer_30 , customer_45, customer_60] , ignore_index=True)\n\n# Display the dataframe.\nci_df","9bff9d0b":"principal_invested = ci_df['Total_Principal'].sum()\ninterest_earned = ci_df['Total_Interest'].sum()\n\n# Calculate the money lost due to .03% of the customers who never paid back.\nmoney_lost = .03 * 1000 * 2000\n\n# Calculate the amount went in generating cards for every customer.\ncost_of_cards = 25 * 1000\n\n# The money paid to the credit company by the organization for issuing the card.\nmoney_per_card = 10 * 1000\n\n# Money paid to the bank by the credit card company for the principal.\nmoney_paid_to_bank = .065 * 1000 * 2000\n\n# Calculate total principal.\ntotal_principal = money_lost + principal_invested + cost_of_cards + money_paid_to_bank\n\n# Calculate total returns.\nreturns = principal_invested + money_per_card + interest_earned\n\n# Calculate the profit\/loss %.\ndiff = returns - total_principal\ncalc_percentage = diff\/total_principal * 100\n\nif calc_percentage<0:\n    print('The credit card company could not break even.')\n    print('It incurred a loss of ' , round(calc_percentage,2) , '%.')\n    print('Loss suffered is ', diff)\nelse:\n    print('The credit card company made a profit.')\n    print('It made a profit of  ' , round(calc_percentage,2) , '%.')\n    print('Profit made is ', diff)","9a8e9116":"# Create the ledger for different customers.\npercentage_of_customers = {'>15':.62 , '30':.11 , '45':.08 , '60':.16}\ncustomer_15 = generate_ledger_ci(\"2017-12-17\", late_days=0 , rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_30 = generate_ledger_ci(\"2017-12-17\", late_days=30 ,type_of_customer='30' , rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_45 = generate_ledger_ci(\"2017-12-17\", late_days=45, type_of_customer='45', rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_60 = generate_ledger_ci(\"2017-12-17\", late_days=60, type_of_customer='60', rate=180, percentage_of_customers= percentage_of_customers)\n\n# # As we don't issue another loan to customers who paid 60 days after due date we remove them.\ncustomer_60 = pd.DataFrame(customer_60[:1])\n\n# Concatenate them to a dataframe.\nci_df = pd.concat([customer_15, customer_30 , customer_45, customer_60] , ignore_index=True)","bef223a7":"ci_df","1f712ad5":"principal_invested = ci_df['Total_Principal'].sum()\ninterest_earned = ci_df['Total_Interest'].sum()\n\n# Calculate the money lost due to .03% of the customers who never paid back.\nmoney_lost = .03 * 1000 * 1000\n\n# Calculate the amount went in operating cost of cards for every customer.\ncost_of_cards = 55 * 1000\n\n# The money paid to the credit company by the organization for buying the customers.\nmoney_per_card = 20 * 1000\n\n# Money paid to the bank by the organization is zero as it can issue loans from its own funds.\nmoney_paid_to_bank = 0\n\n# Calculate total principal.\ntotal_principal = money_lost + principal_invested + cost_of_cards + money_paid_to_bank\n\n# Calculate total returns.\nreturns = principal_invested + money_per_card + interest_earned\n\n# Calculate the profit\/loss %.\ndiff = returns - total_principal\ncalc_percentage = diff\/total_principal * 100\n\nif calc_percentage<0:\n    print('The company could not break even.')\n    print('It incurred a loss of ' , round(calc_percentage,2) , '%.')\n    print('Loss suffered is ', diff)\nelse:\n    print('The company made a profit.')\n    print('It made a profit of  ' , round(calc_percentage,2) , '%.')\n    print('Profit made is Rs ', diff)","a712032b":"percentage_of_customers = {'>15':.90, '30':.00 , '45':.00 , '60':.05}\n# Create the ledger for different customers.\ncustomer_15 = generate_ledger_ci(\"2017-12-17\", late_days=0 , rate=180 , percentage_of_customers= percentage_of_customers)\ncustomer_30 = generate_ledger_ci(\"2017-12-17\", late_days=30 ,type_of_customer='30' , rate=180 , percentage_of_customers= percentage_of_customers)\ncustomer_45 = generate_ledger_ci(\"2017-12-17\", late_days=45, type_of_customer='45', rate=180, percentage_of_customers= percentage_of_customers)\ncustomer_60 = generate_ledger_ci(\"2017-12-17\", late_days=60, type_of_customer='60', rate=180, percentage_of_customers= percentage_of_customers)\n\n# # As we don't issue another loan to customers who paid 60 days after due date we remove them.\ncustomer_60 = pd.DataFrame(customer_60[:1])\n\n# Concatenate them to a dataframe.\nci_df = pd.concat([customer_15, customer_30 , customer_45, customer_60] , ignore_index=True)\n\nprincipal_invested = ci_df['Total_Principal'].sum()\ninterest_earned = ci_df['Total_Interest'].sum()\n\n# Calculate the money lost due to .03% of the customers who never paid back.\nmoney_lost = .10 * 1000 * 1000\n\n# Calculate the amount went in operating cost of cards for every customer.\ncost_of_cards = 25 * 1000\n\n# The money paid to the credit company by the organization for buying the customers.\nmoney_per_card = 20 * 1000\n\n# Money paid to the bank by the organization is zero as it can issue loans from its own funds.\nmoney_paid_to_bank = 0\n\n# Calculate total principal.\ntotal_principal = money_lost + principal_invested + cost_of_cards + money_paid_to_bank\n\n# Calculate total returns.\nreturns = principal_invested + money_per_card + interest_earned\n\n# Calculate the profit\/loss %.\ndiff = returns - total_principal\ncalc_percentage = diff\/total_principal * 100\n\nif calc_percentage<0:\n    print('The company could not break even.')\n    print('It incurred a loss of ' , round(calc_percentage,2) , '%.')\n    print('Loss suffered is ', diff)\nelse:\n    print('The company made a profit.')\n    print('It made a profit of  ' , round(calc_percentage,2) , '%.')\n    print('Profit made is Rs ', diff)\n\n","998a3684":"# Create the ledger for different customers.\npercentage_of_customers = {'>15':.60 , '30':.11 , '45':.10 , '60':.08}\ncustomer_15 = generate_ledger_ci(\"2017-12-17\", late_days=0 , rate=10, percentage_of_customers= percentage_of_customers)\ncustomer_30 = generate_ledger_ci(\"2017-12-17\", late_days=30 ,type_of_customer='30' , rate=10, percentage_of_customers= percentage_of_customers)\ncustomer_45 = generate_ledger_ci(\"2017-12-17\", late_days=45, type_of_customer='45', rate=10, percentage_of_customers= percentage_of_customers)\ncustomer_60 = generate_ledger_ci(\"2017-12-17\", late_days=60, type_of_customer='60', rate=10, percentage_of_customers= percentage_of_customers)\n\n# # As we don't issue another loan to customers who paid 60 days after due date we remove them.\ncustomer_60 = pd.DataFrame(customer_60[:1])\n\n# Concatenate them to a dataframe.\nci_df = pd.concat([customer_15, customer_30 , customer_45, customer_60] , ignore_index=True)\n\nprincipal_invested = ci_df['Total_Principal'].sum()\ninterest_earned = ci_df['Total_Interest'].sum()\n\n# Calculate the money lost due to .03% of the customers who never paid back.\nmoney_lost = .10 * 1000 * 1000\n\n# Calculate the amount went in operating cost of cards for every customer.\ncost_of_cards = 25 * 1000\n\n# The money paid to the credit company by the organization for buying the customers.\nmoney_per_card = 20 * 1000\n\n# Money paid to the bank by the organization is zero as it can issue loans from its own funds.\nmoney_paid_to_bank = 0\n\n# Calculate total principal.\ntotal_principal = money_lost + principal_invested + cost_of_cards + money_paid_to_bank\n\n# Calculate total returns.\nreturns = principal_invested + money_per_card + interest_earned\n\n# Calculate the profit\/loss %.\ndiff = returns - total_principal\ncalc_percentage = diff\/total_principal * 100\n\nif calc_percentage<0:\n    print('The company could not break even.')\n    print('It incurred a loss of ' , round(calc_percentage,2) , '%.')\n    print('Loss suffered is ', diff)\nelse:\n    print('The company made a profit.')\n    print('It made a profit of  ' , round(calc_percentage,2) , '%.')\n    print('Profit made is Rs ', diff)\n\n","6e6cfff4":"\n# Create the ledger for different customers.\npercentage_of_customers = {'>15':.62 , '30':.11 , '45':.08 , '60':.16}\ncustomer_15 = generate_ledger_ci(\"2017-12-17\", late_days=0 , rate=15, percentage_of_customers= percentage_of_customers)\ncustomer_30 = generate_ledger_ci(\"2017-12-17\", late_days=30 ,type_of_customer='30' , rate=15, percentage_of_customers= percentage_of_customers)\ncustomer_45 = generate_ledger_ci(\"2017-12-17\", late_days=45, type_of_customer='45', rate=15, percentage_of_customers= percentage_of_customers)\ncustomer_60 = generate_ledger_ci(\"2017-12-17\", late_days=60, type_of_customer='60', rate=15, percentage_of_customers= percentage_of_customers)\n\n# # As we don't issue another loan to customers who paid 60 days after due date we remove them.\ncustomer_60 = pd.DataFrame(customer_60[:1])\n\n# Concatenate them to a dataframe.\nci_df = pd.concat([customer_15, customer_30 , customer_45, customer_60] , ignore_index=True)\n\nprincipal_invested = ci_df['Total_Principal'].sum()\ninterest_earned = ci_df['Total_Interest'].sum()\n\n# Calculate the money lost due to .03% of the customers who never paid back.\nmoney_lost = .03 * 1000 * 1000\n\n# Calculate the amount went in operating cost of cards for every customer.\ncost_of_cards = 55 * 1000\n\n# The money paid to the credit company by the organization for buying the customers.\nmoney_per_card = 20 * 1000\n\n# Money paid to the bank by the organization is zero as it can issue loans from its own funds.\nmoney_paid_to_bank = 0\n\n# Calculate total principal.\ntotal_principal = money_lost + principal_invested + cost_of_cards + money_paid_to_bank\n\n# Calculate total returns.\nreturns = principal_invested + money_per_card + interest_earned\n\n# Calculate the profit\/loss %.\ndiff = returns - total_principal\ncalc_percentage = diff\/total_principal * 100\n\nif calc_percentage<=0:\n    print('The company could not break even.')\n    print('It incurred a loss of ' , round(calc_percentage,2) , '%.')\n    print('Loss suffered is ', diff)\nelse:\n    print('The company made a profit.')\n    print('It made a profit of  ' , round(calc_percentage,2) , '%.')\n    print('Profit made is Rs ', diff)","688c279f":"# Scenario 1:\n## i) The interest rate is simple interest.\n## ii) Interest is calculated on a daily basis.\n## iii) The average card balance is the average end of month balance.\n## iv) All members are more than a year old.","3a2b1c26":"### The credit company generated a profit of 1.73% or Rs 559733 for one year. Compound interest with quarterly compounding period has generated greater profit than simple interest.","dc6ca00f":"### As per the data-set the late values in 45 days is 0. This might be due to the discrepancy in dataset.","7f8e833a":"### **CIBIL Score** \u2013 The CIBIL Score is a 3-digit numeric summary of the borrower\u2019s credit history, rating and report, and it ranges from 300 to 900. The score closer to 900, would indicate a better credit rating. The score of the borrower, helps to assess their credit worthiness and also how frequently they have met their credit commitments on time. A detailed CIBIL report also gives a glimpse of credits availed by the borrower and whether they have defaulted over the same and what is the time period of such default. Therefore, critical examination of the same will prove to be a huge check for assessing the credit worthiness of the borrowers.\n\n### **Background of the borrower** \u2013 The borrower\u2019s source of income, age and background should be clearly identified. Such as if the borrower is employed, such could be verified by latest salary slips, copy of ITR, employment proofs, credits in the bank account. If the borrower is self-employed, copy of the ITR, financial statements could be assessed to verify the same. If the borrower is a student or a minor, proper authorized from guardian should be availed. It should be critically analyzed the loan facility is not more than credit worthiness of the borrower, a LTV ratio based on the income of the borrower could be assessed and credit could be granted accordingly. \n\n### **Analysis of past defaults and frequency** \u2013 Such an analysis would establish how frequently the borrower is availing loans and how frequently have they defaulted over the same. It would highlight instances whether the borrower is dependent upon the loans for their day to day expense also and their current income is insufficient for the same. Higher past defaults will increase the credit risk of the lender, hence steps like increasing the interest rate, reducing the credit limit, requesting security could be undertaken.\n\n### **Ratio analysis** \u2013 Ratios such as debt to income ratio needs to be analyzed critically to avoid the default risk on the part of the borrowers. Borrowers with a higher debt-to-income ratio are more likely to run into trouble making monthly payments than borrowers with a lower ratio. The loan to value ratio is calculated by the total dollar amount of the loan divided by the appraised value of the collateral. As a lender we will prefer the appraised value of the borrower\u2019s collateral to be higher than the loan amount. Liquidity ratios, such as the current ratio, quick ratio and cash ratio will also determine the borrower\u2019s ability to meet the lending commitment when due with cash. The debt service coverage ratio will assess the cash available to meet the lending obligations. A thorough analysis of all these ratios will aid to understand the credit standing and worthiness of the borrower. ","282cebb4":"# Scenario 2:\n## i) The interest rate is compounded quarterly.\n## ii) Interest is calculated on a monthly basis.\n## iii) Membership grows at 5% month on month.\n## iv) Card balance grows at 5% per month for each member.\n## v) The average card balance is the average end of month balance.","3d48d1a6":"## Q6: What is the extra cost(if any) company will have to incur if the customer delays the payment of the credit card bill after the due date?","bd77340c":"## Q5: What numbers can the financial institution change to convince the affiliated group not to want to purchase, while still not going into a loss? Give a range of what the new numbers are (min and max)?\n### Answer: Credit Lending Company can show that a higher % of people defaults say 10 % or greater and 90% of people pay the due on time. ","64f473e3":"## Q3: Is a borrower with a low balance more or less likely to default then a borrower with a high balance? Why ? explain clearly","83c50538":"## Q7: Is it beneficial for the company if the customer pays the credit card bill after the due date? (express your views as a business strategy analyst with a short example)?","9a542fe9":"## Q1: How much profit % is generated in 1 year?","0f706160":"### Answer: Credit Lending Company can show that a higher % of people defaults say 10 % or greater and 90% of people pay the due on time. ","155311d4":"## Q1: How much profit % is generated in 1 year?","c4e77761":"## So we determine the type of customers of each type as:\n### Customers who paid on time = (78 + 47.85)\/2 = 62.75% = 62%\n### Customers who were 60 days late = (34.26 + 2)\/2  = 19%\n### Out of these people we will assume that 3 % of the people who were past the due date(60 days) couldn't make the payment i.e defaults were 3%.\n### Out of the remaining 19% I divide the ratio as :\n### 60% of the people made payment after 30 days = 60% of 19 = 11.4% = 11%\n### The remaining people made the payment after 45 days = 19-11 = 8%","77ee8984":"## Q3: Is a borrower with a low balance more or less likely to default then a borrower with a high balance? Why ? explain clearly\n\n### A borrower with a low balance might be more likely to default as if he has a low balance:\n### He may be a new customer or\n### He may have a bad credit score or\n### He might be having low income i.e he might not be in a stable job , a student etc.\n### So there is a chance that the borrower with a low balance might default.\n\n\n## Q4: The group company has now become unhappy with the credit card provider. it wants to start its own credit card. But for that, it will need to purchase the customers from the current credit card company. If the affilated group offered Rs 20 per account to purchase all the customers from the credit card company, what would there profit be? (assume that we are only talking about 1 year)","8b7282e0":"### A borrower with a low balance might be more likely to default as if he has a low balance:\n### 1. He may be a new customer or\n### 2. He may have a bad credit score or\n### 3. He might be having low income i.e he might not be in a stable job , a student etc.\n### So there is a chance that the borrower with a low balance might default.\n","01e504fd":"## The card company might also try to convice the organization that operating cost per card will be greater since the credit card company operates in bulk it was able to afford a lower rate. So, even if the organization charges at an yearly rate of 15% and cost per card of Rs 50 they will suffer a loss.","56edf327":"## This data is of a peer to peer lending company showing historical loans from both Prosper and Lending Club from 2013 to 2018.\n### Link to dataset: https:\/\/www.kaggle.com\/skihikingkevin\/online-p2p-lending","16ae5f06":"## Q2: The 3% loss rate can either mean either 3% of the outstanding balance defaults or 3% of the borrowers default on their entire balance. If the average balance is increased to $2000, what happens to the loss?","9e451020":"### The organization will make a profit as it can adjust fund from its own resources, so it won't have to pay 6.5% interest to the bank. So , even if the operating cost might increase from 25 to upto Rs 450 it will be making a profit.","67858841":"# However since the provided data is for 37.8 million customers with average balance Rs 36,000 we will take into consideration other data sets to introduce variation in our calculations.","acd7a979":"## As per the reports by Transunion Cibil 78% of people pay off their balance and less that 2% of people fail to pay back their loans.","0e51ac17":"# Final Solution\n\n# Information provided.\n## Facts:\n### 1. Average card balance is Rs 1000\n### 2. Each card has an interest rate of 15%\n### 3. Membership fee is Rs 20 per card\n### 4.Loss rate is 3%\n### 5. Rs 25 operating cost per card\n### 6. Rs 10 affiliation fee per card (cost to the group organization itself, so that their members get this awesome card program)\n### 7. 6.5% cost of funds (that credit card company must pay to the bank where it gets money)\n### 8. Bill\/statement is issued on 1st of every month\n### 9. Credit-free period = 15 days from the bill\/statement issue date.","70151211":"### Extra Cost  incurred by the company is the 6.5% of the funds the credit card company has to pay to the bank.","8079df08":"## Q4: The group company has now become unhappy with the credit card provider. it wants to start its own credit card. But for that, it will need to purchase the customers from the current credit card company. If the affilated group offered Rs 20 per account to purchase all the customers from the credit card company, what would there profit be? (assume that we are only talking about 1 year)","45dbc994":"## The credit lending company can convince the orginaztions that its employees would expect loans at subcidized rate of interest. They might convince the organization that the company would not be able to charge an interest rate greater than 10% anually. Even if 10% of there employees default they will run into a loss.","77a6a03b":"## Q6: What is the extra cost(if any) company will have to incur if the customer delays the payment of the credit card bill after the due date?\n\n### Extra Cost will be incurred by the company if the customer defaults on the payment. Otherwise , the later the customer pays greater the interest is generated.\n\n## Q7: Is it beneficial for the company if the customer pays the credit card bill after the due date? (express your views as a business strategy analyst with a short example)?\n\n### Extra Cost  incurred by the company is the 6.5% of the funds the credit card company has to pay to the bank.","96e3a06c":"## The card company might also try to convice the organization that operating cost per card will be greater since the credit card company operates in bulk it was able to afford a lower rate. So, even if the organization charges at an yearly rate of 15% and cost per card of Rs 55 they will suffer a loss.","04dd5633":"## The credit lending company can convince the orginaztions that its employees would expect loans at subsidized rate of interest. They might convince the organization that the company would not be able to charge an interest rate greater than 10% anually.","12405a56":"### If the balance is increased to Rs.2000 the credit card company slightly increases its profit percentage.","5f872cd0":"### Unless , a person defaults the company will make a profit as delay is directly proportional to interest generated. ","4d5b3ff9":"### The credit company still made a profit but its profit percentage reduced. Here , I assumed that 3% of the total customers defaulted on their loan.","1fc1dc06":"## Q5: What numbers can the financial institution change to convince the affiliated group not to want to purchase, while still not going into a loss? Give a range of what the new numbers are (min and max)?","00f0384d":"### Helper Functions.","d6349c1e":"## Q2: The 3% loss rate can either mean either 3% of the outstanding balance defaults or 3% of the borrowers default on their entire balance. If the average balance is increased to $2000, what happens to the loss?","aa53ac65":"### The organization will get better profits by replacing the card company. As it can use its own resources for giving loans to it customers rather than paying interest to a bank. The operating cost per card might increase(assuming it to be Rs 55 per card) because the credit lending company was operating in bulk so they had cheaper operating cost per card.","f04f1a44":"## Assumptions:\n### 1. I assume that the customers frequently take loans i.e they take the next loan immediately after they pay the last one.\n### 2. The customers use their entire balance when they take loan and every month they pay minimum of 5% of the balance.\n### 3. The monthly rate of interest is 15%.\n### 4. First Loan was issued on 17th December 2018.","c49d079a":"## **Which information variables you will use to calculate the credit card limit and the risk associated with it for an individual customer? Also, give the reason for your choice. (Example-Bureau score)? ** ","52f5b52b":"# Credit Risk Analysis Case Study"}}