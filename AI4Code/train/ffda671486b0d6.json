{"cell_type":{"212aaa77":"code","7166d8f6":"code","27eee428":"code","817f8fc7":"code","05b807bb":"code","d036fb3c":"code","8ae0d16f":"code","157fa1d5":"code","d4c8dd51":"code","a9a4f432":"code","dc8644a8":"code","0f179144":"code","fb6f7855":"code","16955da4":"code","61ead120":"code","035c7e63":"code","4e910e13":"code","73b5ade0":"code","0d4ad6cd":"code","cf84ff33":"code","2a06de40":"code","3d08e947":"code","0e2d02ad":"code","fdfb29df":"code","30d33c82":"code","a75fd6c1":"code","b27488fb":"code","6b073231":"code","f653daac":"code","af496ca7":"code","0b873375":"code","e71b60f8":"code","0b3d2cb1":"code","d5a2e2ae":"code","d81dcd08":"code","db7f7e68":"code","bdd2be75":"code","034f43c7":"code","608fe138":"code","172fe9bd":"code","ca274c83":"code","de2343a5":"code","40515c01":"code","e8a2c0a0":"code","265b5225":"code","f2627f7c":"code","febe3a03":"code","ea5ababa":"code","6222af7c":"code","196e4894":"code","541c735c":"code","e74ce3ff":"code","0fd03225":"code","4fcbc527":"code","78cd63c6":"code","cf70bf0e":"code","44e0314b":"code","7ad141aa":"code","48820a57":"code","99c7e981":"code","eb75f47d":"code","1fa5ca2e":"code","98fd0d66":"code","29c34425":"code","def4555c":"code","de0be8f0":"code","3c0eaf57":"code","7fbfc6ae":"code","2017c188":"code","1dfbcff9":"code","09614153":"code","417570a0":"code","058d0ca9":"code","ee09872f":"code","205dadfe":"code","552e0e0f":"code","63d33951":"code","cf8dc573":"code","0df6bf6a":"code","3426f429":"code","c4a7f046":"code","b9848ca1":"code","8b4c7331":"code","d0ac8a95":"code","019a2258":"code","d0e5bdfe":"markdown","2f0910db":"markdown","cef9a884":"markdown","f5986ad2":"markdown","46ee0635":"markdown","ea725a1a":"markdown","a4b54249":"markdown","7037d896":"markdown","72d3f184":"markdown","12bdec90":"markdown","2e8ee9e1":"markdown","a59c0c54":"markdown","a863bd75":"markdown","e3075d4f":"markdown","4cdcc077":"markdown","a37fd4b4":"markdown","ed64f622":"markdown","861ae50b":"markdown","56364920":"markdown","c2ca3abe":"markdown","0b5d49a0":"markdown","01b8fb5b":"markdown","4dedc217":"markdown","ceed0632":"markdown","a9c64e31":"markdown","81030a31":"markdown","4d4e3263":"markdown","f8a9afbb":"markdown","f93d04c0":"markdown","f61b7c74":"markdown","dfc88f6d":"markdown","fba5eacd":"markdown","fde98928":"markdown","aeb20fb3":"markdown","13bc8af7":"markdown","cc67766b":"markdown","d5b101eb":"markdown","d19b458e":"markdown","a1d6157e":"markdown","a8f81001":"markdown","1102c65c":"markdown","a04e264d":"markdown","7f620f9b":"markdown","b766dfbb":"markdown","c4b19e4a":"markdown","a23f573a":"markdown","e7dc12d9":"markdown","aa0fcdea":"markdown"},"source":{"212aaa77":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7166d8f6":"plt.style.available","27eee428":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId = test_df[\"PassengerId\"]","817f8fc7":"train_df.columns","05b807bb":"train_df.head()","d036fb3c":"train_df.describe()","8ae0d16f":"train_df.info()","157fa1d5":"def bar_plot(variable):\n    \"\"\"\n        input: variable example: \"Sex\" or \"Age\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","d4c8dd51":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","a9a4f432":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","dc8644a8":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","0f179144":"numericVar = [\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","fb6f7855":"# Plcass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], \n                                        as_index = False).mean().sort_values(by=\"Survived\",\n                                                                             ascending = False)","16955da4":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], \n                                     as_index = False).mean().sort_values(by=\"Survived\",\n                                                                          ascending = False)","61ead120":"# Sibsp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], \n                                       as_index = False).mean().sort_values(by=\"Survived\",\n                                                                            ascending = False)","035c7e63":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], \n                                       as_index = False).mean().sort_values(by=\"Survived\",\n                                                                            ascending = False)","4e910e13":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","73b5ade0":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","0d4ad6cd":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis = 0).reset_index(drop = True)","cf84ff33":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis = 0).reset_index(drop = True)\ntrain_df.head()","2a06de40":"train_df.columns[train_df.isnull().any()]","3d08e947":"train_df.isnull().sum()","0e2d02ad":"train_df[train_df[\"Embarked\"].isnull()]","fdfb29df":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","30d33c82":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","a75fd6c1":"train_df[train_df[\"Fare\"].isnull()]","b27488fb":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","6b073231":"train_df[train_df[\"Fare\"].isnull()]","f653daac":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")\nplt.show()","af496ca7":"g = sns.factorplot(x=\"SibSp\", y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","0b873375":"g = sns.factorplot(x=\"Parch\", y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","e71b60f8":"g = sns.factorplot(x=\"Pclass\", y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","0b3d2cb1":"g = sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","d5a2e2ae":"g = sns.FacetGrid(train_df,col=\"Survived\", row= \"Pclass\",size=2)\ng.map(plt.hist,\"Age\",bins=25)\nplt.show()","d81dcd08":"g = sns.FacetGrid(train_df, row= \"Embarked\",size=2)\ng.map(sns.pointplot,\"Pclass\",\"Survived\",\"Sex\",bins=25)\ng.add_legend()\nplt.show()","db7f7e68":"g = sns.FacetGrid(train_df,col = \"Survived\", row= \"Embarked\",size=2)\ng.map(sns.barplot,\"Sex\",\"Fare\")\ng.add_legend()\nplt.show()","bdd2be75":"train_df[train_df[\"Age\"].isnull()]","034f43c7":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","608fe138":"sns.factorplot(x=\"Sex\",y=\"Age\",hue=\"Pclass\",data=train_df,kind=\"box\")\nplt.show()","172fe9bd":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","ca274c83":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Pclass\",\"Sex\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")\nplt.show()","de2343a5":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"])&\n                              (train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"])&\n                              (train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","40515c01":"train_df[train_df[\"Age\"].isnull()]","e8a2c0a0":"train_df[\"Name\"].head(10)","265b5225":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","f2627f7c":"train_df[\"Title\"].head(10)","febe3a03":"sns.countplot(x=\"Title\",data = train_df)\nplt.xticks(rotation=60)\nplt.show()","ea5ababa":"# Convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"Other\")","6222af7c":"train_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"] ]","196e4894":"sns.countplot(x=\"Title\",data = train_df)\nplt.xticks(rotation=60)\nplt.show()","541c735c":"g = sns.factorplot(x=\"Title\",y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","e74ce3ff":"train_df.drop(labels = [\"Name\"],axis=1,inplace=True)","0fd03225":"train_df.head()","4fcbc527":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","78cd63c6":"train_df.head() # SibSp - Parch","cf70bf0e":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1 ","44e0314b":"train_df.head() # Fsize","7ad141aa":"g = sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df,kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","48820a57":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","99c7e981":"train_df.head(20)","eb75f47d":"sns.countplot(x=\"family_size\",data = train_df)\nplt.show()","1fa5ca2e":"g = sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df,kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","98fd0d66":"train_df = pd.get_dummies(train_df,columns=[\"family_size\"])\ntrain_df.head()","29c34425":"train_df[\"Embarked\"].head()","def4555c":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","de0be8f0":"train_df = pd.get_dummies(train_df,columns = [\"Embarked\"])\ntrain_df.head()","3c0eaf57":"train_df[\"Ticket\"].head(20)","7fbfc6ae":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","2017c188":"train_df[\"Ticket\"].head(10)","1dfbcff9":"train_df = pd.get_dummies(train_df,columns = [\"Ticket\"],prefix=\"T\")\ntrain_df.head()","09614153":"sns.countplot(x=\"Pclass\",data=train_df)\nplt.show()","417570a0":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns = [\"Pclass\"])\ntrain_df.head()","058d0ca9":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df,columns = [\"Sex\"])\ntrain_df.head()","ee09872f":"train_df.drop(labels = [\"PassengerId\",\"Cabin\"],axis=1,inplace = True)\ntrain_df.columns","205dadfe":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","552e0e0f":"train_df_len","63d33951":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","cf8dc573":"test.head()","0df6bf6a":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","3426f429":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","c4a7f046":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(0,500,100),\n                \"max_depth\": range(0,20,5)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\n\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","b9848ca1":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","8b4c7331":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","d0ac8a95":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","019a2258":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","d0e5bdfe":"<a id = '6'><\/a>\n### Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","2f0910db":"<a id = '4'><\/a>\n### Categorical Variable","cef9a884":"* age <= 10 has a high survival rate.\n* Older passangers (80) survived\n* Large number of 20 years old did not survive\n* Most passengers are in 15-35 age range.\n* Use age feature in traning\n* Use age distribution for missing value of age","f5986ad2":"<a id = '13'><\/a>\n## Pclass -- Survived","46ee0635":"# Introduction\nThe sinking of Titanic is one of the most notorious shipwrecks in the history. In 1912, during her voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew.\n\n<font color = 'blue'>\n    \nContent:\n\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n  * [Univariate Variable Analysis](#3)\n    * [Categorical Variable](#4)\n    * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n6. [Visualization](#9)\n    * [Correlation Matrix](#10)\n    * [SibSp -- Survived](#11)\n    * [Parch -- Survived](#12)\n    * [Pclass -- Survived](#13)\n    * [Age -- Survived](#14)\n    * [Pclass -- Survived -- Age](#15)\n    * [Embarked -- Sex -- Pclass -- Survived](#16)\n    * [Embarked -- Sex -- Fare -- Survived](#17)\n    * [Fill Missing Age Feature](#18)\n1. [Feature Engineering](#19)\n    * [Name -- Title](#20)\n    * [Family Size](#21)\n    * [Embarked](#22)\n    * [Ticket](#23)\n    * [Pclass](#24)\n    * [Sex](#25)\n    * [Drop Passenger ID and Cabin](#26)\n1. [Modelling](#27)\n    * [Train - Test Split](#28)\n    * [Simple Logistic Regression](#29)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#30)\n    * [Ensemble Modeling](#31)\n    * [Prediction and Submission](#32)","ea725a1a":"<a id = '10'><\/a>\n## Correlation Matrix","a4b54249":"Sex is not informative for age prediction, age distribution seems to be same.","7037d896":"* Higher Fare, Better Survival.","72d3f184":"1st class passangers are older than 2nd, and 2nd class passangers are older than 3th.","12bdec90":"We will compare 5 ML classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","2e8ee9e1":"<a id = '22'><\/a>\n## Embarked","a59c0c54":"* Sibsp and parch can be used for new feature extraction with th = 3\n* Small families have more chance to survive\n* There is a std in survival of passenger with parch = 3","a863bd75":"<a id = '5'><\/a>\n### Numerical Variable","e3075d4f":"* Pclass is important feature for model training","4cdcc077":"<a id = '28'><\/a>\n## Train - Test Split","a37fd4b4":"<a id = '27'><\/a>\n## Modeling","ed64f622":"<a id = '11'><\/a>\n## SibSp -- Survived","861ae50b":"#### Find Missing Value","56364920":"<a id = '30'><\/a>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation","c2ca3abe":"<a id = '26'><\/a>\n## Drop Passenger ID and Cabin","0b5d49a0":"<a id = '18'><\/a>\n## Fill Missing Age Feature","01b8fb5b":"<a id = '12'><\/a>\n## Parch -- Survived","4dedc217":"<a id = '15'><\/a>\n## Pclass -- Survived -- Age","ceed0632":"Fare feature seems to have correlation with survived feature (0.26).","a9c64e31":"<a id = '32'><\/a>\n## Prediction and Submission","81030a31":"Age is not correlated with sex but it is correlated with Parch, sibsp and pcalss","4d4e3263":"<a id = '14'><\/a>\n## Age -- Survived","f8a9afbb":"<a id = '7'><\/a>\n### Outlier Detection","f93d04c0":"* Female passangers have much better survival rate than male\n* Males have better survival rate in Pclass 3 in C\n* Embarked and sex will be used in training.","f61b7c74":"<a id = '29'><\/a>\n## Simple Logistic Regression","dfc88f6d":"<a id = '31'><\/a>\n## Ensemble Modeling","fba5eacd":"* Having a lot of SibSp have less chance to survive.\n* If sibsp == 0 or 1, passenger has more chance to survive\n* We can consider a new feature describing these categories","fde98928":"<a id = '16'><\/a>\n## Embarked -- Sex -- Pclass -- Survived","aeb20fb3":"<a id = '8'><\/a>\n### Missing Value\n* Find Missing Value\n* Fill Missing Value","13bc8af7":"<a id = '20'><\/a>\n## Name -- Title","cc67766b":"<a id = '25'><\/a>\n## Sex","d5b101eb":"<a id = '17'><\/a>\n## Embarked -- Sex -- Fare -- Survived","d19b458e":"<a id = '3'><\/a>\n## Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, Age and PassengerId","a1d6157e":"<a id = '2'><\/a>\n## Variable Description\n* PassengerId: unique id number to each passenger\n* Survived: passenger survive(1) or died(0)\n* Pclass: passenger class\n* Name: name\n* Sex: gender of passenger\n* Age: age of passenger\n* SibSp: number of siblings\/spouses\n* Parch: number of parents\/children\n* Ticket: ticket number\n* Fare: amount of money spent on ticket\n* Cabin: cabin category\n* Embarked: port where passenger embarked (C = Cherbourg, Q = Queenstown, S = Southampton)","a8f81001":"Small families have more change to survive than large families","1102c65c":"* float64(2): Fare ve Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","a04e264d":"<a id = '9'><\/a>\n## Visualization","7f620f9b":"<a id = '1'><\/a>\n## Load and Check Data","b766dfbb":"Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","c4b19e4a":"<a id = '24'><\/a>\n## Pclass","a23f573a":"<a id = '23'><\/a>\n## Ticket","e7dc12d9":"<a id = '19'><\/a>\n## Feature Engineering","aa0fcdea":"<a id = '21'><\/a>\n## Family Size"}}