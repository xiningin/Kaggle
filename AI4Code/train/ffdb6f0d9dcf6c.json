{"cell_type":{"7430e053":"code","4223c8b8":"code","b065e98f":"code","ba837229":"code","f21363aa":"code","c94275ee":"code","5306a6d0":"code","2ad86578":"code","e7640c0f":"code","9734a8b5":"code","948dd865":"code","32fb0a03":"code","c254fad1":"code","61caa311":"code","a5ad33fd":"code","61f42bf9":"code","28d1defd":"code","92608047":"code","f096cf81":"code","8b99b609":"code","33b996e1":"code","c366b419":"code","ed6a3a4c":"code","e3719e90":"code","3c207a6d":"code","afbca11c":"code","83074d54":"code","cfd59717":"code","5b11ec3a":"code","60055697":"code","51832199":"code","d571d938":"code","685997da":"code","05ae4c6e":"code","a8cc87a3":"code","f7c0fc81":"markdown","cb88ae64":"markdown","82ba5582":"markdown","7eb7a7d5":"markdown","c412f186":"markdown","d44b849b":"markdown","186dbae2":"markdown","e3d04d6a":"markdown","d5351741":"markdown","05bc69b5":"markdown","37aaf2c9":"markdown","ac4b4c03":"markdown","56e89996":"markdown","f9801eb9":"markdown","5f21134c":"markdown","6192120a":"markdown","3db2e908":"markdown","4840c2e8":"markdown","54966b07":"markdown","53ca0e51":"markdown","b6d43b28":"markdown","1f33781a":"markdown","ac975606":"markdown","179fa548":"markdown"},"source":{"7430e053":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nfrom mlxtend.plotting import plot_decision_regions\nimport seaborn as sns\n\nfrom sklearn.datasets import make_classification\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler, StandardScaler, PowerTransformer\nfrom sklearn.feature_selection import f_classif, SelectKBest\nfrom sklearn.ensemble import RandomForestClassifier\n\npd.options.display.max_rows = 999\npd.options.display.max_columns = 999","4223c8b8":"def create_submission(pred_array,X_test_df,dest_url):\n  pred_df=pd.DataFrame(pred_array,columns=['status_group'])\n  pump_ids=pd.DataFrame(X_test_df.id,columns=['id'])\n  pump_ids = pump_ids.astype('int32')\n  submit_df=pd.concat([pump_ids, pred_df], axis=1)\n  submit_df.to_csv(dest_url, index=False, header=['id','status_group'])\n  return","b065e98f":"X_train_url = '..\/input\/train_features.csv'\ny_train_url = '..\/input\/train_labels.csv'\nX_test_url = '..\/input\/test_features.csv'\ny_test_url = '..\/input\/sample_submission.csv'\n\ntrain_features = pd.read_csv(X_train_url)\ntrain_labels = pd.read_csv(y_train_url)\ntest_features = pd.read_csv(X_test_url)\nsample_sub =pd.read_csv(y_test_url)","ba837229":"print(train_features.shape)\ntrain_features.head()","f21363aa":"train_labels.head()","c94275ee":"df_viz=train_features.copy()\ndf_viz[df_viz['longitude']>0] [df_viz['latitude']<0][df_viz['construction_year']>0].plot\\\n(kind='scatter', x=\"longitude\", y=\"latitude\", alpha=0.4,\ns=df_viz[\"population\"]\/10, label=\"population\", figsize=(14,10),\nc=\"construction_year\", cmap=plt.get_cmap(\"Blues\"), colorbar=True,\nsharex=False);\nplt.title(\"Waterpump Locations in Tanzania\", \n         fontsize =16, fontweight='bold')\nplt.legend;","5306a6d0":"train_labels.head()","2ad86578":"train_labels.status_group.value_counts(normalize=True)","e7640c0f":"majority_class = train_labels.status_group.mode()[0]","9734a8b5":"submit_df=sample_sub  ## make a copy of the sample submission df\nsubmit_df.status_group.replace(majority_class) ## replace predicted label with majority class","948dd865":"submission_url = '..\/output\/submission.csv'\nsubmit_df.to_csv(submission_url, index=False, header=['id','status_group'])","32fb0a03":"df_train=pd.merge(train_features,train_labels,how='left', on=['id'])\ndf_test=test_features.copy()\n\ndf_train.head()","c254fad1":"#label NaNs as unknown for One Hot Encoding as their own feature\ndf_train.funder.fillna('unknown', inplace=True)\ndf_train.permit.fillna('unknown', inplace=True)\ndf_train.installer.fillna('unknown', inplace=True)\ndf_train.subvillage.fillna('unknown', inplace=True)\ndf_train.scheme_name.fillna('unknown', inplace=True)\ndf_train.public_meeting.fillna('unknown', inplace=True)\ndf_train.scheme_management.fillna('unknown', inplace=True)\n\ndf_test.funder.fillna('unknown', inplace=True)\ndf_test.permit.fillna('unknown', inplace=True)\ndf_test.installer.fillna('unknown', inplace=True)\ndf_test.subvillage.fillna('unknown', inplace=True)\ndf_test.scheme_name.fillna('unknown', inplace=True)\ndf_test.public_meeting.fillna('unknown', inplace=True)\ndf_test.scheme_management.fillna('unknown', inplace=True)","61caa311":"dropped_features=['date_recorded',\n                         'funder',\n                      'installer',\n                      'longitude',\n                       'latitude',\n                       'wpt_name',\n                    'num_private',\n                          'basin',\n                     'subvillage',\n                         'region',\n                            'lga',\n                           'ward',\n                    'recorded_by',\n               'scheme_management',\n                    'scheme_name',\n          'waterpoint_type_group',                  \n                'extraction_type',\n          'extraction_type_group',\n          'extraction_type_class', ]\n\ndf_train.drop(columns=dropped_features, inplace=True )\ndf_test.drop(columns=dropped_features, inplace=True )","a5ad33fd":"cols_enc=['public_meeting','management', 'management_group', 'payment','payment_type',\n          'water_quality','quality_group', 'quantity',  'quantity_group'   ,'source', 'source_type','source_class','waterpoint_type','permit'  ]\n\ndf_train_enc=pd.get_dummies(df_train, columns=cols_enc, prefix=cols_enc)\ndf_test_enc=pd.get_dummies(df_test, columns=cols_enc, prefix=cols_enc)\n\n\ndf_test_enc.head(10)","61f42bf9":"# Calculate construction year mean to fill missing data (year=0)\nmean_year = df_train_enc[df_train_enc['construction_year']>0]['construction_year'].mean()\ndf_train_enc.loc[df_train_enc['construction_year']==0, 'construction_year'] = int(mean_year)","28d1defd":"mean_year = df_test_enc[df_test_enc['construction_year']>0]['construction_year'].mean()\ndf_test_enc.loc[df_test_enc['construction_year']==0, 'construction_year'] = int(mean_year)","92608047":"df_train_enc['age']=(2018 - df_train_enc.construction_year).astype(float)\ndf_test_enc['age']=(2018 - df_test_enc.construction_year).astype(float)\n","f096cf81":"X_train = df_train_enc.drop(columns='status_group').copy()\ny_train = df_train_enc.status_group.copy()\n\nX_test = df_test_enc.copy()\n","8b99b609":"X_train.head()\n","33b996e1":"# convert whole dataset to float64\n\nX_train = X_train.astype('float64')\nX_test = X_test.astype('float64')","c366b419":"X_train.shape","ed6a3a4c":"X_test.shape","e3719e90":"X_train.head()","3c207a6d":"X_test.head()","afbca11c":"mul_lr = LogisticRegression().fit(X_train, y_train)","83074d54":"lr_pred=mul_lr.predict(X_test)\n\nsubmission_url = '\/content\/drive\/My Drive\/Colab Notebooks\/submission.csv'\ncreate_submission(lr_pred,X_test,submission_url)","cfd59717":"pipe = make_pipeline(\n    RobustScaler(),  \n    SelectKBest(f_classif), \n    LogisticRegression())","5b11ec3a":"# select hyper-parameters \nparam_grid = {\n    'selectkbest__k': [1,2,3], \n    'logisticregression__class_weight': [None, 'balanced'],\n    }\n\n\n# Fit on the train set   3-folds,  scoring=accuracy\ngs = GridSearchCV(pipe, param_grid=param_grid, cv=3, \n                  scoring='accuracy', \n                  iid=False,\n                  verbose=1)\n\ngs.fit(X_train, y_train)\ngs_preds=gs.predict(X_test)\n","60055697":"submission_url = '\/content\/drive\/My Drive\/Colab Notebooks\/submission.csv'\ncreate_submission(gs_preds,X_test,submission_url)\n","51832199":"from sklearn.ensemble import RandomForestClassifier\nm = RandomForestClassifier(n_estimators=200,min_samples_leaf=3 ,n_jobs=-1,max_features=0.25)\n%time m.fit(X_train, y_train)\nm_preds= m.predict(X_test)","d571d938":"submission_url = '\/content\/drive\/My Drive\/Colab Notebooks\/submission.csv'\ncreate_submission(m_preds,X_test,submission_url)","685997da":"transformer = RobustScaler().fit(X)\ntransformer\ntransformer.transform(X)","05ae4c6e":"m = RandomForestClassifier(n_estimators=200,min_samples_leaf=3 ,n_jobs=-1,max_features=0.25)\n%time m.fit(X_train, y_train)\nm_preds= m.predict(X_test)","a8cc87a3":"submission_url = '\/content\/drive\/My Drive\/Colab Notebooks\/submission.csv'\ncreate_submission(m_preds,X_test,submission_url)","f7c0fc81":"## Data Prep\n \n Make sure any changes made to the Training-dataset are also made to the Test-dataset","cb88ae64":"## Load DATA","82ba5582":"## Attempt 3 : Setup a Pipeline and Cross Validate\nThis gets a [**Kaggle Score**](https:\/\/www.kaggle.com\/c\/ds1-predictive-modeling-challenge\/submissions?sortBy=date&group=all&page=1) of : ** .69424**\n\nDocs for [GridSearchCV](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.GridSearchCV.html) [scoring parameter](https:\/\/scikit-learn.org\/stable\/modules\/model_evaluation.html)\n\n","7eb7a7d5":"## Create baseline submission","c412f186":" # Class Challenge : Predicting Water Pump Failure in Tanzania     \n\nIntro [Video]( https:\/\/www.youtube.com\/watch?v=NsKpvxpX_eU&feature=youtu.be)\n\nOpen Classroom Review [video](https:\/\/www.youtube.com\/watch?v=4B4EP6eTzLk)\n\nReference Articles:\n*   [Begin with baseline models](https:\/\/github.com\/rrherr\/baselines\/blob\/master\/Begin%20with%20baseline%20models.ipynb)\n*   [Visiting: Categorical Features and Encoding in Decision Trees](https:\/\/medium.com\/data-design\/visiting-categorical-features-and-encoding-in-decision-trees-53400fa65931)","d44b849b":"## Null Values","186dbae2":"## Attempt 4 :  Random Forest\nThis gets a [**Kaggle Score**](https:\/\/www.kaggle.com\/c\/ds1-predictive-modeling-challenge\/submissions?sortBy=date&group=all&page=1) of : ** .79704**","e3d04d6a":"**Create All Majority-class Predictions**","d5351741":"## Attempt  : SUPPORT VECTOR MACHINE \n\nSVM CLASSIFIER, INTRODUCTION TO [SUPPORT VECTOR MACHINE ALGORITHM](https:\/\/dataaspirant.com\/2017\/01\/13\/support-vector-machine-algorithm\/)\n","05bc69b5":"## Create Model Data","37aaf2c9":"**Look at Percentage of value counts**","ac4b4c03":"## Attempt 2  :  using SKlearn -  LogisticRegression \nThis gets a [**Kaggle Score**](https:\/\/www.kaggle.com\/c\/ds1-predictive-modeling-challenge\/submissions?sortBy=date&group=all&page=1) of : ** .72558**\n SKLearn [Logistic Regression](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html) Docs\n \n [2 WAYS TO IMPLEMENT MULTINOMIAL LOGISTIC REGRESSION IN PYTHON](http:\/\/dataaspirant.com\/2017\/05\/15\/implement-multinomial-logistic-regression-python\/)\n \n ","56e89996":"## Attempt : Extreme Gradient Boost\n\nPractical [XgBoost](https:\/\/www.youtube.com\/playlist?list=PLZnYQQzkMilqTC12LmnN4WpQexB9raKQG) in Python\n\n[Notebooks](https:\/\/github.com\/ParrotPrediction\/docker-course-xgboost\/tree\/master\/notebooks) for Practical Xgboost in Python\n\n\n","f9801eb9":"## One Hot Encode Features with multiple values\n\n[CE encoder](http:\/\/contrib.scikit-learn.org\/categorical-encoding\/onehot.html)\n\nSKlearn [Preprocessing](https:\/\/scikit-learn.org\/stable\/modules\/classes.html#module-sklearn.preprocessing)\n","5f21134c":"**Establish Mode as Majority Class**","6192120a":"### Run prediction and create submission csv","3db2e908":"###  Quick Viz inspired by Sir Ryan Herr","4840c2e8":"###  Combine the features and labels for data wrangling","54966b07":"## IMPORTS and EXPORTS","53ca0e51":"### Feature engineering\n   \n   use year_constucted to calculate age of pump","b6d43b28":"<a href=\"https:\/\/colab.research.google.com\/github\/ed-chin-git\/DS-Unit2-Kaggle-Competition\/blob\/master\/Unit_2_Kaggle_Competition_Tanzanian_Water_Pumps.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","1f33781a":"## Drop Features that may be meaningless","ac975606":"## Attempt 5 :  RobustScaler + Random Forest\nThis gets a [**Kaggle Score**](https:\/\/www.kaggle.com\/c\/ds1-predictive-modeling-challenge\/submissions?sortBy=date&group=all&page=1) of : ** .?????**","179fa548":"## SIMPLE BASELINE  submission using Majority Class\n\n\nThis gets a [**Kaggle Score**](https:\/\/www.kaggle.com\/c\/ds1-predictive-modeling-challenge\/submissions?sortBy=date&group=all&page=1) of : ** .53754**"}}