{"cell_type":{"bfb54671":"code","e85ff6f3":"code","610e7e08":"code","f024599c":"code","7b0460ea":"code","2d59d5e7":"code","8c57d015":"code","f8fde170":"code","e2226305":"code","b78c57be":"code","3c6df51c":"code","e9d12404":"code","44b07d90":"code","a3a6790a":"code","0cc2e0d9":"code","fca9dde9":"code","7318c641":"code","9361436e":"code","8b7fc5a0":"markdown","06f90b5f":"markdown","169ff12e":"markdown","ce323533":"markdown","df276e0f":"markdown","e34d4e8d":"markdown","834dc99a":"markdown","00031df0":"markdown","63aa55da":"markdown","102922d8":"markdown","470d5810":"markdown","44c151be":"markdown","463e7cad":"markdown","dcddd0b6":"markdown","48907b44":"markdown","9d74a626":"markdown","b584d1b5":"markdown","8ca8ad1c":"markdown","3dc0bfa8":"markdown"},"source":{"bfb54671":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e85ff6f3":"data=pd.read_csv(\"\/kaggle\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv\")","610e7e08":"data.head()","f024599c":"data.shape","7b0460ea":"data.describe()","2d59d5e7":"data.drop([\"gameId\"],axis=1,inplace=True)","8c57d015":"data.head()","f8fde170":"y=data.blueWins.values\nx_data=data.drop([\"blueWins\"],axis=1)","e2226305":"x=(x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","b78c57be":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=42)","3c6df51c":"x_train = x_train.T #columlarla rowlar\u0131n yerini degi\u015ftirdik x ler i\u00e7in\nx_test = x_test.T\ny_train = y_train.T#rowlarla columlar\u0131n yerini degi\u015ftirdik y ler i\u00e7in\ny_test = y_test.T","e9d12404":"print(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)\n","44b07d90":"#parameter initialize\n#dimension:38\ndef initialize_weights_and_bias(dimension):\n    w=np.full((dimension,1),0.01)\n    b=0.0\n    return w,b\n\n","a3a6790a":"#sigmoid function\ndef sigmoid(z):\n    y_head=1\/(1+np.exp(-z))\n    return y_head","0cc2e0d9":"def forward_backward_propagation(w,b,x_train,y_train):\n    #fogward propagation\n    z=np.dot(w.T,x_train)+b\n    y_head=sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost=(np.sum(loss))\/x_train.shape[1]\n    #backward_propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] \n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 \n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients","fca9dde9":"def update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n         # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","7318c641":"def predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","9361436e":"def logistic_regression(x_train,y_train,x_test,y_test,learning_rate,num_iterations):\n    dimension =  x_train.shape[0]  \n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n     \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate =1 , num_iterations = 250)","8b7fc5a0":"* A\u015fag\u0131daki kodun a\u00e7\u0131klamas\u0131\n## forward propagation: \u0130lk olarak X degerlerimizi weight'lerle \u00e7arp\u0131p bias ile toplar\u0131z.Sonuc olarak bir deger \u00e7\u0131kar bu degere z deriz. bu z degerimizi Sigmoid Function'\u0131n i\u00e7ine yollar\u0131z.Sigmoid function bu z degerimizi 0 ile bir degeri  aras\u0131nda bir sonu\u00e7 \u00e7\u0131kt\u0131s\u0131 verir.Bu sonuca Y_head degeri deriz.\n","06f90b5f":"Bu k\u0131s\u0131mda tahmin etme olay\u0131n\u0131 ger\u00e7ekle\u015ftiricem.Sigmoid fucntion da bir TreShoul degeri belirledik bu deger 0.5.\n* Eger z degerim 0.5 den b\u00fcy\u00fckse y_head=1\n* Eger z degerim 0.5 den kucukse y_head=0 , tahmin edicek.","169ff12e":"# Logistic Regression","ce323533":"Backward Propagation ise t\u00fcrev alma i\u015flemidir.Weight ve bias degerlerimin t\u00fcrevlerini almakt\u0131r.","df276e0f":"# Predict (Tahmin etme)","e34d4e8d":"gameld ile i\u015fim olmad\u0131g\u0131 i\u00e7in drop ettim.","834dc99a":"sigmoid function matematiksel ifadesi y=1\/1+e \u00fczeri -x\n\n","00031df0":"Umar\u0131m faydal\u0131 olmu\u015ftur.Begenmeden ge\u00e7meyelim :)","63aa55da":"x ve y degerlerimizi belirledim","102922d8":"# Update\n\n","470d5810":"* Learning_rate :\u00d6grenme h\u0131z\u0131 \n* Number of iteration:Deneme say\u0131s\u0131\n* w:w-slope\n* b:b-slope\n","44c151be":"BlueWins =1 kazand\u0131,BlueWins=0 ise kaybetti\n","463e7cad":"# LOG\u0130ST\u0130C REGRESS\u0130ON\n\n\u0130NSTAGRAM:cuneytaykac_\n\nFaydal\u0131 olmas\u0131 dileklerimle...\n# #Evde Kal","dcddd0b6":"##### random_state=42 yazmam\u0131z\u0131n nedeni plot ettiricegimiz zaman random \u015fekilde degerleri random \u015fekilde b\u00f6lme i\u015flemi yap\u0131cak ve her zaman ayn\u0131 random degerinde b\u00f6lme i\u015flemi ger\u00e7ekle\u015ftiricek.","48907b44":"S\u0131ra geldi elimizde datay\u0131 b\u00f6lme i\u015flemine.Elimizdeki data y\u0131 test ve train olarak b\u00f6lmemiz laz\u0131m ben %25 test %75 train \u015feklinde b\u00f6l\u00fccem.","9d74a626":"## Elde ettigimiz bu y_head degeri ile as\u0131l olan y degerimizi kar\u015f\u0131la\u015ft\u0131r\u0131r\u0131z.hata varm\u0131 yokmu diye.Bu hata bulma olay\u0131na loss fonction denir.\n## matematiksel ifadesi \n* (-1-y) * log(1-y_head) -y*log(1-y_head)\n\n## Bu denklemi t\u00fcm y degerleri i\u00e7in uygular\u0131z ve cost degerlerimizi buluruz,ve toplar\u0131z.\n","b584d1b5":"x_data degerlerimi normalize edicem \u00e7\u00fcnk\u00fc plot ederken baz\u0131 degerlerin yok  olmamas\u0131 i\u00e7in","8ca8ad1c":"## FOGWARD AND BACKWARD PROPAGAT\u0130ONS\n\n* w:weight\n* b: bias\n* x:x_train\n* T:Transpoz alma\n","3dc0bfa8":"Mavi tak\u0131m\u0131n kazanma ve kaybetme say\u0131lar\u0131 \u00fczerinde logistic regression yap\u0131caz yani modelime \u00f6greticem."}}