{"cell_type":{"dc60f5b5":"code","fd9575d5":"code","3db14a59":"code","e083d44e":"code","a9168422":"code","a7c02672":"code","dc83ce4d":"code","c99dd38a":"code","d6cdc91c":"code","1942723d":"code","4d4e19ff":"code","a392a004":"code","096a4af5":"code","6d4c6d2b":"code","157f2a38":"code","5d674f76":"code","6e45bc99":"code","3da7aeb4":"code","65ad27ad":"markdown","78acd618":"markdown","c6fe4e37":"markdown","1ed470c7":"markdown","c99e3500":"markdown","526ec712":"markdown"},"source":{"dc60f5b5":"import tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tensorflow import keras\nfrom keras.layers import Dense\nfrom keras import backend\nfrom sklearn.model_selection import train_test_split, cross_val_score, KFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.utils import resample\n\nSEED = 23\n\ntrain_df = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-3\/train.csv')\neval_df = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-3\/eval.csv')","fd9575d5":"for col in train_df.columns:\n    na_vals = train_df[col].isna().sum()\n    if na_vals > 0:\n        print(\"Column %s has %d missing vals\" % (col, na_vals))\n\nprint((train_df.isna().sum() > 0).sum())","3db14a59":"X = train_df.drop(['id', 'pubchem_id', 'Eat'], axis=1)\ny = train_df['Eat']\nX.shape","e083d44e":"def rmse(y_true, y_pred):\n    return mean_squared_error(y_true, y_pred, squared=False)\n\ndef create_bootstrap_rmse(estimator, num_boots=200):\n    # Getting the distribution of the RMSE of the hold out set using bootstrapping\n    n_boots = num_boots\n    bootstrap_errors = np.zeros(n_boots)\n    for i in range(n_boots):\n        if i % 50 == 0:\n            print('Bootstrap #%f' % i)\n        bs_X, bs_y = resample(X_test, y_test)\n        bs_pred = estimator.predict(bs_X)\n        bootstrap_errors[i] = rmse(bs_y, bs_pred)\n\n    percs = np.percentile(bootstrap_errors, (2.5, 97.5), axis=0)\n\n    fig, ax = plt.subplots()\n    ax.hist(bootstrap_errors, bins=50)\n\n    print('The 95 percent confidence interval for the error of this model is [%f, %f]' % (percs[0], percs[1]))\n    bs_df = pd.DataFrame(bootstrap_errors)\n    print(bs_df.describe())\n\ndef print_results(estimator, bootstrap=True):\n    train_pred = estimator.predict(X_train)\n    y_pred = estimator.predict(X_test)\n\n    print(y_pred)\n    print('The train error is %f' % rmse(y_train, train_pred))\n    print(\"The test error is %f\" % rmse(y_test, y_pred))\n    if bootstrap:\n        create_bootstrap_rmse(estimator)\n\ndef root_mean_square_error(y_true, y_pred):\n    return backend.sqrt(backend.mean(backend.square(y_true - y_pred)))","a9168422":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","a7c02672":"model1 = keras.Sequential()\nmodel1.add(keras.layers.InputLayer(input_shape=(1275,)))\nmodel1.add(Dense(200, activation=\"elu\"))\nmodel1.add(Dense(1))\nmodel1.compile(loss='mean_squared_error', optimizer='adam')\n\nmodel1.fit(X_train, y_train, epochs=10, validation_split=0.2)","dc83ce4d":"print_results(model1)","c99dd38a":"model2 = keras.Sequential()\nmodel2.add(keras.layers.InputLayer(input_shape=(1275,)))\nmodel2.add(Dense(800, activation='elu'))\nmodel2.add(Dense(400, activation='elu'))\nmodel2.add(Dense(1, activation='linear'))\nmodel2.compile(loss='mean_squared_error', optimizer='adam')\n\nmodel2.fit(X_train, y_train, epochs=10, validation_split=0.2)","d6cdc91c":"print_results(model2)","1942723d":"model3 = keras.Sequential()\nmodel3.add(keras.layers.InputLayer(input_shape=(1275,)))\nmodel3.add(Dense(1000, activation='elu'))\nmodel3.add(Dense(800, activation='elu'))\nmodel3.add(Dense(600, activation='elu'))\nmodel3.add(Dense(400, activation='elu'))\nmodel3.add(Dense(200, activation='elu'))\nmodel3.add(Dense(50, activation='elu'))\nmodel3.add(Dense(1, activation='linear'))\nmodel3.compile(loss='mean_squared_error', optimizer='adam')\n\nmodel3.fit(X_train, y_train, epochs=10, validation_split=0.2)","4d4e19ff":"print_results(model3)","a392a004":"model4 = keras.Sequential()\nmodel4.add(Dense(800, activation='elu'))\nmodel4.add(Dense(400, activation='elu'))\nmodel4.add(Dense(1))\nmodel4.compile(loss='mean_squared_error', optimizer='adam')\n\nmodel4.fit(X_train, y_train, epochs=100, validation_split=0.2)","096a4af5":"print_results(model4)","6d4c6d2b":"model5 = keras.Sequential()\nmodel5.add(Dense(100, activation='elu'))\nmodel5.add(Dense(75, activation='elu'))\nmodel5.add(Dense(50, activation='elu'))\nmodel5.add(Dense(25, activation='elu'))\nmodel5.add(Dense(1))\nmodel5.compile(loss='mean_squared_error', optimizer='adam')\n\nmodel5.fit(X_train, y_train, epochs=200, validation_split=0.2)","157f2a38":"print_results(model5)","5d674f76":"layers = 5\nnodes = 20\nmodel6 = keras.Sequential()\nmodel6.add(Dense(100, activation='elu'))\nmodel6.add(Dense(75, activation='elu'))\nmodel6.add(Dense(50, activation='elu'))\nmodel6.add(Dense(25, activation='elu'))\nmodel6.add(Dense(5, activation='elu'))\nmodel6.add(Dense(1))\nes = keras.callbacks.EarlyStopping(monitor='val_loss', patience=100)\nmodel6.compile(loss=root_mean_square_error, optimizer='adam')\n\nmodel6.fit(X_train, y_train, epochs=200, validation_split=0.2)","6e45bc99":"print_results(model6)","3da7aeb4":"eval_pred = model6.predict(eval_df.drop(['id', 'pubchem_id'], axis=1))\n\neval_frame = pd.DataFrame(data={'Eat':np.ravel(eval_pred)}, index=eval_df.index)\neval_frame.to_csv('submission.csv', index=True, index_label='id')\nprint(eval_frame.to_string())","65ad27ad":"# Model Selection","78acd618":"## Define some helper functions","c6fe4e37":"## Data is a symmetric matrix caled the Coulumb Matrix. Position aij relates the ith molecule to the jth molecule and describes the electric potential between the two. This will work fine as an input to the model on its own.\n","1ed470c7":"## Model 6 was chosen as when it achieved the best score submission on kaggle, it has a Train RMSE of 0.101752 and Test RMSE of about 0.121389, which resulted in a 0.12959 on the leaderboard.","c99e3500":"# Exploratory Data Analysis","526ec712":"## Missing Value Check. There are no missing values, so nothing to clean"}}