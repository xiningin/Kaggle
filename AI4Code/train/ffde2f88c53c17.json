{"cell_type":{"9c7ce02c":"code","9c59db1b":"code","b3cf3025":"code","4539737f":"code","9af29ab6":"code","767a53c3":"code","9cb38ab9":"code","657106bd":"code","5b052f39":"code","4d42eb78":"code","45af7090":"code","455e5c85":"code","59e62e79":"code","3a11acac":"code","72d7f086":"code","e1beef29":"markdown","451d7e2a":"markdown","fe9d7165":"markdown","af6568a3":"markdown","a72dbf3c":"markdown","c4839aea":"markdown"},"source":{"9c7ce02c":"# imports \nimport math\nimport numpy as np \nimport pandas as pd \nimport plotly.express as ex\nimport plotly.graph_objects as go\nimport plotly.offline as pyo\nfrom datetime import datetime\npyo.init_notebook_mode()","9c59db1b":"# load data\nvacc_df = pd.read_csv(\"\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")\nsummary_df = pd.read_csv(\"\/kaggle\/input\/covid19-global-dataset\/worldometer_coronavirus_summary_data.csv\")\ndaily_df = pd.read_csv(\"\/kaggle\/input\/covid19-global-dataset\/worldometer_coronavirus_daily_data.csv\")","b3cf3025":"# Identify the differences\nprint(\"Countries in the Vaccination Data not in Summary Data\")\nprint([x for x in vacc_df.country.unique() if x not in summary_df.country.unique()])","4539737f":"# Implement the above\nvacc_df.country = vacc_df.country.replace().replace({\n    \"Czechia\": \"Czech Republic\", \n    \"United States\": \"USA\", \n    \"United Kingdom\": \"UK\", \n    \"Isle of Man\": \"Isle Of Man\",\n    \"Republic of Ireland\": \"Ireland\",\n    \"Northern Cyprus\" : \"Cyprus\"\n})\n\n# drop these 3 since they are included in UK \nvacc_df = vacc_df[vacc_df.country.apply(lambda x: x not in ['England', 'Scotland', 'Wales', 'Northern Ireland'])]","9af29ab6":"# function to easily agrregate columns\ndef aggregate(df: pd.Series, agg_col: str) -> pd.DataFrame:\n    \n    data = df.groupby(\"country\")[agg_col].max()\n    data = pd.DataFrame(data)\n    \n    return data","767a53c3":"# define the columns we want to summarize\ncols_to_summarize = ['people_vaccinated', \n                     'people_vaccinated_per_hundred', \n                     'people_fully_vaccinated', \n                     'people_fully_vaccinated_per_hundred', \n                     'total_vaccinations_per_hundred', \n                     'total_vaccinations']\n\nsummary = summary_df.set_index(\"country\")\nvaccines = vacc_df[['country', 'vaccines']].drop_duplicates().set_index('country')\nsummary = summary.join(vaccines)\n\nfor col in cols_to_summarize:   \n    summary = summary.join(aggregate(vacc_df, col))\n\nsummary['percentage_vaccinated'] = summary.total_vaccinations \/ summary.population * 100\nsummary['tested_positive'] = summary.total_confirmed \/ summary.total_tests * 100","9cb38ab9":"# Data used for this section\nsummary.head(5)","657106bd":"# helper functions \ndef get_multi_line_title(title:str, subtitle:str):\n    return f\"{title}<br><sub>{subtitle}<\/sub>\"\n\ndef visualize_column(data: pd.DataFrame, xcolumn: str, ycolumn:str, title:str, colors:str, ylabel=\"Count\", n=None):\n    hovertemplate ='<br><b>%{x}<\/b>'+f'<br><b>{ylabel}: <\/b>'+'%{y}<br><extra><\/extra>'    \n    data = data.sort_values(ycolumn, ascending=False).dropna(subset=[ycolumn])        \n    \n    if n is not None: \n        data = data.iloc[:n]\n    else:\n        n = \"\"\n    fig = go.Figure(go.Bar(\n                    hoverinfo='skip',\n                     x=data[xcolumn], \n                     y=data[ycolumn], \n                     hovertemplate = hovertemplate,\n                     marker=dict(\n                         color = data[ycolumn],\n                         colorscale=colors,\n                        ),\n                    ),\n                )\n    \n    fig.update_layout(\n        title=title,\n        xaxis_title=f\"Top {n} {xcolumn.title()}\",\n        yaxis_title=ylabel,\n        plot_bgcolor='rgba(0,0,0,0)',\n        hovermode=\"x\"\n    )\n    \n    fig.show()\n","5b052f39":"title = get_multi_line_title(\"People Vaccinated\", \"Individuals who received the first dose of the vaccine\")\nvisualize_column(summary.reset_index(), 'country', \"total_vaccinations\", title, \"Blugrn\", n=20 )","4d42eb78":"title = get_multi_line_title(\"Percentage Vaccinated\", \"Percentage of the total population that have received the first dose\")\nvisualize_column(summary.reset_index(), 'country', \"percentage_vaccinated\", title, \"Purp\", \"Percentage(%)\", n=20)","45af7090":"title = get_multi_line_title(\"People Fully Vaccinated\", \"Individuals who have received all doses of the vaccine\")\nvisualize_column(summary.reset_index(), 'country', \"people_fully_vaccinated\", title, \"Pinkyl\", n=20 )","455e5c85":"title = get_multi_line_title(\"Tested Positive \", \"Fraction of  people that tested positive among those that were tested\")\nvisualize_column(summary.reset_index(), 'country',\"tested_positive\", title, \"Reds\", n=20, ylabel='Percentage' )","59e62e79":"data = summary.dropna(subset=['vaccines'])\ndata = summary.groupby('vaccines')['total_vaccinations'].sum()\ndata = pd.DataFrame(data).reset_index()\n\ntitle = get_multi_line_title(\"Vaccines In Use\", \"Popular Vaccine Combinations that are used around the globe\")\nvisualize_column(data, 'vaccines',\"total_vaccinations\", title, \"RdBu\" )","3a11acac":"data = summary.dropna(subset=['serious_or_critical'])\ndata = data.reset_index()\n\ntitle = get_multi_line_title(\"Serious or Critical Cases\", \"Number of people who are currently critically ill due to Covid-19\")\nvisualize_column(data, 'country',\"serious_or_critical\", title, \"turbid\", n=20)","72d7f086":"title = get_multi_line_title(\"Popular Vaccines\", \"Vaccines being admisitered around the world\")\ndata = summary.reset_index().dropna(subset=['vaccines'])\nfig = ex.choropleth(data, locations=\"country\", \n                    locationmode='country names',\n                    color=\"vaccines\", \n                    hover_name=\"country\", \n                   )\n\n\nfig.update_layout(title=title, \n                  title_x=0.5)\nfig.show()","e1beef29":"# Data Cleaning\u00b6\nThe most important step to take before we get started geenrating any kind of information from all these data sources, it is first important to clean our data and make sure that the datasets are compatible with each other. Since most of the data is divided on a country-by-country basis, we must make sure that all the country names have the same formatting.\n\nFor instance, \"United States of America\" may be written as \"USA\", \"United Kingdom\" as \"UK\" and so on. We will explore this problem and others in this section. We will prioritize only those countries for which vaccination data is available since most countries have either not yet started vaccinations or do not yet have sufficiently available public data.","451d7e2a":"# Summary\n\n\n* Data Cleaning : Preprocessing and standardization.\n* Data Summarization : Combine the daily vaccine information with the existing virus summary.\n* Summary Visualizations : Generate attractive bar plots for various summaries.\n* Global Statistics Visualization : Compare the daily new cases, active cases and deaths.\n* Vaccine Preferences : Visualize the vaccine combinations in use around the globe.\n\nThanks for taking the time to read this notebook. If you liked it, an UPVOTE is massively encouraging! I will try to keep this notebook updated and add in more visualizations in the future so be sure to check back soon!","fe9d7165":"# Visualizations\nGreat! So now we have our data ready. But plain numbers are boring and hard to grasp clearly. So let's turn them into colors and patterns!","af6568a3":"Visualizing Summaries\nLet us plot some bargraphs using the helper functions we defined above, in tandem with the data we so meticulously processed","a72dbf3c":"#  Visualizing Summaries\nLet us plot some bargraphs using the helper functions we defined above, in tandem with the data we so meticulously processed","c4839aea":"Replace\n\n'Czechia' == \"Czech Republic\"\n'Isle of Man' == \"Isle Of Man\"\n'United Kingdom' == \"UK\"\n'United States' == \"USA\"\n'Northern Cyprus' == \"Cyprus\"\nDrop\n\nEngland\nWales\nScotland\nNorthern Ireland\n(since they are a part of the UK)"}}