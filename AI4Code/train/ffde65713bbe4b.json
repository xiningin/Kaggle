{"cell_type":{"dcaa6127":"code","d431da91":"code","99dc01f1":"code","c506f526":"code","cd2748a3":"code","06fad8c0":"code","c44ec124":"code","7180d109":"code","49da4bc4":"code","623d6a5d":"code","10901c8b":"code","f2ad3537":"code","a675fc16":"code","77be09d2":"code","fc14ec4a":"code","0a6c475f":"code","627b4600":"code","5c91d9e4":"code","d74fdf75":"code","914c40d5":"code","d15afb4e":"code","fe627ef3":"code","59733d79":"code","eec1e6b1":"markdown","64574595":"markdown"},"source":{"dcaa6127":"#importing required libraries\nimport tensorflow as tf\nprint(tf.__version__)\n\nimport random\nimport numpy as np\nimport pandas as pd\nfrom tensorflow.keras import models\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import regularizers\nfrom keras.callbacks import ModelCheckpoint \nfrom sklearn import metrics  \nimport time\n\nimport keras\n\nimport matplotlib.pyplot as plt\n\nimport itertools\n!pip install helper\n\nimport helper\n\nfrom keras.models import Model,Sequential\nfrom keras.layers import Input\nfrom keras.layers.core import Dropout,Flatten,Dense\nfrom keras.layers.convolutional import Conv2D,MaxPooling2D\nfrom keras.callbacks import EarlyStopping,ModelCheckpoint\n\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom keras.applications.densenet import DenseNet201\nfrom keras.applications.resnet import ResNet152\n\nfrom keras.preprocessing.image import ImageDataGenerator","d431da91":"import tensorflow as tf\nprint(\"GPUs Available: \", tf.config.list_physical_devices('GPU'))\nprint(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))","99dc01f1":"import os\ndata_dir = \"..\/input\/new-plant-diseases-dataset\/New Plant Diseases Dataset(Augmented)\/New Plant Diseases Dataset(Augmented)\"\ntrain_dir = data_dir + \"\/train\"\nvalid_dir = data_dir + \"\/valid\"\ndiseases = os.listdir(train_dir)\ndiseases","c506f526":"print(\"Total disease classes are: {}\".format(len(diseases)))","cd2748a3":"# train_datagen_orig = ImageDataGenerator(rescale = 1.\/255)\n# test_datagen_orig = ImageDataGenerator(rescale = 1.\/255)","06fad8c0":"'''\ntraining_set_orig = train_datagen_orig.flow_from_directory(directory=train_dir,\n                                               target_size=(224, 224), # As we choose 64*64 for our convolution model\n                                               batch_size=500,\n                                               class_mode='categorical') # for 2 class binary \n\ntest_set_orig = test_datagen_orig.flow_from_directory(directory=valid_dir,\n                                               target_size=(224, 224), # As we choose 64*64 for our convolution model\n                                               batch_size=500,\n                                               class_mode='categorical',\n                                               shuffle=False) # for 2 class binary\n# shuffle=False for test set Refer--> https:\/\/github.com\/keras-team\/keras\/issues\/10014\n'''","c44ec124":"train_datagen_aug = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   rotation_range = 20,\n                                   horizontal_flip = True)\n\ntest_datagen_aug = ImageDataGenerator( rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   rotation_range = 20,\n                                   horizontal_flip = True)","7180d109":"training_set_aug = train_datagen_aug.flow_from_directory(directory= train_dir,\n                                               target_size=(224, 224), # As we choose 64*64 for our convolution model\n                                               batch_size=50,\n                                               class_mode='categorical') # for 2 class binary \nlabel_map = (training_set_aug.class_indices)\nprint(\"Target Classes Mapping Dict:\\n\")\nprint(label_map)\n\ntest_set_aug = test_datagen_aug.flow_from_directory(directory= valid_dir,\n                                               target_size=(224, 224), # As we choose 64*64 for our convolution model\n                                               batch_size=50,\n                                               class_mode='categorical',\n                                               shuffle=False) # for 2 class binary\n# shuffle=False for test set Refer--> https:\/\/github.com\/keras-team\/keras\/issues\/10014","49da4bc4":"# print(type(training_set_orig))\n# print(training_set_aug.__len__())","623d6a5d":"# Early Stopping\ncallback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', min_delta=0.0025, patience=2, verbose=1)","10901c8b":"\nbase_model = DenseNet201(include_top=False,\n                         input_shape=(224,224,3),\n                         weights='imagenet',\n                         pooling=\"avg\"\n                     )\n'''\nbase_model = ResNet152(\n                        include_top=False, \n                        weights='imagenet',\n                        input_shape=(224, 224, 3), \n                        pooling=\"avg\"\n                      )\n'''\n\nbase_model.trainable = False\nimage_input = Input(shape=(224, 224, 3))\n\nx = base_model(image_input,training = False)\n\nx = Dense(256,activation = \"relu\")(x)\nx = Dropout(0.2)(x)\n\nx = Dense(128,activation = \"relu\")(x)\nx = Dropout(0.2)(x)\n\nimage_output = Dense(38,activation=\"softmax\")(x)\n\nmodel = Model(image_input,image_output)","f2ad3537":"model.compile(optimizer=\"adam\",loss=\"categorical_crossentropy\",metrics=[\"accuracy\"])\nprint(model.summary())","a675fc16":"hist = model.fit(training_set_aug, epochs=30, validation_data=test_set_aug, callbacks=[callback])","77be09d2":"# Print and Plot the Training History\nimport matplotlib.pyplot as plt\n\n# list all data in history\nprint(hist.history.keys())","fc14ec4a":"print(hist.history)","0a6c475f":"# summarize history for accuracy\nplt.plot(hist.history['accuracy'])\nplt.plot(hist.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","627b4600":"# summarize history for loss\nplt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","5c91d9e4":"# Saving the model in Kaggle Working Directory\nmodel.save('\/kaggle\/working\/model_trained.pkl')","d74fdf75":"# Saving the model in Kaggle Working Directory\nmodel.save('\/kaggle\/working\/model_trained.h5')","914c40d5":"# serialize model to JSON\nmodel_json = model.to_json()\nprint(model_json)\nwith open('\/kaggle\/working\/model.json', 'w') as json_file:\n    json_file.write(model_json)","d15afb4e":"# serialize weights to HDF5\nmodel.save_weights(\"\/kaggle\/working\/model_weights.h5\")\nprint(\"Saved model to disk\")","fe627ef3":"os.listdir('.\/')\nprint(os.path.getsize('.\/model_weights.h5'))","59733d79":"# Prediction\nx, y = next(test_set_aug)\nfor i in range(0,1):\n    image = x[i]\n    plt.imshow(image)\n    plt.show()\n    image = image.reshape(1, 224, 224, 3)\n    pred_vec = model.predict(image)\n    print(pred_vec.shape)\n    pred_max = np.argmax(pred_vec,axis=1)\n    print(pred_max)","eec1e6b1":"#### Early Stopping in Keras\nhttps:\/\/keras.io\/api\/callbacks\/early_stopping\/ <br>\nhttps:\/\/machinelearningmastery.com\/how-to-stop-training-deep-neural-networks-at-the-right-time-using-early-stopping\/\n\n#### Saving and Loading Keras Model\nhttps:\/\/www.tensorflow.org\/guide\/keras\/save_and_serialize#how_to_save_and_load_a_model","64574595":"# \ud83c\udf3f\ud83c\udf40**Plant Disease Identification**\ud83c\udf3f\ud83c\udf40 \n# **With Transfer Learning**\n# **Using DenseNet and Sequential NN**"}}