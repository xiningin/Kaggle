{"cell_type":{"4e1db51d":"code","1c8135f2":"code","7e12fcd8":"code","d7411b65":"code","72140991":"code","bf89faa2":"code","5ba00b3d":"code","78bd6013":"code","c1c0f8f0":"code","d517285f":"code","526eee30":"code","fe9bfb5b":"code","62cd3404":"code","26560628":"code","3fd66892":"code","1abdf6ea":"markdown","151048b0":"markdown","53ae1d7d":"markdown","cb7a385a":"markdown","0e7138d3":"markdown","4b4f2377":"markdown","4a238294":"markdown"},"source":{"4e1db51d":"import janestreet\nimport numpy as np\nimport pandas as pd\n\nimport os, sys\nimport gc\nimport math\nimport random\nimport pathlib\nfrom tqdm import tqdm\nfrom typing import List, NoReturn, Union, Tuple, Optional, Text, Generic, Callable, Dict\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler, QuantileTransformer\nfrom tqdm import tqdm_notebook as tqdm\n\n# keras\nimport tensorflow as tf\nimport tensorflow_addons as tfa\n\n# visualize\nimport matplotlib.pyplot as plt\nimport matplotlib.style as style\nimport seaborn as sns\nfrom matplotlib_venn import venn2\nfrom matplotlib import pyplot\nfrom matplotlib.ticker import ScalarFormatter\nsns.set_context(\"talk\")\nstyle.use('fivethirtyeight')\npd.options.display.max_columns = None\n\nimport warnings\nwarnings.filterwarnings('ignore')","1c8135f2":"# tf setup\nprint(\"Tensorflow version \" + tf.__version__)\nAUTO = tf.data.experimental.AUTOTUNE\n\nMIXED_PRECISION = False\nXLA_ACCELERATE = True\n\nif MIXED_PRECISION:\n    from tensorflow.keras.mixed_precision import experimental as mixed_precision\n    if tpu: policy = tf.keras.mixed_precision.experimental.Policy('mixed_bfloat16')\n    else: policy = tf.keras.mixed_precision.experimental.Policy('mixed_float16')\n    mixed_precision.set_policy(policy)\n    print('Mixed precision enabled')\n\nif XLA_ACCELERATE:\n    tf.config.optimizer.set_jit(True)\n    print('Accelerated Linear Algebra enabled')\n","7e12fcd8":"DEBUG = False\n\nSEED = 2021 # Happy new year\nINPUT_DIR = '..\/input\/janestreet-save-as-feather\/'\nTRADING_THRESHOLD = 0.50 # 0 ~ 1: The smaller, the more aggressive\nDATE_BEGIN = 86 # 0 ~ 499: set 0 for model training using the complete data \nCV_STRATEGY = 'PurgedGroupTimeSeriesSplit' # StratifiedGroupKFold, GroupKFold, PurgedGroupTimeSeriesSplit\nFOLDS = 5 # number of folds\nTHRESHOLD = 0.5 # action threshold: the larger value, the more conservative\n\nSTAGE = 3 # pretrain (1), train (2), inference (3)\n\nif STAGE == 2:\n    WEIGHT_DIR = '..\/input\/janestreet-mlp-pretrain-stage1-weight-0\/'\nelif STAGE == 3:\n    WEIGHT_DIR = '..\/input\/janestreet-mlp-train-stage2-weight-0\/'","d7411b65":"import numpy as np\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# modified code for group gaps; source\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass PurgedGroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Allows for a gap in groups to avoid potentially leaking info from\n    train into test if the model has windowed or lag features.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_group_size : int, default=Inf\n        Maximum group size for a single training set.\n    group_gap : int, default=None\n        Gap between train and test\n    max_test_group_size : int, default=Inf\n        We discard this number of groups from the end of each train split\n    \"\"\"\n\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_group_size=np.inf,\n                 max_test_group_size=np.inf,\n                 group_gap=None,\n                 verbose=False\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_group_size = max_train_group_size\n        self.group_gap = group_gap\n        self.max_test_group_size = max_test_group_size\n        self.verbose = verbose\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        group_gap = self.group_gap\n        max_test_group_size = self.max_test_group_size\n        max_train_group_size = self.max_train_group_size\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n\n        group_test_size = min(n_groups \/\/ n_folds, max_test_group_size)\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n\n            group_st = max(0, group_test_start - group_gap - max_train_group_size)\n            for train_group_idx in unique_groups[group_st:(group_test_start - group_gap)]:\n                train_array_tmp = group_dict[train_group_idx]\n                \n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n\n            train_end = train_array.size\n \n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n\n            test_array  = test_array[group_gap:]\n            \n            \n            if self.verbose > 0:\n                    pass\n                    \n            yield [int(i) for i in train_array], [int(i) for i in test_array]","72140991":"import os\nimport sys\nimport numpy as np\nimport pandas as pd\nimport random\nfrom collections import Counter, defaultdict\nfrom sklearn import model_selection\n\n# ---- GroupKFold ----\nclass GroupKFold(object):\n    \"\"\"\n    GroupKFold with random shuffle with a sklearn-like structure\n    \"\"\"\n\n    def __init__(self, n_splits=4, shuffle=True, random_state=42):\n        self.n_splits = n_splits\n        self.shuffle = shuffle\n        self.random_state = random_state\n\n    def get_n_splits(self, X=None, y=None, group=None):\n        return self.n_splits\n\n    def split(self, X, y, group):\n        kf = model_selection.KFold(n_splits=self.n_splits, shuffle=self.shuffle, random_state=self.random_state)\n        unique_ids = X[group].unique()\n        for fold, (tr_group_idx, va_group_idx) in enumerate(kf.split(unique_ids)):\n            # split group\n            tr_group, va_group = unique_ids[tr_group_idx], unique_ids[va_group_idx]\n            train_idx = np.where(X[group].isin(tr_group))[0]\n            val_idx = np.where(X[group].isin(va_group))[0]\n            yield train_idx, val_idx\n\n# ---- StratifiedGroupKFold ----\nclass StratifiedGroupKFold(object):\n    \"\"\"\n    StratifiedGroupKFold with random shuffle with a sklearn-like structure\n    \"\"\"\n\n    def __init__(self, n_splits=4, shuffle=True, random_state=42):\n        self.n_splits = n_splits\n        self.shuffle = shuffle\n        self.random_state = random_state\n\n    def get_n_splits(self, X=None, y=None, group=None):\n        return self.n_splits\n\n    def split(self, X, y, group):\n        labels_num = np.max(y) + 1\n        y_counts_per_group = defaultdict(lambda: np.zeros(labels_num))\n        y_distr = Counter()\n        groups = X[group].values\n        for label, g in zip(y, groups):\n            y_counts_per_group[g][label] += 1\n            y_distr[label] += 1\n\n        y_counts_per_fold = defaultdict(lambda: np.zeros(labels_num))\n        groups_per_fold = defaultdict(set)\n\n        def eval_y_counts_per_fold(y_counts, fold):\n            y_counts_per_fold[fold] += y_counts\n            std_per_label = []\n            for label in range(labels_num):\n                label_std = np.std([y_counts_per_fold[i][label] \/ y_distr[label] for i in range(self.n_splits)])\n                std_per_label.append(label_std)\n            y_counts_per_fold[fold] -= y_counts\n            return np.mean(std_per_label)\n        \n        groups_and_y_counts = list(y_counts_per_group.items())\n        random.Random(self.random_state).shuffle(groups_and_y_counts)\n\n        for g, y_counts in sorted(groups_and_y_counts, key=lambda x: -np.std(x[1])):\n            best_fold = None\n            min_eval = None\n            for i in range(self.n_splits):\n                fold_eval = eval_y_counts_per_fold(y_counts, i)\n                if min_eval is None or fold_eval < min_eval:\n                    min_eval = fold_eval\n                    best_fold = i\n            y_counts_per_fold[best_fold] += y_counts\n            groups_per_fold[best_fold].add(g)\n\n        all_groups = set(groups)\n        for i in range(self.n_splits):\n            train_groups = all_groups - groups_per_fold[i]\n            test_groups = groups_per_fold[i]\n\n            train_idx = [i for i, g in enumerate(groups) if g in train_groups]\n            test_idx = [i for i, g in enumerate(groups) if g in test_groups]\n\n            yield train_idx, test_idx\n","bf89faa2":"os.listdir(INPUT_DIR)","5ba00b3d":"train = pd.read_feather('..\/input\/janestreet-save-as-feather\/train.feather') # faster data load","78bd6013":"# remove weight = 0 for saving memory \noriginal_size = train.shape[0]\n\n# use data later than DATE_BEGIN\ntrain = train.query(f'date >= {DATE_BEGIN}')\n\n# training stage\nif STAGE == 1:\n    train = train.query('weight == 0').reset_index(drop=True)\nelif STAGE == 2:\n    train = train.query('weight > 0').reset_index(drop=True)\nelif STAGE == 3:\n    train = train.query('weight > 0').reset_index(drop=True)\n    print('inference')\n\nprint('Train size reduced from {:,} to {:,}.'.format(original_size, train.shape[0]))","c1c0f8f0":"train = train.astype({c: np.float32 for c in train.select_dtypes(include='float64').columns}) #limit memory use\ntrain.fillna(train.mean(),inplace=True)\ntrain['action'] =  (  (train['resp_1'] > 0 ) & (train['resp_2'] > 0 ) & (train['resp_3'] > 0 ) & (train['resp_4'] > 0 ) &  (train['resp'] > 0 )   ).astype('int')\nfeatures = [c for c in train.columns if 'feature' in c]\n\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']","d517285f":"if DEBUG:\n    train = train.sample(10000, random_state=SEED)\n\nX = train[features].values\ny = np.stack([(train[c] > 0).astype('int') for c in resp_cols]).T #Multitarget\n\nf_mean = np.mean(train[features[1:]].values,axis=0)","526eee30":"def seed_everything(seed : int) -> NoReturn :    \n    random.seed(seed)\n    np.random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    tf.random.set_seed(seed)\n\nseed_everything(SEED)","fe9bfb5b":"nn_params = {\n    'hidden_unit': 256,\n    'num_layers': 3,\n    'gaussnoise': 0.01,\n    'dropout': 0.2,\n    'learning_rate': 1e-03,\n    'label_smoothing': 1e-02,\n    'batch_size': 1024,\n    'epochs': 196\n}\n\ndef create_model(nn_params, input_dim, output_dim):\n    # input\n    inputs = tf.keras.layers.Input(input_dim)\n    \n    # normalize\n    x = tf.keras.layers.BatchNormalization()(inputs)\n    \n    # ffn\n    for i in range(nn_params['num_layers']):\n        x = tf.keras.layers.Dense(nn_params['hidden_unit'] \/\/ (2 ** i), activation='relu')(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.GaussianNoise(nn_params['gaussnoise'])(x)\n        x = tf.keras.layers.Dropout(nn_params['dropout'])(x)\n    x = tf.keras.layers.Dense(output_dim, activation='sigmoid')(x)\n    \n    model = tf.keras.models.Model(inputs=inputs, outputs=x)\n    \n    # compile\n    opt = tf.keras.optimizers.Adam(learning_rate=nn_params['learning_rate'])\n    loss = tf.keras.losses.BinaryCrossentropy(label_smoothing=nn_params['label_smoothing'])\n    model.compile(optimizer=opt, \n                  loss=loss, \n                  metrics=[tf.keras.metrics.AUC(name = 'auc')])\n    return model\n\nmodel = create_model(nn_params, 130, 5)\nmodel.summary()","62cd3404":"tf.keras.utils.plot_model(model)","26560628":"%%time\n\nif STAGE == 3: # simply load NN weights for inference\n    models = []\n    \n    for fold in tqdm(range(FOLDS)):\n        tf.keras.backend.clear_session()\n        model = create_model(nn_params, X.shape[-1], y.shape[-1])\n        model.load_weights(WEIGHT_DIR + f'model_{SEED}_{fold}.hdf5')\n        models.append(model)\n    \nelse: # fit\n    \n    if CV_STRATEGY == 'PurgedGroupTimeSeriesSplit':\n        gkf = PurgedGroupTimeSeriesSplit(n_splits=FOLDS, group_gap=20)\n        splits = list(gkf.split(y, groups=train['date'].values))    \n\n    elif CV_STRATEGY == \"GroupKFold\":\n        cv = GroupKFold(n_splits=FOLDS, shuffle=True, random_state=SEED)\n        splits = cv.split(train, train['resp'].values.astype(int), 'date')\n\n    elif CV_STRATEGY ==  \"StratifiedGroupKFold\":\n        cv = StratifiedGroupKFold(n_splits=FOLDS, shuffle=True, random_state=SEED)\n        splits = cv.split(train, train['resp'].values.astype(int), 'date')\n\n    models = []\n    for fold, (train_indices, test_indices) in tqdm(enumerate(splits)):\n        X_train, X_test = X[train_indices], X[test_indices]\n        y_train, y_test = y[train_indices], y[test_indices]\n\n        # model\n        tf.keras.backend.clear_session()\n        model = create_model(nn_params, X.shape[-1], y.shape[-1])\n\n        if STAGE == 2:\n            model.load_weights(WEIGHT_DIR + f'model_{SEED}_{fold}.hdf5')\n\n        # callbacks\n        er = tf.keras.callbacks.EarlyStopping(patience=8, restore_best_weights=True, monitor='val_loss')\n        ReduceLR = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=8, verbose=1, mode='min')\n        model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(filepath=f'.\/model_{SEED}_{fold}.hdf5', \n                                                                       save_weights_only=True, verbose=0, monitor='val_loss', save_best_only=True)\n        nn_callbacks = [er, ReduceLR, model_checkpoint_callback]\n\n        # fit\n        model.fit(X_train, y_train, validation_data=(X_test,y_test), \n                  epochs=nn_params['epochs'], batch_size=nn_params['batch_size'], callbacks=nn_callbacks)\n        models.append(model)","3fd66892":"if STAGE == 3:\n    f = np.median\n\n    models = models[-3:]\n\n    import janestreet\n    env = janestreet.make_env()\n    for (test_df, pred_df) in tqdm(env.iter_test()):\n        if test_df['weight'].item() > 0:\n            x_tt = test_df.loc[:, features].values\n            if np.isnan(x_tt[:, 1:].sum()):\n                x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:]) * f_mean\n            pred = np.mean([model(x_tt, training = False).numpy() for model in models],axis=0)\n            pred = f(pred)\n            pred_df.action = np.where(pred >= THRESHOLD, 1, 0).astype(int)\n        else:\n            pred_df.action = 0\n        env.predict(pred_df)\nelse:\n    print('Training done!')","1abdf6ea":"<center><h2>Jane Street Market Prediction | MLP Baseline | katsu1110 <\/h2><\/center><hr>\n\nThe idea is:\n\n- Neural Network (e.g. multi-layer perceptron) seems to perform well in this competition.\n- In most of public notebooks, records with weight=0 is ignored.\n- How can we use those 0-weight records? One way with NN would be to **pre-train**.\n- So the total procedure is (1) pretrain NN with records with weight=0 (2) train NN with records with weight > 0 (3) inference\n\nThis notebook is for **stage 3 (inference)**.\n\nFor the pretrain and train part, please have a look at the following notebooks:\n\n- [[JaneStreet] MLP Pretrain (stage1: weight=0)](https:\/\/www.kaggle.com\/code1110\/janestreet-mlp-pretrain-stage1-weight-0\/notebook)\n- [[JaneStreet] MLP train (stage2: weight>0)](https:\/\/www.kaggle.com\/code1110\/janestreet-mlp-train-stage2-weight-0\/notebook)\n\nThis notebook loads feathered-data from [my another notebook](https:\/\/www.kaggle.com\/code1110\/janestreet-save-as-feather?scriptVersionId=47635784) such that we don't have to spend our time on waiting long for loading csv files.\n\nIn this notebook we treat the task as a binary classification.","151048b0":"# Config\nSome configuration setups.","53ae1d7d":"# Submit","cb7a385a":"# Load data\nI have already saved the training data in the feather-format in [my another notebook](https:\/\/www.kaggle.com\/code1110\/janestreet-save-as-feather?scriptVersionId=47635784). Loading csv takes time but loading feather is really light:)","0e7138d3":"# Model Fitting","4b4f2377":"# CV Strategy","4a238294":"# NN"}}