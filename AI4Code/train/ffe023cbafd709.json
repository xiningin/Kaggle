{"cell_type":{"3230fa1c":"code","e68a967c":"code","aa95569c":"code","d319e44a":"code","abacbcf6":"code","53b88738":"code","b6714318":"code","a3364137":"code","cc8ec3d3":"code","5a911da3":"code","892d5bf8":"code","c40b249f":"code","39c17bff":"code","dd73f524":"code","174adf71":"code","9701b644":"code","f16269a9":"code","81c6a76a":"code","72dbb1d7":"code","e9f92283":"code","eb66b26b":"code","afb08fca":"code","ad13b915":"code","01987929":"code","4fa5215f":"code","1a3c207d":"code","4fee94c0":"code","9079729d":"code","4a67494b":"code","43a92e1d":"code","05a49be3":"code","0d36cd53":"code","dc79c867":"code","ee08d27b":"code","e39a2c5d":"code","00daae73":"code","2187f30a":"code","54984926":"code","25774b8c":"code","989fc4cc":"code","033aef68":"code","453414d7":"code","e0add31a":"code","06bd51da":"code","716418de":"code","bfd36bb5":"code","201c9bf9":"code","d347847a":"code","6e35d887":"code","8e3cb75e":"code","58575228":"code","fc2c490f":"code","81a3036a":"code","7bc98042":"code","7b6f7ef9":"code","436751a6":"code","9b0fbe04":"code","3f1fa9b3":"code","8529ff04":"code","ce870159":"code","5f75cd4c":"code","2b2be6dd":"code","f1fb762f":"code","d3c5f1d2":"code","13336012":"code","81978d5e":"code","8cfdb684":"code","0fb1d622":"code","1e0c0c89":"code","5a55e84f":"code","b21d8cb0":"code","ed210123":"code","f14afa51":"code","18005385":"code","8c8fafa8":"code","32214492":"code","4e5ca358":"code","3817068b":"code","8c1db0f0":"code","9fd79665":"code","a6ebfaef":"code","af542417":"code","b000a36b":"code","32f3637f":"code","ece3628c":"code","ceb056b9":"code","30a8933b":"code","46882943":"code","de08cc17":"code","af9d5773":"code","db2d961a":"code","d59031c6":"code","cd90fe53":"code","d4a21b74":"code","deb9f9fa":"code","60baa2f7":"code","d2b77634":"code","dd8e03a1":"code","ada1a8c7":"code","a676236e":"code","aeb1788f":"code","59931517":"code","1bc0e030":"code","b0e32da0":"code","a45e2310":"code","191294b6":"markdown","febccc14":"markdown","30425f72":"markdown","8281bf7d":"markdown","adddc73c":"markdown","ae7faebe":"markdown","efd7ea40":"markdown","321d3c94":"markdown","7ff46ac3":"markdown","e615a1a7":"markdown","ceb32831":"markdown","242cdc87":"markdown","65d85039":"markdown","3ca5eb68":"markdown","b12b08fe":"markdown","9866270f":"markdown","c0716e93":"markdown","1ad3ea87":"markdown","5000a113":"markdown","9fc53c6c":"markdown","e19eafe2":"markdown","9c64b716":"markdown","0903c630":"markdown","b6745746":"markdown","caf4e469":"markdown","d2811cb9":"markdown","af9ee7a2":"markdown","e914e7c8":"markdown","fc6333df":"markdown","be6080a3":"markdown","d1bca8b3":"markdown","5816376a":"markdown","7d261e3c":"markdown","c6accfe7":"markdown"},"source":{"3230fa1c":"pip install pycountry_convert","e68a967c":"#Libraries to import\nimport pandas as pd\nimport numpy as np\nimport datetime as dt\nimport requests\nimport sys\nfrom itertools import chain\nimport pycountry\nimport pycountry_convert as pc\nimport plotly_express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n%matplotlib inline\n\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn import metrics\nimport xgboost as xgb\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance, plot_tree\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')","aa95569c":"df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\ndf_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv') \ndf_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')","d319e44a":"df","abacbcf6":"len(df)","53b88738":"df.rename(columns={'ObservationDate':'Date','Province\/State':'Province_State',\n                   'Country\/Region':'Country_Region','Confirmed':'ConfirmedCases',\n                   'Deaths':'Fatalities'},inplace=True)\ndf.loc[df['Country_Region']=='Mainland China','Country_Region']='China'\ndf['Date'] = pd.to_datetime(df['Date'],format='%m\/%d\/%Y')\n# dayofyear \ub294 datetime\uc758 \uba54\uc11c\ub4dc\ub85c\uc11c \ud574\ub2f9 datetime\uc774 \ud574\ub2f9 year\uc5d0\uc11c \uba87\ubc88\uc9f8 \ub0a0\uc778\uc9c0 \ubc18\ud658.\ndf['Day'] = df.Date.dt.dayofyear\n# shift() \uba54\uc11c\ub4dc\ub294 \uc778\uc790\ub9cc\ud07c shift\uc2dc\ud0a4\uba70 \ub9cc\uc57d 1\uc744 \ud588\ub2e4\uba74 1\ub9cc\ud07c \uae38\uc774\uac00 \ucd08\uacfc\ud558\ub294\ub370 \uadf8\uac74 \uc9e4\ub9b0\ub2e4.\ndf['cases_lag_1'] = df.groupby(['Country_Region','Province_State'])['ConfirmedCases'].shift(1)\ndf['deaths_lag_1'] = df.groupby(['Country_Region','Province_State'])['Fatalities'].shift(1)\n\n# lag\uc744 \uad6c\ud55c \uc774\uc720\ub294 \uc544\ub798\uc758 Daily Cases & Deaths \ub97c \uad6c\ud558\uae30 \uc704\ud568\uc774\ub2e4.\n# \ud2b9\uc815 \ub098\ub77c\uc640 \uc9c0\uc5ed\uacfc Date\ub294 1\ub3001 \ub300\uc751\ud558\ubbc0\ub85c \uc704\uc640 \uac19\uc774 groupby \ud558\uace0 shift \ub97c \ud558\uba74 \uc804\ub0a0\uae4c\uc9c0\uc758 \ub204\uc801 \ud655\uc9c4\uc790\uac00 \ub41c\ub2e4.\n# \ub0b4\ubd80\uc801\uc73c\ub85c \uc774\ubbf8 \ub0a0\uc9dc\uc21c\uc73c\ub85c \uc815\ub82c\ub418\uc5b4\uc788\ub294 \ub4ef.\ndf['Daily Cases'] = df['ConfirmedCases'] - df['cases_lag_1']\ndf['Daily Deaths'] = df['Fatalities'] - df['deaths_lag_1']","b6714318":"# \uc544\ub798\uc640 \uac19\uc774 \ubca0\uc774\uc9d5\uc5d0\uc11c\uc758 \uc77c\ubcc4\ud655\uc9c4\uc790\uac00 DailyCases \uc5d0 \uc800\uc7a5\ub41c\ub2e4. \ncond = (df.Country_Region == 'China') & (df.Province_State =='Beijing')\ndf[cond]","a3364137":"display(df_train.head())\ndisplay(df_train.describe())\ndisplay(df_train.info())","cc8ec3d3":"df_train['Date'] = pd.to_datetime(df_train['Date'], format = '%Y-%m-%d')\ndf_test['Date'] = pd.to_datetime(df_test['Date'], format = '%Y-%m-%d')","5a911da3":"train_date_min = df_train['Date'].min()\ntrain_date_max = df_train['Date'].max()\nprint('Minimum date from training set: {}'.format(train_date_min))\nprint('Maximum date from training set: {}'.format(train_date_max))","892d5bf8":"test_date_min = df_test['Date'].min()\ntest_date_max = df_test['Date'].max()\nprint('Minimum date from test set: {}'.format(test_date_min))\nprint('Maximum date from test set: {}'.format(test_date_max))","c40b249f":"# pycountry \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \ub300\ud574\uc11c\ub294 \uc798 \ubaa8\ub974\uc9c0\ub9cc,\n# \uc6d0\uc791\uc790\uac00 \uc6d0\ud588\ub358 \uac83\uc740 \uc5b4\ub5a4 \ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud558\uace0 country \ub97c \uc778\uc790\ub85c \ud558\ub294 \uba54\uc11c\ub4dc\ub97c \ud638\ucd9c\ud560 \ub54c,\n# country_obj.alpha_3 \uc640 continent \ub97c \ubc18\ud658\ud558\uace0 \uc2f6\uc5b4\ud568.\n\nclass country_utils():\n    def __init__(self):\n        self.d = {}\n    \n    def get_dic(self):\n        return self.d\n    \n    def get_country_details(self,country):\n        \"\"\"Returns country code(alpha_3) and continent\"\"\"\n        try:\n            country_obj = pycountry.countries.get(name=country)\n            if country_obj is None:\n                c = pycountry.countries.search_fuzzy(country)\n                country_obj = c[0]\n            continent_code = pc.country_alpha2_to_continent_code(country_obj.alpha_2)\n            continent = pc.convert_continent_code_to_continent_name(continent_code)\n            return country_obj.alpha_3, continent\n        \n        # \ub098\ub77c \ud45c\uae30\uc5d0 \uc788\uc5b4 \ud45c\uc900\ud654\ub41c \ub098\ub77c\uba85\uc5d0 \ub9de\uc9c0 \uc54a\uc744 \uacbd\uc6b0, \uc5d0\ub7ec\uac00 \ub0a0 \uc218 \uc788\ub2e4.\n        # \uadf8\ub7f4 \uacbd\uc6b0 \uc544\ub798\uc640 \uac19\uc774 country \ub97c \uc218\uc815\ud574\uc11c \ud568\uc218\uc5d0 \ub123\ub294\ub2e4.\n        except:\n            if 'Congo' in country:\n                country = 'Congo'\n            elif country == 'Diamond Princess' or country == 'Laos' or country == 'MS Zaandam'\\\n            or country == 'Holy See' or country == 'Timor-Leste':\n                return country, country\n            elif country == 'Korea, South' or country == 'South Korea':\n                country = 'Korea, Republic of'\n            elif country == 'Taiwan*':\n                country = 'Taiwan'\n            elif country == 'Burma':\n                country = 'Myanmar'\n            elif country == 'West Bank and Gaza':\n                country = 'Gaza'\n            else:\n                return country, country\n            country_obj = pycountry.countries.search_fuzzy(country)\n            continent_code = pc.country_alpha2_to_continent_code(country_obj[0].alpha_2)\n            continent = pc.convert_continent_code_to_continent_name(continent_code)\n            return country_obj[0].alpha_3, continent\n    \n    # d \ub515\uc154\ub108\ub9ac\uc5d0\uc11c code\ub97c \uac00\uc838\uc634.\n    def get_iso3(self, country):\n        return self.d[country]['code']\n    # d \ub515\uc154\ub108\ub9ac\uc5d0\uc11c continent \ub97c \uac00\uc838\uc634.\n    def get_continent(self,country):\n        return self.d[country]['continent']\n    # d \ub515\uc154\ub108\ub9ac\uc5d0 \ub370\uc774\ud130\ub97c \uc9d1\uc5b4 \ub123\ub294\ub2e4.\n    # \ud615\ud0dc\ub294 d = {'country':{'code':'continent'}}\n    def add_values(self,country):\n        self.d[country] = {}\n        self.d[country]['code'],self.d[country]['continent'] = self.get_country_details(country)\n\n    def fetch_iso3(self,country):\n        if country in self.d.keys():\n            return self.get_iso3(country)\n        else:\n            self.add_values(country)\n            return self.get_iso3(country)\n        \n    def fetch_continent(self,country):\n        if country in self.d.keys():\n            return self.get_continent(country)\n        else:\n            self.add_values(country)\n            return self.get_continent(country)","39c17bff":"df","dd73f524":"df.ConfirmedCases = np.abs(df.ConfirmedCases)\ndf_tm = df.copy()\ndate = df_tm.Date.max()#get current date\ndf_tm = df_tm[df_tm['Date']==date]\n#obj \uac1d\uccb4\ub97c \ub9cc\ub4e4\uc5b4\uc11c\nobj = country_utils()\ndf_tm.Province_State.fillna('',inplace=True)\n# df_tm \uc758 country_region \uc744 fetch_continent\uc5d0 \uc9d1\uc5b4\ub123\uc73c\uba74 \ud574\ub2f9 \ub098\ub77c\uc758 continent\ub97c \ubc18\ud658\ud558\ub294 \ub4ef. \ndf_tm['continent'] = df_tm.apply(lambda x: obj.fetch_continent(x['Country_Region']), axis=1)\ndf_tm[\"world\"] = \"World\" # in order to have a single root node\nfig = px.treemap(df_tm, path=['world', 'continent', 'Country_Region'], values='ConfirmedCases',\n                  color='ConfirmedCases', hover_data=['continent'],\n                  color_continuous_scale='dense', title='Current share of Worldwide COVID19 Cases')\nfig.update_layout(width=700,template='seaborn')\nfig.show()","174adf71":"fig = px.treemap(df_tm, path=['world', 'continent', 'Country_Region'], values='Fatalities',\n                  color='Fatalities', hover_data=['Country_Region'],\n                  color_continuous_scale='matter', title='Current share of Worldwide COVID19 Deaths')\nfig.update_layout(width=700,template='seaborn')\nfig.show()","9701b644":"df","f16269a9":"def add_daily_measures(df):\n    df.loc[0,'Daily Cases'] = df.loc[0,'ConfirmedCases']\n    df.loc[0,'Daily Deaths'] = df.loc[0,'Fatalities']\n    for i in range(1,len(df)):\n        df.loc[i,'Daily Cases'] = df.loc[i,'ConfirmedCases'] - df.loc[i-1,'ConfirmedCases']\n        df.loc[i,'Daily Deaths'] = df.loc[i,'Fatalities'] - df.loc[i-1,'Fatalities']\n    #Make the first row as 0 because we don't know the previous value\n    df.loc[0,'Daily Cases'] = 0\n    df.loc[0,'Daily Deaths'] = 0\n    return df","81c6a76a":"df_world = df.copy()\ndf_world = df_world.groupby('Date',as_index=False)['ConfirmedCases','Fatalities','Daily Cases','Daily Deaths'].sum()\nprint(df_world)\ndf_world = add_daily_measures(df_world)\nprint(df_world)","72dbb1d7":"# \uc774\ub3d9\ud3c9\uade0\uc744 rolling \uba54\uc11c\ub4dc\ub97c \ud1b5\ud574 \uacc4\uc0b0\ud558\uace0 \uadf8\ub798\ud504\ub85c \ub098\ud0c0\ub0b4\uc5b4 \ubcf4\uc790.\ndef draw_graph(df, x, y1, y2, title, days=7):\n    colors = dict(case = '#4285F4', death = '#EA4335')\n    df['cases_roll_avg'] = df[y1].rolling(days).mean()\n    df['deaths_roll_avg'] = df[y2].rolling(days).mean()\n    # specs \uc778\uc790\ub97c \ud1b5\ud574 subplot \uc758 \ub2e4\uc591\ud55c \ud2b9\uc131\uc744 \uc870\uc728\ud560 \uc218 \uc788\ub2e4.\n    # 'secondary_y' \uac00 True \uc774\uba74 \uc0c8\ub85c\uc6b4 y\ucd95\uc774 \uadf8\ub798\ud504\uc758 \uc624\ub978\ucabd\uc5d0 \uc0dd\uae34\ub2e4(y\ucd95\uc774 \uc67c\ucabd,\uc624\ub978\ucabd 2\uac1c\uac00 \ub428).\n    fig = make_subplots(specs = [[{'secondary_y':True}]])\n    fig.add_trace(go.Scatter(name = 'Daily Cases', x = df[x], y = df[y1], mode='lines',\n                            line = dict(width = 0.5, color=colors['case'])),\n                 secondary_y = False)\n    # add_trace \ub294 \ub9cc\ub4e4\uc5b4\ub193\uc740 figrue \uc5d0 \uadf8\ub798\ud504\ub97c \ucd94\uac00\ud558\ub294 \uac83.\n    # \ub9cc\ub4e4\uc5b4\ub193\uc740 \uc5ec\ub7ec subplot\uc5d0 \ucd94\uac00\ud560 \uc218\ub3c4 \uc788\uace0, \uac19\uc740 figure \uc5d0 \uc911\ucca9\uc2dc\ucf1c \uadf8\ub798\ud504\ub97c \uadf8\ub9b4 \uc218\ub3c4 \uc788\ub2e4.\n    # Scatter\ub294 \ubaa8\ub4dc\uc5d0 \ub530\ub77c \uc810 \ud639\uc740 \uc120\uc73c\ub85c \uadf8\ub798\ud504\ub97c \uadf8\ub9ac\ub294 \uba54\uc11c\ub4dc\n    # line \uc778\uc790\uc5d0\ub294 \ub515\uc154\ub108\ub9ac \ud615\ud0dc\ub85c \uc804\ub2ec\uc774 \ub418\uc5b4\uc57c\ud558\ubbc0\ub85c dict\ud074\ub798\uc2a4\ub97c \uc0dd\uc131\ud55c\ub2e4.\n    fig.add_trace(go.Scatter(name = 'Daily Deaths', x = df[x], y=df[y2], mode = 'lines',\n                            line = dict(width = 0.5, color = colors['death'])),\n                 secondary_y = True)\n    fig.add_trace(go.Scatter(name = 'Cases: <br>'+str(days)+'day rolling avg',\n                            x = df[x], y = df['cases_roll_avg'], mode = 'lines',\n                            line = dict(width=3, color = colors['case'])),\n                  secondary_y = False\n                            )\n    fig.add_trace(go.Scatter(name = 'Deaths:<br>'+str(days)+'day rolling avg',\n                            x = df[x], y = df['deaths_roll_avg'], mode = 'lines',\n                            line = dict(width = 3, color = colors['death'])),\n                 secondary_y = True)\n    fig.update_yaxes(title_text = 'Cases', title_font = dict(color = colors['case']), secondary_y = False,\n                    nticks = 5, tickfont = dict(color = colors['case']), linewidth = 2, linecolor = 'black',\n                    gridcolor = 'darkgray',zeroline = False)\n    fig.update_yaxes(title_text = 'Deaths', title_font = dict(color = colors['death']), secondary_y = True,\n                    nticks = 5, tickfont = dict(color = colors['death']), linewidth = 2, linecolor = 'black',\n                    gridcolor = 'darkgray', zeroline = False)\n    fig.update_layout(title = title, height = 400, width = 700, \n                     margin = dict(l=0,r=0,t=60,b=30),hovermode='x',\n                      legend=dict(x=0.01,y=0.99,bordercolor='black',borderwidth=1,bgcolor='#EED8E4',\n                                  font=dict(family='arial',size=10)),\n                     xaxis=dict(mirror=True,linewidth=2,linecolor='black',gridcolor='darkgray'),\n                     plot_bgcolor='rgb(255,255,255)')\n    return fig\n    \n    ","e9f92283":"a = dict(b =1, c=2)\nprint(a)","eb66b26b":"fig = draw_graph(\n    df_world,\n    'Date',\n    'Daily Cases',\n    'Daily Deaths',\n    '<b>Worldwide: Daily Cases & Deaths<\/b><br>   With 7-Day Rolling averages')\nfig.show()","afb08fca":"df_map = df.copy()\ndf_map['Date'] = df_map['Date'].astype(str)\ndf_map = df_map.groupby(['Date','Country_Region'], as_index=False)['ConfirmedCases','Fatalities'].sum()","ad13b915":"df_map","01987929":"df_map['iso_alpha'] = df_map.apply(lambda x: obj.fetch_iso3(x['Country_Region']), axis=1)","4fa5215f":"df_map","1a3c207d":"df_map['log(ConfirmedCases)'] = np.log(df_map.ConfirmedCases + 1)\ndf_map['log(Fatalities)'] = np.log(df_map.Fatalities + 1)","4fee94c0":"px.choropleth(df_map, \n              locations=\"iso_alpha\", \n              color=\"log(ConfirmedCases)\", \n              hover_name=\"Country_Region\", \n              hover_data=[\"ConfirmedCases\"] ,\n              animation_frame=\"Date\",\n              color_continuous_scale=px.colors.sequential.dense, \n              title='Total Confirmed Cases growth(Logarithmic Scale)')","9079729d":"px.choropleth(df_map, \n              locations=\"iso_alpha\", \n              color=\"log(Fatalities)\", \n              hover_name=\"Country_Region\",\n              hover_data=[\"Fatalities\"],\n              animation_frame=\"Date\",\n              color_continuous_scale=px.colors.sequential.OrRd,\n              title = 'Total Deaths growth(Logarithmic Scale)')","4a67494b":"#Get the top 10 countries\nlast_date = df.Date.max()\ndf_countries = df[df['Date']==last_date]\ndf_countries = df_countries.groupby('Country_Region', as_index=False)['ConfirmedCases','Fatalities'].sum()\ndf_countries = df_countries.nlargest(10,'ConfirmedCases')\n#Get the trend for top 10 countries\ndf_trend = df.groupby(['Date','Country_Region'], as_index=False)['ConfirmedCases','Fatalities'].sum()\n# \uc774\ub807\uac8c \ud558\uba74 top10 \ub098\ub77c\ub4e4\ub9cc \ucd94\ub824\uc9c0\uaca0\uc9c0. \uc0ac\uc2e4\uc0c1 \uc870\uac74\ubb38\uc744 \uc801\uc6a9\ud55c\uac70\ub791 \ube44\uc2b7\ud55c \ub4ef.\ndf_trend = df_trend.merge(df_countries, on='Country_Region')\n# merge \uc758 key \uac00 Country_Region \uc774\ubbc0\ub85c ConfirmedCases\ub791 Fatalities \ub294 \uac01 \ub370\uc774\ud130\ud504\ub808\uc784\ub9c8\ub2e4 \ud55c\uac1c\uc529 \uac00\uc9c0\uace0 \uc788\uc73c\ubbc0\ub85c,\n# x, y\ub77c\ub294 \uae30\ud638\uac00 \ubd99\uc73c\uba74\uc11c merge \ub41c\ub2e4.\n# print(df_trend)\n# \ub530\ub77c\uc11c \ub4a4\uc5d0 \uc77c\ubcc4\uc774 \uc544\ub2cc \ucd5c\uc2e0\ub0a0\uc9dc \uae30\uc900\uc758 \ud655\uc9c4\uc790\uc218\uc640 \uc0ac\ub9dd\uc790\uc218\ub294 \ndf_trend.drop(['ConfirmedCases_y','Fatalities_y'],axis=1, inplace=True)\ndf_trend.rename(columns={'Country_Region':'Country', 'ConfirmedCases_x':'Cases', 'Fatalities_x':'Deaths'}, inplace=True)\n#Add columns for studying logarithmic trends\ndf_trend['log(Cases)'] = np.log(df_trend['Cases']+1)# Added 1 to remove error due to log(0).\ndf_trend['log(Deaths)'] = np.log(df_trend['Deaths']+1)","43a92e1d":"fig = px.line(df_trend, x='Date', y='Cases', color='Country', title='COVID19 Total Cases growth for top 10 worst affected countries')\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","05a49be3":"fig = px.line(df_trend, x='Date', y='Deaths', color='Country', title='COVID19 Total Deaths growth for top 10 worst affected countries')\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","0d36cd53":"fig = px.line(df_trend, x='Date', y='log(Cases)', color='Country', title='COVID19 Total Cases growth for top 10 worst affected countries(Logarithmic Scale)')\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","dc79c867":"fig = px.line(df_trend, x='Date', y='log(Deaths)', color='Country', title='COVID19 Total Deaths growth for top 10 worst affected countries(Logarithmic Scale)')\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","ee08d27b":"df_map['Mortality Rate%'] = round((df_map.Fatalities\/df_map.ConfirmedCases)*100,2)","e39a2c5d":"px.choropleth(df_map, \n                    locations=\"iso_alpha\", \n                    color=\"Mortality Rate%\", \n                    hover_name=\"Country_Region\",\n                    hover_data=[\"ConfirmedCases\",\"Fatalities\"],\n                    animation_frame=\"Date\",\n                    color_continuous_scale=px.colors.sequential.Magma_r,\n                    title = 'Worldwide Daily Variation of Mortality Rate%')","00daae73":"df_trend['Mortality Rate%'] = round((df_trend.Deaths\/df_trend.Cases)*100,2)\nfig = px.line(df_trend, x='Date', y='Mortality Rate%', color='Country', title='Variation of Mortality Rate% \\n(Top 10 worst affected countries)')\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","2187f30a":"# Dictionary to get the state codes from state names for US\nus_state_abbrev = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}","54984926":"df_us = df[df['Country_Region']=='US']\ndf_us['Date'] = df_us['Date'].astype(str)\ndf_us['state_code'] = df_us.apply(lambda x: us_state_abbrev.get(x.Province_State,float('nan')), axis=1)\ndf_us['log(ConfirmedCases)'] = np.log(df_us.ConfirmedCases + 1)\ndf_us['log(Fatalities)'] = np.log(df_us.Fatalities + 1)","25774b8c":"# animation frame \uc73c\ub85c \ubc11\uc5d0 \uadf8\ub798\ud504\ucc98\ub7fc \ub098\ud0c0\ub0bc \uc218 \uc788\uc74c.\npx.choropleth(df_us,\n              locationmode=\"USA-states\",\n              scope=\"usa\",\n              locations=\"state_code\",\n              color=\"log(ConfirmedCases)\",\n              hover_name=\"Province_State\",\n              hover_data=[\"ConfirmedCases\"],\n              animation_frame=\"Date\",\n              color_continuous_scale=px.colors.sequential.Darkmint,\n              title = 'Total Cases growth for USA(Logarithmic Scale)')","989fc4cc":"px.choropleth(df_us,\n              locationmode=\"USA-states\",\n              scope=\"usa\",\n              locations=\"state_code\",\n              color=\"log(Fatalities)\",\n              hover_name=\"Province_State\",\n              hover_data=[\"Fatalities\"],\n              animation_frame=\"Date\",\n              color_continuous_scale=px.colors.sequential.OrRd,\n              title = 'Total deaths growth for USA(Logarithmic Scale)')","033aef68":"df_usa = df.query(\"Country_Region=='US'\")\ndf_usa = df_usa.groupby('Date',as_index=False)['ConfirmedCases','Fatalities','Daily Cases','Daily Deaths'].sum()\ndf_usa = add_daily_measures(df_usa)\nfig = go.Figure(data=[\n     go.Bar(name='Cases', x=df_usa['Date'], y=df_usa['Daily Cases']),\n     go.Bar(name='Deaths', x=df_usa['Date'], y=df_usa['Daily Deaths'])\n ])\n# # Change the bar mode\nfig.update_layout(barmode='overlay', title='Daily Case and Death count(USA)')\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                  yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","453414d7":"fig = draw_graph(\n    df_usa,\n    'Date',\n    'Daily Cases',\n    'Daily Deaths',\n    '<b>USA: Daily Cases & Deaths<\/b><br>   With 7-Day Rolling averages')\nfig.show()","e0add31a":"df.Province_State.fillna('NaN', inplace=True)\ndf_plot = df.groupby(['Date','Country_Region','Province_State'], as_index=False)['ConfirmedCases','Fatalities'].sum()","06bd51da":"# \ud574\ub2f9 \ub098\ub77c\uc758 daily measures \ub97c \uad6c\ud558\ub294 \ud568\uc218\ndef add_daily_measures_country(df,country):\n    df = df[df.Country_Region==country]\n    df = df.groupby('Date',as_index=False)['ConfirmedCases','Fatalities'].sum()\n    df['Daily Cases'] = df['ConfirmedCases'] - df['ConfirmedCases'].shift(1)\n    df['Daily Deaths'] = df['Fatalities'] - df['Fatalities'].shift(1)\n    return df","716418de":"df_ind = add_daily_measures_country(df_plot,'India')","bfd36bb5":"fig = draw_graph(\n    df_ind,\n    'Date',\n    'Daily Cases',\n    'Daily Deaths',\n    '<b>India: Daily Cases & Deaths<\/b><br>   With 7-Day Rolling averages')\nfig.show()","201c9bf9":"df_ind_cases = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\ndf_ind_cases.dropna(how='all',inplace=True)\ndf_ind_cases['DateTime'] = pd.to_datetime(df_ind_cases['Date'], format = '%d\/%m\/%y')","d347847a":"r = requests.get(url='https:\/\/raw.githubusercontent.com\/geohacker\/india\/master\/state\/india_telengana.geojson')\ngeojson = r.json()","6e35d887":"geojson","8e3cb75e":"def change_state_name(state):\n    if state == 'Odisha':\n        return 'Orissa'\n    elif state == 'Telengana':\n        return 'Telangana'\n    return state","58575228":"df_ind_cases['State\/UnionTerritory'] = df_ind_cases.apply(lambda x: change_state_name(x['State\/UnionTerritory']), axis=1)\nlast_date = df_ind_cases.DateTime.max()\ndf_ind_states = df_ind_cases.copy()\ndf_ind_cases = df_ind_cases[df_ind_cases['DateTime']==last_date]","fc2c490f":"columns = ['State\/UnionTerritory', 'Cured', 'Deaths','Confirmed']\ndf_ind_cases = df_ind_cases[columns]\ndf_ind_cases.sort_values('Confirmed',inplace=True, ascending=False)\ndf_ind_cases.reset_index(drop=True,inplace=True)\ndf_ind_cases.style.background_gradient(cmap='viridis')","81a3036a":"fig = px.choropleth(df_ind_cases, geojson=geojson, color=\"Confirmed\",\n                    locations=\"State\/UnionTerritory\", featureidkey=\"properties.NAME_1\",\n                    hover_data=['Cured','Deaths'],\n                    color_continuous_scale=px.colors.sequential.Viridis,\n                    title='India: Total Current cases per state'\n                   )\nfig.update_geos(fitbounds=\"locations\", visible=True)\nfig.update_geos(projection_type=\"orthographic\")\nfig.update_layout(height=600,margin={\"r\":0,\"t\":30,\"l\":0,\"b\":30})\nfig.show()","7bc98042":"fig = px.line(df_ind_states, x='DateTime', y='Confirmed', color='State\/UnionTerritory', title='India: State-wise cases')\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","7b6f7ef9":"df_ita = add_daily_measures_country(df_plot,'Italy')\nfig = go.Figure(data=[\n    go.Bar(name='Cases', x=df_ita['Date'], y=df_ita['Daily Cases']),\n    go.Bar(name='Deaths', x=df_ita['Date'], y=df_ita['Daily Deaths'])\n])\n# Change the bar mode\nfig.update_layout(barmode='overlay', title='Daily Case and Death count(Italy)',\n                 annotations=[dict(x='2020-03-09', y=1797, xref=\"x\", yref=\"y\", text=\"Lockdown<br>Imposed<br>(9th March)\", showarrow=True, arrowhead=1, ax=-50, ay=-50)])\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","436751a6":"df_ita_cases = pd.read_csv('\/kaggle\/input\/covid19-in-italy\/covid19_italy_region.csv')\ndf_ita_cases['Date'] = pd.to_datetime(df_ita_cases['Date'], format='%Y-%m-%d')\ndf_ita_cases['Date'] = [d.date() for d in df_ita_cases['Date']]","9b0fbe04":"df_ita_group = df_ita_cases.groupby(['Date','RegionCode','RegionName','Latitude','Longitude'],as_index=False)\\\n['HospitalizedPatients','IntensiveCarePatients','TotalHospitalizedPatients','HomeConfinement','CurrentPositiveCases'\\\n ,'NewPositiveCases','Recovered','Deaths','TotalPositiveCases','TestsPerformed'].sum()","3f1fa9b3":"# \uc774\uac74 \uc791\uc131\uc790 \ubcf8\uc778 \ub178\ud2b8\ubd81\uc5d0\uc11c\ub9cc \uc54c \uc218 \uc788\ub294 secret \uc744 \uac00\uc838\uc628 \uac83.\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"mapboxtoken\")","8529ff04":"curr_date = df_ita_group.Date.max()\ndf_ita_curr = df_ita_cases[df_ita_cases['Date']==curr_date]","ce870159":"columns=['RegionName','TotalHospitalizedPatients','Recovered', 'Deaths', 'TotalPositiveCases','TestsPerformed']\ndf_ita_temp = df_ita_curr[columns]\ndf_ita_temp.sort_values('TotalPositiveCases',inplace=True, ascending=False)\ndf_ita_temp.reset_index(drop=True,inplace=True)\ndf_ita_temp.style.background_gradient(cmap='Blues_r')","5f75cd4c":"px.set_mapbox_access_token(secret_value_0)\ndf_ita_cases['Date'] = df_ita_cases['Date'].astype('str')\nfig = px.scatter_mapbox(df_ita_cases,\n                        lat=\"Latitude\",\n                        lon=\"Longitude\",\n                        size=\"TotalPositiveCases\",\n                        color='TestsPerformed',\n                        mapbox_style='streets',\n                        color_continuous_scale=px.colors.sequential.Blues_r,\n                        animation_frame='Date',\n                        hover_name='RegionName',\n                        hover_data=['HospitalizedPatients','IntensiveCarePatients','TotalHospitalizedPatients','HomeConfinement','CurrentPositiveCases'\\\n ,'NewPositiveCases','Recovered','Deaths'],\n                        zoom=4,\n                        size_max=50,\n                        title= 'Italy:Daily COVID19 Cases and Test performed')\nfig.show()","2b2be6dd":"region_colors = {\n    'Abruzzo': 'skyblue', \n    'Basilicata': 'gold', \n    'P.A. Bolzano': 'lightseagreen', \n    'Calabria': 'black', \n    'Campania': 'crimson',\n    'Emilia-Romagna': 'darkred', \n    'Friuli Venezia Giulia': 'mistyrose', \n    'Lazio': 'lavender', \n    'Liguria': 'wheat',\n    'Lombardia': 'red', \n    'Marche': 'green', \n    'Molise': 'yellow', \n    'Piemonte': 'blue', \n    'Puglia': 'purple', \n    'Sardegna': 'peachpuff',\n    'Sicilia': 'lightcoral', \n    'Toscana': 'lightpink', \n    'P.A. Trento': 'fuchsia', \n    'Umbria': 'firebrick', \n    \"Valle d'Aosta\": 'cyan',\n    'Veneto': 'darkblue'\n} ","f1fb762f":"fig = make_subplots(\n    rows=5, cols=1, \n    shared_xaxes=True,\n    vertical_spacing=0.009,\n    x_title='Date'\n)\n\nfor region in df_ita_group.RegionName.unique():\n    df_region = df_ita_group[df_ita_group['RegionName']==region]\n    #Add Traces\n    fig.add_trace(go.Scatter(name=region,x=df_region['Date'], y=df_region['TotalHospitalizedPatients'], legendgroup=region, line=dict(color=region_colors[region])), row=1, col=1)\n    fig.add_trace(go.Scatter(name=region,x=df_region['Date'], y=df_region['Recovered'], legendgroup=region, showlegend=False, line=dict(color=region_colors[region])), row=2, col=1)\n    fig.add_trace(go.Scatter(name=region,x=df_region['Date'], y=df_region['Deaths'], legendgroup=region, showlegend=False, line=dict(color=region_colors[region])), row=3, col=1)\n    fig.add_trace(go.Scatter(name=region,x=df_region['Date'], y=df_region['TotalPositiveCases'], legendgroup=region, showlegend=False, line=dict(color=region_colors[region])), row=4, col=1)\n    fig.add_trace(go.Scatter(name=region,x=df_region['Date'], y=df_region['TestsPerformed'], legendgroup=region, showlegend=False, line=dict(color=region_colors[region])), row=5, col=1)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Hospitalizations\", row=1, col=1)\nfig.update_yaxes(title_text=\"Recoveries\", row=2, col=1)\nfig.update_yaxes(title_text=\"Deaths\", row=3, col=1)\nfig.update_yaxes(title_text=\"Positive Cases\", row=4, col=1)\nfig.update_yaxes(title_text=\"Tests Performed\", row=5, col=1)\n\n# Update title and height\nfig.update_layout(title_text=\"Italy: Daily Metrics per Region\", height=1000, showlegend=True)\n\nfig.show()","d3c5f1d2":"df_esp = add_daily_measures_country(df_plot,'Spain')\nfig = go.Figure(data=[\n    go.Bar(name='Cases', x=df_esp['Date'], y=df_esp['Daily Cases']),\n    go.Bar(name='Deaths', x=df_esp['Date'], y=df_esp['Daily Deaths'])\n])\n# Change the bar mode\nfig.update_layout(barmode='overlay', title='Daily Case and Death count(Spain)',\n                 annotations=[dict(x='2020-03-15', y=1407, xref=\"x\", yref=\"y\", text=\"Lockdown<br>Imposed(15th March)\", showarrow=True, arrowhead=1, ax=-50, ay=-50)])\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","13336012":"df_ch = df_plot.query(\"Country_Region=='China'\")\nfig = px.line(df_ch, x='Date', y='ConfirmedCases', color='Province_State', title='Total Cases growth for China')\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","81978d5e":"fig = px.line(df_ch, x='Date', y='Fatalities', color='Province_State', title='Total Deaths growth for China')\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","8cfdb684":"r = requests.get(url='https:\/\/raw.githubusercontent.com\/deldersveld\/topojson\/master\/countries\/china\/china-provinces.json')\ntopology = r.json()","0fb1d622":"#Convert topology json into geojson\n#The code is from https:\/\/gist.github.com\/perrygeo\/1e767e42e8bc54ad7262\ndef rel2abs(arc, scale=None, translate=None):\n    \"\"\"Yields absolute coordinate tuples from a delta-encoded arc.\n    If either the scale or translate parameter evaluate to False, yield the\n    arc coordinates with no transformation.\"\"\"\n    if scale and translate:\n        a, b = 0, 0\n        for ax, bx in arc:\n            a += ax\n            b += bx\n            yield scale[0]*a + translate[0], scale[1]*b + translate[1]\n    else:\n        for x, y in arc:\n            yield x, y\n\ndef coordinates(arcs, topology_arcs, scale=None, translate=None):\n    \"\"\"Return GeoJSON coordinates for the sequence(s) of arcs.\n    \n    The arcs parameter may be a sequence of ints, each the index of a\n    coordinate sequence within topology_arcs\n    within the entire topology -- describing a line string, a sequence of \n    such sequences -- describing a polygon, or a sequence of polygon arcs.\n    \n    The topology_arcs parameter is a list of the shared, absolute or\n    delta-encoded arcs in the dataset.\n    The scale and translate parameters are used to convert from delta-encoded\n    to absolute coordinates. They are 2-tuples and are usually provided by\n    a TopoJSON dataset. \n    \"\"\"\n    if isinstance(arcs[0], int):\n        coords = [\n            list(\n                rel2abs(\n                    topology_arcs[arc if arc >= 0 else ~arc],\n                    scale, \n                    translate )\n                 )[::arc >= 0 or -1][i > 0:] \\\n            for i, arc in enumerate(arcs) ]\n        return list(chain.from_iterable(coords))\n    elif isinstance(arcs[0], (list, tuple)):\n        return list(\n            coordinates(arc, topology_arcs, scale, translate) for arc in arcs)\n    else:\n        raise ValueError(\"Invalid input %s\", arcs)\n\ndef geometry(obj, topology_arcs, scale=None, translate=None):\n    \"\"\"Converts a topology object to a geometry object.\n    \n    The topology object is a dict with 'type' and 'arcs' items, such as\n    {'type': \"LineString\", 'arcs': [0, 1, 2]}.\n    See the coordinates() function for a description of the other three\n    parameters.\n    \"\"\"\n    return {\n        \"type\": obj['type'], \n        \"coordinates\": coordinates(\n            obj['arcs'], topology_arcs, scale, translate )}\n\nfrom shapely.geometry import asShape\n\ntopojson_path = sys.argv[1]\ngeojson_path = sys.argv[2]\n\n\n# file can be renamed, the first 'object' is more reliable\nlayername = list(topology['objects'].keys())[0]  \n\nfeatures = topology['objects'][layername]['geometries']\nscale = topology['transform']['scale']\ntrans = topology['transform']['translate']\n\nfc = {'type': \"FeatureCollection\", 'features': []}\n\nfor id, tf in enumerate(features):\n    f = {'id': id, 'type': \"Feature\"}\n    f['properties'] = tf['properties'].copy()\n\n    geommap = geometry(tf, topology['arcs'], scale, trans)\n    geom = asShape(geommap).buffer(0)\n    assert geom.is_valid\n    f['geometry'] = geom.__geo_interface__\n\n    fc['features'].append(f) ","1e0c0c89":"df_ch = df_ch[df_ch['Date']==df.Date.max()]","5a55e84f":"fig = px.choropleth(df_ch,\n                    geojson=fc,\n                    locations='Province_State',\n                    featureidkey=\"properties.NAME_1\",\n                    color_continuous_scale=px.colors.sequential.Darkmint,\n                    hover_name='Province_State',\n                    range_color=(0, df_ch['ConfirmedCases'].max()),\n                    color='ConfirmedCases', \n                    title='China: Total Current Cases per Province'\n                   )\n\nfig.update_geos(fitbounds=\"locations\", visible=True)\nfig.update_geos(projection_type=\"orthographic\")\nfig.update_layout(height=600, margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.show()","b21d8cb0":"fig = px.choropleth(df_ch,\n                    geojson=fc,\n                    locations='Province_State',\n                    featureidkey=\"properties.NAME_1\",\n                    color_continuous_scale=px.colors.sequential.OrRd,\n                    hover_name='Province_State',\n                    range_color=(0, df_ch['Fatalities'].max()),\n                    color='Fatalities', \n                    title='China: Total Current Deaths per Province'\n                   )\n\nfig.update_geos(fitbounds=\"locations\", visible=True)\nfig.update_geos(projection_type=\"orthographic\")\nfig.update_layout(height=600, margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.show()","ed210123":"df_ch = add_daily_measures_country(df_plot,'China')\nfig = go.Figure(data=[\n    go.Bar(name='Cases', x=df_ch['Date'], y=df_ch['Daily Cases']),\n    go.Bar(name='Deaths', x=df_ch['Date'], y=df_ch['Daily Deaths'])\n])\n# Change the bar mode\nfig.update_layout(barmode='overlay', title='Daily Case and Death count(China)')\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","f14afa51":"df_sk = add_daily_measures_country(df_plot,'South Korea')\nfig = go.Figure(data=[\n    go.Bar(name='Cases', x=df_sk['Date'], y=df_sk['Daily Cases']),\n    go.Bar(name='Deaths', x=df_sk['Date'], y=df_sk['Daily Deaths'])\n])\n# Change the bar mode\nfig.update_layout(barmode='overlay', title='Daily Case and Death count(South Korea)')\nfig.update_layout(hovermode='closest',template='seaborn',width=700,xaxis=dict(mirror=True,linewidth=2,linecolor='black',showgrid=False),\n                 yaxis=dict(mirror=True,linewidth=2,linecolor='black'))\nfig.show()","18005385":"df_sk_cases = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Case.csv')","8c8fafa8":"df_hotspots = df_sk_cases[(df_sk_cases['group']==True)&(df_sk_cases['city']!='from other city')]\ndf_hotspots['latitude'] = df_hotspots.apply(lambda x: float(x['latitude'] if x['latitude']!='-' else float('nan'))\n                                            , axis=1)\ndf_hotspots['longitude'] = df_hotspots.apply(lambda x: float(x['longitude'] if x['longitude']!='-' else float('nan'))\n                                             , axis=1)","32214492":"px.set_mapbox_access_token(secret_value_0)\nfig = px.scatter_mapbox(df_hotspots,\n                        lat=\"latitude\",\n                        lon=\"longitude\",\n                        size=\"confirmed\",\n                        hover_data=['infection_case','city','province'],\n                        mapbox_style='streets',\n                        zoom=5,\n                        size_max=50,\n                        title= 'COVID19 Hotspots in South Korea')\nfig.show()","4e5ca358":"df_sk = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/PatientInfo.csv')\ndf_sk.age.replace('66s','60s', inplace=True)","3817068b":"df_sk_age = df_sk.groupby(['age','sex','country','province','city','infection_case'], as_index=False)['patient_id'].count()","8c1db0f0":"# Initialize figure with subplots\nfig = make_subplots(\n    rows=2, cols=2, subplot_titles=(\"Age-wise distribution of Cases\", \"Province-wise distribution of Cases\"\\\n                                    , \"Infection Origin\", \"Gender-wise distribution of Patient Statuses\"),\n    specs=[[{\"type\": \"bar\"}, {\"type\": \"pie\"}],\n           [{\"type\": \"pie\"}, {\"type\": \"bar\"}]],\n)\n\n# Add traces\n# trace-1\ndf_males = df_sk_age[df_sk_age['sex']=='male'].groupby('age',as_index=False)['patient_id'].sum()\ndf_females = df_sk_age[df_sk_age['sex']=='female'].groupby('age',as_index=False)['patient_id'].sum()\nfig.add_trace(go.Bar(name='Males', x=df_males['age'], y=df_males['patient_id']), row=1, col=1)\nfig.add_trace(go.Bar(name='Females', x=df_females['age'], y=df_females['patient_id']), row=1, col=1)\n# trace-2\ndf_province = df_sk_age.groupby('province',as_index=False)['patient_id'].sum()\nfig.add_trace(go.Pie(labels=df_province['province'], values=df_province['patient_id'], hole=0.3), row=1, col=2)\n# trace-3\ndf_inf_case = df_sk_age.groupby('infection_case', as_index=False)['patient_id'].sum()\ndf_inf_case.loc[df_inf_case['patient_id'] < 50, 'infection_case'] = 'etc'\nfig.add_trace(go.Pie(labels=df_inf_case['infection_case'],values=df_inf_case['patient_id'], hole=0.3), row=2, col=1)\n# trace-4\ndf_males = df_sk[df_sk['sex']=='male'].groupby('state',as_index=False)['patient_id'].sum()\ndf_females = df_sk[df_sk['sex']=='female'].groupby('state',as_index=False)['patient_id'].sum()\nfig.add_trace(go.Bar(name='Males', x=df_males['state'], y=df_males['patient_id']), row=2, col=2)\nfig.add_trace(go.Bar(name='Females', x=df_females['state'], y=df_females['patient_id']), row=2, col=2)\n\n# Update xaxis properties\nfig.update_xaxes(title_text=\"Age\", row=1, col=1)\nfig.update_xaxes(title_text=\"Status\", row=2, col=2)\n\n# Update yaxis properties\nfig.update_yaxes(title_text=\"Confirmed Cases\", row=1, col=1)\nfig.update_yaxes(title_text=\"Total number of People\", row=2, col=2)\n\n# Update title and height\nfig.update_layout(title_text=\"South Korea: Some more visualizations\", height=700, showlegend=False)\n\nfig.show()","9fd79665":"df_pd = pd.read_csv('\/kaggle\/input\/countries-dataset-2020\/Pupulation density by countries.csv') \ndf_pd['iso_code3'] = df_pd.apply(lambda x: obj.fetch_iso3(x['Country (or dependent territory)'].strip()), axis=1)\ndf = df_train[df_train['Date']==train_date_max]\ndf = df_train.copy()\ndf = df.groupby(['Date','Country_Region'], as_index=False)['ConfirmedCases','Fatalities'].sum()\ndf['iso_code3'] = df.apply(lambda x:obj.fetch_iso3(x['Country_Region']), axis=1)\ndf = df.merge(df_pd, how='left', on='iso_code3')","a6ebfaef":"df","af542417":"def convert(pop):\n    if pop == float('nan'):\n        return 0.0\n    return float(pop.replace(',',''))\n\ndf['Population'].fillna('0', inplace=True)\ndf['Population'] = df.apply(lambda x: convert(x['Population']),axis=1)\ndf['Density pop.\/km2'].fillna('0', inplace=True)\ndf['Density pop.\/km2'] = df.apply(lambda x: convert(x['Density pop.\/km2']),axis=1)","b000a36b":"q3 = np.percentile(df.ConfirmedCases,75)\nq1 = np.percentile(df.ConfirmedCases,25)\nIQR = q3-q1\nlow = q1 - 1.5*IQR\nhigh = q3 + 1.3*IQR\ndf = df[(df['ConfirmedCases']>low) & (df['ConfirmedCases']<high)]\ndf['continent'] = df.apply(lambda x: obj.fetch_continent(x['Country_Region']), axis=1)","32f3637f":"df['Date_x'] = df['Date_x'].astype(str)","ece3628c":"px.scatter(df,x='ConfirmedCases',y='Density pop.\/km2', size = 'Population', color='continent',hover_data=['Country_Region'], title='Variation of Population density wrt Confirmed Cases',range_y=[0,1500])","ceb056b9":"px.scatter(df,x='Fatalities',y='Density pop.\/km2', size = 'Population', color='continent',hover_data=['Country_Region'],title='Variation of Population density wrt Fatalities',range_y=[0,1500])","30a8933b":"df.corr()","46882943":"#Add continent column to training set\ndf_train['Continent'] = df_train.apply(lambda X: obj.fetch_continent(X['Country_Region']), axis=1)","de08cc17":"df_train","af9d5773":"def categoricalToInteger(df):\n    #convert NaN Province State values to a string\n    df.Province_State.fillna('NaN', inplace=True)\n    #Define Ordinal Encoder Model\n    oe = OrdinalEncoder()\n    df[['Province_State','Country_Region','Continent']] = oe.fit_transform(df.loc[:,['Province_State','Country_Region','Continent']])\n    return df","db2d961a":"a=['a', 1], ['b',4], ['a', 2], ['c', 4]\noe = OrdinalEncoder()\nx = oe.fit_transform(a)\nx","d59031c6":"def create_features(df):\n    df['day'] = df['Date'].dt.day\n    df['month'] = df['Date'].dt.month\n    df['dayofweek'] = df['Date'].dt.dayofweek\n    df['dayofyear'] = df['Date'].dt.dayofyear\n    df['quarter'] = df['Date'].dt.quarter\n    df['weekofyear'] = df['Date'].dt.weekofyear\n    return df","cd90fe53":"def train_dev_split(df, days):\n    #Last days data as dev set\n    date = df['Date'].max() - dt.timedelta(days=days)\n    return df[df['Date'] <= date], df[df['Date'] > date]","d4a21b74":"def avoid_data_leakage(df, date=test_date_min):\n    return df[df['Date']<date]","deb9f9fa":"df_train = avoid_data_leakage(df_train)\ndf_train = categoricalToInteger(df_train)\ndf_train = create_features(df_train)","60baa2f7":"df_train, df_dev = train_dev_split(df_train,0)","d2b77634":"columns = ['day','month','dayofweek','dayofyear','quarter','weekofyear','Province_State', 'Country_Region','Continent','ConfirmedCases','Fatalities']\ndf_train = df_train[columns]\ndf_dev = df_dev[columns]","dd8e03a1":"#Apply the same transformation to test set that were applied to the training set\ndf_test['Continent'] = df_test.apply(lambda X: obj.fetch_continent(X['Country_Region']), axis=1)\ndf_test = categoricalToInteger(df_test)\ndf_test = create_features(df_test)\n#Columns to select\ncolumns = ['day','month','dayofweek','dayofyear','quarter','weekofyear','Province_State', 'Country_Region','Continent']","ada1a8c7":"submission = []\n#Loop through all the unique countries\nfor country in df_train.Country_Region.unique():\n    #Filter on the basis of country\n    df_train1 = df_train[df_train[\"Country_Region\"]==country]\n    #Loop through all the States of the selected country\n    for state in df_train1.Province_State.unique():\n        #Filter on the basis of state\n        df_train2 = df_train1[df_train1[\"Province_State\"]==state]\n        #Convert to numpy array for training\n        train = df_train2.values\n        #Separate the features and labels\n        X_train, y_train = train[:,:-2], train[:,-2:]\n        #model1 for predicting Confirmed Cases\n        model1 = XGBRegressor(n_estimators=1000)\n        model1.fit(X_train, y_train[:,0])\n        #model2 for predicting Fatalities\n        model2 = XGBRegressor(n_estimators=1000)\n        model2.fit(X_train, y_train[:,1])\n        #Get the test data for that particular country and state\n        df_test1 = df_test[(df_test[\"Country_Region\"]==country) & (df_test[\"Province_State\"] == state)]\n        #Store the ForecastId separately\n        ForecastId = df_test1.ForecastId.values\n        #Remove the unwanted columns\n        df_test2 = df_test1[columns]\n        #Get the predictions\n        y_pred1 = model1.predict(df_test2.values)\n        y_pred2 = model2.predict(df_test2.values)\n        #Append the predicted values to submission list\n        for i in range(len(y_pred1)):\n            d = {'ForecastId':ForecastId[i], 'ConfirmedCases':y_pred1[i], 'Fatalities':y_pred2[i]}\n            submission.append(d)","a676236e":"df_submit = pd.DataFrame(submission)","aeb1788f":"df_submit.to_csv(r'submission.csv', index=False)","59931517":"df_forcast = pd.concat([df_test,df_submit.iloc[:,1:]], axis=1)\ndf_world_f = df_forcast.copy()\ndf_world_f = df_world_f.groupby('Date',as_index=False)['ConfirmedCases','Fatalities'].sum()\ndf_world_f = add_daily_measures(df_world_f)","1bc0e030":"df_world = avoid_data_leakage(df_world)","b0e32da0":"fig = go.Figure(data=[\n    go.Bar(name='Total Cases', x=df_world['Date'], y=df_world['ConfirmedCases']),\n    go.Bar(name='Total Cases Forecasted', x=df_world_f['Date'], y=df_world_f['ConfirmedCases'])\n])\n# Change the bar mode\nfig.update_layout(barmode='group', title='Worldwide Confirmed Cases + Forecasted Cases')\nfig.show()","a45e2310":"fig = go.Figure(data=[\n    go.Bar(name='Total Deaths', x=df_world['Date'], y=df_world['Fatalities']),\n    go.Bar(name='Total Deaths Forecasted', x=df_world_f['Date'], y=df_world_f['Fatalities'])\n])\n# Change the bar mode\nfig.update_layout(barmode='group', title='Worldwide Deaths + Forecasted Deaths')\nfig.show()","191294b6":"> Hover on the map to view Recoveries and Deaths. ","febccc14":"Below plot is based on the above table. Colorscale has also been kept same to avoid confusion. Hover on the marker to know rest of the metrics. The plot shows Total Positive cases region wise(Represented through size of the marker) and Total tests performed till now(Represented by the 'Blue_r' colorscale).","30425f72":"Convert the submission list to DataFrame and save it as csv for submission","8281bf7d":"# <a id='for'>Forecast Vizualizations<\/a>\n[Go back to the main page](#main)","adddc73c":"In order to avoid data leakage, there should be no overlap between the data in the training and test set. Therefore, I'll remove the data from training set having dates that are already present in the test set.","ae7faebe":"Select all the columns that are needed for training the model.","efd7ea40":"#### <a id='ch'>China<\/a>\n- This is where it all started! By looking at the graph it can be seen that China has been able to almost stop the spread of COVID19 substantially.\n- Almost all the cases are from the Hubei Province which can be attributed to the fact that the outbreak started from its capital, Wuhan.\n\n> In order to get a better understanding of the cases\/fatalities growth from other provinces, you can click on Hubei in the legend so that it gets hidden and the scale will autoscale.","321d3c94":"# <a id='tp'>Training and Prediction<\/a>\n[Go back to the main page](#main)\n\nIn this section, I'll training the data on an XGBOOST model . Since, I have to predict both: **Confirmed Cases** & **Fatalities**, I'll be using 2 separate models.\n\nApply the same transformation to the test set that were applied to the training set.","7ff46ac3":"Split the training data into train and dev set for cross-validation.","e615a1a7":"# <a id='eda'>Exploratory Data Analysis(EDA)<\/a>\n[Go back to the main page](#main)\n\nAfter exploring the data and its datatypes, let's perform some EDA on the data in order to get a better understanding of the data and how COVID19 is affecting all of us.","ceb32831":"Currenty, the date is coming as a string. Lets convert it into datetime format so that EDA on the data becomes easier.","242cdc87":">Since, cases and fatalities have grown exponentially over the last two months and countries like China, Italy, USA,and Spain, I have plotted the choropleth map on logarithmic scale. You can hover on the country to know the total confirmed cases or fatalities.","65d85039":"# <a id='country'>Country Specific growth of COVID19<\/a>","3ca5eb68":"Here's a Region wise data for Italy. By the look of it, **Lombardy** region in Northern Italy has been the hardest hit. ","b12b08fe":"# COVID19 Predictions using XGBOOST\n![COVID19](https:\/\/media.giphy.com\/media\/gkF9T5vjfdoH0539ch\/giphy.gif)\n\nIn this Project I'll be using past three months data to predict the Confirmed Cases and Fatalities for the month of April. The model used for training will be an **XGBOOST** model.\n## <a id='main'>Table of Contents<\/a>\n- [Let's Explore the Data](#exp)\n- [Exploratory Data Analysis(EDA)](#eda)\n    1. [Universal growth of COVID19 over time](#world)\n    2. [Trend of COVID19 in top 10 affected countries](#top10)\n    3. [Mortality Rate](#dr)\n    4. [Country Specific growth of COVID19](#country)\n        - [United States of America](#us)\n        - [India](#in)\n        - [Italy](#it)\n        - [Spain](#sp)\n        - [China](#ch)\n        - [South Korea](#sk)\n- [Feature Engineering](#fe)\n- [Preprocessing](#pp)\n- [Training and Prediction](#tp)\n- [Forecast Visualizations](#for)","9866270f":"# <a id='pp'>Preprocessing<\/a>\n[Go back to the main page](#main)\n\nConvert Categorical variables: **Province_State** & **Country_Region**, into integers for training the model.\n\nProvince_State contains Null values. As I need null values as well as this feature is needed for training, I'll convert Null values to string 'NaN'. Now, OrdinalEncoder() can be easily applied on it.","c0716e93":"Below are my analysis from the above line plots for the top 10 affected countries:\n- Cases and Deaths for China have stagnated over time.\n- The cases and deaths are monotonically increasing(almost exponentially) for rest of the countries.\n- US has shown the greatest rise in the number of Confirmed Cases. Italy, on the other hand having the highest rise in deaths has to bear the brunt of the virus. Spain is a close second to Italy.\n- 6 out of the top 10 affected countries are Western European countries.","1ad3ea87":"# <a id='in'>India<\/a>\nCOVID19 outbreak has started a bit late in India as compared to other countries. But, it has started to pick up pace. With limited testing and not a well funded healthcare system, India is surely up for a challenge. Let's hope that the 21 day lockdown helps to stop or atleast slower down the spread of this dreaded virus.","5000a113":"# <a id='fe'>Feature Engineering<\/a>\n[Go back to the main page](#main)","9fc53c6c":"Confirmed Cases and Fatalities are *cummulative sums* of all the previous days. In order to understand the daily trend, I'll create a column for daily cases and deaths that will be the difference between the current value and the previous day's value.","e19eafe2":"Extract useful features from date.","9c64b716":"**Here's a state wise breakdown of cases, deaths and recoveries.**","0903c630":"# <a id='exp'>Lets explore the Data<\/a>","b6745746":"# <a id='dr'>Mortality Rate<\/a>\nI'm calculating the mortality rate as the number of fatalities divided by the number of confirmed cases. Through the choropleth map I'll showcase the daily death rate for all the countries facing the COVID19 outbreak.","caf4e469":"> **Tip**: Click on Iran in the legends tab to hide it and get a better understanding of the plot.","d2811cb9":"For a more detailed analysis on India refer to [India vs Coronavirus \ud83e\udda0](https:\/\/www.kaggle.com\/anshuls235\/uncovering-covid19-india)","af9ee7a2":"# <a id='it'>Italy<\/a>\nThis is the country that has had to bear the brunt of the virus the most. It has reported the maximum number of deaths out of all the countries till now. The whole country lockdown was imposed in italy on 9th of march. Let's see how italy is fairing now.","e914e7c8":"# <a id='top10'>Trend of COVID19 in top 10 affected countries<\/a>\nI need to find the Top 10 affected countries. Since, the Confirmed cases and Fatalities are the cummulative sums till date, I'll find the top 10 countries by using the country data of the last date for which the training data is available.\n\n\uc989, \uc774\uc81c\ub294 \ucd5c\uc2e0 \ub370\uc774\ud130\ub9cc\uc744 \uc774\uc6a9\ud574\uc11c COVID19\uac00 \uac00\uc7a5 \ub9ce\uc774 \ucc3d\uad90\ud55c 10\uac1c\uc758 \ub098\ub77c\ub97c \uc54c\uc544\ubcfc \uac83. ","fc6333df":"Below, I have also plotted the daily variation of Confirmed Cases and Deaths for Top 10 affected countries on a logarithmic scale.","be6080a3":"# <a id='world'>Universal growth of COVID19 over time<\/a>\nIn this section, I'll have a look at how COVID19 has been growing throughout the world from 22nd january 2020. I'll be using tree maps to show the share of COVID19 Cases worldwide and chloropleth maps with a time slider to show the daily impact of virus.  ","d1bca8b3":"# <a id='us'>United States of America<\/a>\nAs can be seen through the below graphs: \n- The COVID19 outbreak started from Washington state on the west coast and later on picked up pace in New york on the east coast . \n- Now, New York itself has around 40% of the total cases in USA.\n- New Jersey is the second in the list of worst affected states.\n- Cases and Fatalities in the East Coast are more than that of West Coast's.","5816376a":"Below are my finding from the above plots:-\n- China was the first country to experience the onset of virus.\n- US and Italy, which are the worst affected countries currently didn't recond many cases in january. This shows that how fast the virus spreads.\n- Majority of the cases are in the northern hemisphere, which is relatively cooler at this time of the year. Maybe the virus is temperature sensitive and as the summer progresses, we may see a fall in the growth of the cases in the northern hemisphere. Meaning not a good winter season for the southern hemisphere.\n- Western Europe is the worst affected. Hence, it can be adjudged as the new epicenter of COVID19. USA is also in the reckoning.\n- Lockdown has seem to have worked in China's favour as the growth rate has plummeted.","7d261e3c":"# <a id='sk'>South Korea<\/a>","c6accfe7":"# <a id='sp'>Spain<\/a>\nThe second worst affetced country in Europe after Italy. It has reported the maximum number of cases out of all the countries in Europe till now and secondmost worldwise. The whole country lockdown was imposed in Spain on 15th of march. Let's see how Spain is fairing now."}}