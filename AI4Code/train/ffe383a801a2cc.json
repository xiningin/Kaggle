{"cell_type":{"2820b819":"code","d2a0d172":"code","6e328eb6":"code","058cb378":"code","6bd6f4a8":"code","9de9f3fa":"code","737b06ab":"code","36d0dee3":"code","ece52a5c":"code","8020ff37":"code","d0a1ebda":"code","f763a301":"code","3c2b5a20":"code","fce2fb0f":"code","943edc08":"code","0c43f95a":"code","c60ecf6e":"code","13cceec1":"code","f00bbea7":"code","e7b302c8":"code","8051981b":"code","08ef10c5":"code","8fad2585":"code","ed3768c0":"code","e96c4361":"code","f0462071":"code","cf7b6517":"code","957d5218":"code","63a9e511":"code","2f7b2670":"code","efa33b17":"code","2d96d13a":"code","29938a8d":"code","ba981713":"code","78d1cb5b":"code","24715e50":"code","d9b20710":"code","c12dc821":"code","0534fbc6":"code","0e56df4c":"code","526ea3c6":"code","abd67dce":"code","75bba81a":"code","fd0a80f0":"code","d8512de6":"code","f5658514":"code","75d7ae9f":"code","155144bb":"code","4e1cdd76":"code","5a7fd147":"markdown"},"source":{"2820b819":"# \u041f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","d2a0d172":"# \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0444\u043e\u0440\u043a\u043d\u0443\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442 fetch, \u0447\u0442\u043e\u0431\u044b \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0435\u0433\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c. \u0417\u0430\u0442\u0435\u043c \u043d\u0443\u0436\u043d\u043e File>Add Utility Script>fetch\n\nimport fetch","6e328eb6":"# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0441\u043a\u0440\u0438\u043f\u0442 \u043e\u0442 grwlf \u0447\u0442\u043e\u0431\u044b \u0441\u043a\u0430\u0447\u0430\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u044f\u043d\u0434\u0435\u043a\u0441\u0430. \u0411\u0443\u0434\u0435\u043c \u044d\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0432 2 \u044f\u0447\u0435\u0439\u043a\u0438:\n\ndata = fetch.fetch_yandex(dump_folder='')","058cb378":"# \u0412\u0442\u043e\u0440\u0430\u044f \u044f\u0447\u0435\u0439\u043a\u0430, \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u044f. \u0417\u0430\u043f\u043e\u043c\u043d\u0438\u043c \u0438\u043c\u044f \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e.\n\ndata, filepath = fetch.format_csse2(data, dump_folder='')","6bd6f4a8":"# \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0438\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\nrussia = pd.read_csv('https:\/\/raw.githubusercontent.com\/grwlf\/COVID-19_plus_Russia\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_RU.csv')","9de9f3fa":"# \u0421\u0444\u0435\u0442\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432 \u043d\u0443\u0436\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435\n\nrussia_latest = pd.read_csv(filepath)","737b06ab":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0441\u0435\u0439\u0447\u0430\u0441\n\nrussia_latest.head()","36d0dee3":"# \u0418\u0441\u0442\u043e\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435\n\nrussia.head()","ece52a5c":"# \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\nrus = russia.set_index('Province_State').join(russia_latest.set_index('Province_State')['Confirmed'])","8020ff37":"today = filepath[:10]\ntoday2 = today[3:5]+'\/'+today[:2]+'\/'+today[-2:]","d0a1ebda":"# \u041d\u0430\u0432\u043e\u0434\u0438\u043c \u043c\u0430\u0440\u0430\u0444\u0435\u0442\n\nrus.drop(['UID','iso2','iso3','FIPS','Admin2','Country_Region','Lat','Long_','Combined_Key','code3'], axis=1, inplace=True)\nrus[today2] = rus['Confirmed']\ndel rus['Confirmed']","f763a301":"# \u0412\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0435\u0441\u0442\u044c:\n\nrus.head()","3c2b5a20":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 30 \u0434\u043d\u0435\u0439\n\nplt.figure(figsize=(15,10))\n\nplt.plot(rus.T.iloc[-30:,:])\n\nplt.show()","fce2fb0f":"# \u041b\u0443\u0447\u0448\u0435 \u0432\u0437\u044f\u0442\u044c \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u0442, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u041c\u043e\u0441\u043a\u0432\u0443\n\nplt.figure(figsize=(15,10))\n\nplt.plot(np.log(rus + 0.5).T[-30:])\n\nplt.show()","943edc08":"# \u0410 \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u0431\u044b \u0432\u0441\u0435\u0445 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441 8+ \u0441\u043b\u0443\u0447\u0430\u044f\u043c\u0438 \u0432 \u043d\u0430\u0447\u0430\u043b\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0430?\n\ny = np.log(rus + 0.5).T\ny_m = y[y>2]\nprint (np.exp(2))","0c43f95a":"y_gt_7 = pd.DataFrame(data = [[0 for i in range(85)] for j in range(len(y_m.columns))], index = range(len(y_m.columns)), columns = y_m.columns)","c60ecf6e":"for i in range(len(y_m.columns)):\n    temp = y_m.iloc[:,i].dropna().reset_index(drop=True)\n    y_gt_7.iloc[:temp.shape[0],i] = temp","13cceec1":"y_gt_7 = y_gt_7.replace(0,np.nan)","f00bbea7":"y_gt_7.iloc[0,:].max()","e7b302c8":"delta = y_gt_7.iloc[0,:].max() - y_gt_7.iloc[0,:]","8051981b":"plt.figure(figsize=(15,10))\n\nplt.plot(y_gt_7 + delta)\n\nplt.show()","08ef10c5":"# \u041f\u0443\u0441\u0442\u044c \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u0443\u0447\u0430\u0435\u0432, \u043d\u043e \u0432\u0441\u0435 \u0432\u043d\u0430\u0447\u0430\u043b\u0435.\n\nplt.figure(figsize=(15,10))\n\nplt.plot(y_gt_7)\n\nplt.show()","8fad2585":"# \u0421\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0440\u0435\u0433\u0438\u043e\u043d\u043e\u0432 \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c\n\nrussia_regions = pd.read_csv('\/kaggle\/input\/russia-regions-in-sber-covid-competition\/russia_regions.csv')","ed3768c0":"russia_regions.head()","e96c4361":"# \u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0435 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043d\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u044b, \u043f\u043e\u043c\u043e\u0436\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u0442\u044c\n\nrussia_regions.loc[russia_regions['iso_code'] == 'RU-NEN', 'csse_province_state'] = 'Nenetskiy autonomous oblast'\nrussia_regions.loc[russia_regions['iso_code'] == 'RU-CHU', 'csse_province_state'] = 'Chukotskiy autonomous oblast'","f0462071":"# \u041f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u043d\u044b\u043c \u043f\u0435\u0440\u0435\u0447\u043d\u0435\u043c \u0440\u0435\u0433\u0438\u043e\u043d\u043e\u0432\n\nrus['ind'] = rus.index\n# Altay republic > Republic of Altay\nrus.loc[rus.index == 'Altay republic', 'ind'] = 'Republic of Altay'\nrus.set_index('ind', inplace=True)","cf7b6517":"# \u0414\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043d\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0435\n\n# rus['04\/25\/20'] = rus['04\/26\/20']\n# del rus['04\/26\/20']","957d5218":"# i \u044d\u0442\u043e \u0438\u043d\u0434\u0435\u043a\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u043c: \u0431\u0435\u0440\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c (\u043a\u0440\u0430\u0439 \u0438 \u0442.\u043f.)\n\nscores = []\n\nfor i in range(len(rus.T.columns)):\n\n    obl = pd.DataFrame(rus.T.iloc[:,i].copy(), columns=[rus.T.iloc[:,i].name]) \n\n    # \u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0433\u0434\u0435 \u043a\u043e\u043b-\u0432\u043e \u0440\u0430\u0441\u0442\u0435\u0442, \u043f\u043e\u0442\u043e\u043c \u043f\u0430\u0434\u0430\u0435\u0442: \u043f\u0443\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0441\u0442\u0435\u0442\n    prev = 0\n    obl_corrected = []\n\n    for one in obl.iloc[:,0]:\n        if one < prev:\n            obl_corrected[-1] = one\n\n        obl_corrected.append(one)  \n        prev = one\n\n    obl.iloc[:,0] = obl_corrected\n\n    # \u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u043a \u0444\u043e\u0440\u043c\u0430\u0442\u0443 \u0434\u0430\u0442\u044b\n    obl.index = pd.to_datetime(obl.index) \n\n    ## \u0414\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\n    # \u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043c\u0435\u0440 \u0434\u043d\u044f \u0432 \u0433\u043e\u0434\u0443 - \"\u0434\u0430\u0442\u0430\" \u0434\u043b\u044f \u0432\u0441\u0435\u0445\n    obl['day_of_year'] = obl.index.dayofyear \n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c day7 - \u043d\u0430 1 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0442 \u0434\u043d\u0438 (\u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0433\u043e\u0434\u0430) \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u043e\u0433\u0434\u0430 \u043a\u0435\u0439\u0441\u043e\u0432 \u0441\u0442\u0430\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 7 (\u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u043a\u043e\u0433\u043e-\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u043e\u0441\u0442 \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439)\n    obl['day7'] = 0 \n    idx_day_7 = obl.iloc[:,0]>7\n    obl.loc[idx_day_7,'day7'] = obl.loc[idx_day_7,'day7'].index.dayofyear\n    day_day7 = obl.loc[obl['day7'] > 0, 'day7'].min() - 1\n    obl.loc[obl['day7'] > 0, 'day7'] -= day_day7 \n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c apr6 - \u043d\u0430 1 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0442 \u0434\u043d\u0438 \u0441 6 \u0430\u043f\u0440\u0435\u043b\u044f - \u043a\u043e\u0433\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u043a\u0430\u0440\u0430\u043d\u0442\u0438\u043d (30.03+7 \u0434\u043d\u0435\u0439) - \u0442\u0440\u0430\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430\u0441\u044c\n    obl['apr6'] = 0 \n    idx_apr_6 = obl.index >= '2020-04-06'\n    obl.loc[idx_apr_6,'apr6'] = obl.loc[idx_apr_6,'apr6'].index.dayofyear\n    day_apr6 = obl.loc[obl['apr6'] > 0, 'apr6'].min() - 1\n    obl.loc[obl['apr6'] > 0, 'apr6'] -= day_apr6 \n    \n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c last14 - \u043d\u0430 1 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0442 \u0434\u043d\u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 7 \u0434\u043d\u0435\u0439 - \u0431\u043e\u043b\u044c\u0448\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    obl['last14'] = 0 \n    idx_last_14 = obl.index >= obl.index[-14]\n    obl.loc[idx_last_14,'last14'] = obl.loc[idx_last_14,'last14'].index.dayofyear\n    day_last14 = obl.loc[obl['last14'] > 0, 'last14'].min() - 1\n    obl.loc[obl['last14'] > 0, 'last14'] -= day_last14\n    \n    # \u0418 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043a\u0432\u0430\u0434\u0440\u0430\u0442 \u043e\u0442 last14\n    obl['last14_2'] = obl['last14'] ** 2\n\n    # \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 2 \u0440\u0435\u0436\u0438\u043c\u0430 - day7 (\u0441\u0432\u0435\u0440\u0445\u0443) \u0438 apr6. \u0427\u0442\u043e \u0432\u0438\u0434\u043d\u043e?\n    plt.figure(figsize=(15,10))\n    pos_cases = obl.iloc[:,0]>0\n    plt.plot(np.log(obl.loc[pos_cases].iloc[:,0]))\n    plt.scatter(obl.loc[pos_cases,'day7'].index,(obl.loc[pos_cases,'day7']>0)+0.1)\n    plt.scatter(obl.loc[pos_cases,'apr6'].index,(obl.loc[pos_cases,'apr6']>0))\n    plt.title(obl.columns[0])\n    plt.show()\n    \n    # \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0425\n    X_cols = ['day_of_year','day7','apr6','last14', 'last14_2']\n    \n    # \u0434\u043e 19 \u043e\u0431\u0443\u0447\u0430\u0435\u043c, c 20 \u0431\u0443\u0434\u0435\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f\n    train = obl.loc[(pos_cases) & (obl.index<'2020-04-20')]\n    test  = obl.loc[obl.index>'2020-04-19']\n\n    # \u0425 \u0432 \u043b\u043e\u0433\n    X_train = np.log(train[X_cols] + 0.5)\n    y_train = np.log(train.iloc[:,0] + 0.5)\n    X_test = np.log(test[X_cols] + 0.5)\n    y_test = np.log(test.iloc[:,0] + 0.5)\n\n    # \u0421\u043a\u0430\u043b\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0434\u043b\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0441 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0445\u043e\u0440\u043e\u0448\u043e\n    from sklearn.preprocessing import StandardScaler\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    # print(scaler.mean_, scaler.var_)\n    X_train_scaled = scaler.transform(X_train)\n    X_test_scaled = scaler.transform(X_test)\n\n    # \u0421\u0442\u0440\u043e\u0438\u043c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e\n    from sklearn.linear_model import LinearRegression\n    reg = LinearRegression().fit(X_train_scaled, y_train.values)\n\n    # \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f 2 \u043c\u0435\u0442\u0440\u0438\u043a: \u043f\u0435\u0440\u0432\u0430\u044f - \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u043d\u0430\u044f, \u0432\u0442\u043e\u0440\u0430\u044f - \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u043e\u0442 \u0438\u0441\u0442\u0438\u043d\u044b\n    def MALE(pred, true):\n    #    print(np.log10((pred + 1) \/ (true + 1)))\n        return np.mean(np.abs(np.log10((pred + 1) \/ (true + 1))))\n\n    def AvgProc(pred, true):\n    #    print((pred-true)\/true)\n        return np.mean(np.abs((pred-true)\/true))\n\n    # \u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0443 \u043a \u043a\u043e\u043b-\u0432\u0443 \u0441\u043b\u0443\u0447\u0430\u0435\u0432\n    y_pred_test_exp = np.round(np.exp(reg.predict(X_test_scaled))-0.5,0)\n    y_pred_train_exp = np.round(np.exp(reg.predict(X_train_scaled))-0.5,0)\n    y_test_exp = np.round(np.exp(y_test)-0.5,0)\n    y_train_exp = np.round(np.exp(y_train)-0.5,0)\n\n    # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \"\u0410\u0440\u0445\u0430\u043d\u0433\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043f\u0440\u044b\u0436\u043e\u043a\" (\u0440\u0435\u0437\u043a\u043e\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 - \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437 \u043d\u0430 2\/3 \u043e\u0442 \u0441\u043a\u0430\u0447\u043a\u0430)\n    if i==2: \n        y_pred_test_exp = y_pred_test_exp + (y_train_exp[-1]-y_train_exp[-2])*(2\/3)\n\n    # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b\n    print(obl.columns[0])\n    print('coefs=', reg.coef_, 'const=', reg.intercept_)\n    print('MALE test = ', MALE(y_pred_test_exp, y_test_exp), 'MALE train =', MALE(y_pred_train_exp, y_train_exp))\n    print('AvgProc test = ', AvgProc(y_pred_test_exp, y_test_exp), 'AvgProc train =', AvgProc(y_pred_train_exp, y_train_exp))\n\n    # \u041e\u0442\u0440\u0438\u0441\u0443\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\n    plt.figure(figsize=(15,10))\n    for x,y in zip(y_test.index.dayofyear, y_test_exp):\n        label = \"{:.0f}\".format(y)\n        plt.annotate(label, # this is the text\n                     (x,y), # this is the point to label\n                     textcoords=\"offset points\", # how to position the text\n                     xytext=(0,-15), # distance from text to points (x,y)\n                     ha='center') # horizontal alignment can be left, right or center\n\n    for x,y in zip(y_test.index.dayofyear, y_pred_test_exp):\n        label = \"{:.0f}\".format(y)\n        plt.annotate(label, # this is the text\n                     (x,y), # this is the point to label\n                     textcoords=\"offset points\", # how to position the text\n                     xytext=(0,-15), # distance from text to points (x,y)\n                     ha='center') # horizontal alignment can be left, right or center\n\n    plt.title(obl.columns[0]+' predict')\n\n    plt.plot(y_test.index.dayofyear, y_pred_test_exp, 'ro-')\n    plt.plot(y_test.index.dayofyear, y_test_exp, 'bo-')\n\n    plt.grid()\n    plt.show()\n\n    # \u041e\u0442\u0440\u0438\u0441\u0443\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\n    plt.figure(figsize=(15,10))\n\n    for x,y in zip(y_train.index.dayofyear, y_train_exp):\n        label = \"{:.0f}\".format(y)\n        plt.annotate(label, # this is the text\n                     (x,y), # this is the point to label\n                     textcoords=\"offset points\", # how to position the text\n                     xytext=(0,-15), # distance from text to points (x,y)\n                     ha='center') # horizontal alignment can be left, right or center\n\n    for x,y in zip(y_train.index.dayofyear, y_pred_train_exp):\n        label = \"{:.0f}\".format(y)\n        plt.annotate(label, # this is the text\n                     (x,y), # this is the point to label\n                     textcoords=\"offset points\", # how to position the text\n                     xytext=(0,-15), # distance from text to points (x,y)\n                     ha='center') # horizontal alignment can be left, right or center\n\n    plt.title(obl.columns[0]+' fit')\n\n    plt.plot(y_train.index.dayofyear, y_pred_train_exp, 'ro-')\n    plt.plot(y_train.index.dayofyear, y_train_exp, 'bo-')\n\n    plt.grid()\n    plt.show()\n    \n    scores.append((obl.columns[0], MALE(y_pred_test_exp, y_test_exp)))","63a9e511":"# SCORE Avg MALE\n\nnp.mean([two for (one,two) in scores])","2f7b2670":"# \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u044f \u043b\u044e\u0431\u0438\u043c\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c - \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f 7 \u0434\u043d\u0435\u0439\n\nscores = []\n\nfor i in range(len(rus.T.columns)):\n\n    obl = pd.DataFrame(rus.T.iloc[:,i].copy(), columns=[rus.T.iloc[:,i].name]) \n\n    # \u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0433\u0434\u0435 \u043a\u043e\u043b-\u0432\u043e \u0440\u0430\u0441\u0442\u0435\u0442, \u043f\u043e\u0442\u043e\u043c \u043f\u0430\u0434\u0430\u0435\u0442: \u043f\u0443\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0441\u0442\u0435\u0442\n    prev = 0\n    obl_corrected = []\n\n    for one in obl.iloc[:,0]:\n        if one < prev:\n            obl_corrected[-1] = one\n\n        obl_corrected.append(one)  \n        prev = one\n\n    obl.iloc[:,0] = obl_corrected\n\n    # \u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u043a \u0444\u043e\u0440\u043c\u0430\u0442\u0443 \u0434\u0430\u0442\u044b\n    obl.index = pd.to_datetime(obl.index) \n\n    ## \u0414\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\n    # \u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0434\u043d\u044f \u0432 \u0433\u043e\u0434\u0443 - \"\u0434\u0430\u0442\u0430\" \u0434\u043b\u044f \u0432\u0441\u0435\u0445\n    obl['day_of_year'] = obl.index.dayofyear\n    \n    # \u0425\n    X_cols = ['day_of_year']\n    \n    # \u0434\u043e 19 \u043e\u0431\u0443\u0447\u0430\u0435\u043c, c 20 \u0431\u0443\u0434\u0435\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f\n    train = obl.loc[(obl.index>'2020-04-12') & (obl.index<'2020-04-20')]\n    test  = obl.loc[obl.index>'2020-04-19']\n    \n    # \u0425 \u0432 \u043b\u043e\u0433\n    X_train = np.log(train[X_cols] + 0.5)\n    y_train = np.log(train.iloc[:,0] + 0.5)\n    X_test = np.log(test[X_cols] + 0.5)\n    y_test = np.log(test.iloc[:,0] + 0.5)\n\n    # \u0421\u043a\u0430\u043b\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0434\u043b\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0441 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0445\u043e\u0440\u043e\u0448\u043e\n    from sklearn.preprocessing import StandardScaler\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    # print(scaler.mean_, scaler.var_)\n    X_train_scaled = scaler.transform(X_train)\n    X_test_scaled = scaler.transform(X_test)\n\n    # \u0421\u0442\u0440\u043e\u0438\u043c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e\n    from sklearn.linear_model import LinearRegression\n    reg = LinearRegression().fit(X_train_scaled, y_train.values)\n\n    # \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f 2 \u043c\u0435\u0442\u0440\u0438\u043a: \u043f\u0435\u0440\u0432\u0430\u044f - \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u043d\u0430\u044f, \u0432\u0442\u043e\u0440\u0430\u044f - \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u043e\u0442 \u0438\u0441\u0442\u0438\u043d\u044b\n    def MALE(pred, true):\n    #    print(np.log10((pred + 1) \/ (true + 1)))\n        return np.mean(np.abs(np.log10((pred + 1) \/ (true + 1))))\n\n    def AvgProc(pred, true):\n    #    print((pred-true)\/true)\n        return np.mean(np.abs((pred-true)\/true))\n\n    # \u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0443 \u043a \u043a\u043e\u043b-\u0432\u0443 \u0441\u043b\u0443\u0447\u0430\u0435\u0432\n    y_pred_test_exp = np.round(np.exp(reg.predict(X_test_scaled))-0.5,0)\n    y_pred_train_exp = np.round(np.exp(reg.predict(X_train_scaled))-0.5,0)\n    y_test_exp = np.round(np.exp(y_test)-0.5,0)\n    y_train_exp = np.round(np.exp(y_train)-0.5,0)\n\n    # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \"\u0410\u0440\u0445\u0430\u043d\u0433\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043f\u0440\u044b\u0436\u043e\u043a\" (\u0440\u0435\u0437\u043a\u043e\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 - \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437 \u043d\u0430 2\/3 \u043e\u0442 \u0441\u043a\u0430\u0447\u043a\u0430)\n    if i==2: \n        y_pred_test_exp = y_pred_test_exp + (y_train_exp[-1]-y_train_exp[-2])*(2\/3)\n\n    # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b\n    print(obl.columns[0])\n    print('coefs=', reg.coef_, 'const=', reg.intercept_)\n    print('MALE test = ', MALE(y_pred_test_exp, y_test_exp), 'MALE train =', MALE(y_pred_train_exp, y_train_exp))\n    print('AvgProc test = ', AvgProc(y_pred_test_exp, y_test_exp), 'AvgProc train =', AvgProc(y_pred_train_exp, y_train_exp))\n\n    # \u041e\u0442\u0440\u0438\u0441\u0443\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\n    plt.figure(figsize=(15,10))\n    for x,y in zip(y_test.index.dayofyear, y_test_exp):\n        label = \"{:.0f}\".format(y)\n        plt.annotate(label, # this is the text\n                     (x,y), # this is the point to label\n                     textcoords=\"offset points\", # how to position the text\n                     xytext=(0,-15), # distance from text to points (x,y)\n                     ha='center') # horizontal alignment can be left, right or center\n\n    for x,y in zip(y_test.index.dayofyear, y_pred_test_exp):\n        label = \"{:.0f}\".format(y)\n        plt.annotate(label, # this is the text\n                     (x,y), # this is the point to label\n                     textcoords=\"offset points\", # how to position the text\n                     xytext=(0,-15), # distance from text to points (x,y)\n                     ha='center') # horizontal alignment can be left, right or center\n\n    plt.title(obl.columns[0])\n\n    plt.plot(y_test.index.dayofyear, y_pred_test_exp, 'ro-')\n    plt.plot(y_test.index.dayofyear, y_test_exp, 'bo-')\n\n    plt.grid()\n    plt.show()\n\n    # \u041e\u0442\u0440\u0438\u0441\u0443\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\n    plt.figure(figsize=(15,10))\n\n    for x,y in zip(y_train.index.dayofyear, y_train_exp):\n        label = \"{:.0f}\".format(y)\n        plt.annotate(label, # this is the text\n                     (x,y), # this is the point to label\n                     textcoords=\"offset points\", # how to position the text\n                     xytext=(0,-15), # distance from text to points (x,y)\n                     ha='center') # horizontal alignment can be left, right or center\n\n    for x,y in zip(y_train.index.dayofyear, y_pred_train_exp):\n        label = \"{:.0f}\".format(y)\n        plt.annotate(label, # this is the text\n                     (x,y), # this is the point to label\n                     textcoords=\"offset points\", # how to position the text\n                     xytext=(0,-15), # distance from text to points (x,y)\n                     ha='center') # horizontal alignment can be left, right or center\n\n    plt.title(obl.columns[0])\n\n    plt.plot(y_train.index.dayofyear, y_pred_train_exp, 'ro-')\n    plt.plot(y_train.index.dayofyear, y_train_exp, 'bo-')\n\n    plt.grid()\n    plt.show()\n    \n    scores.append((obl.columns[0], MALE(y_pred_test_exp, y_test_exp)))\n    \n\n","efa33b17":"print('Avg MALE = ', np.mean([two for (one,two) in scores]))","2d96d13a":"scores = []\n\nfor i in range(len(rus.T.columns)):\n\n    obl = pd.DataFrame(rus.T.iloc[:,i].copy(), columns=[rus.T.iloc[:,i].name]) \n\n    # \u0418\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0433\u0434\u0435 \u043a\u043e\u043b-\u0432\u043e \u0440\u0430\u0441\u0442\u0435\u0442, \u043f\u043e\u0442\u043e\u043c \u043f\u0430\u0434\u0430\u0435\u0442: \u043f\u0443\u0441\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0441\u0442\u0435\u0442\n    prev = 0\n    obl_corrected = []\n\n    for one in obl.iloc[:,0]:\n        if one < prev:\n            obl_corrected[-1] = one\n\n        obl_corrected.append(one)  \n        prev = one\n\n    obl.iloc[:,0] = obl_corrected\n\n    # \u0418\u043d\u0434\u0435\u043a\u0441 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u043a \u0444\u043e\u0440\u043c\u0430\u0442\u0443 \u0434\u0430\u0442\u044b\n    obl.index = pd.to_datetime(obl.index) \n\n    ## \u0414\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n\n    # \u041f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u044b\u0439 \u043d\u043c\u0435\u0440 \u0434\u043d\u044f \u0432 \u0433\u043e\u0434\u0443 - \"\u0434\u0430\u0442\u0430\" \u0434\u043b\u044f \u0432\u0441\u0435\u0445\n    obl['day_of_year'] = obl.index.dayofyear \n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c day7 - \u043d\u0430 1 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0442 \u0434\u043d\u0438 (\u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0433\u043e\u0434\u0430) \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043a\u043e\u0433\u0434\u0430 \u043a\u0435\u0439\u0441\u043e\u0432 \u0441\u0442\u0430\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 7 (\u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u043a\u043e\u0433\u043e-\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0440\u043e\u0441\u0442 \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0439)\n    obl['day7'] = 0 \n    idx_day_7 = obl.iloc[:,0]>7\n    obl.loc[idx_day_7,'day7'] = obl.loc[idx_day_7,'day7'].index.dayofyear\n    day_day7 = obl.loc[obl['day7'] > 0, 'day7'].min() - 1\n    obl.loc[obl['day7'] > 0, 'day7'] -= day_day7 \n\n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c apr6 - \u043d\u0430 1 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0442 \u0434\u043d\u0438 \u0441 6 \u0430\u043f\u0440\u0435\u043b\u044f - \u043a\u043e\u0433\u0434\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u043a\u0430\u0440\u0430\u043d\u0442\u0438\u043d (30.03+7 \u0434\u043d\u0435\u0439) - \u0442\u0440\u0430\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0438\u043b\u0430\u0441\u044c\n    obl['apr6'] = 0 \n    idx_apr_6 = obl.index >= '2020-04-06'\n    obl.loc[idx_apr_6,'apr6'] = obl.loc[idx_apr_6,'apr6'].index.dayofyear\n    day_apr6 = obl.loc[obl['apr6'] > 0, 'apr6'].min() - 1\n    obl.loc[obl['apr6'] > 0, 'apr6'] -= day_apr6 \n    \n    # \u0421\u043e\u0437\u0434\u0430\u0435\u043c last7 - \u043d\u0430 1 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0442 \u0434\u043d\u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 7 \u0434\u043d\u0435\u0439 - \u0431\u043e\u043b\u044c\u0448\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    obl['last7'] = 0 \n    idx_last_7 = obl.index >= obl.index[-7]\n    obl.loc[idx_last_7,'last7'] = obl.loc[idx_last_7,'last7'].index.dayofyear\n    day_last7 = obl.loc[obl['last7'] > 0, 'last7'].min() - 1\n    obl.loc[obl['last7'] > 0, 'last7'] -= day_last7\n    \n    # \u0418 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043a\u0432\u0430\u0434\u0440\u0430\u0442 \u043e\u0442 last7\n    obl['last7_2'] = obl['last7'] ** 2\n\n    # \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 2 \u0440\u0435\u0436\u0438\u043c\u0430 - day7 (\u0441\u0432\u0435\u0440\u0445\u0443) \u0438 apr6. \u0427\u0442\u043e \u0432\u0438\u0434\u043d\u043e?\n#     plt.figure(figsize=(15,10))\n    pos_cases = obl.iloc[:,0]>0\n#     plt.plot(np.log(obl.loc[pos_cases].iloc[:,0]))\n#     plt.scatter(obl.loc[pos_cases,'day7'].index,(obl.loc[pos_cases,'day7']>0)+0.1)\n#     plt.scatter(obl.loc[pos_cases,'apr6'].index,(obl.loc[pos_cases,'apr6']>0))\n#     plt.title(obl.columns[0])\n#     plt.show()\n    \n    # \u0421\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0425\n    X_cols = ['day_of_year','day7','apr6','last7', 'last7_2']\n    \n    # \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043e\u0431\u0443\u0447\u0430\u0435\u043c, c 27 \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0442\u044c\n    train = obl.loc[(pos_cases)]\n    \n    wk3 = ['2020-04-27','2020-04-28','2020-04-29','2020-04-30','2020-05-01','2020-05-02','2020-05-03']\n    test  = pd.DataFrame(index = pd.to_datetime(wk3), data = [], columns = X_cols)\n    test['day_of_year'] = test.index.dayofyear\n    count_down = test.index.dayofyear - test.index.dayofyear.min()\n    test['day7'] = count_down + train['day7'].max() + 1\n    test['apr6'] = count_down + train['apr6'].max() + 1\n    test['last7'] = count_down + 8\n    test['last7_2'] = test['last7'] ** 2\n\n    # \u0425 \u0432 \u043b\u043e\u0433\n    X_train = np.log(train[X_cols] + 0.5)\n    y_train = np.log(train.iloc[:,0] + 0.5)\n    X_test = np.log(test[X_cols] + 0.5)\n#    y_test = np.log(test.iloc[:,0] + 0.5)\n\n    # \u0421\u043a\u0430\u043b\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0434\u043b\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 \u0441 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0445\u043e\u0440\u043e\u0448\u043e\n    from sklearn.preprocessing import StandardScaler\n    scaler = StandardScaler()\n    scaler.fit(X_train)\n    # print(scaler.mean_, scaler.var_)\n    X_train_scaled = scaler.transform(X_train)\n    X_test_scaled = scaler.transform(X_test)\n\n    # \u0421\u0442\u0440\u043e\u0438\u043c \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e\n    from sklearn.linear_model import LinearRegression\n    reg = LinearRegression().fit(X_train_scaled, y_train.values)\n\n    # \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f 2 \u043c\u0435\u0442\u0440\u0438\u043a: \u043f\u0435\u0440\u0432\u0430\u044f - \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u043d\u0430\u044f, \u0432\u0442\u043e\u0440\u0430\u044f - \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u043e\u0442 \u0438\u0441\u0442\u0438\u043d\u044b\n    def MALE(pred, true):\n    #    print(np.log10((pred + 1) \/ (true + 1)))\n        return np.mean(np.abs(np.log10((pred + 1) \/ (true + 1))))\n\n    def AvgProc(pred, true):\n    #    print((pred-true)\/true)\n        return np.mean(np.abs((pred-true)\/true))\n\n    # \u041f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0443 \u043a \u043a\u043e\u043b-\u0432\u0443 \u0441\u043b\u0443\u0447\u0430\u0435\u0432\n    y_pred_test_exp = np.round(np.exp(reg.predict(X_test_scaled))-0.5,0)\n    y_pred_train_exp = np.round(np.exp(reg.predict(X_train_scaled))-0.5,0)\n#    y_test_exp = np.round(np.exp(y_test)-0.5,0)\n    y_train_exp = np.round(np.exp(y_train)-0.5,0)\n\n    # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \"\u0410\u0440\u0445\u0430\u043d\u0433\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043f\u0440\u044b\u0436\u043e\u043a\" (\u0440\u0435\u0437\u043a\u043e\u0435 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 - \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437 \u043d\u0430 2\/3 \u043e\u0442 \u0441\u043a\u0430\u0447\u043a\u0430)\n    if i==2: \n        y_pred_test_exp = y_pred_test_exp + (y_train_exp[-1]-y_train_exp[-2])*(2\/3)\n\n    # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b\n    print(obl.columns[0])\n    print('coefs=', reg.coef_, 'const=', reg.intercept_)\n    print('MALE train =', MALE(y_pred_train_exp, y_train_exp))\n    print('AvgProc train =', AvgProc(y_pred_train_exp, y_train_exp))\n\n    # \u041e\u0442\u0440\u0438\u0441\u0443\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\n    plt.figure(figsize=(15,10))\n#     for x,y in zip(y_test.index.dayofyear, y_test_exp):\n#         label = \"{:.0f}\".format(y)\n#         plt.annotate(label, # this is the text\n#                      (x,y), # this is the point to label\n#                      textcoords=\"offset points\", # how to position the text\n#                      xytext=(0,-15), # distance from text to points (x,y)\n#                      ha='center') # horizontal alignment can be left, right or center\n\n    for x,y in zip(wk3, y_pred_test_exp):\n        label = \"{:.0f}\".format(y)\n        plt.annotate(label, # this is the text\n                     (x,y), # this is the point to label\n                     textcoords=\"offset points\", # how to position the text\n                     xytext=(0,-15), # distance from text to points (x,y)\n                     ha='center') # horizontal alignment can be left, right or center\n\n    plt.title(obl.columns[0]+' predict')\n\n    plt.plot(wk3, y_pred_test_exp, 'ro-')\n#     plt.plot(y_test.index.dayofyear, y_test_exp, 'bo-')\n\n    plt.grid()\n    plt.show()\n\n    # \u041e\u0442\u0440\u0438\u0441\u0443\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c\n    plt.figure(figsize=(15,10))\n\n    for x,y in zip(y_train.index, y_train_exp):\n        label = \"{:.0f}\".format(y)\n        plt.annotate(label, # this is the text\n                     (x,y), # this is the point to label\n                     textcoords=\"offset points\", # how to position the text\n                     xytext=(0,-15), # distance from text to points (x,y)\n                     ha='center') # horizontal alignment can be left, right or center\n\n    for x,y in zip(y_train.index, y_pred_train_exp):\n        label = \"{:.0f}\".format(y)\n        plt.annotate(label, # this is the text\n                     (x,y), # this is the point to label\n                     textcoords=\"offset points\", # how to position the text\n                     xytext=(0,-15), # distance from text to points (x,y)\n                     ha='center') # horizontal alignment can be left, right or center\n\n    plt.title(obl.columns[0]+' fit')\n\n    plt.plot(y_train.index, y_pred_train_exp, 'ro-')\n    plt.plot(y_train.index, y_train_exp, 'bo-')\n\n    plt.grid()\n    plt.show()\n    \n    scores.append((obl.columns[0], y_pred_test_exp))","29938a8d":"scores","ba981713":"sub_reg = pd.DataFrame([one[0] for one in scores], columns=['reg'])\npreds = pd.DataFrame([one[1] for one in scores], columns=wk3).astype(int)","78d1cb5b":"sub_reg = pd.concat([sub_reg, preds], axis = 1)","24715e50":"sub_reg = sub_reg.set_index('reg').join(russia_regions.set_index('csse_province_state')['iso_code'])","d9b20710":"sub = sub_reg.set_index('iso_code').T ","c12dc821":"sub","0534fbc6":"submit = pd.DataFrame()\n\nfor col in sub.columns:\n    submit = pd.concat([submit,pd.DataFrame(data = {'region':7*[col], 'prediction_confirmed':sub[col]})])\n    ","0e56df4c":"submit.reset_index(inplace=True)","526ea3c6":"submit['date'] = submit['index']\ndel submit['index']","abd67dce":"sample = pd.read_csv('\/kaggle\/input\/prediction-format\/sample_submission_JgJvhOF.csv')","75bba81a":"sample","fd0a80f0":"submit_joined = sample.set_index(['date','region']).join(submit.set_index(['date','region']), rsuffix = 'r')","d8512de6":"submit_joined","f5658514":"submit_joined.loc[submit_joined['prediction_confirmedr'].notnull(),'prediction_confirmed'] = \\\n    submit_joined.loc[submit_joined['prediction_confirmedr'].notnull(),'prediction_confirmedr'] ","75d7ae9f":"del submit_joined['prediction_confirmedr']\nsubmit_joined.reset_index(inplace=True)","155144bb":"submit_joined['prediction_confirmed'] = submit_joined['prediction_confirmed'].astype(int)","4e1cdd76":"submit_joined.to_csv('submit_wk3.csv', index=None)","5a7fd147":"# \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0436\u0435\u043c \u043d\u0430 \u0432\u0441\u0435\u043c \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0439 \u043d\u0435\u0434\u0435\u043b\u0438"}}