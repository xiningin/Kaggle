{"cell_type":{"77f7900d":"code","e2919f70":"code","f86b5bfe":"code","21b69944":"code","b7bc4014":"code","60f4e634":"code","0f3ef8e2":"code","1dd2f13e":"code","e1a8a4f3":"code","62c35a93":"code","ecb44d80":"code","2b799aee":"code","21463052":"code","ee6fc788":"code","d045a5f9":"code","4477e6dd":"code","5e0f128b":"code","32c39ddc":"code","930ff971":"code","89aa560c":"code","2f4d3280":"code","cb34526f":"code","0c07c2b6":"markdown","f6eb2a39":"markdown","f727920f":"markdown","8bb9d2e7":"markdown","00572c38":"markdown","1c1e036e":"markdown","91977bb3":"markdown","41a1d8e1":"markdown","345ef304":"markdown","7ae8c92e":"markdown","71b98d7a":"markdown","608e823d":"markdown","b90f161d":"markdown","c0791d04":"markdown","5716357d":"markdown","099eec31":"markdown","1ce95c27":"markdown","6f774050":"markdown","68a14026":"markdown","b0031a2f":"markdown","33235a8c":"markdown","6a4bb36b":"markdown","7d499cc7":"markdown"},"source":{"77f7900d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2919f70":"def numOfD(n):\n    \n    count=0\n    while n>0:\n        rem=n%10\n        n=n\/\/10\n        count+=1\n    return count\nprint(numOfD(102))\n        ","f86b5bfe":"import math\n\nmath.log10(130)\/\/1 +1\n    ","21b69944":"def factRec(n):\n    if n==0 or n==1:\n        return 1\n    else:\n        return n* factRec(n-1)","b7bc4014":"def palinNum(n):\n    orig=n\n    newNum=0\n    while n>0:\n        rem=n%10\n        n=n\/\/10\n        newNum=newNum*10+rem\n    if newNum==orig:\n        print('Palindrome')\n    else:\n        print('Not palindrome')\n        \nn=int(input())\npalinNum(n)","60f4e634":"def countTrailing(n):\n    fact=factRec(n)\n    count=0\n    \n    while(1):\n        if fact %10 !=0:\n            break\n        fact=fact\/\/10\n        count+=1\n    return count\nprint(countTrailing(10))\n    ","0f3ef8e2":"def trailingZeroCountInFact(n):\n    zeroes=0\n    i=5\n    while(1):\n        if i>n:\n            break\n        zeroes=zeroes+n\/\/i\n        i=i*5\n    return zeroes\n\nprint(trailingZeroCountInFact(33))\n        ","1dd2f13e":"def primeFactors(n):\n    \n    arr=[]\n    \n    #for even prime factors\n    while n%2==0:\n        arr.append(2)\n        n=n\/\/2\n   #for odd prime factors\n    x=3\n    while x*x <=n:\n        while n%x==0:\n            arr.append(x)\n            n=n\/\/x\n        x+=2\n    \n    #if remaining n>2 then ,the remaining n itself is prime\n    if n>2:\n        arr.append(n)\n    return arr\nprint(primeFactors(20))\n        ","e1a8a4f3":"def GCD(a,b):\n    while a!=b:\n        if a>b:\n            a=a-b\n        else:\n            b=b-a\n    return a\n\nprint(GCD(100,200))","62c35a93":"#optimizaton by modular division of eculidean algo\nO(logn)\n\ndef optimizedGCD(a,b):\n    if b==0:\n        return a\n    else:\n        return optimizedGCD(b,a%b)    #a%b < b always \nprint(optimizedGCD(8,20))\n\n\n#why this is btetter ? less calls then repeated subtraction approach earlier\n# GCD(8,20)=>GCD(20,8)=>GCD(8,4)=>GCD(4,0)=>4\n","ecb44d80":"#naive approach  worst TC (O(a*b))\ndef LCM(a,b):\n    mx=max(a,b)\n    \n    while(1):\n        if mx%a==0 and mx%b==0:\n            return mx\n        mx+=1\n    return mx\n    \n    \n        \n    ","2b799aee":"#efficient soln for LCM\n\n# a*b = GCD(a,b) *LCM(a,b)\n\ndef optimizedLCM(a,b):\n    return (a*b)\/\/optimizedGCD(a,b)\n\nprint(optimizedLCM(20,7))\n    ","21463052":"def primeChk(n):\n    if n<2:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    i=3\n    while i*i <=n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\n\nprimeChk(211)","ee6fc788":"#more efficient way for large input O(sqrt(n))\n#check for div by 2 and 3 early and save iterations\ndef veryEffPrimeChk(n):\n    if n<2: \n        return False\n    if n==2 or n==3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i=i+6\n    return True\nprint(veryEffPrimeChk(19))\n     ","d045a5f9":"#use an array and flip value for every position which is its factor\ndef divisors(n):\n    arr=[0 for i in range((n\/\/2)+1)]\n    if n>0:\n        print(1,end=' ')\n    for x in range(2,(n+1)\/\/2):\n        if arr[x]==0:\n            if n%x==0:\n                arr[x]=1\n                arr[n\/\/x]=1\n                print(x,end=' ')\n        else:\n            print(x,end=' ')\n    print(n)\n    \ndivisors(100)","4477e6dd":"#optimized approach O(sqrt(n))\n\ndef printDivisor(n):\n    i=1\n    while i*i<n:\n        if n%i==0:\n            print(i,end=\" \")\n        i+=1\n    while i*i>=1:\n        if n%i==0:\n            print(n\/\/i,end=' ')\n        i-=1\nprintDivisor(100)","5e0f128b":"#O(sqrt(n))\ndef SoE(n):\n    if n<1:\n        return\n    isPrime=[1 for i in range(n+1)]     #dummy array of 1\n    isPrime[0]=isPrime[1]=0             #neither prime nor composite\n    sqrtn=int(n**0.5)\n    for x in range(2,sqrtn+1):      \n        if isPrime[x]:\n            #mark all multiples of this number as 0\n            for i in range(2*x,n+1,x):\n                isPrime[i]=0\n    print(\"The prime numbers upto {0} are :\".format(n),end=' ')\n    \n    for x in range(2,n+1):\n        if isPrime[x]:\n            print(x,end=' ')\nSoE(100)\n    \n        ","32c39ddc":"4**0","930ff971":"#O(logn)\ndef iterPower(x,n,modulo):\n    res=1\n    \n    while(n>0):\n        if n%2!=0:\n            res=(res*x)%modulo\n        #modulo to handle large number multiplication\n        x=(x*x)%modulo\n        n=n>>1\n    return res\n            \n            \nprint(iterPower(4,5,10000))\n\nprint(4**5)\n","89aa560c":"\ndef factDigits(N):\n    import math\n    if N<=3:\n        return 1\n    sumOfLogs=0\n    while N>0:\n        sumOfLogs=sumOfLogs+math.log10(N)\n        N=N-1\n    return math.floor(sumOfLogs) +1\nfactDigits(4)\n    ","2f4d3280":"def exactly3Divisors(N):\n        if N<4:\n            return 0\n        if N<9:\n            return 1\n        if N<25:\n            return 2\n        i=2\n        limit=int(N**0.5)+1\n        isSq=[1 for x in range(limit)]\n    \n        isSq[0]=isSq[1]=0\n        while i*i<=N:\n            for x in range(2*i,limit,i):\n            \n                    isSq[x]=0\n            i+=1\n        count=0\n        for x in range(2,limit):\n            if isSq[x]:\n                if x*x<=N:\n                    count+=1\n        return count\n    \nprint(exactly3Divisors(70))\n                \n            ","cb34526f":"def modInverse(a,m):\n    for x in range(m):\n        res= (x*a)%m\n        if res==1:\n            return x\n    return -1\nprint(modInverse(8,5))\n    \n    ","0c07c2b6":"# LCM of two numbers\n\n","f6eb2a39":"# AP GP\n>nth term=> a+(n-1)d \n\n>sum= avg *n => ((First term +last term)\/2)*n  => n(a+ ((n-1)\/2)d)\n\n\n\n# GP=>\n>r= ratio of 2 consecutive term\n\n>first=> a\n\n>2nd => a*r\n\n>nth a *r**(n-1)\n\n>sum => a(1-r**n)\/(1-r)","f727920f":"# factorial\n","8bb9d2e7":"# efficient method to count trailing zeroes => count number of 2 and 5 the prime factorisation of this number has\n\n# 2 and 5 togther forms a zero , so need to count (2,5) pair in prime factorisation\n# tip: the number of 5 are always less than number of 2 , so just count number of 5 in prime factorisation\n\n![image.png](attachment:image.png)\n\n\n**25 has two 5 s therefore consider 25 as well , similarly 25*5 , 125 and so on**\n\n\n\n\n\n\n","00572c38":"# no. of digits in a number","1c1e036e":"# Exactly 3 divisers\n\n=> prime square upto N","91977bb3":"# prime number \n\n2,3,5,7.....\n\nevery prime number can be represented in form  6n +1 or 6n-1  except 2 and 3, where n is a natural number","41a1d8e1":"# Divisor of a number","345ef304":"# modular arithemtic\nremainder obatained after division operation of two operands is known as modulo operation\n\n%\n\n7%2=1\n\nunsigned long long int =>64 bit\nif growth of output outgrows this , we use modular arithematic to shorted answer\n\n","7ae8c92e":"# GCD \/HCF\n\neuclid algo\n\nif b <a\n        \n        then GCD(a,b) =GCD(a-b,b)\n        \n  ex GCD(20,8) = 4\n     \n        GCD(12,8)= 4\n        \n        GCD(4,8) =4\n        \n        a<b\n        \n        then GCD(a,b)=GCD(a,b-a)\n        \n        GCD(4,8)=GCD(4,4)\n        \n        if a==b:\n        GCD =>a \n        \n        \n        \n        \n        \n\n","71b98d7a":"# Palindrome  numbers\n\ndef palinNum(n):\n","608e823d":"# Floor(log(n)) +1 => no. of digits in N\n\n# find number of digits in  factorial of N\n\nlog(N!)= log(1*2*3....N) =log(1)+log(2)+.....log(N)","b90f161d":"# Seive of Erasthosthenes\n\nprint all prime nnumbers upto n\n","c0791d04":"# Prime factors of a number\n\n","5716357d":"# mean and median\nmean=> all data sum \/number of sum\n\nmedian=> sort and get middle number or get mean of middle two if even count","099eec31":"# Modular multiplicative inverse\n\nGiven two integers \u2018a\u2019 and \u2018m\u2019. The task is to find the smallest modular multiplicative inverse of \u2018a\u2019 under modulo \u2018m\u2019.\n\nInput:\na = 3\n\nm = 11\n\nOutput: 4\n\nExplanation: Since (4*3) mod 11 = 1, 4 \nis modulo inverse of 3. One might think,\n15 also as a valid output as \"(15*3)\nmod 11\"  is also 1, but 15 is not in \nring {0, 1, 2, ... 10}, so not valid\n","1ce95c27":"# iterative soltion to power problem (binary exponentation)\n\nassumption: every number can be wriitten as sum of power of 2 (set of bits in binary rep)\n\nwe can traverse through all bits of a number form LSB to MSB in O(logN) time\n\n3^10 =3^8 * 3^2            | 10: 1010 ![image.png](attachment:image.png)\n\n\n\n3^19= 3^16 * 3^2 * 3^1       | 19: 10011","6f774050":"# Prime number check \n\ntip: if n is divisible by sqrt(n) or smaller than it , then its not a prime\n\n\n","68a14026":"# count trailing zeroes in factorial of a number\n","b0031a2f":"# PnC\n\nPermuatation : arrrangement of R things than can be done out of total N things\n\nnp=>   fact(n)\/fact(n-r)\n\nCombination: selection of R things that can be done out of total N things\n\nnC=> fact(n)\/(fact(r)*fact(n-r))\n\n","33235a8c":"F = (9\/5)*C +32 ","6a4bb36b":"# addition under modulo \n\n    def sumUnderModulo(a,b):\n        return (a+b)%(10**9 +7)","7d499cc7":"# LCM AND HCF\n\n\n"}}