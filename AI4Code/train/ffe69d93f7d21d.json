{"cell_type":{"26b372a7":"code","d524e5df":"code","db5bd47e":"code","53c21bea":"code","3f87fcb1":"code","c12e9dec":"code","a2b9986d":"code","0d7c50a4":"code","b8f0914a":"code","28b88b8f":"code","557f4f3e":"code","6ee7d2d7":"code","c502ad94":"code","d411dbca":"code","ba3db856":"code","185c8328":"code","27c1758f":"code","85158dcc":"code","64b0cb6d":"markdown","d291dfef":"markdown","80520707":"markdown","36649b8c":"markdown","a1b21ead":"markdown","7f5f739d":"markdown","e26ad473":"markdown","7bcdae02":"markdown"},"source":{"26b372a7":"import numpy as np\nimport pandas as pd\n!pip install geopandas\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport random\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors\nfrom plotly.subplots import make_subplots\ninit_notebook_mode(connected=True)\nimport cufflinks as cf\ncf.go_offline()\nfrom wordcloud import WordCloud , ImageColorGenerator\nfrom PIL import Image\n!python3.7 -m pip install --upgrade pip\n!pip install pywaffle\nfrom pywaffle import Waffle \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.express as px\n\nimport cufflinks as cf \n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")\nplt.style.use(\"fivethirtyeight\")\n\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nfrom plotly import tools\ninit_notebook_mode(connected=True)  \nimport plotly.figure_factory as ff\n\nimport random","d524e5df":"def random_colors(number_of_colors):\n    color = [\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)])\n                 for i in range(number_of_colors)]\n    return color","db5bd47e":"deliveries = pd.read_csv('..\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv')\nmatches = pd.read_csv('..\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv')","53c21bea":"print(f'Number of rows    = {len(matches)}')\nprint(f'Number of columns = {len(matches.columns)}')\n","3f87fcb1":"matches.head()","c12e9dec":"print(f'Number of rows    = {len(deliveries)}')\nprint(f'Number of columns = {len(deliveries.columns)}')\n","a2b9986d":"deliveries.head()","0d7c50a4":"matches.isnull().sum()","b8f0914a":"matches.columns","28b88b8f":"deliveries.isnull().sum()","557f4f3e":"deliveries.columns","6ee7d2d7":"print(deliveries['winner'].unique())\nprint(deliveries['city'].unique())","c502ad94":"deliveries.team1.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant'},regex=True,inplace=True)\ndeliveries.team2.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant'},regex=True,inplace=True)\ndeliveries.winner.replace({'Rising Pune Supergiants' : 'Rising Pune Supergiant'},regex=True,inplace=True)\ndeliveries.venue.replace({'Feroz Shah Kotla Ground':'Feroz Shah Kotla',\n                    'M Chinnaswamy Stadium':'M. Chinnaswamy Stadium',\n                    'MA Chidambaram Stadium, Chepauk':'M.A. Chidambaram Stadium',\n                     'M. A. Chidambaram Stadium':'M.A. Chidambaram Stadium',\n                     'Punjab Cricket Association IS Bindra Stadium, Mohali':'Punjab Cricket Association Stadium',\n                     'Punjab Cricket Association Stadium, Mohali':'Punjab Cricket Association Stadium',\n                     'IS Bindra Stadium':'Punjab Cricket Association Stadium',\n                    'Rajiv Gandhi International Stadium, Uppal':'Rajiv Gandhi International Stadium',\n                    'Rajiv Gandhi Intl. Cricket Stadium':'Rajiv Gandhi International Stadium'},regex=True,inplace=True)","d411dbca":"deliveries.replace('Bangalore','Bengaluru', inplace = True)","ba3db856":"#fill missing values\ndef find_city(cols):\n    city=cols[0]\n    venue=cols[1]\n    \n    if pd.isnull(city):\n        if venue==\"M. Chinnaswamy Stadium\" or venue==\"M.Chinnaswamy Stadium\":\n           return 1\n        elif venue==\"Punjab Cricket Association Stadium\":\n           return 2\n        elif venue==\"Feroz Shah Kotla\":\n           return 3\n        elif venue=='Wankhede Stadium':\n           return 4\n        elif venue==\"Eden Gardens\":\n           return 5\n        elif venue==\"Sawai Mansingh Stadium\":\n           return 6\n        elif venue==\"Rajiv Gandhi International Stadium\":\n           return 7\n        elif venue==\"M.A. Chidambaram Stadium\":\n           return 8\n        elif venue==\"Dr DY Patil Sports Academy\":\n           return 4\n        elif venue==\"Newlands\":\n           return 9\n        elif venue==\"St George's Park\":\n           return 10\n        elif venue==\"Kingsmead\":\n           return 11\n        elif venue==\"SuperSport Park\":\n           return 12\n        elif venue==\"Buffalo Park\":\n           return 13\n        elif venue==\"New Wanderers Stadium\":\n           return 14\n        elif venue==\"De Beers Diamond Oval\":\n           return 15\n        elif venue==\"OUTsurance Oval\":\n           return 16\n        elif venue==\"Brabourne Stadium\":\n           return 4\n        elif venue==\"Sardar Patel Stadium, Motera\":\n           return 17\n        elif venue==\"Barabati Stadium\":\n           return 18\n        elif venue==\"Vidarbha Cricket Association Stadium, Jamtha\":\n           return 19\n        elif venue==\"Himachal Pradesh Cricket Association Stadium\":\n           return 20\n        elif venue==\"Nehru Stadium\":\n          return 21\n        elif venue==\"Holkar Cricket Stadium\":\n          return 22\n        elif venue==\"Dr. Y.S. Rajasekhara Reddy ACA-VDCA Cricket Stadium\":\n          return 23\n        elif venue==\"Subrata Roy Sahara Stadium\":\n          return 24\n        elif venue==\"Shaheed Veer Narayan Singh International Stadium\":\n          return 25\n        elif venue==\"JSCA International Stadium Complex\":\n          return 26\n        elif venue==\"Sheikh Zayed Stadium\":\n          return 27\n        elif venue==\"Sharjah Cricket Stadium\":\n          return 31\n        elif venue==\"Dubai International Cricket Stadium\":\n          return 30\n        elif venue==\"Maharashtra Cricket Association Stadium\":\n          return 24\n        elif venue==\"Saurashtra Cricket Association Stadium\":\n          return 28\n        elif venue==\"Green Park\":\n          return 29\n        \n    else :\n            return city\n        \n       \n        \n        \n        \ndeliveries['city'] = deliveries[['city','venue']].apply(find_city,axis=1)\ndeliveries['winner'].fillna(deliveries['result'], inplace = True)\ndeliveries['player_of_match'].fillna(deliveries['result'], inplace = True)\ndeliveries['umpire1'].fillna('unknown', inplace = True)\ndeliveries['umpire2'].fillna('unknown', inplace = True)","185c8328":"deliveries.describe()","27c1758f":"matches.describe()","85158dcc":"#Import all basic libray\nimport pandas as pd\nfrom mlxtend.preprocessing import TransactionEncoder\nimport time\nfrom mlxtend.frequent_patterns import fpgrowth\n#Task1 : Compute Frequent Item Set using  mlxtend.frequent_patterns\nte = TransactionEncoder()\ndeliveries1=deliveries.iloc[:,8:10].values\nte_ary = te.fit(deliveries1).transform(deliveries1)\ndf = pd.DataFrame(te_ary, columns=te.columns_)\nstart_time = time.time()\nfrequent = fpgrowth(df, min_support=0.0612, use_colnames=True)\nprint('Time to find frequent itemset')\nprint(\"--- %s seconds ---\" % (time.time() - start_time))\n# Task 2&3: Find closed\/max frequent itemset using frequent itemset found in task1\nsu = frequent.support.unique()#all unique support count\n#Dictionay storing itemset with same support count key\nfredic = {}\nfor i in range(len(su)):\n    inset = list(frequent.loc[frequent.support ==su[i]]['itemsets'])\n    fredic[su[i]] = inset\n#Dictionay storing itemset with  support count <= key\nfredic2 = {}\nfor i in range(len(su)):\n    inset2 = list(frequent.loc[frequent.support<=su[i]]['itemsets'])\n    fredic2[su[i]] = inset2\n#Find Closed frequent itemset\nstart_time = time.time()\ncl = []\nfor index, row in frequent.iterrows():\n    isclose = True\n    cli = row['itemsets']\n    cls = row['support']\n    checkset = fredic[cls]\n    for i in checkset:\n        if (cli!=i):\n            if(frozenset.issubset(cli,i)):\n                isclose = False\n                break\n    \n    if(isclose):\n        cl.append(row['itemsets'])\nprint('Time to find Close frequent itemset')\nprint(\"--- %s seconds ---\" % (time.time() - start_time))\nprint(cl)","64b0cb6d":"<a id=\"2.2\"><\/a>\n<font color=\"blue\" size=+2.5><b> Import Dataset <\/b><\/font>\n","d291dfef":"Let's inspect the `deliveries` data before stepping into the concepts","80520707":"<font size=\"+3\" color=red><b> <center><u> ASBD HACKATHON <\/u><\/center><\/b><\/font>","36649b8c":"<a id=\"2\"><\/a>\n<h2 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\"> <center>  Load and Check Data  <\/center><\/h2>","a1b21ead":"Let's inspect the `matches` data before stepping into the concepts","7f5f739d":"<a id=\"4\"><\/a>\n<font color=\"blue\" size=+2.5><b> Descriptive Analytics<\/b><\/font>","e26ad473":"<a id=\"2.2\"><\/a>\n<font color=\"blue\" size=+2.5><b> Data Cleaning <\/b><\/font>","7bcdae02":"<a id=\"2.1\"><\/a>\n<font color=\"blue\" size=+2.5><b> Import Libraries <\/b><\/font>\n"}}