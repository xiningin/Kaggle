{"cell_type":{"f411ecbb":"code","5bf994cd":"code","d230ec3f":"code","cf102c61":"code","1e5b6cda":"markdown","cc411f29":"markdown"},"source":{"f411ecbb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5bf994cd":"np.random.seed(187)\n\n# create function that rolls dice\ndef dice_roll():\n    \"\"\"Returns the cumulative result of two d6 dice\"\"\"\n    die1 = np.random.randint(1,7)\n    die2 = np.random.randint(1,7)\n    rollresult = die1 + die2\n    \n    return rollresult\n\n# create function that runs game\ndef simple_craps_game(bettype, betamount, chipcount):\n    \"\"\"plays a simple game of craps, takes type of bet (pass \/ don't pass), bet amount, and current chip count as args, returns updated chip count based on game results\"\"\"\n    # get come out dice roll\n    comeoutroll = dice_roll()\n    \n    # determine results from come out roll\n    if (comeoutroll in [7, 11] and bettype == \"Pass\") :\n         return betamount + chipcount    \n    elif (comeoutroll in [2, 3, 12] and bettype == \"Pass\") :\n        return chipcount - betamount    \n    elif (comeoutroll in [7, 11] and bettype == \"Don't Pass\") :\n        return chipcount - betamount   \n    elif (comeoutroll == 12 and bettype == \"Don't Pass\") :\n        return chipcount\n    \n    point = comeoutroll\n    \n    # roll for point    \n    pointroll = dice_roll()\n    \n    # determine results if rolling for the point    \n    if bettype == \"Pass\" :\n        while (pointroll != point or pointroll != 7) :\n            pointroll = dice_roll()           \n            if pointroll == point :\n                return betamount + chipcount            \n            elif pointroll == 7 :\n                return chipcount - betamount\n        \n    if bettype == \"Don't Pass\" :\n        while (pointroll != point or pointroll != 7) :\n            pointroll = dice_roll()            \n            if pointroll == point :\n                return chipcount - betamount            \n            elif pointroll == 7 :\n                return chipcount + betamount","d230ec3f":"# set up random walk through X number of games for Pass and Don't Pass bet types\nall_pass = []\nall_dontpass = []\n\n# play with the random walks\nnumber_of_throws = 100\nnumber_of_iterations = 10000\n\n# PASS BET\nfor y in range(number_of_iterations) :\n    chip_count_result = 100\n    random_walk_pass = []\n    for x in range(number_of_throws) :\n        chip_count_result = simple_craps_game(\"Pass\",5,chip_count_result)\n        random_walk_pass.append(chip_count_result)     \n    all_pass.append(random_walk_pass)\n\nall_pass_t = np.transpose(np.array(all_pass))   \nall_pass_final_chip_count = all_pass_t[-1,:]\n\nprint(\"Average Chip Count =\", np.average(all_pass_final_chip_count),\"\\nMedian Chip Count =\", np.median(all_pass_final_chip_count))\nplt.hist(all_pass_final_chip_count,20,edgecolor='black')\nplt.title(\"Pass Bet Histogram\")\nplt.xlabel(\"Final Chip Count\")\nplt.show()\n\n\n# DON'T PASS BET\nfor y in range(number_of_iterations) :\n    chip_count_result = 100\n    random_walk_dontpass = []\n    for x in range(number_of_throws) :\n        chip_count_result = simple_craps_game(\"Don't Pass\",5,chip_count_result)\n        random_walk_dontpass.append(chip_count_result)\n    all_dontpass.append(random_walk_dontpass)\n    \nall_dontpass_t = np.transpose(np.array(all_dontpass))\nall_dontpass_final_chip_count = all_dontpass_t[-1,:]\n\nprint(\"Average Chip Count =\", np.average(all_dontpass_final_chip_count),\"\\nMedian Chip Count =\", np.median(all_dontpass_final_chip_count))\nplt.hist(all_dontpass_final_chip_count,20,edgecolor='black')\nplt.title(\"Don't Pass Bet Histogram\")\nplt.xlabel(\"Final Chip Count\")\nplt.show()","cf102c61":"all_field = []\n\nnumber_of_throws = 100\nnumber_of_iterations = 10000\n\nfor y in range(number_of_iterations):\n\n    field_walk = []\n    chip_count = 100\n    bet_amount = 5\n    \n    for x in range(number_of_throws) :\n        roll = dice_roll()\n        if roll in [3, 4, 9, 10, 11] :\n            chip_count = chip_count + bet_amount\n        elif roll in [5, 6, 7, 8] :\n            chip_count = chip_count - bet_amount\n        elif roll in [2, 12] :\n            chip_count = chip_count + (bet_amount * 2)\n\n        field_walk.append(chip_count)\n    all_field.append(field_walk)\n    \nall_field_t = np.transpose(np.array(all_field))\nfield_final_chip_count = all_field_t[-1,:]\n\nprint(\"Average Chip Count =\", np.average(field_final_chip_count),\"\\nMedian Chip Count =\", np.median(field_final_chip_count))\nplt.hist(field_final_chip_count,20,edgecolor='black')\nplt.title(\"Field Bet Histogram\")\nplt.xlabel(\"Final Chip Count\")\nplt.show()\n\n    \n    \n    \n    \n    \n    ","1e5b6cda":"# Playing the Field #\n\nAt any point in time you can place a bet on the Field, which returns winnings after each roll. The results are as follows:\n* 3, 4, 9, 10, 11: the bet wins\n* 5, 6, 7, 8: the bet loses\n* 2, 12: the bet wins and pays out double\n\nLet's run some games and see if it makes sense to play the Field.","cc411f29":"# Let's play Craps! #\n\nA traditional casino dice game, craps is a betting game wherein bets are resolved by the throw of two six-sided dice.\n\n# To Pass or Don't Pass #\n\nThe game of craps is broken into two segments, the come out roll and the roll for the point. There are two bets one can make on the come out rollm, the Pass bet or Don't Pass bet. \n\nHere's what can happen, depending on the results of the come out roll:\n* 7 or 11 : the Pass bet wins the Don't Pass bet loses, and the game restarts with another come out roll\n* 2, 3: the Pass bet loses, the Don't Pass bet wins, and the game restarts with another come out roll\n* 12: the Pass bet loses, the Don't Pass bet is ignored (you neither win nor lose), and the game restarts with another come out roll\n* 4, 5, 6, 8, 9, 10: neither bet wins, a marker (called the point) is placed on this number and the game moves to the second stage where the player rolls for the point\n\nIf you make it to the second stage of the game the Pass and Don't Pass bets from the first round stay put. At this point, dice are rolled until the game is resolved as follows:\n* 7: the Pass bet loses and the Don't Pass bet wins\n* the dice roll matches the point number: the Pass bet wins and the Don't Pass bet loses\n\nGenerally, a Pass bet is seen as betting *with* the person rolling the dice (that is, you are betting they will hit a 7, 11, or make the point) while a Don't Pass bet is seen as betting *against* the shooter.\n\nLet's run some games and see which bet wins more often. \n\nSpecifically, let's run the following simulation 10,000 times: start with a chip count of 100 and play 100 dice throws through to completion (these numbers can be adjusted in the code by changing the value of the 'number_of_iterations' and 'number_of_throws' variables, respectively)."}}