{"cell_type":{"21f47bde":"code","e11c16b5":"code","c00e836f":"code","29969206":"code","19576431":"code","683075c6":"code","dfa80fb9":"code","76190c45":"code","782eae86":"code","0b512e52":"code","28bc6126":"code","739a2f89":"code","2007b974":"code","f9a97590":"code","ffbcc2c1":"code","db5b8d96":"code","c1173f6b":"code","fb2b1408":"code","4f350756":"code","b40df9d1":"code","30c1326d":"code","4893d732":"code","64334ab7":"code","ae93eca2":"code","a1401b74":"code","25d268a4":"code","a16bcaf2":"code","90ecdeff":"code","d3c07a9e":"code","cbc22870":"code","2ce67da9":"markdown","2b35ac9b":"markdown","c5514bd0":"markdown","8e4a7297":"markdown","f3453fa4":"markdown","4e719e06":"markdown","2f5355af":"markdown","677d8f14":"markdown","8fdb137f":"markdown","9636cd07":"markdown","59241878":"markdown","5a2d3ce2":"markdown","d1da8cf4":"markdown","b92fca44":"markdown","bb1d2345":"markdown","d96d55cb":"markdown","611e50af":"markdown","83973f2e":"markdown","e1b5598a":"markdown","e1cda9be":"markdown","dbede2b1":"markdown","06d85461":"markdown","96eb0014":"markdown","44987ca4":"markdown","b2aae411":"markdown","4d3236d1":"markdown","29c9f277":"markdown","cfc06691":"markdown","411a4345":"markdown"},"source":{"21f47bde":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e11c16b5":"import pandas as pd\ndf = pd.read_csv('\/kaggle\/input\/dataset-csv\/temporal.csv')\ndf.head(10) #View first 10 data rows","c00e836f":"df.describe()","29969206":"df.info()","19576431":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","683075c6":"format_dict = {'data science':'${0:,.2f}', 'Mes':'{:%m-%Y}', 'machine learning':'{:.2%}'}\n#We make sure that the Month column has datetime format\ndf['Mes'] = pd.to_datetime(df['Mes'])\n#We apply the style to the visualization\ndf.head().style.format(format_dict)","dfa80fb9":"format_dict = {'Mes':'{:%m-%Y}'} #Simplified format dictionary with values that do make sense for our data\ndf.head().style.format(format_dict).highlight_max(color='yellow').highlight_min(color='green')","76190c45":"df.head(10).style.format(format_dict).background_gradient(subset=['data science', 'machine learning'], cmap='BuGn')","782eae86":"df.head(20).style.format(format_dict).bar(color='yellow', subset=['data science', 'deep learning'])","0b512e52":"df.head(10).style.format(format_dict).background_gradient(subset=['data science', 'machine learning'], cmap='BuGn').highlight_max(color='purple')","28bc6126":"from pandas_profiling import ProfileReport\nprof = ProfileReport(df)\nprof.to_file(output_file='report.html')","739a2f89":"import matplotlib.pyplot as plt\nplt.plot(df['Mes'], df['data science'], label='data science') #The parameter label is to indicate the legend. This doesn't mean that it will be shown, we'll have to use another command that I'll explain later.","2007b974":"plt.plot(df['Mes'], df['data science'], label='data science')\nplt.plot(df['Mes'], df['machine learning'], label='machine learning')\nplt.plot(df['Mes'], df['deep learning'], label='deep learning')","f9a97590":"plt.plot(df['Mes'], df['data science'], label='data science')\nplt.plot(df['Mes'], df['machine learning'], label='machine learning')\nplt.plot(df['Mes'], df['deep learning'], label='deep learning')\nplt.xlabel('Date')\nplt.ylabel('Popularity')\nplt.title('Popularity of AI terms by date')\nplt.grid(True)\nplt.legend()","ffbcc2c1":"fig, axes = plt.subplots(2,2)\naxes[0, 0].hist(df['data science'])\naxes[0, 1].scatter(df['Mes'], df['data science'])\naxes[1, 0].plot(df['Mes'], df['machine learning'])\naxes[1, 1].plot(df['Mes'], df['deep learning'])","db5b8d96":"plt.plot(df['Mes'], df['data science'], 'r-')\nplt.plot(df['Mes'], df['data science']*2, 'bs')\nplt.plot(df['Mes'], df['data science']*3, 'g^')","c1173f6b":"plt.scatter(df['data science'], df['machine learning'])","fb2b1408":"plt.bar(df['Mes'], df['machine learning'], width=20)","4f350756":"plt.hist(df['deep learning'], bins=15)","b40df9d1":"plt.plot(df['Mes'], df['data science'], label='data science')\nplt.plot(df['Mes'], df['machine learning'], label='machine learning')\nplt.plot(df['Mes'], df['deep learning'], label='deep learning')\nplt.xlabel('Date')\nplt.ylabel('Popularity')\nplt.title('Popularity of AI terms by date')\nplt.grid(True)\nplt.text(x='2010-01-01', y=80, s=r'$\\lambda=1, r^2=0.8$') #Coordinates use the same units as the graph\nplt.annotate('Noticed something?', xy=('2014-01-01', 30), xytext=('2006-01-01', 50), arrowprops={'facecolor':'blue', 'shrink':0.05})","30c1326d":"import seaborn as sns\nsns.set()\nsns.scatterplot(df['Mes'], df['data science'])","4893d732":"sns.relplot(x='Mes', y='deep learning', hue='data science', size='machine learning', col='categorical', data=df)","64334ab7":"sns.heatmap(df.corr(), annot=True, fmt='.2f')","ae93eca2":"sns.pairplot(df)","a1401b74":"sns.pairplot(df, hue='categorical')","25d268a4":"sns.jointplot(x='data science', y='machine learning', data=df)","a16bcaf2":"sns.catplot(x='categorical', y='data science', kind='violin', data=df)","90ecdeff":"fig, axes = plt.subplots(1, 2, sharey=True, figsize=(8, 4))\nsns.scatterplot(x=\"Mes\", y=\"deep learning\", hue=\"categorical\", data=df, ax=axes[0])\naxes[0].set_title('Deep Learning')\nsns.scatterplot(x=\"Mes\", y=\"machine learning\", hue=\"categorical\", data=df, ax=axes[1])\naxes[1].set_title('Machine Learning')","d3c07a9e":"from bokeh.plotting import figure, output_file, save\noutput_file('data_science_popularity.html')","cbc22870":"p = figure(title='data science', x_axis_label='Mes', y_axis_label='data science')\np.line(df['Mes'], df['data science'], legend='popularity', line_width=2)\nsave(p)","2ce67da9":"the pairplot showing the charts segmented according to the values of the categorical variable","2b35ac9b":"You can see how the file data_science_popularity.html looks. It\u2019s interactive, you can move around the graphic and zoom in as you like","c5514bd0":"Seaborn is a library based on Matplotlib. Basically what it gives us are nicer graphics and functions to make complex types of graphics with just one line of code.","8e4a7297":"# Seaborn","f3453fa4":"We can create multiple graphics in one image just like we did with Matplotlib:","4e719e06":"We can also plot bar chart","2f5355af":"It is not very clear which variable each color represents. We\u2019re going to improve the chart by adding a legend and titles.","677d8f14":"We can also display the data values with bars.","8fdb137f":"we increase the limits and we can visualize the whole data. Be careful with this option for big datasets, we can have problems showing them.","9636cd07":" highlight maximum and minimum values with colours.","59241878":"To give an example of each type, I have added currency and percentage symbols even though they do not make any sense for this data.","5a2d3ce2":"We can draw the graph with different styles for the points of each variable:","d1da8cf4":"Another of the most popular is the pairplot that shows us the relationships between all the variables. Be careful with this function if you have a large dataset, as it has to show all the data points as many times as there are columns, it means that by increasing the dimensionality of the data, the processing time increases exponentially.","b92fca44":"A very informative graph is the jointplot that allows us to see a scatterplot together with a histogram of the two variables and see how they are distributed:","bb1d2345":"# Pandas Profiling","d96d55cb":"**Heatmap**\n\nOne of the most popular graphics provided by Seaborn is the heatmap. It is very common to use it to show all the correlations between variables in a dataset:","611e50af":"Moreover, we also can combine the above functions and generate a more complex visualization.","83973f2e":"Pandas profiling is a library that generates interactive reports with our data, we can see the distribution of the data, the types of data, possible problems it might have. It is very easy to use, with only 3 lines we can generate a report that we can send to anyone and that can be used even if you do not know programming.","e1b5598a":"The output obtained can be seen in report.html file","e1cda9be":"Matplotlib is the most basic library for visualizing data graphically.","dbede2b1":"# Bokeh","06d85461":"Bokeh is a library that allows you to generate interactive graphics. We can export them to an HTML document that we can share with anyone who has a web browser.","96eb0014":"We use a color gradient to display the data values.","44987ca4":"We can even plot scatter plot with matplotlib","b2aae411":"We can also add markers that point to a particular point on the graph","4d3236d1":"# Matplotlib","29c9f277":"Getting the overview of dataset that is column name and row data","cfc06691":"To learn more about styling visualizations with Pandas here: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/style.html","411a4345":"Histogram"}}