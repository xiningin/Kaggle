{"cell_type":{"8d0767b0":"code","71b359db":"code","b8ea3341":"code","5658f42d":"code","0c072532":"code","ccdea761":"code","6b8fa134":"code","7df080a5":"code","a7ae1640":"code","9d049532":"code","f6fc2967":"code","d7ffa3c7":"code","a10579fc":"code","3c277933":"code","bd1df442":"code","df2fec40":"code","491f473b":"code","a22c7ec2":"code","bceb2b9a":"code","26e0e2b8":"code","a970175d":"markdown","f252cc69":"markdown","1ded5970":"markdown","b5d236c9":"markdown","d6e05c53":"markdown","5a84e2ce":"markdown","b0fad270":"markdown","247dd2d2":"markdown","7e979123":"markdown","2e8f8ab9":"markdown","751b7a3f":"markdown","7983de26":"markdown","c6011569":"markdown"},"source":{"8d0767b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly library\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py # visualization library\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n\n# matplotlib\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","71b359db":"timesData = pd.read_csv(\"\/kaggle\/input\/world-university-rankings\/timesData.csv\")","b8ea3341":"timesData.head()","5658f42d":"timesData.info()","0c072532":"# prepare data frame\ndf = timesData.iloc[:100,:]  #first 100 line and all columns\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.citations,\n                    mode = \"lines\",\n                    name = \"citations\",\n                    marker = dict(color = 'rgba(50, 200, 2, 0.8)'),\n                    text= df.university_name)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = \"lines+markers\",\n                    name = \"teaching\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                    text= df.university_name)\ndata = [trace1, trace2]\n\nlayout = dict(title = 'Citation and Teaching vs World Rank of Top 100 Universities',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","ccdea761":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:100,:]\ndf2015 = timesData[timesData.year == 2015].iloc[:100,:]\ndf2016 = timesData[timesData.year == 2016].iloc[:100,:]\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2014.world_rank,\n                    y = df2014.citations,\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = 'rgba(255, 0, 0, 0.8)'),\n                    text= df2014.university_name)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2015.world_rank,\n                    y = df2015.citations,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(0, 255, 0, 0.8)'),\n                    text= df2015.university_name)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2016.world_rank,\n                    y = df2016.citations,\n                    mode = \"markers\",   # scatter plot\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(0, 0, 255, 0.8)'),\n                    text= df2016.university_name)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Citation',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","6b8fa134":"df2014 = timesData[timesData.year == 2014].iloc[:3,:]\ndf2014","7df080a5":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.citations,\n                name = \"citations\",\n                marker = dict(color = 'rgba(0, 111, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\n# create trace2 \ntrace2 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.teaching,\n                name = \"teaching\",\n                marker = dict(color = 'rgba(255, 0, 0, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\") # bar type\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","a7ae1640":"#BAR PLOT another style\n\n# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\n\ntrace1 = {\n  'x': df2014.university_name,\n  'y': df2014.citations,\n  'name': 'citation',\n  'type': 'bar'   \n};\n\ntrace2 = {\n  'x': df2014.university_name,\n  'y': df2014.teaching,\n  'name': 'teaching',\n  'type': 'bar'\n};\n\n\ndata = [trace1, trace2];\n\nlayout = {\n  'xaxis': {'title': 'Top 3 universities'},\n  'barmode': 'relative',   # bar type\n  'title': 'citations and teaching of top 3 universities in 2014'\n};\n\n\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","9d049532":"df.head()","f6fc2967":"# data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\npie1 = df2016.num_students\npie1_list = [float(each.replace(',', '.')) for each in df2016.num_students]  \nlabels = df2016.university_name\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1_list,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number Of Students Rates\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Universities Number of Students rates\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Number of Students\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","d7ffa3c7":"df2016.info()","a10579fc":"# data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:20,:]\nnum_students_size  = [float(each.replace(',', '.')) for each in df2016.num_students]\ninternational_color = [float(each) for each in df2016.international]\ndata = [\n    {\n        'x': df2016.world_rank,\n        'y': df2016.teaching,\n        'mode': 'markers',\n        'marker': {\n            'color': international_color,\n            'size': num_students_size,\n            'showscale': True\n        },\n        \"text\" :  df2016.university_name    \n    }\n]\niplot(data)","3c277933":"# prepare data\nx2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\ntrace1 = go.Histogram(\n    x=x2011,\n    opacity=0.75,\n    name = \"2011\",\n    marker=dict(color='rgba(222, 111, 56, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker=dict(color='rgba(56, 111, 222, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',\n                   title=' students-staff ratio in 2011 and 2012',\n                   xaxis=dict(title='students-staff ratio'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","bd1df442":"# data prepararion\nx2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","df2fec40":"# data preparation\nx2015 = timesData[timesData.year == 2015]\n\ntrace0 = go.Box(\n    y=x2015.total_score,\n    name = 'total score of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=x2015.research,\n    name = 'research of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","491f473b":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndataframe = timesData[timesData.year == 2015]\ndata2015 = dataframe.loc[:,[\"research\",\"international\", \"total_score\"]]\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","a22c7ec2":"# first line plot\ntrace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.teaching,\n    name = \"teaching\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"income\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Income and Teaching vs World Rank of Universities'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\n","bceb2b9a":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    z=dataframe.citations,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","26e0e2b8":"trace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    name = \"research\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.citations,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"citations\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"income\"\n)\ntrace4 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.total_score,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"total_score\"\n)\n\n\ndata = [trace1, trace2, trace3, trace4]\n\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Research, citation, income and total score VS World Rank of Universities'\n)\n\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","a970175d":"# Scatter Plot\n    citations vs world rank of top 100 universities with 2014, 2015 and 2016 years","f252cc69":"# 3D Scatter Plot with Colorscaling\n\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension. * go.Scatter3d: create 3d scatter plot * x,y,z: axis of plots * mode: market that is scatter * size: marker size * color: axis of colorscale * colorscale: actually it is 4th dimension","1ded5970":"# Bar Charts\ncitations and teaching of top 3 universities in 2014 (style1)","b5d236c9":"# Box Plots\n\n   * Box Plots * Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile) * 25th percentile = quartile 1 (Q1) that is lower quartile * 75th percentile = quartile 3 (Q3) that is higher quartile * height of box = IQR = interquartile range = Q3-Q1 * Whiskers = 1.5 * IQR from the Q1 and Q3 * Outliers = being more than 1.5*IQR away from median commonly.","d6e05c53":"# Word Cloud\nNot a pyplot but learning it is good for visualization. \nLets look at which country is mentioned most in 2011.\n\nWordCloud library that I import at the beginning of kernel","5a84e2ce":"## Line chart\nExample: Citation and Teaching vs World Rank of Top 100 Universities ","b0fad270":"<a id=\"11\"><\/a> <br>\n# Inset Plots\n<font color='red'>\nInset Matrix = 2 plots are in one frame\n<font color='black'>","247dd2d2":"# Pie Charts\n    Students rate of top 7 universities in 2016","7e979123":"<a id=\"13\"><\/a> <br>\n# Multiple Subplots\n<font color='red'>\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful.\n<font color='black'>","2e8f8ab9":"# Scatter Matrix Plots\n\nScatter Matrix = it helps us to see covariance and relation between more than 2 features * import figure factory as ff * create_scatterplotmatrix = creates scatter plot * data2015 = prepared data. It includes research, international and total scores with index from 1 to 401 * colormap = color map of scatter plot * colormap_type = color type of scatter plot * height and weight","751b7a3f":"# Histogram\nLets look at histogram of students-staff ratio in 2011 and 2012 years. ","7983de26":"# LOAD DATA","c6011569":"# Bubble Charts\nUniversity world rank (first 20) vs teaching score with number of students(size) and international score (color) in 2016"}}