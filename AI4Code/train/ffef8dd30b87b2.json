{"cell_type":{"5d292330":"code","e2b404de":"code","a070372c":"code","5efd29a6":"code","4b06d6df":"code","3b28414e":"code","cf02fc45":"code","f126ead1":"code","4ec1237f":"code","f6ef3700":"code","160e3403":"code","b3444150":"code","fba2da51":"code","c298c924":"code","f0dd1faf":"code","51528cbf":"code","bfd8370a":"code","bb559e6d":"markdown","83a9bc95":"markdown","3f2c2841":"markdown","93845064":"markdown","b657200d":"markdown","3860d6b6":"markdown","c523bde9":"markdown","b39b9a08":"markdown","29c2cc5a":"markdown","0192ed84":"markdown","0ff3b23a":"markdown","69d4f555":"markdown","f7a9a256":"markdown"},"source":{"5d292330":"##Load the libraries Needed\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nimport os","e2b404de":"plt.imshow(cv2.imread(\"..\/input\/applied-ai-assignment-1-connect-4-level-1-2021\/assignment_1\/assignment_0\/connect4.png\")[:,:,::-1])\nplt.show()","a070372c":"def backread(im):\n    return cv2.imread(im)[:,:,::-1]\n\nedf = pd.read_pickle(\"..\/input\/applied-ai-assignment-1-connect-4-level-1-2021\/assignment_1\/assignment_0\/edf.pkl\")\npic = backread(\"..\/input\/applied-ai-assignment-1-connect-4-level-1-2021\/assignment_1\/assignment_0\/connect4.png\")\nred = backread(\"..\/input\/applied-ai-assignment-1-connect-4-level-1-2021\/assignment_1\/assignment_0\/red.png\")\nyellow = backread(\"..\/input\/applied-ai-assignment-1-connect-4-level-1-2021\/assignment_1\/assignment_0\/yellow.png\")\nwhite = backread(\"..\/input\/applied-ai-assignment-1-connect-4-level-1-2021\/assignment_1\/assignment_0\/white.png\")\nData = pd.read_csv(\"..\/input\/applied-ai-assignment-1-connect-4-level-1-2021\/assignment_1\/assignment_0\/Examples.csv\")\n\ndef synthetic(mat):\n    mpic = pic.copy()\n    for i in edf.index:\n        w = edf.loc[i]\n        x1,y1 = w['left']\n        f = w['f']\n        if mat[w['x'],w['y']] == 0:    \n            mpic[y1:y1+f,x1:x1+f] = white\n        elif mat[w['x'],w['y']] == 1:\n            mpic[y1:y1+f,x1:x1+f] = red\n        elif mat[w['x'],w['y']]== 2:\n            mpic[y1:y1+f,x1:x1+f] = yellow\n        else:\n            mpic[y1:y1+f,x1:x1+f] = 0\n    return mpic\n\ndef print_board(board):\n    f,ax = plt.subplots(figsize = (6,6))\n    plt.imshow(synthetic(board))\n    plt.show()\n    \ndef loadfromarray(ar):\n    ar = ar.values\n    ar = ar[0][1:]\n    try:\n        ar = ar.reshape(6,7).astype('float')\n        return ar\n    except:\n        ar = ar.reshape(6,7)\n        return ar","5efd29a6":"example0 = np.array([  [0., 0., 0., 0., 2., 0., 0.],\n                       [0., 0., 0., 0., 2., 0., 0.],\n                       [0., 0., 0., 2., 2., 0., 0.],\n                       [0., 0., 0., 1., 2., 0., 0.],\n                       [0., 0., 0., 2., 1., 1., 0.],\n                       [0., 1., 0., 1., 2., 1., 1.]  ])","4b06d6df":"example0","3b28414e":"print_board(example0)","cf02fc45":"RedWins = loadfromarray(Data[Data.file_names == 'redwins'])\nprint_board(RedWins)","f126ead1":"RedWins","4ec1237f":"YellowWins = loadfromarray(Data[Data.file_names == 'yellowwins'])\nprint_board(YellowWins)","f6ef3700":"Red_is_next = loadfromarray(Data[Data.file_names == 'redisnext'])\nprint_board(Red_is_next)","160e3403":"Yellow_is_next = loadfromarray(Data[Data.file_names == 'yellownext'])\nprint_board(Yellow_is_next)","b3444150":"floating_piece = loadfromarray(Data[Data.file_names == 'floating_piece'])\nprint_board(floating_piece)","fba2da51":"invalid_proportion = loadfromarray(Data[Data.file_names == 'invalid_proportion'])\nprint_board(invalid_proportion)","c298c924":"corrupt_ = loadfromarray(Data[Data.file_names == 'corrupt_'])\nprint_board(corrupt_)","f0dd1faf":"corrupt_","51528cbf":"corrupt = loadfromarray(Data[Data.file_names == 'corrupt'])\nprint_board(corrupt)","bfd8370a":"corrupt","bb559e6d":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nReason: Unbalanced number of pieces.\n<br \/>    \n<br \/>    \n<b>State 6: Corrupt Data<\/b>\n<\/span>","83a9bc95":"<br\/>\n<span style=\"font-family:Georgia; font-size:1.2em;\">\nFor example given the board matrix below, we can use the code to convert into animation that is easier to interpret.\n<\/span>\n<br\/>\n<br\/>","3f2c2841":"<span style=\"font-family:Georgia; font-size:1.2em;\">\n<b>Goal:<\/b> Given a 6x7 matrix which represents a game board, write a program to identify to classify the game state\n<br \/>   \n<br \/>   \n<b>Deliverable:<\/b> Output a csv file that will contain the correct game states for N samples and upload it to Kaggle for evaluation.\n<\/span>","93845064":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nReason: Non numeric data is also considered corrupt.\n<\/span>","b657200d":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nReason: More red pieces(4) tha Yellow(3), so the next piece is Yellow.\n<br \/>\n<br \/>    \n<b>State 5: Invalid<\/b>\n<\/span>","3860d6b6":"<span style=\"font-family:Georgia; font-size:2em;\">\n<b>Example of Different States<b\/>    \n<\/span>\n<br\/>\n<br\/>\n<span style=\"font-family:Georgia; font-size:1.2em;\">\n<b>State 1: Red Wins<\/b>\n<\/span>","c523bde9":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nReason: Floating pieces cannot exist (6th column).\n<\/span>","b39b9a08":"<br\/>\n<span style=\"font-family:Georgia; font-size:1.2em;\">\nThe tool provided below allows you to visualize a matrix into a game board so it's easy to visually understand your current state\n<\/span>\n<br\/>\n<br\/>","29c2cc5a":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nThe state is valid because. When red starts, and given yello won (3rd column). There should be equal pieces for both classes.\n<br\/>\n<br\/>\n<b>State 3: Valid Next Turn Red<\/b>\n<\/span>","0192ed84":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nIn our Game Red always starts. The game above is valid where red wins. This is One of the classes that have to be predicted at the end.\n<br\/>\n<br\/>\n<b>State 2: Yellow Wins<\/b>\n<\/span>","0ff3b23a":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nReason: Values cannout be outside the range 0,1,2.\n<\/span>","69d4f555":"<span style=\"font-family:Georgia; font-size:1em;\">\n<b> Description <\/b>\n<br \/>\n<br \/>\nThis game is played on a vertical board which has seven hollow columns and six rows. Each column has a hole in the upper part of the board, where pieces are introduced. There is a window for every square, so that pieces can be seen from both sides.\n<br \/>\n<br \/>\nIn short, it\u00b4s a vertical board with 42 windows distributed in 6 rows and 7 columns.\n<br \/>\n<br \/>\nBoth players have a set of 21 thin pieces (like coins); each of them uses a different colour. The board is empty at the start of the game.\n<br \/>\n<br \/>\n<b> Objective <\/b>\n<br \/>\n<br \/>\nThe aim for both players is to make a straight line of four own pieces; the line can be vertical, horizontal or diagonal.\n<br \/>\n<br \/>\n<b>How the game goes on<\/b>\n<br \/>\n<br \/>\nBefore starting, players decide randomly which of them will be the beginner; moves are made alternatively, one by turn.\n<br \/>\n<br \/>\nMoves entails in placing new pieces on the board; pieces slide downwards from upper holes, falling down to the last row or piling up on the last piece introduced in the same column. So, in every turn the introduced piece may be placed at most on seven different squares.\n<br \/>\n<br \/>\nThe winner is the first player who gets a straight line made with four own pieces and no gaps between them.\n<\/span>\n<br \/>\n<br \/>","f7a9a256":"<span style=\"font-family:Georgia; font-size:1.2em;\">\nReason: Red Starts, equal pieces hence red goes next.\n<br \/>\n<br \/>    \n<b>State 4: Valid Next Turn Yellow<\/b>\n<\/span>"}}