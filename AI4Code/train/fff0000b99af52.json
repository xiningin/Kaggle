{"cell_type":{"0ff5b53e":"code","426e08e7":"code","67df8ec5":"code","0d573779":"code","ee24114c":"code","f50cd345":"code","2e39a8f2":"code","6455e7da":"code","d4fb8118":"code","002f05c0":"code","b5a0f230":"code","8a726b27":"code","c4cf9a04":"code","24f59cac":"code","c3077d14":"code","4e975b06":"code","e99efb1d":"code","ae98437f":"code","79edaedb":"code","6dbac44e":"code","12dacd67":"code","060e693a":"code","df9e33c2":"code","a7f1dbee":"code","7cfca97b":"code","a74267be":"code","531eb63d":"code","daf327e1":"code","d27bb36e":"code","f118e5e7":"code","32f5d4cd":"code","7188dbc7":"code","76d49f70":"markdown","00e60517":"markdown","96e30f71":"markdown","15fe7711":"markdown","95dae39c":"markdown","994a2721":"markdown","05bb97c0":"markdown","dd48bdb9":"markdown","a20bf722":"markdown","a14c33b6":"markdown","df09816e":"markdown","ef0f049f":"markdown","3a4c364e":"markdown","d5136a30":"markdown","a5a83beb":"markdown","d74a865d":"markdown","ece956a8":"markdown","8bba7c1c":"markdown","faa04258":"markdown","1dd5735b":"markdown","c01db7d8":"markdown"},"source":{"0ff5b53e":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","426e08e7":"data = pd.read_csv(\"\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")","67df8ec5":"# Looking at the first 5 rows\ndata.head()","0d573779":"# Information about the dataset\ndata.info()","ee24114c":"data.describe()","f50cd345":"data.columns","2e39a8f2":"def bar_plot(variable):\n    \n    # get feature\n    var = data[variable]\n    \n    # count number of variables\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (5,5))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{} : {} \".format(variable,varValue))","6455e7da":"categorical_columns = [\"anaemia\" , \"diabetes\" , \"high_blood_pressure\" , \"sex\" , \"smoking\" , \"DEATH_EVENT\"]\nfor c in categorical_columns:\n    bar_plot(c)","d4fb8118":"def plot_hist(variable):\n    plt.figure(figsize = (5,5))\n    plt.hist(data[variable],bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.show()","002f05c0":"numerical_columns = [\"age\" , \"creatinine_phosphokinase\" , \"ejection_fraction\" , \"platelets\" , \"serum_creatinine\" , \"serum_sodium\" , \"time\"]\nfor x in numerical_columns:\n    plot_hist(x)","b5a0f230":"data.columns[data.isnull().any()]\n","8a726b27":"data.isnull().sum() # Here , how many missing values are in the dataset ?","c4cf9a04":"data.head()","24f59cac":"import seaborn as sns\nf , ax = plt.subplots(figsize = (18,18))\nsns.heatmap(data.corr(),annot = True,linewidth = 5,fmt = \".1f\",ax = ax)\nplt.show()","c3077d14":"# axis = 1 ----> which means column\n# axis = 0 ----> which measn row\n\ndata = data.rename({\"DEATH_EVENT\":\"Target\"},axis = 1)","4e975b06":"data.head()","e99efb1d":"from collections import Counter\n\ndef detect_outliers(df,features):\n    outlier_indices = []\n    for c in features:\n        # 1 st quartile\n        Q1 = np.percentile(df[c],25)\n        \n        # 3 rd quartile\n        Q3 = np.percentile(df[c],75)\n        \n        # IQR\n        IQR = Q3 - Q1\n        \n        # Outlier step\n        outlier_step = IQR * 1.5\n   \n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1-outlier_step) | (df[c] > Q3 + outlier_step)].index\n        \n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n\n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n\n    return multiple_outliers","ae98437f":"data.loc[detect_outliers(data,[\"age\" , \"creatinine_phosphokinase\" , \"ejection_fraction\" , \"platelets\" , \"serum_creatinine\" , \"serum_sodium\" , \"time\"])]","79edaedb":"y = data.Target.values\nx_data = data.drop([\"Target\"],axis = 1)","6dbac44e":"x = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values","12dacd67":"x","060e693a":"y","df9e33c2":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 42)","a7f1dbee":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=10) # n_neighbours = k value\nknn.fit(x_train,y_train)\nprediction = knn.predict(x_test)\nprint(\"KNN score: \",knn.score(x_test,y_test))","7cfca97b":"data.describe()","a74267be":"# Try to find best K (n_neighbours) value\nscore_list = []\nfor each in range(1,240):\n    knn2 = KNeighborsClassifier(n_neighbors = each)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\nplt.plot(range(1,240),score_list)\nplt.title(\"K-value & Accuracy\")\nplt.xlabel(\"K-value\")\nplt.ylabel(\"Accuracy\")\nplt.show()\n    ","531eb63d":"from sklearn.svm import SVC\n\nsvm = SVC(random_state = 1)\nsvm.fit(x_train,y_train)\n\n# score\nprint(\"print accuracy of SVM Algorithm: \",svm.score(x_test,y_test))\n","daf327e1":"from sklearn.naive_bayes import GaussianNB\nnp = GaussianNB()\nnp.fit(x_train,y_train)\n    \nprint(\"print accuracy of Navie Bayes Algorithm: \",np.score(x_test,y_test))","d27bb36e":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators= 1000,random_state=1) # n_estimators , which means number of trees\nrf.fit(x_train,y_train)\nprint(\"Random Forest Classification: \", rf.score(x_test,y_test))\n","f118e5e7":"y_pred = rf.predict(x_test)\ny_true = y_test","32f5d4cd":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_true, y_pred)","7188dbc7":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nf,ax = plt.subplots(figsize = (5,5))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt = \".0f\",ax =ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","76d49f70":"# K-Nearst Neighbour Classification","00e60517":"# Normalization","96e30f71":"# Confusion Matrix","15fe7711":"## Variable description\n\n1 - age = age of the patient\n\n2 - anaemia = Decrease of red blood cells or hemoglobin (boolean)\n\n3 - creatinie_phosphokinase = Level of the CPK enzyme in the blood (mcg\/L)\n\n4 - diabetes = If the patient has diabetes (boolean)\n\n5 - ejection_fraction = Percentage of blood leaving the heart at each contraction (percentage)\n\n6 - high_blood_pressure = If the patient has hypertension (boolean)\n\n7 - platelets = Platelets in the blood (kiloplatelets\/mL)\n\n8 - serum_creatinie = Level of serum creatinine in the blood (mg\/dL)\n\n9 - serum_sodium = Level of serum sodium in the blood (mEq\/L)\n\n10 - sex = gender of the patient (boolean)\n\n11 - smoking = patinet has smoking or not (boolean)\n\n12 - time \n\n13 - death event = binary","95dae39c":"# X and Y Coordinates","994a2721":"## Numerical Variables\n* age ,  creatinie_phosphokinase , ejection_fraction , platelets , serum_creatinie , serum_sodium , time","05bb97c0":"## Fill Missing Values\n\nDataset , which have no any missing values , no need to fill missing values.\n","dd48bdb9":"## Detect Outlier Values","a20bf722":"# Random Forest Classification","a14c33b6":"# K-Means Clustering","df09816e":"## Missing Values","ef0f049f":"# Import Libraries","3a4c364e":"# Train - Test Split","d5136a30":"in this dataset , DEATH_EVENT is a target column. I'm going to change the name of this column","a5a83beb":"# Naive Bayes Classification","d74a865d":"# Import the Dataset","ece956a8":"# Hierarchical Clustering","8bba7c1c":"## Correalation Map\n* Correalation Map , which shows us to understand relationship between features(columns) , is important vizulation in machine learning.","faa04258":"# Support Vector Machines","1dd5735b":"# Categorical Variables\n* anaemia , diabetes , high_blood_pressure , sex , smoking , DEATH_EVENT","c01db7d8":"dataset has no outlier value."}}