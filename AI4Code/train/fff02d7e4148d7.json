{"cell_type":{"36d91b8e":"code","a5f004d8":"code","1bdcc6bf":"code","ceee3eec":"code","d2b1df18":"code","ee160b2b":"code","d32b991d":"code","f1872e10":"code","ef5afe5c":"code","09fb26b6":"code","97be5c68":"code","80c5318a":"code","4d7361df":"code","9a330580":"code","a7aea100":"code","958b8067":"markdown","fe3f3891":"markdown"},"source":{"36d91b8e":"!pip install -q efficientnet","a5f004d8":"import os\nimport gc\nimport re\n\nimport cv2\nimport math\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\n\nimport tensorflow as tf\nfrom IPython.display import SVG\nimport efficientnet.tfkeras as efn\nfrom keras.utils import plot_model\nimport tensorflow.keras.layers as L\nfrom keras.utils import model_to_dot\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.models import Model\nfrom kaggle_datasets import KaggleDatasets\nfrom tensorflow.keras.applications import DenseNet121\n\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.cm as cm\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\nfrom sklearn.model_selection import train_test_split\n\ntqdm.pandas()\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nnp.random.seed(0)\ntf.random.set_seed(0)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","1bdcc6bf":"EPOCHS = 20\nSAMPLE_LEN = 100\nTRAIN_IMAGE_PATH = \"..\/input\/global-wheat-detection\/train\/\"\nTEST_IMAGE_PATH = \"..\/input\/global-wheat-detection\/test\/\"\nTRAIN_PATH = \"..\/input\/global-wheat-detection\/train.csv\"\nSUB_PATH = \"..\/input\/global-wheat-detection\/sample_submission.csv\"\n\nsub = pd.read_csv(SUB_PATH)\ntrain_data = pd.read_csv(TRAIN_PATH)","ceee3eec":"train_data.head()","d2b1df18":"sub.head()","ee160b2b":"import pandas_profiling\ntrain_data.profile_report(title='Global Wheat Detection Train')","d32b991d":"def load_image(image_id):\n    file_path = image_id + \".jpg\"\n    image = cv2.imread(TRAIN_IMAGE_PATH + file_path)\n    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    #return cv2.cvtColor(image,cv2.COLOR_RGB2RGE)\ntrain_images = train_data[\"image_id\"][:SAMPLE_LEN].progress_apply(load_image)","f1872e10":"fig = px.imshow(cv2.resize(train_images[0], (205, 136)))\nfig.show()","ef5afe5c":"red_values = [np.mean(train_images[idx][:, :, 0]) for idx in range(len(train_images))]\ngreen_values = [np.mean(train_images[idx][:, :, 1]) for idx in range(len(train_images))]\nblue_values = [np.mean(train_images[idx][:, :, 2]) for idx in range(len(train_images))]\nvalues = [np.mean(train_images[idx]) for idx in range(len(train_images))]","09fb26b6":"fig = ff.create_distplot([values], group_labels=[\"Channels\"], colors=[\"purple\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Distribution of channel values\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","97be5c68":"fig = ff.create_distplot([red_values], group_labels=[\"R\"], colors=[\"red\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Distribution of red channel values\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","80c5318a":"fig = ff.create_distplot([green_values], group_labels=[\"G\"], colors=[\"green\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Distribution of green channel values\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","4d7361df":"fig = ff.create_distplot([blue_values], group_labels=[\"B\"], colors=[\"blue\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Distribution of blue channel values\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","9a330580":"fig = go.Figure()\n\nfor idx, values in enumerate([red_values, green_values, blue_values]):\n    if idx == 0:\n        color = \"Red\"\n    if idx == 1:\n        color = \"Green\"\n    if idx == 2:\n        color = \"Blue\"\n    fig.add_trace(go.Box(x=[color]*len(values), y=values, name=color, marker=dict(color=color.lower())))\n    \nfig.update_layout(yaxis_title=\"Mean value\", \n                  xaxis_title=\"Color channel\",\n                  title=\"Mean value vs. Color channel\", \n                  template=\"plotly_white\"\n                 )","a7aea100":"fig = ff.create_distplot([red_values, green_values, blue_values],\n                         group_labels=[\"R\", \"G\", \"B\"],\n                         colors=[\"red\", \"green\", \"blue\"])\nfig.update_layout(title_text=\"Distribution of red channel values\", template=\"simple_white\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig.data[1].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[1].marker.line.width = 0.5\nfig.data[2].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[2].marker.line.width = 0.5\nfig","958b8067":"# R-G-B","fe3f3891":"# EDA"}}