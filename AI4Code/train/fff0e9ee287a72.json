{"cell_type":{"e47b5390":"code","3cff5364":"code","da30dce2":"code","8e408928":"code","450b1fec":"code","61fc6f53":"code","89548080":"code","74d220b9":"code","dd6efbe1":"code","50eac64c":"code","95d7a07c":"code","809a7749":"code","15fcdb90":"code","1475ac21":"code","c6dc0364":"code","63f7c5f4":"code","5b69295f":"code","7c5b1be0":"code","c5244bc8":"code","416f89f0":"code","5fa828fe":"code","559d0af1":"code","17a07b44":"code","56e1c5f7":"code","ede47273":"code","432206d5":"code","9f0bcc07":"code","0332412f":"code","7deda004":"code","46d6bc2d":"code","f0481742":"code","0b9edd23":"code","4186008e":"code","ae2d8a98":"code","cd96f7dd":"code","5f383f58":"code","664ad73c":"code","5f55d645":"code","950c6cd5":"code","82d94a79":"code","f64fc2f1":"code","566d9fa7":"code","640536e6":"code","bb7fcdc1":"code","0f1cd05c":"code","3b80fcbc":"code","6c47f301":"code","4d6ce185":"code","13f61252":"code","f8272e6d":"code","552e4fb9":"code","bc1083bc":"code","b12e6d15":"code","384b407b":"code","cde92975":"code","505a906b":"code","38a6972d":"markdown","62de5fc8":"markdown","91a980d0":"markdown","6a448260":"markdown","991900db":"markdown","8dce6dad":"markdown","98aa2784":"markdown","6dabf0ef":"markdown","cb915949":"markdown","d041db32":"markdown","a634544e":"markdown","4e5b77eb":"markdown","c6a27491":"markdown","a321ac55":"markdown"},"source":{"e47b5390":"!pip install -q -U seaborn\nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly as pl\nimport lightgbm as lgb","3cff5364":"db=pd.read_csv('..\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 4.csv',\n               parse_dates=['Order Date'])\n\ndb.head()","da30dce2":"print('Checking null values in each Columns')\ndb.isnull().sum()","8e408928":"print(\"Bestseller :\",db['Book Name'].value_counts().nlargest(1,keep='all').to_frame().index.values[0]); # bestseller\nprint(\"Top City :\",db['City (Billing)'].value_counts().nlargest(1,keep='all').to_frame().index.values[0]); # top city for orders\n\ndb['Book Name'] = db['Book Name'].fillna('\u0627\u0646\u0679\u0631\u0646\u06cc\u0679 \u0633\u06d2 \u067e\u06cc\u0633\u06c1 \u06a9\u0645\u0627\u0626\u06cc\u06ba') # filling null values with most sold book\ndb['City (Billing)'] = db['City (Billing)'].fillna('Karachi') # filling null valuse with top city\n\ndisplay(\"Checking null values in each Columns\")\ndb.isnull().sum()","450b1fec":"db['Date'] = [d.date() for d in db['Order Date']]\ndb['Time'] = [d.time() for d in db['Order Date']]\ndb['Month'] = [d.month for d in db['Order Date']]\ndb['Month_Year'] = [d.to_period(\"M\") for d in db['Order Date']]\ndb['Year'] = [d.year for d in db['Order Date']]\ndb['Weekday'] = [d.week for d in db['Order Date']]\ndb.head()","61fc6f53":"cities=pd.read_csv('..\/input\/pakistan-cities\/pk.csv')\ncities.head()","89548080":"cities['city'] = cities['city'].replace(['Sialkot City'],'Sialkot') # Replacing names for merggin DB","74d220b9":"geo=db['City (Billing)'].value_counts().rename_axis('City').reset_index(name='counts')\nclean_geo=geo.merge(cities,how='inner',left_on='City', right_on='city')\nclean_geo=clean_geo[[\"City\",\"lat\",\"lng\",\"admin_name\",\n         \"population_proper\",\"counts\"]]\nclean_geo=clean_geo.rename(columns={\"lat\":\"Latitude\",\"lng\":\"Longitude\",\n                                    \"population_proper\":\"Population\",\n                                    \"admin_name\":\"Province\",\"counts\":\"Total Orders\"})\nclean_geo.head()","dd6efbe1":"import plotly.graph_objects as go\n\n\nclean_geo['text'] = clean_geo['City'] + '<br> Book Sold ' + (clean_geo['Total Orders']).astype(str)\n# limits = [(0,99),(100,299),(300,499),(500,999),(1000,3000)]\n \nlimits = [(0,3),(3,9),(9,19),(19,49),(49,3000)]\ncolors = [\"royalblue\",\"crimson\",\"lightseagreen\",\"orange\",\"lightgrey\"]\nscale = 5000\n\nfig = go.Figure()\n\nfor i in range(len(limits)):\n    lim = limits[i]\n    df_sub = clean_geo[lim[0]:lim[1]]\n    fig.add_trace(go.Scattergeo(\n        lon = df_sub['Longitude'],\n        lat = df_sub['Latitude'],\n        text = df_sub['text'],\n        marker = dict(\n            size = df_sub['Total Orders'],\n            color = colors[i],\n            line_color='rgb(40,40,40)',\n            line_width=0.5,\n            sizemode = 'area'\n        ),\n        name = 'Top {0} - {1}'.format(lim[0]+1,lim[1])))\n\nfig.update_layout(\n        title_text = 'Total Books Sold by Gufhtugu per City',\n        showlegend = True,\n        legend_title=\"Top Books\",\n        legend_title_font_size=14,\n        geo = dict(\n            scope = 'asia',\n            landcolor = 'rgb(217, 217, 217)',\n            lonaxis = dict(range = [60.578993, 82.65129]),\n            lataxis = dict(range = [24.407138, 36.885931]),\n            \n        ),\n        \n    )\n\nfig.show()","50eac64c":"month=db[['City (Billing)','Month']].value_counts().rename_axis(['City','Month']).reset_index(name='counts')\nmonth_geo=month.merge(clean_geo,how='inner',left_on='City', right_on='City').sort_values(['Month'])\nmonth_geo.head()","95d7a07c":"import plotly.express as px\n# df = px.data.gapminder()\npx.scatter(month_geo, x=\"Total Orders\", y=\"counts\", animation_frame=\"Month\", animation_group=\"City\",\n           size=\"counts\", color=\"Province\", hover_name=\"City\",title='Number of Books bought by cities over month',\n           log_x=True, size_max=40, range_x=[1,3000], range_y=[0,500])\n# px.update_xaxes(autorange=True)","809a7749":"weekday=db[['City (Billing)','Weekday']].value_counts().rename_axis(['City','Week']).reset_index(name='counts')\nweekday_geo=weekday.merge(clean_geo,how='inner',left_on='City', right_on='City').sort_values(['Week'])","15fcdb90":"px.scatter(weekday_geo, x=\"Total Orders\", y=\"counts\", animation_frame=\"Week\", animation_group=\"City\",\n           size=\"counts\", color=\"Province\", hover_name=\"City\",title='Number of Books bought by cities over Week',\n           log_x=True, size_max=40, range_x=[1,3000], range_y=[0,200])","1475ac21":"# sns.set_theme(style=\"whitegrid\", palette=\"muted\")\ntotal_month=db['Month'].value_counts().rename_axis(['Month']).reset_index(name='counts')\nsns.set(rc={'figure.figsize':(12,8)},style=\"whitegrid\", palette=\"muted\")\n# Draw a categorical scatterplot to show each observation\nax = sns.barplot(data=total_month, x=\"Month\", y=\"counts\",palette='CMRmap')\nax.set(ylabel=\"\",title=\"Number of Books sold per month\",);\n# ax.legend(loc='upper right', bbox_to_anchor=(0.3, 1), ncol=1);","c6dc0364":"db=db.merge(cities,how='left',left_on='City (Billing)', right_on='city').set_index('Order Number')\n","63f7c5f4":"total=db[[\"Order Status\",\"Book Name\",\"Date\",\"Time\",\"City (Billing)\",\n         \"lat\",\"lng\",\"population_proper\",\"admin_name\",\"Month\"]]\ntotal=total.rename(columns={\"Order Status\":\"Status\",\"Book Name\":\"Book\",\"City (Billing)\":\"City\",\n         \"lat\":\"Latitude\",\"lng\":\"Longitude\",\"population_proper\":\"Population\",\"admin_name\":\"Province\"})\ntotal.head()","5b69295f":"import matplotlib as mpl\nax = sns.histplot(data=total, x=\"Month\", hue=\"Province\",\n    multiple=\"stack\",\n    palette=\"rocket\",\n    edgecolor=\".3\",binwidth=1,kde=True,\n    linewidth=.5)\nax.set(ylabel=\"\",title=\"Number of Books sold to province per month\")\nax.set_xticklabels([ \"\",'Feb', 'Apr','Jun','Aug','Oct','Dec']);","7c5b1be0":"status=db[['Order Status','Month']].value_counts().rename_axis(['Status','Month']).reset_index(name='counts')\npal = dict(Completed=\"#6495ED\", Returned=\"#F08080\",Canceled=\"#90ee90\")\n\n# Show the survival probability as a function of age and sex\ng = sns.lmplot(x=\"Month\", y=\"counts\", col=\"Status\", hue=\"Status\", data=status,\n               palette=pal, y_jitter=.02, logistic=False, truncate=True,);","c5244bc8":"status_pro=total[['Status','Month','Province']].value_counts().rename_axis(['Status','Month','Province']).reset_index(name='counts')\n\n\ng = sns.relplot(\n    data=status_pro,\n    x=\"Month\", y=\"counts\",\n    hue=\"Status\", size=\"Province\",\n    palette=pal, sizes=(10, 200),alpha=0.9,height=8,aspect=1.2\n)\ng.set( yscale=\"log\")\ng.set(ylabel=\"\",title=\"Status of Books sold to Province per month\")\ng.despine(left=True, bottom=True);","416f89f0":"from catboost import CatBoostRegressor,Pool\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder","5fa828fe":"train=db[['Order Status','Year','admin_name','City (Billing)','Weekday']].value_counts().rename_axis(['Status','Year','Province','City','Week']).reset_index(name='counts')","559d0af1":"train[['Year','Week']]=train[['Year','Week']].astype('int')\n","17a07b44":"DataX = train.drop(columns=['counts'])\nDatay = train['counts'].values\nx_train, x_val, y_train, y_val = train_test_split(DataX, Datay, test_size=0.3)","56e1c5f7":"train_pool = Pool(x_train, \n                  y_train, \n                  cat_features=['Status','Province','City'])\ntest_pool = Pool(x_val, \n                  y_val, \n                  cat_features=['Status','Province','City'])","ede47273":"model=CatBoostRegressor(iterations=10000,\n                             learning_rate=0.001,\n                             depth=12,\n                             eval_metric='RMSE',\n                             random_seed = 23,\n                             od_type='Iter',\n                             metric_period = 100,\n                             od_wait=100) # catboost is used for avoiding over fitting","432206d5":"model.fit(train_pool,\n             eval_set=test_pool,\n             use_best_model=True,\n             verbose=False,plot=True);","9f0bcc07":"predict=model.predict(test_pool)","0332412f":"res = model.calc_feature_statistics(train_pool,\n                                    feature=1,\n                                    plot=True)","7deda004":"import shap\nshap.initjs()","46d6bc2d":"explainer = shap.TreeExplainer(model)\nshap_values = explainer.shap_values(x_train)\n\n# visualize the first prediction's explanation\nshap.force_plot(explainer.expected_value, shap_values[0,:], x_train.iloc[0,:])","f0481742":"shap.force_plot(explainer.expected_value, shap_values, x_train)","0b9edd23":"shap.dependence_plot(\"Week\", shap_values, x_train)","4186008e":"shap.summary_plot(shap_values, x_train)","ae2d8a98":"shap.force_plot(explainer.expected_value, shap_values[91,:],x_train.iloc[91,:])","cd96f7dd":"x=range(len(predict))\ny=y_val\nax=sns.lineplot(x=x,y=y,label='Train',color='#9FD1FF')\nax=sns.lineplot(x=x,y=predict,label='Predicted',color='#FF8B8B')\nax.set(title='Trainig and predicted by Weekday data over the time');","5f383f58":"Status ='Completed'\nYear = 2021\nProvince = 'Punjab'\nCity = 'Lahore'\nWeek= 20\ndata1 = [Status,Year,Province,City,Week]\ntest1 = model.predict(data1)","664ad73c":"print(int(test1),\"Books Order\",Status,\"in week\",Week,\"-\",Year,\" from \",City,\",\",Province,\".\" )","5f55d645":"Status =['Completed','Completed','Completed','Returned']\nYear = [2021,2021,2022,2021]\nProvince = ['Punjab','Punjab','Sindh','Punjab']\nCity = ['Lahore','Bahawalpur','Karachi','Lahore']\nWeek= [20,10,13,14]\ndata2 = pd.DataFrame(np.transpose([Status,Year,Province,City,Week]),\n                     columns=['Status','Year','Province','City','Week'])\ntest2 = model.predict(data2).astype('int')","950c6cd5":"for i in range(len(test2)):\n    print(i+1,')',test2[i],\"Books Order\",data2.Status[i],\"in\",\"in week\",data2.Week[i],\"-\",data2.Year[i],\n          \" from \",data2.City[i],\",\",data2.Province[i],\".\\n\" )","82d94a79":"Week=DataX\nWeek['Year']=Week['Year'].replace([2019,2020],[2021,2022])\n\nypred=model.predict(Week)\nWeek['counts']=ypred.astype('int')\nTotaldf=pd.concat([train, Week], axis=0)\nTotaldf.shape","f64fc2f1":"\nax=sns.lineplot(x='Week',y='counts',hue='Year',data=Totaldf,palette='Set2')\nax.set( yscale=\"log\")\nax.set(title='Trainig and predicted by Weekday data over the time');","566d9fa7":"train1=db[['Order Status','Month','Year','admin_name','City (Billing)']].value_counts().rename_axis(['Status','Month','Year','Province','City']).reset_index(name='counts')\ntrain1[['Year','Month']]=train1[['Year','Month']].astype('int')\nDataX = train1.drop(columns=['counts'])\nDatay = train1['counts'].values\nx_train, x_val, y_train, y_val = train_test_split(DataX, Datay, test_size=0.3)\ntrain_pool = Pool(x_train, \n                  y_train, \n                  cat_features=['Status','Province','City'])\ntest_pool = Pool(x_val, \n                  y_val, \n                  cat_features=['Status','Province','City'])","640536e6":"model=CatBoostRegressor(iterations=10000,\n                             learning_rate=0.001,\n                             depth=12,\n                             eval_metric='RMSE',\n                             random_seed = 23,\n                             od_type='Iter',\n                             metric_period = 100,\n                             od_wait=100)\nmodel.fit(train_pool,\n             eval_set=test_pool,\n             use_best_model=True,\n             verbose=False,plot=True);","bb7fcdc1":"predict=model.predict(test_pool)\nres = model.calc_feature_statistics(train_pool,\n                                    feature=1,\n                                    plot=True)","0f1cd05c":"x=range(len(predict))\ny=y_val\nax=sns.lineplot(x=x,y=y,label='Train',color='#9FD1FF')\nax=sns.lineplot(x=x,y=predict,label='Predicted',color='#FF8B8B')\nax.set(title='Trainig and predicted by Month data over the time');","3b80fcbc":"Make = train1.drop(columns=['counts'])\nWeek=Make\nWeek['Year']=Week['Year'].replace([2019,2020],[2021,2022])\n\nypred=model.predict(Week)\nWeek['counts']=ypred.astype('int')\nTotal=pd.concat([train1, Week], axis=0)\nax=sns.lineplot(x='Month',y='counts',hue='Year',data=Total,palette='Set2')\nax.set( yscale=\"log\")\nax.set(title='Trainig and predicted by Month data over the time');","6c47f301":"from sklearn.linear_model import LinearRegression\nReadDb=pd.read_csv('..\/input\/gufhtugu-publications-dataset-challenge\/GP Orders - 5.csv',\n                  parse_dates=['Order Date & Time'])\nReadDb['Month'] = [d.month for d in ReadDb['Order Date & Time']]\nReadDb['Month_Year'] = [d.to_period(\"M\") for d in ReadDb['Order Date & Time']]\nReadDb['Year'] = [d.year for d in ReadDb['Order Date & Time']]\nReadDb['Weekday'] = [d.week for d in ReadDb['Order Date & Time']]\nRevenue=ReadDb[['Month','Year']].value_counts().rename_axis(['Month','Year']).\\\n   reset_index(name='counts')\nRevenue[\"Sale\"]=Revenue['counts']*500\n\nXpred=[i for i in range(2,13)]\npred=pd.DataFrame()\npred['Month']=Xpred\npred['Year']=2021\n\nRevenue.sort_values(by=['Year','Month'],inplace=True)\nreg=LinearRegression()\nX = Revenue.drop(columns=['counts','Sale'])\ny = Revenue['Sale'].values\nreg.fit(X,y)\n\nprediction_rev=reg.predict(pred)\n\nax=sns.lineplot(x=list(range(16)),y=Revenue.Sale,label=\"Past Sale\",color='#9FD1FF');\nax=sns.lineplot(x=[i for i in range(15,len(prediction_rev)+15)],y=prediction_rev,\n                label=\"Future Sale\",color='#FF8B8B');\nax.set(title='Predicting future sales till December 2021 Using Linear Regression ');","4d6ce185":"Year_books=db[['Book Name','Year']].value_counts().rename_axis(['Book','Year']).reset_index(name='counts')","13f61252":"Year2019=Year_books[Year_books['Year']==2019].nlargest(10, 'counts')\nYear2020=Year_books[Year_books['Year']==2020].nlargest(10, 'counts')\nYear2021=Year_books[Year_books['Year']==2021].nlargest(10, 'counts')","f8272e6d":"f, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 10))\n\n# Generate some sequential data\nsns.barplot(x='Book', y='counts', palette='Set2', ax=ax1,data=Year2019)\nax1.axhline(0, color=\"k\", clip_on=False)\nax1.set_ylabel(\"2019\")\n\n\n# Center the data to make it diverging\n\nsns.barplot(x='Book', y='counts', palette='Set2', ax=ax2,data=Year2020)\nax2.axhline(0, color=\"k\", clip_on=False)\nax2.set_ylabel(\"2020\")\n\n# Randomly reorder the data to make it qualitative\n\nsns.barplot(x='Book', y='counts', palette='Set2', ax=ax3,data=Year2021)\nax3.axhline(0, color=\"k\", clip_on=False)\nax3.set_ylabel(\"2021\")\n\n# Finalize the plot\nsns.despine(bottom=True)\nplt.setp(f.axes, yticks=[])\nfor p in ax1.patches:\n    ax1.annotate(format(p.get_height(), '1.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')\nfor p in ax2.patches:\n    ax2.annotate(format(p.get_height(), '1.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')\nfor p in ax3.patches:\n    ax3.annotate(format(p.get_height(), '1.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')\n    \nax1.set_xticklabels(ax1.get_xticklabels(),rotation=90)\nax2.set_xticklabels(ax2.get_xticklabels(),rotation=90)\nax3.set_xticklabels(ax3.get_xticklabels(),rotation=90)\n\nax1.set_xticklabels([ \"Data Science\",'Kaggle', 'R ka Taaruf','(C++)','Apna Elaaj','Shaoor','Molo Masali',\n                    'Kaggle for Begginers','CryptoCurrency','Blockchain']);\nax2.set_xticklabels([ \"Earn Money\",'Python Programming','Product Management', 'Blockchain','Justju ka safar',\n                     'Artificial Intelligence','Molo Masali','(C++)',\n                    'Python Programming 2020','Sukkur To Florida','Blockchain']);\nax3.set_xticklabels([ \"Lucky Draw\",'Earn Money','Column Nigari', 'Python Programming','Waqfa e Pareshani',\n                     'Data Science','Arif Kareem','Machine Learning',\n                    'Artificial Intelligence','Blockchain']);\nplt.tight_layout(h_pad=2);\nax1.set(title='Best Seller in 2019');\nax2.set(title='Best Seller in 2020');\nax3.set(title='Best Seller in 2021');","552e4fb9":"Month_books=db[['Book Name','Month','Year']].value_counts().rename_axis(['Book','Month','Year']).reset_index(name='counts')","bc1083bc":"Month_2019=Month_books.sort_values(by=['counts'],ascending=False)\nMonth_2019=Month_2019[Month_2019['Year']==2019]\nRange=  pd.Series(range(10,13))\nTop_Month=[]\nTop_Book=[]\nTop_counts=[]\nfor x in Range:\n    Book=Month_2019[Month_2019['Month']==x].nlargest(1,'counts')['Book'].values\n    Month=Month_2019[Month_2019['Month']==x].nlargest(1,'counts')['Month'].values\n    Counts=Month_2019[Month_2019['Month']==x].nlargest(1,'counts')['counts'].values\n    Top_Book.append(Book)\n    Top_Month.append(Month)\n    Top_counts.append(Counts)\nTop_Month=[['Oct','Nov','Dec']]\nTop_Book=np.transpose(Top_Book)\nTop_counts=np.transpose(Top_counts)\nTotal=pd.DataFrame(np.concatenate([Top_Month,Top_Book,Top_counts]).transpose(),\n                   columns=['Month','Book','Sale'])\nTotal","b12e6d15":"ax4=sns.barplot(data=Total,y='Book',x='Sale',hue='Month',palette='Set2',orient='h'\n                ,dodge=False)\n# ax4.set_yticklabels(ax4.get_xticklabels(),rotation=90)\nax4.set_yticklabels([ \"Kaggle for Begginers\",'Apna Elaaj Khud Karay','Data Science'])\nsns.despine(bottom=True)\n\nplt.setp(f.axes, yticks=[]);\nax4.set(title='Bestseller by Month in 2019 ');","384b407b":"Month_2020=Month_books.sort_values(by=['counts'],ascending=False)\nMonth_2020=Month_2020[Month_2020['Year']==2020]\nRange=  pd.Series(range(1,13))\nTop_Month=[]\nTop_Book=[]\nTop_counts=[]\nfor x in Range:\n    Book=Month_2020[Month_2020['Month']==x].nlargest(1,'counts')['Book'].values\n    Month=Month_2020[Month_2020['Month']==x].nlargest(1,'counts')['Month'].values\n    Counts=Month_2020[Month_2020['Month']==x].nlargest(1,'counts')['counts'].values\n    Top_Book.append(Book)\n    Top_Month.append(Month)\n    Top_counts.append(Counts)\nTop_Month=[['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']]\nTop_Book=np.transpose(Top_Book)\nTop_counts=np.transpose(Top_counts)\nTotal=pd.DataFrame(np.concatenate([Top_Month,Top_Book,Top_counts]).transpose(),\n                   columns=['Month','Book','Sale'])\nTotal","cde92975":"ax4=sns.barplot(data=Total,y='Book',x='Sale',hue='Month',palette='Set2',orient='h'\n                ,dodge=False,alpha=0.9)\n# ax4.set_yticklabels(ax4.get_xticklabels(),rotation=90)\nax4.set_yticklabels([ \"C++\",'Data Science','Justju ka safar-1','Artificial Intelligence',\n                     'Product Management','Python Programming','Earn Money From Internet'])\nsns.despine(bottom=True)\n\nplt.setp(f.axes, yticks=[]);\nax4.set(title='Bestseller by Month in 2020 ');","505a906b":"Month_2021=Month_books.sort_values(by=['counts'],ascending=False)\nMonth_2021=Month_2021[Month_2021['Year']==2021]\nTotal=Month_2021[Month_2021['Month']==1].nlargest(1,'counts')\nTotal","38a6972d":"# Simple Regression on Status","62de5fc8":"## Simpler Linear Regression","91a980d0":"## Prediction by Month","6a448260":"## Prediction By Weekday","991900db":"## Importing Datasets and Cleaning","8dce6dad":"# Best Seller","98aa2784":"# Geographical Analysis ","6dabf0ef":"* In 2019 Data Science was a bestseller with 303 copies and the rest of the top ten don't even compete.\n* In 2020 trend changed as the pandemic started and people were stuck in the home so more people order the books online and the bestseller was Earn Money online with 2206 copies, which have a direct relationship with people losing jobs and stuck in their homes.\n* In 2021 we have limited data so we can assume that the sales have increased since the pandemic and people reading trend have changed. the best seller is Lucy Draw book which is a gift and the second, best was Earn Money online with 373 copies sold in the first few days.","cb915949":"### Best Seller per year","d041db32":"# Work in progress \ud83d\udc68\u200d\ud83d\udd27 and if you like my work do \"up vote\" \u261d","a634544e":"## Test model with real world orders","4e5b77eb":"## Using Shap for feature dependency ","c6a27491":"# Exploring","a321ac55":"## Catboost for Futher prediction"}}