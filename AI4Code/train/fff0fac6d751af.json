{"cell_type":{"4e8ed921":"code","9e03d895":"code","ff456dc8":"code","77bb80c0":"code","63b19ebc":"code","026a2c5f":"code","9de2149d":"code","649b7716":"code","909dff2a":"code","3f2361a4":"code","25cd300b":"code","716fd0cd":"code","ba90bd12":"code","cd61eab1":"code","64d0636d":"code","65729c16":"code","89229717":"code","3f73b37b":"code","958e2779":"code","32574c00":"code","117f3938":"code","2182b4ce":"code","3f13c862":"code","29e6efec":"code","6471544d":"code","be7cf1c3":"code","6eb644ed":"code","591388d6":"code","a0c150a6":"code","9d001583":"code","d292616e":"code","aa98e884":"code","13465b25":"code","45157354":"code","8629e217":"code","76575f01":"code","231da7d7":"code","5904f58b":"code","8779a5fc":"code","9ed10349":"code","e9f36901":"code","9225e72b":"code","7cd1a493":"code","d133b5c0":"code","854101ca":"code","128bb68c":"code","ec99929b":"code","54c397d3":"code","53a000e6":"code","ba42bce9":"code","60c5cc5e":"code","39fdf65a":"code","c2feecb2":"code","398be1c8":"code","490c19a3":"code","620fa44f":"code","a44b6498":"code","c784996a":"code","27309bbd":"code","f5147c7a":"code","fde99ff9":"code","170a5c82":"code","adf22504":"code","d374e82a":"code","dc57a38f":"code","cb37da15":"code","f038962e":"code","333e5c64":"code","fb0009be":"code","19f3b8d9":"code","50be3d49":"code","c4a8af4d":"code","a17551b7":"code","a85e3964":"code","7b26d417":"code","93582a62":"code","3cc6346e":"code","77afe54c":"code","3fc16e4d":"code","fc3fa32f":"code","b952ed89":"code","9831ce86":"code","9bfb07ef":"code","aa227e65":"code","8081e237":"code","9eccafcc":"code","666ee680":"code","f9d69f51":"code","f849d5bc":"code","0b7f9575":"code","d1e94439":"code","6c69a98b":"code","f2bd41ca":"code","819c3425":"code","b0b8bbb2":"code","815672a1":"code","0290e272":"code","254abed3":"code","d1548723":"code","5df7474e":"code","eb0b42d1":"code","0dd93c28":"code","b62c86c3":"code","6180a953":"code","c8e50aeb":"code","71e3de99":"code","e3897496":"code","952a5eaa":"code","1ff2bc4c":"code","db423997":"code","3b1dc655":"code","46cf9e12":"code","3f50910f":"code","7a9ae608":"code","7dceeaa5":"code","a3963143":"code","881c147a":"code","4be21cf1":"code","8275fce4":"code","f4c02f43":"code","0be71d84":"code","04b0ebd6":"code","45778c0d":"code","026812a8":"code","a740bc7b":"code","9b46b163":"code","9e99dd67":"code","df31f76c":"code","55f4fe69":"code","1bac2a74":"code","043197f1":"code","e48474d5":"code","0c6eb411":"code","7501b082":"code","883f91ea":"code","e0ef46a6":"code","ea49a4f5":"code","6a426ae5":"code","c2579032":"code","7c96b0d0":"code","c3dc1d16":"code","f2dfdc85":"code","42ca8714":"code","a0b5df30":"code","f54db0c0":"code","c7da8d4f":"code","1df65494":"code","bdef006f":"code","11d13501":"code","434880a9":"code","1b484000":"code","f1491010":"code","71bf12e3":"code","f52be0d3":"code","4ce4ef54":"code","100245a9":"code","cd5c6081":"code","86545950":"code","96ae188d":"code","6f269fae":"code","635d1f62":"code","7c1518c8":"code","c70b39fd":"code","d03ca746":"code","9b67b293":"code","a52c7414":"code","dc63c3cf":"code","95393799":"code","684d5f59":"code","e282df40":"code","9cfc957a":"code","8e3a7525":"code","ea7f27c4":"code","106583a6":"code","dd576b66":"code","f0d80ecb":"code","c61c5180":"code","57e93768":"code","229c214d":"code","b3dc9932":"code","3d53aed3":"code","458898bc":"code","2b8b6618":"code","48eaf519":"code","33558a51":"code","0a7ce690":"code","f0adcc1b":"code","f032bb13":"code","0beceea8":"code","8ce62062":"code","9cc38c8d":"code","a93c4ea7":"code","f9aee612":"code","459d4746":"code","685a7fd2":"code","30862b9a":"code","a57610d2":"code","37dc45db":"code","542bb2dc":"code","ab64de4c":"code","a3b4f72e":"code","abe68e6a":"code","6397eaa2":"code","1a6ec799":"code","5fb83c20":"code","610a9678":"code","82464313":"code","88626100":"code","87339569":"code","02927c85":"code","5da7f55b":"code","56fc34dd":"code","d58b2ec5":"code","69423e5e":"code","caf983dc":"code","c2da0fd5":"code","fe7794c8":"code","b9ec6dde":"code","d00f3151":"code","3bde4e73":"code","ffcea07d":"code","14095093":"code","3d1a2470":"code","4792320d":"code","572cc5ef":"code","855be6be":"code","e79118b5":"code","fb15470b":"code","dea1cc2d":"code","9db8225f":"code","0b07bfbe":"code","d96d3ae0":"code","1412099d":"code","810a011b":"code","22f86ee9":"code","337762c5":"code","f1c9e900":"code","7d78801c":"code","97f60570":"code","4103ad1c":"code","8f580e50":"code","f4846840":"markdown","993bf7f7":"markdown","7fb50744":"markdown","b0bb5b24":"markdown","ce025dc1":"markdown","fc086258":"markdown","4c7c4f5f":"markdown","7c8792e5":"markdown","9490b988":"markdown","64dca3a8":"markdown","8b245e65":"markdown","4ff18e75":"markdown","3071c95a":"markdown","a2dac525":"markdown","3950f7ae":"markdown","6e5f9891":"markdown","9e0e8d25":"markdown","12c645ed":"markdown","81db7184":"markdown","a5c60671":"markdown","b659efb3":"markdown","01220fcc":"markdown","267f536f":"markdown","25799f78":"markdown","c3f04fd8":"markdown","46409b36":"markdown","6c7e0e9b":"markdown","2cd9c1e4":"markdown","0e6be73e":"markdown","e22b2db9":"markdown","ba0ab0f1":"markdown","dda31a4f":"markdown","a3ff22e9":"markdown","0d15d653":"markdown","d2f202da":"markdown","0cb918a9":"markdown","7fd72fef":"markdown","7aae06fe":"markdown","0a8c5521":"markdown","b53d716e":"markdown","76192693":"markdown","d0b0ffa9":"markdown","19563250":"markdown","1597bd6a":"markdown","72cc7dde":"markdown","90f2e4d6":"markdown","ff858822":"markdown","db2b516a":"markdown","c84dfe37":"markdown","2c229cef":"markdown","16dba075":"markdown","4c493333":"markdown","162497a4":"markdown","4a5eb1fb":"markdown","c6cb4ffa":"markdown","6467e105":"markdown","6d52f035":"markdown","af31b966":"markdown","f6eda93c":"markdown","cf1798db":"markdown","0f266e1c":"markdown","9b3f98bc":"markdown","b4d7c7d4":"markdown","d07fa9d2":"markdown","cef52ac3":"markdown","9a2f9a20":"markdown","6d33248e":"markdown","9628113b":"markdown","7086e304":"markdown","3a1c5123":"markdown","37a3fe28":"markdown","d3491c61":"markdown","d12cf5e4":"markdown","8d6decf9":"markdown","e903a3f1":"markdown","5fde6ce3":"markdown","c772eaeb":"markdown","cbad2e59":"markdown","c63d35ec":"markdown","a161c0e2":"markdown","159cc3f5":"markdown","32a1b02c":"markdown","80530e01":"markdown","c3697de1":"markdown","c9e8cbe9":"markdown","55c987d3":"markdown","284b1c56":"markdown","065447bd":"markdown","e644efc0":"markdown","fba6a1ef":"markdown","6d360f4b":"markdown","54978116":"markdown","80703838":"markdown","0e153819":"markdown","b1bf548a":"markdown","f77a1958":"markdown","cd48a195":"markdown","a47b5c36":"markdown","11a12c4f":"markdown","00df6088":"markdown","2d390480":"markdown","1fe2f2ba":"markdown","1450f3a5":"markdown","2242395d":"markdown","0aa5f66b":"markdown","aada41fa":"markdown","2c5e4352":"markdown","917be909":"markdown","bf656ef1":"markdown","245402b1":"markdown","8bf285ad":"markdown","5f8163e6":"markdown","30067379":"markdown","6413920b":"markdown","9269839f":"markdown","e75e608d":"markdown","785f23cf":"markdown","56578603":"markdown","30e39bee":"markdown","f6330cb9":"markdown","cd3a0c3d":"markdown","00333de0":"markdown","b24274a1":"markdown","6c92f350":"markdown","cdb5b085":"markdown","9f105a89":"markdown","d0153f1d":"markdown","b6fddb02":"markdown","aebdb0d7":"markdown","5ae69b0b":"markdown","74e7a29c":"markdown","9b5c6507":"markdown","ed39ad6c":"markdown","9eb93139":"markdown","c72f6ebe":"markdown","653cc960":"markdown","97f38ace":"markdown","84485e3b":"markdown","2202d4da":"markdown","a073f9ee":"markdown","6a0bed2b":"markdown","267bdee7":"markdown","a2894273":"markdown","a563fd34":"markdown","df0f17dc":"markdown","74e39573":"markdown","d7299353":"markdown","302bb67b":"markdown","2d1ca119":"markdown","6a7a2ff6":"markdown","ef1f721b":"markdown","745f8924":"markdown","1fd2c074":"markdown","a3f4463e":"markdown","b3cc5a86":"markdown","7832ff8c":"markdown","9b354933":"markdown","65c94fce":"markdown","b96cb5cd":"markdown","ec855d5c":"markdown","da44357d":"markdown","95cfb055":"markdown","8f76ebfb":"markdown","df12bd26":"markdown","32bdd3eb":"markdown","2a91b4dc":"markdown","9f9b7368":"markdown","39b6907b":"markdown","0b981d64":"markdown","141346d7":"markdown","19baa72d":"markdown","2280d599":"markdown","ff64195c":"markdown","a76f3fd9":"markdown","1357f5fe":"markdown","06a0aff6":"markdown","9565902c":"markdown","38c37c6a":"markdown","8abb1e90":"markdown","1bdb6ca4":"markdown","e9046a95":"markdown","e9a8db33":"markdown","d12972f2":"markdown","afceaa96":"markdown","374511a0":"markdown","8c6d867d":"markdown","966669ea":"markdown","4fdddaae":"markdown","e4bdc3b5":"markdown","ea323fda":"markdown","43acbf37":"markdown","2459231c":"markdown","e3dc9a85":"markdown","40184605":"markdown","04748ff9":"markdown","d5728562":"markdown","cd94d6d0":"markdown","31a01274":"markdown","2d06bbcb":"markdown","db6351b1":"markdown","69cee316":"markdown","c7d681b9":"markdown","5fb98842":"markdown","a6fb6068":"markdown","b7ca3928":"markdown","cf481cd3":"markdown","b7dddc12":"markdown","11f2b7d8":"markdown"},"source":{"4e8ed921":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom matplotlib.gridspec import GridSpec\nimport seaborn as sns\nfrom scipy import stats\nfrom scipy.special import boxcox1p\nimport warnings\n\nfrom sklearn.model_selection import KFold, cross_val_score, GridSearchCV\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import Lasso, ElasticNet\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.ensemble import GradientBoostingRegressor, VotingRegressor\n\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom mlxtend.regressor import StackingRegressor\n\nwarnings.filterwarnings(\"ignore\") # ignoring annoying warnings","9e03d895":"test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest[\"SalePrice\"] = np.nan # we don't have target values for the test","ff456dc8":"num_discrete = ['BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr','TotRmsAbvGrd',\n                'Fireplaces','GarageCars','GarageYrBlt','YearBuilt','YearRemodAdd','YrSold','MoSold']\n\nnum_continuous = ['LotFrontage','LotArea','MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','1stFlrSF',\n                  '2ndFlrSF','LowQualFinSF','GrLivArea','GarageArea','WoodDeckSF','OpenPorchSF','EnclosedPorch',\n                  '3SsnPorch','ScreenPorch','PoolArea','MiscVal','SalePrice']\n\ncat_ordinal = ['LotShape','Utilities','LandSlope','OverallQual','OverallCond','ExterQual','ExterCond',\n               'BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','HeatingQC','CentralAir',\n               'Electrical','KitchenQual','Functional','FireplaceQu','GarageFinish','GarageQual','GarageCond',\n               'PavedDrive','PoolQC','Fence']\n\ncat_nominal = ['MSSubClass','MSZoning','Street','Alley','LandContour','LotConfig','Neighborhood',\n               'Condition1','Condition2','BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st',\n               'Exterior2nd','MasVnrType','Foundation','Heating','GarageType','MiscFeature',\n               'SaleType','SaleCondition']","77bb80c0":"# defining a z score function\ndef z_score(df): \n    return (df-df.mean())\/df.std(ddof=0)","63b19ebc":"# Let's take a look at the number of outliers of the variables with correlation > 0.3 and % of zeros < 30%\n\nidx = []\noutliers = []\ncorrs = []\nzeros = []\n\nfor i in num_continuous:\n    if str(train[i].dtype) != 'object':\n        idx.append(i)\n        outliers.append(list(abs(z_score(train[i])) > 3).count(True))\n        corrs.append(train.SalePrice.corr(train[i]))\n        zeros.append(len(train[i][train[i] == 0])\/len(train[i]))\n        \nouts = pd.DataFrame({'# Outliers': outliers, \n                     'Feature': idx, \n                     'Corr': corrs, \n                     '% Zeros': zeros}).sort_values(ascending = False, \n                                                 by = '# Outliers')\n\nouts = outs[outs[\"# Outliers\"] > 0]\nouts = outs[abs(outs[\"Corr\"]) > 0.3].reset_index(drop=True)\nouts = outs[outs[\"% Zeros\"] < 0.3].reset_index(drop=True)\nouts","026a2c5f":"# defining a function to plot the correlation of the variables shown above with SalePrice, so we can delete Low Price's outliers\n\ndef plot_outliers():\n    \n    fig = plt.figure(figsize=(15,15), constrained_layout=True)\n\n    gs = GridSpec(3,2,figure=fig)\n\n    rows = [0,0,1,1,2,2]\n    columns = [0,1,0,1,0,1]\n\n    colors = [\"#9b59b6\", \"#3498db\", \"#95a5a6\", \"#e74c3c\", \"#34495e\", \"#2ecc71\"]\n\n    counter = 0\n\n    for i in outs.Feature:\n        sns.scatterplot(y=train.SalePrice, x=train[i], \n                      ax=fig.add_subplot(gs[rows[counter],columns[counter]]),\n                      color=colors[counter])\n        counter = counter + 1\n\n    fig.show()","9de2149d":"plot_outliers()","649b7716":"train.shape","909dff2a":"# removing GrLivArea outliers with Low Price\ntrain = train.drop(train[(train['GrLivArea'] > 4000) & (train['SalePrice'] < 300000)].index)","3f2361a4":"# plotting again\nplot_outliers()","25cd300b":"train = train.drop(train[(train['LotFrontage'] > 300) & (train['SalePrice'] < 300000)].index)","716fd0cd":"plot_outliers()","ba90bd12":"train.shape","cd61eab1":"dataset = pd.concat([train,test],axis=0).reset_index(drop=True)\ndataset = dataset.fillna(np.nan)","64d0636d":"# defining a function to map the # and % of NaN's for the features\ndef show_null(df):\n    null_columns = (df.isnull().sum(axis = 0)\/len(df)).sort_values(ascending=False).index\n    null_data = pd.concat([df.isnull().sum(axis = 0),\n                           (df.isnull().sum(axis = 0)\/len(df)).sort_values(ascending=False),\n                           df.loc[:, df.columns.isin(list(null_columns))].dtypes]\n                          , axis=1)\n    null_data = null_data.rename(columns={0: '#', \n                                          1: '% null', \n                                          2: 'type'}).sort_values(ascending=False, by = '% null')\n    null_data = null_data[null_data[\"#\"]!=0]\n    return null_data\n\nshow_null(dataset)","65729c16":"# Ordinals - Replacing NaN's\n\ndataset.PoolQC[dataset.PoolQC.isnull() == True] = 'NA'\ndataset.Fence[dataset.Fence.isnull() == True] = 'NA'\ndataset.FireplaceQu[dataset.FireplaceQu.isnull() == True] = 'NA'\ndataset.GarageCond[dataset.GarageCond.isnull() == True] = 'NA'\ndataset.GarageQual[dataset.GarageQual.isnull() == True] = 'NA'\ndataset.GarageFinish[dataset.GarageFinish.isnull() == True] = 'NA'\ndataset.BsmtExposure[dataset.BsmtExposure.isnull() == True] = 'NA'\ndataset.BsmtCond[dataset.BsmtCond.isnull() == True] = 'NA'\ndataset.BsmtQual[dataset.BsmtQual.isnull() == True] = 'NA'\ndataset.BsmtFinType2[dataset.BsmtFinType2.isnull() == True] = 'NA'\ndataset.BsmtFinType1[dataset.BsmtFinType1.isnull() == True] = 'NA'\ndataset.Electrical[dataset.Electrical.isnull() == True] = stats.mode(train.Electrical)[0][0]\ndataset.Functional[dataset.Functional.isnull() == True] = stats.mode(train.Functional)[0][0]\ndataset.KitchenQual[dataset.KitchenQual.isnull() == True] = stats.mode(train.KitchenQual)[0][0]\ndataset.Utilities[dataset.Utilities.isnull() == True] = stats.mode(train.Utilities)[0][0]","89229717":"# Nominals - Replacing NaN's\n\ndataset.MiscFeature[dataset.MiscFeature.isnull() == True] = 'NA'\ndataset.Alley[dataset.Alley.isnull() == True] = 'NA'\ndataset.GarageType[dataset.GarageType.isnull() == True] = 'NA'\ndataset.MasVnrType[dataset.MasVnrType.isnull() == True] = 'NA'\ndataset.MSZoning[dataset.MSZoning.isnull() == True] = stats.mode(train.MSZoning)[0][0]\ndataset.SaleType[dataset.SaleType.isnull() == True] = stats.mode(train.SaleType)[0][0]\ndataset.Exterior1st[dataset.Exterior1st.isnull() == True] = stats.mode(train.Exterior1st)[0][0]\ndataset.Exterior2nd[dataset.Exterior2nd.isnull() == True] = stats.mode(train.Exterior2nd)[0][0]","3f73b37b":"# Some Numericals - Replacing NaN's\n\ndataset.BsmtFullBath[dataset.BsmtFullBath.isnull() == True] = stats.mode(train.BsmtFullBath)[0][0]\ndataset.BsmtHalfBath[dataset.BsmtHalfBath.isnull() == True] = stats.mode(train.BsmtHalfBath)[0][0]\ndataset.GarageCars[dataset.GarageCars.isnull() == True] = stats.mode(train.GarageCars)[0][0]\ndataset.GarageArea[dataset.GarageArea.isnull() == True] = np.median(train.\n                                                                    GarageArea[train.GarageArea.isnull() == False])\ndataset.TotalBsmtSF[dataset.TotalBsmtSF.isnull() == True] = np.median(train.\n                                                                      TotalBsmtSF[train.TotalBsmtSF.isnull() == False])\ndataset.BsmtFinSF1[dataset.BsmtFinSF1.isnull() == True] = np.median(train.\n                                                                    BsmtFinSF1[train.BsmtFinSF1.isnull() == False])\ndataset.BsmtFinSF2[dataset.BsmtFinSF2.isnull() == True] = np.median(train.\n                                                                    BsmtFinSF2[train.BsmtFinSF2.isnull() == False])\ndataset.BsmtUnfSF[dataset.BsmtUnfSF.isnull() == True] = np.median(train.\n                                                                  BsmtUnfSF[train.BsmtUnfSF.isnull() == False])\ndataset.LotFrontage[dataset.LotFrontage.isnull() == True] = np.median(train.\n                                                                    LotFrontage[train.LotFrontage.isnull() == False])","958e2779":"# MasVnrArea\n\ndataset[dataset.MasVnrArea.isnull() == True].MasVnrType","32574c00":"dataset.MasVnrArea[dataset.MasVnrArea.isnull() == True] = 0","117f3938":"# GarageYrBlt\n\ndataset[[\"GarageType\",\n          \"GarageFinish\",\n          \"GarageQual\",\n          \"GarageCond\",\n         \"GarageYrBlt\"]][dataset.GarageYrBlt.isnull() == True].dropna()","2182b4ce":"dataset.GarageYrBlt[dataset.GarageYrBlt.isnull() == True] = 'NA'","3f13c862":"# Let's see again the # and % of NaN's \nshow_null(dataset)\n\n# SalePrice is ok, because NaN values are from test set.","29e6efec":"# To remember\nnum_discrete = ['BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr','TotRmsAbvGrd',\n                'Fireplaces','GarageCars','GarageYrBlt','YearBuilt','YearRemodAdd','YrSold','MoSold']","6471544d":"# defining a function to plot boxplot and stripplot for non continuous variables\ndef make_discrete_plot(feature, rotation1, rotation2):\n    fig = plt.figure(figsize=(20,8))\n    gs = GridSpec(1,2)\n    sns.boxplot(y=dataset.SalePrice, x=dataset[feature], ax=fig.add_subplot(gs[0,0]))\n    plt.xticks(rotation = rotation1)\n    sns.stripplot(y=dataset.SalePrice, x=dataset[feature], ax=fig.add_subplot(gs[0,1]))\n    plt.xticks(rotation = rotation2)\n    fig.show()","be7cf1c3":"# Those variables tell almost the same information, so let's add them.\ndataset[\"Baths\"] = dataset.BsmtFullBath + 0.5*dataset.BsmtHalfBath + dataset.FullBath + 0.5*dataset.HalfBath","6eb644ed":"make_discrete_plot(\"Baths\",0,0)","591388d6":"# there few values greater than 4, so let's put them together with 3.5\ndataset.Baths = dataset.Baths.apply(lambda x: 3.5 if x > 3.5 else x)","a0c150a6":"make_discrete_plot(\"Baths\",0,0)","9d001583":"make_discrete_plot(\"BedroomAbvGr\",0,0)","d292616e":"# there few values greater than 5, so let's put them together with 5\ndataset.BedroomAbvGr = dataset.BedroomAbvGr.apply(lambda x: 5 if x > 5 else x)","aa98e884":"make_discrete_plot(\"BedroomAbvGr\",0,0)","13465b25":"# change type to category\ndataset.BedroomAbvGr = dataset.BedroomAbvGr.astype(str)","45157354":"make_discrete_plot(\"KitchenAbvGr\",0,0)","8629e217":"# there few values equal to 0 or 3, so let's put them together with other classes\ndataset.KitchenAbvGr = dataset.KitchenAbvGr.apply(lambda x: 1 if x==0 else(2 if x==3 else x))","76575f01":"make_discrete_plot(\"KitchenAbvGr\",0,0)","231da7d7":"# change type to category\ndataset.KitchenAbvGr = dataset.KitchenAbvGr.astype(str)","5904f58b":"make_discrete_plot(\"TotRmsAbvGrd\",0,0)","8779a5fc":"# there few values equal to 2 or greater than 11, so let's put them together with other classes\ndataset.TotRmsAbvGrd = dataset.TotRmsAbvGrd.apply(lambda x: 3 if x==2 else(11 if x>11 else x))","9ed10349":"make_discrete_plot(\"TotRmsAbvGrd\",0,0)","e9f36901":"make_discrete_plot(\"Fireplaces\",0,0)","9225e72b":"# there few values greater than 2, so let's flag\ndataset.Fireplaces = dataset.Fireplaces.apply(lambda x: 1 if x>1 else x)","7cd1a493":"make_discrete_plot(\"Fireplaces\",0,0)","d133b5c0":"make_discrete_plot(\"GarageCars\",0,0)","854101ca":"# there few values greater than 3, so let's put them together with other classes\ndataset.GarageCars = dataset.GarageCars.apply(lambda x: 3 if x>3 else x)","128bb68c":"make_discrete_plot(\"GarageCars\",0,0)","ec99929b":"plt.figure(figsize=(20,8))\nsns.kdeplot(dataset[\"GarageYrBlt\"][dataset[\"GarageYrBlt\"] != 'NA'])\nplt.show()","54c397d3":"dataset.GarageYrBlt[dataset[\"GarageYrBlt\"] != 'NA'].sort_values(ascending= False).head(3) \n# this is strange, probably 2207 is 2007","53a000e6":"dataset.GarageYrBlt[dataset.GarageYrBlt == 2207] = 2007","ba42bce9":"# Let's transform those values into categories\nmin(dataset.GarageYrBlt[dataset[\"GarageYrBlt\"] != 'NA'].values)","60c5cc5e":"bins = [1890, 1920, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2011]\nnames = ['-1920', '1920-1940', '1940-1950', '1950-1960', '1960-1970',\n         '1970-1980', '1980-1990', '1990-2000', '2000+']\n\ndataset.GarageYrBlt[dataset[\"GarageYrBlt\"] != 'NA'] = pd.cut(dataset.GarageYrBlt[dataset[\"GarageYrBlt\"] != 'NA'], \n                                                             bins, \n                                                             labels=names)","39fdf65a":"# change type from category to str\ndataset.GarageYrBlt = dataset.GarageYrBlt.astype(str)","c2feecb2":"make_discrete_plot(\"GarageYrBlt\",20,20)","398be1c8":"plt.figure(figsize=(20,8))\nsns.kdeplot(dataset[\"YearRemodAdd\"])\nplt.show()","490c19a3":"# Let's transform those values into categories\nprint(min(dataset.YearRemodAdd[dataset[\"YearRemodAdd\"] != 'NA'].values), ',',\n      max(dataset.YearRemodAdd[dataset[\"YearRemodAdd\"] != 'NA'].values))","620fa44f":"bins = [1949, 1960, 1970, 1980, 1990, 2000, 2011]\nnames = ['1950-1960', '1960-1970',\n         '1970-1980', '1980-1990', '1990-2000', '2000+']\n\ndataset.YearRemodAdd = pd.cut(dataset.YearRemodAdd, bins, labels=names)","a44b6498":"# change type from category to str\ndataset.YearRemodAdd = dataset.YearRemodAdd.astype(str)","c784996a":"make_discrete_plot(\"YearRemodAdd\",20,20)","27309bbd":"plt.figure(figsize=(20,8))\nsns.kdeplot(dataset[\"YearBuilt\"][dataset[\"YearBuilt\"] != 'NA'])\nplt.show()","f5147c7a":"# Let's transform those values into categories\nprint(min(dataset.YearBuilt[dataset[\"YearBuilt\"] != 'NA'].values), ',',\n      max(dataset.YearBuilt[dataset[\"YearBuilt\"] != 'NA'].values))","fde99ff9":"bins = [1870, 1920, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2011]\nnames = ['-1920', '1920-1940', '1940-1950', '1950-1960', '1960-1970',\n         '1970-1980', '1980-1990', '1990-2000', '2000+']\n\ndataset.YearBuilt = pd.cut(dataset.YearBuilt, bins, labels=names)","170a5c82":"# change type from category to str\ndataset.YearBuilt = dataset.YearBuilt.astype(str)","adf22504":"make_discrete_plot(\"YearBuilt\",20,20)","d374e82a":"make_discrete_plot(\"YrSold\",0,0)","dc57a38f":"# change type from int to str\ndataset.YrSold = dataset.YrSold.astype(str)","cb37da15":"make_discrete_plot(\"MoSold\",0,0)","f038962e":"# change type from int to str\ndataset.MoSold = dataset.MoSold.astype(str)","333e5c64":"# to remember\nnum_continuous = ['LotFrontage','LotArea','MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF',\n                  '1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea','GarageArea','WoodDeckSF','OpenPorchSF',\n                  'EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','MiscVal']","fb0009be":"# defining function to plot scatterplot for continuous variables with SalePrice.\ndef make_continuous_plot(feature):\n    \n    fig = plt.figure(figsize=(18,15))\n    gs = GridSpec(2,2)\n    \n    j = sns.scatterplot(y=np.log1p(dataset['SalePrice']), \n                        x=boxcox1p(dataset[feature], 0.15), ax=fig.add_subplot(gs[0,1]), palette = 'blue')\n\n    plt.title('BoxCox 0.15\\n' + 'Corr: ' + str(np.round(np.log1p(dataset['SalePrice']).corr(boxcox1p(dataset[feature], 0.15)),2)) + ', Skew: ' +\n               str(np.round(stats.skew(boxcox1p(dataset[feature], 0.15)),2)))\n    \n    j = sns.scatterplot(y=np.log1p(dataset['SalePrice']), \n                        x=boxcox1p(dataset[feature], 0.25), ax=fig.add_subplot(gs[1,0]), palette = 'blue')\n\n    plt.title('BoxCox 0.25\\n' + 'Corr: ' + str(np.round(np.log1p(dataset['SalePrice']).corr(boxcox1p(dataset[feature], 0.25)),2)) + ', Skew: ' +\n               str(np.round(stats.skew(boxcox1p(dataset[feature], 0.25)),2)))\n    \n    j = sns.scatterplot(y=np.log1p(dataset['SalePrice']), \n                        x=boxcox1p(dataset[feature], 0.35), ax=fig.add_subplot(gs[1,1]), palette = 'blue')\n\n    plt.title('BoxCox 0.35\\n' + 'Corr: ' + str(np.round(np.log1p(dataset['SalePrice']).corr(boxcox1p(dataset[feature], 0.35)),2)) + ', Skew: ' +\n               str(np.round(stats.skew(boxcox1p(dataset[feature], 0.35)),2)))\n    \n    j = sns.scatterplot(y=np.log1p(dataset['SalePrice']), \n                        x=dataset[feature], ax=fig.add_subplot(gs[0,0]), color = 'red')\n\n    plt.title('Linear\\n' + 'Corr: ' + str(np.round(np.log1p(dataset['SalePrice']).corr(dataset[feature]),2)) + ', Skew: ' + \n               str(np.round(stats.skew(dataset[feature]),2)))\n    \n    fig.show()","19f3b8d9":"make_continuous_plot('LotFrontage')","50be3d49":"dataset.LotFrontage = boxcox1p(dataset.LotFrontage, 0.35)","c4a8af4d":"make_continuous_plot('LotArea')","a17551b7":"dataset.LotArea = boxcox1p(dataset.LotArea, 0.15)","a85e3964":"make_continuous_plot('MasVnrArea')","7b26d417":"dataset.MasVnrArea = boxcox1p(dataset.MasVnrArea, 0.15)","93582a62":"make_continuous_plot('BsmtFinSF1')","3cc6346e":"# Let's transform those values into categories, because with boxcox 0.35 the correlation decreases a lot\nprint(min(dataset.BsmtFinSF1.values), ',',\n      max(dataset.BsmtFinSF1.values))","77afe54c":"bins = [-1, 250, 500, 750, 1000, 1250, 4011]\nnames = ['-250', '250-500', '500-750', '750-1000',\n         '1000-1250', '1250-4011']\n\ndataset.BsmtFinSF1 = pd.cut(dataset.BsmtFinSF1, bins, labels=names)","3fc16e4d":"# change type from category to str\ndataset.BsmtFinSF1 = dataset.BsmtFinSF1.astype(str)","fc3fa32f":"make_discrete_plot('BsmtFinSF1',0,0)","b952ed89":"make_continuous_plot('BsmtFinSF2')","9831ce86":"# since there is no correlation at all, I'll flag this feature.\ndataset.BsmtFinSF2 = dataset.BsmtFinSF2.apply(lambda x: 1 if x > 0 else 0)","9bfb07ef":"make_discrete_plot('BsmtFinSF2',0,0)","aa227e65":"make_continuous_plot('BsmtUnfSF')","8081e237":"# Let's transform those values into categories\nprint(min(dataset.BsmtUnfSF.values), ',',\n      max(dataset.BsmtUnfSF.values))","9eccafcc":"bins = [-1, 250, 500, 750, 1000, 1250, 2400]\nnames = ['-250', '250-500', '500-750', '750-1000',\n         '1000-1250', '1250-2400']\n\ndataset.BsmtUnfSF = pd.cut(dataset.BsmtUnfSF, bins, labels=names)","666ee680":"# change type from category to str\ndataset.BsmtUnfSF = dataset.BsmtUnfSF.astype(str)","f9d69f51":"make_discrete_plot('BsmtUnfSF',0,0)","f849d5bc":"make_continuous_plot('TotalBsmtSF')","0b7f9575":"# Let's add another variable, with the sum of these others\ndataset[\"FlrSF\"] = dataset[\"1stFlrSF\"] + dataset[\"2ndFlrSF\"] + dataset[\"TotalBsmtSF\"]","d1e94439":"make_continuous_plot('FlrSF')","6c69a98b":"make_continuous_plot('1stFlrSF')","f2bd41ca":"make_continuous_plot('2ndFlrSF')","819c3425":"dataset.FlrSF = boxcox1p(dataset.FlrSF, 0.35)\ndataset[\"1stFlrSF\"] = boxcox1p(dataset[\"1stFlrSF\"], 0.15)","b0b8bbb2":"# Let's transform values of 2ndFlrSF into categories\nprint(min(dataset['2ndFlrSF'].values), ',',\n      max(dataset['2ndFlrSF'].values))","815672a1":"bins = [-1, 250, 500, 750, 1000, 1250, 2100]\nnames = ['-250', '250-500', '500-750', '750-1000',\n         '1000-1250', '1250-2100']\n\ndataset['2ndFlrSF'] = pd.cut(dataset['2ndFlrSF'], bins, labels=names)","0290e272":"# change type from category to str\ndataset['2ndFlrSF'] = dataset['2ndFlrSF'].astype(str)","254abed3":"make_discrete_plot('2ndFlrSF',0,0)","d1548723":"make_continuous_plot('LowQualFinSF')","5df7474e":"# since there is no correlation, I'll flag it\ndataset.LowQualFinSF = dataset.LowQualFinSF.apply(lambda x: 1 if x > 0 else 0)","eb0b42d1":"make_discrete_plot('LowQualFinSF',0,0)","0dd93c28":"make_continuous_plot('GrLivArea')","b62c86c3":"dataset.GrLivArea = boxcox1p(dataset.GrLivArea,0.15)","6180a953":"make_continuous_plot('GarageArea')","c8e50aeb":"make_continuous_plot('WoodDeckSF')","71e3de99":"dataset.WoodDeckSF = boxcox1p(dataset.WoodDeckSF,0.15)","e3897496":"# These variables can be summed into one\ndataset[\"PorchSF\"] = dataset[\"OpenPorchSF\"] + dataset[\"EnclosedPorch\"] + dataset[\"3SsnPorch\"] + dataset[\"ScreenPorch\"]\ndataset = dataset.drop(columns=[\"OpenPorchSF\",\"EnclosedPorch\",\"3SsnPorch\",\"ScreenPorch\"])","952a5eaa":"make_continuous_plot('PorchSF')","1ff2bc4c":"dataset.PorchSF = boxcox1p(dataset.PorchSF, 0.35)","db423997":"make_continuous_plot('PoolArea')","3b1dc655":"# since there is no correlation, I'll flag it\ndataset.PoolArea = dataset.PoolArea.apply(lambda x: 1 if x > 0 else 0)","46cf9e12":"make_discrete_plot('PoolArea',0,0)","3f50910f":"make_continuous_plot('MiscVal')","7a9ae608":"dataset = dataset.drop(columns=[\"MiscVal\"])","7dceeaa5":"# To remember\n\ncat_ordinal = ['LotShape','Utilities','LandSlope','OverallQual','OverallCond','ExterQual','ExterCond',\n               'BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','HeatingQC','CentralAir',\n               'Electrical','KitchenQual','Functional','FireplaceQu','GarageFinish','GarageQual','GarageCond',\n               'PavedDrive','PoolQC','Fence']","a3963143":"# replace strings for integers, the details are in the description of the competition\n\ndict_ = {\"PoolQC\": {\"NA\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4},\n         \"Fence\": {\"NA\": 0, \"MnWw\": 1, \"GdWo\": 2, \"MnPrv\": 3, \"GdPrv\": 4},\n         \"FireplaceQu\": {\"NA\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n         \"GarageCond\": {\"NA\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n         \"GarageQual\": {\"NA\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n         \"GarageFinish\": {\"NA\": 0, \"Unf\": 1, \"RFn\": 2, \"Fin\": 3},\n         \"BsmtExposure\": {\"NA\": 0, \"No\": 1, \"Mn\": 2, \"Av\": 3, \"Gd\": 4},\n         \"BsmtCond\": {\"NA\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n         \"BsmtQual\": {\"NA\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n         \"BsmtFinType2\": {\"NA\": 0, \"Unf\": 1, \"LwQ\": 2, \"Rec\": 3, \"BLQ\": 4, \"ALQ\": 5, \"GLQ\": 6},\n         \"BsmtFinType1\": {\"NA\": 0, \"Unf\": 1, \"LwQ\": 2, \"Rec\": 3, \"BLQ\": 4, \"ALQ\": 5, \"GLQ\": 6},\n         \"Electrical\": {\"Mix\": 0, \"FuseP\": 1, \"FuseF\": 2, \"FuseA\": 3, \"SBrkr\": 4},\n         \"Functional\": {\"Sal\": 0, \"Sev\": 1, \"Maj2\": 2, \"Maj1\": 3, \"Mod\": 4, \"Min2\": 5, \"Min1\": 6, \"Typ\": 7},\n         \"KitchenQual\": {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4},\n         \"Utilities\": {\"ELO\": 0, \"NoSeWa\": 1, \"NoSewr\": 2, \"AllPub\": 3},\n         \"LotShape\": {\"IR3\": 0, \"IR2\": 1, \"IR1\": 2, \"Reg\": 3},\n         \"LandSlope\": {\"Sev\": 0, \"Mod\": 1, \"Gtl\": 2},\n         \"ExterQual\": {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4},\n         \"ExterCond\": {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4},\n         \"HeatingQC\": {\"Po\": 0, \"Fa\": 1, \"TA\": 2, \"Gd\": 3, \"Ex\": 4},\n         \"CentralAir\": {\"N\": 0, \"Y\": 1},\n         \"FireplaceQu\": {\"NA\": 0, \"Po\": 1, \"Fa\": 2, \"TA\": 3, \"Gd\": 4, \"Ex\": 5},\n         \"PavedDrive\": {\"N\": 0, \"P\": 1, \"Y\": 2}}\n\ndataset.replace(dict_, inplace=True)","881c147a":"dataset[cat_ordinal].dtypes","4be21cf1":"# one of the variables didn't change to integer, so let's change it\ndataset.BsmtCond = dataset.BsmtCond.astype(int)","8275fce4":"make_discrete_plot('LotShape',0,0)","f4c02f43":"# there few values = 0, so let's put them together with 1\ndataset.LotShape = dataset.LotShape.apply(lambda x: 1 if x == 0 else x)","0be71d84":"make_discrete_plot('LotShape',0,0)","04b0ebd6":"make_discrete_plot('Utilities',0,0)","45778c0d":"# of course we need to drop this, just one point in 1\ndataset = dataset.drop(columns='Utilities')","026812a8":"make_discrete_plot('LandSlope',0,0)","a740bc7b":"# this variable can make more sense as flag, having gentle slope or not\ndataset.LandSlope = dataset.LandSlope.apply(lambda x: 1 if x == 2 else 0)","9b46b163":"make_discrete_plot('LandSlope',0,0)","9e99dd67":"make_discrete_plot('OverallQual',0,0)","df31f76c":"# there are few values < 2, so let's put them together with 2\ndataset.OverallQual = dataset.OverallQual.apply(lambda x: 2 if x == 1 else x)","55f4fe69":"make_discrete_plot('OverallQual',0,0)","1bac2a74":"make_discrete_plot('OverallCond',0,0)","043197f1":"# there are few values <= 2, so let's put them together with 3\ndataset.OverallCond = dataset.OverallCond.apply(lambda x: 3 if x < 3 else x)","e48474d5":"make_discrete_plot('OverallCond',0,0)","0c6eb411":"make_discrete_plot('ExterQual',0,0)","7501b082":"make_discrete_plot('ExterCond',0,0)","883f91ea":"# there are few values < 1, so let's put them together w1 and 0, and 4 with 3 and 2, as 1\ndataset.ExterCond = dataset.ExterCond.apply(lambda x: 0 if x == 1 else x)\ndataset.ExterCond = dataset.ExterCond.apply(lambda x: 1 if x >= 2 else x)","e0ef46a6":"make_discrete_plot('ExterCond',0,0)","ea49a4f5":"make_discrete_plot('BsmtQual',0,0)","6a426ae5":"make_discrete_plot('BsmtCond',0,0)","c2579032":"# there are few values = 1, so let's put them together with 0\ndataset.BsmtCond = dataset.BsmtCond.apply(lambda x: 0 if x == 1 else x)","7c96b0d0":"make_discrete_plot('BsmtCond',0,0)","c3dc1d16":"make_discrete_plot('BsmtExposure',0,0)","f2dfdc85":"make_discrete_plot('BsmtFinType1',0,0)","42ca8714":"# not many difference here between categories, so let's turn into string and later get dummies\ndataset.BsmtFinType1 = dataset.BsmtFinType1.astype(str)","a0b5df30":"make_discrete_plot('BsmtFinType2',0,0)","f54db0c0":"# not many difference here between categories, so let's turn into string and later get dummies\ndataset.BsmtFinType2 = dataset.BsmtFinType2.astype(str)","c7da8d4f":"make_discrete_plot('HeatingQC',0,0)","1df65494":"# There are few values = 0, so I will put together with 1\ndataset.HeatingQC = dataset.HeatingQC.apply(lambda x: 1 if x == 0 else x)","bdef006f":"make_discrete_plot('HeatingQC',0,0)","11d13501":"make_discrete_plot('CentralAir',0,0)","434880a9":"make_discrete_plot('Electrical',0,0)","1b484000":"# There are few values < 2, so I will put together with 2\ndataset.Electrical = dataset.Electrical.apply(lambda x: 2 if x < 2 else x)","f1491010":"make_discrete_plot('Electrical',0,0)","71bf12e3":"make_discrete_plot('KitchenQual',0,0)","f52be0d3":"make_discrete_plot('Functional',0,0)","4ce4ef54":"# There are few values = 1, so I will put together with 2\ndataset.Functional = dataset.Functional.apply(lambda x: 2 if x < 2 else x)","100245a9":"make_discrete_plot('Functional',0,0)","cd5c6081":"# not many difference here between categories, so let's turn into string and later get dummies\ndataset.Functional = dataset.Functional.astype(str)","86545950":"make_discrete_plot('FireplaceQu',0,0)","96ae188d":"make_discrete_plot('GarageFinish',0,0)","6f269fae":"make_discrete_plot('GarageQual',0,0)","635d1f62":"# There are few values > 4, so I will put together with 4 and 1 with 0\ndataset.GarageQual = dataset.GarageQual.apply(lambda x: 0 if x == 1 else x)\ndataset.GarageQual = dataset.GarageQual.apply(lambda x: 4 if x == 5 else x)","7c1518c8":"make_discrete_plot('GarageQual',0,0)","c70b39fd":"make_discrete_plot('GarageCond',0,0)","d03ca746":"# There are few values > 3, so I will put together with 4 and 1 with 0\ndataset.GarageCond = dataset.GarageCond.apply(lambda x: 0 if x == 1 else x)\ndataset.GarageCond = dataset.GarageCond.apply(lambda x: 3 if x > 3 else x)","9b67b293":"make_discrete_plot('GarageCond',0,0)","a52c7414":"# not many difference here between categories, so let's turn into string and later get dummies\ndataset.GarageCond = dataset.GarageCond.astype(str)","dc63c3cf":"make_discrete_plot('PavedDrive',0,0)","95393799":"make_discrete_plot('PoolQC',0,0)","684d5f59":"# not so many points for values > 0\ndataset = dataset.drop(columns='PoolQC')","e282df40":"make_discrete_plot('Fence',0,0)","9cfc957a":"# not many difference here between categories, so let's turn into string and later get dummies\ndataset.Fence = dataset.Fence.astype(str)","8e3a7525":"# To remember\n\ncat_nominal = ['MSSubClass','MSZoning','Street','Alley','LandContour','LotConfig','Neighborhood',\n               'Condition1','Condition2','BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st',\n               'Exterior2nd','MasVnrType','Foundation','Heating','GarageType','MiscFeature',\n               'SaleType','SaleCondition']","ea7f27c4":"make_discrete_plot('MSSubClass',0,0)","106583a6":"# this variable has integer values, but in fact they need to be categories as strings\ndataset.MSSubClass = dataset.MSSubClass.astype(str)","dd576b66":"make_discrete_plot('MSZoning',0,0)","f0d80ecb":"make_discrete_plot('Street',0,0)","c61c5180":"# few values for Grvl\ndataset = dataset.drop(columns='Street')","57e93768":"make_discrete_plot('Alley',0,0)","229c214d":"make_discrete_plot('LandContour',0,0)","b3dc9932":"make_discrete_plot('LotConfig',0,0)","3d53aed3":"# few values = FR3, so I'll decide to put together with FR2\ndataset.LotConfig = dataset.LotConfig.apply(lambda x: 'FR2' if x == 'FR3' else x)","458898bc":"make_discrete_plot('LotConfig',0,0)","2b8b6618":"make_discrete_plot('Neighborhood',45,45)","48eaf519":"make_discrete_plot('Condition1',0,0)","33558a51":"# I'll cluster RRs\ndataset.Condition1 = dataset.Condition1.apply(lambda x: 'RRs' if (x == 'RRNe' or x == 'RRAe' or x == 'RRNn' or x == 'RRAn') else x)","0a7ce690":"make_discrete_plot('Condition1',0,0)","f0adcc1b":"make_discrete_plot('Condition2',0,0)","f032bb13":"# most of the values are in Norm\ndataset = dataset.drop(columns='Condition2')","0beceea8":"make_discrete_plot('BldgType',0,0)","8ce62062":"make_discrete_plot('HouseStyle',0,0)","9cc38c8d":"make_discrete_plot('RoofStyle',0,0)","a93c4ea7":"# few values from Gambrel to Shed, so I'll decide to put together = Other\ndataset.RoofStyle = dataset.RoofStyle.apply(lambda x: 'Other' if (x == 'Gambrel' or x == 'Mansard' or x == 'Flat' or x == 'Shed') else x)","f9aee612":"make_discrete_plot('RoofStyle',0,0)","459d4746":"make_discrete_plot('RoofMatl',0,0)","685a7fd2":"# most of the values are in CompShg, let's drop it\ndataset = dataset.drop(columns='RoofMatl')","30862b9a":"make_discrete_plot('Exterior1st',25,25)","a57610d2":"# few values from BrkComm to CBlock, so I'll decide to put together = Other\ndataset.Exterior1st = dataset.Exterior1st.apply(lambda x: 'Other' if (x == 'BrkComm' or x == 'AsphShn' or x == 'Stone' or x == 'ImStucc' or x== 'CBlock') else x)","37dc45db":"make_discrete_plot('Exterior1st',25,25)","542bb2dc":"make_discrete_plot('Exterior2nd',25,25)","ab64de4c":"# similar behavior comparing to Exterior1st\ndataset = dataset.drop(columns = 'Exterior2nd')","a3b4f72e":"make_discrete_plot('MasVnrType',0,0)","abe68e6a":"make_discrete_plot('Foundation',0,0)","6397eaa2":"# few values for Wood and Stone, so I'll decide to put together = Other\ndataset.Foundation = dataset.Foundation.apply(lambda x: 'Other' if (x == 'Wood' or x == 'Stone') else x)","1a6ec799":"make_discrete_plot('Foundation',0,0)","5fb83c20":"make_discrete_plot('Heating',0,0)","610a9678":"# few values for every category except GasA\ndataset.Heating = dataset.Heating.apply(lambda x: 1 if x == 'GasA' else 0)","82464313":"make_discrete_plot('Heating',0,0)","88626100":"make_discrete_plot('GarageType',0,0)","87339569":"make_discrete_plot('MiscFeature',0,0)","02927c85":"# few values for every category except NA\ndataset.MiscFeature = dataset.MiscFeature.apply(lambda x: 0 if x == 'NA' else 1)","5da7f55b":"make_discrete_plot('MiscFeature',0,0)","56fc34dd":"make_discrete_plot('SaleType',0,0)","d58b2ec5":"# few values for every category except WD and New\ndataset.SaleType = dataset.SaleType.apply(lambda x: x if (x == 'WD' or x == 'New') else 'Other')","69423e5e":"make_discrete_plot('SaleType',0,0)","caf983dc":"make_discrete_plot('SaleCondition',0,0)","c2da0fd5":"# few values for AdjLand, Alloca and Family\ndataset.SaleCondition = dataset.SaleCondition.apply(lambda x: x if (x == 'Normal' or x == 'Abnormal' or x == 'Partial') else 'Other')","fe7794c8":"make_discrete_plot('SaleCondition',0,0)","b9ec6dde":"dataset = dataset.reset_index(drop=True)\ndataset.shape","d00f3151":"# splitting data \nX = dataset.loc[:,dataset.columns.difference(['SalePrice', 'Id'])]\nY = dataset.SalePrice\n\nX = pd.get_dummies(X) # getting dummies","3bde4e73":"skewness = list(abs(stats.skew(X)) > 0.7)\ncounter = 0\nlambdas = [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45]\nfor i in X.columns:\n    if skewness[counter] == True:\n        idx = np.argmin([abs(stats.skew(boxcox1p(X[i], 0.1))),\n                         abs(stats.skew(boxcox1p(X[i], 0.15))),\n                         abs(stats.skew(boxcox1p(X[i], 0.2))),\n                         abs(stats.skew(boxcox1p(X[i], 0.25))),\n                         abs(stats.skew(boxcox1p(X[i], 0.3))),\n                         abs(stats.skew(boxcox1p(X[i], 0.35))),\n                         abs(stats.skew(boxcox1p(X[i], 0.4))),\n                         abs(stats.skew(boxcox1p(X[i], 0.45))),\n                         abs(stats.skew(np.log1p(X[i]))),\n                         abs(stats.skew(X[i]))])\n        if idx < 8:\n            X[i] = boxcox1p(X[i], lambdas[idx])\n        if idx == 8:\n            X[i] = np.log1p(X[i])\n    counter = counter + 1","ffcea07d":"scaler = RobustScaler()\nX = pd.DataFrame(scaler.fit_transform(X))","14095093":"# train and test\nX_train = X.iloc[0:1457].as_matrix()\nY_train = Y.iloc[0:1457].as_matrix()\nX_test = X.iloc[1457:].as_matrix()\ntest_ids = dataset.Id.iloc[1457:]","3d1a2470":"lambdas = [0.15, 0.25, 0.35, 0.45]\nidx = np.argmin([abs(stats.skew(boxcox1p(Y_train, 0.15))),\n                 abs(stats.skew(boxcox1p(Y_train, 0.25))),\n                 abs(stats.skew(boxcox1p(Y_train, 0.35))),\n                 abs(stats.skew(boxcox1p(Y_train, 0.45))),\n                 abs(stats.skew(np.log1p(Y_train)))])\nif idx < 4:\n    Y_train = boxcox1p(Y_train, lambdas[idx])\nif idx == 4:\n            Y_train = np.log1p(Y_train)","4792320d":"idx","572cc5ef":"lasso = Lasso(alpha= 0.0005) # alpha was obtained with GridSearchCV","855be6be":"elastic = ElasticNet(alpha=0.0005, l1_ratio=.9)  # parameters was obtained with GridSearchCV","e79118b5":"\"\"\"\n\nk_ridge = KernelRidge()\n\nparam_grid = {'alpha': [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],\n              'kernel':['polynomial'], \n              'degree':[2,3,4,5,6,7,8],\n              'coef0':[0,1,1.5,2,2.5,3,3.5,10]}\n\nk = GridSearchCV(k_ridge, \n                 param_grid = param_grid, \n                 cv = 10, \n                 scoring = \"neg_mean_squared_error\", \n                 n_jobs = -1, \n                 verbose = 1)\n\nk.fit(X_train,Y_train)\n\nk_best = k.best_estimator_\n\nk.best_score_\n\n\"\"\"","fb15470b":"k_ridge = KernelRidge(alpha=0.1, coef0=2.5, degree=3, gamma=None, kernel='polynomial',\n            kernel_params=None)","dea1cc2d":"\"\"\"\n\nGBMR = GradientBoostingRegressor()\n\nGBMR_param_grid = {'loss': ['huber'],\n                   'n_estimators':[3000,3300], \n                   'learning_rate':[0.01],\n                   'max_depth':[3,5], \n                   'max_features':[18,20],\n                   'min_samples_leaf':[2,3], \n                   'min_samples_split':[3,5]}\n\ngsGBMR = GridSearchCV(GBMR, \n                      param_grid = GBMR_param_grid, \n                      cv = 5, \n                      scoring = \"neg_mean_squared_error\", \n                      n_jobs = -1, \n                      verbose = 1)\n\ngsGBMR.fit(X_train,Y_train)\n\nGBMR_best = gsGBMR.best_estimator_\n\ngsGBMR.best_score_\n\n\"\"\"","9db8225f":"g_boost = GradientBoostingRegressor(alpha=0.9, criterion='friedman_mse',\n                          init=None, learning_rate=0.01, loss='huber',\n                          max_depth=3, max_features=18, max_leaf_nodes=None,\n                          min_impurity_decrease=0.0, min_impurity_split=None,\n                          min_samples_leaf=3, min_samples_split=5,\n                          min_weight_fraction_leaf=0.0, n_estimators=3300,\n                          n_iter_no_change=None,random_state=None, subsample=1.0, tol=0.0001,\n                          validation_fraction=0.1, verbose=0, warm_start=False)","0b07bfbe":"\"\"\"\n\nXGBMR = XGBRegressor()\n\nXGBMR_param_grid = {'learning_rate': [0.001,0.01,0.1], \n                  'max_depth': [3,4,7],\n                  'n_estimators': [3300,4000], \n                  'gamma': [0],\n                  'subsample': [0.3,0.5,0.8]}\n\ngsXGBMR = GridSearchCV(XGBMR, \n                      param_grid = XGBMR_param_grid, \n                      cv = 5, \n                      scoring = \"neg_mean_squared_error\", \n                      n_jobs = -1, \n                      verbose = 1)\n\ngsXGBMR.fit(X_train,Y_train)\n\nXGBMR_best = gsXGBMR.best_estimator_\n\ngsXGBMR.best_score_\n\n\"\"\"","d96d3ae0":"xg_boost = XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0,\n             importance_type='gain', learning_rate=0.01, max_delta_step=0,\n             max_depth=4, min_child_weight=1, missing=None, n_estimators=3300,\n             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n             silent=None, subsample=0.3, verbosity=1)","1412099d":"'''\n\nLGBMR = LGBMRegressor()\n\nLGBMR_param_grid = {'objective':['regression','dart','goss','rf'],\n                    'num_leaves':[7],\n                    'learning_rate':[0.01], \n                    'n_estimators': [3300],\n                    'max_depth':[4], \n                    'max_bin': [65],\n                    'bagging_fraction':[0.6],\n                    'bagging_freq':[9], \n                    'feature_fraction':[0.1],\n                    'feature_fraction_seed':[1],\n                    'bagging_seed':[14],\n                    'min_data_in_leaf':[5], \n                    'min_sum_hessian_in_leaf':[5],\n                    'colsample_bytree':[0],\n                    'reg_alpha':[0.2],\n                    'reg_lambda':[0.1]}\n\ngsLGBMR = GridSearchCV(LGBMR, \n                      param_grid = LGBMR_param_grid, \n                      cv = 10, \n                      scoring = \"neg_mean_squared_error\", \n                      n_jobs = -1, \n                      verbose = 1)\n\ngsLGBMR.fit(X_train,Y_train)\n\nLGBMR_best = gsLGBMR.best_estimator_\n\ngsLGBMR.best_score_\n\n'''","810a011b":"lgbm = LGBMRegressor(bagging_fraction=0.6, bagging_freq=9, bagging_seed=14,\n              boosting_type='gbdt', class_weight=None, colsample_bytree=0,\n              feature_fraction=0.1, feature_fraction_seed=1,\n              importance_type='split', learning_rate=0.01, max_bin=65,\n              max_depth=4, min_child_samples=20, min_child_weight=0.001,\n              min_data_in_leaf=5, min_split_gain=0.0, min_sum_hessian_in_leaf=5,\n              n_estimators=3300, n_jobs=-1, num_leaves=7,\n              objective='regression', random_state=None, reg_alpha=0.2,\n              reg_lambda=0.1, silent=True, subsample=1.0,\n              subsample_for_bin=200000, subsample_freq=0)","22f86ee9":"stacking = StackingRegressor(regressors=(elastic, g_boost, k_ridge),\n                             meta_regressor = lasso)\n\nparam_grid = {} \n\nstack = GridSearchCV(stacking, \n                   param_grid = param_grid,\n                   cv = 10, \n                   scoring = \"neg_mean_squared_error\",\n                   n_jobs = 5, \n                   verbose = 1)\n\nstack.fit(X_train,Y_train)\n\ns_best = stack.best_estimator_\n\nstack.best_score_","337762c5":"stacking = s_best","f1c9e900":"voting = VotingRegressor(estimators=[('xgboost', xg_boost), \n                                     ('lgbm', lgbm),\n                                     ('stacking', stacking)])\n\nv_param_grid = {} # tuning voting parameter\n\ngsV = GridSearchCV(voting, \n                   param_grid = v_param_grid,\n                   cv = 10, \n                   scoring = \"neg_mean_squared_error\",\n                   n_jobs = 5, \n                   verbose = 1)\n\ngsV.fit(X_train,Y_train)\n\nv_best = gsV.best_estimator_\n\ngsV.best_score_","7d78801c":"voting = v_best","97f60570":"# Voting\ny_vote = np.expm1(voting.predict(X_test))\n\n# Lasso\nlasso.fit(X_train,Y_train)\ny_lasso = np.expm1(lasso.predict(X_test))","4103ad1c":"y_pred =(0.6*y_vote + 0.4*y_lasso)","8f580e50":"submission = pd.DataFrame(test_ids.values, columns = [\"Id\"])\nsubmission['SalePrice'] = list(y_pred)\nsubmission.to_csv('submission.csv',index=False)","f4846840":"> Rates the overall material and finish of the house.","993bf7f7":"> Pool quality.","7fb50744":"### HouseStyle\n","b0bb5b24":"# 3-Replace NaN's","ce025dc1":"# 1-Split variables in numerical (discrete, continuous) and categorical (ordinal, nominal)","fc086258":"> Year Sold (YYYY).","4c7c4f5f":"### GarageCars","7c8792e5":"## Lasso","9490b988":"![Skewness](https:\/\/www.oreilly.com\/library\/view\/statistical-inference-a\/9781118309803\/images\/c03\/nfg005.gif)","64dca3a8":"> First, let's map all the missing data and then fill them based on median (if continuous) or mode (otherwise) or NA (if written in description).","8b245e65":"> As we can see there are two outliers with low price for **GrLivArea**, let's remove them.","4ff18e75":"> Size of garage in car capacity.","3071c95a":"> Unfinished square feet of basement area.","a2dac525":"### LandSlope\n","3950f7ae":"> General shape of property.","6e5f9891":"> Remodel date (same as construction date if no remodeling or additions).","9e0e8d25":"> Type of alley access.","12c645ed":"### LandContour\n","81db7184":"> Rates the overall condition of the house.","a5c60671":"### Neighborhood\n","b659efb3":"> For the target variable, the log transformation is better.","01220fcc":"### Exterior1st\n","267f536f":"### MSSubClass\n","25799f78":"## Continuous Variables","c3f04fd8":"> Pool area in square feet.","46409b36":"> Proximity to main road or railroad.","6c7e0e9b":"> Slope of property.","2cd9c1e4":"> Analyzing skewness and replacing column with the best transformation (boxcox with different lambdas, log or keep the column as it is).","0e6be73e":"![Stacking Method](https:\/\/miro.medium.com\/max\/1183\/0*GHYCJIjkkrP5ZgPh.png)","e22b2db9":"> Types 1 and 2 finished square feet.","ba0ab0f1":"## Elastic Net","dda31a4f":"### Utilities","a3ff22e9":"### MasVnrType\n","0d15d653":"> Here we are going to get dummies for categorical variables, split train and test sets, analyze skewness if yet present for both sets, scale the data (Robust is better for outliers) and, finally, train the model for:\n* Lasso\n* ElasticNet\n* Kernel Ridge\n* Gradient Boosting Regressor\n* XGBoost\n* Light Gradient Boosting","d2f202da":"> Type of sale.","0cb918a9":"[Documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.Lasso.html)","7fd72fef":"> Evaluates the general condition of the basement.","7aae06fe":"> So, we can see that the problem is not lack of information, but the NaN values happen just because there is no garage. Therefore, we can define them as NA.","0a8c5521":"> Here we will analyze each feature for Discrete, Continuous, Ordinal and Nominal variables.","b53d716e":"[Documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.VotingRegressor.html)","76192693":"### BsmtFinType2\n","d0b0ffa9":"### PoolQC\n","19563250":"> Above grade (ground) living area square feet.","1597bd6a":"> We can define as outliers all the values with z score > 3 or z score < 3.\nThe number of outliers of the features with, at least, weak correlation with **Sale Price** and a low % of zeros will be presented. \nThen, the scatterplots of the variables will be plotted to detect the outliers with Low Price.","72cc7dde":"### OverallCond\n","90f2e4d6":"### LowQualFinSF","ff858822":"### GarageFinish\n","db2b516a":"> Exterior covering on house.","c84dfe37":"> The building class.","2c229cef":"> Area of the Lot.","16dba075":"### SaleCondition","4c493333":"### GarageArea","162497a4":"### TotalBsmtSF","4a5eb1fb":"> Bedrooms above grade.","c6cb4ffa":"> Style of dwelling.","6467e105":"> The types of the variables can be defined based on the data description in the competition.","6d52f035":"> Number of fireplaces.","af31b966":"### BsmtUnfSF","f6eda93c":"# 6-Stacking","cf1798db":"> $Value of miscellaneous feature.","0f266e1c":"> Masonry veneer type.","9b3f98bc":"> Here we will analyze correlation with the boxplots and missing values. Clustering information when necessary from categories, decisions will be made to drop, flag or keep the column.","b4d7c7d4":"## Author: Caio Avelino\n* [LinkedIn](https:\/\/www.linkedin.com\/in\/caioavelino\/)\n* [Kaggle](https:\/\/www.kaggle.com\/avelinocaio)","d07fa9d2":"### GarageCond\n","cef52ac3":"> You will find an overview of what is done at the beginning of each part.","9a2f9a20":"> Type of heating.","6d33248e":"### KitchenQual\n","9628113b":"> The tuning parameters were obtained from GridSearchCV.","7086e304":"> Type of dwelling.","3a1c5123":"### OpenPorchSF, EnclosedPorch, 3SsnPorch and ScreenPorch","37a3fe28":"### Fence","d3491c61":"> Here I decided to choose some models to be regressors and lasso to be the meta regressor. Lasso seems to be a good model for this competition, thats why it will be the meta.","d12cf5e4":"> Interior finish of the garage.","8d6decf9":"# 7-Voting","e903a3f1":"### Alley\n","5fde6ce3":"### LotArea","c772eaeb":"> First and Second Floors square feet.","cbad2e59":"# 8-Submission","c63d35ec":"### GarageType\n","a161c0e2":"### GarageYrBlt","159cc3f5":"> Masonry veneer area in square feet.","32a1b02c":"> Scaling with RobustScaler (better for treating outliers). You can see the types of Scaling in the link below.\n* [Types of Scaling](http:\/\/benalexkeen.com\/feature-scaling-with-scikit-learn\/)","80530e01":"### ExterCond\n","c3697de1":"> Garage condition.","c9e8cbe9":"> A voting regressor is an ensemble meta-estimator that fits base regressors each on the whole dataset. It, then, averages the individual predictions to form a final prediction.","55c987d3":"> Original construction date.","284b1c56":"> Miscellaneous feature not covered in other categories.","065447bd":"### FireplaceQu\n","e644efc0":"> Number of bathrooms.","fba6a1ef":"> Physical locations within Ames city limits.","6d360f4b":"### Condition1\n","54978116":"> If Central air conditioning is present.","80703838":"[Documentation](http:\/\/rasbt.github.io\/mlxtend\/user_guide\/regressor\/StackingRegressor\/)","0e153819":"> GridSearch for GBR.","b1bf548a":"### MiscVal","f77a1958":"## Ordinal Variables","cd48a195":"> GridSearch for XGBoost.","a47b5c36":"> Home functionality (Assume typical unless deductions are warranted).","11a12c4f":"### BsmtFullBath, BsmtHalfBath, FullBath, HalfBath","00df6088":"> Garage Quality.","2d390480":"> Here, we will first change the strings by integers, because the variables are ordinal, we can't get dummies unless the correlation with SalePrice is very low. We are going to make decisions based on correlation, missing values and so on.","1fe2f2ba":"# 5-Train Model","1450f3a5":"> Here I used the other models not yet trained to be combined with the Stacking Regressor and make a powerful one, using the Voting Regressor.","2242395d":"### Heating\n","0aa5f66b":"### LotConfig\n","aada41fa":"> Garage type.","2c5e4352":"> Roof material.","917be909":"# 0-Libraries and Data Loading","bf656ef1":"### BldgType\n","245402b1":"> Flatness of the property.","8bf285ad":"### OverallQual\n","5f8163e6":"### MoSold","30067379":"> Type of Paved driveway.","6413920b":"[Image Source](https:\/\/medium.com\/@rrfd\/boosting-bagging-and-stacking-ensemble-methods-with-sklearn-and-mlens-a455c0c982de)","9269839f":"![Variable Types](http:\/\/survivestatistics.com\/wp-content\/uploads\/2016\/07\/variables3.jpg)","e75e608d":"### Fireplaces","785f23cf":"### RoofMatl\n","56578603":"> Refers to walkout or garden level walls.","30e39bee":"> Year garage was built.","f6330cb9":"> Lot configuration.","cd3a0c3d":"> Evaluates the height of the basement.","00333de0":"### PoolArea","b24274a1":"> Ok, now it's enough. We can't delete a lot of outliers, because it can affect the results.","6c92f350":"> GridSearch for Light GBM.","cdb5b085":"> So, we can see that the problem is not lack of information for MasVnrArea, but the NaN values happen just because there is no Masonry veener. Therefore we can define them as 0.","9f105a89":"## GBR","d0153f1d":"> Special cases:","b6fddb02":"[Image Source](http:\/\/survivestatistics.com\/variables\/) ","aebdb0d7":"> Porch areas in square feet.","5ae69b0b":"> Fireplace quality.","74e7a29c":"> Type of road access.","9b5c6507":"> I'll use the best models and put weight on their predictions.","ed39ad6c":"### YrSold","9eb93139":"> GridSearch for Ridge.","c72f6ebe":"> Kitchens above grade.","653cc960":"> Linear feet of street connected to property.","97f38ace":"[Documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.ElasticNet.html)","84485e3b":"## XGBoost","2202d4da":"> Type of roof.","a073f9ee":"### SaleType\n","6a0bed2b":"[Documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.kernel_ridge.KernelRidge.html)","267bdee7":"# 2-Remove outliers with Low Price","a2894273":"### BsmtQual\n","a563fd34":"[Documentation](https:\/\/dask-ml.readthedocs.io\/en\/stable\/modules\/generated\/dask_ml.xgboost.XGBRegressor.html)","df0f17dc":"### Condition2\n","74e39573":"### YearRemodAdd","d7299353":"### BsmtCond\n","302bb67b":"# 4-Exploratory Analysis and Data Cleaning","2d1ca119":"### Exterior2nd\n","6a7a2ff6":"> Rating of basement finished area.","ef1f721b":"> Evaluates the quality of the material on the exterior.","745f8924":"### HeatingQC\n","1fd2c074":"> Wood deck area in square feet.","a3f4463e":"> Let's concatenate train and test sets into one, so we can analyze everything and fill NaN's based on all dataset.","b3cc5a86":"### Functional\n","7832ff8c":"> Fence quality.","9b354933":"> Type of utilities available.","65c94fce":"### KitchenAbvGr","b96cb5cd":"## Nominal Variables","ec855d5c":"> Low quality finished square feet (all floors).","da44357d":"[Image Source](https:\/\/www.oreilly.com\/library\/view\/statistical-inference-a\/9781118309803\/c03anchor-8.html)","95cfb055":"### PavedDrive\n","8f76ebfb":"## Discrete Variables","df12bd26":"### GarageQual\n","32bdd3eb":"### BsmtFinSF1 and BsmtFinSF2","2a91b4dc":"### RoofStyle\n","9f9b7368":"### ExterQual\n","39b6907b":"> Type of foundation.","0b981d64":"### LotFrontage","141346d7":"### MSZoning\n","19baa72d":"> We can see another strange outlier for **Lot Frontage**. It will be deleted as well.","2280d599":"### Foundation\n","ff64195c":"## Light GBM","a76f3fd9":"> Proximity to main road or railroad (if a second is present).","1357f5fe":"### BedroomAbvGr","06a0aff6":"## Kernel Ridge","9565902c":"### MiscFeature\n","38c37c6a":"> Heating quality and condition.","8abb1e90":"> Total rooms above grade (does not include bathrooms).","1bdb6ca4":"> Kitchen quality.","e9046a95":"### GrLivArea","e9a8db33":"### CentralAir\n","d12972f2":"### Electrical\n","afceaa96":"### MasVnrArea","374511a0":"[Documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.GradientBoostingRegressor.html)","8c6d867d":"> Evaluates the present condition of the material on the exterior.","966669ea":"### BsmtExposure\n","4fdddaae":"### LotShape\n","e4bdc3b5":"> Exterior covering on house (if more than one material).","ea323fda":"### If you made it this so far, let me know if you have questions, suggestions or critiques to improve the models. Thanks a lot!","43acbf37":"### BsmtFinType1\n","2459231c":"> Here we are going to analyze correlation of each feature with SalePrice, see skewness for linear and boxcox transformations (with different lambdas) e apply the better one. If skewness continues high, we will bin the variable into categories or flag (0 and 1). And if there are missing values, we will drop the column.","e3dc9a85":"> Same skewness analysis for target variable. ","40184605":"### 1stFlrSF and 2ndFlrSF","04748ff9":"### TotRmsAbvGrd","d5728562":"## Project Phases:\n> \n* **0) Libraries and Data Loading**\n* **1) Split variables in numerical (discrete, continuous) and categorical (ordinal, nominal)**\n* **2) Remove outliers with Low Price**\n* **3) Replace NaN's**\n* **4) Exploratory Analysis and Data Cleaning**\n* **5) Train Model**\n* **6) Stacking**\n* **7) Voting**\n* **8) Submission**","cd94d6d0":"> Electrical system.","31a01274":"### Street\n","2d06bbcb":"### WoodDeckSF","db6351b1":"> We will analyze each discrete variable individually and make decisions based on correlation with SalePrice, lack of information in each category and so on.","69cee316":"[Documentation](https:\/\/lightgbm.readthedocs.io\/en\/latest\/pythonapi\/lightgbm.LGBMRegressor.html#lightgbm.LGBMRegressor)","c7d681b9":"> Month Sold (MM).","5fb98842":"> Condition of Sale.","a6fb6068":"### YearBuilt","b7ca3928":"> Area of the garage.","cf481cd3":"> The general zoning classification.","b7dddc12":"> Total square feet of basement area.","11f2b7d8":"> Quality of second finished area (if present)."}}