{"cell_type":{"01bf01fa":"code","e78572be":"code","dd636462":"code","2bad5cd4":"code","96c96a15":"code","fc4a48e5":"code","c5027b38":"code","cf90e859":"code","df459f08":"code","c9b7f661":"code","ae2dfb61":"code","c76f0462":"code","2fd6e658":"markdown","3fa22d58":"markdown","44d29b9d":"markdown","1c5513f2":"markdown","0d8a4bb9":"markdown","1bd8de73":"markdown","4d3891b7":"markdown","61f7b3a3":"markdown","1b0e565a":"markdown"},"source":{"01bf01fa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e78572be":"train = pd.read_csv(\"\/kaggle\/input\/random-linear-regression\/train.csv\")\ntrain.head(10)","dd636462":"print(train.shape)","2bad5cd4":"train.isna().sum()","96c96a15":"train = train.dropna()\nprint(train.shape)","fc4a48e5":"test = pd.read_csv(\"\/kaggle\/input\/random-linear-regression\/test.csv\")\n                   \nprint(test.shape)\ntest.head(10)","c5027b38":"x_train = train[\"x\"].values.reshape(-1,1)\ny_train = train[\"y\"]\n\nx_test = test[\"x\"].values.reshape(-1,1)\ny_test = test[\"y\"]","cf90e859":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.figure(figsize=(8,4))\nplt.title(\"Training Set\")\nplt.scatter(x_train,y_train,c = \"b\")\n\nplt.figure(figsize=(8,4))\nplt.title(\"Testing Set\")\nplt.scatter(x_test,y_test, c=\"red\")","df459f08":"from sklearn.preprocessing import StandardScaler\n\nsc_X = StandardScaler()\n\nx_train = sc_X.fit_transform(x_train)\nx_test = sc_X.transform(x_test)","c9b7f661":"from sklearn.linear_model import LinearRegression\nmodel = LinearRegression(fit_intercept=True, normalize=True,copy_X=True,n_jobs=-1)\n\nmodel.fit(x_train, y_train)","ae2dfb61":"accuracy = model.score(x_test,y_test)\nprint(accuracy)","c76f0462":"plt.figure(figsize=(8,4))\nplt.title(\"Training set\")\nplt.scatter(x_train, y_train)\nplt.plot(x_train, model.predict(x_train), c='red')\n\nplt.figure(figsize=(8,4))\nplt.title(\"Testing set\")\nplt.scatter(x_test, y_test)\nplt.plot(x_test, model.predict(x_test), c='red')","2fd6e658":"**Read the test data**","3fa22d58":"**Let's Standardize our values**","44d29b9d":"**Drop the NA values**","1c5513f2":"**Plot train-test**","0d8a4bb9":"****Check for Null Values****","1bd8de73":"**Train the Model**","4d3891b7":"**Process (x,y) to (train,test)**","61f7b3a3":"**Calculate the accuracy**","1b0e565a":"**Plot the values**"}}