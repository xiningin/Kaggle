{"cell_type":{"e52b507c":"code","f6cc643c":"code","47bbc986":"code","2b9ed390":"code","8fbf966f":"code","882b3df9":"code","c3d301b0":"code","74310a40":"code","490ed932":"code","27a15cd9":"code","5396f4fa":"code","40bc8e9e":"code","3f894c6f":"code","7ca89f8b":"code","8bf46a74":"code","d4c23286":"code","19d35df5":"code","80ab1d1a":"code","1dd7ad37":"code","85fece4a":"code","67c8a7d6":"code","2bacaf15":"code","ac1951e7":"code","3c5911b1":"code","44dd9a6d":"code","5b43738f":"code","f740578c":"code","441843e8":"code","6b1a3778":"code","551f35f6":"code","309aa51a":"code","10e61bbd":"code","86cc6f0a":"code","5e065491":"code","d684781c":"code","f49cf481":"code","ae8f2eb5":"code","df457077":"code","143cccfb":"markdown","ffc27279":"markdown"},"source":{"e52b507c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom numpy import cov\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f6cc643c":"nRowsRead = 12203 # specify 'None' if want to read whole file\n# alexa.com_site_info.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf = pd.read_csv('\/kaggle\/input\/sites-information-data-from-alexacom-dataset\/alexa.com_site_info.csv', delimiter=',', nrows = nRowsRead)\ndf.dataframeName = 'alexa.com_site_info.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","47bbc986":"def display_plot(item_1, item_2):\n    x = df[item_1]\n    y = df[item_2]\n#     colors = (0, 0, 0)\n    area = np.pi * 3\n\n    # Plot\n    plt.scatter(x, y, s=area, alpha=0.5)\n\n    plt.title('Comaparison dataset columns')\n    plt.xlabel(item_1)\n    plt.ylabel(item_2)\n\n    plt.plot()\n    plt.show()\n    ","2b9ed390":"display_plot('comparison_metrics_data_bounce_rate_this_site_percentage', 'comparison_metrics_data_bounce_rate_comp_avg_percentage')","8fbf966f":"display_plot('comparison_metrics_search_traffic_this_site_percentage', 'comparison_metrics_data_bounce_rate_this_site_percentage')","882b3df9":"display_plot('comparison_metrics_search_traffic_this_site_percentage', 'comparison_metrics_data_sites_linking_in_this_site_percentage')","c3d301b0":"display_plot('keyword_opportunities_breakdown_optimization_opportunities', 'keyword_opportunities_breakdown_keyword_gaps')","74310a40":"display_plot('keyword_opportunities_breakdown_optimization_opportunities', 'keyword_opportunities_breakdown_buyer_keywords')","490ed932":"display_plot('keyword_opportunities_breakdown_easy_to_rank_keywords', 'keyword_opportunities_breakdown_keyword_gaps')","27a15cd9":"display_plot('keyword_opportunities_breakdown_buyer_keywords', 'keyword_opportunities_breakdown_easy_to_rank_keywords')","5396f4fa":"display_plot('This_site_rank_in_global_internet_engagement', 'comparison_metrics_data_bounce_rate_this_site_percentage')","40bc8e9e":"display_plot('This_site_rank_in_global_internet_engagement', 'keyword_opportunities_breakdown_keyword_gaps')","3f894c6f":"display_plot('This_site_rank_in_global_internet_engagement', 'keyword_opportunities_breakdown_buyer_keywords')","7ca89f8b":"display_plot('This_site_rank_in_global_internet_engagement', 'keyword_opportunities_breakdown_easy_to_rank_keywords')","8bf46a74":"display_plot('This_site_rank_in_global_internet_engagement', 'comparison_metrics_data_bounce_rate_comp_avg_percentage')","d4c23286":"display_plot('keyword_opportunities_breakdown_easy_to_rank_keywords', 'keyword_opportunities_breakdown_buyer_keywords')\ndisplay_plot('all_topics_keyword_gaps_Avg_traffic_parameter_3', 'all_topics_buyer_keywords_Avg_traffic_parameter_4')\n\n# x = df['This_site_rank_in_global_internet_engagement']\n# y = df['all_topics_easy_to_rank_keywords_relevance_to_site_parameter_1']\n# plt.plot(x, y)\ndisplay_plot('This_site_rank_in_global_internet_engagement', 'all_topics_easy_to_rank_keywords_relevance_to_site_parameter_1')\n\ndisplay_plot('keyword_opportunities_breakdown_optimization_opportunities', 'keyword_opportunities_breakdown_keyword_gaps')\ndisplay_plot('keyword_opportunities_breakdown_keyword_gaps', 'keyword_opportunities_breakdown_buyer_keywords')\ndisplay_plot('comparison_metrics_data_sites_linking_in_this_site_percentage', 'comparison_metrics_data_sites_linking_in_comp_avg_percentage')\ndisplay_plot('keyword_opportunities_breakdown_buyer_keywords', 'all_topics_keyword_gaps_Avg_traffic_parameter_4')\n# display_plot('keyword_opportunities_breakdown_buyer_keywords', 'all_topics_buyer_keywords_Avg_traffic_parameter_4')\ndisplay_plot('all_topics_buyer_keywords_Avg_traffic_parameter_4', 'audience_overlap_sites_overlap_scores_parameter_4')","19d35df5":"df.boxplot()","80ab1d1a":"# df.hist()","1dd7ad37":"# Display relations between columns for neural network input\ndef display_related_columns(critical_item, item_1, item_2, item_3):\n    display_plot(critical_item, item_1)\n    display_plot(critical_item, item_2)\n    display_plot(critical_item, item_3)","85fece4a":"## neural network inputs relation for all_topics_buyer_keywords_Avg_traffic_parameter_1\ndisplay_related_columns('all_topics_buyer_keywords_Avg_traffic_parameter_1', 'all_topics_keyword_gaps_Avg_traffic_parameter_1', 'audience_overlap_sites_overlap_scores_parameter_1', 'all_topics_easy_to_rank_keywords_relevance_to_site_parameter_1')","67c8a7d6":"## neural network inputs relation for  audience_overlap_sites_overlap_scores_parameter_1\ndisplay_related_columns('audience_overlap_sites_overlap_scores_parameter_1', 'all_topics_keyword_gaps_Avg_traffic_parameter_1', 'all_topics_easy_to_rank_keywords_relevance_to_site_parameter_1', 'all_topics_buyer_keywords_Avg_traffic_parameter_1')","2bacaf15":"## neural network inputs relation for all_topics_keyword_gaps_Avg_traffic_parameter_1\ndisplay_related_columns('all_topics_keyword_gaps_Avg_traffic_parameter_1', 'all_topics_buyer_keywords_Avg_traffic_parameter_2', 'audience_overlap_sites_overlap_scores_parameter_2', 'comparison_metrics_search_traffic_Comp Avg_percentage')","ac1951e7":"## neural network inputs relation for comparison_metrics_search_traffic_Comp Avg_percentage\ndisplay_related_columns('comparison_metrics_search_traffic_Comp Avg_percentage', 'all_topics_keyword_gaps_Avg_traffic_parameter_1', 'all_topics_buyer_keywords_Avg_traffic_parameter_4', 'all_topics_easy_to_rank_keywords_relevance_to_site_parameter_1')","3c5911b1":"# dicts = df.to_dict()\n# print(dicts)\n# for item in dicts:\n#     dicts[item].apply(lambda x : str(x) = 'NaN' if str(x) == '0' else str(x))\n\n# print(dicts)\n# df['This_site_rank_in_global_internet_engagement'] = pd.to_numeric(df['This_site_rank_in_global_internet_engagement'], error='coerse')\n\n# df.describe()","44dd9a6d":"# Determine correlation between columns :\n# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    #  and ('audience_overlap_' in col or 'keyword_gaps_Avg_' in col or '_relevance_to_site_parameter_1' in col or '_keywords_Avg_traffic_parameter_2' in col or 'This_site_rank_in_global_internet_engagement' in col or 'Daily_time_on_site' in col or 'keyword_opportunities_' in col or 'keyword_gaps_search_popularity_parameter_1' in col or '_easy_to_rank_keywords_search_pop_parameter_1' in col)\n#     df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1 and ('audience_overlap_sites_overlap_scores_parameter_4' in col or '_keyword_gaps_Avg_traffic_parameter_3' in col or '_keyword_gaps_Avg_traffic_parameter_4' in col in col or 'comparison_metrics_data_' in col or '_relevance_to_site_parameter_1' in col or '_keywords_Avg_traffic_parameter_4' in col or 'rank_in_global_internet_engagement' in col or 'Daily_time_on_site' in col or 'keyword_opportunities_' in col or 'keyword_gaps_search_popularity_parameter_1' in col or '_easy_to_rank_keywords_search_pop_parameter_1' in col)]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\nplotCorrelationMatrix(df, 14)\ndf.corr()\ndf_corr = df.corr(method ='pearson')\n# df_corr\n\n# Find maximum correlation between 2 columns\n\nnumeric_columns = []\nstr_counter = 0\nfor item in df:\n    try:\n        y = 0\n        x = df[item][1] * 2\n        z = x + y\n        numeric_columns.append(item)\n    except:\n        str_counter += 1\nprint(str_counter)\n\nfor i in range(len(numeric_columns)):\n    for j in range(i + 1, len(numeric_columns) - 1):\n        if df[numeric_columns[i]].corr(df[numeric_columns[j]]) > 0.5 and df[numeric_columns[i]].corr(df[numeric_columns[j]]) < 0.6 and numeric_columns[i].split('parameter_')[0] not in numeric_columns[j]:\n            print(numeric_columns[i] , numeric_columns[j], str(df[numeric_columns[i]].corr(df[numeric_columns[j]])))\n        ","5b43738f":"x = np.sort(df['all_topics_keyword_gaps_Avg_traffic_parameter_1'])\ny = np.sort(df['all_topics_buyer_keywords_Avg_traffic_parameter_2'])\nplt.xlabel('all_topics_keyword_gaps_Avg_traffic_parameter_1')\nplt.ylabel('all_topics_buyer_keywords_Avg_traffic_parameter_2')\nplt.plot(x, y)\ndf['all_topics_keyword_gaps_Avg_traffic_parameter_1'] = np.sort(df['all_topics_keyword_gaps_Avg_traffic_parameter_1'])\ndf['all_topics_buyer_keywords_Avg_traffic_parameter_2'] = np.sort(df['all_topics_buyer_keywords_Avg_traffic_parameter_2'])\ndf['audience_overlap_sites_overlap_scores_parameter_1'] = np.sort(df['audience_overlap_sites_overlap_scores_parameter_1'])                                                                  \ndf['all_topics_easy_to_rank_keywords_relevance_to_site_parameter_1'] = np.sort(df['all_topics_easy_to_rank_keywords_relevance_to_site_parameter_1'])\n\ndf[['all_topics_keyword_gaps_Avg_traffic_parameter_1', 'all_topics_buyer_keywords_Avg_traffic_parameter_2','audience_overlap_sites_overlap_scores_parameter_1', 'all_topics_easy_to_rank_keywords_relevance_to_site_parameter_1']].plot()","f740578c":"df['This_site_rank_in_global_internet_engagement'] = np.sort(df['This_site_rank_in_global_internet_engagement'])\ndf['Daily_time_on_site'] = np.sort(df['Daily_time_on_site'])\n\n# df.hist(column ='This_site_rank_in_global_internet_engagement', by ='Daily_time_on_site')","441843e8":"df.head(20)","6b1a3778":"\nnumeric_columns = []\nstr_counter = 0\nfor item in df:\n    try:\n        y = 0\n        x = df[item][1] * 2\n        z = x + y\n        numeric_columns.append(item)\n    except:\n        str_counter += 1\nprint(str_counter)\n\nfor i in range(len(numeric_columns)):\n    for j in range(i + 1, len(numeric_columns) - 1):\n        if df[numeric_columns[i]].corr(df[numeric_columns[j]]) > 0.6 and numeric_columns[i].split('r_')[0] not in numeric_columns[j]:\n            print(numeric_columns[i], numeric_columns[j], )\n            print(df[numeric_columns[i]].corr(df[numeric_columns[j]]))","551f35f6":"# all_topics_keyword_gaps_Avg_traffic_parameter_2 all_topics_buyer_keywords_Avg_traffic_parameter_3","309aa51a":"df.isnull().sum()","10e61bbd":"values = {'all_topics_keyword_gaps_Avg_traffic_parameter_2': int(df['all_topics_buyer_keywords_Avg_traffic_parameter_3'].mean()), 'all_topics_buyer_keywords_Avg_traffic_parameter_3': int(df['all_topics_buyer_keywords_Avg_traffic_parameter_3'].mean())}\nvalues","86cc6f0a":"df = df.fillna(value=values)\ndf","5e065491":"df.isnull().sum()","d684781c":"def create_plot(item_1, item_2):\n    colors = (0,0,0)\n    area = np.pi*3\n    plt.subplots_adjust(hspace=0.5, wspace=0.5)\n    plt.gcf().set_size_inches(plt.gcf().get_size_inches()[0]*2, plt.gcf().get_size_inches()[1]*2, forward=True)\n    # Plot\n    # plt.subplot(8, 4, 1)\n    plt.scatter(df[item_1], df[item_2])\n    plt.xlabel(item_1)\n    plt.ylabel(item_2)\n\ncreate_plot('all_topics_keyword_gaps_Avg_traffic_parameter_2', 'all_topics_buyer_keywords_Avg_traffic_parameter_3')","f49cf481":"new_df  = df[['all_topics_keyword_gaps_Avg_traffic_parameter_2', 'all_topics_buyer_keywords_Avg_traffic_parameter_3']]\nnew_df","ae8f2eb5":"### find perfect theta_0 and theta_1\n\ntheta_0 = -5.0625;\ntheta_1 = 0.20625;\ny_pred = theta_0 + theta_1*new_df['all_topics_buyer_keywords_Avg_traffic_parameter_3'];\n\nnp.square(np.subtract(new_df['all_topics_keyword_gaps_Avg_traffic_parameter_2'],y_pred)).mean()\/2","df457077":"plt.scatter(new_df['all_topics_buyer_keywords_Avg_traffic_parameter_3'], new_df['all_topics_keyword_gaps_Avg_traffic_parameter_2'])\nplt.plot(new_df['all_topics_buyer_keywords_Avg_traffic_parameter_3'] , y_pred, color = \"g\") \nplt.show()","143cccfb":"# Predict model in line","ffc27279":"****"}}